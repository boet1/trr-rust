// MIR for `cpi_redeem_reserve_liquidity_from_invest` after PreCodegen

fn cpi_redeem_reserve_liquidity_from_invest(_1: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_invest::Invest<'_>>, _2: &mut cpi_mem::CpiMemoryLender<'_>, _3: u8, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug cpi => _2;
    debug base_vault_authority_bump => _3;
    debug collateral_amount => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: &kamino_lending::accounts::RedeemReserveCollateral;
    let _7: kamino_lending::accounts::RedeemReserveCollateral;
    let mut _8: anchor_lang::prelude::Pubkey;
    let mut _9: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _10: anchor_lang::prelude::Pubkey;
    let mut _11: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: anchor_lang::prelude::Pubkey;
    let mut _13: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _14: anchor_lang::prelude::Pubkey;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: anchor_lang::prelude::Pubkey;
    let mut _17: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _18: anchor_lang::prelude::Pubkey;
    let mut _19: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: anchor_lang::prelude::Pubkey;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: anchor_lang::prelude::Pubkey;
    let mut _23: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _24: anchor_lang::prelude::Pubkey;
    let mut _25: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _26: anchor_lang::prelude::Pubkey;
    let mut _27: &anchor_lang::prelude::AccountInfo<'_>;
    let _28: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _29: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: &anchor_lang::prelude::AccountInfo<'_>;
    let _32: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _33: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _34: anchor_lang::prelude::Pubkey;
    let mut _35: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: std::option::Option<bool>;
    let _38: ();
    let mut _39: &mut [u8];
    let mut _40: &mut [u8];
    let mut _41: &mut [u8; 40];
    let mut _42: std::ops::Range<usize>;
    let mut _43: &[u8];
    let mut _44: &[u8; 8];
    let _45: &[u8; 8];
    let _46: [u8; 8];
    let mut _48: &mut [u8];
    let mut _49: &mut [u8; 40];
    let mut _50: std::ops::Range<usize>;
    let _51: ();
    let mut _52: std::result::Result<(), std::io::Error>;
    let mut _53: &mut &mut [u8];
    let mut _54: &u64;
    let _55: &u64;
    let mut _57: std::boxed::Box<[u8]>;
    let mut _58: std::boxed::Box<[u8; 1]>;
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: *mut u8;
    let mut _62: std::boxed::Box<[u8; 1]>;
    let mut _63: u8;
    let mut _65: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _67: &[u8];
    let mut _68: &[u8; 9];
    let _69: &[u8; 9];
    let mut _70: &[u8];
    let mut _71: &anchor_lang::prelude::Pubkey;
    let mut _72: &[u8];
    let _73: &[u8];
    let mut _74: &std::vec::Vec<u8>;
    let _76: [&[&[u8]]; 1];
    let mut _77: &[&[u8]];
    let _78: &[&[u8]];
    let mut _79: &[&[u8]; 3];
    let mut _80: std::ops::RangeFull;
    let mut _81: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _82: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _83: &anchor_lang::prelude::Pubkey;
    let _84: &anchor_lang::prelude::Pubkey;
    let _85: anchor_lang::prelude::Pubkey;
    let mut _86: &anchor_lang::prelude::AccountInfo<'_>;
    let _87: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _88: &anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
    let mut _89: &[anchor_lang::prelude::AccountMeta];
    let _90: &[anchor_lang::prelude::AccountMeta];
    let mut _91: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _92: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _93: &[u8];
    let mut _94: &[u8; 40];
    let _95: &[u8; 40];
    let mut _96: &[&[&[u8]]];
    let mut _97: &[&[&[u8]]; 1];
    let mut _99: &mut handlers::handler_invest::Invest<'_>;
    let mut _100: &mut handlers::handler_invest::Invest<'_>;
    let mut _101: &mut handlers::handler_invest::Invest<'_>;
    let mut _102: &mut handlers::handler_invest::Invest<'_>;
    let mut _103: &mut handlers::handler_invest::Invest<'_>;
    let mut _104: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _105: &mut handlers::handler_invest::Invest<'_>;
    let mut _106: &mut handlers::handler_invest::Invest<'_>;
    let mut _107: &mut handlers::handler_invest::Invest<'_>;
    let mut _108: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _109: &mut handlers::handler_invest::Invest<'_>;
    let mut _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _111: &mut handlers::handler_invest::Invest<'_>;
    let mut _112: &mut handlers::handler_invest::Invest<'_>;
    let mut _113: &mut handlers::handler_invest::Invest<'_>;
    let mut _114: &mut handlers::handler_invest::Invest<'_>;
    let mut _115: &mut handlers::handler_invest::Invest<'_>;
    let mut _116: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _117: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _118: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _119: *const [u8; 1];
    scope 1 {
        debug accs => _5;
        let mut _37: [u8; 40];
        scope 2 {
            debug data => _37;
            let mut _47: &mut [u8];
            let mut _98: &[u8; 8];
            scope 3 {
                debug writer => _47;
                let _56: std::vec::Vec<u8>;
                scope 4 {
                    debug base_vault_authority_bump => _56;
                    let _64: anchor_lang::prelude::Pubkey;
                    scope 6 {
                        debug vault_state_key => _64;
                        let _66: [&[u8]; 3];
                        scope 7 {
                            debug inner_seeds => _66;
                            let _75: &[&[&[u8]]; 1];
                            scope 8 {
                                debug signer_seeds => _75;
                            }
                        }
                    }
                }
                scope 5 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _99 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _9 = &((*_99).5: anchor_lang::prelude::AccountInfo<'_>);
        _8 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _100 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _11 = &((*_100).8: anchor_lang::prelude::AccountInfo<'_>);
        _10 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _101 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _13 = &((*_101).7: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _12 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Key>::key(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _102 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _15 = &((*_102).9: anchor_lang::prelude::AccountInfo<'_>);
        _14 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _103 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _104 = deref_copy ((*_103).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _116 = (((_104.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _17 = &(*_116);
        _16 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _105 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _19 = &((*_105).11: anchor_lang::prelude::AccountInfo<'_>);
        _18 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _106 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _21 = &((*_106).10: anchor_lang::prelude::AccountInfo<'_>);
        _20 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _107 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _108 = deref_copy ((*_107).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _117 = (((_108.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _23 = &(*_117);
        _22 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _109 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _110 = deref_copy ((*_109).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _118 = (((_110.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _25 = &(*_118);
        _24 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _111 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _29 = &((*_111).13: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _28 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _112 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _33 = &((*_112).14: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _32 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _33) -> [return: bb12, unwind continue];
    }

    bb12: {
        _31 = &(*_32);
        StorageDead(_33);
        _30 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        _113 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _35 = &((*_113).15: anchor_lang::prelude::AccountInfo<'_>);
        _34 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _7 = kamino_lending::accounts::RedeemReserveCollateral { owner: move _8, lending_market: move _10, reserve: move _12, lending_market_authority: move _14, reserve_liquidity_mint: move _16, reserve_collateral_mint: move _18, reserve_liquidity_supply: move _20, user_source_collateral: move _22, user_destination_liquidity: move _24, collateral_token_program: move _26, liquidity_token_program: move _30, instruction_sysvar_account: move _34 };
        _6 = &_7;
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_36);
        _36 = Option::<bool>::None;
        _5 = <kamino_lending::accounts::RedeemReserveCollateral as anchor_lang::ToAccountMetas>::to_account_metas(move _6, move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_6);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_7);
        StorageLive(_37);
        _37 = [const 0_u8; 40];
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _37;
        StorageLive(_42);
        _42 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _40 = <[u8; 40] as IndexMut<std::ops::Range<usize>>>::index_mut(move _41, move _42) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        _39 = &mut (*_40);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _98 = const _;
        _45 = &(*_98);
        _44 = &(*_45);
        _43 = move _44 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = core::slice::<impl [u8]>::copy_from_slice(move _39, move _43) -> [return: bb17, unwind: bb35];
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &mut _37;
        StorageLive(_50);
        _50 = std::ops::Range::<usize> { start: const 8_usize, end: const 40_usize };
        _48 = <[u8; 40] as IndexMut<std::ops::Range<usize>>>::index_mut(move _49, move _50) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = &mut (*_48);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut _47;
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_4;
        _54 = &(*_55);
        _52 = to_writer::<u64, &mut &mut [u8]>(move _53, move _54) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        StorageDead(_54);
        StorageDead(_53);
        _51 = std::result::Result::<(), std::io::Error>::unwrap(move _52) -> [return: bb20, unwind: bb35];
    }

    bb20: {
        StorageDead(_52);
        StorageDead(_55);
        StorageDead(_51);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _59 = SizeOf([u8; 1]);
        _60 = AlignOf([u8; 1]);
        _61 = alloc::alloc::exchange_malloc(move _59, move _60) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        StorageLive(_62);
        _62 = ShallowInitBox(move _61, [u8; 1]);
        StorageLive(_63);
        _63 = _3;
        _119 = (((_62.0: std::ptr::Unique<[u8; 1]>).0: std::ptr::NonNull<[u8; 1]>).0: *const [u8; 1]);
        (*_119) = [move _63];
        StorageDead(_63);
        _58 = move _62;
        _57 = move _58 as std::boxed::Box<[u8]> (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageDead(_58);
        _56 = std::slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _57) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        StorageDead(_57);
        StorageLive(_64);
        StorageLive(_65);
        _114 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _65 = &((*_114).2: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _64 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _65) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = const _;
        _68 = &(*_69);
        _67 = move _68 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_64;
        _70 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _71) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_56;
        _73 = <Vec<u8> as AsRef<[u8]>>::as_ref(move _74) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        _72 = &(*_73);
        StorageDead(_74);
        _66 = [move _67, move _70, move _72];
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_73);
        StorageDead(_69);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_66;
        StorageLive(_80);
        _80 = RangeFull;
        _78 = <[&[u8]; 3] as Index<RangeFull>>::index(move _79, move _80) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        StorageDead(_80);
        StorageDead(_79);
        _77 = &(*_78);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut (*_2);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _115 = deref_copy ((*_1).1: &mut handlers::handler_invest::Invest<'_>);
        _88 = &((*_115).12: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>);
        _87 = <anchor_lang::prelude::Program<'_, KaminoLending> as Deref>::deref(move _88) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        _86 = &(*_87);
        StorageDead(_88);
        _85 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _86) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_5;
        _91 = &(*_92);
        _90 = <Vec<AccountMeta> as Deref>::deref(move _91) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        _89 = &(*_90);
        StorageDead(_91);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_37;
        _94 = &(*_95);
        _93 = move _94 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_94);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(*_75);
        _96 = move _97 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_97);
        _81 = cpi_mem::CpiMemoryLender::<'_>::program_invoke_signed(move _82, move _83, move _89, move _93, move _96) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_89);
        StorageDead(_83);
        StorageDead(_82);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into}>(move _81, <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into) -> [return: bb31, unwind: bb34];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_64);
        drop(_56) -> [return: bb32, unwind: bb35];
    }

    bb32: {
        StorageDead(_56);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_37);
        drop(_5) -> [return: bb33, unwind: bb36];
    }

    bb33: {
        StorageDead(_5);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_84);
        return;
    }

    bb34 (cleanup): {
        drop(_56) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_5) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}
