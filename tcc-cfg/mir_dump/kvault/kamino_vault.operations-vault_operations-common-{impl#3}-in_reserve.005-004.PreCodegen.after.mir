// MIR for `operations::vault_operations::common::<impl at programs\kvault\src\operations\vault_operations.rs:894:5: 894:18>::in_reserve` after PreCodegen

fn operations::vault_operations::common::<impl at programs\kvault\src\operations\vault_operations.rs:894:5: 894:18>::in_reserve(_1: &Invested, _2: &anchor_lang::prelude::Pubkey) -> &InvestedReserve {
    debug self => _1;
    debug reserve => _2;
    let mut _0: &operations::vault_operations::common::InvestedReserve;
    let _3: &operations::vault_operations::common::InvestedReserve;
    let mut _4: std::result::Result<&operations::vault_operations::common::InvestedReserve, anchor_lang::error::Error>;
    let mut _5: std::option::Option<&operations::vault_operations::common::InvestedReserve>;
    let mut _6: &mut std::slice::Iter<'_, operations::vault_operations::common::InvestedReserve>;
    let mut _7: std::slice::Iter<'_, operations::vault_operations::common::InvestedReserve>;
    let mut _8: &[operations::vault_operations::common::InvestedReserve];
    let mut _9: &[operations::vault_operations::common::InvestedReserve; 25];
    let mut _10: {closure@programs\kvault\src\operations\vault_operations.rs:898:23: 898:26};
    let mut _11: &anchor_lang::prelude::Pubkey;
    let mut _12: anchor_lang::error::Error;
    let mut _13: anchor_lang::error::AnchorError;
    let mut _14: std::string::String;
    let mut _15: &KaminoVaultError;
    let _16: KaminoVaultError;
    let mut _17: u32;
    let mut _18: KaminoVaultError;
    let mut _19: std::string::String;
    let mut _20: &KaminoVaultError;
    let _21: KaminoVaultError;
    let mut _22: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _23: anchor_lang::error::ErrorOrigin;
    let mut _24: anchor_lang::error::Source;
    let mut _25: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _26: &KaminoVaultError;
    let mut _27: &KaminoVaultError;
    let mut _28: std::boxed::Box<[operations::vault_operations::common::InvestedReserve; 25]>;
    let mut _29: *const [operations::vault_operations::common::InvestedReserve; 25];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _28 = deref_copy ((*_1).0: std::boxed::Box<[operations::vault_operations::common::InvestedReserve; 25]>);
        _29 = (((_28.0: std::ptr::Unique<[operations::vault_operations::common::InvestedReserve; 25]>).0: std::ptr::NonNull<[operations::vault_operations::common::InvestedReserve; 25]>).0: *const [operations::vault_operations::common::InvestedReserve; 25]);
        _9 = &(*_29);
        _8 = move _9 as &[operations::vault_operations::common::InvestedReserve] (PointerCoercion(Unsize));
        StorageDead(_9);
        _7 = core::slice::<impl [InvestedReserve]>::iter(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _7;
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_2);
        _10 = {closure@programs\kvault\src\operations\vault_operations.rs:898:23: 898:26} { reserve: move _11 };
        StorageDead(_11);
        _5 = <std::slice::Iter<'_, InvestedReserve> as Iterator>::find::<{closure@programs\kvault\src\operations\vault_operations.rs:898:23: 898:26}>(move _6, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_6);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _27 = const _;
        _15 = &(*_27);
        _14 = KaminoVaultError::name(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = KaminoVaultError::ReserveNotPartOfAllocations;
        _17 = <KaminoVaultError as Into<u32>>::into(move _18) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _26 = const _;
        _20 = &(*_26);
        _19 = <KaminoVaultError as ToString>::to_string(move _20) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 899_u32 };
        _23 = anchor_lang::error::ErrorOrigin::Source(move _24);
        StorageDead(_24);
        _22 = Option::<ErrorOrigin>::Some(move _23);
        StorageDead(_23);
        StorageLive(_25);
        _25 = Option::<ComparedValues>::None;
        _13 = anchor_lang::error::AnchorError { error_name: move _14, error_code_number: move _17, error_msg: move _19, error_origin: move _22, compared_values: move _25 };
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        _12 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _13) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_13);
        _4 = Option::<&InvestedReserve>::ok_or::<anchor_lang::error::Error>(move _5, move _12) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_5);
        _3 = std::result::Result::<&InvestedReserve, anchor_lang::error::Error>::unwrap(move _4) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _0 = &(*_3);
        StorageDead(_4);
        StorageDead(_7);
        StorageDead(_3);
        return;
    }

    bb9 (cleanup): {
        drop(_14) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}
