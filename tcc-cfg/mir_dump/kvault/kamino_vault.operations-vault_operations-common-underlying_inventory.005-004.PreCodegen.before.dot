digraph Mir_0_425 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn underlying_inventory(_1: &amp;ReErased state::VaultState, _2: impl Iterator&lt;Item = T&gt;/#2, _3: u64) -&gt; std::result::Result&lt;(u64, operations::vault_operations::common::Invested), anchor_lang::error::Error&gt;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: &amp;ReErased state::VaultState;<br align="left"/>let _6: operations::vault_operations::common::Invested;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, operations::vault_operations::common::Invested&gt;;<br align="left"/>let mut _8: std::result::Result&lt;operations::vault_operations::common::Invested, anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: &amp;ReErased state::VaultState;<br align="left"/>let mut _10: impl Iterator&lt;Item = T&gt;/#2;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _16: operations::vault_operations::common::Invested;<br align="left"/>let mut _17: (u64, operations::vault_operations::common::Invested);<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: operations::vault_operations::common::Invested;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: isize;<br align="left"/>debug vault =&gt; _1;<br align="left"/>debug reserves_iter =&gt; _2;<br align="left"/>debug slot =&gt; _3;<br align="left"/>debug available =&gt; _4;<br align="left"/>debug invested =&gt; _6;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>>;
    bb0__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_20 = const false<br/>_20 = const true<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = available_to_invest(move _5)</td></tr></table>>];
    bb1__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_1)<br/>StorageLive(_10)<br/>_20 = const false<br/>_10 = move _2<br/>StorageLive(_11)<br/>_11 = _3<br/></td></tr><tr><td align="left">_8 = amounts_invested::&lt;'_, T, impl Iterator&lt;Item = T&gt;&gt;(move _9, move _10, move _11)</td></tr></table>>];
    bb2__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;Invested, anchor_lang::error::Error&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb3__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_12 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = move ((_7 as Continue).0: operations::vault_operations::common::Invested)<br/>_6 = move _16<br/>StorageDead(_16)<br/>_21 = discriminant(_7)<br/>StorageDead(_7)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _4<br/>StorageLive(_19)<br/>_19 = move _6<br/>_17 = (move _18, move _19)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>_0 = std::result::Result::&lt;(u64, Invested), anchor_lang::error::Error&gt;::Ok(move _17)<br/>StorageDead(_17)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = move ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_15)<br/>_15 = move _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, Invested), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb7__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>_23 = discriminant(_7)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_25 = discriminant(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb12__0_425 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">switchInt(_20)</td></tr></table>>];
    bb0__0_425 -> bb1__0_425 [label="return"];
    bb0__0_425 -> bb12__0_425 [label="unwind"];
    bb1__0_425 -> bb2__0_425 [label="return"];
    bb1__0_425 -> bb12__0_425 [label="unwind"];
    bb2__0_425 -> bb3__0_425 [label="return"];
    bb2__0_425 -> bb12__0_425 [label="unwind"];
    bb3__0_425 -> bb4__0_425 [label="0"];
    bb3__0_425 -> bb6__0_425 [label="1"];
    bb3__0_425 -> bb5__0_425 [label="otherwise"];
    bb4__0_425 -> bb8__0_425 [label=""];
    bb6__0_425 -> bb7__0_425 [label="return"];
    bb6__0_425 -> bb10__0_425 [label="unwind"];
    bb7__0_425 -> bb8__0_425 [label=""];
    bb10__0_425 -> bb12__0_425 [label=""];
    bb11__0_425 -> bb9__0_425 [label="return"];
    bb12__0_425 -> bb9__0_425 [label="0"];
    bb12__0_425 -> bb11__0_425 [label="otherwise"];
}
