// MIR for `handlers::handler_deposit::<impl at programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18>::try_accounts` after PreCodegen

fn handlers::handler_deposit::<impl at programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut DepositBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_deposit::DepositBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::VaultState>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_deposit::DepositBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _38: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_deposit::DepositBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_deposit::DepositBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_deposit::DepositBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_deposit::DepositBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_deposit::DepositBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _113: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_deposit::DepositBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>>;
    let mut _128: std::result::Result<anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut handlers::handler_deposit::DepositBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _143: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut handlers::handler_deposit::DepositBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _158: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut handlers::handler_deposit::DepositBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _173: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut handlers::handler_deposit::DepositBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _188: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _189: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _192: &[u8];
    let mut _193: &mut handlers::handler_deposit::DepositBumps;
    let mut _194: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _195: {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _201: ();
    let mut _202: bool;
    let mut _203: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _204: &anchor_lang::prelude::Signer<'_>;
    let _205: &anchor_lang::prelude::Signer<'_>;
    let mut _206: !;
    let mut _207: anchor_lang::error::Error;
    let mut _208: anchor_lang::error::Error;
    let mut _209: anchor_lang::error::ErrorCode;
    let _210: ();
    let mut _211: bool;
    let mut _212: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _213: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let _214: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _215: !;
    let mut _216: anchor_lang::error::Error;
    let mut _217: anchor_lang::error::Error;
    let mut _218: anchor_lang::error::ErrorCode;
    let _219: ();
    let mut _221: &state::VaultState;
    let mut _222: &std::cell::Ref<'_, state::VaultState>;
    let _223: std::cell::Ref<'_, state::VaultState>;
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _225: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _226: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _233: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _234: bool;
    let mut _235: &anchor_lang::prelude::Pubkey;
    let mut _236: &anchor_lang::prelude::Pubkey;
    let mut _237: !;
    let mut _238: anchor_lang::error::Error;
    let mut _239: anchor_lang::error::Error;
    let mut _240: anchor_lang::error::Error;
    let mut _241: anchor_lang::error::ErrorCode;
    let mut _242: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _243: anchor_lang::prelude::Pubkey;
    let mut _244: anchor_lang::prelude::Pubkey;
    let _245: ();
    let mut _247: &state::VaultState;
    let mut _248: &std::cell::Ref<'_, state::VaultState>;
    let _249: std::cell::Ref<'_, state::VaultState>;
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _251: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _252: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _253: isize;
    let mut _255: !;
    let mut _256: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _259: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _260: bool;
    let mut _261: &anchor_lang::prelude::Pubkey;
    let mut _262: &anchor_lang::prelude::Pubkey;
    let mut _263: !;
    let mut _264: anchor_lang::error::Error;
    let mut _265: anchor_lang::error::Error;
    let mut _266: anchor_lang::error::Error;
    let mut _267: anchor_lang::error::ErrorCode;
    let mut _268: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _269: anchor_lang::prelude::Pubkey;
    let mut _270: anchor_lang::prelude::Pubkey;
    let _271: ();
    let mut _273: &state::VaultState;
    let mut _274: &std::cell::Ref<'_, state::VaultState>;
    let _275: std::cell::Ref<'_, state::VaultState>;
    let mut _276: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _277: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _278: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _279: isize;
    let mut _281: !;
    let mut _282: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _285: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _286: bool;
    let mut _287: &anchor_lang::prelude::Pubkey;
    let mut _288: &anchor_lang::prelude::Pubkey;
    let mut _289: !;
    let mut _290: anchor_lang::error::Error;
    let mut _291: anchor_lang::error::Error;
    let mut _292: anchor_lang::error::Error;
    let mut _293: anchor_lang::error::ErrorCode;
    let mut _294: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _295: anchor_lang::prelude::Pubkey;
    let mut _296: anchor_lang::prelude::Pubkey;
    let _297: ();
    let mut _299: &state::VaultState;
    let mut _300: &std::cell::Ref<'_, state::VaultState>;
    let _301: std::cell::Ref<'_, state::VaultState>;
    let mut _302: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _303: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _304: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _305: isize;
    let mut _307: !;
    let mut _308: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _311: &anchor_lang::prelude::AccountInfo<'_>;
    let _312: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _313: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _314: bool;
    let mut _315: &anchor_lang::prelude::Pubkey;
    let mut _316: &anchor_lang::prelude::Pubkey;
    let mut _317: !;
    let mut _318: anchor_lang::error::Error;
    let mut _319: anchor_lang::error::Error;
    let mut _320: anchor_lang::error::Error;
    let mut _321: anchor_lang::error::ErrorCode;
    let mut _322: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _323: anchor_lang::prelude::Pubkey;
    let mut _324: anchor_lang::prelude::Pubkey;
    let _325: ();
    let mut _327: &state::VaultState;
    let mut _328: &std::cell::Ref<'_, state::VaultState>;
    let _329: std::cell::Ref<'_, state::VaultState>;
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _331: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _332: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _333: isize;
    let mut _335: !;
    let mut _336: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _339: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _340: bool;
    let mut _341: &anchor_lang::prelude::Pubkey;
    let mut _342: &anchor_lang::prelude::Pubkey;
    let mut _343: !;
    let mut _344: anchor_lang::error::Error;
    let mut _345: anchor_lang::error::Error;
    let mut _346: anchor_lang::error::Error;
    let mut _347: anchor_lang::error::ErrorCode;
    let mut _348: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _349: anchor_lang::prelude::Pubkey;
    let mut _350: anchor_lang::prelude::Pubkey;
    let _351: ();
    let mut _352: bool;
    let mut _353: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _355: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _356: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _357: !;
    let mut _358: anchor_lang::error::Error;
    let mut _359: anchor_lang::error::Error;
    let mut _360: anchor_lang::error::ErrorCode;
    let _361: ();
    let mut _362: bool;
    let mut _363: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _364: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _365: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _366: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _367: !;
    let mut _368: anchor_lang::error::Error;
    let mut _369: anchor_lang::error::Error;
    let mut _370: anchor_lang::error::ErrorCode;
    let _371: ();
    let mut _372: bool;
    let mut _373: &&anchor_lang::prelude::Pubkey;
    let _374: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _375: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _376: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _377: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _378: &&anchor_lang::prelude::Pubkey;
    let _379: &anchor_lang::prelude::Pubkey;
    let _380: anchor_lang::prelude::Pubkey;
    let mut _381: &anchor_lang::prelude::AccountInfo<'_>;
    let _382: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _383: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _384: !;
    let mut _385: anchor_lang::error::Error;
    let mut _386: anchor_lang::error::ErrorCode;
    let _387: ();
    let mut _388: bool;
    let mut _389: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _390: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _391: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _392: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _393: !;
    let mut _394: anchor_lang::error::Error;
    let mut _395: anchor_lang::error::Error;
    let mut _396: anchor_lang::error::ErrorCode;
    let _397: ();
    let _398: ();
    let mut _399: bool;
    let mut _400: &anchor_lang::prelude::Pubkey;
    let _401: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _402: &anchor_spl::token_interface::TokenAccount;
    let _403: &anchor_spl::token_interface::TokenAccount;
    let mut _404: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _405: &anchor_lang::prelude::Pubkey;
    let _406: anchor_lang::prelude::Pubkey;
    let mut _407: &anchor_lang::prelude::Signer<'_>;
    let mut _408: !;
    let mut _409: anchor_lang::error::Error;
    let mut _410: anchor_lang::error::ErrorCode;
    let mut _411: bool;
    let mut _412: &anchor_lang::prelude::Pubkey;
    let _413: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _414: &anchor_spl::token_interface::TokenAccount;
    let _415: &anchor_spl::token_interface::TokenAccount;
    let mut _416: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _417: &anchor_lang::prelude::Pubkey;
    let _418: anchor_lang::prelude::Pubkey;
    let mut _419: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _420: !;
    let mut _421: anchor_lang::error::Error;
    let mut _422: anchor_lang::error::ErrorCode;
    let _423: ();
    let mut _424: bool;
    let mut _425: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _426: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _427: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _428: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _429: !;
    let mut _430: anchor_lang::error::Error;
    let mut _431: anchor_lang::error::Error;
    let mut _432: anchor_lang::error::ErrorCode;
    let _433: ();
    let _434: ();
    let mut _435: bool;
    let mut _436: &anchor_lang::prelude::Pubkey;
    let _437: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _438: &anchor_spl::token_interface::TokenAccount;
    let _439: &anchor_spl::token_interface::TokenAccount;
    let mut _440: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _441: &anchor_lang::prelude::Pubkey;
    let _442: anchor_lang::prelude::Pubkey;
    let mut _443: &anchor_lang::prelude::Signer<'_>;
    let mut _444: !;
    let mut _445: anchor_lang::error::Error;
    let mut _446: anchor_lang::error::ErrorCode;
    let mut _447: bool;
    let mut _448: &anchor_lang::prelude::Pubkey;
    let _449: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _450: &anchor_spl::token_interface::TokenAccount;
    let _451: &anchor_spl::token_interface::TokenAccount;
    let mut _452: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _453: &anchor_lang::prelude::Pubkey;
    let _454: anchor_lang::prelude::Pubkey;
    let mut _455: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _456: !;
    let mut _457: anchor_lang::error::Error;
    let mut _458: anchor_lang::error::ErrorCode;
    let mut _461: (anchor_lang::prelude::Pubkey, u8);
    let mut _462: &[&[u8]];
    let mut _463: &[&[u8]; 1];
    let _464: &[&[u8]; 1];
    let _465: [&[u8]; 1];
    let mut _466: &[u8];
    let mut _467: &[u8; 17];
    let _468: &[u8; 17];
    let mut _469: &anchor_lang::prelude::Pubkey;
    let _470: &&anchor_lang::prelude::Pubkey;
    let mut _471: u8;
    let _472: ();
    let mut _473: bool;
    let mut _474: &anchor_lang::prelude::Pubkey;
    let _475: anchor_lang::prelude::Pubkey;
    let mut _476: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _477: &anchor_lang::prelude::Pubkey;
    let mut _478: !;
    let mut _479: anchor_lang::error::Error;
    let mut _480: anchor_lang::error::Error;
    let mut _481: anchor_lang::error::Error;
    let mut _482: anchor_lang::error::ErrorCode;
    let mut _483: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _484: anchor_lang::prelude::Pubkey;
    let mut _485: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _486: anchor_lang::prelude::Pubkey;
    let mut _487: handlers::handler_deposit::Deposit<'_>;
    let mut _488: anchor_lang::prelude::Signer<'_>;
    let mut _489: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _490: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _491: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _492: anchor_lang::prelude::AccountInfo<'_>;
    let mut _493: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _494: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _495: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _496: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
    let mut _497: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _498: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _499: anchor_lang::prelude::AccountInfo<'_>;
    let mut _500: anchor_lang::prelude::AccountInfo<'_>;
    let mut _502: &anchor_lang::prelude::Pubkey;
    let mut _503: bool;
    let mut _504: bool;
    let mut _505: bool;
    let mut _506: bool;
    let mut _507: bool;
    let mut _508: bool;
    let mut _509: bool;
    let mut _510: bool;
    let mut _511: bool;
    let mut _512: bool;
    let mut _513: bool;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _605: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _606: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _607: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _608: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _609: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _610: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _611: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _612: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug user => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        scope 6 {
            debug vault_state => _21;
            let _36: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
            scope 11 {
                debug token_vault => _36;
                let _51: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                scope 16 {
                    debug token_mint => _51;
                    let _66: anchor_lang::prelude::AccountInfo<'_>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountInfo<'_>;
                    scope 21 {
                        debug base_vault_authority => _66;
                        let _81: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        scope 26 {
                            debug shares_mint => _81;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 31 {
                                debug user_token_ata => _96;
                                let _111: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                scope 36 {
                                    debug user_shares_ata => _111;
                                    let _126: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
                                    scope 41 {
                                        debug klend_program => _126;
                                        let _141: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                        scope 46 {
                                            debug token_program => _141;
                                            let _156: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                            scope 51 {
                                                debug shares_token_program => _156;
                                                let _171: anchor_lang::prelude::AccountInfo<'_>;
                                                let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _185: anchor_lang::prelude::AccountInfo<'_>;
                                                scope 56 {
                                                    debug event_authority => _171;
                                                    let _186: anchor_lang::prelude::AccountInfo<'_>;
                                                    let _197: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _200: anchor_lang::prelude::AccountInfo<'_>;
                                                    scope 61 {
                                                        debug program => _186;
                                                        let _220: anchor_lang::prelude::Pubkey;
                                                        let _228: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _231: std::cell::Ref<'_, state::VaultState>;
                                                        let _246: anchor_lang::prelude::Pubkey;
                                                        let _254: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _257: std::cell::Ref<'_, state::VaultState>;
                                                        let _272: anchor_lang::prelude::Pubkey;
                                                        let _280: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _283: std::cell::Ref<'_, state::VaultState>;
                                                        let _298: anchor_lang::prelude::Pubkey;
                                                        let _306: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _309: std::cell::Ref<'_, state::VaultState>;
                                                        let _326: anchor_lang::prelude::Pubkey;
                                                        let _334: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _337: std::cell::Ref<'_, state::VaultState>;
                                                        let _459: anchor_lang::prelude::Pubkey;
                                                        let _460: u8;
                                                        let mut _501: &[&[u8]; 1];
                                                        scope 66 {
                                                            debug my_key => _220;
                                                            let _232: anchor_lang::prelude::Pubkey;
                                                            scope 71 {
                                                                debug target_key => _232;
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug residual => _228;
                                                            scope 68 {
                                                            }
                                                        }
                                                        scope 69 {
                                                            debug val => _231;
                                                            scope 70 {
                                                            }
                                                        }
                                                        scope 72 {
                                                            debug my_key => _246;
                                                            let _258: anchor_lang::prelude::Pubkey;
                                                            scope 77 {
                                                                debug target_key => _258;
                                                            }
                                                        }
                                                        scope 73 {
                                                            debug residual => _254;
                                                            scope 74 {
                                                            }
                                                        }
                                                        scope 75 {
                                                            debug val => _257;
                                                            scope 76 {
                                                            }
                                                        }
                                                        scope 78 {
                                                            debug my_key => _272;
                                                            let _284: anchor_lang::prelude::Pubkey;
                                                            scope 83 {
                                                                debug target_key => _284;
                                                            }
                                                        }
                                                        scope 79 {
                                                            debug residual => _280;
                                                            scope 80 {
                                                            }
                                                        }
                                                        scope 81 {
                                                            debug val => _283;
                                                            scope 82 {
                                                            }
                                                        }
                                                        scope 84 {
                                                            debug my_key => _298;
                                                            let _310: anchor_lang::prelude::Pubkey;
                                                            scope 89 {
                                                                debug target_key => _310;
                                                            }
                                                        }
                                                        scope 85 {
                                                            debug residual => _306;
                                                            scope 86 {
                                                            }
                                                        }
                                                        scope 87 {
                                                            debug val => _309;
                                                            scope 88 {
                                                            }
                                                        }
                                                        scope 90 {
                                                            debug my_key => _326;
                                                            let _338: anchor_lang::prelude::Pubkey;
                                                            scope 95 {
                                                                debug target_key => _338;
                                                            }
                                                        }
                                                        scope 91 {
                                                            debug residual => _334;
                                                            scope 92 {
                                                            }
                                                        }
                                                        scope 93 {
                                                            debug val => _337;
                                                            scope 94 {
                                                            }
                                                        }
                                                        scope 96 {
                                                            debug __pda_address => _459;
                                                            debug __bump => _460;
                                                        }
                                                    }
                                                    scope 62 {
                                                        debug residual => _197;
                                                        scope 63 {
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug val => _200;
                                                        scope 65 {
                                                        }
                                                    }
                                                }
                                                scope 57 {
                                                    debug residual => _182;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug val => _185;
                                                    scope 60 {
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _167;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _170;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 47 {
                                            debug residual => _152;
                                            scope 48 {
                                            }
                                        }
                                        scope 49 {
                                            debug val => _155;
                                            scope 50 {
                                            }
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _137;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _140;
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _122;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _125;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _503 = const false;
        _513 = const false;
        _512 = const false;
        _511 = const false;
        _510 = const false;
        _509 = const false;
        _508 = const false;
        _507 = const false;
        _506 = const false;
        _505 = const false;
        _504 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _9, move _15) -> [return: bb2, unwind: bb260];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb260];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _514 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb285];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _584 = discriminant(_7);
        StorageDead(_7);
        goto -> bb245;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _24, move _30) -> [return: bb9, unwind: bb260];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb260];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _21 = move _35;
        StorageDead(_35);
        _516 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb284];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _582 = discriminant(_22);
        StorageDead(_22);
        goto -> bb244;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _38 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _39, move _45) -> [return: bb15, unwind: bb260];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb260];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _36 = move _50;
        StorageDead(_50);
        _518 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb259];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb283];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _580 = discriminant(_37);
        StorageDead(_37);
        goto -> bb243;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _53 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _54, move _60) -> [return: bb21, unwind: bb259];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb259];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _51 = move _65;
        StorageDead(_65);
        _520 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb258];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb282];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _578 = discriminant(_52);
        StorageDead(_52);
        goto -> bb242;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _69, move _75) -> [return: bb27, unwind: bb258];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb258];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _66 = move _80;
        StorageDead(_80);
        _522 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb257];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb281];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _576 = discriminant(_67);
        StorageDead(_67);
        goto -> bb241;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _84, move _90) -> [return: bb33, unwind: bb257];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb257];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _81 = move _95;
        StorageDead(_95);
        _524 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb256];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb280];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _574 = discriminant(_82);
        StorageDead(_82);
        goto -> bb240;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _99, move _105) -> [return: bb39, unwind: bb256];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb256];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _526 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb255];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb279];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _572 = discriminant(_97);
        StorageDead(_97);
        goto -> bb239;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _113 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _114, move _120) -> [return: bb45, unwind: bb255];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb255];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _111 = move _125;
        StorageDead(_125);
        _528 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <anchor_lang::prelude::Program<'_, KaminoLending> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb254];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb278];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _570 = discriminant(_112);
        StorageDead(_112);
        goto -> bb238;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _128 = std::result::Result::<anchor_lang::prelude::Program<'_, KaminoLending>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _129, move _135) -> [return: bb51, unwind: bb254];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<anchor_lang::prelude::Program<'_, KaminoLending>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb254];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>);
        _126 = move _140;
        StorageDead(_140);
        _530 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb254];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb277];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _568 = discriminant(_127);
        StorageDead(_127);
        goto -> bb237;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _143 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _144, move _150) -> [return: bb57, unwind: bb254];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb254];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _141 = move _155;
        StorageDead(_155);
        _532 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb254];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb276];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _566 = discriminant(_142);
        StorageDead(_142);
        goto -> bb236;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _158 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _159, move _165) -> [return: bb63, unwind: bb254];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb254];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _156 = move _170;
        StorageDead(_170);
        _534 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_3);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb254];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb275];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _564 = discriminant(_157);
        StorageDead(_157);
        goto -> bb235;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _173 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _174, move _180) -> [return: bb69, unwind: bb254];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb254];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _171 = move _185;
        StorageDead(_185);
        _536 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_1);
        StorageLive(_191);
        _191 = &mut (*_2);
        StorageLive(_192);
        _192 = &(*_3);
        StorageLive(_193);
        _193 = &mut (*_4);
        StorageLive(_194);
        _194 = &mut (*_5);
        _189 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, DepositBumps>>::try_accounts(move _190, move _191, move _192, move _193, move _194) -> [return: bb74, unwind: bb253];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb274];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _562 = discriminant(_172);
        StorageDead(_172);
        goto -> bb234;
    }

    bb74: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_195);
        _195 = {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18};
        _188 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_deposit.rs:119:10: 119:18}>(move _189, move _195) -> [return: bb75, unwind: bb253];
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_189);
        _187 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb76, unwind: bb253];
    }

    bb76: {
        StorageDead(_188);
        _196 = discriminant(_187);
        switchInt(move _196) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_200);
        _200 = move ((_187 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _186 = move _200;
        StorageDead(_200);
        _538 = discriminant(_187);
        StorageDead(_187);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_6;
        _204 = &(*_205);
        _203 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _204) -> [return: bb80, unwind: bb252];
    }

    bb78: {
        StorageLive(_197);
        _197 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _199) -> [return: bb79, unwind: bb273];
    }

    bb79: {
        StorageDead(_199);
        StorageDead(_197);
        _560 = discriminant(_187);
        StorageDead(_187);
        goto -> bb233;
    }

    bb80: {
        StorageDead(_204);
        _202 = ((*_203).6: bool);
        switchInt(move _202) -> [0: bb81, otherwise: bb84];
    }

    bb81: {
        StorageDead(_205);
        StorageDead(_203);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = ConstraintMut;
        _208 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _209) -> [return: bb82, unwind: bb252];
    }

    bb82: {
        StorageDead(_209);
        _207 = anchor_lang::error::Error::with_account_name::<&str>(move _208, const "user") -> [return: bb83, unwind: bb252];
    }

    bb83: {
        StorageDead(_208);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _207);
        StorageDead(_207);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb232;
    }

    bb84: {
        StorageDead(_205);
        StorageDead(_203);
        _201 = const ();
        StorageDead(_202);
        StorageDead(_201);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_21;
        _213 = &(*_214);
        _212 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _213) -> [return: bb85, unwind: bb252];
    }

    bb85: {
        StorageDead(_213);
        _211 = ((*_212).6: bool);
        switchInt(move _211) -> [0: bb86, otherwise: bb89];
    }

    bb86: {
        StorageDead(_214);
        StorageDead(_212);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = ConstraintMut;
        _217 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _218) -> [return: bb87, unwind: bb252];
    }

    bb87: {
        StorageDead(_218);
        _216 = anchor_lang::error::Error::with_account_name::<&str>(move _217, const "vault_state") -> [return: bb88, unwind: bb252];
    }

    bb88: {
        StorageDead(_217);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _216);
        StorageDead(_216);
        StorageDead(_211);
        StorageDead(_210);
        goto -> bb232;
    }

    bb89: {
        StorageDead(_214);
        StorageDead(_212);
        _210 = const ();
        StorageDead(_211);
        StorageDead(_210);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_21;
        _225 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _226) -> [return: bb90, unwind: bb252];
    }

    bb90: {
        StorageDead(_226);
        _224 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _225) -> [return: bb91, unwind: bb252];
    }

    bb91: {
        _512 = const true;
        _513 = const true;
        StorageDead(_225);
        _227 = discriminant(_224);
        switchInt(move _227) -> [0: bb92, 1: bb93, otherwise: bb5];
    }

    bb92: {
        StorageLive(_231);
        _231 = move ((_224 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _223 = move _231;
        StorageDead(_231);
        _222 = &_223;
        _221 = <Ref<'_, state::VaultState> as Deref>::deref(move _222) -> [return: bb95, unwind: bb251];
    }

    bb93: {
        StorageLive(_228);
        _228 = move ((_224 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_230);
        _230 = move _228;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _230) -> [return: bb94, unwind: bb272];
    }

    bb94: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_222);
        _558 = discriminant(_224);
        _512 = const false;
        _513 = const false;
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_221);
        goto -> bb231;
    }

    bb95: {
        StorageDead(_222);
        _220 = ((*_221).1: anchor_lang::prelude::Pubkey);
        drop(_223) -> [return: bb261, unwind: bb272];
    }

    bb96: {
        StorageDead(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_220;
        StorageLive(_236);
        _236 = &_232;
        _234 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _235, move _236) -> [return: bb97, unwind: bb252];
    }

    bb97: {
        switchInt(move _234) -> [0: bb102, otherwise: bb98];
    }

    bb98: {
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = ConstraintHasOne;
        _240 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _241) -> [return: bb99, unwind: bb252];
    }

    bb99: {
        StorageDead(_241);
        _239 = anchor_lang::error::Error::with_account_name::<&str>(move _240, const "vault_state") -> [return: bb100, unwind: bb252];
    }

    bb100: {
        StorageDead(_240);
        StorageLive(_242);
        StorageLive(_243);
        _243 = _220;
        StorageLive(_244);
        _244 = _232;
        _242 = (move _243, move _244);
        StorageDead(_244);
        StorageDead(_243);
        _238 = anchor_lang::error::Error::with_pubkeys(move _239, move _242) -> [return: bb101, unwind: bb252];
    }

    bb101: {
        StorageDead(_242);
        StorageDead(_239);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _238);
        StorageDead(_238);
        StorageDead(_234);
        StorageDead(_232);
        goto -> bb231;
    }

    bb102: {
        StorageDead(_236);
        StorageDead(_235);
        _219 = const ();
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &_21;
        _251 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _252) -> [return: bb103, unwind: bb252];
    }

    bb103: {
        StorageDead(_252);
        _250 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _251) -> [return: bb104, unwind: bb252];
    }

    bb104: {
        _510 = const true;
        _511 = const true;
        StorageDead(_251);
        _253 = discriminant(_250);
        switchInt(move _253) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_257);
        _257 = move ((_250 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _249 = move _257;
        StorageDead(_257);
        _248 = &_249;
        _247 = <Ref<'_, state::VaultState> as Deref>::deref(move _248) -> [return: bb108, unwind: bb250];
    }

    bb106: {
        StorageLive(_254);
        _254 = move ((_250 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_256);
        _256 = move _254;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _256) -> [return: bb107, unwind: bb271];
    }

    bb107: {
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_248);
        _556 = discriminant(_250);
        _510 = const false;
        _511 = const false;
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_247);
        goto -> bb230;
    }

    bb108: {
        StorageDead(_248);
        _246 = ((*_247).5: anchor_lang::prelude::Pubkey);
        drop(_249) -> [return: bb262, unwind: bb271];
    }

    bb109: {
        StorageDead(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &_246;
        StorageLive(_262);
        _262 = &_258;
        _260 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _261, move _262) -> [return: bb110, unwind: bb252];
    }

    bb110: {
        switchInt(move _260) -> [0: bb115, otherwise: bb111];
    }

    bb111: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = ConstraintHasOne;
        _266 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _267) -> [return: bb112, unwind: bb252];
    }

    bb112: {
        StorageDead(_267);
        _265 = anchor_lang::error::Error::with_account_name::<&str>(move _266, const "vault_state") -> [return: bb113, unwind: bb252];
    }

    bb113: {
        StorageDead(_266);
        StorageLive(_268);
        StorageLive(_269);
        _269 = _246;
        StorageLive(_270);
        _270 = _258;
        _268 = (move _269, move _270);
        StorageDead(_270);
        StorageDead(_269);
        _264 = anchor_lang::error::Error::with_pubkeys(move _265, move _268) -> [return: bb114, unwind: bb252];
    }

    bb114: {
        StorageDead(_268);
        StorageDead(_265);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _264);
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_258);
        goto -> bb230;
    }

    bb115: {
        StorageDead(_262);
        StorageDead(_261);
        _245 = const ();
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_21;
        _277 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _278) -> [return: bb116, unwind: bb252];
    }

    bb116: {
        StorageDead(_278);
        _276 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _277) -> [return: bb117, unwind: bb252];
    }

    bb117: {
        _508 = const true;
        _509 = const true;
        StorageDead(_277);
        _279 = discriminant(_276);
        switchInt(move _279) -> [0: bb118, 1: bb119, otherwise: bb5];
    }

    bb118: {
        StorageLive(_283);
        _283 = move ((_276 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _275 = move _283;
        StorageDead(_283);
        _274 = &_275;
        _273 = <Ref<'_, state::VaultState> as Deref>::deref(move _274) -> [return: bb121, unwind: bb249];
    }

    bb119: {
        StorageLive(_280);
        _280 = move ((_276 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_282);
        _282 = move _280;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _282) -> [return: bb120, unwind: bb270];
    }

    bb120: {
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_274);
        _554 = discriminant(_276);
        _508 = const false;
        _509 = const false;
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_273);
        goto -> bb229;
    }

    bb121: {
        StorageDead(_274);
        _272 = ((*_273).3: anchor_lang::prelude::Pubkey);
        drop(_275) -> [return: bb263, unwind: bb270];
    }

    bb122: {
        StorageDead(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_272;
        StorageLive(_288);
        _288 = &_284;
        _286 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _287, move _288) -> [return: bb123, unwind: bb252];
    }

    bb123: {
        switchInt(move _286) -> [0: bb128, otherwise: bb124];
    }

    bb124: {
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = ConstraintHasOne;
        _292 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _293) -> [return: bb125, unwind: bb252];
    }

    bb125: {
        StorageDead(_293);
        _291 = anchor_lang::error::Error::with_account_name::<&str>(move _292, const "vault_state") -> [return: bb126, unwind: bb252];
    }

    bb126: {
        StorageDead(_292);
        StorageLive(_294);
        StorageLive(_295);
        _295 = _272;
        StorageLive(_296);
        _296 = _284;
        _294 = (move _295, move _296);
        StorageDead(_296);
        StorageDead(_295);
        _290 = anchor_lang::error::Error::with_pubkeys(move _291, move _294) -> [return: bb127, unwind: bb252];
    }

    bb127: {
        StorageDead(_294);
        StorageDead(_291);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _290);
        StorageDead(_290);
        StorageDead(_286);
        StorageDead(_284);
        goto -> bb229;
    }

    bb128: {
        StorageDead(_288);
        StorageDead(_287);
        _271 = const ();
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_272);
        StorageDead(_271);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_21;
        _303 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _304) -> [return: bb129, unwind: bb252];
    }

    bb129: {
        StorageDead(_304);
        _302 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _303) -> [return: bb130, unwind: bb252];
    }

    bb130: {
        _506 = const true;
        _507 = const true;
        StorageDead(_303);
        _305 = discriminant(_302);
        switchInt(move _305) -> [0: bb131, 1: bb132, otherwise: bb5];
    }

    bb131: {
        StorageLive(_309);
        _309 = move ((_302 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _301 = move _309;
        StorageDead(_309);
        _300 = &_301;
        _299 = <Ref<'_, state::VaultState> as Deref>::deref(move _300) -> [return: bb134, unwind: bb248];
    }

    bb132: {
        StorageLive(_306);
        _306 = move ((_302 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_308);
        _308 = move _306;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _308) -> [return: bb133, unwind: bb269];
    }

    bb133: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_300);
        _552 = discriminant(_302);
        _506 = const false;
        _507 = const false;
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_299);
        goto -> bb228;
    }

    bb134: {
        StorageDead(_300);
        _298 = ((*_299).6: anchor_lang::prelude::Pubkey);
        drop(_301) -> [return: bb264, unwind: bb269];
    }

    bb135: {
        _311 = &(*_312);
        StorageDead(_313);
        _310 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _311) -> [return: bb136, unwind: bb252];
    }

    bb136: {
        StorageDead(_311);
        StorageDead(_312);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_298;
        StorageLive(_316);
        _316 = &_310;
        _314 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _315, move _316) -> [return: bb137, unwind: bb252];
    }

    bb137: {
        switchInt(move _314) -> [0: bb142, otherwise: bb138];
    }

    bb138: {
        StorageDead(_316);
        StorageDead(_315);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = ConstraintHasOne;
        _320 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _321) -> [return: bb139, unwind: bb252];
    }

    bb139: {
        StorageDead(_321);
        _319 = anchor_lang::error::Error::with_account_name::<&str>(move _320, const "vault_state") -> [return: bb140, unwind: bb252];
    }

    bb140: {
        StorageDead(_320);
        StorageLive(_322);
        StorageLive(_323);
        _323 = _298;
        StorageLive(_324);
        _324 = _310;
        _322 = (move _323, move _324);
        StorageDead(_324);
        StorageDead(_323);
        _318 = anchor_lang::error::Error::with_pubkeys(move _319, move _322) -> [return: bb141, unwind: bb252];
    }

    bb141: {
        StorageDead(_322);
        StorageDead(_319);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _318);
        StorageDead(_318);
        StorageDead(_314);
        StorageDead(_310);
        goto -> bb228;
    }

    bb142: {
        StorageDead(_316);
        StorageDead(_315);
        _297 = const ();
        StorageDead(_314);
        StorageDead(_310);
        StorageDead(_298);
        StorageDead(_297);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_21;
        _331 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _332) -> [return: bb143, unwind: bb252];
    }

    bb143: {
        StorageDead(_332);
        _330 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _331) -> [return: bb144, unwind: bb252];
    }

    bb144: {
        _504 = const true;
        _505 = const true;
        StorageDead(_331);
        _333 = discriminant(_330);
        switchInt(move _333) -> [0: bb145, 1: bb146, otherwise: bb5];
    }

    bb145: {
        StorageLive(_337);
        _337 = move ((_330 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _329 = move _337;
        StorageDead(_337);
        _328 = &_329;
        _327 = <Ref<'_, state::VaultState> as Deref>::deref(move _328) -> [return: bb148, unwind: bb247];
    }

    bb146: {
        StorageLive(_334);
        _334 = move ((_330 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_336);
        _336 = move _334;
        _0 = <std::result::Result<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _336) -> [return: bb147, unwind: bb268];
    }

    bb147: {
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_328);
        _550 = discriminant(_330);
        _504 = const false;
        _505 = const false;
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_327);
        goto -> bb227;
    }

    bb148: {
        StorageDead(_328);
        _326 = ((*_327).7: anchor_lang::prelude::Pubkey);
        drop(_329) -> [return: bb265, unwind: bb268];
    }

    bb149: {
        StorageDead(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &_326;
        StorageLive(_342);
        _342 = &_338;
        _340 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _341, move _342) -> [return: bb150, unwind: bb252];
    }

    bb150: {
        switchInt(move _340) -> [0: bb155, otherwise: bb151];
    }

    bb151: {
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = ConstraintHasOne;
        _346 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _347) -> [return: bb152, unwind: bb252];
    }

    bb152: {
        StorageDead(_347);
        _345 = anchor_lang::error::Error::with_account_name::<&str>(move _346, const "vault_state") -> [return: bb153, unwind: bb252];
    }

    bb153: {
        StorageDead(_346);
        StorageLive(_348);
        StorageLive(_349);
        _349 = _326;
        StorageLive(_350);
        _350 = _338;
        _348 = (move _349, move _350);
        StorageDead(_350);
        StorageDead(_349);
        _344 = anchor_lang::error::Error::with_pubkeys(move _345, move _348) -> [return: bb154, unwind: bb252];
    }

    bb154: {
        StorageDead(_348);
        StorageDead(_345);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _344);
        StorageDead(_344);
        StorageDead(_340);
        StorageDead(_338);
        goto -> bb227;
    }

    bb155: {
        StorageDead(_342);
        StorageDead(_341);
        _325 = const ();
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_326);
        StorageDead(_325);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &_36;
        _355 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _356) -> [return: bb156, unwind: bb252];
    }

    bb156: {
        _354 = &(*_355);
        StorageDead(_356);
        _353 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _354) -> [return: bb157, unwind: bb252];
    }

    bb157: {
        StorageDead(_354);
        _352 = ((*_353).6: bool);
        switchInt(move _352) -> [0: bb158, otherwise: bb161];
    }

    bb158: {
        StorageDead(_355);
        StorageDead(_353);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = ConstraintMut;
        _359 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _360) -> [return: bb159, unwind: bb252];
    }

    bb159: {
        StorageDead(_360);
        _358 = anchor_lang::error::Error::with_account_name::<&str>(move _359, const "token_vault") -> [return: bb160, unwind: bb252];
    }

    bb160: {
        StorageDead(_359);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _358);
        StorageDead(_358);
        StorageDead(_352);
        StorageDead(_351);
        goto -> bb232;
    }

    bb161: {
        StorageDead(_355);
        StorageDead(_353);
        _351 = const ();
        StorageDead(_352);
        StorageDead(_351);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = &_81;
        _365 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _366) -> [return: bb162, unwind: bb252];
    }

    bb162: {
        _364 = &(*_365);
        StorageDead(_366);
        _363 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _364) -> [return: bb163, unwind: bb252];
    }

    bb163: {
        StorageDead(_364);
        _362 = ((*_363).6: bool);
        switchInt(move _362) -> [0: bb164, otherwise: bb167];
    }

    bb164: {
        StorageDead(_365);
        StorageDead(_363);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = ConstraintMut;
        _369 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _370) -> [return: bb165, unwind: bb252];
    }

    bb165: {
        StorageDead(_370);
        _368 = anchor_lang::error::Error::with_account_name::<&str>(move _369, const "shares_mint") -> [return: bb166, unwind: bb252];
    }

    bb166: {
        StorageDead(_369);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _368);
        StorageDead(_368);
        StorageDead(_362);
        StorageDead(_361);
        goto -> bb232;
    }

    bb167: {
        StorageDead(_365);
        StorageDead(_363);
        _361 = const ();
        StorageDead(_362);
        StorageDead(_361);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &_81;
        _376 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _377) -> [return: bb168, unwind: bb252];
    }

    bb168: {
        _375 = &(*_376);
        StorageDead(_377);
        _374 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _375) -> [return: bb169, unwind: bb252];
    }

    bb169: {
        StorageDead(_375);
        _373 = &((*_374).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &_156;
        _382 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _383) -> [return: bb170, unwind: bb252];
    }

    bb170: {
        _381 = &(*_382);
        StorageDead(_383);
        _380 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _381) -> [return: bb171, unwind: bb252];
    }

    bb171: {
        StorageDead(_381);
        _379 = &_380;
        _378 = &_379;
        _372 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _373, move _378) -> [return: bb172, unwind: bb252];
    }

    bb172: {
        switchInt(move _372) -> [0: bb175, otherwise: bb173];
    }

    bb173: {
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_373);
        StorageLive(_385);
        StorageLive(_386);
        _386 = ConstraintMintTokenProgram;
        _385 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _386) -> [return: bb174, unwind: bb252];
    }

    bb174: {
        StorageDead(_386);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _385);
        StorageDead(_385);
        StorageDead(_372);
        StorageDead(_371);
        goto -> bb232;
    }

    bb175: {
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_373);
        _371 = const ();
        StorageDead(_372);
        StorageDead(_371);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &_96;
        _391 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _392) -> [return: bb176, unwind: bb252];
    }

    bb176: {
        _390 = &(*_391);
        StorageDead(_392);
        _389 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _390) -> [return: bb177, unwind: bb252];
    }

    bb177: {
        StorageDead(_390);
        _388 = ((*_389).6: bool);
        switchInt(move _388) -> [0: bb178, otherwise: bb181];
    }

    bb178: {
        StorageDead(_391);
        StorageDead(_389);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = ConstraintMut;
        _395 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _396) -> [return: bb179, unwind: bb252];
    }

    bb179: {
        StorageDead(_396);
        _394 = anchor_lang::error::Error::with_account_name::<&str>(move _395, const "user_token_ata") -> [return: bb180, unwind: bb252];
    }

    bb180: {
        StorageDead(_395);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _394);
        StorageDead(_394);
        StorageDead(_388);
        StorageDead(_387);
        goto -> bb232;
    }

    bb181: {
        StorageDead(_391);
        StorageDead(_389);
        _387 = const ();
        StorageDead(_388);
        StorageDead(_387);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _607 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _404 = &(*_607);
        _403 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _404) -> [return: bb182, unwind: bb252];
    }

    bb182: {
        _402 = &(*_403);
        _401 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _402) -> [return: bb183, unwind: bb252];
    }

    bb183: {
        StorageDead(_404);
        StorageDead(_402);
        _400 = &((*_401).1: anchor_lang::prelude::Pubkey);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = &_6;
        _406 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _407) -> [return: bb184, unwind: bb252];
    }

    bb184: {
        _405 = &_406;
        StorageDead(_407);
        _399 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _400, move _405) -> [return: bb185, unwind: bb252];
    }

    bb185: {
        switchInt(move _399) -> [0: bb188, otherwise: bb186];
    }

    bb186: {
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_400);
        StorageLive(_409);
        StorageLive(_410);
        _410 = ConstraintTokenOwner;
        _409 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _410) -> [return: bb187, unwind: bb252];
    }

    bb187: {
        StorageDead(_410);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _409);
        StorageDead(_409);
        StorageDead(_399);
        StorageDead(_398);
        goto -> bb226;
    }

    bb188: {
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_400);
        _398 = const ();
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _608 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _416 = &(*_608);
        _415 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _416) -> [return: bb189, unwind: bb252];
    }

    bb189: {
        _414 = &(*_415);
        _413 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _414) -> [return: bb190, unwind: bb252];
    }

    bb190: {
        StorageDead(_416);
        StorageDead(_414);
        _412 = &((*_413).0: anchor_lang::prelude::Pubkey);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _609 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _419 = &(*_609);
        _418 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _419) -> [return: bb191, unwind: bb252];
    }

    bb191: {
        _417 = &_418;
        StorageDead(_419);
        _411 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _412, move _417) -> [return: bb192, unwind: bb252];
    }

    bb192: {
        switchInt(move _411) -> [0: bb195, otherwise: bb193];
    }

    bb193: {
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_412);
        StorageLive(_421);
        StorageLive(_422);
        _422 = ConstraintTokenMint;
        _421 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _422) -> [return: bb194, unwind: bb252];
    }

    bb194: {
        StorageDead(_422);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _421);
        StorageDead(_421);
        StorageDead(_411);
        goto -> bb226;
    }

    bb195: {
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_412);
        _397 = const ();
        StorageDead(_411);
        StorageDead(_397);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = &_111;
        _427 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _428) -> [return: bb196, unwind: bb252];
    }

    bb196: {
        _426 = &(*_427);
        StorageDead(_428);
        _425 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _426) -> [return: bb197, unwind: bb252];
    }

    bb197: {
        StorageDead(_426);
        _424 = ((*_425).6: bool);
        switchInt(move _424) -> [0: bb198, otherwise: bb201];
    }

    bb198: {
        StorageDead(_427);
        StorageDead(_425);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = ConstraintMut;
        _431 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _432) -> [return: bb199, unwind: bb252];
    }

    bb199: {
        StorageDead(_432);
        _430 = anchor_lang::error::Error::with_account_name::<&str>(move _431, const "user_shares_ata") -> [return: bb200, unwind: bb252];
    }

    bb200: {
        StorageDead(_431);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _430);
        StorageDead(_430);
        StorageDead(_424);
        StorageDead(_423);
        goto -> bb232;
    }

    bb201: {
        StorageDead(_427);
        StorageDead(_425);
        _423 = const ();
        StorageDead(_424);
        StorageDead(_423);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _610 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _440 = &(*_610);
        _439 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _440) -> [return: bb202, unwind: bb252];
    }

    bb202: {
        _438 = &(*_439);
        _437 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _438) -> [return: bb203, unwind: bb252];
    }

    bb203: {
        StorageDead(_440);
        StorageDead(_438);
        _436 = &((*_437).1: anchor_lang::prelude::Pubkey);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_6;
        _442 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _443) -> [return: bb204, unwind: bb252];
    }

    bb204: {
        _441 = &_442;
        StorageDead(_443);
        _435 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _436, move _441) -> [return: bb205, unwind: bb252];
    }

    bb205: {
        switchInt(move _435) -> [0: bb208, otherwise: bb206];
    }

    bb206: {
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_436);
        StorageLive(_445);
        StorageLive(_446);
        _446 = ConstraintTokenOwner;
        _445 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _446) -> [return: bb207, unwind: bb252];
    }

    bb207: {
        StorageDead(_446);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _445);
        StorageDead(_445);
        StorageDead(_435);
        StorageDead(_434);
        goto -> bb225;
    }

    bb208: {
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_436);
        _434 = const ();
        StorageDead(_435);
        StorageDead(_434);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _611 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _452 = &(*_611);
        _451 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _452) -> [return: bb209, unwind: bb252];
    }

    bb209: {
        _450 = &(*_451);
        _449 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _450) -> [return: bb210, unwind: bb252];
    }

    bb210: {
        StorageDead(_452);
        StorageDead(_450);
        _448 = &((*_449).0: anchor_lang::prelude::Pubkey);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _612 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _455 = &(*_612);
        _454 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _455) -> [return: bb211, unwind: bb252];
    }

    bb211: {
        _453 = &_454;
        StorageDead(_455);
        _447 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _448, move _453) -> [return: bb212, unwind: bb252];
    }

    bb212: {
        switchInt(move _447) -> [0: bb215, otherwise: bb213];
    }

    bb213: {
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_448);
        StorageLive(_457);
        StorageLive(_458);
        _458 = ConstraintTokenMint;
        _457 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _458) -> [return: bb214, unwind: bb252];
    }

    bb214: {
        StorageDead(_458);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _457);
        StorageDead(_457);
        StorageDead(_447);
        goto -> bb225;
    }

    bb215: {
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_448);
        _433 = const ();
        StorageDead(_447);
        StorageDead(_433);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _501 = const _;
        _464 = &(*_501);
        _463 = &(*_464);
        _462 = move _463 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_463);
        StorageLive(_469);
        StorageLive(_470);
        _470 = &_1;
        _502 = deref_copy (*_470);
        _469 = &(*_502);
        _461 = anchor_lang::prelude::Pubkey::find_program_address(move _462, move _469) -> [return: bb216, unwind: bb252];
    }

    bb216: {
        StorageDead(_469);
        StorageDead(_462);
        StorageLive(_459);
        _459 = (_461.0: anchor_lang::prelude::Pubkey);
        StorageLive(_460);
        _460 = (_461.1: u8);
        StorageDead(_470);
        StorageDead(_464);
        StorageDead(_461);
        StorageLive(_471);
        _471 = _460;
        ((*_4).0: u8) = move _471;
        StorageDead(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _476 = &_171;
        _475 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _476) -> [return: bb217, unwind: bb252];
    }

    bb217: {
        _474 = &_475;
        StorageDead(_476);
        StorageLive(_477);
        _477 = &_459;
        _473 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _474, move _477) -> [return: bb218, unwind: bb252];
    }

    bb218: {
        switchInt(move _473) -> [0: bb224, otherwise: bb219];
    }

    bb219: {
        StorageDead(_477);
        StorageDead(_475);
        StorageDead(_474);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = ConstraintSeeds;
        _481 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _482) -> [return: bb220, unwind: bb252];
    }

    bb220: {
        StorageDead(_482);
        _480 = anchor_lang::error::Error::with_account_name::<&str>(move _481, const "event_authority") -> [return: bb221, unwind: bb252];
    }

    bb221: {
        _503 = const true;
        StorageDead(_481);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        _485 = &_171;
        _484 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _485) -> [return: bb222, unwind: bb267];
    }

    bb222: {
        StorageDead(_485);
        StorageLive(_486);
        _486 = _459;
        _483 = (move _484, move _486);
        StorageDead(_486);
        StorageDead(_484);
        _503 = const false;
        _479 = anchor_lang::error::Error::with_pubkeys(move _480, move _483) -> [return: bb223, unwind: bb267];
    }

    bb223: {
        StorageDead(_483);
        _503 = const false;
        StorageDead(_480);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Err(move _479);
        StorageDead(_479);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_460);
        StorageDead(_459);
        goto -> bb232;
    }

    bb224: {
        StorageDead(_477);
        StorageDead(_475);
        StorageDead(_474);
        _472 = const ();
        StorageDead(_473);
        StorageDead(_472);
        StorageLive(_487);
        StorageLive(_488);
        _488 = move _6;
        StorageLive(_489);
        _489 = move _21;
        StorageLive(_490);
        _490 = move _36;
        StorageLive(_491);
        _491 = move _51;
        StorageLive(_492);
        _492 = move _66;
        StorageLive(_493);
        _493 = move _81;
        StorageLive(_494);
        _494 = move _96;
        StorageLive(_495);
        _495 = move _111;
        StorageLive(_496);
        _496 = move _126;
        StorageLive(_497);
        _497 = move _141;
        StorageLive(_498);
        _498 = move _156;
        StorageLive(_499);
        _499 = move _171;
        StorageLive(_500);
        _500 = move _186;
        _487 = handlers::handler_deposit::Deposit::<'_> { user: move _488, vault_state: move _489, token_vault: move _490, token_mint: move _491, base_vault_authority: move _492, shares_mint: move _493, user_token_ata: move _494, user_shares_ata: move _495, klend_program: move _496, token_program: move _497, shares_token_program: move _498, event_authority: move _499, program: move _500 };
        StorageDead(_500);
        StorageDead(_499);
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_495);
        StorageDead(_494);
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_488);
        _0 = std::result::Result::<handlers::handler_deposit::Deposit<'_>, anchor_lang::error::Error>::Ok(move _487);
        StorageDead(_487);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_186);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb246;
    }

    bb225: {
        StorageDead(_433);
        goto -> bb232;
    }

    bb226: {
        StorageDead(_397);
        goto -> bb232;
    }

    bb227: {
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb232;
    }

    bb228: {
        StorageDead(_298);
        StorageDead(_297);
        goto -> bb232;
    }

    bb229: {
        StorageDead(_272);
        StorageDead(_271);
        goto -> bb232;
    }

    bb230: {
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb232;
    }

    bb231: {
        StorageDead(_220);
        StorageDead(_219);
        goto -> bb232;
    }

    bb232: {
        drop(_186) -> [return: bb233, unwind: bb253];
    }

    bb233: {
        StorageDead(_186);
        drop(_171) -> [return: bb234, unwind: bb254];
    }

    bb234: {
        StorageDead(_171);
        goto -> bb235;
    }

    bb235: {
        StorageDead(_156);
        goto -> bb236;
    }

    bb236: {
        StorageDead(_141);
        goto -> bb237;
    }

    bb237: {
        StorageDead(_126);
        drop(_111) -> [return: bb238, unwind: bb255];
    }

    bb238: {
        StorageDead(_111);
        drop(_96) -> [return: bb239, unwind: bb256];
    }

    bb239: {
        StorageDead(_96);
        drop(_81) -> [return: bb240, unwind: bb257];
    }

    bb240: {
        StorageDead(_81);
        drop(_66) -> [return: bb241, unwind: bb258];
    }

    bb241: {
        StorageDead(_66);
        drop(_51) -> [return: bb242, unwind: bb259];
    }

    bb242: {
        StorageDead(_51);
        drop(_36) -> [return: bb243, unwind: bb260];
    }

    bb243: {
        StorageDead(_36);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_21);
        goto -> bb245;
    }

    bb245: {
        StorageDead(_6);
        goto -> bb246;
    }

    bb246: {
        return;
    }

    bb247 (cleanup): {
        drop(_329) -> [return: bb268, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        drop(_301) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        drop(_275) -> [return: bb270, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        drop(_249) -> [return: bb271, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        drop(_223) -> [return: bb272, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        drop(_186) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb253 (cleanup): {
        drop(_171) -> [return: bb254, unwind terminate(cleanup)];
    }

    bb254 (cleanup): {
        drop(_111) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb255 (cleanup): {
        drop(_96) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        drop(_81) -> [return: bb257, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        drop(_66) -> [return: bb258, unwind terminate(cleanup)];
    }

    bb258 (cleanup): {
        drop(_51) -> [return: bb259, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        drop(_36) -> [return: bb260, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        resume;
    }

    bb261: {
        _540 = discriminant(_224);
        _512 = const false;
        _513 = const false;
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_221);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_66;
        _232 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _233) -> [return: bb96, unwind: bb252];
    }

    bb262: {
        _542 = discriminant(_250);
        _510 = const false;
        _511 = const false;
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_247);
        StorageLive(_258);
        StorageLive(_259);
        _604 = (((_36.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _259 = &(*_604);
        _258 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _259) -> [return: bb109, unwind: bb252];
    }

    bb263: {
        _544 = discriminant(_276);
        _508 = const false;
        _509 = const false;
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_273);
        StorageLive(_284);
        StorageLive(_285);
        _605 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _285 = &(*_605);
        _284 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _285) -> [return: bb122, unwind: bb252];
    }

    bb264: {
        _546 = discriminant(_302);
        _506 = const false;
        _507 = const false;
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_299);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &_141;
        _312 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _313) -> [return: bb135, unwind: bb252];
    }

    bb265: {
        _548 = discriminant(_330);
        _504 = const false;
        _505 = const false;
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_327);
        StorageLive(_338);
        StorageLive(_339);
        _606 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _339 = &(*_606);
        _338 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _339) -> [return: bb149, unwind: bb252];
    }

    bb266 (cleanup): {
        drop(_480) -> [return: bb252, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        switchInt(_503) -> [0: bb252, otherwise: bb266];
    }

    bb268 (cleanup): {
        _586 = discriminant(_330);
        goto -> bb252;
    }

    bb269 (cleanup): {
        _587 = discriminant(_302);
        goto -> bb252;
    }

    bb270 (cleanup): {
        _588 = discriminant(_276);
        goto -> bb252;
    }

    bb271 (cleanup): {
        _589 = discriminant(_250);
        goto -> bb252;
    }

    bb272 (cleanup): {
        _590 = discriminant(_224);
        goto -> bb252;
    }

    bb273 (cleanup): {
        _591 = discriminant(_187);
        goto -> bb253;
    }

    bb274 (cleanup): {
        _592 = discriminant(_172);
        goto -> bb254;
    }

    bb275 (cleanup): {
        _593 = discriminant(_157);
        goto -> bb254;
    }

    bb276 (cleanup): {
        _594 = discriminant(_142);
        goto -> bb254;
    }

    bb277 (cleanup): {
        _595 = discriminant(_127);
        goto -> bb254;
    }

    bb278 (cleanup): {
        _596 = discriminant(_112);
        goto -> bb255;
    }

    bb279 (cleanup): {
        _597 = discriminant(_97);
        goto -> bb256;
    }

    bb280 (cleanup): {
        _598 = discriminant(_82);
        goto -> bb257;
    }

    bb281 (cleanup): {
        _599 = discriminant(_67);
        goto -> bb258;
    }

    bb282 (cleanup): {
        _600 = discriminant(_52);
        goto -> bb259;
    }

    bb283 (cleanup): {
        _601 = discriminant(_37);
        goto -> bb260;
    }

    bb284 (cleanup): {
        _602 = discriminant(_22);
        goto -> bb260;
    }

    bb285 (cleanup): {
        _603 = discriminant(_7);
        goto -> bb260;
    }
}
