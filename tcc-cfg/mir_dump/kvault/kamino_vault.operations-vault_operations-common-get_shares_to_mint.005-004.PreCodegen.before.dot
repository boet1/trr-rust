digraph Mir_0_417 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_shares_to_mint(_1: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, _2: u64, _3: u64) -&gt; std::result::Result&lt;u64, anchor_lang::error::Error&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u64;<br align="left"/>let mut _7: !;<br align="left"/>let mut _8: u64;<br align="left"/>let _9: ();<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _14: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _15: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: anchor_lang::error::Error;<br align="left"/>let mut _18: anchor_lang::error::AnchorError;<br align="left"/>let mut _19: std::string::String;<br align="left"/>let mut _20: &amp;ReErased KaminoVaultError;<br align="left"/>let _21: KaminoVaultError;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: KaminoVaultError;<br align="left"/>let mut _24: std::string::String;<br align="left"/>let mut _25: &amp;ReErased KaminoVaultError;<br align="left"/>let _26: KaminoVaultError;<br align="left"/>let mut _27: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _28: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _29: anchor_lang::error::Source;<br align="left"/>let mut _30: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let _31: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _32: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _33: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: u64;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _40: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _41: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _42: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>debug holdings_aum =&gt; _1;<br align="left"/>debug user_token_amount =&gt; _2;<br align="left"/>debug shares_issued =&gt; _3;<br align="left"/>debug shares_to_mint =&gt; _31;<br align="left"/>>;
    bb0__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _3<br/>_5 = Eq(move _6, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_8)<br/>_8 = _2<br/>_0 = std::result::Result::&lt;u64, anchor_lang::error::Error&gt;::Ok(move _8)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _3<br/>_10 = Ne(move _11, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb3__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;_1<br/>StorageLive(_14)<br/>_42 = const _<br/>_14 = &amp;(*_42)<br/></td></tr><tr><td align="left">_12 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as PartialEq&gt;::eq(move _13, move _14)</td></tr></table>>];
    bb4__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb6__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_41 = const _<br/>_20 = &amp;(*_41)<br/></td></tr><tr><td align="left">_19 = KaminoVaultError::name(move _20)</td></tr></table>>];
    bb7__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = KaminoVaultError::VaultAUMZero<br/></td></tr><tr><td align="left">_22 = &lt;KaminoVaultError as Into&lt;u32&gt;&gt;::into(move _23)</td></tr></table>>];
    bb8__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_40 = const _<br/>_25 = &amp;(*_40)<br/></td></tr><tr><td align="left">_24 = &lt;KaminoVaultError as ToString&gt;::to_string(move _25)</td></tr></table>>];
    bb9__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_operations.rs&quot;, line: const 615_u32 }<br/>_28 = anchor_lang::error::ErrorOrigin::Source(move _29)<br/>StorageDead(_29)<br/>_27 = Option::&lt;ErrorOrigin&gt;::Some(move _28)<br/>StorageDead(_28)<br/>StorageLive(_30)<br/>_30 = Option::&lt;ComparedValues&gt;::None<br/>_18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 }<br/>StorageDead(_30)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _18)</td></tr></table>>];
    bb10__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_0 = std::result::Result::&lt;u64, anchor_lang::error::Error&gt;::Err(move _17)<br/>StorageDead(_17)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_9 = const ()<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _3<br/></td></tr><tr><td align="left">_33 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as From&lt;u64&gt;&gt;::from(move _34)</td></tr></table>>];
    bb13__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_32 = &amp;_33<br/>StorageDead(_34)<br/>StorageLive(_35)<br/>_35 = _2<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;_1<br/></td></tr><tr><td align="left">_36 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as kamino_lending::utils::FractionExtra&gt;::to_ceil::&lt;u64&gt;(move _37)</td></tr></table>>];
    bb14__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/></td></tr><tr><td align="left">_31 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as kamino_lending::utils::FractionExtra&gt;::full_mul_int_ratio::&lt;u64, u64&gt;(move _32, move _35, move _36)</td></tr></table>>];
    bb15__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_33)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;_31<br/></td></tr><tr><td align="left">_38 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as kamino_lending::utils::FractionExtra&gt;::to_floor::&lt;u64&gt;(move _39)</td></tr></table>>];
    bb16__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_0 = std::result::Result::&lt;u64, anchor_lang::error::Error&gt;::Ok(move _38)<br/>StorageDead(_38)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">return</td></tr></table>>];
    bb18__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb19__0_417 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_417 -> bb2__0_417 [label="0"];
    bb0__0_417 -> bb1__0_417 [label="otherwise"];
    bb1__0_417 -> bb17__0_417 [label=""];
    bb2__0_417 -> bb4__0_417 [label="0"];
    bb2__0_417 -> bb3__0_417 [label="otherwise"];
    bb3__0_417 -> bb5__0_417 [label="return"];
    bb4__0_417 -> bb12__0_417 [label=""];
    bb5__0_417 -> bb11__0_417 [label="0"];
    bb5__0_417 -> bb6__0_417 [label="otherwise"];
    bb6__0_417 -> bb7__0_417 [label="return"];
    bb7__0_417 -> bb8__0_417 [label="return"];
    bb7__0_417 -> bb18__0_417 [label="unwind"];
    bb8__0_417 -> bb9__0_417 [label="return"];
    bb8__0_417 -> bb18__0_417 [label="unwind"];
    bb9__0_417 -> bb10__0_417 [label="return"];
    bb9__0_417 -> bb19__0_417 [label="unwind"];
    bb10__0_417 -> bb17__0_417 [label=""];
    bb11__0_417 -> bb12__0_417 [label=""];
    bb12__0_417 -> bb13__0_417 [label="return"];
    bb13__0_417 -> bb14__0_417 [label="return"];
    bb14__0_417 -> bb15__0_417 [label="return"];
    bb15__0_417 -> bb16__0_417 [label="return"];
    bb16__0_417 -> bb17__0_417 [label=""];
    bb18__0_417 -> bb19__0_417 [label="return"];
}
