// MIR for `handlers::handler_initialize_shares_metadata::process` after PreCodegen

fn handlers::handler_initialize_shares_metadata::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>>, _2: String, _3: String, _4: String) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug name => _2;
    debug symbol => _3;
    debug uri => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: &std::cell::Ref<'_, state::VaultState>;
    let _6: std::cell::Ref<'_, state::VaultState>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _8: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: std::cell::Ref<'_, state::VaultState>;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &std::string::String;
    let _20: std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 3];
    let _25: &[&str; 3];
    let _26: [&str; 3];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let mut _28: &[core::fmt::rt::Argument<'_>; 3];
    let _29: &[core::fmt::rt::Argument<'_>; 3];
    let _30: [core::fmt::rt::Argument<'_>; 3];
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: &std::string::String;
    let _39: &std::string::String;
    let _40: ();
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _42: std::result::Result<(), anchor_lang::error::Error>;
    let mut _43: anchor_lang::prelude::AccountInfo<'_>;
    let mut _44: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _45: anchor_lang::prelude::AccountInfo<'_>;
    let mut _46: &anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>;
    let mut _47: anchor_lang::prelude::AccountInfo<'_>;
    let mut _48: &anchor_lang::prelude::Account<'_, anchor_spl::token::Mint>;
    let mut _49: anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _51: anchor_lang::prelude::AccountInfo<'_>;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: anchor_lang::prelude::AccountInfo<'_>;
    let mut _54: &anchor_lang::prelude::Signer<'_>;
    let mut _55: anchor_lang::prelude::AccountInfo<'_>;
    let mut _56: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _57: anchor_lang::prelude::AccountInfo<'_>;
    let mut _58: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _59: u64;
    let mut _60: &state::VaultState;
    let mut _61: &std::cell::Ref<'_, state::VaultState>;
    let mut _62: utils::metadata::TokenMetadata;
    let mut _63: std::string::String;
    let mut _64: std::string::String;
    let mut _65: std::string::String;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _71: ();
    let mut _73: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _74: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _75: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _76: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _77: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _78: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _79: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _80: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _81: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    scope 1 {
        debug vault => _5;
        let _21: std::string::String;
        let _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _70: ();
        let mut _72: &[&str; 3];
        scope 6 {
            debug res => _21;
        }
        scope 7 {
            debug residual => _67;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _70;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const true;
        _83 = const true;
        _82 = const true;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _73 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _9 = &((*_73).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _9) -> [return: bb1, unwind: bb61];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = move ((_7 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _6 = move _14;
        StorageDead(_14);
        _5 = &_6;
        _93 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _72 = const _;
        _25 = &(*_72);
        _24 = &(*_25);
        _23 = move _24 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_2;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<String>(move _32) -> [return: bb7, unwind: bb35];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _99 = discriminant(_7);
        StorageDead(_7);
        goto -> bb30;
    }

    bb7: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_3;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_display::<String>(move _35) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_4;
        _38 = &(*_39);
        _37 = core::fmt::rt::Argument::<'_>::new_display::<String>(move _38) -> [return: bb9, unwind: bb35];
    }

    bb9: {
        StorageDead(_38);
        _30 = [move _31, move _34, move _37];
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = move _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_28);
        _22 = Arguments::<'_>::new_v1(move _23, move _27) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_23);
        _21 = format(move _22) -> [return: bb11, unwind: bb35];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        _20 = move _21;
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = <String as Deref>::deref(move _18) -> [return: bb12, unwind: bb34];
    }

    bb12: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        StorageDead(_16);
        drop(_20) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _74 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _44 = &((*_74).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _43 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _44) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _92 = const true;
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _75 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _46 = &((*_75).7: anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>);
        _45 = <anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _46) -> [return: bb16, unwind: bb58];
    }

    bb16: {
        _91 = const true;
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _76 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _48 = &((*_76).2: anchor_lang::prelude::Account<'_, anchor_spl::token::Mint>);
        _47 = <anchor_lang::prelude::Account<'_, anchor_spl::token::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _48) -> [return: bb17, unwind: bb56];
    }

    bb17: {
        _90 = const true;
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _77 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _50 = &((*_77).3: anchor_lang::prelude::AccountInfo<'_>);
        _49 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _50) -> [return: bb18, unwind: bb54];
    }

    bb18: {
        _89 = const true;
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        _78 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _52 = &((*_78).4: anchor_lang::prelude::AccountInfo<'_>);
        _51 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _52) -> [return: bb19, unwind: bb52];
    }

    bb19: {
        _88 = const true;
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        _79 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _54 = &((*_79).0: anchor_lang::prelude::Signer<'_>);
        _53 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _54) -> [return: bb20, unwind: bb50];
    }

    bb20: {
        _87 = const true;
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        _80 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _56 = &((*_80).5: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _55 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _56) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        _86 = const true;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _81 = deref_copy (_1.1: &mut handlers::handler_initialize_shares_metadata::InitializeSharesMetadata<'_>);
        _58 = &((*_81).6: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _57 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _58) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        _85 = const true;
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_5);
        _60 = <Ref<'_, state::VaultState> as Deref>::deref(move _61) -> [return: bb23, unwind: bb44];
    }

    bb23: {
        StorageDead(_61);
        _59 = ((*_60).2: u64);
        StorageLive(_62);
        StorageLive(_63);
        _84 = const false;
        _63 = move _2;
        StorageLive(_64);
        _83 = const false;
        _64 = move _3;
        StorageLive(_65);
        _82 = const false;
        _65 = move _4;
        _62 = utils::metadata::TokenMetadata { name: move _63, symbol: move _64, uri: move _65 };
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _42 = init(move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _62) -> [return: bb24, unwind: bb44];
    }

    bb24: {
        StorageDead(_62);
        StorageDead(_59);
        _85 = const false;
        StorageDead(_57);
        _86 = const false;
        StorageDead(_55);
        _87 = const false;
        StorageDead(_53);
        _88 = const false;
        StorageDead(_51);
        _89 = const false;
        StorageDead(_49);
        _90 = const false;
        StorageDead(_47);
        _91 = const false;
        StorageDead(_45);
        _92 = const false;
        StorageDead(_43);
        _41 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _42) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        StorageDead(_42);
        _66 = discriminant(_41);
        switchInt(move _66) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_70);
        _70 = ((_41 as Continue).0: ());
        _40 = _70;
        StorageDead(_70);
        _95 = discriminant(_41);
        StorageDead(_60);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_71);
        _71 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _71);
        StorageDead(_71);
        drop(_6) -> [return: bb29, unwind: bb61];
    }

    bb27: {
        StorageLive(_67);
        _67 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _69) -> [return: bb28, unwind: bb42];
    }

    bb28: {
        StorageDead(_69);
        StorageDead(_67);
        _97 = discriminant(_41);
        StorageDead(_60);
        StorageDead(_41);
        StorageDead(_40);
        drop(_6) -> [return: bb30, unwind: bb61];
    }

    bb29: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb33;
    }

    bb30: {
        StorageDead(_6);
        StorageDead(_5);
        switchInt(_82) -> [0: bb31, otherwise: bb39];
    }

    bb31: {
        switchInt(_83) -> [0: bb32, otherwise: bb40];
    }

    bb32: {
        switchInt(_84) -> [0: bb33, otherwise: bb41];
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_20) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_6) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_83) -> [0: bb37, otherwise: bb62];
    }

    bb37 (cleanup): {
        switchInt(_84) -> [0: bb38, otherwise: bb63];
    }

    bb38 (cleanup): {
        resume;
    }

    bb39: {
        drop(_4) -> [return: bb31, unwind: bb36];
    }

    bb40: {
        drop(_3) -> [return: bb32, unwind: bb37];
    }

    bb41: {
        drop(_2) -> [return: bb33, unwind: bb38];
    }

    bb42 (cleanup): {
        _101 = discriminant(_41);
        goto -> bb35;
    }

    bb43 (cleanup): {
        drop(_57) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_85) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_55) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_86) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_53) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_87) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_51) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_88) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_49) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_89) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_47) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_90) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_45) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_91) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_43) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_92) -> [0: bb35, otherwise: bb57];
    }

    bb59 (cleanup): {
        _102 = discriminant(_7);
        goto -> bb61;
    }

    bb60 (cleanup): {
        drop(_4) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_82) -> [0: bb36, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_2) -> [return: bb38, unwind terminate(cleanup)];
    }
}
