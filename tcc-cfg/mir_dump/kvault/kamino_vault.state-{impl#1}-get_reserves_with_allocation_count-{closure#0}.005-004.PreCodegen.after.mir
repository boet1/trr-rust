// MIR for `state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::get_reserves_with_allocation_count::{closure#0}` after PreCodegen

fn state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::get_reserves_with_allocation_count::{closure#0}(_1: &mut {closure@programs\kvault\src\state.rs:109:21: 109:24}, _2: &&VaultAllocation) -> bool {
    debug r => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: &state::VaultAllocation;
    let mut _11: &state::VaultAllocation;
    let mut _12: &state::VaultAllocation;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _10 = deref_copy (*_2);
        _4 = &((*_10).0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        _11 = deref_copy (*_2);
        _8 = ((*_11).2: u64);
        _7 = Gt(move _8, const 0_u64);
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_8);
        StorageLive(_9);
        _12 = deref_copy (*_2);
        _9 = ((*_12).3: u64);
        _0 = Gt(move _9, const 0_u64);
        StorageDead(_9);
        goto -> bb8;
    }

    bb5: {
        StorageDead(_8);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        _0 = const false;
        goto -> bb8;
    }

    bb8: {
        StorageDead(_7);
        StorageDead(_3);
        return;
    }
}
