// MIR for `handlers::handler_withdraw::<impl at programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18>::try_accounts` after PreCodegen

fn handlers::handler_withdraw::<impl at programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut WithdrawBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error>;
    let _6: handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_withdraw::WithdrawFromAvailable<'_>>;
    let mut _8: std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: &[u8];
    let mut _12: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _13: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_withdraw::WithdrawFromInvested<'_>>;
    let mut _22: std::result::Result<handlers::handler_withdraw::WithdrawFromInvested<'_>, anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _25: &[u8];
    let mut _26: &mut handlers::handler_withdraw::WithdrawFromInvestedBumps;
    let mut _27: &mut handlers::handler_withdraw::WithdrawFromInvestedBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _36: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::Pubkey;
    let mut _39: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _40: &[u8];
    let mut _41: &mut handlers::handler_withdraw::WithdrawBumps;
    let mut _42: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _43: {closure@programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18};
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _51: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _53: &anchor_lang::prelude::Pubkey;
    let mut _54: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _55: &[u8];
    let mut _56: &mut handlers::handler_withdraw::WithdrawBumps;
    let mut _57: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _58: {closure@programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18};
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: (anchor_lang::prelude::Pubkey, u8);
    let mut _67: &[&[u8]];
    let mut _68: &[&[u8]; 1];
    let _69: &[&[u8]; 1];
    let _70: [&[u8]; 1];
    let mut _71: &[u8];
    let mut _72: &[u8; 17];
    let _73: &[u8; 17];
    let mut _74: &anchor_lang::prelude::Pubkey;
    let _75: &&anchor_lang::prelude::Pubkey;
    let mut _76: u8;
    let _77: ();
    let mut _78: bool;
    let mut _79: &anchor_lang::prelude::Pubkey;
    let _80: anchor_lang::prelude::Pubkey;
    let mut _81: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _82: &anchor_lang::prelude::Pubkey;
    let mut _83: !;
    let mut _84: anchor_lang::error::Error;
    let mut _85: anchor_lang::error::Error;
    let mut _86: anchor_lang::error::Error;
    let mut _87: anchor_lang::error::ErrorCode;
    let mut _88: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _89: anchor_lang::prelude::Pubkey;
    let mut _90: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _91: anchor_lang::prelude::Pubkey;
    let mut _92: handlers::handler_withdraw::Withdraw<'_>;
    let mut _93: handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _94: handlers::handler_withdraw::WithdrawFromInvested<'_>;
    let mut _95: anchor_lang::prelude::AccountInfo<'_>;
    let mut _96: anchor_lang::prelude::AccountInfo<'_>;
    let mut _98: &anchor_lang::prelude::Pubkey;
    let mut _99: bool;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    scope 1 {
        debug withdraw_from_available => _6;
        let _20: handlers::handler_withdraw::WithdrawFromInvested<'_>;
        let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _33: handlers::handler_withdraw::WithdrawFromInvested<'_>;
        scope 6 {
            debug withdraw_from_reserve_accounts => _20;
            let _34: anchor_lang::prelude::AccountInfo<'_>;
            let _45: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _48: anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug event_authority => _34;
                let _49: anchor_lang::prelude::AccountInfo<'_>;
                let _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _63: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug program => _49;
                    let _64: anchor_lang::prelude::Pubkey;
                    let _65: u8;
                    let mut _97: &[&[u8]; 1];
                    scope 21 {
                        debug __pda_address => _64;
                        debug __bump => _65;
                    }
                }
                scope 17 {
                    debug residual => _60;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _63;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _45;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _48;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _30;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _33;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }

    bb0: {
        _99 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = &mut (*_2);
        StorageLive(_11);
        _11 = &(*_3);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut ((*_4).0: handlers::handler_withdraw::WithdrawFromAvailableBumps);
        _12 = &mut (*_13);
        StorageLive(_14);
        _14 = &mut (*_5);
        _8 = <handlers::handler_withdraw::WithdrawFromAvailable<'_> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _9, move _10, move _11, move _12, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb42];
    }

    bb2: {
        StorageDead(_8);
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = move ((_7 as Continue).0: handlers::handler_withdraw::WithdrawFromAvailable<'_>);
        _6 = move _19;
        StorageDead(_19);
        _100 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &mut (*_2);
        StorageLive(_25);
        _25 = &(*_3);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut ((*_4).1: handlers::handler_withdraw::WithdrawFromInvestedBumps);
        _26 = &mut (*_27);
        StorageLive(_28);
        _28 = &mut (*_5);
        _22 = <handlers::handler_withdraw::WithdrawFromInvested<'_> as anchor_lang::Accounts<'_, WithdrawFromInvestedBumps>>::try_accounts(move _23, move _24, move _25, move _26, move _28) -> [return: bb7, unwind: bb41];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb6, unwind: bb48];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        _114 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb36;
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<handlers::handler_withdraw::WithdrawFromInvested<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb8, unwind: bb41];
    }

    bb8: {
        StorageDead(_22);
        _29 = discriminant(_21);
        switchInt(move _29) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_33);
        _33 = move ((_21 as Continue).0: handlers::handler_withdraw::WithdrawFromInvested<'_>);
        _20 = move _33;
        StorageDead(_33);
        _102 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_1);
        StorageLive(_39);
        _39 = &mut (*_2);
        StorageLive(_40);
        _40 = &(*_3);
        StorageLive(_41);
        _41 = &mut (*_4);
        StorageLive(_42);
        _42 = &mut (*_5);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, WithdrawBumps>>::try_accounts(move _38, move _39, move _40, move _41, move _42) -> [return: bb12, unwind: bb40];
    }

    bb10: {
        StorageLive(_30);
        _30 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb11, unwind: bb47];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        _112 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        goto -> bb35;
    }

    bb12: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_43);
        _43 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18};
        _36 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18}>(move _37, move _43) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        StorageDead(_43);
        StorageDead(_37);
        _35 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb14, unwind: bb40];
    }

    bb14: {
        StorageDead(_36);
        _44 = discriminant(_35);
        switchInt(move _44) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_48);
        _48 = move ((_35 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _34 = move _48;
        StorageDead(_48);
        _104 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_1);
        StorageLive(_54);
        _54 = &mut (*_2);
        StorageLive(_55);
        _55 = &(*_3);
        StorageLive(_56);
        _56 = &mut (*_4);
        StorageLive(_57);
        _57 = &mut (*_5);
        _52 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, WithdrawBumps>>::try_accounts(move _53, move _54, move _55, move _56, move _57) -> [return: bb18, unwind: bb39];
    }

    bb16: {
        StorageLive(_45);
        _45 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_47);
        _47 = move _45;
        _0 = <std::result::Result<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _47) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        StorageDead(_47);
        StorageDead(_45);
        _110 = discriminant(_35);
        StorageDead(_35);
        goto -> bb34;
    }

    bb18: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_58);
        _58 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18};
        _51 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:64:10: 64:18}>(move _52, move _58) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        StorageDead(_58);
        StorageDead(_52);
        _50 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _51) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        StorageDead(_51);
        _59 = discriminant(_50);
        switchInt(move _59) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_63);
        _63 = move ((_50 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _49 = move _63;
        StorageDead(_63);
        _106 = discriminant(_50);
        StorageDead(_50);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _97 = const _;
        _69 = &(*_97);
        _68 = &(*_69);
        _67 = move _68 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_1;
        _98 = deref_copy (*_75);
        _74 = &(*_98);
        _66 = anchor_lang::prelude::Pubkey::find_program_address(move _67, move _74) -> [return: bb24, unwind: bb38];
    }

    bb22: {
        StorageLive(_60);
        _60 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <std::result::Result<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _62) -> [return: bb23, unwind: bb45];
    }

    bb23: {
        StorageDead(_62);
        StorageDead(_60);
        _108 = discriminant(_50);
        StorageDead(_50);
        goto -> bb33;
    }

    bb24: {
        StorageDead(_74);
        StorageDead(_67);
        StorageLive(_64);
        _64 = (_66.0: anchor_lang::prelude::Pubkey);
        StorageLive(_65);
        _65 = (_66.1: u8);
        StorageDead(_75);
        StorageDead(_69);
        StorageDead(_66);
        StorageLive(_76);
        _76 = _65;
        ((*_4).2: u8) = move _76;
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_34;
        _80 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _81) -> [return: bb25, unwind: bb38];
    }

    bb25: {
        _79 = &_80;
        StorageDead(_81);
        StorageLive(_82);
        _82 = &_64;
        _78 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _79, move _82) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        switchInt(move _78) -> [0: bb32, otherwise: bb27];
    }

    bb27: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = ConstraintSeeds;
        _86 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _87) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        StorageDead(_87);
        _85 = anchor_lang::error::Error::with_account_name::<&str>(move _86, const "event_authority") -> [return: bb29, unwind: bb38];
    }

    bb29: {
        _99 = const true;
        StorageDead(_86);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_34;
        _89 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _90) -> [return: bb30, unwind: bb44];
    }

    bb30: {
        StorageDead(_90);
        StorageLive(_91);
        _91 = _64;
        _88 = (move _89, move _91);
        StorageDead(_91);
        StorageDead(_89);
        _99 = const false;
        _84 = anchor_lang::error::Error::with_pubkeys(move _85, move _88) -> [return: bb31, unwind: bb44];
    }

    bb31: {
        StorageDead(_88);
        _99 = const false;
        StorageDead(_85);
        _0 = std::result::Result::<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error>::Err(move _84);
        StorageDead(_84);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_65);
        StorageDead(_64);
        drop(_49) -> [return: bb33, unwind: bb39];
    }

    bb32: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_79);
        _77 = const ();
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_92);
        StorageLive(_93);
        _93 = move _6;
        StorageLive(_94);
        _94 = move _20;
        StorageLive(_95);
        _95 = move _34;
        StorageLive(_96);
        _96 = move _49;
        _92 = handlers::handler_withdraw::Withdraw::<'_> { withdraw_from_available: move _93, withdraw_from_reserve_accounts: move _94, event_authority: move _95, program: move _96 };
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_93);
        _0 = std::result::Result::<handlers::handler_withdraw::Withdraw<'_>, anchor_lang::error::Error>::Ok(move _92);
        StorageDead(_92);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_49);
        StorageDead(_34);
        StorageDead(_20);
        StorageDead(_6);
        goto -> bb37;
    }

    bb33: {
        StorageDead(_49);
        drop(_34) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        StorageDead(_34);
        drop(_20) -> [return: bb35, unwind: bb41];
    }

    bb35: {
        StorageDead(_20);
        drop(_6) -> [return: bb36, unwind: bb42];
    }

    bb36: {
        StorageDead(_6);
        goto -> bb37;
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_49) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_34) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_20) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_6) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }

    bb43 (cleanup): {
        drop(_85) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_99) -> [0: bb38, otherwise: bb43];
    }

    bb45 (cleanup): {
        _116 = discriminant(_50);
        goto -> bb39;
    }

    bb46 (cleanup): {
        _117 = discriminant(_35);
        goto -> bb40;
    }

    bb47 (cleanup): {
        _118 = discriminant(_21);
        goto -> bb41;
    }

    bb48 (cleanup): {
        _119 = discriminant(_7);
        goto -> bb42;
    }
}
