digraph Mir_0_136 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn handlers::handler_remove_allocation::process(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, handlers::handler_remove_allocation::RemoveAllocation&lt;ReErased&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _2: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::VaultState&gt;;<br align="left"/>let mut _3: std::cell::RefMut&lt;ReErased, state::VaultState&gt;;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::RefMut&lt;ReErased, state::VaultState&gt;&gt;;<br align="left"/>let mut _5: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::VaultState&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::VaultState&gt;;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _11: std::cell::RefMut&lt;ReErased, state::VaultState&gt;;<br align="left"/>let _12: ();<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _14: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _15: &amp;ReErased mut state::VaultState;<br align="left"/>let mut _16: &amp;ReErased mut state::VaultState;<br align="left"/>let mut _17: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::VaultState&gt;;<br align="left"/>let mut _18: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _19: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _20: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _21: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, kamino_lending::Reserve&gt;;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _26: ();<br align="left"/>let mut _27: ();<br align="left"/>let mut _28: &amp;ReErased mut handlers::handler_remove_allocation::RemoveAllocation&lt;ReErased&gt;;<br align="left"/>let mut _29: &amp;ReErased mut handlers::handler_remove_allocation::RemoveAllocation&lt;ReErased&gt;;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug vault =&gt; _2;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>>;
    bb0__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_28 = deref_copy (_1.1: &amp;mut handlers::handler_remove_allocation::RemoveAllocation&lt;'_&gt;)<br/>_6 = &amp;((*_28).1: anchor_lang::prelude::AccountLoader&lt;'_, state::VaultState&gt;)<br/></td></tr><tr><td align="left">_5 = anchor_lang::prelude::AccountLoader::&lt;'_, state::VaultState&gt;::load_mut(move _6)</td></tr></table>>];
    bb1__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;RefMut&lt;'_, state::VaultState&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = move ((_4 as Continue).0: std::cell::RefMut&lt;'_, state::VaultState&gt;)<br/>_3 = move _11<br/>StorageDead(_11)<br/>_2 = &amp;mut _3<br/>_30 = discriminant(_4)<br/>StorageDead(_4)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;mut (*_2)<br/></td></tr><tr><td align="left">_16 = &lt;RefMut&lt;'_, state::VaultState&gt; as DerefMut&gt;::deref_mut(move _17)</td></tr></table>>];
    bb4__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>_36 = discriminant(_4)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = &amp;mut (*_16)<br/>StorageDead(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_29 = deref_copy (_1.1: &amp;mut handlers::handler_remove_allocation::RemoveAllocation&lt;'_&gt;)<br/>_21 = &amp;((*_29).2: anchor_lang::prelude::AccountLoader&lt;'_, kamino_lending::Reserve&gt;)<br/></td></tr><tr><td align="left">_20 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, kamino_lending::Reserve&gt; as anchor_lang::Key&gt;::key(move _21)</td></tr></table>>];
    bb8__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_19 = &amp;_20<br/>_18 = &amp;(*_19)<br/></td></tr><tr><td align="left">_14 = state::VaultState::remove_reserve_from_allocation(move _15, move _18)</td></tr></table>>];
    bb9__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb10__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_22 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb11__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_13 as Continue).0: ())<br/>_12 = _26<br/>StorageDead(_26)<br/>_32 = discriminant(_13)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_27)<br/>_27 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _27)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb12__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = move ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_25)<br/>_25 = move _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb13__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>_34 = discriminant(_13)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb14__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb17__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">17 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb18__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb19__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left" balign="left">_38 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left" balign="left">_39 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_136 -> bb1__0_136 [label="return"];
    bb1__0_136 -> bb2__0_136 [label="return"];
    bb1__0_136 -> bb18__0_136 [label="unwind"];
    bb2__0_136 -> bb3__0_136 [label="0"];
    bb2__0_136 -> bb5__0_136 [label="1"];
    bb2__0_136 -> bb4__0_136 [label="otherwise"];
    bb3__0_136 -> bb7__0_136 [label="return"];
    bb3__0_136 -> bb17__0_136 [label="unwind"];
    bb5__0_136 -> bb6__0_136 [label="return"];
    bb5__0_136 -> bb20__0_136 [label="unwind"];
    bb6__0_136 -> bb15__0_136 [label=""];
    bb7__0_136 -> bb8__0_136 [label="return"];
    bb7__0_136 -> bb17__0_136 [label="unwind"];
    bb8__0_136 -> bb9__0_136 [label="return"];
    bb8__0_136 -> bb17__0_136 [label="unwind"];
    bb9__0_136 -> bb10__0_136 [label="return"];
    bb9__0_136 -> bb17__0_136 [label="unwind"];
    bb10__0_136 -> bb11__0_136 [label="0"];
    bb10__0_136 -> bb12__0_136 [label="1"];
    bb10__0_136 -> bb4__0_136 [label="otherwise"];
    bb11__0_136 -> bb14__0_136 [label="return"];
    bb11__0_136 -> bb18__0_136 [label="unwind"];
    bb12__0_136 -> bb13__0_136 [label="return"];
    bb12__0_136 -> bb19__0_136 [label="unwind"];
    bb13__0_136 -> bb15__0_136 [label="return"];
    bb13__0_136 -> bb18__0_136 [label="unwind"];
    bb14__0_136 -> bb16__0_136 [label=""];
    bb15__0_136 -> bb16__0_136 [label=""];
    bb17__0_136 -> bb18__0_136 [label="return"];
    bb19__0_136 -> bb17__0_136 [label=""];
    bb20__0_136 -> bb18__0_136 [label=""];
}
