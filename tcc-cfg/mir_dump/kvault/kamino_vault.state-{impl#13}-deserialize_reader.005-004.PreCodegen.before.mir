// MIR for `state::<impl at programs\kvault\src\state.rs:16:10: 16:27>::deserialize_reader` before PreCodegen

fn state::<impl at programs\kvault\src\state.rs:16:10: 16:27>::deserialize_reader(_1: &mut R) -> std::result::Result<state::VaultState, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<state::VaultState, std::io::Error>;
    let mut _2: state::VaultState;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _5: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: anchor_lang::prelude::Pubkey;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _14: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: anchor_lang::prelude::Pubkey;
    let mut _21: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _23: std::result::Result<u64, std::io::Error>;
    let mut _24: &mut R;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: u64;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _32: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _33: &mut R;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _38: anchor_lang::prelude::Pubkey;
    let mut _39: u64;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _41: std::result::Result<u64, std::io::Error>;
    let mut _42: &mut R;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _47: u64;
    let mut _48: anchor_lang::prelude::Pubkey;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _50: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _51: &mut R;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _56: anchor_lang::prelude::Pubkey;
    let mut _57: anchor_lang::prelude::Pubkey;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _59: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _60: &mut R;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _65: anchor_lang::prelude::Pubkey;
    let mut _66: anchor_lang::prelude::Pubkey;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _68: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _69: &mut R;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _74: anchor_lang::prelude::Pubkey;
    let mut _75: u64;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _77: std::result::Result<u64, std::io::Error>;
    let mut _78: &mut R;
    let mut _79: isize;
    let _80: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _83: u64;
    let mut _84: u64;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _86: std::result::Result<u64, std::io::Error>;
    let mut _87: &mut R;
    let mut _88: isize;
    let _89: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _92: u64;
    let mut _93: u64;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _95: std::result::Result<u64, std::io::Error>;
    let mut _96: &mut R;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _101: u64;
    let mut _102: u64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _104: std::result::Result<u64, std::io::Error>;
    let mut _105: &mut R;
    let mut _106: isize;
    let _107: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _110: u64;
    let mut _111: u64;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _113: std::result::Result<u64, std::io::Error>;
    let mut _114: &mut R;
    let mut _115: isize;
    let _116: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _119: u64;
    let mut _120: u64;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _122: std::result::Result<u64, std::io::Error>;
    let mut _123: &mut R;
    let mut _124: isize;
    let _125: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _128: u64;
    let mut _129: u64;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _131: std::result::Result<u64, std::io::Error>;
    let mut _132: &mut R;
    let mut _133: isize;
    let _134: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _137: u64;
    let mut _138: u64;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _140: std::result::Result<u64, std::io::Error>;
    let mut _141: &mut R;
    let mut _142: isize;
    let _143: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _146: u64;
    let mut _147: u128;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u128>;
    let mut _149: std::result::Result<u128, std::io::Error>;
    let mut _150: &mut R;
    let mut _151: isize;
    let _152: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _155: u128;
    let mut _156: u128;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u128>;
    let mut _158: std::result::Result<u128, std::io::Error>;
    let mut _159: &mut R;
    let mut _160: isize;
    let _161: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _164: u128;
    let mut _165: [state::VaultAllocation; 25];
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [state::VaultAllocation; 25]>;
    let mut _167: std::result::Result<[state::VaultAllocation; 25], std::io::Error>;
    let mut _168: &mut R;
    let mut _169: isize;
    let _170: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _173: [state::VaultAllocation; 25];
    let mut _174: [u128; 256];
    let mut _175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [u128; 256]>;
    let mut _176: std::result::Result<[u128; 256], std::io::Error>;
    let mut _177: &mut R;
    let mut _178: isize;
    let _179: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _180: !;
    let mut _181: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _182: [u128; 256];
    let mut _183: u64;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _185: std::result::Result<u64, std::io::Error>;
    let mut _186: &mut R;
    let mut _187: isize;
    let _188: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _191: u64;
    let mut _192: u64;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _194: std::result::Result<u64, std::io::Error>;
    let mut _195: &mut R;
    let mut _196: isize;
    let _197: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _200: u64;
    let mut _201: u64;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _203: std::result::Result<u64, std::io::Error>;
    let mut _204: &mut R;
    let mut _205: isize;
    let _206: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _209: u64;
    let mut _210: u64;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _212: std::result::Result<u64, std::io::Error>;
    let mut _213: &mut R;
    let mut _214: isize;
    let _215: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _218: u64;
    let mut _219: u64;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _221: std::result::Result<u64, std::io::Error>;
    let mut _222: &mut R;
    let mut _223: isize;
    let _224: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _227: u64;
    let mut _228: anchor_lang::prelude::Pubkey;
    let mut _229: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _230: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _231: &mut R;
    let mut _232: isize;
    let _233: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _236: anchor_lang::prelude::Pubkey;
    let mut _237: u128;
    let mut _238: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u128>;
    let mut _239: std::result::Result<u128, std::io::Error>;
    let mut _240: &mut R;
    let mut _241: isize;
    let _242: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _243: !;
    let mut _244: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _245: u128;
    let mut _246: u128;
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u128>;
    let mut _248: std::result::Result<u128, std::io::Error>;
    let mut _249: &mut R;
    let mut _250: isize;
    let _251: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _252: !;
    let mut _253: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _254: u128;
    let mut _255: u128;
    let mut _256: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u128>;
    let mut _257: std::result::Result<u128, std::io::Error>;
    let mut _258: &mut R;
    let mut _259: isize;
    let _260: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _261: !;
    let mut _262: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _263: u128;
    let mut _264: [u8; 40];
    let mut _265: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [u8; 40]>;
    let mut _266: std::result::Result<[u8; 40], std::io::Error>;
    let mut _267: &mut R;
    let mut _268: isize;
    let _269: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _272: [u8; 40];
    let mut _273: anchor_lang::prelude::Pubkey;
    let mut _274: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _275: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _276: &mut R;
    let mut _277: isize;
    let _278: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _281: anchor_lang::prelude::Pubkey;
    let mut _282: anchor_lang::prelude::Pubkey;
    let mut _283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _284: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _285: &mut R;
    let mut _286: isize;
    let _287: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _288: !;
    let mut _289: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _290: anchor_lang::prelude::Pubkey;
    let mut _291: u64;
    let mut _292: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _293: std::result::Result<u64, std::io::Error>;
    let mut _294: &mut R;
    let mut _295: isize;
    let _296: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _299: u64;
    let mut _300: u64;
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _302: std::result::Result<u64, std::io::Error>;
    let mut _303: &mut R;
    let mut _304: isize;
    let _305: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _308: u64;
    let mut _309: anchor_lang::prelude::Pubkey;
    let mut _310: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _311: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _312: &mut R;
    let mut _313: isize;
    let _314: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _315: !;
    let mut _316: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _317: anchor_lang::prelude::Pubkey;
    let mut _318: [u128; 242];
    let mut _319: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [u128; 242]>;
    let mut _320: std::result::Result<[u128; 242], std::io::Error>;
    let mut _321: &mut R;
    let mut _322: isize;
    let _323: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _324: !;
    let mut _325: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _326: [u128; 242];
    let mut _327: bool;
    let mut _328: bool;
    let mut _329: bool;
    let mut _330: bool;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: bool;
    let mut _334: bool;
    let mut _335: bool;
    let mut _336: bool;
    let mut _337: bool;
    let mut _338: bool;
    let mut _339: bool;
    let mut _340: bool;
    let mut _341: bool;
    let mut _342: bool;
    let mut _343: bool;
    let mut _344: bool;
    let mut _345: bool;
    let mut _346: bool;
    let mut _347: bool;
    let mut _348: bool;
    let mut _349: bool;
    let mut _350: bool;
    let mut _351: bool;
    let mut _352: bool;
    let mut _353: bool;
    let mut _354: bool;
    let mut _355: bool;
    let mut _356: bool;
    let mut _357: bool;
    let mut _358: bool;
    let mut _359: bool;
    let mut _360: bool;
    let mut _361: bool;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _26;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _35;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _38;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _44;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _47;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _53;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _56;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _62;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _65;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _71;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _74;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _80;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _83;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _89;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _92;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _98;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _101;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _107;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _110;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _116;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _119;
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _125;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _128;
        scope 56 {
        }
    }
    scope 57 {
        debug residual => _134;
        scope 58 {
        }
    }
    scope 59 {
        debug val => _137;
        scope 60 {
        }
    }
    scope 61 {
        debug residual => _143;
        scope 62 {
        }
    }
    scope 63 {
        debug val => _146;
        scope 64 {
        }
    }
    scope 65 {
        debug residual => _152;
        scope 66 {
        }
    }
    scope 67 {
        debug val => _155;
        scope 68 {
        }
    }
    scope 69 {
        debug residual => _161;
        scope 70 {
        }
    }
    scope 71 {
        debug val => _164;
        scope 72 {
        }
    }
    scope 73 {
        debug residual => _170;
        scope 74 {
        }
    }
    scope 75 {
        debug val => _173;
        scope 76 {
        }
    }
    scope 77 {
        debug residual => _179;
        scope 78 {
        }
    }
    scope 79 {
        debug val => _182;
        scope 80 {
        }
    }
    scope 81 {
        debug residual => _188;
        scope 82 {
        }
    }
    scope 83 {
        debug val => _191;
        scope 84 {
        }
    }
    scope 85 {
        debug residual => _197;
        scope 86 {
        }
    }
    scope 87 {
        debug val => _200;
        scope 88 {
        }
    }
    scope 89 {
        debug residual => _206;
        scope 90 {
        }
    }
    scope 91 {
        debug val => _209;
        scope 92 {
        }
    }
    scope 93 {
        debug residual => _215;
        scope 94 {
        }
    }
    scope 95 {
        debug val => _218;
        scope 96 {
        }
    }
    scope 97 {
        debug residual => _224;
        scope 98 {
        }
    }
    scope 99 {
        debug val => _227;
        scope 100 {
        }
    }
    scope 101 {
        debug residual => _233;
        scope 102 {
        }
    }
    scope 103 {
        debug val => _236;
        scope 104 {
        }
    }
    scope 105 {
        debug residual => _242;
        scope 106 {
        }
    }
    scope 107 {
        debug val => _245;
        scope 108 {
        }
    }
    scope 109 {
        debug residual => _251;
        scope 110 {
        }
    }
    scope 111 {
        debug val => _254;
        scope 112 {
        }
    }
    scope 113 {
        debug residual => _260;
        scope 114 {
        }
    }
    scope 115 {
        debug val => _263;
        scope 116 {
        }
    }
    scope 117 {
        debug residual => _269;
        scope 118 {
        }
    }
    scope 119 {
        debug val => _272;
        scope 120 {
        }
    }
    scope 121 {
        debug residual => _278;
        scope 122 {
        }
    }
    scope 123 {
        debug val => _281;
        scope 124 {
        }
    }
    scope 125 {
        debug residual => _287;
        scope 126 {
        }
    }
    scope 127 {
        debug val => _290;
        scope 128 {
        }
    }
    scope 129 {
        debug residual => _296;
        scope 130 {
        }
    }
    scope 131 {
        debug val => _299;
        scope 132 {
        }
    }
    scope 133 {
        debug residual => _305;
        scope 134 {
        }
    }
    scope 135 {
        debug val => _308;
        scope 136 {
        }
    }
    scope 137 {
        debug residual => _314;
        scope 138 {
        }
    }
    scope 139 {
        debug val => _317;
        scope 140 {
        }
    }
    scope 141 {
        debug residual => _323;
        scope 142 {
        }
    }
    scope 143 {
        debug val => _326;
        scope 144 {
        }
    }

    bb0: {
        _361 = const false;
        _360 = const false;
        _359 = const false;
        _358 = const false;
        _357 = const false;
        _356 = const false;
        _355 = const false;
        _354 = const false;
        _353 = const false;
        _352 = const false;
        _351 = const false;
        _350 = const false;
        _349 = const false;
        _348 = const false;
        _347 = const false;
        _346 = const false;
        _345 = const false;
        _344 = const false;
        _343 = const false;
        _342 = const false;
        _341 = const false;
        _340 = const false;
        _339 = const false;
        _338 = const false;
        _337 = const false;
        _336 = const false;
        _335 = const false;
        _334 = const false;
        _333 = const false;
        _332 = const false;
        _331 = const false;
        _330 = const false;
        _329 = const false;
        _328 = const false;
        _327 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb183];
    }

    bb2: {
        _361 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: anchor_lang::prelude::Pubkey);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb254];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb254];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb218;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb254];
    }

    bb8: {
        _360 = const true;
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: anchor_lang::prelude::Pubkey);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_1);
        _23 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _24) -> [return: bb12, unwind: bb253];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb253];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb217;
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _23) -> [return: bb13, unwind: bb253];
    }

    bb13: {
        _359 = const true;
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: u64);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_1);
        _32 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _33) -> [return: bb17, unwind: bb252];
    }

    bb15: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb16, unwind: bb252];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb216;
    }

    bb17: {
        StorageDead(_33);
        _31 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _32) -> [return: bb18, unwind: bb252];
    }

    bb18: {
        _358 = const true;
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: anchor_lang::prelude::Pubkey);
        _30 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_1);
        _41 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _42) -> [return: bb22, unwind: bb251];
    }

    bb20: {
        StorageLive(_35);
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _37) -> [return: bb21, unwind: bb251];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb215;
    }

    bb22: {
        StorageDead(_42);
        _40 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _41) -> [return: bb23, unwind: bb251];
    }

    bb23: {
        _357 = const true;
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: u64);
        _39 = _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut (*_1);
        _50 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _51) -> [return: bb27, unwind: bb250];
    }

    bb25: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _46) -> [return: bb26, unwind: bb250];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb214;
    }

    bb27: {
        StorageDead(_51);
        _49 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _50) -> [return: bb28, unwind: bb250];
    }

    bb28: {
        _356 = const true;
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_49 as Continue).0: anchor_lang::prelude::Pubkey);
        _48 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (*_1);
        _59 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _60) -> [return: bb32, unwind: bb249];
    }

    bb30: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _55) -> [return: bb31, unwind: bb249];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb213;
    }

    bb32: {
        StorageDead(_60);
        _58 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _59) -> [return: bb33, unwind: bb249];
    }

    bb33: {
        _355 = const true;
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: anchor_lang::prelude::Pubkey);
        _57 = _65;
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_1);
        _68 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _69) -> [return: bb37, unwind: bb248];
    }

    bb35: {
        StorageLive(_62);
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _64) -> [return: bb36, unwind: bb248];
    }

    bb36: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb212;
    }

    bb37: {
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _68) -> [return: bb38, unwind: bb248];
    }

    bb38: {
        _354 = const true;
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_74);
        _74 = ((_67 as Continue).0: anchor_lang::prelude::Pubkey);
        _66 = _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &mut (*_1);
        _77 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _78) -> [return: bb42, unwind: bb247];
    }

    bb40: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _73) -> [return: bb41, unwind: bb247];
    }

    bb41: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb211;
    }

    bb42: {
        StorageDead(_78);
        _76 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _77) -> [return: bb43, unwind: bb247];
    }

    bb43: {
        _353 = const true;
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: u64);
        _75 = _83;
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &mut (*_1);
        _86 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _87) -> [return: bb47, unwind: bb246];
    }

    bb45: {
        StorageLive(_80);
        _80 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_82);
        _82 = move _80;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _82) -> [return: bb46, unwind: bb246];
    }

    bb46: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb210;
    }

    bb47: {
        StorageDead(_87);
        _85 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _86) -> [return: bb48, unwind: bb246];
    }

    bb48: {
        _352 = const true;
        StorageDead(_86);
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_92);
        _92 = ((_85 as Continue).0: u64);
        _84 = _92;
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &mut (*_1);
        _95 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _96) -> [return: bb52, unwind: bb245];
    }

    bb50: {
        StorageLive(_89);
        _89 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_91);
        _91 = move _89;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _91) -> [return: bb51, unwind: bb245];
    }

    bb51: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb209;
    }

    bb52: {
        StorageDead(_96);
        _94 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _95) -> [return: bb53, unwind: bb245];
    }

    bb53: {
        _351 = const true;
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_101);
        _101 = ((_94 as Continue).0: u64);
        _93 = _101;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &mut (*_1);
        _104 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _105) -> [return: bb57, unwind: bb244];
    }

    bb55: {
        StorageLive(_98);
        _98 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _100) -> [return: bb56, unwind: bb244];
    }

    bb56: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb208;
    }

    bb57: {
        StorageDead(_105);
        _103 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _104) -> [return: bb58, unwind: bb244];
    }

    bb58: {
        _350 = const true;
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_110);
        _110 = ((_103 as Continue).0: u64);
        _102 = _110;
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &mut (*_1);
        _113 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _114) -> [return: bb62, unwind: bb243];
    }

    bb60: {
        StorageLive(_107);
        _107 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _109) -> [return: bb61, unwind: bb243];
    }

    bb61: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb207;
    }

    bb62: {
        StorageDead(_114);
        _112 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _113) -> [return: bb63, unwind: bb243];
    }

    bb63: {
        _349 = const true;
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_119);
        _119 = ((_112 as Continue).0: u64);
        _111 = _119;
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut (*_1);
        _122 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _123) -> [return: bb67, unwind: bb242];
    }

    bb65: {
        StorageLive(_116);
        _116 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_118);
        _118 = move _116;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _118) -> [return: bb66, unwind: bb242];
    }

    bb66: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb206;
    }

    bb67: {
        StorageDead(_123);
        _121 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _122) -> [return: bb68, unwind: bb242];
    }

    bb68: {
        _348 = const true;
        StorageDead(_122);
        _124 = discriminant(_121);
        switchInt(move _124) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_128);
        _128 = ((_121 as Continue).0: u64);
        _120 = _128;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &mut (*_1);
        _131 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _132) -> [return: bb72, unwind: bb241];
    }

    bb70: {
        StorageLive(_125);
        _125 = move ((_121 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _127) -> [return: bb71, unwind: bb241];
    }

    bb71: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb205;
    }

    bb72: {
        StorageDead(_132);
        _130 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _131) -> [return: bb73, unwind: bb241];
    }

    bb73: {
        _347 = const true;
        StorageDead(_131);
        _133 = discriminant(_130);
        switchInt(move _133) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_137);
        _137 = ((_130 as Continue).0: u64);
        _129 = _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &mut (*_1);
        _140 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _141) -> [return: bb77, unwind: bb240];
    }

    bb75: {
        StorageLive(_134);
        _134 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _136) -> [return: bb76, unwind: bb240];
    }

    bb76: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb204;
    }

    bb77: {
        StorageDead(_141);
        _139 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _140) -> [return: bb78, unwind: bb240];
    }

    bb78: {
        _346 = const true;
        StorageDead(_140);
        _142 = discriminant(_139);
        switchInt(move _142) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_146);
        _146 = ((_139 as Continue).0: u64);
        _138 = _146;
        StorageDead(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &mut (*_1);
        _149 = <u128 as BorshDeserialize>::deserialize_reader::<R>(move _150) -> [return: bb82, unwind: bb239];
    }

    bb80: {
        StorageLive(_143);
        _143 = move ((_139 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_145);
        _145 = move _143;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _145) -> [return: bb81, unwind: bb239];
    }

    bb81: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb203;
    }

    bb82: {
        StorageDead(_150);
        _148 = <std::result::Result<u128, std::io::Error> as Try>::branch(move _149) -> [return: bb83, unwind: bb239];
    }

    bb83: {
        _345 = const true;
        StorageDead(_149);
        _151 = discriminant(_148);
        switchInt(move _151) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_155);
        _155 = ((_148 as Continue).0: u128);
        _147 = _155;
        StorageDead(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &mut (*_1);
        _158 = <u128 as BorshDeserialize>::deserialize_reader::<R>(move _159) -> [return: bb87, unwind: bb238];
    }

    bb85: {
        StorageLive(_152);
        _152 = move ((_148 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _154) -> [return: bb86, unwind: bb238];
    }

    bb86: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb202;
    }

    bb87: {
        StorageDead(_159);
        _157 = <std::result::Result<u128, std::io::Error> as Try>::branch(move _158) -> [return: bb88, unwind: bb238];
    }

    bb88: {
        _344 = const true;
        StorageDead(_158);
        _160 = discriminant(_157);
        switchInt(move _160) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_164);
        _164 = ((_157 as Continue).0: u128);
        _156 = _164;
        StorageDead(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &mut (*_1);
        _167 = <[VaultAllocation; 25] as BorshDeserialize>::deserialize_reader::<R>(move _168) -> [return: bb92, unwind: bb237];
    }

    bb90: {
        StorageLive(_161);
        _161 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_163);
        _163 = move _161;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _163) -> [return: bb91, unwind: bb237];
    }

    bb91: {
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb201;
    }

    bb92: {
        StorageDead(_168);
        _166 = <std::result::Result<[VaultAllocation; 25], std::io::Error> as Try>::branch(move _167) -> [return: bb93, unwind: bb237];
    }

    bb93: {
        _343 = const true;
        StorageDead(_167);
        _169 = discriminant(_166);
        switchInt(move _169) -> [0: bb94, 1: bb95, otherwise: bb4];
    }

    bb94: {
        StorageLive(_173);
        _173 = ((_166 as Continue).0: [state::VaultAllocation; 25]);
        _165 = _173;
        StorageDead(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &mut (*_1);
        _176 = <[u128; 256] as BorshDeserialize>::deserialize_reader::<R>(move _177) -> [return: bb97, unwind: bb236];
    }

    bb95: {
        StorageLive(_170);
        _170 = move ((_166 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_172);
        _172 = move _170;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _172) -> [return: bb96, unwind: bb236];
    }

    bb96: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb200;
    }

    bb97: {
        StorageDead(_177);
        _175 = <std::result::Result<[u128; 256], std::io::Error> as Try>::branch(move _176) -> [return: bb98, unwind: bb236];
    }

    bb98: {
        _342 = const true;
        StorageDead(_176);
        _178 = discriminant(_175);
        switchInt(move _178) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        StorageLive(_182);
        _182 = ((_175 as Continue).0: [u128; 256]);
        _174 = _182;
        StorageDead(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &mut (*_1);
        _185 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _186) -> [return: bb102, unwind: bb235];
    }

    bb100: {
        StorageLive(_179);
        _179 = move ((_175 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_181);
        _181 = move _179;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _181) -> [return: bb101, unwind: bb235];
    }

    bb101: {
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb199;
    }

    bb102: {
        StorageDead(_186);
        _184 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _185) -> [return: bb103, unwind: bb235];
    }

    bb103: {
        _341 = const true;
        StorageDead(_185);
        _187 = discriminant(_184);
        switchInt(move _187) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_191);
        _191 = ((_184 as Continue).0: u64);
        _183 = _191;
        StorageDead(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &mut (*_1);
        _194 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _195) -> [return: bb107, unwind: bb234];
    }

    bb105: {
        StorageLive(_188);
        _188 = move ((_184 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_190);
        _190 = move _188;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _190) -> [return: bb106, unwind: bb234];
    }

    bb106: {
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb198;
    }

    bb107: {
        StorageDead(_195);
        _193 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _194) -> [return: bb108, unwind: bb234];
    }

    bb108: {
        _340 = const true;
        StorageDead(_194);
        _196 = discriminant(_193);
        switchInt(move _196) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_200);
        _200 = ((_193 as Continue).0: u64);
        _192 = _200;
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &mut (*_1);
        _203 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _204) -> [return: bb112, unwind: bb233];
    }

    bb110: {
        StorageLive(_197);
        _197 = move ((_193 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _199) -> [return: bb111, unwind: bb233];
    }

    bb111: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb197;
    }

    bb112: {
        StorageDead(_204);
        _202 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _203) -> [return: bb113, unwind: bb233];
    }

    bb113: {
        _339 = const true;
        StorageDead(_203);
        _205 = discriminant(_202);
        switchInt(move _205) -> [0: bb114, 1: bb115, otherwise: bb4];
    }

    bb114: {
        StorageLive(_209);
        _209 = ((_202 as Continue).0: u64);
        _201 = _209;
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &mut (*_1);
        _212 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _213) -> [return: bb117, unwind: bb232];
    }

    bb115: {
        StorageLive(_206);
        _206 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_208);
        _208 = move _206;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _208) -> [return: bb116, unwind: bb232];
    }

    bb116: {
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb196;
    }

    bb117: {
        StorageDead(_213);
        _211 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _212) -> [return: bb118, unwind: bb232];
    }

    bb118: {
        _338 = const true;
        StorageDead(_212);
        _214 = discriminant(_211);
        switchInt(move _214) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        StorageLive(_218);
        _218 = ((_211 as Continue).0: u64);
        _210 = _218;
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &mut (*_1);
        _221 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _222) -> [return: bb122, unwind: bb231];
    }

    bb120: {
        StorageLive(_215);
        _215 = move ((_211 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_217);
        _217 = move _215;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _217) -> [return: bb121, unwind: bb231];
    }

    bb121: {
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb195;
    }

    bb122: {
        StorageDead(_222);
        _220 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _221) -> [return: bb123, unwind: bb231];
    }

    bb123: {
        _337 = const true;
        StorageDead(_221);
        _223 = discriminant(_220);
        switchInt(move _223) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_227);
        _227 = ((_220 as Continue).0: u64);
        _219 = _227;
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &mut (*_1);
        _230 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _231) -> [return: bb127, unwind: bb230];
    }

    bb125: {
        StorageLive(_224);
        _224 = move ((_220 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_226);
        _226 = move _224;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _226) -> [return: bb126, unwind: bb230];
    }

    bb126: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb194;
    }

    bb127: {
        StorageDead(_231);
        _229 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _230) -> [return: bb128, unwind: bb230];
    }

    bb128: {
        _336 = const true;
        StorageDead(_230);
        _232 = discriminant(_229);
        switchInt(move _232) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        StorageLive(_236);
        _236 = ((_229 as Continue).0: anchor_lang::prelude::Pubkey);
        _228 = _236;
        StorageDead(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &mut (*_1);
        _239 = <u128 as BorshDeserialize>::deserialize_reader::<R>(move _240) -> [return: bb132, unwind: bb229];
    }

    bb130: {
        StorageLive(_233);
        _233 = move ((_229 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_235);
        _235 = move _233;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _235) -> [return: bb131, unwind: bb229];
    }

    bb131: {
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb193;
    }

    bb132: {
        StorageDead(_240);
        _238 = <std::result::Result<u128, std::io::Error> as Try>::branch(move _239) -> [return: bb133, unwind: bb229];
    }

    bb133: {
        _335 = const true;
        StorageDead(_239);
        _241 = discriminant(_238);
        switchInt(move _241) -> [0: bb134, 1: bb135, otherwise: bb4];
    }

    bb134: {
        StorageLive(_245);
        _245 = ((_238 as Continue).0: u128);
        _237 = _245;
        StorageDead(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &mut (*_1);
        _248 = <u128 as BorshDeserialize>::deserialize_reader::<R>(move _249) -> [return: bb137, unwind: bb228];
    }

    bb135: {
        StorageLive(_242);
        _242 = move ((_238 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_244);
        _244 = move _242;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _244) -> [return: bb136, unwind: bb228];
    }

    bb136: {
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb192;
    }

    bb137: {
        StorageDead(_249);
        _247 = <std::result::Result<u128, std::io::Error> as Try>::branch(move _248) -> [return: bb138, unwind: bb228];
    }

    bb138: {
        _334 = const true;
        StorageDead(_248);
        _250 = discriminant(_247);
        switchInt(move _250) -> [0: bb139, 1: bb140, otherwise: bb4];
    }

    bb139: {
        StorageLive(_254);
        _254 = ((_247 as Continue).0: u128);
        _246 = _254;
        StorageDead(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &mut (*_1);
        _257 = <u128 as BorshDeserialize>::deserialize_reader::<R>(move _258) -> [return: bb142, unwind: bb227];
    }

    bb140: {
        StorageLive(_251);
        _251 = move ((_247 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_253);
        _253 = move _251;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _253) -> [return: bb141, unwind: bb227];
    }

    bb141: {
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb191;
    }

    bb142: {
        StorageDead(_258);
        _256 = <std::result::Result<u128, std::io::Error> as Try>::branch(move _257) -> [return: bb143, unwind: bb227];
    }

    bb143: {
        _333 = const true;
        StorageDead(_257);
        _259 = discriminant(_256);
        switchInt(move _259) -> [0: bb144, 1: bb145, otherwise: bb4];
    }

    bb144: {
        StorageLive(_263);
        _263 = ((_256 as Continue).0: u128);
        _255 = _263;
        StorageDead(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &mut (*_1);
        _266 = <[u8; 40] as BorshDeserialize>::deserialize_reader::<R>(move _267) -> [return: bb147, unwind: bb226];
    }

    bb145: {
        StorageLive(_260);
        _260 = move ((_256 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_262);
        _262 = move _260;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _262) -> [return: bb146, unwind: bb226];
    }

    bb146: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb190;
    }

    bb147: {
        StorageDead(_267);
        _265 = <std::result::Result<[u8; 40], std::io::Error> as Try>::branch(move _266) -> [return: bb148, unwind: bb226];
    }

    bb148: {
        _332 = const true;
        StorageDead(_266);
        _268 = discriminant(_265);
        switchInt(move _268) -> [0: bb149, 1: bb150, otherwise: bb4];
    }

    bb149: {
        StorageLive(_272);
        _272 = ((_265 as Continue).0: [u8; 40]);
        _264 = _272;
        StorageDead(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &mut (*_1);
        _275 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _276) -> [return: bb152, unwind: bb225];
    }

    bb150: {
        StorageLive(_269);
        _269 = move ((_265 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_271);
        _271 = move _269;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _271) -> [return: bb151, unwind: bb225];
    }

    bb151: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb189;
    }

    bb152: {
        StorageDead(_276);
        _274 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _275) -> [return: bb153, unwind: bb225];
    }

    bb153: {
        _331 = const true;
        StorageDead(_275);
        _277 = discriminant(_274);
        switchInt(move _277) -> [0: bb154, 1: bb155, otherwise: bb4];
    }

    bb154: {
        StorageLive(_281);
        _281 = ((_274 as Continue).0: anchor_lang::prelude::Pubkey);
        _273 = _281;
        StorageDead(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &mut (*_1);
        _284 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _285) -> [return: bb157, unwind: bb224];
    }

    bb155: {
        StorageLive(_278);
        _278 = move ((_274 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_280);
        _280 = move _278;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _280) -> [return: bb156, unwind: bb224];
    }

    bb156: {
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_273);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb188;
    }

    bb157: {
        StorageDead(_285);
        _283 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _284) -> [return: bb158, unwind: bb224];
    }

    bb158: {
        _330 = const true;
        StorageDead(_284);
        _286 = discriminant(_283);
        switchInt(move _286) -> [0: bb159, 1: bb160, otherwise: bb4];
    }

    bb159: {
        StorageLive(_290);
        _290 = ((_283 as Continue).0: anchor_lang::prelude::Pubkey);
        _282 = _290;
        StorageDead(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &mut (*_1);
        _293 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _294) -> [return: bb162, unwind: bb223];
    }

    bb160: {
        StorageLive(_287);
        _287 = move ((_283 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_289);
        _289 = move _287;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _289) -> [return: bb161, unwind: bb223];
    }

    bb161: {
        StorageDead(_289);
        StorageDead(_287);
        StorageDead(_282);
        StorageDead(_273);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb187;
    }

    bb162: {
        StorageDead(_294);
        _292 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _293) -> [return: bb163, unwind: bb223];
    }

    bb163: {
        _329 = const true;
        StorageDead(_293);
        _295 = discriminant(_292);
        switchInt(move _295) -> [0: bb164, 1: bb165, otherwise: bb4];
    }

    bb164: {
        StorageLive(_299);
        _299 = ((_292 as Continue).0: u64);
        _291 = _299;
        StorageDead(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &mut (*_1);
        _302 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _303) -> [return: bb167, unwind: bb222];
    }

    bb165: {
        StorageLive(_296);
        _296 = move ((_292 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_298);
        _298 = move _296;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _298) -> [return: bb166, unwind: bb222];
    }

    bb166: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_291);
        StorageDead(_282);
        StorageDead(_273);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb186;
    }

    bb167: {
        StorageDead(_303);
        _301 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _302) -> [return: bb168, unwind: bb222];
    }

    bb168: {
        _328 = const true;
        StorageDead(_302);
        _304 = discriminant(_301);
        switchInt(move _304) -> [0: bb169, 1: bb170, otherwise: bb4];
    }

    bb169: {
        StorageLive(_308);
        _308 = ((_301 as Continue).0: u64);
        _300 = _308;
        StorageDead(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &mut (*_1);
        _311 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _312) -> [return: bb172, unwind: bb221];
    }

    bb170: {
        StorageLive(_305);
        _305 = move ((_301 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_307);
        _307 = move _305;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _307) -> [return: bb171, unwind: bb221];
    }

    bb171: {
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_300);
        StorageDead(_291);
        StorageDead(_282);
        StorageDead(_273);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb185;
    }

    bb172: {
        StorageDead(_312);
        _310 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _311) -> [return: bb173, unwind: bb221];
    }

    bb173: {
        _327 = const true;
        StorageDead(_311);
        _313 = discriminant(_310);
        switchInt(move _313) -> [0: bb174, 1: bb175, otherwise: bb4];
    }

    bb174: {
        StorageLive(_317);
        _317 = ((_310 as Continue).0: anchor_lang::prelude::Pubkey);
        _309 = _317;
        StorageDead(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &mut (*_1);
        _320 = <[u128; 242] as BorshDeserialize>::deserialize_reader::<R>(move _321) -> [return: bb177, unwind: bb220];
    }

    bb175: {
        StorageLive(_314);
        _314 = move ((_310 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_316);
        _316 = move _314;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _316) -> [return: bb176, unwind: bb220];
    }

    bb176: {
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_309);
        StorageDead(_300);
        StorageDead(_291);
        StorageDead(_282);
        StorageDead(_273);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb184;
    }

    bb177: {
        StorageDead(_321);
        _319 = <std::result::Result<[u128; 242], std::io::Error> as Try>::branch(move _320) -> [return: bb178, unwind: bb220];
    }

    bb178: {
        StorageDead(_320);
        _322 = discriminant(_319);
        switchInt(move _322) -> [0: bb179, 1: bb180, otherwise: bb4];
    }

    bb179: {
        StorageLive(_326);
        _326 = ((_319 as Continue).0: [u128; 242]);
        _318 = _326;
        StorageDead(_326);
        _2 = state::VaultState { vault_admin_authority: move _3, base_vault_authority: move _12, base_vault_authority_bump: move _21, token_mint: move _30, token_mint_decimals: move _39, token_vault: move _48, token_program: move _57, shares_mint: move _66, shares_mint_decimals: move _75, token_available: move _84, shares_issued: move _93, available_crank_funds: move _102, unallocated_weight: move _111, performance_fee_bps: move _120, management_fee_bps: move _129, last_fee_charge_timestamp: move _138, prev_aum_sf: move _147, pending_fees_sf: move _156, vault_allocation_strategy: move _165, padding_1: move _174, min_deposit_amount: move _183, min_withdraw_amount: move _192, min_invest_amount: move _201, min_invest_delay_slots: move _210, crank_fund_fee_per_reserve: move _219, pending_admin: move _228, cumulative_earned_interest_sf: move _237, cumulative_mgmt_fees_sf: move _246, cumulative_perf_fees_sf: move _255, name: move _264, vault_lookup_table: move _273, vault_farm: move _282, creation_timestamp: move _291, unallocated_tokens_cap: move _300, allocation_admin: move _309, padding_3: move _318 };
        StorageDead(_318);
        StorageDead(_309);
        StorageDead(_300);
        StorageDead(_291);
        StorageDead(_282);
        StorageDead(_273);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<state::VaultState, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _362 = discriminant(_319);
        StorageDead(_319);
        _364 = discriminant(_310);
        _327 = const false;
        StorageDead(_310);
        _366 = discriminant(_301);
        _328 = const false;
        StorageDead(_301);
        _368 = discriminant(_292);
        _329 = const false;
        StorageDead(_292);
        _370 = discriminant(_283);
        _330 = const false;
        StorageDead(_283);
        _372 = discriminant(_274);
        _331 = const false;
        StorageDead(_274);
        _374 = discriminant(_265);
        _332 = const false;
        StorageDead(_265);
        _376 = discriminant(_256);
        _333 = const false;
        StorageDead(_256);
        _378 = discriminant(_247);
        _334 = const false;
        StorageDead(_247);
        _380 = discriminant(_238);
        _335 = const false;
        StorageDead(_238);
        _382 = discriminant(_229);
        _336 = const false;
        StorageDead(_229);
        _384 = discriminant(_220);
        _337 = const false;
        StorageDead(_220);
        _386 = discriminant(_211);
        _338 = const false;
        StorageDead(_211);
        _388 = discriminant(_202);
        _339 = const false;
        StorageDead(_202);
        _390 = discriminant(_193);
        _340 = const false;
        StorageDead(_193);
        _392 = discriminant(_184);
        _341 = const false;
        StorageDead(_184);
        _394 = discriminant(_175);
        _342 = const false;
        StorageDead(_175);
        _396 = discriminant(_166);
        _343 = const false;
        StorageDead(_166);
        _398 = discriminant(_157);
        _344 = const false;
        StorageDead(_157);
        _400 = discriminant(_148);
        _345 = const false;
        StorageDead(_148);
        _402 = discriminant(_139);
        _346 = const false;
        StorageDead(_139);
        _404 = discriminant(_130);
        _347 = const false;
        StorageDead(_130);
        _406 = discriminant(_121);
        _348 = const false;
        StorageDead(_121);
        _408 = discriminant(_112);
        _349 = const false;
        StorageDead(_112);
        _410 = discriminant(_103);
        _350 = const false;
        StorageDead(_103);
        _412 = discriminant(_94);
        _351 = const false;
        StorageDead(_94);
        _414 = discriminant(_85);
        _352 = const false;
        StorageDead(_85);
        _416 = discriminant(_76);
        _353 = const false;
        StorageDead(_76);
        _418 = discriminant(_67);
        _354 = const false;
        StorageDead(_67);
        _420 = discriminant(_58);
        _355 = const false;
        StorageDead(_58);
        _422 = discriminant(_49);
        _356 = const false;
        StorageDead(_49);
        _424 = discriminant(_40);
        _357 = const false;
        StorageDead(_40);
        _426 = discriminant(_31);
        _358 = const false;
        StorageDead(_31);
        _428 = discriminant(_22);
        _359 = const false;
        StorageDead(_22);
        _430 = discriminant(_13);
        _360 = const false;
        StorageDead(_13);
        _432 = discriminant(_4);
        _361 = const false;
        StorageDead(_4);
        goto -> bb182;
    }

    bb180: {
        StorageLive(_323);
        _323 = move ((_319 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_325);
        _325 = move _323;
        _0 = <std::result::Result<state::VaultState, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _325) -> [return: bb181, unwind: bb219];
    }

    bb181: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_318);
        StorageDead(_309);
        StorageDead(_300);
        StorageDead(_291);
        StorageDead(_282);
        StorageDead(_273);
        StorageDead(_264);
        StorageDead(_255);
        StorageDead(_246);
        StorageDead(_237);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        _434 = discriminant(_319);
        StorageDead(_319);
        goto -> bb184;
    }

    bb182: {
        return;
    }

    bb183 (cleanup): {
        resume;
    }

    bb184: {
        _436 = discriminant(_310);
        _327 = const false;
        StorageDead(_310);
        goto -> bb185;
    }

    bb185: {
        _438 = discriminant(_301);
        _328 = const false;
        StorageDead(_301);
        goto -> bb186;
    }

    bb186: {
        _440 = discriminant(_292);
        _329 = const false;
        StorageDead(_292);
        goto -> bb187;
    }

    bb187: {
        _442 = discriminant(_283);
        _330 = const false;
        StorageDead(_283);
        goto -> bb188;
    }

    bb188: {
        _444 = discriminant(_274);
        _331 = const false;
        StorageDead(_274);
        goto -> bb189;
    }

    bb189: {
        _446 = discriminant(_265);
        _332 = const false;
        StorageDead(_265);
        goto -> bb190;
    }

    bb190: {
        _448 = discriminant(_256);
        _333 = const false;
        StorageDead(_256);
        goto -> bb191;
    }

    bb191: {
        _450 = discriminant(_247);
        _334 = const false;
        StorageDead(_247);
        goto -> bb192;
    }

    bb192: {
        _452 = discriminant(_238);
        _335 = const false;
        StorageDead(_238);
        goto -> bb193;
    }

    bb193: {
        _454 = discriminant(_229);
        _336 = const false;
        StorageDead(_229);
        goto -> bb194;
    }

    bb194: {
        _456 = discriminant(_220);
        _337 = const false;
        StorageDead(_220);
        goto -> bb195;
    }

    bb195: {
        _458 = discriminant(_211);
        _338 = const false;
        StorageDead(_211);
        goto -> bb196;
    }

    bb196: {
        _460 = discriminant(_202);
        _339 = const false;
        StorageDead(_202);
        goto -> bb197;
    }

    bb197: {
        _462 = discriminant(_193);
        _340 = const false;
        StorageDead(_193);
        goto -> bb198;
    }

    bb198: {
        _464 = discriminant(_184);
        _341 = const false;
        StorageDead(_184);
        goto -> bb199;
    }

    bb199: {
        _466 = discriminant(_175);
        _342 = const false;
        StorageDead(_175);
        goto -> bb200;
    }

    bb200: {
        _468 = discriminant(_166);
        _343 = const false;
        StorageDead(_166);
        goto -> bb201;
    }

    bb201: {
        _470 = discriminant(_157);
        _344 = const false;
        StorageDead(_157);
        goto -> bb202;
    }

    bb202: {
        _472 = discriminant(_148);
        _345 = const false;
        StorageDead(_148);
        goto -> bb203;
    }

    bb203: {
        _474 = discriminant(_139);
        _346 = const false;
        StorageDead(_139);
        goto -> bb204;
    }

    bb204: {
        _476 = discriminant(_130);
        _347 = const false;
        StorageDead(_130);
        goto -> bb205;
    }

    bb205: {
        _478 = discriminant(_121);
        _348 = const false;
        StorageDead(_121);
        goto -> bb206;
    }

    bb206: {
        _480 = discriminant(_112);
        _349 = const false;
        StorageDead(_112);
        goto -> bb207;
    }

    bb207: {
        _482 = discriminant(_103);
        _350 = const false;
        StorageDead(_103);
        goto -> bb208;
    }

    bb208: {
        _484 = discriminant(_94);
        _351 = const false;
        StorageDead(_94);
        goto -> bb209;
    }

    bb209: {
        _486 = discriminant(_85);
        _352 = const false;
        StorageDead(_85);
        goto -> bb210;
    }

    bb210: {
        _488 = discriminant(_76);
        _353 = const false;
        StorageDead(_76);
        goto -> bb211;
    }

    bb211: {
        _490 = discriminant(_67);
        _354 = const false;
        StorageDead(_67);
        goto -> bb212;
    }

    bb212: {
        _492 = discriminant(_58);
        _355 = const false;
        StorageDead(_58);
        goto -> bb213;
    }

    bb213: {
        _494 = discriminant(_49);
        _356 = const false;
        StorageDead(_49);
        goto -> bb214;
    }

    bb214: {
        _496 = discriminant(_40);
        _357 = const false;
        StorageDead(_40);
        goto -> bb215;
    }

    bb215: {
        _498 = discriminant(_31);
        _358 = const false;
        StorageDead(_31);
        goto -> bb216;
    }

    bb216: {
        _500 = discriminant(_22);
        _359 = const false;
        StorageDead(_22);
        goto -> bb217;
    }

    bb217: {
        _502 = discriminant(_13);
        _360 = const false;
        StorageDead(_13);
        goto -> bb218;
    }

    bb218: {
        _504 = discriminant(_4);
        _361 = const false;
        StorageDead(_4);
        goto -> bb182;
    }

    bb219 (cleanup): {
        _506 = discriminant(_319);
        goto -> bb220;
    }

    bb220 (cleanup): {
        _507 = discriminant(_310);
        goto -> bb221;
    }

    bb221 (cleanup): {
        _508 = discriminant(_301);
        goto -> bb222;
    }

    bb222 (cleanup): {
        _509 = discriminant(_292);
        goto -> bb223;
    }

    bb223 (cleanup): {
        _510 = discriminant(_283);
        goto -> bb224;
    }

    bb224 (cleanup): {
        _511 = discriminant(_274);
        goto -> bb225;
    }

    bb225 (cleanup): {
        _512 = discriminant(_265);
        goto -> bb226;
    }

    bb226 (cleanup): {
        _513 = discriminant(_256);
        goto -> bb227;
    }

    bb227 (cleanup): {
        _514 = discriminant(_247);
        goto -> bb228;
    }

    bb228 (cleanup): {
        _515 = discriminant(_238);
        goto -> bb229;
    }

    bb229 (cleanup): {
        _516 = discriminant(_229);
        goto -> bb230;
    }

    bb230 (cleanup): {
        _517 = discriminant(_220);
        goto -> bb231;
    }

    bb231 (cleanup): {
        _518 = discriminant(_211);
        goto -> bb232;
    }

    bb232 (cleanup): {
        _519 = discriminant(_202);
        goto -> bb233;
    }

    bb233 (cleanup): {
        _520 = discriminant(_193);
        goto -> bb234;
    }

    bb234 (cleanup): {
        _521 = discriminant(_184);
        goto -> bb235;
    }

    bb235 (cleanup): {
        _522 = discriminant(_175);
        goto -> bb236;
    }

    bb236 (cleanup): {
        _523 = discriminant(_166);
        goto -> bb237;
    }

    bb237 (cleanup): {
        _524 = discriminant(_157);
        goto -> bb238;
    }

    bb238 (cleanup): {
        _525 = discriminant(_148);
        goto -> bb239;
    }

    bb239 (cleanup): {
        _526 = discriminant(_139);
        goto -> bb240;
    }

    bb240 (cleanup): {
        _527 = discriminant(_130);
        goto -> bb241;
    }

    bb241 (cleanup): {
        _528 = discriminant(_121);
        goto -> bb242;
    }

    bb242 (cleanup): {
        _529 = discriminant(_112);
        goto -> bb243;
    }

    bb243 (cleanup): {
        _530 = discriminant(_103);
        goto -> bb244;
    }

    bb244 (cleanup): {
        _531 = discriminant(_94);
        goto -> bb245;
    }

    bb245 (cleanup): {
        _532 = discriminant(_85);
        goto -> bb246;
    }

    bb246 (cleanup): {
        _533 = discriminant(_76);
        goto -> bb247;
    }

    bb247 (cleanup): {
        _534 = discriminant(_67);
        goto -> bb248;
    }

    bb248 (cleanup): {
        _535 = discriminant(_58);
        goto -> bb249;
    }

    bb249 (cleanup): {
        _536 = discriminant(_49);
        goto -> bb250;
    }

    bb250 (cleanup): {
        _537 = discriminant(_40);
        goto -> bb251;
    }

    bb251 (cleanup): {
        _538 = discriminant(_31);
        goto -> bb252;
    }

    bb252 (cleanup): {
        _539 = discriminant(_22);
        goto -> bb253;
    }

    bb253 (cleanup): {
        _540 = discriminant(_13);
        goto -> bb254;
    }

    bb254 (cleanup): {
        _541 = discriminant(_4);
        goto -> bb183;
    }
}
