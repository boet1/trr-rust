// MIR for `cpi_mem::<impl at programs\kvault\src\utils\cpi_mem.rs:24:1: 24:35>::build_cpi_memory_lender` after PreCodegen

fn cpi_mem::<impl at programs\kvault\src\utils\cpi_mem.rs:24:1: 24:35>::build_cpi_memory_lender(_1: Vec<anchor_lang::prelude::AccountInfo<'_>>, _2: &[anchor_lang::prelude::AccountInfo<'_>]) -> cpi_mem::CpiMemoryLender<'_> {
    debug ctx_accounts => _1;
    debug remaining_accounts => _2;
    let mut _0: utils::cpi_mem::CpiMemoryLender<'_>;
    let _3: ();
    let mut _4: &mut std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _5: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _6: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: bool;

    bb0: {
        _7 = const false;
        _7 = const true;
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut _1;
        StorageLive(_5);
        _5 = &(*_2);
        _3 = Vec::<anchor_lang::prelude::AccountInfo<'_>>::extend_from_slice(move _4, move _5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_6);
        _7 = const false;
        _6 = move _1;
        _0 = cpi_mem::CpiMemoryLender::<'_>::new(move _6, const 64_usize, const 128_usize) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_6);
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        switchInt(_7) -> [0: bb3, otherwise: bb4];
    }
}
