// MIR for `handlers::handler_withdraw::withdraw_from_available` after PreCodegen

fn handlers::handler_withdraw::withdraw_from_available(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_withdraw::WithdrawFromAvailable<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug shares_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: events::SharesToWithdrawEvent;
    let _4: events::WithdrawResultEvent;
    let mut _5: (events::SharesToWithdrawEvent, events::WithdrawResultEvent);
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (events::SharesToWithdrawEvent, events::WithdrawResultEvent)>;
    let mut _7: std::result::Result<(events::SharesToWithdrawEvent, events::WithdrawResultEvent), anchor_lang::error::Error>;
    let mut _8: &handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _9: std::option::Option<&handlers::handler_withdraw::WithdrawFromInvested<'_>>;
    let mut _10: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _16: (events::SharesToWithdrawEvent, events::WithdrawResultEvent);
    let _17: ();
    let mut _19: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: &events::SharesToWithdrawEvent;
    let _24: &events::SharesToWithdrawEvent;
    let mut _26: std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>>;
    let mut _27: std::array::IntoIter<u8, 8>;
    let mut _28: [u8; 8];
    let mut _29: std::vec::IntoIter<u8>;
    let mut _30: std::vec::Vec<u8>;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: &anchor_lang::prelude::Pubkey;
    let mut _34: &[u8];
    let _35: &[u8];
    let mut _36: &std::vec::Vec<u8>;
    let _37: &std::vec::Vec<u8>;
    let mut _38: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _39: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _40: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: *mut u8;
    let mut _44: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _45: anchor_lang::prelude::AccountMeta;
    let mut _46: anchor_lang::prelude::Pubkey;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _49: std::result::Result<(), anchor_lang::error::Error>;
    let mut _50: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _51: &solana_program::instruction::Instruction;
    let _52: &solana_program::instruction::Instruction;
    let mut _53: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _54: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _55: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _56: [anchor_lang::prelude::AccountInfo<'_>; 1];
    let mut _57: anchor_lang::prelude::AccountInfo<'_>;
    let mut _58: &[&[&[u8]]];
    let mut _59: &[&[&[u8]]; 1];
    let _60: &[&[&[u8]]; 1];
    let _61: [&[&[u8]]; 1];
    let mut _62: &[&[u8]];
    let mut _63: &[&[u8]; 2];
    let _64: &[&[u8]; 2];
    let _65: [&[u8]; 2];
    let mut _66: &[u8];
    let mut _67: &[u8; 17];
    let _68: &[u8; 17];
    let mut _69: &[u8];
    let mut _70: &[u8; 1];
    let _71: &[u8; 1];
    let _72: [u8; 1];
    let mut _73: u8;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _79: ();
    let mut _81: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _85: &events::WithdrawResultEvent;
    let _86: &events::WithdrawResultEvent;
    let mut _88: std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>>;
    let mut _89: std::array::IntoIter<u8, 8>;
    let mut _90: [u8; 8];
    let mut _91: std::vec::IntoIter<u8>;
    let mut _92: std::vec::Vec<u8>;
    let mut _94: anchor_lang::prelude::Pubkey;
    let mut _95: &anchor_lang::prelude::Pubkey;
    let mut _96: &[u8];
    let _97: &[u8];
    let mut _98: &std::vec::Vec<u8>;
    let _99: &std::vec::Vec<u8>;
    let mut _100: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _101: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _102: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _103: usize;
    let mut _104: usize;
    let mut _105: *mut u8;
    let mut _106: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _107: anchor_lang::prelude::AccountMeta;
    let mut _108: anchor_lang::prelude::Pubkey;
    let _109: ();
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _111: std::result::Result<(), anchor_lang::error::Error>;
    let mut _112: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _113: &solana_program::instruction::Instruction;
    let _114: &solana_program::instruction::Instruction;
    let mut _115: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _117: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _118: [anchor_lang::prelude::AccountInfo<'_>; 1];
    let mut _119: anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: &[&[&[u8]]];
    let mut _121: &[&[&[u8]]; 1];
    let _122: &[&[&[u8]]; 1];
    let _123: [&[&[u8]]; 1];
    let mut _124: &[&[u8]];
    let mut _125: &[&[u8]; 2];
    let _126: &[&[u8]; 2];
    let _127: [&[u8]; 2];
    let mut _128: &[u8];
    let mut _129: &[u8; 17];
    let _130: &[u8; 17];
    let mut _131: &[u8];
    let mut _132: &[u8; 1];
    let _133: &[u8; 1];
    let _134: [u8; 1];
    let mut _135: u8;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _141: ();
    let mut _142: &mut handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _143: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _144: &mut handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _147: &anchor_lang::prelude::Pubkey;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: *const [anchor_lang::prelude::AccountMeta; 1];
    let mut _170: *const [anchor_lang::prelude::AccountMeta; 1];
    scope 1 {
        debug shares_to_withdraw_event => _3;
        debug withdraw_result_event => _4;
        let _18: anchor_lang::prelude::AccountInfo<'_>;
        let _80: anchor_lang::prelude::AccountInfo<'_>;
        scope 6 {
            debug authority_info => _18;
            let _20: u8;
            scope 7 {
                debug authority_bump => _20;
                let _21: [u8; 8];
                scope 8 {
                    debug disc => _21;
                    let _22: std::vec::Vec<u8>;
                    scope 9 {
                        debug inner_data => _22;
                        let _25: std::vec::Vec<u8>;
                        scope 10 {
                            debug ix_data => _25;
                            let _31: solana_program::instruction::Instruction;
                            let mut _177: *const ();
                            let mut _178: usize;
                            let mut _179: usize;
                            let mut _180: usize;
                            let mut _181: usize;
                            let mut _182: bool;
                            scope 11 {
                                debug ix => _31;
                                let _75: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _78: ();
                                scope 13 {
                                    debug residual => _75;
                                    scope 14 {
                                    }
                                }
                                scope 15 {
                                    debug val => _78;
                                    scope 16 {
                                    }
                                }
                            }
                            scope 12 {
                            }
                        }
                    }
                }
            }
        }
        scope 17 {
            debug authority_info => _80;
            let _82: u8;
            scope 18 {
                debug authority_bump => _82;
                let _83: [u8; 8];
                scope 19 {
                    debug disc => _83;
                    let _84: std::vec::Vec<u8>;
                    scope 20 {
                        debug inner_data => _84;
                        let _87: std::vec::Vec<u8>;
                        scope 21 {
                            debug ix_data => _87;
                            let _93: solana_program::instruction::Instruction;
                            let mut _171: *const ();
                            let mut _172: usize;
                            let mut _173: usize;
                            let mut _174: usize;
                            let mut _175: usize;
                            let mut _176: bool;
                            scope 22 {
                                debug ix => _93;
                                let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _140: ();
                                scope 24 {
                                    debug residual => _137;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => _140;
                                    scope 27 {
                                    }
                                }
                            }
                            scope 23 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        _153 = const false;
        _152 = const false;
        _151 = const false;
        _150 = const false;
        _149 = const false;
        _148 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _142 = deref_copy (_1.1: &mut handlers::handler_withdraw::WithdrawFromAvailable<'_>);
        _8 = &(*_142);
        StorageLive(_9);
        _9 = Option::<&handlers::handler_withdraw::WithdrawFromInvested<'_>>::None;
        StorageLive(_10);
        _143 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _10 = &(*_143);
        StorageLive(_11);
        _11 = _2;
        _7 = withdraw_utils::withdraw(move _8, move _9, move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(SharesToWithdrawEvent, WithdrawResultEvent), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb63];
    }

    bb2: {
        StorageDead(_7);
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = move ((_6 as Continue).0: (events::SharesToWithdrawEvent, events::WithdrawResultEvent));
        _5 = move _16;
        StorageDead(_16);
        StorageLive(_3);
        _3 = move (_5.0: events::SharesToWithdrawEvent);
        StorageLive(_4);
        _4 = move (_5.1: events::WithdrawResultEvent);
        _154 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _144 = deref_copy (_1.1: &mut handlers::handler_withdraw::WithdrawFromAvailable<'_>);
        _19 = &((*_144).11: anchor_lang::prelude::AccountInfo<'_>);
        _153 = const true;
        _18 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _15) -> [return: bb6, unwind: bb78];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        _164 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb54;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = ((_1.3: handlers::handler_withdraw::WithdrawFromAvailableBumps).0: u8);
        StorageLive(_21);
        _21 = const _;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_3;
        _23 = &(*_24);
        _22 = <SharesToWithdrawEvent as anchor_lang::Event>::data(move _23) -> [return: bb8, unwind: bb77];
    }

    bb8: {
        _152 = const true;
        StorageDead(_23);
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _21;
        _27 = <[u8; 8] as IntoIterator>::into_iter(move _28) -> [return: bb9, unwind: bb75];
    }

    bb9: {
        _151 = const true;
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _152 = const false;
        _30 = move _22;
        _29 = <Vec<u8> as IntoIterator>::into_iter(move _30) -> [return: bb10, unwind: bb73];
    }

    bb10: {
        StorageDead(_30);
        _151 = const false;
        _26 = <std::array::IntoIter<u8, 8> as Iterator>::chain::<std::vec::IntoIter<u8>>(move _27, move _29) -> [return: bb11, unwind: bb73];
    }

    bb11: {
        StorageDead(_29);
        _151 = const false;
        StorageDead(_27);
        _25 = <std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>> as Iterator>::collect::<Vec<u8>>(move _26) -> [return: bb12, unwind: bb75];
    }

    bb12: {
        StorageDead(_26);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = const {alloc73: &anchor_lang::prelude::Pubkey};
        _32 = (*_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_25;
        _36 = &(*_37);
        _35 = <Vec<u8> as Deref>::deref(move _36) -> [return: bb13, unwind: bb62];
    }

    bb13: {
        _34 = &(*_35);
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _41 = SizeOf([anchor_lang::prelude::AccountMeta; 1]);
        _42 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _43 = alloc::alloc::exchange_malloc(move _41, move _42) -> [return: bb14, unwind: bb62];
    }

    bb14: {
        StorageLive(_44);
        _44 = ShallowInitBox(move _43, [anchor_lang::prelude::AccountMeta; 1]);
        StorageLive(_45);
        StorageLive(_46);
        _145 = deref_copy (_18.0: &anchor_lang::prelude::Pubkey);
        _46 = (*_145);
        _45 = AccountMeta::new_readonly(move _46, const true) -> [return: bb15, unwind: bb61];
    }

    bb15: {
        StorageDead(_46);
        _169 = (((_44.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 1]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 1]>).0: *const [anchor_lang::prelude::AccountMeta; 1]);
        _177 = _169 as *const () (PtrToPtr);
        _178 = _177 as usize (Transmute);
        _179 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _180 = Sub(_179, const 1_usize);
        _181 = BitAnd(_178, _180);
        _182 = Eq(_181, const 0_usize);
        assert(_182, "misaligned pointer dereference: address must be a multiple of {} but is {}", _179, _178) -> [success: bb80, unwind unreachable];
    }

    bb16: {
        StorageDead(_39);
        _31 = Instruction::new_with_bytes(move _32, move _34, move _38) -> [return: bb17, unwind: bb62];
    }

    bb17: {
        StorageDead(_38);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_31;
        _51 = &(*_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _153 = const false;
        _57 = move _18;
        _56 = [move _57];
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = const b"__event_authority";
        _67 = &(*_68);
        _66 = move _67 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _20;
        _72 = [move _73];
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_70);
        _65 = [move _66, move _69];
        StorageDead(_69);
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = move _63 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_63);
        _61 = [move _62];
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_59);
        _50 = invoke_signed(move _51, move _53, move _58) -> [return: bb18, unwind: bb59];
    }

    bb18: {
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_51);
        _49 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from}>(move _50, <anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from) -> [return: bb19, unwind: bb59];
    }

    bb19: {
        StorageDead(_50);
        _48 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _49) -> [return: bb20, unwind: bb59];
    }

    bb20: {
        StorageDead(_49);
        _74 = discriminant(_48);
        switchInt(move _74) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_78);
        _78 = ((_48 as Continue).0: ());
        _47 = _78;
        StorageDead(_78);
        _156 = discriminant(_48);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        drop(_56) -> [return: bb24, unwind: bb60];
    }

    bb22: {
        StorageLive(_75);
        _75 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_77);
        _77 = move _75;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _77) -> [return: bb23, unwind: bb71];
    }

    bb23: {
        StorageDead(_77);
        StorageDead(_75);
        _162 = discriminant(_48);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        drop(_56) -> [return: bb50, unwind: bb60];
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_47);
        _17 = const ();
        drop(_31) -> [return: bb25, unwind: bb62];
    }

    bb25: {
        StorageDead(_31);
        drop(_25) -> [return: bb26, unwind: bb75];
    }

    bb26: {
        StorageDead(_25);
        _152 = const false;
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _153 = const false;
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _146 = deref_copy (_1.1: &mut handlers::handler_withdraw::WithdrawFromAvailable<'_>);
        _81 = &((*_146).11: anchor_lang::prelude::AccountInfo<'_>);
        _150 = const true;
        _80 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _81) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_81);
        StorageLive(_82);
        _82 = ((_1.3: handlers::handler_withdraw::WithdrawFromAvailableBumps).0: u8);
        StorageLive(_83);
        _83 = const _;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_4;
        _85 = &(*_86);
        _84 = <WithdrawResultEvent as anchor_lang::Event>::data(move _85) -> [return: bb28, unwind: bb70];
    }

    bb28: {
        _149 = const true;
        StorageDead(_85);
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = _83;
        _89 = <[u8; 8] as IntoIterator>::into_iter(move _90) -> [return: bb29, unwind: bb68];
    }

    bb29: {
        _148 = const true;
        StorageDead(_90);
        StorageLive(_91);
        StorageLive(_92);
        _149 = const false;
        _92 = move _84;
        _91 = <Vec<u8> as IntoIterator>::into_iter(move _92) -> [return: bb30, unwind: bb66];
    }

    bb30: {
        StorageDead(_92);
        _148 = const false;
        _88 = <std::array::IntoIter<u8, 8> as Iterator>::chain::<std::vec::IntoIter<u8>>(move _89, move _91) -> [return: bb31, unwind: bb66];
    }

    bb31: {
        StorageDead(_91);
        _148 = const false;
        StorageDead(_89);
        _87 = <std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>> as Iterator>::collect::<Vec<u8>>(move _88) -> [return: bb32, unwind: bb68];
    }

    bb32: {
        StorageDead(_88);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = const {alloc73: &anchor_lang::prelude::Pubkey};
        _94 = (*_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_87;
        _98 = &(*_99);
        _97 = <Vec<u8> as Deref>::deref(move _98) -> [return: bb33, unwind: bb58];
    }

    bb33: {
        _96 = &(*_97);
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _103 = SizeOf([anchor_lang::prelude::AccountMeta; 1]);
        _104 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _105 = alloc::alloc::exchange_malloc(move _103, move _104) -> [return: bb34, unwind: bb58];
    }

    bb34: {
        StorageLive(_106);
        _106 = ShallowInitBox(move _105, [anchor_lang::prelude::AccountMeta; 1]);
        StorageLive(_107);
        StorageLive(_108);
        _147 = deref_copy (_80.0: &anchor_lang::prelude::Pubkey);
        _108 = (*_147);
        _107 = AccountMeta::new_readonly(move _108, const true) -> [return: bb35, unwind: bb57];
    }

    bb35: {
        StorageDead(_108);
        _170 = (((_106.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 1]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 1]>).0: *const [anchor_lang::prelude::AccountMeta; 1]);
        _171 = _170 as *const () (PtrToPtr);
        _172 = _171 as usize (Transmute);
        _173 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _174 = Sub(_173, const 1_usize);
        _175 = BitAnd(_172, _174);
        _176 = Eq(_175, const 0_usize);
        assert(_176, "misaligned pointer dereference: address must be a multiple of {} but is {}", _173, _172) -> [success: bb79, unwind unreachable];
    }

    bb36: {
        StorageDead(_101);
        _93 = Instruction::new_with_bytes(move _94, move _96, move _100) -> [return: bb37, unwind: bb58];
    }

    bb37: {
        StorageDead(_100);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_93;
        _113 = &(*_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _150 = const false;
        _119 = move _80;
        _118 = [move _119];
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = move _116 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_116);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = const b"__event_authority";
        _129 = &(*_130);
        _128 = move _129 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_129);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _82;
        _134 = [move _135];
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = move _132 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_132);
        _127 = [move _128, move _131];
        StorageDead(_131);
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_125);
        _123 = [move _124];
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = move _121 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_121);
        _112 = invoke_signed(move _113, move _115, move _120) -> [return: bb38, unwind: bb55];
    }

    bb38: {
        StorageDead(_120);
        StorageDead(_115);
        StorageDead(_113);
        _111 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from}>(move _112, <anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from) -> [return: bb39, unwind: bb55];
    }

    bb39: {
        StorageDead(_112);
        _110 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _111) -> [return: bb40, unwind: bb55];
    }

    bb40: {
        StorageDead(_111);
        _136 = discriminant(_110);
        switchInt(move _136) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_140);
        _140 = ((_110 as Continue).0: ());
        _109 = _140;
        StorageDead(_140);
        _158 = discriminant(_110);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_122);
        drop(_118) -> [return: bb44, unwind: bb56];
    }

    bb42: {
        StorageLive(_137);
        _137 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb43, unwind: bb64];
    }

    bb43: {
        StorageDead(_139);
        StorageDead(_137);
        _160 = discriminant(_110);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_122);
        drop(_118) -> [return: bb47, unwind: bb56];
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_110);
        StorageDead(_109);
        _79 = const ();
        drop(_93) -> [return: bb45, unwind: bb58];
    }

    bb45: {
        StorageDead(_93);
        drop(_87) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        StorageDead(_87);
        _149 = const false;
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        _150 = const false;
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_141);
        _141 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _141);
        StorageDead(_141);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb54;
    }

    bb47: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_110);
        StorageDead(_109);
        drop(_93) -> [return: bb48, unwind: bb58];
    }

    bb48: {
        StorageDead(_93);
        drop(_87) -> [return: bb49, unwind: bb68];
    }

    bb49: {
        StorageDead(_87);
        _149 = const false;
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        _150 = const false;
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb53;
    }

    bb50: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_47);
        drop(_31) -> [return: bb51, unwind: bb62];
    }

    bb51: {
        StorageDead(_31);
        drop(_25) -> [return: bb52, unwind: bb75];
    }

    bb52: {
        StorageDead(_25);
        _152 = const false;
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _153 = const false;
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb54;
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_118) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_93) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_106) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_87) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_56) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_31) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_44) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_25) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64 (cleanup): {
        _166 = discriminant(_110);
        goto -> bb55;
    }

    bb65 (cleanup): {
        drop(_89) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_148) -> [0: bb68, otherwise: bb65];
    }

    bb67 (cleanup): {
        drop(_84) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_149) -> [0: bb70, otherwise: bb67];
    }

    bb69 (cleanup): {
        drop(_80) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_150) -> [0: bb63, otherwise: bb69];
    }

    bb71 (cleanup): {
        _167 = discriminant(_48);
        goto -> bb59;
    }

    bb72 (cleanup): {
        drop(_27) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_151) -> [0: bb75, otherwise: bb72];
    }

    bb74 (cleanup): {
        drop(_22) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_152) -> [0: bb77, otherwise: bb74];
    }

    bb76 (cleanup): {
        drop(_18) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_153) -> [0: bb63, otherwise: bb76];
    }

    bb78 (cleanup): {
        _168 = discriminant(_6);
        goto -> bb63;
    }

    bb79: {
        (*_170) = [move _107];
        StorageDead(_107);
        _102 = move _106;
        _101 = move _102 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_106);
        StorageDead(_102);
        _100 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _101) -> [return: bb36, unwind: bb58];
    }

    bb80: {
        (*_169) = [move _45];
        StorageDead(_45);
        _40 = move _44;
        _39 = move _40 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_44);
        StorageDead(_40);
        _38 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _39) -> [return: bb16, unwind: bb62];
    }
}

alloc84 (size: 17, align: 1) {
    0x00 │ 5f 5f 65 76 65 6e 74 5f 61 75 74 68 6f 72 69 74 │ __event_authorit
    0x10 │ 79                                              │ y
}

alloc83 (size: 17, align: 1) {
    0x00 │ 5f 5f 65 76 65 6e 74 5f 61 75 74 68 6f 72 69 74 │ __event_authorit
    0x10 │ 79                                              │ y
}

alloc73 (static: ID, size: 32, align: 1) {
    0x00 │ 04 d9 0a f1 db 89 39 ec 35 ff 94 d9 64 0d 57 dc │ ......9.5...d.W.
    0x10 │ c3 27 94 bb 3e 1b b6 6f d3 ae 84 9a 84 dc db 94 │ .'..>..o........
}
