// MIR for `__event_dispatch` after PreCodegen

fn __event_dispatch(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug event_data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _6: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError>;
    let mut _7: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _8: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _9: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _10: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _15: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: ();
    let mut _17: bool;
    let mut _18: !;
    let mut _19: anchor_lang::error::Error;
    let mut _20: anchor_lang::error::Error;
    let mut _21: anchor_lang::error::ErrorCode;
    let mut _23: (anchor_lang::prelude::Pubkey, u8);
    let mut _24: &[&[u8]];
    let mut _25: &[&[u8]; 1];
    let _26: &[&[u8]; 1];
    let _27: [&[u8]; 1];
    let mut _28: &[u8];
    let mut _29: &[u8; 17];
    let _30: &[u8; 17];
    let mut _31: &anchor_lang::prelude::Pubkey;
    let _32: &&anchor_lang::prelude::Pubkey;
    let _33: ();
    let mut _34: bool;
    let mut _35: &anchor_lang::prelude::Pubkey;
    let _36: anchor_lang::prelude::Pubkey;
    let mut _37: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: &anchor_lang::prelude::Pubkey;
    let mut _39: !;
    let mut _40: anchor_lang::error::Error;
    let mut _41: anchor_lang::error::Error;
    let mut _42: anchor_lang::error::Error;
    let mut _43: anchor_lang::error::ErrorCode;
    let mut _44: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _45: anchor_lang::prelude::Pubkey;
    let mut _46: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _47: anchor_lang::prelude::Pubkey;
    let mut _48: ();
    let mut _50: &anchor_lang::prelude::Pubkey;
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    scope 1 {
        debug given_event_authority => _4;
        let _22: anchor_lang::prelude::Pubkey;
        let mut _49: &[&[u8]; 1];
        scope 6 {
            debug expected_event_authority => _22;
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        _51 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_2);
        _9 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = &mut _9;
        _7 = &mut (*_8);
        _6 = anchor_lang::prelude::next_account_info::<'_, '_, std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _5 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_5 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _4 = _15;
        StorageDead(_15);
        _52 = discriminant(_5);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_4).5: bool);
        switchInt(move _17) -> [0: bb8, otherwise: bb11];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _14) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _54 = discriminant(_5);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb21;
    }

    bb8: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ConstraintSigner;
        _20 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        _19 = anchor_lang::error::Error::with_account_name::<&str>(move _20, const "event_authority") -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_20);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _19);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb21;
    }

    bb11: {
        _16 = const ();
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _49 = const _;
        _26 = &(*_49);
        _25 = &(*_26);
        _24 = move _25 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_1;
        _50 = deref_copy (*_32);
        _31 = &(*_50);
        _23 = anchor_lang::prelude::Pubkey::find_program_address(move _24, move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_24);
        StorageLive(_22);
        _22 = (_23.0: anchor_lang::prelude::Pubkey);
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_4);
        _36 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = &_36;
        StorageDead(_37);
        StorageLive(_38);
        _38 = &_22;
        _34 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _35, move _38) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _34) -> [0: bb20, otherwise: bb15];
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = ConstraintSeeds;
        _42 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_43);
        _41 = anchor_lang::error::Error::with_account_name::<&str>(move _42, const "event_authority") -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _51 = const true;
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_4);
        _45 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _46) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        StorageDead(_46);
        StorageLive(_47);
        _47 = _22;
        _44 = (move _45, move _47);
        StorageDead(_47);
        StorageDead(_45);
        _51 = const false;
        _40 = anchor_lang::error::Error::with_pubkeys(move _41, move _44) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        StorageDead(_44);
        _51 = const false;
        StorageDead(_41);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _40);
        StorageDead(_40);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_22);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        _33 = const ();
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_48);
        _48 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _48);
        StorageDead(_48);
        StorageDead(_22);
        StorageDead(_4);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_4);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        drop(_41) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_51) -> [0: bb23, otherwise: bb24];
    }

    bb26 (cleanup): {
        _56 = discriminant(_5);
        goto -> bb23;
    }
}
