digraph Mir_0_312 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn cpi_refresh_reserves(_1: &amp;ReErased mut utils::cpi_mem::CpiMemoryLender&lt;ReErased&gt;, _2: impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2, _3: usize) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: !;<br align="left"/>let mut _8: ();<br align="left"/>let mut _9: [anchor_lang::prelude::AccountMeta; 50_usize];<br align="left"/>let mut _10: [(); 50_usize];<br align="left"/>let mut _11: ();<br align="left"/>let mut _12: Closure(DefId(0:316 ~ kamino_vault[b3c4]::operations::klend_operations::cpi_refresh_reserves::{closure#0}), [ReErased, ReErased, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2, i16, Binder(extern &quot;RustCall&quot; fn(((),)) -&gt; anchor_lang::prelude::AccountMeta, []), ()]);<br align="left"/>let mut _13: usize;<br align="left"/>let _14: ();<br align="left"/>let mut _15: std::iter::Zip&lt;std::slice::ChunksMut&lt;ReErased, anchor_lang::prelude::AccountMeta&gt;, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2&gt;;<br align="left"/>let mut _16: std::iter::Zip&lt;std::slice::ChunksMut&lt;ReErased, anchor_lang::prelude::AccountMeta&gt;, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2&gt;;<br align="left"/>let mut _17: std::slice::ChunksMut&lt;ReErased, anchor_lang::prelude::AccountMeta&gt;;<br align="left"/>let mut _18: &amp;ReErased mut [anchor_lang::prelude::AccountMeta];<br align="left"/>let mut _19: &amp;ReErased mut [anchor_lang::prelude::AccountMeta; 50_usize];<br align="left"/>let mut _20: impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2;<br align="left"/>let mut _21: std::iter::Zip&lt;std::slice::ChunksMut&lt;ReErased, anchor_lang::prelude::AccountMeta&gt;, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2&gt;;<br align="left"/>let mut _22: ();<br align="left"/>let _23: ();<br align="left"/>let mut _24: std::option::Option&lt;(&amp;ReErased mut [anchor_lang::prelude::AccountMeta], &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;)&gt;;<br align="left"/>let mut _25: &amp;ReErased mut std::iter::Zip&lt;std::slice::ChunksMut&lt;ReErased, anchor_lang::prelude::AccountMeta&gt;, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2&gt;;<br align="left"/>let mut _26: &amp;ReErased mut std::iter::Zip&lt;std::slice::ChunksMut&lt;ReErased, anchor_lang::prelude::AccountMeta&gt;, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;/#2&gt;;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: !;<br align="left"/>let _29: &amp;ReErased mut [anchor_lang::prelude::AccountMeta];<br align="left"/>let _30: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _31: anchor_lang::prelude::AccountMeta;<br align="left"/>let mut _32: anchor_lang::prelude::Pubkey;<br align="left"/>let _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: bool;<br align="left"/>let _36: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _37: &amp;ReErased kamino_lending::Reserve;<br align="left"/>let mut _38: &amp;ReErased std::cell::Ref&lt;ReErased, kamino_lending::Reserve&gt;;<br align="left"/>let _39: std::cell::Ref&lt;ReErased, kamino_lending::Reserve&gt;;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, kamino_lending::Reserve&gt;&gt;;<br align="left"/>let mut _41: std::result::Result&lt;std::cell::Ref&lt;ReErased, kamino_lending::Reserve&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _42: &amp;ReErased kamino_lending::utils::FatAccountLoader&lt;ReErased, kamino_lending::Reserve&gt;;<br align="left"/>let _43: kamino_lending::utils::FatAccountLoader&lt;ReErased, kamino_lending::Reserve&gt;;<br align="left"/>let mut _44: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, kamino_lending::utils::FatAccountLoader&lt;ReErased, kamino_lending::Reserve&gt;&gt;;<br align="left"/>let mut _45: std::result::Result&lt;kamino_lending::utils::FatAccountLoader&lt;ReErased, kamino_lending::Reserve&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _46: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _47: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _48: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _49: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _50: isize;<br align="left"/>let _51: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _52: !;<br align="left"/>let mut _53: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _54: kamino_lending::utils::FatAccountLoader&lt;ReErased, kamino_lending::Reserve&gt;;<br align="left"/>let mut _55: isize;<br align="left"/>let _56: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _57: !;<br align="left"/>let mut _58: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _59: std::cell::Ref&lt;ReErased, kamino_lending::Reserve&gt;;<br align="left"/>let mut _60: anchor_lang::prelude::AccountMeta;<br align="left"/>let mut _61: anchor_lang::prelude::Pubkey;<br align="left"/>let _62: usize;<br align="left"/>let mut _63: usize;<br align="left"/>let mut _64: bool;<br align="left"/>let mut _65: (usize, bool);<br align="left"/>let _66: ();<br align="left"/>let mut _67: bool;<br align="left"/>let mut _68: usize;<br align="left"/>let mut _69: usize;<br align="left"/>let mut _70: !;<br align="left"/>let mut _71: anchor_lang::error::Error;<br align="left"/>let mut _72: anchor_lang::error::AnchorError;<br align="left"/>let mut _73: std::string::String;<br align="left"/>let mut _74: &amp;ReErased KaminoVaultError;<br align="left"/>let _75: KaminoVaultError;<br align="left"/>let mut _76: u32;<br align="left"/>let mut _77: KaminoVaultError;<br align="left"/>let mut _78: std::string::String;<br align="left"/>let mut _79: &amp;ReErased KaminoVaultError;<br align="left"/>let _80: KaminoVaultError;<br align="left"/>let mut _81: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _82: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _83: anchor_lang::error::Source;<br align="left"/>let mut _84: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _85: std::result::Result&lt;(), anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _86: &amp;ReErased mut utils::cpi_mem::CpiMemoryLender&lt;ReErased&gt;;<br align="left"/>let mut _87: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _88: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _89: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _90: &amp;ReErased [anchor_lang::prelude::AccountMeta];<br align="left"/>let _91: &amp;ReErased [anchor_lang::prelude::AccountMeta];<br align="left"/>let _92: &amp;ReErased [anchor_lang::prelude::AccountMeta];<br align="left"/>let mut _93: &amp;ReErased [anchor_lang::prelude::AccountMeta; 50_usize];<br align="left"/>let mut _94: std::ops::RangeTo&lt;usize&gt;;<br align="left"/>let mut _95: usize;<br align="left"/>let mut _96: usize;<br align="left"/>let mut _97: (usize, bool);<br align="left"/>let mut _98: &amp;ReErased [u8];<br align="left"/>let _99: &amp;ReErased [u8];<br align="left"/>let mut _100: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _101: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _102: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _103: &amp;ReErased kamino_lending::instruction::RefreshReservesBatch;<br align="left"/>let _104: kamino_lending::instruction::RefreshReservesBatch;<br align="left"/>let mut _105: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _106: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _107: &amp;ReErased kamino_lending::instruction::RefreshReservesBatch;<br align="left"/>let mut _108: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _109: bool;<br align="left"/>let mut _110: bool;<br align="left"/>let mut _111: bool;<br align="left"/>let mut _112: bool;<br align="left"/>let mut _113: bool;<br align="left"/>let mut _114: isize;<br align="left"/>let mut _115: isize;<br align="left"/>let mut _116: isize;<br align="left"/>let mut _117: isize;<br align="left"/>let mut _118: isize;<br align="left"/>let mut _119: isize;<br align="left"/>let mut _120: isize;<br align="left"/>let mut _121: isize;<br align="left"/>let mut _122: isize;<br align="left"/>let mut _123: isize;<br align="left"/>debug cpi =&gt; _1;<br align="left"/>debug reserve_account_infos_iter =&gt; _2;<br align="left"/>debug reserve_count =&gt; _3;<br align="left"/>debug accounts_metadatas =&gt; _9;<br align="left"/>debug num_reserves =&gt; _13;<br align="left"/>debug iter =&gt; _21;<br align="left"/>debug account_meta =&gt; _29;<br align="left"/>debug reserve_account_info =&gt; _30;<br align="left"/>debug lending_market_pk =&gt; _36;<br align="left"/>debug residual =&gt; _51;<br align="left"/>debug val =&gt; _54;<br align="left"/>debug residual =&gt; _56;<br align="left"/>debug val =&gt; _59;<br align="left"/>>;
    bb0__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_111 = const false<br/>_110 = const false<br/>_109 = const false<br/>_113 = const false<br/>_112 = const false<br/>_111 = const true<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _3<br/>_5 = Eq(move _6, const 0_usize)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_8)<br/>_8 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _8)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = ()<br/>_10 = [move _11; 50]<br/>StorageDead(_11)<br/>StorageLive(_12)<br/>_12 = {closure@programs\kvault\src\operations\klend_operations.rs:26:61: 26:64}<br/></td></tr><tr><td align="left">_9 = array::&lt;impl [(); 50]&gt;::map::&lt;{closure@programs\kvault\src\operations\klend_operations.rs:26:61: 26:64}, AccountMeta&gt;(move _10, move _12)</td></tr></table>>];
    bb3__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageLive(_13)<br/>_13 = const 0_usize<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;mut _9<br/>_18 = move _19 as &amp;mut [anchor_lang::prelude::AccountMeta] (PointerCoercion(Unsize))<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = core::slice::&lt;impl [AccountMeta]&gt;::chunks_mut(move _18, const 2_usize)</td></tr></table>>];
    bb4__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_20)<br/>_111 = const false<br/>_20 = move _2<br/></td></tr><tr><td align="left">_16 = &lt;ChunksMut&lt;'_, AccountMeta&gt; as Iterator&gt;::zip::&lt;impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;&gt;(move _17, move _20)</td></tr></table>>];
    bb5__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;Zip&lt;ChunksMut&lt;'_, AccountMeta&gt;, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;&gt; as IntoIterator&gt;::into_iter(move _16)</td></tr></table>>];
    bb6__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_21)<br/>_21 = move _15<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;mut _21<br/>_25 = &amp;mut (*_26)<br/></td></tr><tr><td align="left">_24 = &lt;Zip&lt;ChunksMut&lt;'_, AccountMeta&gt;, impl Iterator&lt;Item = &amp;'a AccountInfo&lt;'info&gt;&gt;&gt; as Iterator&gt;::next(move _25)</td></tr></table>>];
    bb8__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_27 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb9__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = move (((_24 as Some).0: (&amp;mut [anchor_lang::prelude::AccountMeta], &amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)).0: &amp;mut [anchor_lang::prelude::AccountMeta])<br/>StorageLive(_30)<br/>_30 = (((_24 as Some).0: (&amp;mut [anchor_lang::prelude::AccountMeta], &amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)).1: &amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_108 = deref_copy ((*_30).0: &amp;anchor_lang::prelude::Pubkey)<br/>_32 = (*_108)<br/></td></tr><tr><td align="left">_31 = AccountMeta::new(move _32, const false)</td></tr></table>>];
    bb10__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_14 = const ()<br/>StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">drop(_21)</td></tr></table>>];
    bb12__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageLive(_33)<br/>_33 = const 0_usize<br/>_34 = Len((*_29))<br/>_35 = Lt(_33, _34)<br/></td></tr><tr><td align="left">assert(move _35, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _34, _33)</td></tr></table>>];
    bb13__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">(*_29)[_33] = move _31<br/>StorageDead(_31)<br/>StorageDead(_33)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/></td></tr><tr><td align="left">_48 = kamino_lending::id()</td></tr></table>>];
    bb14__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_47 = &amp;_48<br/>_46 = &amp;(*_47)<br/>StorageLive(_49)<br/>_49 = &amp;(*_30)<br/></td></tr><tr><td align="left">_45 = kamino_lending::utils::FatAccountLoader::&lt;'_, kamino_lending::Reserve&gt;::try_from_unchecked(move _46, move _49)</td></tr></table>>];
    bb15__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_44 = &lt;std::result::Result&lt;kamino_lending::utils::FatAccountLoader&lt;'_, kamino_lending::Reserve&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _45)</td></tr></table>>];
    bb16__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_109 = const true<br/>_110 = const true<br/>StorageDead(_45)<br/>_50 = discriminant(_44)<br/></td></tr><tr><td align="left">switchInt(move _50)</td></tr></table>>];
    bb17__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = move ((_44 as Continue).0: kamino_lending::utils::FatAccountLoader&lt;'_, kamino_lending::Reserve&gt;)<br/>_43 = move _54<br/>StorageDead(_54)<br/>_42 = &amp;_43<br/></td></tr><tr><td align="left">_41 = kamino_lending::utils::FatAccountLoader::&lt;'_, kamino_lending::Reserve&gt;::load(move _42)</td></tr></table>>];
    bb18__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = move ((_44 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_53)<br/>_53 = move _51<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _53)</td></tr></table>>];
    bb19__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_51)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;Ref&lt;'_, kamino_lending::Reserve&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb21__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_112 = const true<br/>_113 = const true<br/>StorageDead(_41)<br/>_55 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _55)</td></tr></table>>];
    bb22__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = move ((_40 as Continue).0: std::cell::Ref&lt;'_, kamino_lending::Reserve&gt;)<br/>_39 = move _59<br/>StorageDead(_59)<br/>_38 = &amp;_39<br/></td></tr><tr><td align="left">_37 = &lt;Ref&lt;'_, kamino_lending::Reserve&gt; as Deref&gt;::deref(move _38)</td></tr></table>>];
    bb23__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = move ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_58)<br/>_58 = move _56<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _58)</td></tr></table>>];
    bb24__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_56)<br/>StorageDead(_38)<br/>_118 = discriminant(_40)<br/></td></tr><tr><td align="left">drop(_43)</td></tr></table>>];
    bb25__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_36 = ((*_37).2: anchor_lang::prelude::Pubkey)<br/></td></tr><tr><td align="left">drop(_39)</td></tr></table>>];
    bb26__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageLive(_62)<br/>_62 = const 1_usize<br/>_63 = Len((*_29))<br/>_64 = Lt(_62, _63)<br/></td></tr><tr><td align="left">assert(move _64, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _63, _62)</td></tr></table>>];
    bb27__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">(*_29)[_62] = move _60<br/>StorageDead(_60)<br/>StorageDead(_62)<br/>_65 = CheckedAdd(_13, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_65.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _13, const 1_usize)</td></tr></table>>];
    bb28__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_13 = move (_65.0: usize)<br/>_23 = const ()<br/>StorageDead(_36)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>_22 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = _3<br/>StorageLive(_69)<br/>_69 = _13<br/>_67 = Ne(move _68, move _69)<br/></td></tr><tr><td align="left">switchInt(move _67)</td></tr></table>>];
    bb30__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_68)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_106 = const _<br/>_74 = &amp;(*_106)<br/></td></tr><tr><td align="left">_73 = KaminoVaultError::name(move _74)</td></tr></table>>];
    bb31__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>_77 = KaminoVaultError::MissingReserveForBatchRefresh<br/></td></tr><tr><td align="left">_76 = &lt;KaminoVaultError as Into&lt;u32&gt;&gt;::into(move _77)</td></tr></table>>];
    bb32__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_105 = const _<br/>_79 = &amp;(*_105)<br/></td></tr><tr><td align="left">_78 = &lt;KaminoVaultError as ToString&gt;::to_string(move _79)</td></tr></table>>];
    bb33__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\klend_operations.rs&quot;, line: const 45_u32 }<br/>_82 = anchor_lang::error::ErrorOrigin::Source(move _83)<br/>StorageDead(_83)<br/>_81 = Option::&lt;ErrorOrigin&gt;::Some(move _82)<br/>StorageDead(_82)<br/>StorageLive(_84)<br/>_84 = Option::&lt;ComparedValues&gt;::None<br/>_72 = anchor_lang::error::AnchorError { error_name: move _73, error_code_number: move _76, error_msg: move _78, error_origin: move _81, compared_values: move _84 }<br/>StorageDead(_84)<br/>StorageDead(_81)<br/>StorageDead(_78)<br/>StorageDead(_76)<br/>StorageDead(_73)<br/></td></tr><tr><td align="left">_71 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _72)</td></tr></table>>];
    bb34__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _71)<br/>StorageDead(_71)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_68)<br/>_66 = const ()<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_86 = &amp;mut (*_1)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/></td></tr><tr><td align="left">_89 = kamino_lending::id()</td></tr></table>>];
    bb36__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_88 = &amp;_89<br/>_87 = &amp;(*_88)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_93 = &amp;_9<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = _13<br/>_97 = CheckedMul(_96, const 2_usize)<br/></td></tr><tr><td align="left">assert(!move (_97.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _96, const 2_usize)</td></tr></table>>];
    bb37__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_95 = move (_97.0: usize)<br/>StorageDead(_96)<br/>_94 = RangeTo::&lt;usize&gt; { end: move _95 }<br/>StorageDead(_95)<br/></td></tr><tr><td align="left">_92 = &lt;[AccountMeta; 50] as Index&lt;RangeTo&lt;usize&gt;&gt;&gt;::index(move _93, move _94)</td></tr></table>>];
    bb38__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>StorageDead(_93)<br/>_91 = &amp;(*_92)<br/>_90 = &amp;(*_91)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_107 = const _<br/>_103 = &amp;(*_107)<br/></td></tr><tr><td align="left">_102 = &lt;kamino_lending::instruction::RefreshReservesBatch as InstructionData&gt;::data(move _103)</td></tr></table>>];
    bb39__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>_101 = &amp;_102<br/>_100 = &amp;(*_101)<br/></td></tr><tr><td align="left">_99 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _100)</td></tr></table>>];
    bb40__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_98 = &amp;(*_99)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">_85 = cpi_mem::CpiMemoryLender::&lt;'_&gt;::program_invoke(move _86, move _87, move _90, move _98)</td></tr></table>>];
    bb41__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_90)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">_0 = std::result::Result::&lt;(), anchor_lang::prelude::ProgramError&gt;::map_err::&lt;anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -&gt; anchor_lang::error::Error {&lt;anchor_lang::prelude::ProgramError as Into&lt;anchor_lang::error::Error&gt;&gt;::into}&gt;(move _85, &lt;anchor_lang::prelude::ProgramError as Into&lt;anchor_lang::error::Error&gt;&gt;::into)</td></tr></table>>];
    bb42__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">drop(_102)</td></tr></table>>];
    bb43__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_101)<br/>StorageDead(_99)<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left">return</td></tr></table>>];
    bb47__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">47 (cleanup)</td></tr><tr><td align="left">drop(_102)</td></tr></table>>];
    bb48__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">48 (cleanup)</td></tr><tr><td align="left">drop(_73)</td></tr></table>>];
    bb49__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">49 (cleanup)</td></tr><tr><td align="left">drop(_39)</td></tr></table>>];
    bb50__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">50 (cleanup)</td></tr><tr><td align="left">drop(_43)</td></tr></table>>];
    bb51__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">51 (cleanup)</td></tr><tr><td align="left">drop(_21)</td></tr></table>>];
    bb52__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">52 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb53__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">_114 = discriminant(_40)<br/></td></tr><tr><td align="left">drop(_43)</td></tr></table>>];
    bb54__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">_116 = discriminant(_44)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>_109 = const false<br/>_110 = const false<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>_112 = const false<br/>_113 = const false<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = _36<br/></td></tr><tr><td align="left">_60 = AccountMeta::new_readonly(move _61, const false)</td></tr></table>>];
    bb55__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">_120 = discriminant(_44)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>_109 = const false<br/>_110 = const false<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>_112 = const false<br/>_113 = const false<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">drop(_21)</td></tr></table>>];
    bb56__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb57__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left">switchInt(_111)</td></tr></table>>];
    bb58__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">58 (cleanup)</td></tr><tr><td align="left" balign="left">_122 = discriminant(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">59 (cleanup)</td></tr><tr><td align="left" balign="left">_123 = discriminant(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">60 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb61__0_312 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">61 (cleanup)</td></tr><tr><td align="left">switchInt(_111)</td></tr></table>>];
    bb0__0_312 -> bb2__0_312 [label="0"];
    bb0__0_312 -> bb1__0_312 [label="otherwise"];
    bb1__0_312 -> bb57__0_312 [label=""];
    bb2__0_312 -> bb3__0_312 [label="return"];
    bb2__0_312 -> bb61__0_312 [label="unwind"];
    bb3__0_312 -> bb4__0_312 [label="return"];
    bb3__0_312 -> bb61__0_312 [label="unwind"];
    bb4__0_312 -> bb5__0_312 [label="return"];
    bb4__0_312 -> bb61__0_312 [label="unwind"];
    bb5__0_312 -> bb6__0_312 [label="return"];
    bb5__0_312 -> bb61__0_312 [label="unwind"];
    bb6__0_312 -> bb7__0_312 [label=""];
    bb7__0_312 -> bb8__0_312 [label="return"];
    bb7__0_312 -> bb51__0_312 [label="unwind"];
    bb8__0_312 -> bb11__0_312 [label="0"];
    bb8__0_312 -> bb9__0_312 [label="1"];
    bb8__0_312 -> bb10__0_312 [label="otherwise"];
    bb9__0_312 -> bb12__0_312 [label="return"];
    bb9__0_312 -> bb51__0_312 [label="unwind"];
    bb11__0_312 -> bb29__0_312 [label="return"];
    bb11__0_312 -> bb61__0_312 [label="unwind"];
    bb12__0_312 -> bb13__0_312 [label="success"];
    bb12__0_312 -> bb51__0_312 [label="unwind"];
    bb13__0_312 -> bb14__0_312 [label="return"];
    bb13__0_312 -> bb51__0_312 [label="unwind"];
    bb14__0_312 -> bb15__0_312 [label="return"];
    bb14__0_312 -> bb51__0_312 [label="unwind"];
    bb15__0_312 -> bb16__0_312 [label="return"];
    bb15__0_312 -> bb51__0_312 [label="unwind"];
    bb16__0_312 -> bb17__0_312 [label="0"];
    bb16__0_312 -> bb18__0_312 [label="1"];
    bb16__0_312 -> bb10__0_312 [label="otherwise"];
    bb17__0_312 -> bb20__0_312 [label="return"];
    bb17__0_312 -> bb50__0_312 [label="unwind"];
    bb18__0_312 -> bb19__0_312 [label="return"];
    bb18__0_312 -> bb59__0_312 [label="unwind"];
    bb19__0_312 -> bb55__0_312 [label=""];
    bb20__0_312 -> bb21__0_312 [label="return"];
    bb20__0_312 -> bb50__0_312 [label="unwind"];
    bb21__0_312 -> bb22__0_312 [label="0"];
    bb21__0_312 -> bb23__0_312 [label="1"];
    bb21__0_312 -> bb10__0_312 [label="otherwise"];
    bb22__0_312 -> bb25__0_312 [label="return"];
    bb22__0_312 -> bb49__0_312 [label="unwind"];
    bb23__0_312 -> bb24__0_312 [label="return"];
    bb23__0_312 -> bb58__0_312 [label="unwind"];
    bb24__0_312 -> bb55__0_312 [label="return"];
    bb24__0_312 -> bb59__0_312 [label="unwind"];
    bb25__0_312 -> bb53__0_312 [label="return"];
    bb25__0_312 -> bb58__0_312 [label="unwind"];
    bb26__0_312 -> bb27__0_312 [label="success"];
    bb26__0_312 -> bb51__0_312 [label="unwind"];
    bb27__0_312 -> bb28__0_312 [label="success"];
    bb27__0_312 -> bb51__0_312 [label="unwind"];
    bb28__0_312 -> bb7__0_312 [label=""];
    bb29__0_312 -> bb35__0_312 [label="0"];
    bb29__0_312 -> bb30__0_312 [label="otherwise"];
    bb30__0_312 -> bb31__0_312 [label="return"];
    bb30__0_312 -> bb61__0_312 [label="unwind"];
    bb31__0_312 -> bb32__0_312 [label="return"];
    bb31__0_312 -> bb48__0_312 [label="unwind"];
    bb32__0_312 -> bb33__0_312 [label="return"];
    bb32__0_312 -> bb48__0_312 [label="unwind"];
    bb33__0_312 -> bb34__0_312 [label="return"];
    bb33__0_312 -> bb61__0_312 [label="unwind"];
    bb34__0_312 -> bb45__0_312 [label=""];
    bb35__0_312 -> bb36__0_312 [label="return"];
    bb35__0_312 -> bb61__0_312 [label="unwind"];
    bb36__0_312 -> bb37__0_312 [label="success"];
    bb36__0_312 -> bb61__0_312 [label="unwind"];
    bb37__0_312 -> bb38__0_312 [label="return"];
    bb37__0_312 -> bb61__0_312 [label="unwind"];
    bb38__0_312 -> bb39__0_312 [label="return"];
    bb38__0_312 -> bb61__0_312 [label="unwind"];
    bb39__0_312 -> bb40__0_312 [label="return"];
    bb39__0_312 -> bb47__0_312 [label="unwind"];
    bb40__0_312 -> bb41__0_312 [label="return"];
    bb40__0_312 -> bb47__0_312 [label="unwind"];
    bb41__0_312 -> bb42__0_312 [label="return"];
    bb41__0_312 -> bb47__0_312 [label="unwind"];
    bb42__0_312 -> bb43__0_312 [label="return"];
    bb42__0_312 -> bb61__0_312 [label="unwind"];
    bb43__0_312 -> bb46__0_312 [label=""];
    bb44__0_312 -> bb45__0_312 [label=""];
    bb45__0_312 -> bb57__0_312 [label=""];
    bb47__0_312 -> bb61__0_312 [label="return"];
    bb48__0_312 -> bb61__0_312 [label="return"];
    bb49__0_312 -> bb58__0_312 [label="return"];
    bb50__0_312 -> bb59__0_312 [label="return"];
    bb51__0_312 -> bb61__0_312 [label="return"];
    bb53__0_312 -> bb54__0_312 [label="return"];
    bb53__0_312 -> bb59__0_312 [label="unwind"];
    bb54__0_312 -> bb26__0_312 [label="return"];
    bb54__0_312 -> bb51__0_312 [label="unwind"];
    bb55__0_312 -> bb44__0_312 [label="return"];
    bb55__0_312 -> bb61__0_312 [label="unwind"];
    bb56__0_312 -> bb46__0_312 [label="return"];
    bb56__0_312 -> bb52__0_312 [label="unwind"];
    bb57__0_312 -> bb46__0_312 [label="0"];
    bb57__0_312 -> bb56__0_312 [label="otherwise"];
    bb58__0_312 -> bb50__0_312 [label=""];
    bb59__0_312 -> bb51__0_312 [label=""];
    bb60__0_312 -> bb52__0_312 [label="return"];
    bb61__0_312 -> bb52__0_312 [label="0"];
    bb61__0_312 -> bb60__0_312 [label="otherwise"];
}
