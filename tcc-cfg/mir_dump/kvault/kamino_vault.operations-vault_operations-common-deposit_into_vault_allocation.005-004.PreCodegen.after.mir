// MIR for `deposit_into_vault_allocation` after PreCodegen

fn deposit_into_vault_allocation(_1: &mut state::VaultState, _2: u64, _3: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug vault => _1;
    debug ctokens => _2;
    debug reserve => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: usize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, usize>;
    let mut _6: std::result::Result<usize, anchor_lang::error::Error>;
    let mut _7: std::option::Option<usize>;
    let mut _8: &state::VaultState;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::AnchorError;
    let mut _12: std::string::String;
    let mut _13: &KaminoVaultError;
    let _14: KaminoVaultError;
    let mut _15: u32;
    let mut _16: KaminoVaultError;
    let mut _17: std::string::String;
    let mut _18: &KaminoVaultError;
    let _19: KaminoVaultError;
    let mut _20: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _21: anchor_lang::error::ErrorOrigin;
    let mut _22: anchor_lang::error::Source;
    let mut _23: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _28: usize;
    let mut _29: u64;
    let mut _30: &mut state::VaultAllocation;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, &mut state::VaultAllocation>;
    let mut _32: std::result::Result<&mut state::VaultAllocation, anchor_lang::error::Error>;
    let mut _33: &mut state::VaultState;
    let mut _34: usize;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _40: (u64, bool);
    let mut _41: ();
    let mut _42: &KaminoVaultError;
    let mut _43: &KaminoVaultError;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    scope 1 {
        debug idx => _4;
        let _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _39: &mut state::VaultAllocation;
        scope 6 {
            debug residual => _36;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _39;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _25;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _28;
        scope 5 {
        }
    }

    bb0: {
        _45 = const false;
        _44 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        _9 = &(*_3);
        _7 = state::VaultState::get_reserve_idx_in_allocation(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _43 = const _;
        _13 = &(*_43);
        _12 = KaminoVaultError::name(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = KaminoVaultError::CannotFindReserveInAllocations;
        _15 = <KaminoVaultError as Into<u32>>::into(move _16) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _42 = const _;
        _18 = &(*_42);
        _17 = <KaminoVaultError as ToString>::to_string(move _18) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 794_u32 };
        _21 = anchor_lang::error::ErrorOrigin::Source(move _22);
        StorageDead(_22);
        _20 = Option::<ErrorOrigin>::Some(move _21);
        StorageDead(_21);
        StorageLive(_23);
        _23 = Option::<ComparedValues>::None;
        _11 = anchor_lang::error::AnchorError { error_name: move _12, error_code_number: move _15, error_msg: move _17, error_origin: move _20, compared_values: move _23 };
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        _10 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _11) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        StorageDead(_11);
        _6 = Option::<usize>::ok_or::<anchor_lang::error::Error>(move _7, move _10) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_7);
        _5 = <std::result::Result<usize, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        StorageDead(_6);
        _24 = discriminant(_5);
        switchInt(move _24) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_28);
        _28 = ((_5 as Continue).0: usize);
        _4 = _28;
        StorageDead(_28);
        _46 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_29);
        _29 = _2;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_1);
        StorageLive(_34);
        _34 = _4;
        _32 = state::VaultState::get_reserve_allocation_mut(move _33, move _34) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_25);
        _52 = discriminant(_5);
        StorageDead(_5);
        goto -> bb18;
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<&mut VaultAllocation, anchor_lang::error::Error> as Try>::branch(move _32) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _44 = const true;
        _45 = const true;
        StorageDead(_32);
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_39);
        _39 = move ((_31 as Continue).0: &mut state::VaultAllocation);
        _30 = move _39;
        StorageDead(_39);
        _40 = CheckedAdd(((*_30).6: u64), _29);
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_30).6: u64), move _29) -> [success: bb17, unwind: bb22];
    }

    bb15: {
        StorageLive(_36);
        _36 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _38) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_29);
        _50 = discriminant(_31);
        _44 = const false;
        _45 = const false;
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb18;
    }

    bb17: {
        ((*_30).6: u64) = move (_40.0: u64);
        StorageDead(_29);
        _48 = discriminant(_31);
        _44 = const false;
        _45 = const false;
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_41);
        _41 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_4);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_4);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_12) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        _54 = discriminant(_31);
        goto -> bb21;
    }

    bb23 (cleanup): {
        _55 = discriminant(_5);
        goto -> bb21;
    }
}
