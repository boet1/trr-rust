// MIR for `state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::refresh_target_allocations::{closure#0}` before PreCodegen

fn state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::refresh_target_allocations::{closure#0}(_1: &mut {closure@programs\kvault\src\state.rs:298:21: 298:24}, _2: &&VaultAllocation) -> bool {
    debug r => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: u64;
    let mut _8: &state::VaultAllocation;
    let mut _9: &state::VaultAllocation;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _8 = deref_copy (*_2);
        _4 = &((*_8).0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        _9 = deref_copy (*_2);
        _7 = ((*_9).3: u64);
        _0 = Gt(move _7, const 0_u64);
        StorageDead(_7);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        _0 = const false;
        goto -> bb5;
    }

    bb5: {
        StorageDead(_3);
        return;
    }
}
