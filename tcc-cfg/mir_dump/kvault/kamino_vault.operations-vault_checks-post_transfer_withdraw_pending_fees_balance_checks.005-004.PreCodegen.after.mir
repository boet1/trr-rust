// MIR for `post_transfer_withdraw_pending_fees_balance_checks` after PreCodegen

fn post_transfer_withdraw_pending_fees_balance_checks(_1: vault_checks::VaultAndUserBalances, _2: vault_checks::VaultAndUserBalances, _3: WithdrawPendingFeesEffects) -> std::result::Result<(), anchor_lang::error::Error> {
    debug amounts_before => _1;
    debug amounts_after => _2;
    debug withdraw_fees_effects => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: u64;
    let _5: u64;
    let _6: u64;
    let _7: u64;
    let mut _9: i128;
    let mut _10: u64;
    let mut _11: i128;
    let mut _12: u64;
    let mut _13: (i128, bool);
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: (u64, bool);
    let mut _19: i128;
    let mut _20: u64;
    let mut _21: i128;
    let mut _22: u64;
    let mut _23: (i128, bool);
    let mut _25: i128;
    let mut _26: u64;
    let mut _27: i128;
    let mut _28: u64;
    let mut _29: (i128, bool);
    let mut _31: i128;
    let mut _32: u64;
    let mut _33: i128;
    let mut _34: u64;
    let mut _35: (i128, bool);
    let _36: ();
    let mut _37: bool;
    let mut _38: i128;
    let mut _39: i128;
    let mut _40: i128;
    let mut _41: i128;
    let mut _42: (i128, bool);
    let mut _43: !;
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: &std::string::String;
    let _48: &std::string::String;
    let _49: std::string::String;
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[&str; 2];
    let _54: &[&str; 2];
    let _55: [&str; 2];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let mut _57: &[core::fmt::rt::Argument<'_>; 2];
    let _58: &[core::fmt::rt::Argument<'_>; 2];
    let _59: [core::fmt::rt::Argument<'_>; 2];
    let mut _60: (&i128, &i128);
    let mut _61: &i128;
    let _62: i128;
    let mut _63: i128;
    let mut _64: i128;
    let mut _65: (i128, bool);
    let mut _66: &i128;
    let mut _68: core::fmt::rt::Argument<'_>;
    let mut _69: &i128;
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: &i128;
    let mut _72: anchor_lang::error::Error;
    let mut _73: anchor_lang::error::AnchorError;
    let mut _74: std::string::String;
    let mut _75: &KaminoVaultError;
    let _76: KaminoVaultError;
    let mut _77: u32;
    let mut _78: KaminoVaultError;
    let mut _79: std::string::String;
    let mut _80: &KaminoVaultError;
    let _81: KaminoVaultError;
    let mut _82: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _83: anchor_lang::error::ErrorOrigin;
    let mut _84: anchor_lang::error::Source;
    let mut _85: std::option::Option<anchor_lang::error::ComparedValues>;
    let _86: ();
    let mut _87: bool;
    let mut _88: u64;
    let mut _89: u64;
    let mut _90: !;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 2];
    let _101: &[&str; 2];
    let _102: [&str; 2];
    let mut _103: &[core::fmt::rt::Argument<'_>];
    let mut _104: &[core::fmt::rt::Argument<'_>; 2];
    let _105: &[core::fmt::rt::Argument<'_>; 2];
    let _106: [core::fmt::rt::Argument<'_>; 2];
    let mut _107: core::fmt::rt::Argument<'_>;
    let mut _108: &u64;
    let _109: &u64;
    let mut _110: core::fmt::rt::Argument<'_>;
    let mut _111: &u64;
    let _112: &u64;
    let mut _113: anchor_lang::error::Error;
    let mut _114: anchor_lang::error::AnchorError;
    let mut _115: std::string::String;
    let mut _116: &KaminoVaultError;
    let _117: KaminoVaultError;
    let mut _118: u32;
    let mut _119: KaminoVaultError;
    let mut _120: std::string::String;
    let mut _121: &KaminoVaultError;
    let _122: KaminoVaultError;
    let mut _123: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _124: anchor_lang::error::ErrorOrigin;
    let mut _125: anchor_lang::error::Source;
    let mut _126: std::option::Option<anchor_lang::error::ComparedValues>;
    let _127: ();
    let mut _128: bool;
    let mut _129: i128;
    let mut _130: i128;
    let mut _131: !;
    let _132: ();
    let mut _133: &str;
    let _134: &str;
    let mut _135: &std::string::String;
    let _136: &std::string::String;
    let _137: std::string::String;
    let mut _139: std::fmt::Arguments<'_>;
    let mut _140: &[&str];
    let mut _141: &[&str; 2];
    let _142: &[&str; 2];
    let _143: [&str; 2];
    let mut _144: &[core::fmt::rt::Argument<'_>];
    let mut _145: &[core::fmt::rt::Argument<'_>; 2];
    let _146: &[core::fmt::rt::Argument<'_>; 2];
    let _147: [core::fmt::rt::Argument<'_>; 2];
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &i128;
    let _150: &i128;
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &i128;
    let _153: &i128;
    let mut _154: anchor_lang::error::Error;
    let mut _155: anchor_lang::error::AnchorError;
    let mut _156: std::string::String;
    let mut _157: &KaminoVaultError;
    let _158: KaminoVaultError;
    let mut _159: u32;
    let mut _160: KaminoVaultError;
    let mut _161: std::string::String;
    let mut _162: &KaminoVaultError;
    let _163: KaminoVaultError;
    let mut _164: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _165: anchor_lang::error::ErrorOrigin;
    let mut _166: anchor_lang::error::Source;
    let mut _167: std::option::Option<anchor_lang::error::ComparedValues>;
    let _168: ();
    let mut _169: bool;
    let mut _170: i128;
    let mut _171: i128;
    let mut _172: u64;
    let mut _173: !;
    let _174: ();
    let mut _175: &str;
    let _176: &str;
    let mut _177: &std::string::String;
    let _178: &std::string::String;
    let _179: std::string::String;
    let mut _181: std::fmt::Arguments<'_>;
    let mut _182: &[&str];
    let mut _183: &[&str; 2];
    let _184: &[&str; 2];
    let _185: [&str; 2];
    let mut _186: &[core::fmt::rt::Argument<'_>];
    let mut _187: &[core::fmt::rt::Argument<'_>; 2];
    let _188: &[core::fmt::rt::Argument<'_>; 2];
    let _189: [core::fmt::rt::Argument<'_>; 2];
    let mut _190: (&u64, &i128);
    let mut _191: &u64;
    let mut _192: &i128;
    let mut _194: core::fmt::rt::Argument<'_>;
    let mut _195: &i128;
    let mut _196: core::fmt::rt::Argument<'_>;
    let mut _197: &u64;
    let mut _198: anchor_lang::error::Error;
    let mut _199: anchor_lang::error::AnchorError;
    let mut _200: std::string::String;
    let mut _201: &KaminoVaultError;
    let _202: KaminoVaultError;
    let mut _203: u32;
    let mut _204: KaminoVaultError;
    let mut _205: std::string::String;
    let mut _206: &KaminoVaultError;
    let _207: KaminoVaultError;
    let mut _208: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _209: anchor_lang::error::ErrorOrigin;
    let mut _210: anchor_lang::error::Source;
    let mut _211: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _212: ();
    let mut _225: &i128;
    let mut _226: &i128;
    let mut _227: &i128;
    let mut _228: &u64;
    scope 1 {
        debug available_to_send_to_user => _4;
        debug invested_to_disinvest_ctokens => _5;
        debug invested_liquidity_to_send_to_user => _6;
        debug invested_liquidity_to_disinvest => _7;
        let _8: i128;
        scope 2 {
            debug token_vault_diff => _8;
            let _14: u64;
            scope 3 {
                debug ctoken_vault_decrease => _14;
                let _18: i128;
                scope 4 {
                    debug reserve_supply_liquidity_diff => _18;
                    let _24: i128;
                    scope 5 {
                        debug admin_ata_diff => _24;
                        let _30: i128;
                        scope 6 {
                            debug total_amount_sent_to_user => _30;
                            let _50: std::string::String;
                            let _67: (&i128, &i128);
                            let _97: std::string::String;
                            let _138: std::string::String;
                            let _180: std::string::String;
                            let _193: (&u64, &i128);
                            let mut _213: &KaminoVaultError;
                            let mut _214: &KaminoVaultError;
                            let mut _215: &[&str; 2];
                            let mut _216: &KaminoVaultError;
                            let mut _217: &KaminoVaultError;
                            let mut _218: &[&str; 2];
                            let mut _219: &KaminoVaultError;
                            let mut _220: &KaminoVaultError;
                            let mut _221: &[&str; 2];
                            let mut _222: &KaminoVaultError;
                            let mut _223: &KaminoVaultError;
                            let mut _224: &[&str; 2];
                            scope 7 {
                                debug res => _50;
                            }
                            scope 8 {
                                debug args => _67;
                            }
                            scope 9 {
                                debug res => _97;
                            }
                            scope 10 {
                                debug res => _138;
                            }
                            scope 11 {
                                debug res => _180;
                            }
                            scope 12 {
                                debug args => _193;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = (_3.0: u64);
        StorageLive(_5);
        _5 = (_3.1: u64);
        StorageLive(_6);
        _6 = (_3.2: u64);
        StorageLive(_7);
        _7 = (_3.3: u64);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = (_1.1: u64);
        _9 = <i128 as From<u64>>::from(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = (_2.1: u64);
        _11 = <i128 as From<u64>>::from(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _13 = CheckedSub(_9, _11);
        assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, move _11) -> [success: bb3, unwind continue];
    }

    bb3: {
        _8 = move (_13.0: i128);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_14);
        StorageLive(_15);
        _15 = (_1.2: u64);
        StorageLive(_16);
        _16 = (_2.2: u64);
        _17 = CheckedSub(_15, _16);
        assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, move _16) -> [success: bb4, unwind continue];
    }

    bb4: {
        _14 = move (_17.0: u64);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = (_1.0: u64);
        _19 = <i128 as From<u64>>::from(move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = (_2.0: u64);
        _21 = <i128 as From<u64>>::from(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        _23 = CheckedSub(_19, _21);
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, move _21) -> [success: bb7, unwind continue];
    }

    bb7: {
        _18 = move (_23.0: i128);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = (_2.3: u64);
        _25 = <i128 as From<u64>>::from(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (_1.3: u64);
        _27 = <i128 as From<u64>>::from(move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        _29 = CheckedSub(_25, _27);
        assert(!move (_29.1: bool), "attempt to compute `{} - {}`, which would overflow", move _25, move _27) -> [success: bb10, unwind continue];
    }

    bb10: {
        _24 = move (_29.0: i128);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _4;
        _31 = <i128 as From<u64>>::from(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _6;
        _33 = <i128 as From<u64>>::from(move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        _35 = CheckedAdd(_31, _33);
        assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", move _31, move _33) -> [success: bb13, unwind continue];
    }

    bb13: {
        _30 = move (_35.0: i128);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _30;
        StorageLive(_39);
        StorageLive(_40);
        _40 = _18;
        StorageLive(_41);
        _41 = _8;
        _42 = CheckedAdd(_40, _41);
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", move _40, move _41) -> [success: bb14, unwind continue];
    }

    bb14: {
        _39 = move (_42.0: i128);
        StorageDead(_41);
        StorageDead(_40);
        _37 = Eq(move _38, move _39);
        switchInt(move _37) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _14;
        StorageLive(_89);
        _89 = _5;
        _87 = Eq(move _88, move _89);
        switchInt(move _87) -> [0: bb30, otherwise: bb29];
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _224 = const _;
        _54 = &(*_224);
        _53 = &(*_54);
        _52 = move _53 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _18;
        StorageLive(_64);
        _64 = _8;
        _65 = CheckedAdd(_63, _64);
        assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", move _63, move _64) -> [success: bb17, unwind continue];
    }

    bb17: {
        _62 = move (_65.0: i128);
        StorageDead(_64);
        StorageDead(_63);
        _61 = &_62;
        StorageLive(_66);
        _66 = &_30;
        _60 = (move _61, move _66);
        StorageDead(_66);
        StorageDead(_61);
        StorageLive(_67);
        _67 = _60;
        StorageLive(_68);
        StorageLive(_69);
        _225 = deref_copy (_67.1: &i128);
        _69 = &(*_225);
        _68 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _69) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        _226 = deref_copy (_67.0: &i128);
        _71 = &(*_226);
        _70 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _71) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_71);
        _59 = [move _68, move _70];
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        _58 = &_59;
        _57 = &(*_58);
        _56 = move _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_57);
        _51 = Arguments::<'_>::new_v1(move _52, move _56) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_56);
        StorageDead(_52);
        _50 = format(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        _49 = move _50;
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = <String as Deref>::deref(move _47) -> [return: bb22, unwind: bb78];
    }

    bb22: {
        _45 = &(*_46);
        StorageDead(_47);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb23, unwind: bb78];
    }

    bb23: {
        StorageDead(_45);
        drop(_49) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _223 = const _;
        _75 = &(*_223);
        _74 = KaminoVaultError::name(move _75) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _78 = KaminoVaultError::TooMuchLiquidityToWithdraw;
        _77 = <KaminoVaultError as Into<u32>>::into(move _78) -> [return: bb26, unwind: bb77];
    }

    bb26: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        _222 = const _;
        _80 = &(*_222);
        _79 = <KaminoVaultError as ToString>::to_string(move _80) -> [return: bb27, unwind: bb77];
    }

    bb27: {
        StorageDead(_80);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 117_u32 };
        _83 = anchor_lang::error::ErrorOrigin::Source(move _84);
        StorageDead(_84);
        _82 = Option::<ErrorOrigin>::Some(move _83);
        StorageDead(_83);
        StorageLive(_85);
        _85 = Option::<ComparedValues>::None;
        _73 = anchor_lang::error::AnchorError { error_name: move _74, error_code_number: move _77, error_msg: move _79, error_origin: move _82, compared_values: move _85 };
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_74);
        _72 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _73) -> [return: bb28, unwind: bb79];
    }

    bb28: {
        StorageDead(_73);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _72);
        StorageDead(_72);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb69;
    }

    bb29: {
        StorageDead(_89);
        StorageDead(_88);
        _86 = const ();
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _24;
        StorageLive(_130);
        _130 = _30;
        _128 = Eq(move _129, move _130);
        switchInt(move _128) -> [0: bb43, otherwise: bb42];
    }

    bb30: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _221 = const _;
        _101 = &(*_221);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_14;
        _108 = &(*_109);
        _107 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _108) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_5;
        _111 = &(*_112);
        _110 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _111) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_111);
        _106 = [move _107, move _110];
        StorageDead(_110);
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = move _104 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_104);
        _98 = Arguments::<'_>::new_v1(move _99, move _103) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_103);
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_98);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb35, unwind: bb76];
    }

    bb35: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb36, unwind: bb76];
    }

    bb36: {
        StorageDead(_92);
        drop(_96) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _220 = const _;
        _116 = &(*_220);
        _115 = KaminoVaultError::name(move _116) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_116);
        StorageLive(_118);
        StorageLive(_119);
        _119 = KaminoVaultError::TooMuchLiquidityToWithdraw;
        _118 = <KaminoVaultError as Into<u32>>::into(move _119) -> [return: bb39, unwind: bb75];
    }

    bb39: {
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        _219 = const _;
        _121 = &(*_219);
        _120 = <KaminoVaultError as ToString>::to_string(move _121) -> [return: bb40, unwind: bb75];
    }

    bb40: {
        StorageDead(_121);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 126_u32 };
        _124 = anchor_lang::error::ErrorOrigin::Source(move _125);
        StorageDead(_125);
        _123 = Option::<ErrorOrigin>::Some(move _124);
        StorageDead(_124);
        StorageLive(_126);
        _126 = Option::<ComparedValues>::None;
        _114 = anchor_lang::error::AnchorError { error_name: move _115, error_code_number: move _118, error_msg: move _120, error_origin: move _123, compared_values: move _126 };
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_115);
        _113 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _114) -> [return: bb41, unwind: bb79];
    }

    bb41: {
        StorageDead(_114);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _113);
        StorageDead(_113);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb69;
    }

    bb42: {
        StorageDead(_130);
        StorageDead(_129);
        _127 = const ();
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = _18;
        StorageLive(_171);
        StorageLive(_172);
        _172 = _7;
        _171 = <i128 as From<u64>>::from(move _172) -> [return: bb55, unwind continue];
    }

    bb43: {
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _218 = const _;
        _142 = &(*_218);
        _141 = &(*_142);
        _140 = move _141 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_141);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_24;
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _149) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_149);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_30;
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _152) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_152);
        _147 = [move _148, move _151];
        StorageDead(_151);
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = move _145 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_145);
        _139 = Arguments::<'_>::new_v1(move _140, move _144) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_144);
        StorageDead(_140);
        _138 = format(move _139) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_139);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_142);
        _137 = move _138;
        StorageDead(_138);
        _136 = &_137;
        _135 = &(*_136);
        _134 = <String as Deref>::deref(move _135) -> [return: bb48, unwind: bb74];
    }

    bb48: {
        _133 = &(*_134);
        StorageDead(_135);
        _132 = solana_program::log::sol_log(move _133) -> [return: bb49, unwind: bb74];
    }

    bb49: {
        StorageDead(_133);
        drop(_137) -> [return: bb50, unwind: bb79];
    }

    bb50: {
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _217 = const _;
        _157 = &(*_217);
        _156 = KaminoVaultError::name(move _157) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        _160 = KaminoVaultError::TooMuchLiquidityToWithdraw;
        _159 = <KaminoVaultError as Into<u32>>::into(move _160) -> [return: bb52, unwind: bb73];
    }

    bb52: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _216 = const _;
        _162 = &(*_216);
        _161 = <KaminoVaultError as ToString>::to_string(move _162) -> [return: bb53, unwind: bb73];
    }

    bb53: {
        StorageDead(_162);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 132_u32 };
        _165 = anchor_lang::error::ErrorOrigin::Source(move _166);
        StorageDead(_166);
        _164 = Option::<ErrorOrigin>::Some(move _165);
        StorageDead(_165);
        StorageLive(_167);
        _167 = Option::<ComparedValues>::None;
        _155 = anchor_lang::error::AnchorError { error_name: move _156, error_code_number: move _159, error_msg: move _161, error_origin: move _164, compared_values: move _167 };
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_156);
        _154 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _155) -> [return: bb54, unwind: bb79];
    }

    bb54: {
        StorageDead(_155);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _154);
        StorageDead(_154);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb69;
    }

    bb55: {
        StorageDead(_172);
        _169 = Eq(move _170, move _171);
        switchInt(move _169) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        StorageDead(_171);
        StorageDead(_170);
        _168 = const ();
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_212);
        _212 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _212);
        StorageDead(_212);
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb70;
    }

    bb57: {
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _215 = const _;
        _184 = &(*_215);
        _183 = &(*_184);
        _182 = move _183 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_183);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_7;
        StorageLive(_192);
        _192 = &_18;
        _190 = (move _191, move _192);
        StorageDead(_192);
        StorageDead(_191);
        StorageLive(_193);
        _193 = _190;
        StorageLive(_194);
        StorageLive(_195);
        _227 = deref_copy (_193.1: &i128);
        _195 = &(*_227);
        _194 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _195) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_195);
        StorageLive(_196);
        StorageLive(_197);
        _228 = deref_copy (_193.0: &u64);
        _197 = &(*_228);
        _196 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _197) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_197);
        _189 = [move _194, move _196];
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_193);
        _188 = &_189;
        _187 = &(*_188);
        _186 = move _187 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_187);
        _181 = Arguments::<'_>::new_v1(move _182, move _186) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_186);
        StorageDead(_182);
        _180 = format(move _181) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_181);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_184);
        _179 = move _180;
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = <String as Deref>::deref(move _177) -> [return: bb62, unwind: bb72];
    }

    bb62: {
        _175 = &(*_176);
        StorageDead(_177);
        _174 = solana_program::log::sol_log(move _175) -> [return: bb63, unwind: bb72];
    }

    bb63: {
        StorageDead(_175);
        drop(_179) -> [return: bb64, unwind: bb79];
    }

    bb64: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _214 = const _;
        _201 = &(*_214);
        _200 = KaminoVaultError::name(move _201) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_201);
        StorageLive(_203);
        StorageLive(_204);
        _204 = KaminoVaultError::TooMuchLiquidityToWithdraw;
        _203 = <KaminoVaultError as Into<u32>>::into(move _204) -> [return: bb66, unwind: bb71];
    }

    bb66: {
        StorageDead(_204);
        StorageLive(_205);
        StorageLive(_206);
        _213 = const _;
        _206 = &(*_213);
        _205 = <KaminoVaultError as ToString>::to_string(move _206) -> [return: bb67, unwind: bb71];
    }

    bb67: {
        StorageDead(_206);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 138_u32 };
        _209 = anchor_lang::error::ErrorOrigin::Source(move _210);
        StorageDead(_210);
        _208 = Option::<ErrorOrigin>::Some(move _209);
        StorageDead(_209);
        StorageLive(_211);
        _211 = Option::<ComparedValues>::None;
        _199 = anchor_lang::error::AnchorError { error_name: move _200, error_code_number: move _203, error_msg: move _205, error_origin: move _208, compared_values: move _211 };
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_200);
        _198 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _199) -> [return: bb68, unwind: bb79];
    }

    bb68: {
        StorageDead(_199);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _198);
        StorageDead(_198);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb70;
    }

    bb70: {
        return;
    }

    bb71 (cleanup): {
        drop(_200) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_179) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_156) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_137) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_115) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_96) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_74) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_49) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        resume;
    }
}
