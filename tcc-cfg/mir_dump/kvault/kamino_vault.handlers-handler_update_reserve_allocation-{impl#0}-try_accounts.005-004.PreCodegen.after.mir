// MIR for `handlers::handler_update_reserve_allocation::<impl at programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18>::try_accounts` after PreCodegen

fn handlers::handler_update_reserve_allocation::<impl at programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdateReserveAllocationBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::VaultState>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _84: !;
    let mut _85: anchor_lang::error::Error;
    let mut _86: anchor_lang::error::ErrorCode;
    let _88: usize;
    let mut _89: usize;
    let mut _90: bool;
    let mut _91: &[anchor_lang::prelude::AccountInfo<'_>];
    let _92: &[anchor_lang::prelude::AccountInfo<'_>];
    let _93: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _94: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _95: std::ops::RangeFrom<usize>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _98: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _113: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _128: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _143: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _144: isize;
    let mut _146: !;
    let mut _147: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _151: (anchor_lang::prelude::Pubkey, u8);
    let mut _152: &[&[u8]];
    let mut _153: &[&[u8]; 3];
    let _154: &[&[u8]; 3];
    let _155: [&[u8]; 3];
    let mut _156: &[u8];
    let mut _157: &[u8; 12];
    let _158: &[u8; 12];
    let mut _159: &[u8];
    let _160: &[u8];
    let mut _161: &anchor_lang::prelude::Pubkey;
    let _162: anchor_lang::prelude::Pubkey;
    let mut _163: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _164: &[u8];
    let _165: &[u8];
    let mut _166: &anchor_lang::prelude::Pubkey;
    let _167: anchor_lang::prelude::Pubkey;
    let mut _168: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _169: &anchor_lang::prelude::Pubkey;
    let mut _170: u8;
    let _171: ();
    let mut _172: bool;
    let mut _173: &anchor_lang::prelude::Pubkey;
    let _174: anchor_lang::prelude::Pubkey;
    let mut _175: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: &anchor_lang::prelude::Pubkey;
    let mut _177: !;
    let mut _178: anchor_lang::error::Error;
    let mut _179: anchor_lang::error::Error;
    let mut _180: anchor_lang::error::Error;
    let mut _181: anchor_lang::error::ErrorCode;
    let mut _182: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _183: anchor_lang::prelude::Pubkey;
    let mut _184: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _185: anchor_lang::prelude::Pubkey;
    let mut _188: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let _190: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: &anchor_lang::prelude::AccountInfo<'_>;
    let _192: ();
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: &&anchor_lang::prelude::Pubkey;
    let mut _196: &&anchor_lang::prelude::Pubkey;
    let _197: &anchor_lang::prelude::Pubkey;
    let _198: anchor_lang::prelude::Pubkey;
    let mut _200: &anchor_lang::prelude::AccountInfo<'_>;
    let _201: ();
    let mut _202: bool;
    let mut _203: u64;
    let mut _206: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _207: bool;
    let mut _208: &anchor_lang::prelude::Pubkey;
    let mut _209: &anchor_lang::prelude::Pubkey;
    let _210: anchor_lang::prelude::Pubkey;
    let mut _212: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _213: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _214: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _221: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _222: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _223: &[u8];
    let _224: &&mut [u8];
    let mut _225: &std::cell::Ref<'_, &mut [u8]>;
    let _226: &std::cell::Ref<'_, &mut [u8]>;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _233: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _234: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _235: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _236: isize;
    let mut _238: !;
    let mut _239: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _242: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _243: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _244: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _245: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _247: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _248: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _249: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _250: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _251: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _252: isize;
    let mut _254: !;
    let mut _255: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _258: &anchor_lang::prelude::Rent;
    let mut _259: usize;
    let mut _261: anchor_lang::prelude::AccountInfo<'_>;
    let mut _262: &anchor_lang::prelude::Signer<'_>;
    let mut _263: anchor_lang::prelude::AccountInfo<'_>;
    let mut _264: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _266: anchor_lang::prelude::AccountInfo<'_>;
    let mut _267: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _268: anchor_lang::system_program::CreateAccount<'_>;
    let _269: ();
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _271: std::result::Result<(), anchor_lang::error::Error>;
    let mut _272: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _273: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _274: &[&[&[u8]]];
    let mut _275: &[&[&[u8]]; 1];
    let _276: &[&[&[u8]]; 1];
    let _277: [&[&[u8]]; 1];
    let mut _278: &[&[u8]];
    let _279: &[&[u8]];
    let _280: &[&[u8]];
    let mut _281: &[&[u8]; 4];
    let _282: [&[u8]; 4];
    let mut _283: &[u8];
    let mut _284: &[u8; 12];
    let _285: &[u8; 12];
    let mut _286: &[u8];
    let mut _287: &anchor_lang::prelude::Pubkey;
    let _288: anchor_lang::prelude::Pubkey;
    let mut _289: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _290: &[u8];
    let _291: &[u8];
    let mut _292: &anchor_lang::prelude::Pubkey;
    let _293: anchor_lang::prelude::Pubkey;
    let mut _294: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _295: &[u8];
    let _296: &[u8];
    let _297: &[u8];
    let mut _298: &[u8; 1];
    let _299: [u8; 1];
    let mut _300: u8;
    let mut _301: std::ops::RangeFull;
    let mut _302: std::ops::RangeFull;
    let mut _303: u64;
    let mut _304: u64;
    let mut _305: usize;
    let mut _306: &anchor_lang::prelude::Pubkey;
    let _307: &anchor_lang::prelude::Pubkey;
    let _308: anchor_lang::prelude::Pubkey;
    let mut _309: &anchor_lang::prelude::AccountInfo<'_>;
    let _310: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _311: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _312: isize;
    let mut _314: !;
    let mut _315: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _317: ();
    let mut _318: bool;
    let mut _319: &anchor_lang::prelude::Pubkey;
    let _320: anchor_lang::prelude::Pubkey;
    let mut _321: &anchor_lang::prelude::Signer<'_>;
    let mut _322: &anchor_lang::prelude::Pubkey;
    let _323: anchor_lang::prelude::Pubkey;
    let mut _324: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _325: !;
    let mut _326: anchor_lang::error::Error;
    let mut _327: anchor_lang::error::Error;
    let mut _328: anchor_lang::error::AnchorError;
    let mut _329: std::string::String;
    let mut _330: &anchor_lang::error::ErrorCode;
    let _331: anchor_lang::error::ErrorCode;
    let mut _332: u32;
    let mut _333: anchor_lang::error::ErrorCode;
    let mut _334: std::string::String;
    let mut _335: &anchor_lang::error::ErrorCode;
    let _336: anchor_lang::error::ErrorCode;
    let mut _337: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _338: anchor_lang::error::ErrorOrigin;
    let mut _339: anchor_lang::error::Source;
    let mut _340: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _341: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _342: anchor_lang::prelude::Pubkey;
    let mut _343: &anchor_lang::prelude::Signer<'_>;
    let mut _344: anchor_lang::prelude::Pubkey;
    let mut _345: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _347: u64;
    let mut _348: u64;
    let mut _349: &anchor_lang::prelude::Rent;
    let mut _350: usize;
    let mut _352: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _353: bool;
    let mut _354: &anchor_lang::prelude::Pubkey;
    let mut _355: &anchor_lang::prelude::Pubkey;
    let _356: anchor_lang::prelude::Pubkey;
    let mut _358: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _359: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _360: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _361: isize;
    let mut _363: !;
    let mut _364: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _367: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _368: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _369: &[u8];
    let _370: &&mut [u8];
    let mut _371: &std::cell::Ref<'_, &mut [u8]>;
    let _372: &std::cell::Ref<'_, &mut [u8]>;
    let mut _373: isize;
    let mut _375: !;
    let mut _376: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _379: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _380: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _381: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _382: isize;
    let mut _384: !;
    let mut _385: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _388: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _389: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _390: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _391: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _392: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _393: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _394: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _395: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _396: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _397: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _398: isize;
    let mut _400: !;
    let mut _401: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _403: u64;
    let _404: ();
    let mut _405: bool;
    let mut _406: u64;
    let mut _408: anchor_lang::prelude::AccountInfo<'_>;
    let mut _409: &anchor_lang::prelude::Signer<'_>;
    let mut _410: anchor_lang::prelude::AccountInfo<'_>;
    let mut _411: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _413: anchor_lang::prelude::AccountInfo<'_>;
    let mut _414: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _415: anchor_lang::system_program::Transfer<'_>;
    let _416: ();
    let mut _417: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _418: std::result::Result<(), anchor_lang::error::Error>;
    let mut _419: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _420: u64;
    let mut _421: isize;
    let mut _423: !;
    let mut _424: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _427: anchor_lang::prelude::AccountInfo<'_>;
    let mut _428: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _430: anchor_lang::prelude::AccountInfo<'_>;
    let mut _431: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _432: anchor_lang::system_program::Allocate<'_>;
    let _433: ();
    let mut _434: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _435: std::result::Result<(), anchor_lang::error::Error>;
    let mut _436: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _437: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _438: &[&[&[u8]]];
    let mut _439: &[&[&[u8]]; 1];
    let _440: &[&[&[u8]]; 1];
    let _441: [&[&[u8]]; 1];
    let mut _442: &[&[u8]];
    let _443: &[&[u8]];
    let _444: &[&[u8]];
    let mut _445: &[&[u8]; 4];
    let _446: [&[u8]; 4];
    let mut _447: &[u8];
    let mut _448: &[u8; 12];
    let _449: &[u8; 12];
    let mut _450: &[u8];
    let mut _451: &anchor_lang::prelude::Pubkey;
    let _452: anchor_lang::prelude::Pubkey;
    let mut _453: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _454: &[u8];
    let _455: &[u8];
    let mut _456: &anchor_lang::prelude::Pubkey;
    let _457: anchor_lang::prelude::Pubkey;
    let mut _458: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _459: &[u8];
    let _460: &[u8];
    let _461: &[u8];
    let mut _462: &[u8; 1];
    let _463: [u8; 1];
    let mut _464: u8;
    let mut _465: std::ops::RangeFull;
    let mut _466: std::ops::RangeFull;
    let mut _467: u64;
    let mut _468: usize;
    let mut _470: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _471: bool;
    let mut _472: &anchor_lang::prelude::Pubkey;
    let mut _473: &anchor_lang::prelude::Pubkey;
    let _474: anchor_lang::prelude::Pubkey;
    let mut _476: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _477: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _478: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _479: isize;
    let mut _481: !;
    let mut _482: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _485: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _486: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _487: &[u8];
    let _488: &&mut [u8];
    let mut _489: &std::cell::Ref<'_, &mut [u8]>;
    let _490: &std::cell::Ref<'_, &mut [u8]>;
    let mut _491: isize;
    let mut _493: !;
    let mut _494: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _497: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _498: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _499: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _500: isize;
    let mut _502: !;
    let mut _503: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _506: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _507: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _508: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _509: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _510: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _511: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _512: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _513: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _514: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _515: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _516: isize;
    let mut _518: !;
    let mut _519: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _521: isize;
    let mut _523: !;
    let mut _524: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _527: anchor_lang::prelude::AccountInfo<'_>;
    let mut _528: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _530: anchor_lang::prelude::AccountInfo<'_>;
    let mut _531: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _532: anchor_lang::system_program::Assign<'_>;
    let _533: ();
    let mut _534: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _535: std::result::Result<(), anchor_lang::error::Error>;
    let mut _536: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _537: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _538: &[&[&[u8]]];
    let mut _539: &[&[&[u8]]; 1];
    let _540: &[&[&[u8]]; 1];
    let _541: [&[&[u8]]; 1];
    let mut _542: &[&[u8]];
    let _543: &[&[u8]];
    let _544: &[&[u8]];
    let mut _545: &[&[u8]; 4];
    let _546: [&[u8]; 4];
    let mut _547: &[u8];
    let mut _548: &[u8; 12];
    let _549: &[u8; 12];
    let mut _550: &[u8];
    let mut _551: &anchor_lang::prelude::Pubkey;
    let _552: anchor_lang::prelude::Pubkey;
    let mut _553: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _554: &[u8];
    let _555: &[u8];
    let mut _556: &anchor_lang::prelude::Pubkey;
    let _557: anchor_lang::prelude::Pubkey;
    let mut _558: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _559: &[u8];
    let _560: &[u8];
    let _561: &[u8];
    let mut _562: &[u8; 1];
    let _563: [u8; 1];
    let mut _564: u8;
    let mut _565: std::ops::RangeFull;
    let mut _566: std::ops::RangeFull;
    let mut _567: &anchor_lang::prelude::Pubkey;
    let _568: &anchor_lang::prelude::Pubkey;
    let _569: anchor_lang::prelude::Pubkey;
    let mut _570: &anchor_lang::prelude::AccountInfo<'_>;
    let _571: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _572: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _573: isize;
    let mut _575: !;
    let mut _576: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _579: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _581: anchor_lang::prelude::AccountInfo<'_>;
    let mut _582: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _583: anchor_lang::prelude::AccountInfo<'_>;
    let mut _584: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _585: anchor_lang::prelude::AccountInfo<'_>;
    let mut _586: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _588: anchor_lang::prelude::AccountInfo<'_>;
    let mut _589: anchor_spl::token_2022::InitializeAccount3<'_>;
    let _590: ();
    let mut _591: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _592: std::result::Result<(), anchor_lang::error::Error>;
    let mut _593: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
    let mut _594: isize;
    let mut _596: !;
    let mut _597: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _600: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _601: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _602: &anchor_lang::prelude::AccountInfo<'_>;
    let _603: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _604: isize;
    let mut _607: !;
    let mut _608: anchor_lang::error::Error;
    let mut _609: anchor_lang::error::Error;
    let _610: ();
    let mut _611: bool;
    let _612: ();
    let mut _613: bool;
    let mut _614: &anchor_lang::prelude::Pubkey;
    let _615: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _616: &anchor_spl::token_interface::TokenAccount;
    let _617: &anchor_spl::token_interface::TokenAccount;
    let mut _618: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _619: &anchor_lang::prelude::Pubkey;
    let _620: anchor_lang::prelude::Pubkey;
    let mut _621: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _622: !;
    let mut _623: anchor_lang::error::Error;
    let mut _624: anchor_lang::error::Error;
    let mut _625: anchor_lang::error::Error;
    let mut _626: anchor_lang::error::ErrorCode;
    let mut _627: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _628: anchor_lang::prelude::Pubkey;
    let mut _629: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _630: &anchor_spl::token_interface::TokenAccount;
    let _631: &anchor_spl::token_interface::TokenAccount;
    let mut _632: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _633: anchor_lang::prelude::Pubkey;
    let mut _634: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _635: ();
    let mut _636: bool;
    let mut _637: &anchor_lang::prelude::Pubkey;
    let _638: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _639: &anchor_spl::token_interface::TokenAccount;
    let _640: &anchor_spl::token_interface::TokenAccount;
    let mut _641: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _642: &anchor_lang::prelude::Pubkey;
    let _643: anchor_lang::prelude::Pubkey;
    let mut _644: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _645: !;
    let mut _646: anchor_lang::error::Error;
    let mut _647: anchor_lang::error::Error;
    let mut _648: anchor_lang::error::Error;
    let mut _649: anchor_lang::error::ErrorCode;
    let mut _650: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _651: anchor_lang::prelude::Pubkey;
    let mut _652: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _653: &anchor_spl::token_interface::TokenAccount;
    let _654: &anchor_spl::token_interface::TokenAccount;
    let mut _655: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _656: anchor_lang::prelude::Pubkey;
    let mut _657: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _658: bool;
    let mut _659: &&anchor_lang::prelude::Pubkey;
    let mut _660: &&anchor_lang::prelude::Pubkey;
    let _661: &anchor_lang::prelude::Pubkey;
    let _662: anchor_lang::prelude::Pubkey;
    let mut _663: &anchor_lang::prelude::AccountInfo<'_>;
    let _664: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _665: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _666: !;
    let mut _667: anchor_lang::error::Error;
    let mut _668: anchor_lang::error::Error;
    let mut _669: anchor_lang::error::Error;
    let mut _670: anchor_lang::error::ErrorCode;
    let mut _671: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _672: anchor_lang::prelude::Pubkey;
    let mut _673: anchor_lang::prelude::Pubkey;
    let mut _674: &anchor_lang::prelude::AccountInfo<'_>;
    let _675: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _676: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let _677: ();
    let mut _678: bool;
    let mut _679: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _680: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _681: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _682: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _683: !;
    let mut _684: anchor_lang::error::Error;
    let mut _685: anchor_lang::error::Error;
    let mut _686: anchor_lang::error::ErrorCode;
    let _687: ();
    let mut _688: bool;
    let mut _689: &anchor_lang::prelude::Rent;
    let mut _690: u64;
    let mut _691: &anchor_lang::prelude::AccountInfo<'_>;
    let _692: anchor_lang::prelude::AccountInfo<'_>;
    let mut _693: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _694: usize;
    let mut _695: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _696: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _697: &anchor_lang::prelude::AccountInfo<'_>;
    let _698: anchor_lang::prelude::AccountInfo<'_>;
    let mut _699: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _700: isize;
    let mut _702: !;
    let mut _703: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _705: !;
    let mut _706: anchor_lang::error::Error;
    let mut _707: anchor_lang::error::Error;
    let mut _708: anchor_lang::error::ErrorCode;
    let _709: ();
    let mut _710: bool;
    let mut _711: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _712: &anchor_lang::prelude::Signer<'_>;
    let _713: &anchor_lang::prelude::Signer<'_>;
    let mut _714: !;
    let mut _715: anchor_lang::error::Error;
    let mut _716: anchor_lang::error::Error;
    let mut _717: anchor_lang::error::ErrorCode;
    let _718: ();
    let mut _719: bool;
    let mut _720: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _721: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let _722: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _723: !;
    let mut _724: anchor_lang::error::Error;
    let mut _725: anchor_lang::error::Error;
    let mut _726: anchor_lang::error::ErrorCode;
    let _727: ();
    let mut _729: &state::VaultState;
    let mut _730: &std::cell::Ref<'_, state::VaultState>;
    let _731: std::cell::Ref<'_, state::VaultState>;
    let mut _732: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _733: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _734: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _735: isize;
    let mut _737: !;
    let mut _738: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _741: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _742: bool;
    let mut _743: &anchor_lang::prelude::Pubkey;
    let mut _744: &anchor_lang::prelude::Pubkey;
    let mut _745: !;
    let mut _746: anchor_lang::error::Error;
    let mut _747: anchor_lang::error::Error;
    let mut _748: anchor_lang::error::Error;
    let mut _749: anchor_lang::error::ErrorCode;
    let mut _750: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _751: anchor_lang::prelude::Pubkey;
    let mut _752: anchor_lang::prelude::Pubkey;
    let _753: ();
    let mut _754: bool;
    let mut _755: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _756: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _757: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _758: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _759: !;
    let mut _760: anchor_lang::error::Error;
    let mut _761: anchor_lang::error::Error;
    let mut _762: anchor_lang::error::ErrorCode;
    let _763: ();
    let mut _765: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _767: &kamino_lending::Reserve;
    let mut _768: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let _769: std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _770: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, kamino_lending::Reserve>>;
    let mut _771: std::result::Result<std::cell::Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _772: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _773: isize;
    let mut _775: !;
    let mut _776: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _778: bool;
    let mut _779: &anchor_lang::prelude::Pubkey;
    let mut _780: &anchor_lang::prelude::Pubkey;
    let mut _781: !;
    let mut _782: anchor_lang::error::Error;
    let mut _783: anchor_lang::error::Error;
    let mut _784: anchor_lang::error::Error;
    let mut _785: anchor_lang::error::ErrorCode;
    let mut _786: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _787: anchor_lang::prelude::Pubkey;
    let mut _788: anchor_lang::prelude::Pubkey;
    let _789: ();
    let mut _790: bool;
    let mut _791: &&anchor_lang::prelude::Pubkey;
    let _792: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _793: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _794: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _795: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _796: &&anchor_lang::prelude::Pubkey;
    let _797: &anchor_lang::prelude::Pubkey;
    let _798: anchor_lang::prelude::Pubkey;
    let mut _799: &anchor_lang::prelude::AccountInfo<'_>;
    let _800: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _801: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _802: !;
    let mut _803: anchor_lang::error::Error;
    let mut _804: anchor_lang::error::ErrorCode;
    let mut _805: handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>;
    let mut _806: anchor_lang::prelude::Signer<'_>;
    let mut _807: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _808: anchor_lang::prelude::AccountInfo<'_>;
    let mut _809: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _810: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _811: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _812: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _813: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _814: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _818: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _819: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _820: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _821: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _822: &anchor_lang::prelude::Pubkey;
    let mut _823: &mut [u8];
    let mut _824: &anchor_lang::prelude::Pubkey;
    let mut _825: &mut [u8];
    let mut _826: &anchor_lang::prelude::Pubkey;
    let mut _827: &mut [u8];
    let mut _828: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _829: bool;
    let mut _830: bool;
    let mut _831: bool;
    let mut _832: bool;
    let mut _833: bool;
    let mut _834: bool;
    let mut _835: bool;
    let mut _836: bool;
    let mut _837: bool;
    let mut _838: bool;
    let mut _839: bool;
    let mut _840: bool;
    let mut _841: bool;
    let mut _842: bool;
    let mut _843: bool;
    let mut _844: bool;
    let mut _845: bool;
    let mut _846: bool;
    let mut _847: bool;
    let mut _848: bool;
    let mut _849: bool;
    let mut _850: bool;
    let mut _851: bool;
    let mut _852: bool;
    let mut _853: bool;
    let mut _854: bool;
    let mut _855: isize;
    let mut _856: isize;
    let mut _857: isize;
    let mut _858: isize;
    let mut _859: isize;
    let mut _860: isize;
    let mut _861: isize;
    let mut _862: isize;
    let mut _863: isize;
    let mut _864: isize;
    let mut _865: isize;
    let mut _866: isize;
    let mut _867: isize;
    let mut _868: isize;
    let mut _869: isize;
    let mut _870: isize;
    let mut _871: isize;
    let mut _872: isize;
    let mut _873: isize;
    let mut _874: isize;
    let mut _875: isize;
    let mut _876: isize;
    let mut _877: isize;
    let mut _878: isize;
    let mut _879: isize;
    let mut _880: isize;
    let mut _881: isize;
    let mut _882: isize;
    let mut _883: isize;
    let mut _884: isize;
    let mut _885: isize;
    let mut _886: isize;
    let mut _887: isize;
    let mut _888: isize;
    let mut _889: isize;
    let mut _890: isize;
    let mut _891: isize;
    let mut _892: isize;
    let mut _893: isize;
    let mut _894: isize;
    let mut _895: isize;
    let mut _896: isize;
    let mut _897: isize;
    let mut _898: isize;
    let mut _899: isize;
    let mut _900: isize;
    let mut _901: isize;
    let mut _902: isize;
    let mut _903: isize;
    let mut _904: isize;
    let mut _905: isize;
    let mut _906: isize;
    let mut _907: isize;
    let mut _908: isize;
    let mut _909: isize;
    let mut _910: isize;
    let mut _911: isize;
    let mut _912: isize;
    let mut _913: isize;
    let mut _914: isize;
    let mut _915: isize;
    let mut _916: isize;
    let mut _917: isize;
    let mut _918: isize;
    let mut _919: isize;
    let mut _920: isize;
    let mut _921: isize;
    let mut _922: isize;
    let mut _923: isize;
    let mut _924: isize;
    let mut _925: isize;
    let mut _926: isize;
    let mut _927: isize;
    let mut _928: isize;
    let mut _929: isize;
    let mut _930: isize;
    let mut _931: isize;
    let mut _932: isize;
    let mut _933: isize;
    let mut _934: isize;
    let mut _935: isize;
    let mut _936: isize;
    let mut _937: isize;
    let mut _938: isize;
    let mut _939: isize;
    let mut _940: isize;
    let mut _941: isize;
    let mut _942: isize;
    let mut _943: isize;
    let mut _944: isize;
    let mut _945: isize;
    let mut _946: isize;
    let mut _947: isize;
    let mut _948: isize;
    let mut _949: isize;
    let mut _950: isize;
    let mut _951: isize;
    let mut _952: isize;
    let mut _953: isize;
    let mut _954: isize;
    let mut _955: isize;
    let mut _956: isize;
    let mut _957: isize;
    let mut _958: isize;
    let mut _959: isize;
    let mut _960: isize;
    let mut _961: isize;
    let mut _962: isize;
    let mut _963: isize;
    let mut _964: isize;
    let mut _965: isize;
    let mut _966: isize;
    let mut _967: isize;
    let mut _968: isize;
    let mut _969: isize;
    let mut _970: isize;
    let mut _971: isize;
    let mut _972: isize;
    let mut _973: isize;
    let mut _974: isize;
    let mut _975: isize;
    let mut _976: isize;
    let mut _977: isize;
    let mut _978: isize;
    let mut _979: isize;
    let mut _980: isize;
    let mut _981: isize;
    let mut _982: isize;
    let mut _983: isize;
    let mut _984: isize;
    let mut _985: isize;
    let mut _986: isize;
    let mut _987: isize;
    let mut _988: isize;
    let mut _989: isize;
    let mut _990: isize;
    let mut _991: isize;
    let mut _992: isize;
    let mut _993: isize;
    let mut _994: isize;
    let mut _995: isize;
    let mut _996: isize;
    let mut _997: isize;
    let mut _998: isize;
    let mut _999: isize;
    let mut _1000: isize;
    let mut _1001: isize;
    let mut _1002: isize;
    let mut _1003: isize;
    let mut _1004: isize;
    let mut _1005: isize;
    let mut _1006: isize;
    let mut _1007: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1008: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1009: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1010: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1011: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1012: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1013: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1014: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1015: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1016: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1017: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1018: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1019: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug signer => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        scope 6 {
            debug vault_state => _21;
            let _36: anchor_lang::prelude::AccountInfo<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug base_vault_authority => _36;
                let _51: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                scope 16 {
                    debug reserve_collateral_mint => _51;
                    let _66: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
                    scope 21 {
                        debug reserve => _66;
                        let _87: &anchor_lang::prelude::AccountInfo<'_>;
                        scope 26 {
                            debug ctoken_vault => _87;
                            let _96: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                            scope 27 {
                                debug reserve_collateral_token_program => _96;
                                let _111: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                scope 32 {
                                    debug system_program => _111;
                                    let _126: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    scope 37 {
                                        debug rent => _126;
                                        let _141: anchor_lang::prelude::Rent;
                                        let _145: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _148: anchor_lang::prelude::Rent;
                                        scope 42 {
                                            debug __anchor_rent => _141;
                                            let _149: anchor_lang::prelude::Pubkey;
                                            let _150: u8;
                                            scope 47 {
                                                debug __pda_address => _149;
                                                debug __bump => _150;
                                                let _186: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                let _187: &anchor_lang::prelude::Pubkey;
                                                scope 48 {
                                                    debug ctoken_vault => _186;
                                                    let _701: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                    let _704: usize;
                                                    let _728: anchor_lang::prelude::Pubkey;
                                                    let _736: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _739: std::cell::Ref<'_, state::VaultState>;
                                                    let _764: anchor_lang::prelude::Pubkey;
                                                    scope 151 {
                                                        debug residual => _701;
                                                        scope 152 {
                                                        }
                                                    }
                                                    scope 153 {
                                                        debug val => _704;
                                                        scope 154 {
                                                        }
                                                    }
                                                    scope 155 {
                                                        debug my_key => _728;
                                                        let _740: anchor_lang::prelude::Pubkey;
                                                        scope 160 {
                                                            debug target_key => _740;
                                                        }
                                                    }
                                                    scope 156 {
                                                        debug residual => _736;
                                                        scope 157 {
                                                        }
                                                    }
                                                    scope 158 {
                                                        debug val => _739;
                                                        scope 159 {
                                                        }
                                                    }
                                                    scope 161 {
                                                        debug actual => _764;
                                                        let _766: anchor_lang::prelude::Pubkey;
                                                        let _774: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _777: std::cell::Ref<'_, kamino_lending::Reserve>;
                                                        scope 162 {
                                                            debug expected => _766;
                                                        }
                                                        scope 163 {
                                                            debug residual => _774;
                                                            scope 164 {
                                                            }
                                                        }
                                                        scope 165 {
                                                            debug val => _777;
                                                            scope 166 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 49 {
                                                    debug owner_program => _187;
                                                    let _199: u64;
                                                    let _599: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                    let _605: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                    let _606: anchor_lang::error::Error;
                                                    let mut _817: &&anchor_lang::prelude::Pubkey;
                                                    scope 50 {
                                                        debug __current_lamports => _199;
                                                        let _204: usize;
                                                        let _205: anchor_lang::prelude::AccountInfo<'_>;
                                                        let _346: u64;
                                                        let _351: anchor_lang::prelude::AccountInfo<'_>;
                                                        let _578: anchor_lang::prelude::AccountInfo<'_>;
                                                        let mut _815: &anchor_lang::error::ErrorCode;
                                                        let mut _816: &anchor_lang::error::ErrorCode;
                                                        scope 51 {
                                                            debug space => _204;
                                                            let _257: u64;
                                                            scope 73 {
                                                                debug lamports => _257;
                                                                let _260: anchor_lang::system_program::CreateAccount<'_>;
                                                                scope 74 {
                                                                    debug cpi_accounts => _260;
                                                                    let _265: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                    scope 75 {
                                                                        debug cpi_context => _265;
                                                                        let _313: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _316: ();
                                                                        scope 76 {
                                                                            debug residual => _313;
                                                                            scope 77 {
                                                                            }
                                                                        }
                                                                        scope 78 {
                                                                            debug val => _316;
                                                                            scope 79 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 52 {
                                                            debug mint_info => _205;
                                                            let _211: std::cell::Ref<'_, &mut [u8]>;
                                                            let _216: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _219: std::cell::Ref<'_, &mut [u8]>;
                                                            scope 53 {
                                                                debug mint_data => _211;
                                                                let _220: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                let _228: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                let _231: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                scope 58 {
                                                                    debug mint_state => _220;
                                                                    let _232: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                    let _237: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                    let _240: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                    scope 63 {
                                                                        debug mint_extensions => _232;
                                                                        let _241: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                        scope 68 {
                                                                            debug required_extensions => _241;
                                                                            let _253: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                            let _256: usize;
                                                                            scope 69 {
                                                                                debug residual => _253;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug val => _256;
                                                                                scope 72 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 64 {
                                                                        debug residual => _237;
                                                                        scope 65 {
                                                                        }
                                                                    }
                                                                    scope 66 {
                                                                        debug val => _240;
                                                                        scope 67 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 59 {
                                                                    debug residual => _228;
                                                                    scope 60 {
                                                                    }
                                                                }
                                                                scope 61 {
                                                                    debug val => _231;
                                                                    scope 62 {
                                                                    }
                                                                }
                                                            }
                                                            scope 54 {
                                                                debug residual => _216;
                                                                scope 55 {
                                                                }
                                                            }
                                                            scope 56 {
                                                                debug val => _219;
                                                                scope 57 {
                                                                }
                                                            }
                                                        }
                                                        scope 80 {
                                                            debug required_lamports => _346;
                                                            let _407: anchor_lang::system_program::Transfer<'_>;
                                                            let _426: anchor_lang::system_program::Allocate<'_>;
                                                            scope 102 {
                                                                debug cpi_accounts => _407;
                                                                let _412: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                scope 103 {
                                                                    debug cpi_context => _412;
                                                                    let _422: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _425: ();
                                                                    scope 104 {
                                                                        debug residual => _422;
                                                                        scope 105 {
                                                                        }
                                                                    }
                                                                    scope 106 {
                                                                        debug val => _425;
                                                                        scope 107 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 108 {
                                                                debug cpi_accounts => _426;
                                                                let _429: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                scope 109 {
                                                                    debug cpi_context => _429;
                                                                    let _469: anchor_lang::prelude::AccountInfo<'_>;
                                                                    let _522: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _525: ();
                                                                    let _526: anchor_lang::system_program::Assign<'_>;
                                                                    scope 110 {
                                                                        debug mint_info => _469;
                                                                        let _475: std::cell::Ref<'_, &mut [u8]>;
                                                                        let _480: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _483: std::cell::Ref<'_, &mut [u8]>;
                                                                        scope 111 {
                                                                            debug mint_data => _475;
                                                                            let _484: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                            let _492: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                            let _495: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                            scope 116 {
                                                                                debug mint_state => _484;
                                                                                let _496: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                let _501: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                let _504: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                scope 121 {
                                                                                    debug mint_extensions => _496;
                                                                                    let _505: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                    scope 126 {
                                                                                        debug required_extensions => _505;
                                                                                        let _517: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                        let _520: usize;
                                                                                        scope 127 {
                                                                                            debug residual => _517;
                                                                                            scope 128 {
                                                                                            }
                                                                                        }
                                                                                        scope 129 {
                                                                                            debug val => _520;
                                                                                            scope 130 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 122 {
                                                                                    debug residual => _501;
                                                                                    scope 123 {
                                                                                    }
                                                                                }
                                                                                scope 124 {
                                                                                    debug val => _504;
                                                                                    scope 125 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 117 {
                                                                                debug residual => _492;
                                                                                scope 118 {
                                                                                }
                                                                            }
                                                                            scope 119 {
                                                                                debug val => _495;
                                                                                scope 120 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 112 {
                                                                            debug residual => _480;
                                                                            scope 113 {
                                                                            }
                                                                        }
                                                                        scope 114 {
                                                                            debug val => _483;
                                                                            scope 115 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 131 {
                                                                        debug residual => _522;
                                                                        scope 132 {
                                                                        }
                                                                    }
                                                                    scope 133 {
                                                                        debug val => _525;
                                                                        scope 134 {
                                                                        }
                                                                    }
                                                                    scope 135 {
                                                                        debug cpi_accounts => _526;
                                                                        let _529: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                        scope 136 {
                                                                            debug cpi_context => _529;
                                                                            let _574: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _577: ();
                                                                            scope 137 {
                                                                                debug residual => _574;
                                                                                scope 138 {
                                                                                }
                                                                            }
                                                                            scope 139 {
                                                                                debug val => _577;
                                                                                scope 140 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 81 {
                                                            debug mint_info => _351;
                                                            let _357: std::cell::Ref<'_, &mut [u8]>;
                                                            let _362: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _365: std::cell::Ref<'_, &mut [u8]>;
                                                            scope 82 {
                                                                debug mint_data => _357;
                                                                let _366: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                let _374: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                let _377: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                scope 87 {
                                                                    debug mint_state => _366;
                                                                    let _378: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                    let _383: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                    let _386: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                    scope 92 {
                                                                        debug mint_extensions => _378;
                                                                        let _387: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                        scope 97 {
                                                                            debug required_extensions => _387;
                                                                            let _399: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                            let _402: usize;
                                                                            scope 98 {
                                                                                debug residual => _399;
                                                                                scope 99 {
                                                                                }
                                                                            }
                                                                            scope 100 {
                                                                                debug val => _402;
                                                                                scope 101 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 93 {
                                                                        debug residual => _383;
                                                                        scope 94 {
                                                                        }
                                                                    }
                                                                    scope 95 {
                                                                        debug val => _386;
                                                                        scope 96 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 88 {
                                                                    debug residual => _374;
                                                                    scope 89 {
                                                                    }
                                                                }
                                                                scope 90 {
                                                                    debug val => _377;
                                                                    scope 91 {
                                                                    }
                                                                }
                                                            }
                                                            scope 83 {
                                                                debug residual => _362;
                                                                scope 84 {
                                                                }
                                                            }
                                                            scope 85 {
                                                                debug val => _365;
                                                                scope 86 {
                                                                }
                                                            }
                                                        }
                                                        scope 141 {
                                                            debug cpi_program => _578;
                                                            let _580: anchor_spl::token_2022::InitializeAccount3<'_>;
                                                            scope 142 {
                                                                debug accounts => _580;
                                                                let _587: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
                                                                scope 143 {
                                                                    debug cpi_ctx => _587;
                                                                    let _595: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _598: ();
                                                                    scope 144 {
                                                                        debug residual => _595;
                                                                        scope 145 {
                                                                        }
                                                                    }
                                                                    scope 146 {
                                                                        debug val => _598;
                                                                        scope 147 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 148 {
                                                        debug pa => _599;
                                                    }
                                                    scope 149 {
                                                        debug val => _605;
                                                    }
                                                    scope 150 {
                                                        debug e => _606;
                                                    }
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _145;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _148;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _137;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _140;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _122;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _125;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _107;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _110;
                                scope 31 {
                                }
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _854 = const false;
        _852 = const false;
        _850 = const false;
        _851 = const false;
        _849 = const false;
        _847 = const false;
        _846 = const false;
        _844 = const false;
        _845 = const false;
        _842 = const false;
        _840 = const false;
        _841 = const false;
        _839 = const false;
        _836 = const false;
        _835 = const false;
        _834 = const false;
        _853 = const false;
        _848 = const false;
        _843 = const false;
        _838 = const false;
        _837 = const false;
        _833 = const false;
        _832 = const false;
        _831 = const false;
        _830 = const false;
        _829 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _9, move _15) -> [return: bb2, unwind: bb473];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb473];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _855 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb537];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _975 = discriminant(_7);
        StorageDead(_7);
        goto -> bb437;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _24, move _30) -> [return: bb9, unwind: bb473];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb473];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _21 = move _35;
        StorageDead(_35);
        _857 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb536];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _973 = discriminant(_22);
        StorageDead(_22);
        goto -> bb436;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _39, move _45) -> [return: bb15, unwind: bb473];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb473];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _36 = move _50;
        StorageDead(_50);
        _859 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb472];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb535];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _971 = discriminant(_37);
        StorageDead(_37);
        goto -> bb435;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _53 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _54, move _60) -> [return: bb21, unwind: bb472];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb472];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _51 = move _65;
        StorageDead(_65);
        _861 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb471];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb534];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _969 = discriminant(_52);
        StorageDead(_52);
        goto -> bb434;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _69, move _75) -> [return: bb27, unwind: bb471];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb471];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _66 = move _80;
        StorageDead(_80);
        _863 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _818 = deref_copy (*_2);
        _83 = &(*_818);
        _82 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _83) -> [return: bb32, unwind: bb471];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb533];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _967 = discriminant(_67);
        StorageDead(_67);
        goto -> bb433;
    }

    bb32: {
        switchInt(move _82) -> [0: bb35, otherwise: bb33];
    }

    bb33: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        _86 = AccountNotEnoughKeys;
        _85 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _86) -> [return: bb34, unwind: bb471];
    }

    bb34: {
        StorageDead(_86);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _85);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb433;
    }

    bb35: {
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_87);
        StorageLive(_88);
        _88 = const 0_usize;
        _819 = deref_copy (*_2);
        _89 = Len((*_819));
        _90 = Lt(_88, _89);
        assert(move _90, "index out of bounds: the length is {} but the index is {}", move _89, _88) -> [success: bb36, unwind: bb471];
    }

    bb36: {
        _820 = deref_copy (*_2);
        _87 = &(*_820)[_88];
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _821 = deref_copy (*_2);
        _94 = &(*_821);
        StorageLive(_95);
        _95 = RangeFrom::<usize> { start: const 1_usize };
        _93 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _94, move _95) -> [return: bb37, unwind: bb471];
    }

    bb37: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = &(*_93);
        _91 = &(*_92);
        (*_2) = move _91;
        StorageDead(_91);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb471];
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _98 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _99, move _105) -> [return: bb39, unwind: bb471];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb471];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _96 = move _110;
        StorageDead(_110);
        _865 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb471];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb532];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _965 = discriminant(_97);
        StorageDead(_97);
        goto -> bb432;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _113 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _114, move _120) -> [return: bb45, unwind: bb471];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb471];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _111 = move _125;
        StorageDead(_125);
        _867 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, UpdateReserveAllocationBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb471];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb531];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _963 = discriminant(_112);
        StorageDead(_112);
        goto -> bb431;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18};
        _128 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_reserve_allocation.rs:57:10: 57:18}>(move _129, move _135) -> [return: bb51, unwind: bb471];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb471];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _126 = move _140;
        StorageDead(_140);
        _869 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb56, unwind: bb471];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb530];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _961 = discriminant(_127);
        StorageDead(_127);
        goto -> bb430;
    }

    bb56: {
        _142 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _143) -> [return: bb57, unwind: bb471];
    }

    bb57: {
        StorageDead(_143);
        _144 = discriminant(_142);
        switchInt(move _144) -> [0: bb58, 1: bb59, otherwise: bb5];
    }

    bb58: {
        StorageLive(_148);
        _148 = ((_142 as Continue).0: anchor_lang::prelude::Rent);
        _141 = _148;
        StorageDead(_148);
        _871 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = const _;
        _157 = &(*_158);
        _156 = move _157 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_21;
        _162 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _163) -> [return: bb61, unwind: bb471];
    }

    bb59: {
        StorageLive(_145);
        _145 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_147);
        _147 = move _145;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _147) -> [return: bb60, unwind: bb529];
    }

    bb60: {
        StorageDead(_147);
        StorageDead(_145);
        _959 = discriminant(_142);
        StorageDead(_142);
        goto -> bb429;
    }

    bb61: {
        _161 = &_162;
        StorageDead(_163);
        _160 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _161) -> [return: bb62, unwind: bb471];
    }

    bb62: {
        _159 = &(*_160);
        StorageDead(_161);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_66;
        _167 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Key>::key(move _168) -> [return: bb63, unwind: bb471];
    }

    bb63: {
        _166 = &_167;
        StorageDead(_168);
        _165 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _166) -> [return: bb64, unwind: bb471];
    }

    bb64: {
        _164 = &(*_165);
        StorageDead(_166);
        _155 = [move _156, move _159, move _164];
        StorageDead(_164);
        StorageDead(_159);
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_153);
        StorageLive(_169);
        _169 = &(*_1);
        _151 = anchor_lang::prelude::Pubkey::find_program_address(move _152, move _169) -> [return: bb65, unwind: bb471];
    }

    bb65: {
        StorageDead(_169);
        StorageDead(_152);
        StorageLive(_149);
        _149 = (_151.0: anchor_lang::prelude::Pubkey);
        StorageLive(_150);
        _150 = (_151.1: u8);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_151);
        StorageLive(_170);
        _170 = _150;
        ((*_4).0: u8) = move _170;
        StorageDead(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_87);
        _174 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _175) -> [return: bb66, unwind: bb471];
    }

    bb66: {
        _173 = &_174;
        StorageDead(_175);
        StorageLive(_176);
        _176 = &_149;
        _172 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _173, move _176) -> [return: bb67, unwind: bb471];
    }

    bb67: {
        switchInt(move _172) -> [0: bb73, otherwise: bb68];
    }

    bb68: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = ConstraintSeeds;
        _180 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _181) -> [return: bb69, unwind: bb471];
    }

    bb69: {
        StorageDead(_181);
        _179 = anchor_lang::error::Error::with_account_name::<&str>(move _180, const "ctoken_vault") -> [return: bb70, unwind: bb471];
    }

    bb70: {
        _854 = const true;
        StorageDead(_180);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &(*_87);
        _183 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _184) -> [return: bb71, unwind: bb528];
    }

    bb71: {
        StorageDead(_184);
        StorageLive(_185);
        _185 = _149;
        _182 = (move _183, move _185);
        StorageDead(_185);
        StorageDead(_183);
        _854 = const false;
        _178 = anchor_lang::error::Error::with_pubkeys(move _179, move _182) -> [return: bb72, unwind: bb528];
    }

    bb72: {
        StorageDead(_182);
        _854 = const false;
        StorageDead(_179);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _178);
        StorageDead(_178);
        StorageDead(_172);
        StorageDead(_171);
        goto -> bb428;
    }

    bb73: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_173);
        _171 = const ();
        StorageDead(_172);
        StorageDead(_171);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &(*_87);
        _190 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _191) -> [return: bb74, unwind: bb471];
    }

    bb74: {
        _189 = &(*_190);
        StorageDead(_191);
        _188 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _189) -> [return: bb75, unwind: bb471];
    }

    bb75: {
        StorageDead(_189);
        _187 = ((*_188).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_190);
        StorageDead(_188);
        StorageLive(_192);
        StorageLive(_193);
        _193 = const true;
        switchInt(move _193) -> [0: bb78, otherwise: bb76];
    }

    bb76: {
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_187;
        StorageLive(_196);
        _817 = const _;
        _196 = &(*_817);
        _194 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _195, move _196) -> [return: bb77, unwind: bb471];
    }

    bb77: {
        switchInt(move _194) -> [0: bb273, otherwise: bb78];
    }

    bb78: {
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(*_87);
        _199 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _200) -> [return: bb79, unwind: bb471];
    }

    bb79: {
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = _199;
        _202 = Eq(move _203, const 0_u64);
        switchInt(move _202) -> [0: bb134, otherwise: bb80];
    }

    bb80: {
        StorageDead(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _1007 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _206 = &(*_1007);
        _205 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _206) -> [return: bb81, unwind: bb471];
    }

    bb81: {
        StorageDead(_206);
        StorageLive(_207);
        StorageLive(_208);
        _822 = deref_copy (_205.3: &anchor_lang::prelude::Pubkey);
        _208 = &(*_822);
        StorageLive(_209);
        StorageLive(_210);
        _210 = <Token2022 as anchor_lang::Id>::id() -> [return: bb82, unwind: bb470];
    }

    bb82: {
        _209 = &_210;
        _207 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _208, move _209) -> [return: bb83, unwind: bb470];
    }

    bb83: {
        switchInt(move _207) -> [0: bb112, otherwise: bb84];
    }

    bb84: {
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_205;
        _213 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _214) -> [return: bb85, unwind: bb470];
    }

    bb85: {
        StorageDead(_214);
        _212 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _213) -> [return: bb86, unwind: bb470];
    }

    bb86: {
        StorageDead(_213);
        _215 = discriminant(_212);
        switchInt(move _215) -> [0: bb87, 1: bb88, otherwise: bb5];
    }

    bb87: {
        StorageLive(_219);
        _219 = move ((_212 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _211 = move _219;
        StorageDead(_219);
        _873 = discriminant(_212);
        StorageDead(_212);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_211;
        _225 = &(*_226);
        _224 = <Ref<'_, &mut [u8]> as Deref>::deref(move _225) -> [return: bb90, unwind: bb469];
    }

    bb88: {
        StorageLive(_216);
        _216 = move ((_212 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_218);
        _218 = move _216;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _218) -> [return: bb89, unwind: bb526];
    }

    bb89: {
        StorageDead(_218);
        StorageDead(_216);
        _957 = discriminant(_212);
        StorageDead(_212);
        goto -> bb420;
    }

    bb90: {
        _823 = deref_copy (*_224);
        _223 = &(*_823);
        StorageDead(_225);
        _222 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _223) -> [return: bb91, unwind: bb469];
    }

    bb91: {
        StorageDead(_223);
        _221 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _222) -> [return: bb92, unwind: bb469];
    }

    bb92: {
        StorageDead(_222);
        _227 = discriminant(_221);
        switchInt(move _227) -> [0: bb93, 1: bb94, otherwise: bb5];
    }

    bb93: {
        StorageLive(_231);
        _231 = move ((_221 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _220 = move _231;
        StorageDead(_231);
        _875 = discriminant(_221);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_221);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_220;
        _234 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _235) -> [return: bb96, unwind: bb469];
    }

    bb94: {
        StorageLive(_228);
        _228 = move ((_221 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_230);
        _230 = move _228;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _230) -> [return: bb95, unwind: bb525];
    }

    bb95: {
        StorageDead(_230);
        StorageDead(_228);
        _955 = discriminant(_221);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_221);
        goto -> bb419;
    }

    bb96: {
        StorageDead(_235);
        _233 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _234) -> [return: bb97, unwind: bb469];
    }

    bb97: {
        StorageDead(_234);
        _236 = discriminant(_233);
        switchInt(move _236) -> [0: bb98, 1: bb99, otherwise: bb5];
    }

    bb98: {
        StorageLive(_240);
        _240 = move ((_233 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _232 = move _240;
        StorageDead(_240);
        _877 = discriminant(_233);
        StorageDead(_233);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &_232;
        _244 = &(*_245);
        _243 = <Vec<ExtensionType> as Deref>::deref(move _244) -> [return: bb101, unwind: bb468];
    }

    bb99: {
        StorageLive(_237);
        _237 = move ((_233 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_239);
        _239 = move _237;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _239) -> [return: bb100, unwind: bb524];
    }

    bb100: {
        StorageDead(_239);
        StorageDead(_237);
        _953 = discriminant(_233);
        StorageDead(_233);
        StorageDead(_232);
        goto -> bb419;
    }

    bb101: {
        _242 = &(*_243);
        StorageDead(_244);
        _241 = ExtensionType::get_required_init_account_extensions(move _242) -> [return: bb102, unwind: bb468];
    }

    bb102: {
        StorageDead(_242);
        StorageDead(_245);
        StorageDead(_243);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_241;
        _250 = &(*_251);
        _249 = <Vec<ExtensionType> as Deref>::deref(move _250) -> [return: bb103, unwind: bb467];
    }

    bb103: {
        _248 = &(*_249);
        StorageDead(_250);
        _247 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _248) -> [return: bb104, unwind: bb467];
    }

    bb104: {
        StorageDead(_248);
        _246 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _247) -> [return: bb105, unwind: bb467];
    }

    bb105: {
        _853 = const true;
        StorageDead(_247);
        _252 = discriminant(_246);
        switchInt(move _252) -> [0: bb106, 1: bb107, otherwise: bb5];
    }

    bb106: {
        StorageLive(_256);
        _256 = ((_246 as Continue).0: usize);
        _204 = _256;
        StorageDead(_256);
        drop(_241) -> [return: bb109, unwind: bb465];
    }

    bb107: {
        StorageLive(_253);
        _253 = move ((_246 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_255);
        _255 = move _253;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _255) -> [return: bb108, unwind: bb464];
    }

    bb108: {
        StorageDead(_255);
        StorageDead(_253);
        drop(_241) -> [return: bb416, unwind: bb465];
    }

    bb109: {
        StorageDead(_241);
        drop(_232) -> [return: bb110, unwind: bb466];
    }

    bb110: {
        StorageDead(_232);
        StorageDead(_220);
        drop(_211) -> [return: bb111, unwind: bb523];
    }

    bb111: {
        StorageDead(_211);
        _879 = discriminant(_246);
        StorageDead(_251);
        StorageDead(_249);
        _853 = const false;
        StorageDead(_246);
        goto -> bb113;
    }

    bb112: {
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_208);
        _204 = const _;
        goto -> bb113;
    }

    bb113: {
        StorageDead(_207);
        drop(_205) -> [return: bb114, unwind: bb471];
    }

    bb114: {
        StorageDead(_205);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &_141;
        StorageLive(_259);
        _259 = _204;
        _257 = anchor_lang::prelude::Rent::minimum_balance(move _258, move _259) -> [return: bb115, unwind: bb471];
    }

    bb115: {
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_6;
        _261 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _262) -> [return: bb116, unwind: bb471];
    }

    bb116: {
        StorageDead(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &(*_87);
        _263 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _264) -> [return: bb117, unwind: bb463];
    }

    bb117: {
        StorageDead(_264);
        _852 = const true;
        _260 = anchor_lang::system_program::CreateAccount::<'_> { from: move _261, to: move _263 };
        StorageDead(_263);
        StorageDead(_261);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_111;
        _266 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _267) -> [return: bb118, unwind: bb522];
    }

    bb118: {
        StorageDead(_267);
        StorageLive(_268);
        _852 = const false;
        _268 = move _260;
        _265 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _266, move _268) -> [return: bb119, unwind: bb522];
    }

    bb119: {
        StorageDead(_268);
        StorageDead(_266);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _851 = const true;
        _273 = move _265;
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = const _;
        _284 = &(*_285);
        _283 = move _284 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_284);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &_21;
        _288 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _289) -> [return: bb120, unwind: bb520];
    }

    bb120: {
        _287 = &_288;
        StorageDead(_289);
        _286 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _287) -> [return: bb121, unwind: bb520];
    }

    bb121: {
        StorageDead(_287);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &_66;
        _293 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Key>::key(move _294) -> [return: bb122, unwind: bb520];
    }

    bb122: {
        _292 = &_293;
        StorageDead(_294);
        _291 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _292) -> [return: bb123, unwind: bb520];
    }

    bb123: {
        _290 = &(*_291);
        StorageDead(_292);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = _150;
        _299 = [move _300];
        _298 = &_299;
        StorageDead(_300);
        StorageLive(_301);
        _301 = RangeFull;
        _297 = <[u8; 1] as Index<RangeFull>>::index(move _298, move _301) -> [return: bb124, unwind: bb520];
    }

    bb124: {
        StorageDead(_301);
        StorageDead(_298);
        _296 = &(*_297);
        _295 = &(*_296);
        _282 = [move _283, move _286, move _290, move _295];
        _281 = &_282;
        StorageDead(_295);
        StorageDead(_290);
        StorageDead(_286);
        StorageDead(_283);
        StorageLive(_302);
        _302 = RangeFull;
        _280 = <[&[u8]; 4] as Index<RangeFull>>::index(move _281, move _302) -> [return: bb125, unwind: bb520];
    }

    bb125: {
        StorageDead(_302);
        StorageDead(_281);
        _279 = &(*_280);
        _278 = &(*_279);
        _277 = [move _278];
        StorageDead(_278);
        _276 = &_277;
        _275 = &(*_276);
        _274 = move _275 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_275);
        _851 = const false;
        _272 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _273, move _274) -> [return: bb126, unwind: bb520];
    }

    bb126: {
        _850 = const true;
        StorageDead(_274);
        _851 = const false;
        StorageDead(_273);
        StorageLive(_303);
        _303 = _257;
        StorageLive(_304);
        StorageLive(_305);
        _305 = _204;
        _304 = move _305 as u64 (IntToInt);
        StorageDead(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &_96;
        _310 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _311) -> [return: bb127, unwind: bb518];
    }

    bb127: {
        _309 = &(*_310);
        StorageDead(_311);
        _308 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _309) -> [return: bb128, unwind: bb518];
    }

    bb128: {
        StorageDead(_309);
        _307 = &_308;
        _306 = &(*_307);
        _850 = const false;
        _271 = anchor_lang::system_program::create_account(move _272, move _303, move _304, move _306) -> [return: bb129, unwind: bb518];
    }

    bb129: {
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_303);
        _850 = const false;
        StorageDead(_272);
        _270 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _271) -> [return: bb130, unwind: bb522];
    }

    bb130: {
        StorageDead(_271);
        _312 = discriminant(_270);
        switchInt(move _312) -> [0: bb131, 1: bb132, otherwise: bb5];
    }

    bb131: {
        StorageLive(_316);
        _316 = ((_270 as Continue).0: ());
        _269 = _316;
        StorageDead(_316);
        _881 = discriminant(_270);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_299);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_270);
        StorageDead(_269);
        _201 = const ();
        StorageDead(_265);
        _852 = const false;
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_204);
        goto -> bb262;
    }

    bb132: {
        StorageLive(_313);
        _313 = move ((_270 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_315);
        _315 = move _313;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _315) -> [return: bb133, unwind: bb516];
    }

    bb133: {
        StorageDead(_315);
        StorageDead(_313);
        _949 = discriminant(_270);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_299);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_265);
        _852 = const false;
        StorageDead(_260);
        StorageDead(_257);
        goto -> bb423;
    }

    bb134: {
        StorageDead(_203);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &_6;
        _320 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _321) -> [return: bb135, unwind: bb471];
    }

    bb135: {
        _319 = &_320;
        StorageDead(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &(*_87);
        _323 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _324) -> [return: bb136, unwind: bb471];
    }

    bb136: {
        _322 = &_323;
        StorageDead(_324);
        _318 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _319, move _322) -> [return: bb137, unwind: bb471];
    }

    bb137: {
        switchInt(move _318) -> [0: bb146, otherwise: bb138];
    }

    bb138: {
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_319);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _816 = const _;
        _330 = &(*_816);
        _329 = anchor_lang::error::ErrorCode::name(move _330) -> [return: bb139, unwind: bb471];
    }

    bb139: {
        StorageDead(_330);
        StorageLive(_332);
        StorageLive(_333);
        _333 = TryingToInitPayerAsProgramAccount;
        _332 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _333) -> [return: bb140, unwind: bb462];
    }

    bb140: {
        StorageDead(_333);
        StorageLive(_334);
        StorageLive(_335);
        _815 = const _;
        _335 = &(*_815);
        _334 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _335) -> [return: bb141, unwind: bb462];
    }

    bb141: {
        StorageDead(_335);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_update_reserve_allocation.rs", line: const 57_u32 };
        _338 = anchor_lang::error::ErrorOrigin::Source(move _339);
        StorageDead(_339);
        _337 = Option::<ErrorOrigin>::Some(move _338);
        StorageDead(_338);
        StorageLive(_340);
        _340 = Option::<ComparedValues>::None;
        _328 = anchor_lang::error::AnchorError { error_name: move _329, error_code_number: move _332, error_msg: move _334, error_origin: move _337, compared_values: move _340 };
        StorageDead(_340);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_329);
        _327 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _328) -> [return: bb142, unwind: bb471];
    }

    bb142: {
        _849 = const true;
        StorageDead(_328);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &_6;
        _342 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _343) -> [return: bb143, unwind: bb515];
    }

    bb143: {
        StorageDead(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &(*_87);
        _344 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _345) -> [return: bb144, unwind: bb515];
    }

    bb144: {
        StorageDead(_345);
        _341 = (move _342, move _344);
        StorageDead(_344);
        StorageDead(_342);
        _849 = const false;
        _326 = anchor_lang::error::Error::with_pubkeys(move _327, move _341) -> [return: bb145, unwind: bb515];
    }

    bb145: {
        StorageDead(_341);
        _849 = const false;
        StorageDead(_327);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _326);
        StorageDead(_326);
        StorageDead(_318);
        StorageDead(_317);
        goto -> bb424;
    }

    bb146: {
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_319);
        _317 = const ();
        StorageDead(_318);
        StorageDead(_317);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = &_141;
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        _1008 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _352 = &(*_1008);
        _351 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _352) -> [return: bb147, unwind: bb471];
    }

    bb147: {
        StorageDead(_352);
        StorageLive(_353);
        StorageLive(_354);
        _824 = deref_copy (_351.3: &anchor_lang::prelude::Pubkey);
        _354 = &(*_824);
        StorageLive(_355);
        StorageLive(_356);
        _356 = <Token2022 as anchor_lang::Id>::id() -> [return: bb148, unwind: bb461];
    }

    bb148: {
        _355 = &_356;
        _353 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _354, move _355) -> [return: bb149, unwind: bb461];
    }

    bb149: {
        switchInt(move _353) -> [0: bb178, otherwise: bb150];
    }

    bb150: {
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_354);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = &_351;
        _359 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _360) -> [return: bb151, unwind: bb461];
    }

    bb151: {
        StorageDead(_360);
        _358 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _359) -> [return: bb152, unwind: bb461];
    }

    bb152: {
        StorageDead(_359);
        _361 = discriminant(_358);
        switchInt(move _361) -> [0: bb153, 1: bb154, otherwise: bb5];
    }

    bb153: {
        StorageLive(_365);
        _365 = move ((_358 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _357 = move _365;
        StorageDead(_365);
        _883 = discriminant(_358);
        StorageDead(_358);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &_357;
        _371 = &(*_372);
        _370 = <Ref<'_, &mut [u8]> as Deref>::deref(move _371) -> [return: bb156, unwind: bb460];
    }

    bb154: {
        StorageLive(_362);
        _362 = move ((_358 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_364);
        _364 = move _362;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _364) -> [return: bb155, unwind: bb513];
    }

    bb155: {
        StorageDead(_364);
        StorageDead(_362);
        _947 = discriminant(_358);
        StorageDead(_358);
        goto -> bb412;
    }

    bb156: {
        _825 = deref_copy (*_370);
        _369 = &(*_825);
        StorageDead(_371);
        _368 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _369) -> [return: bb157, unwind: bb460];
    }

    bb157: {
        StorageDead(_369);
        _367 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _368) -> [return: bb158, unwind: bb460];
    }

    bb158: {
        StorageDead(_368);
        _373 = discriminant(_367);
        switchInt(move _373) -> [0: bb159, 1: bb160, otherwise: bb5];
    }

    bb159: {
        StorageLive(_377);
        _377 = move ((_367 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _366 = move _377;
        StorageDead(_377);
        _885 = discriminant(_367);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_367);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &_366;
        _380 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _381) -> [return: bb162, unwind: bb460];
    }

    bb160: {
        StorageLive(_374);
        _374 = move ((_367 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_376);
        _376 = move _374;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _376) -> [return: bb161, unwind: bb512];
    }

    bb161: {
        StorageDead(_376);
        StorageDead(_374);
        _945 = discriminant(_367);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_367);
        goto -> bb411;
    }

    bb162: {
        StorageDead(_381);
        _379 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _380) -> [return: bb163, unwind: bb460];
    }

    bb163: {
        StorageDead(_380);
        _382 = discriminant(_379);
        switchInt(move _382) -> [0: bb164, 1: bb165, otherwise: bb5];
    }

    bb164: {
        StorageLive(_386);
        _386 = move ((_379 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _378 = move _386;
        StorageDead(_386);
        _887 = discriminant(_379);
        StorageDead(_379);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_378;
        _390 = &(*_391);
        _389 = <Vec<ExtensionType> as Deref>::deref(move _390) -> [return: bb167, unwind: bb459];
    }

    bb165: {
        StorageLive(_383);
        _383 = move ((_379 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_385);
        _385 = move _383;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _385) -> [return: bb166, unwind: bb511];
    }

    bb166: {
        StorageDead(_385);
        StorageDead(_383);
        _943 = discriminant(_379);
        StorageDead(_379);
        StorageDead(_378);
        goto -> bb411;
    }

    bb167: {
        _388 = &(*_389);
        StorageDead(_390);
        _387 = ExtensionType::get_required_init_account_extensions(move _388) -> [return: bb168, unwind: bb459];
    }

    bb168: {
        StorageDead(_388);
        StorageDead(_391);
        StorageDead(_389);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _397 = &_387;
        _396 = &(*_397);
        _395 = <Vec<ExtensionType> as Deref>::deref(move _396) -> [return: bb169, unwind: bb458];
    }

    bb169: {
        _394 = &(*_395);
        StorageDead(_396);
        _393 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _394) -> [return: bb170, unwind: bb458];
    }

    bb170: {
        StorageDead(_394);
        _392 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _393) -> [return: bb171, unwind: bb458];
    }

    bb171: {
        _848 = const true;
        StorageDead(_393);
        _398 = discriminant(_392);
        switchInt(move _398) -> [0: bb172, 1: bb173, otherwise: bb5];
    }

    bb172: {
        StorageLive(_402);
        _402 = ((_392 as Continue).0: usize);
        _350 = _402;
        StorageDead(_402);
        drop(_387) -> [return: bb175, unwind: bb456];
    }

    bb173: {
        StorageLive(_399);
        _399 = move ((_392 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_401);
        _401 = move _399;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _401) -> [return: bb174, unwind: bb455];
    }

    bb174: {
        StorageDead(_401);
        StorageDead(_399);
        drop(_387) -> [return: bb408, unwind: bb456];
    }

    bb175: {
        StorageDead(_387);
        drop(_378) -> [return: bb176, unwind: bb457];
    }

    bb176: {
        StorageDead(_378);
        StorageDead(_366);
        drop(_357) -> [return: bb177, unwind: bb510];
    }

    bb177: {
        StorageDead(_357);
        _889 = discriminant(_392);
        StorageDead(_397);
        StorageDead(_395);
        _848 = const false;
        StorageDead(_392);
        goto -> bb179;
    }

    bb178: {
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_354);
        _350 = const _;
        goto -> bb179;
    }

    bb179: {
        StorageDead(_353);
        drop(_351) -> [return: bb180, unwind: bb471];
    }

    bb180: {
        StorageDead(_351);
        _348 = anchor_lang::prelude::Rent::minimum_balance(move _349, move _350) -> [return: bb181, unwind: bb471];
    }

    bb181: {
        StorageDead(_350);
        StorageDead(_349);
        _347 = <u64 as Ord>::max(move _348, const 1_u64) -> [return: bb182, unwind: bb471];
    }

    bb182: {
        StorageDead(_348);
        StorageLive(_403);
        _403 = _199;
        _346 = core::num::<impl u64>::saturating_sub(move _347, move _403) -> [return: bb183, unwind: bb471];
    }

    bb183: {
        StorageDead(_403);
        StorageDead(_347);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = _346;
        _405 = Gt(move _406, const 0_u64);
        switchInt(move _405) -> [0: bb194, otherwise: bb184];
    }

    bb184: {
        StorageDead(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = &_6;
        _408 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _409) -> [return: bb185, unwind: bb471];
    }

    bb185: {
        StorageDead(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &(*_87);
        _410 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _411) -> [return: bb186, unwind: bb454];
    }

    bb186: {
        StorageDead(_411);
        _847 = const true;
        _407 = anchor_lang::system_program::Transfer::<'_> { from: move _408, to: move _410 };
        StorageDead(_410);
        StorageDead(_408);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_111;
        _413 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _414) -> [return: bb187, unwind: bb509];
    }

    bb187: {
        StorageDead(_414);
        StorageLive(_415);
        _847 = const false;
        _415 = move _407;
        _412 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _413, move _415) -> [return: bb188, unwind: bb509];
    }

    bb188: {
        StorageDead(_415);
        StorageDead(_413);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = move _412;
        StorageLive(_420);
        _420 = _346;
        _418 = anchor_lang::system_program::transfer(move _419, move _420) -> [return: bb189, unwind: bb509];
    }

    bb189: {
        StorageDead(_420);
        StorageDead(_419);
        _417 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _418) -> [return: bb190, unwind: bb509];
    }

    bb190: {
        StorageDead(_418);
        _421 = discriminant(_417);
        switchInt(move _421) -> [0: bb191, 1: bb192, otherwise: bb5];
    }

    bb191: {
        StorageLive(_425);
        _425 = ((_417 as Continue).0: ());
        _416 = _425;
        StorageDead(_425);
        _891 = discriminant(_417);
        StorageDead(_417);
        StorageDead(_416);
        _404 = const ();
        StorageDead(_412);
        _847 = const false;
        StorageDead(_407);
        goto -> bb195;
    }

    bb192: {
        StorageLive(_422);
        _422 = move ((_417 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_424);
        _424 = move _422;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _424) -> [return: bb193, unwind: bb507];
    }

    bb193: {
        StorageDead(_424);
        StorageDead(_422);
        _939 = discriminant(_417);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_412);
        _847 = const false;
        StorageDead(_407);
        StorageDead(_405);
        StorageDead(_404);
        goto -> bb415;
    }

    bb194: {
        StorageDead(_406);
        _404 = const ();
        goto -> bb195;
    }

    bb195: {
        StorageDead(_405);
        StorageDead(_404);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = &(*_87);
        _427 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _428) -> [return: bb196, unwind: bb471];
    }

    bb196: {
        StorageDead(_428);
        _846 = const true;
        _426 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _427 };
        StorageDead(_427);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &_111;
        _430 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _431) -> [return: bb197, unwind: bb506];
    }

    bb197: {
        StorageDead(_431);
        StorageLive(_432);
        _846 = const false;
        _432 = move _426;
        _429 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _430, move _432) -> [return: bb198, unwind: bb506];
    }

    bb198: {
        StorageDead(_432);
        StorageDead(_430);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _845 = const true;
        _437 = move _429;
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = const _;
        _448 = &(*_449);
        _447 = move _448 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_448);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _453 = &_21;
        _452 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _453) -> [return: bb199, unwind: bb504];
    }

    bb199: {
        _451 = &_452;
        StorageDead(_453);
        _450 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _451) -> [return: bb200, unwind: bb504];
    }

    bb200: {
        StorageDead(_451);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = &_66;
        _457 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Key>::key(move _458) -> [return: bb201, unwind: bb504];
    }

    bb201: {
        _456 = &_457;
        StorageDead(_458);
        _455 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _456) -> [return: bb202, unwind: bb504];
    }

    bb202: {
        _454 = &(*_455);
        StorageDead(_456);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _150;
        _463 = [move _464];
        _462 = &_463;
        StorageDead(_464);
        StorageLive(_465);
        _465 = RangeFull;
        _461 = <[u8; 1] as Index<RangeFull>>::index(move _462, move _465) -> [return: bb203, unwind: bb504];
    }

    bb203: {
        StorageDead(_465);
        StorageDead(_462);
        _460 = &(*_461);
        _459 = &(*_460);
        _446 = [move _447, move _450, move _454, move _459];
        _445 = &_446;
        StorageDead(_459);
        StorageDead(_454);
        StorageDead(_450);
        StorageDead(_447);
        StorageLive(_466);
        _466 = RangeFull;
        _444 = <[&[u8]; 4] as Index<RangeFull>>::index(move _445, move _466) -> [return: bb204, unwind: bb504];
    }

    bb204: {
        StorageDead(_466);
        StorageDead(_445);
        _443 = &(*_444);
        _442 = &(*_443);
        _441 = [move _442];
        StorageDead(_442);
        _440 = &_441;
        _439 = &(*_440);
        _438 = move _439 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_439);
        _845 = const false;
        _436 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _437, move _438) -> [return: bb205, unwind: bb504];
    }

    bb205: {
        _844 = const true;
        StorageDead(_438);
        _845 = const false;
        StorageDead(_437);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _1009 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _470 = &(*_1009);
        _469 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _470) -> [return: bb206, unwind: bb502];
    }

    bb206: {
        StorageDead(_470);
        StorageLive(_471);
        StorageLive(_472);
        _826 = deref_copy (_469.3: &anchor_lang::prelude::Pubkey);
        _472 = &(*_826);
        StorageLive(_473);
        StorageLive(_474);
        _474 = <Token2022 as anchor_lang::Id>::id() -> [return: bb207, unwind: bb453];
    }

    bb207: {
        _473 = &_474;
        _471 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _472, move _473) -> [return: bb208, unwind: bb453];
    }

    bb208: {
        switchInt(move _471) -> [0: bb237, otherwise: bb209];
    }

    bb209: {
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_472);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = &_469;
        _477 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _478) -> [return: bb210, unwind: bb453];
    }

    bb210: {
        StorageDead(_478);
        _476 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _477) -> [return: bb211, unwind: bb453];
    }

    bb211: {
        StorageDead(_477);
        _479 = discriminant(_476);
        switchInt(move _479) -> [0: bb212, 1: bb213, otherwise: bb5];
    }

    bb212: {
        StorageLive(_483);
        _483 = move ((_476 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _475 = move _483;
        StorageDead(_483);
        _893 = discriminant(_476);
        StorageDead(_476);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = &_475;
        _489 = &(*_490);
        _488 = <Ref<'_, &mut [u8]> as Deref>::deref(move _489) -> [return: bb215, unwind: bb452];
    }

    bb213: {
        StorageLive(_480);
        _480 = move ((_476 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_482);
        _482 = move _480;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _482) -> [return: bb214, unwind: bb500];
    }

    bb214: {
        StorageDead(_482);
        StorageDead(_480);
        _937 = discriminant(_476);
        StorageDead(_476);
        goto -> bb402;
    }

    bb215: {
        _827 = deref_copy (*_488);
        _487 = &(*_827);
        StorageDead(_489);
        _486 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _487) -> [return: bb216, unwind: bb452];
    }

    bb216: {
        StorageDead(_487);
        _485 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _486) -> [return: bb217, unwind: bb452];
    }

    bb217: {
        StorageDead(_486);
        _491 = discriminant(_485);
        switchInt(move _491) -> [0: bb218, 1: bb219, otherwise: bb5];
    }

    bb218: {
        StorageLive(_495);
        _495 = move ((_485 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _484 = move _495;
        StorageDead(_495);
        _895 = discriminant(_485);
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_485);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &_484;
        _498 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _499) -> [return: bb221, unwind: bb452];
    }

    bb219: {
        StorageLive(_492);
        _492 = move ((_485 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_494);
        _494 = move _492;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _494) -> [return: bb220, unwind: bb499];
    }

    bb220: {
        StorageDead(_494);
        StorageDead(_492);
        _935 = discriminant(_485);
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_485);
        goto -> bb401;
    }

    bb221: {
        StorageDead(_499);
        _497 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _498) -> [return: bb222, unwind: bb452];
    }

    bb222: {
        StorageDead(_498);
        _500 = discriminant(_497);
        switchInt(move _500) -> [0: bb223, 1: bb224, otherwise: bb5];
    }

    bb223: {
        StorageLive(_504);
        _504 = move ((_497 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _496 = move _504;
        StorageDead(_504);
        _897 = discriminant(_497);
        StorageDead(_497);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _509 = &_496;
        _508 = &(*_509);
        _507 = <Vec<ExtensionType> as Deref>::deref(move _508) -> [return: bb226, unwind: bb451];
    }

    bb224: {
        StorageLive(_501);
        _501 = move ((_497 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_503);
        _503 = move _501;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _503) -> [return: bb225, unwind: bb498];
    }

    bb225: {
        StorageDead(_503);
        StorageDead(_501);
        _933 = discriminant(_497);
        StorageDead(_497);
        StorageDead(_496);
        goto -> bb401;
    }

    bb226: {
        _506 = &(*_507);
        StorageDead(_508);
        _505 = ExtensionType::get_required_init_account_extensions(move _506) -> [return: bb227, unwind: bb451];
    }

    bb227: {
        StorageDead(_506);
        StorageDead(_509);
        StorageDead(_507);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &_505;
        _514 = &(*_515);
        _513 = <Vec<ExtensionType> as Deref>::deref(move _514) -> [return: bb228, unwind: bb450];
    }

    bb228: {
        _512 = &(*_513);
        StorageDead(_514);
        _511 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _512) -> [return: bb229, unwind: bb450];
    }

    bb229: {
        StorageDead(_512);
        _510 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _511) -> [return: bb230, unwind: bb450];
    }

    bb230: {
        _843 = const true;
        StorageDead(_511);
        _516 = discriminant(_510);
        switchInt(move _516) -> [0: bb231, 1: bb232, otherwise: bb5];
    }

    bb231: {
        StorageLive(_520);
        _520 = ((_510 as Continue).0: usize);
        _468 = _520;
        StorageDead(_520);
        drop(_505) -> [return: bb234, unwind: bb448];
    }

    bb232: {
        StorageLive(_517);
        _517 = move ((_510 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_519);
        _519 = move _517;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _519) -> [return: bb233, unwind: bb447];
    }

    bb233: {
        StorageDead(_519);
        StorageDead(_517);
        drop(_505) -> [return: bb398, unwind: bb448];
    }

    bb234: {
        StorageDead(_505);
        drop(_496) -> [return: bb235, unwind: bb449];
    }

    bb235: {
        StorageDead(_496);
        StorageDead(_484);
        drop(_475) -> [return: bb236, unwind: bb497];
    }

    bb236: {
        StorageDead(_475);
        _899 = discriminant(_510);
        StorageDead(_515);
        StorageDead(_513);
        _843 = const false;
        StorageDead(_510);
        goto -> bb238;
    }

    bb237: {
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_472);
        _468 = const _;
        goto -> bb238;
    }

    bb238: {
        StorageDead(_471);
        drop(_469) -> [return: bb239, unwind: bb502];
    }

    bb239: {
        StorageDead(_469);
        _467 = move _468 as u64 (IntToInt);
        StorageDead(_468);
        _844 = const false;
        _435 = anchor_lang::system_program::allocate(move _436, move _467) -> [return: bb240, unwind: bb502];
    }

    bb240: {
        StorageDead(_467);
        _844 = const false;
        StorageDead(_436);
        _434 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _435) -> [return: bb241, unwind: bb506];
    }

    bb241: {
        StorageDead(_435);
        _521 = discriminant(_434);
        switchInt(move _521) -> [0: bb242, 1: bb243, otherwise: bb5];
    }

    bb242: {
        StorageLive(_525);
        _525 = ((_434 as Continue).0: ());
        _433 = _525;
        StorageDead(_525);
        _901 = discriminant(_434);
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_457);
        StorageDead(_455);
        StorageDead(_452);
        StorageDead(_449);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _528 = &(*_87);
        _527 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _528) -> [return: bb245, unwind: bb506];
    }

    bb243: {
        StorageLive(_522);
        _522 = move ((_434 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_524);
        _524 = move _522;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _524) -> [return: bb244, unwind: bb496];
    }

    bb244: {
        StorageDead(_524);
        StorageDead(_522);
        _929 = discriminant(_434);
        goto -> bb406;
    }

    bb245: {
        StorageDead(_528);
        _842 = const true;
        _526 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _527 };
        StorageDead(_527);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        _531 = &_111;
        _530 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _531) -> [return: bb246, unwind: bb495];
    }

    bb246: {
        StorageDead(_531);
        StorageLive(_532);
        _842 = const false;
        _532 = move _526;
        _529 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _530, move _532) -> [return: bb247, unwind: bb495];
    }

    bb247: {
        StorageDead(_532);
        StorageDead(_530);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _841 = const true;
        _537 = move _529;
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _549 = const _;
        _548 = &(*_549);
        _547 = move _548 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_548);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        _553 = &_21;
        _552 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _553) -> [return: bb248, unwind: bb493];
    }

    bb248: {
        _551 = &_552;
        StorageDead(_553);
        _550 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _551) -> [return: bb249, unwind: bb493];
    }

    bb249: {
        StorageDead(_551);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        _558 = &_66;
        _557 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Key>::key(move _558) -> [return: bb250, unwind: bb493];
    }

    bb250: {
        _556 = &_557;
        StorageDead(_558);
        _555 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _556) -> [return: bb251, unwind: bb493];
    }

    bb251: {
        _554 = &(*_555);
        StorageDead(_556);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _564 = _150;
        _563 = [move _564];
        _562 = &_563;
        StorageDead(_564);
        StorageLive(_565);
        _565 = RangeFull;
        _561 = <[u8; 1] as Index<RangeFull>>::index(move _562, move _565) -> [return: bb252, unwind: bb493];
    }

    bb252: {
        StorageDead(_565);
        StorageDead(_562);
        _560 = &(*_561);
        _559 = &(*_560);
        _546 = [move _547, move _550, move _554, move _559];
        _545 = &_546;
        StorageDead(_559);
        StorageDead(_554);
        StorageDead(_550);
        StorageDead(_547);
        StorageLive(_566);
        _566 = RangeFull;
        _544 = <[&[u8]; 4] as Index<RangeFull>>::index(move _545, move _566) -> [return: bb253, unwind: bb493];
    }

    bb253: {
        StorageDead(_566);
        StorageDead(_545);
        _543 = &(*_544);
        _542 = &(*_543);
        _541 = [move _542];
        StorageDead(_542);
        _540 = &_541;
        _539 = &(*_540);
        _538 = move _539 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_539);
        _841 = const false;
        _536 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _537, move _538) -> [return: bb254, unwind: bb493];
    }

    bb254: {
        _840 = const true;
        StorageDead(_538);
        _841 = const false;
        StorageDead(_537);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = &_96;
        _571 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _572) -> [return: bb255, unwind: bb491];
    }

    bb255: {
        _570 = &(*_571);
        StorageDead(_572);
        _569 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _570) -> [return: bb256, unwind: bb491];
    }

    bb256: {
        StorageDead(_570);
        _568 = &_569;
        _567 = &(*_568);
        _840 = const false;
        _535 = anchor_lang::system_program::assign(move _536, move _567) -> [return: bb257, unwind: bb491];
    }

    bb257: {
        StorageDead(_567);
        _840 = const false;
        StorageDead(_536);
        _534 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _535) -> [return: bb258, unwind: bb495];
    }

    bb258: {
        StorageDead(_535);
        _573 = discriminant(_534);
        switchInt(move _573) -> [0: bb259, 1: bb260, otherwise: bb5];
    }

    bb259: {
        StorageLive(_577);
        _577 = ((_534 as Continue).0: ());
        _533 = _577;
        StorageDead(_577);
        _903 = discriminant(_534);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_560);
        StorageDead(_557);
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_549);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_541);
        StorageDead(_540);
        StorageDead(_534);
        StorageDead(_533);
        _201 = const ();
        StorageDead(_529);
        _842 = const false;
        StorageDead(_526);
        StorageDead(_429);
        _846 = const false;
        StorageDead(_426);
        StorageDead(_346);
        goto -> bb262;
    }

    bb260: {
        StorageLive(_574);
        _574 = move ((_534 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_576);
        _576 = move _574;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _576) -> [return: bb261, unwind: bb489];
    }

    bb261: {
        StorageDead(_576);
        StorageDead(_574);
        _927 = discriminant(_534);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_560);
        StorageDead(_557);
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_549);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_541);
        StorageDead(_540);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_529);
        _842 = const false;
        StorageDead(_526);
        goto -> bb407;
    }

    bb262: {
        StorageDead(_202);
        StorageDead(_201);
        StorageLive(_578);
        StorageLive(_579);
        _579 = &_96;
        _578 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _579) -> [return: bb263, unwind: bb471];
    }

    bb263: {
        _839 = const true;
        StorageDead(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _582 = &(*_87);
        _581 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _582) -> [return: bb264, unwind: bb488];
    }

    bb264: {
        StorageDead(_582);
        StorageLive(_583);
        StorageLive(_584);
        _1010 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _584 = &(*_1010);
        _583 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _584) -> [return: bb265, unwind: bb446];
    }

    bb265: {
        StorageDead(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = &_36;
        _585 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _586) -> [return: bb266, unwind: bb445];
    }

    bb266: {
        StorageDead(_586);
        _580 = anchor_spl::token_2022::InitializeAccount3::<'_> { account: move _581, mint: move _583, authority: move _585 };
        StorageDead(_585);
        StorageDead(_583);
        StorageDead(_581);
        StorageLive(_587);
        StorageLive(_588);
        _839 = const false;
        _588 = move _578;
        StorageLive(_589);
        _589 = move _580;
        _587 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>::new(move _588, move _589) -> [return: bb267, unwind: bb488];
    }

    bb267: {
        StorageDead(_589);
        StorageDead(_588);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _593 = move _587;
        _592 = anchor_spl::token_2022::initialize_account3(move _593) -> [return: bb268, unwind: bb488];
    }

    bb268: {
        StorageDead(_593);
        _591 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _592) -> [return: bb269, unwind: bb488];
    }

    bb269: {
        StorageDead(_592);
        _594 = discriminant(_591);
        switchInt(move _594) -> [0: bb270, 1: bb271, otherwise: bb5];
    }

    bb270: {
        StorageLive(_598);
        _598 = ((_591 as Continue).0: ());
        _590 = _598;
        StorageDead(_598);
        _905 = discriminant(_591);
        StorageDead(_591);
        StorageDead(_590);
        _192 = const ();
        StorageDead(_587);
        StorageDead(_580);
        _839 = const false;
        StorageDead(_578);
        StorageDead(_199);
        goto -> bb274;
    }

    bb271: {
        StorageLive(_595);
        _595 = move ((_591 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_597);
        _597 = move _595;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _597) -> [return: bb272, unwind: bb486];
    }

    bb272: {
        StorageDead(_597);
        StorageDead(_595);
        _925 = discriminant(_591);
        StorageDead(_591);
        StorageDead(_590);
        StorageDead(_587);
        StorageDead(_580);
        _839 = const false;
        StorageDead(_578);
        goto -> bb425;
    }

    bb273: {
        StorageDead(_196);
        StorageDead(_195);
        _192 = const ();
        goto -> bb274;
    }

    bb274: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        _603 = &_87;
        _828 = deref_copy (*_603);
        _602 = &(*_828);
        _601 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::try_from_unchecked(move _602) -> [return: bb275, unwind: bb471];
    }

    bb275: {
        _837 = const true;
        _838 = const true;
        StorageDead(_602);
        _604 = discriminant(_601);
        switchInt(move _604) -> [0: bb277, 1: bb276, otherwise: bb5];
    }

    bb276: {
        StorageLive(_606);
        _606 = move ((_601 as Err).0: anchor_lang::error::Error);
        StorageLive(_608);
        StorageLive(_609);
        _609 = move _606;
        _608 = anchor_lang::error::Error::with_account_name::<&str>(move _609, const "ctoken_vault") -> [return: bb278, unwind: bb485];
    }

    bb277: {
        StorageLive(_605);
        _605 = move ((_601 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _600 = move _605;
        StorageDead(_605);
        _599 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>::new(move _600) -> [return: bb279, unwind: bb485];
    }

    bb278: {
        StorageDead(_609);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _608);
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_600);
        _923 = discriminant(_601);
        StorageDead(_603);
        _837 = const false;
        _838 = const false;
        StorageDead(_601);
        goto -> bb397;
    }

    bb279: {
        StorageDead(_600);
        _907 = discriminant(_601);
        StorageDead(_603);
        _837 = const false;
        _838 = const false;
        StorageDead(_601);
        StorageLive(_610);
        StorageLive(_611);
        _611 = const true;
        switchInt(move _611) -> [0: bb315, otherwise: bb280];
    }

    bb280: {
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        _1011 = (((_599.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _618 = &(*_1011);
        _617 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _618) -> [return: bb281, unwind: bb444];
    }

    bb281: {
        _616 = &(*_617);
        _615 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _616) -> [return: bb282, unwind: bb444];
    }

    bb282: {
        StorageDead(_618);
        StorageDead(_616);
        _614 = &((*_615).0: anchor_lang::prelude::Pubkey);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        _1012 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _621 = &(*_1012);
        _620 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _621) -> [return: bb283, unwind: bb444];
    }

    bb283: {
        _619 = &_620;
        StorageDead(_621);
        _613 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _614, move _619) -> [return: bb284, unwind: bb444];
    }

    bb284: {
        switchInt(move _613) -> [0: bb292, otherwise: bb285];
    }

    bb285: {
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_617);
        StorageDead(_615);
        StorageDead(_614);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        _626 = ConstraintTokenMint;
        _625 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _626) -> [return: bb286, unwind: bb444];
    }

    bb286: {
        StorageDead(_626);
        _624 = anchor_lang::error::Error::with_account_name::<&str>(move _625, const "ctoken_vault") -> [return: bb287, unwind: bb444];
    }

    bb287: {
        _836 = const true;
        StorageDead(_625);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        _1013 = (((_599.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _632 = &(*_1013);
        _631 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _632) -> [return: bb288, unwind: bb484];
    }

    bb288: {
        _630 = &(*_631);
        _629 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _630) -> [return: bb289, unwind: bb484];
    }

    bb289: {
        StorageDead(_632);
        StorageDead(_630);
        _628 = ((*_629).0: anchor_lang::prelude::Pubkey);
        StorageLive(_633);
        StorageLive(_634);
        _1014 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _634 = &(*_1014);
        _633 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _634) -> [return: bb290, unwind: bb484];
    }

    bb290: {
        StorageDead(_634);
        _627 = (move _628, move _633);
        StorageDead(_633);
        StorageDead(_628);
        _836 = const false;
        _623 = anchor_lang::error::Error::with_pubkeys(move _624, move _627) -> [return: bb291, unwind: bb484];
    }

    bb291: {
        StorageDead(_627);
        _836 = const false;
        StorageDead(_624);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _623);
        StorageDead(_623);
        StorageDead(_631);
        StorageDead(_629);
        StorageDead(_613);
        StorageDead(_612);
        goto -> bb396;
    }

    bb292: {
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_617);
        StorageDead(_615);
        StorageDead(_614);
        _612 = const ();
        StorageDead(_613);
        StorageDead(_612);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        _1015 = (((_599.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _641 = &(*_1015);
        _640 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _641) -> [return: bb293, unwind: bb444];
    }

    bb293: {
        _639 = &(*_640);
        _638 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _639) -> [return: bb294, unwind: bb444];
    }

    bb294: {
        StorageDead(_641);
        StorageDead(_639);
        _637 = &((*_638).1: anchor_lang::prelude::Pubkey);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        _644 = &_36;
        _643 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _644) -> [return: bb295, unwind: bb444];
    }

    bb295: {
        _642 = &_643;
        StorageDead(_644);
        _636 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _637, move _642) -> [return: bb296, unwind: bb444];
    }

    bb296: {
        switchInt(move _636) -> [0: bb304, otherwise: bb297];
    }

    bb297: {
        StorageDead(_643);
        StorageDead(_642);
        StorageDead(_640);
        StorageDead(_638);
        StorageDead(_637);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = ConstraintTokenOwner;
        _648 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _649) -> [return: bb298, unwind: bb444];
    }

    bb298: {
        StorageDead(_649);
        _647 = anchor_lang::error::Error::with_account_name::<&str>(move _648, const "ctoken_vault") -> [return: bb299, unwind: bb444];
    }

    bb299: {
        _835 = const true;
        StorageDead(_648);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        _1016 = (((_599.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _655 = &(*_1016);
        _654 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _655) -> [return: bb300, unwind: bb482];
    }

    bb300: {
        _653 = &(*_654);
        _652 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _653) -> [return: bb301, unwind: bb482];
    }

    bb301: {
        StorageDead(_655);
        StorageDead(_653);
        _651 = ((*_652).1: anchor_lang::prelude::Pubkey);
        StorageLive(_656);
        StorageLive(_657);
        _657 = &_36;
        _656 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _657) -> [return: bb302, unwind: bb482];
    }

    bb302: {
        StorageDead(_657);
        _650 = (move _651, move _656);
        StorageDead(_656);
        StorageDead(_651);
        _835 = const false;
        _646 = anchor_lang::error::Error::with_pubkeys(move _647, move _650) -> [return: bb303, unwind: bb482];
    }

    bb303: {
        StorageDead(_650);
        _835 = const false;
        StorageDead(_647);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _646);
        StorageDead(_646);
        StorageDead(_654);
        StorageDead(_652);
        StorageDead(_636);
        StorageDead(_635);
        goto -> bb396;
    }

    bb304: {
        StorageDead(_643);
        StorageDead(_642);
        StorageDead(_640);
        StorageDead(_638);
        StorageDead(_637);
        _635 = const ();
        StorageDead(_636);
        StorageDead(_635);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &_187;
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        _665 = &_96;
        _664 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _665) -> [return: bb305, unwind: bb444];
    }

    bb305: {
        _663 = &(*_664);
        StorageDead(_665);
        _662 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _663) -> [return: bb306, unwind: bb444];
    }

    bb306: {
        StorageDead(_663);
        _661 = &_662;
        _660 = &_661;
        _658 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _659, move _660) -> [return: bb307, unwind: bb444];
    }

    bb307: {
        switchInt(move _658) -> [0: bb314, otherwise: bb308];
    }

    bb308: {
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_659);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        _670 = ConstraintTokenTokenProgram;
        _669 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _670) -> [return: bb309, unwind: bb444];
    }

    bb309: {
        StorageDead(_670);
        _668 = anchor_lang::error::Error::with_account_name::<&str>(move _669, const "ctoken_vault") -> [return: bb310, unwind: bb444];
    }

    bb310: {
        _834 = const true;
        StorageDead(_669);
        StorageLive(_671);
        StorageLive(_672);
        _672 = (*_187);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        _676 = &_96;
        _675 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _676) -> [return: bb311, unwind: bb480];
    }

    bb311: {
        _674 = &(*_675);
        StorageDead(_676);
        _673 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _674) -> [return: bb312, unwind: bb480];
    }

    bb312: {
        StorageDead(_674);
        _671 = (move _672, move _673);
        StorageDead(_673);
        StorageDead(_672);
        _834 = const false;
        _667 = anchor_lang::error::Error::with_pubkeys(move _668, move _671) -> [return: bb313, unwind: bb480];
    }

    bb313: {
        StorageDead(_671);
        _834 = const false;
        StorageDead(_668);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _667);
        StorageDead(_667);
        StorageDead(_675);
        StorageDead(_658);
        goto -> bb396;
    }

    bb314: {
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_659);
        _610 = const ();
        StorageDead(_658);
        goto -> bb316;
    }

    bb315: {
        _610 = const ();
        goto -> bb316;
    }

    bb316: {
        StorageDead(_611);
        StorageDead(_610);
        _186 = move _599;
        StorageDead(_599);
        StorageDead(_187);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        _682 = &_186;
        _681 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _682) -> [return: bb317, unwind: bb443];
    }

    bb317: {
        _680 = &(*_681);
        StorageDead(_682);
        _679 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _680) -> [return: bb318, unwind: bb443];
    }

    bb318: {
        StorageDead(_680);
        _678 = ((*_679).6: bool);
        switchInt(move _678) -> [0: bb319, otherwise: bb322];
    }

    bb319: {
        StorageDead(_681);
        StorageDead(_679);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _686 = ConstraintMut;
        _685 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _686) -> [return: bb320, unwind: bb443];
    }

    bb320: {
        StorageDead(_686);
        _684 = anchor_lang::error::Error::with_account_name::<&str>(move _685, const "ctoken_vault") -> [return: bb321, unwind: bb443];
    }

    bb321: {
        StorageDead(_685);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _684);
        StorageDead(_684);
        StorageDead(_678);
        StorageDead(_677);
        goto -> bb395;
    }

    bb322: {
        StorageDead(_681);
        StorageDead(_679);
        _677 = const ();
        StorageDead(_678);
        StorageDead(_677);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        _689 = &_141;
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        _1017 = (((_186.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _693 = &(*_1017);
        _692 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _693) -> [return: bb323, unwind: bb443];
    }

    bb323: {
        _691 = &_692;
        StorageDead(_693);
        _690 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _691) -> [return: bb324, unwind: bb442];
    }

    bb324: {
        StorageDead(_691);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        _1018 = (((_186.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _699 = &(*_1018);
        _698 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _699) -> [return: bb325, unwind: bb442];
    }

    bb325: {
        _697 = &_698;
        StorageDead(_699);
        _696 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _697) -> [return: bb326, unwind: bb441];
    }

    bb326: {
        StorageDead(_697);
        _695 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _696) -> [return: bb327, unwind: bb441];
    }

    bb327: {
        _833 = const true;
        StorageDead(_696);
        _700 = discriminant(_695);
        switchInt(move _700) -> [0: bb328, 1: bb329, otherwise: bb5];
    }

    bb328: {
        StorageLive(_704);
        _704 = ((_695 as Continue).0: usize);
        _694 = _704;
        StorageDead(_704);
        _688 = anchor_lang::prelude::Rent::is_exempt(move _689, move _690, move _694) -> [return: bb331, unwind: bb478];
    }

    bb329: {
        StorageLive(_701);
        _701 = move ((_695 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_703);
        _703 = move _701;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _703) -> [return: bb330, unwind: bb478];
    }

    bb330: {
        StorageDead(_703);
        StorageDead(_701);
        StorageDead(_694);
        StorageDead(_690);
        StorageDead(_689);
        _921 = discriminant(_695);
        drop(_698) -> [return: bb392, unwind: bb442];
    }

    bb331: {
        switchInt(move _688) -> [0: bb333, otherwise: bb332];
    }

    bb332: {
        StorageDead(_694);
        StorageDead(_690);
        StorageDead(_689);
        _909 = discriminant(_695);
        drop(_698) -> [return: bb338, unwind: bb442];
    }

    bb333: {
        StorageDead(_694);
        StorageDead(_690);
        StorageDead(_689);
        _911 = discriminant(_695);
        drop(_698) -> [return: bb334, unwind: bb442];
    }

    bb334: {
        StorageDead(_698);
        _833 = const false;
        StorageDead(_695);
        drop(_692) -> [return: bb335, unwind: bb443];
    }

    bb335: {
        StorageDead(_692);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        _708 = ConstraintRentExempt;
        _707 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _708) -> [return: bb336, unwind: bb443];
    }

    bb336: {
        StorageDead(_708);
        _706 = anchor_lang::error::Error::with_account_name::<&str>(move _707, const "ctoken_vault") -> [return: bb337, unwind: bb443];
    }

    bb337: {
        StorageDead(_707);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _706);
        StorageDead(_706);
        goto -> bb394;
    }

    bb338: {
        StorageDead(_698);
        _833 = const false;
        StorageDead(_695);
        drop(_692) -> [return: bb339, unwind: bb443];
    }

    bb339: {
        StorageDead(_692);
        _687 = const ();
        StorageDead(_688);
        StorageDead(_687);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        _713 = &_6;
        _712 = &(*_713);
        _711 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _712) -> [return: bb340, unwind: bb443];
    }

    bb340: {
        StorageDead(_712);
        _710 = ((*_711).6: bool);
        switchInt(move _710) -> [0: bb341, otherwise: bb344];
    }

    bb341: {
        StorageDead(_713);
        StorageDead(_711);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        _717 = ConstraintMut;
        _716 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _717) -> [return: bb342, unwind: bb443];
    }

    bb342: {
        StorageDead(_717);
        _715 = anchor_lang::error::Error::with_account_name::<&str>(move _716, const "signer") -> [return: bb343, unwind: bb443];
    }

    bb343: {
        StorageDead(_716);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _715);
        StorageDead(_715);
        StorageDead(_710);
        StorageDead(_709);
        goto -> bb395;
    }

    bb344: {
        StorageDead(_713);
        StorageDead(_711);
        _709 = const ();
        StorageDead(_710);
        StorageDead(_709);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        _722 = &_21;
        _721 = &(*_722);
        _720 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _721) -> [return: bb345, unwind: bb443];
    }

    bb345: {
        StorageDead(_721);
        _719 = ((*_720).6: bool);
        switchInt(move _719) -> [0: bb346, otherwise: bb349];
    }

    bb346: {
        StorageDead(_722);
        StorageDead(_720);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        _726 = ConstraintMut;
        _725 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _726) -> [return: bb347, unwind: bb443];
    }

    bb347: {
        StorageDead(_726);
        _724 = anchor_lang::error::Error::with_account_name::<&str>(move _725, const "vault_state") -> [return: bb348, unwind: bb443];
    }

    bb348: {
        StorageDead(_725);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _724);
        StorageDead(_724);
        StorageDead(_719);
        StorageDead(_718);
        goto -> bb395;
    }

    bb349: {
        StorageDead(_722);
        StorageDead(_720);
        _718 = const ();
        StorageDead(_719);
        StorageDead(_718);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        _734 = &_21;
        _733 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _734) -> [return: bb350, unwind: bb443];
    }

    bb350: {
        StorageDead(_734);
        _732 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _733) -> [return: bb351, unwind: bb443];
    }

    bb351: {
        _831 = const true;
        _832 = const true;
        StorageDead(_733);
        _735 = discriminant(_732);
        switchInt(move _735) -> [0: bb352, 1: bb353, otherwise: bb5];
    }

    bb352: {
        StorageLive(_739);
        _739 = move ((_732 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _731 = move _739;
        StorageDead(_739);
        _730 = &_731;
        _729 = <Ref<'_, state::VaultState> as Deref>::deref(move _730) -> [return: bb355, unwind: bb440];
    }

    bb353: {
        StorageLive(_736);
        _736 = move ((_732 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_738);
        _738 = move _736;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _738) -> [return: bb354, unwind: bb477];
    }

    bb354: {
        StorageDead(_738);
        StorageDead(_736);
        StorageDead(_730);
        _919 = discriminant(_732);
        _831 = const false;
        _832 = const false;
        StorageDead(_732);
        StorageDead(_731);
        StorageDead(_729);
        goto -> bb391;
    }

    bb355: {
        StorageDead(_730);
        _728 = ((*_729).1: anchor_lang::prelude::Pubkey);
        drop(_731) -> [return: bb474, unwind: bb477];
    }

    bb356: {
        StorageDead(_741);
        StorageLive(_742);
        StorageLive(_743);
        _743 = &_728;
        StorageLive(_744);
        _744 = &_740;
        _742 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _743, move _744) -> [return: bb357, unwind: bb443];
    }

    bb357: {
        switchInt(move _742) -> [0: bb362, otherwise: bb358];
    }

    bb358: {
        StorageDead(_744);
        StorageDead(_743);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        _749 = ConstraintHasOne;
        _748 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _749) -> [return: bb359, unwind: bb443];
    }

    bb359: {
        StorageDead(_749);
        _747 = anchor_lang::error::Error::with_account_name::<&str>(move _748, const "vault_state") -> [return: bb360, unwind: bb443];
    }

    bb360: {
        StorageDead(_748);
        StorageLive(_750);
        StorageLive(_751);
        _751 = _728;
        StorageLive(_752);
        _752 = _740;
        _750 = (move _751, move _752);
        StorageDead(_752);
        StorageDead(_751);
        _746 = anchor_lang::error::Error::with_pubkeys(move _747, move _750) -> [return: bb361, unwind: bb443];
    }

    bb361: {
        StorageDead(_750);
        StorageDead(_747);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _746);
        StorageDead(_746);
        StorageDead(_742);
        StorageDead(_740);
        goto -> bb391;
    }

    bb362: {
        StorageDead(_744);
        StorageDead(_743);
        _727 = const ();
        StorageDead(_742);
        StorageDead(_740);
        StorageDead(_728);
        StorageDead(_727);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        _758 = &_51;
        _757 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _758) -> [return: bb363, unwind: bb443];
    }

    bb363: {
        _756 = &(*_757);
        StorageDead(_758);
        _755 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _756) -> [return: bb364, unwind: bb443];
    }

    bb364: {
        StorageDead(_756);
        _754 = ((*_755).6: bool);
        switchInt(move _754) -> [0: bb365, otherwise: bb368];
    }

    bb365: {
        StorageDead(_757);
        StorageDead(_755);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        _762 = ConstraintMut;
        _761 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _762) -> [return: bb366, unwind: bb443];
    }

    bb366: {
        StorageDead(_762);
        _760 = anchor_lang::error::Error::with_account_name::<&str>(move _761, const "reserve_collateral_mint") -> [return: bb367, unwind: bb443];
    }

    bb367: {
        StorageDead(_761);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _760);
        StorageDead(_760);
        StorageDead(_754);
        StorageDead(_753);
        goto -> bb395;
    }

    bb368: {
        StorageDead(_757);
        StorageDead(_755);
        _753 = const ();
        StorageDead(_754);
        StorageDead(_753);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        _1019 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _765 = &(*_1019);
        _764 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _765) -> [return: bb369, unwind: bb443];
    }

    bb369: {
        StorageDead(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        _772 = &_66;
        _771 = anchor_lang::prelude::AccountLoader::<'_, kamino_lending::Reserve>::load(move _772) -> [return: bb370, unwind: bb443];
    }

    bb370: {
        StorageDead(_772);
        _770 = <std::result::Result<Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _771) -> [return: bb371, unwind: bb443];
    }

    bb371: {
        _829 = const true;
        _830 = const true;
        StorageDead(_771);
        _773 = discriminant(_770);
        switchInt(move _773) -> [0: bb372, 1: bb373, otherwise: bb5];
    }

    bb372: {
        StorageLive(_777);
        _777 = move ((_770 as Continue).0: std::cell::Ref<'_, kamino_lending::Reserve>);
        _769 = move _777;
        StorageDead(_777);
        _768 = &_769;
        _767 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _768) -> [return: bb375, unwind: bb439];
    }

    bb373: {
        StorageLive(_774);
        _774 = move ((_770 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_776);
        _776 = move _774;
        _0 = <std::result::Result<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _776) -> [return: bb374, unwind: bb476];
    }

    bb374: {
        StorageDead(_776);
        StorageDead(_774);
        StorageDead(_768);
        _917 = discriminant(_770);
        _829 = const false;
        _830 = const false;
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_767);
        goto -> bb390;
    }

    bb375: {
        StorageDead(_768);
        _766 = (((*_767).7: kamino_lending::ReserveCollateral).0: anchor_lang::prelude::Pubkey);
        drop(_769) -> [return: bb475, unwind: bb476];
    }

    bb376: {
        switchInt(move _778) -> [0: bb381, otherwise: bb377];
    }

    bb377: {
        StorageDead(_780);
        StorageDead(_779);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        _785 = ConstraintAddress;
        _784 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _785) -> [return: bb378, unwind: bb443];
    }

    bb378: {
        StorageDead(_785);
        _783 = anchor_lang::error::Error::with_account_name::<&str>(move _784, const "reserve_collateral_mint") -> [return: bb379, unwind: bb443];
    }

    bb379: {
        StorageDead(_784);
        StorageLive(_786);
        StorageLive(_787);
        _787 = _764;
        StorageLive(_788);
        _788 = _766;
        _786 = (move _787, move _788);
        StorageDead(_788);
        StorageDead(_787);
        _782 = anchor_lang::error::Error::with_pubkeys(move _783, move _786) -> [return: bb380, unwind: bb443];
    }

    bb380: {
        StorageDead(_786);
        StorageDead(_783);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _782);
        StorageDead(_782);
        StorageDead(_778);
        goto -> bb390;
    }

    bb381: {
        StorageDead(_780);
        StorageDead(_779);
        _763 = const ();
        StorageDead(_778);
        StorageDead(_766);
        StorageDead(_764);
        StorageDead(_763);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        _795 = &_51;
        _794 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _795) -> [return: bb382, unwind: bb443];
    }

    bb382: {
        _793 = &(*_794);
        StorageDead(_795);
        _792 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _793) -> [return: bb383, unwind: bb443];
    }

    bb383: {
        StorageDead(_793);
        _791 = &((*_792).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        _801 = &_96;
        _800 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _801) -> [return: bb384, unwind: bb443];
    }

    bb384: {
        _799 = &(*_800);
        StorageDead(_801);
        _798 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _799) -> [return: bb385, unwind: bb443];
    }

    bb385: {
        StorageDead(_799);
        _797 = &_798;
        _796 = &_797;
        _790 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _791, move _796) -> [return: bb386, unwind: bb443];
    }

    bb386: {
        switchInt(move _790) -> [0: bb389, otherwise: bb387];
    }

    bb387: {
        StorageDead(_800);
        StorageDead(_798);
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_794);
        StorageDead(_792);
        StorageDead(_791);
        StorageLive(_803);
        StorageLive(_804);
        _804 = ConstraintMintTokenProgram;
        _803 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _804) -> [return: bb388, unwind: bb443];
    }

    bb388: {
        StorageDead(_804);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Err(move _803);
        StorageDead(_803);
        StorageDead(_790);
        StorageDead(_789);
        goto -> bb395;
    }

    bb389: {
        StorageDead(_800);
        StorageDead(_798);
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_794);
        StorageDead(_792);
        StorageDead(_791);
        _789 = const ();
        StorageDead(_790);
        StorageDead(_789);
        StorageLive(_805);
        StorageLive(_806);
        _806 = move _6;
        StorageLive(_807);
        _807 = move _21;
        StorageLive(_808);
        _808 = move _36;
        StorageLive(_809);
        _809 = move _51;
        StorageLive(_810);
        _810 = move _66;
        StorageLive(_811);
        _811 = move _186;
        StorageLive(_812);
        _812 = move _96;
        StorageLive(_813);
        _813 = move _111;
        StorageLive(_814);
        _814 = move _126;
        _805 = handlers::handler_update_reserve_allocation::UpdateReserveAllocation::<'_> { signer: move _806, vault_state: move _807, base_vault_authority: move _808, reserve_collateral_mint: move _809, reserve: move _810, ctoken_vault: move _811, reserve_collateral_token_program: move _812, system_program: move _813, rent: move _814 };
        StorageDead(_814);
        StorageDead(_813);
        StorageDead(_812);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_809);
        StorageDead(_808);
        StorageDead(_807);
        StorageDead(_806);
        _0 = std::result::Result::<handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>, anchor_lang::error::Error>::Ok(move _805);
        StorageDead(_805);
        StorageDead(_186);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb438;
    }

    bb390: {
        StorageDead(_766);
        StorageDead(_764);
        StorageDead(_763);
        goto -> bb395;
    }

    bb391: {
        StorageDead(_728);
        StorageDead(_727);
        goto -> bb395;
    }

    bb392: {
        StorageDead(_698);
        _833 = const false;
        StorageDead(_695);
        drop(_692) -> [return: bb393, unwind: bb443];
    }

    bb393: {
        StorageDead(_692);
        goto -> bb394;
    }

    bb394: {
        StorageDead(_688);
        StorageDead(_687);
        goto -> bb395;
    }

    bb395: {
        drop(_186) -> [return: bb427, unwind: bb471];
    }

    bb396: {
        StorageDead(_611);
        StorageDead(_610);
        drop(_599) -> [return: bb397, unwind: bb471];
    }

    bb397: {
        StorageDead(_599);
        goto -> bb426;
    }

    bb398: {
        StorageDead(_505);
        drop(_496) -> [return: bb399, unwind: bb449];
    }

    bb399: {
        StorageDead(_496);
        StorageDead(_484);
        drop(_475) -> [return: bb400, unwind: bb497];
    }

    bb400: {
        StorageDead(_475);
        _931 = discriminant(_510);
        StorageDead(_515);
        StorageDead(_513);
        _843 = const false;
        StorageDead(_510);
        goto -> bb403;
    }

    bb401: {
        StorageDead(_484);
        drop(_475) -> [return: bb402, unwind: bb453];
    }

    bb402: {
        StorageDead(_475);
        goto -> bb403;
    }

    bb403: {
        StorageDead(_471);
        drop(_469) -> [return: bb404, unwind: bb502];
    }

    bb404: {
        StorageDead(_469);
        StorageDead(_468);
        StorageDead(_467);
        drop(_436) -> [return: bb405, unwind: bb506];
    }

    bb405: {
        _844 = const false;
        StorageDead(_436);
        StorageDead(_435);
        goto -> bb406;
    }

    bb406: {
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_457);
        StorageDead(_455);
        StorageDead(_452);
        StorageDead(_449);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb407;
    }

    bb407: {
        StorageDead(_429);
        _846 = const false;
        StorageDead(_426);
        goto -> bb415;
    }

    bb408: {
        StorageDead(_387);
        drop(_378) -> [return: bb409, unwind: bb457];
    }

    bb409: {
        StorageDead(_378);
        StorageDead(_366);
        drop(_357) -> [return: bb410, unwind: bb510];
    }

    bb410: {
        StorageDead(_357);
        _941 = discriminant(_392);
        StorageDead(_397);
        StorageDead(_395);
        _848 = const false;
        StorageDead(_392);
        goto -> bb413;
    }

    bb411: {
        StorageDead(_366);
        drop(_357) -> [return: bb412, unwind: bb461];
    }

    bb412: {
        StorageDead(_357);
        goto -> bb413;
    }

    bb413: {
        StorageDead(_353);
        drop(_351) -> [return: bb414, unwind: bb471];
    }

    bb414: {
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_347);
        goto -> bb415;
    }

    bb415: {
        StorageDead(_346);
        goto -> bb424;
    }

    bb416: {
        StorageDead(_241);
        drop(_232) -> [return: bb417, unwind: bb466];
    }

    bb417: {
        StorageDead(_232);
        StorageDead(_220);
        drop(_211) -> [return: bb418, unwind: bb523];
    }

    bb418: {
        StorageDead(_211);
        _951 = discriminant(_246);
        StorageDead(_251);
        StorageDead(_249);
        _853 = const false;
        StorageDead(_246);
        goto -> bb421;
    }

    bb419: {
        StorageDead(_220);
        drop(_211) -> [return: bb420, unwind: bb470];
    }

    bb420: {
        StorageDead(_211);
        goto -> bb421;
    }

    bb421: {
        StorageDead(_207);
        drop(_205) -> [return: bb422, unwind: bb471];
    }

    bb422: {
        StorageDead(_205);
        goto -> bb423;
    }

    bb423: {
        StorageDead(_204);
        goto -> bb424;
    }

    bb424: {
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb425;
    }

    bb425: {
        StorageDead(_199);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb426;
    }

    bb426: {
        StorageDead(_187);
        goto -> bb427;
    }

    bb427: {
        StorageDead(_186);
        goto -> bb428;
    }

    bb428: {
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb429;
    }

    bb429: {
        StorageDead(_141);
        goto -> bb430;
    }

    bb430: {
        StorageDead(_126);
        goto -> bb431;
    }

    bb431: {
        StorageDead(_111);
        goto -> bb432;
    }

    bb432: {
        StorageDead(_96);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb433;
    }

    bb433: {
        StorageDead(_66);
        drop(_51) -> [return: bb434, unwind: bb472];
    }

    bb434: {
        StorageDead(_51);
        drop(_36) -> [return: bb435, unwind: bb473];
    }

    bb435: {
        StorageDead(_36);
        goto -> bb436;
    }

    bb436: {
        StorageDead(_21);
        goto -> bb437;
    }

    bb437: {
        StorageDead(_6);
        goto -> bb438;
    }

    bb438: {
        return;
    }

    bb439 (cleanup): {
        drop(_769) -> [return: bb476, unwind terminate(cleanup)];
    }

    bb440 (cleanup): {
        drop(_731) -> [return: bb477, unwind terminate(cleanup)];
    }

    bb441 (cleanup): {
        drop(_698) -> [return: bb442, unwind terminate(cleanup)];
    }

    bb442 (cleanup): {
        drop(_692) -> [return: bb443, unwind terminate(cleanup)];
    }

    bb443 (cleanup): {
        drop(_186) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb444 (cleanup): {
        drop(_599) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb445 (cleanup): {
        drop(_583) -> [return: bb446, unwind terminate(cleanup)];
    }

    bb446 (cleanup): {
        drop(_581) -> [return: bb488, unwind terminate(cleanup)];
    }

    bb447 (cleanup): {
        drop(_505) -> [return: bb448, unwind terminate(cleanup)];
    }

    bb448 (cleanup): {
        drop(_496) -> [return: bb449, unwind terminate(cleanup)];
    }

    bb449 (cleanup): {
        drop(_475) -> [return: bb497, unwind terminate(cleanup)];
    }

    bb450 (cleanup): {
        drop(_505) -> [return: bb451, unwind terminate(cleanup)];
    }

    bb451 (cleanup): {
        drop(_496) -> [return: bb452, unwind terminate(cleanup)];
    }

    bb452 (cleanup): {
        drop(_475) -> [return: bb453, unwind terminate(cleanup)];
    }

    bb453 (cleanup): {
        drop(_469) -> [return: bb502, unwind terminate(cleanup)];
    }

    bb454 (cleanup): {
        drop(_408) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb455 (cleanup): {
        drop(_387) -> [return: bb456, unwind terminate(cleanup)];
    }

    bb456 (cleanup): {
        drop(_378) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb457 (cleanup): {
        drop(_357) -> [return: bb510, unwind terminate(cleanup)];
    }

    bb458 (cleanup): {
        drop(_387) -> [return: bb459, unwind terminate(cleanup)];
    }

    bb459 (cleanup): {
        drop(_378) -> [return: bb460, unwind terminate(cleanup)];
    }

    bb460 (cleanup): {
        drop(_357) -> [return: bb461, unwind terminate(cleanup)];
    }

    bb461 (cleanup): {
        drop(_351) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb462 (cleanup): {
        drop(_329) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb463 (cleanup): {
        drop(_261) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb464 (cleanup): {
        drop(_241) -> [return: bb465, unwind terminate(cleanup)];
    }

    bb465 (cleanup): {
        drop(_232) -> [return: bb466, unwind terminate(cleanup)];
    }

    bb466 (cleanup): {
        drop(_211) -> [return: bb523, unwind terminate(cleanup)];
    }

    bb467 (cleanup): {
        drop(_241) -> [return: bb468, unwind terminate(cleanup)];
    }

    bb468 (cleanup): {
        drop(_232) -> [return: bb469, unwind terminate(cleanup)];
    }

    bb469 (cleanup): {
        drop(_211) -> [return: bb470, unwind terminate(cleanup)];
    }

    bb470 (cleanup): {
        drop(_205) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb471 (cleanup): {
        drop(_51) -> [return: bb472, unwind terminate(cleanup)];
    }

    bb472 (cleanup): {
        drop(_36) -> [return: bb473, unwind terminate(cleanup)];
    }

    bb473 (cleanup): {
        resume;
    }

    bb474: {
        _913 = discriminant(_732);
        _831 = const false;
        _832 = const false;
        StorageDead(_732);
        StorageDead(_731);
        StorageDead(_729);
        StorageLive(_740);
        StorageLive(_741);
        _741 = &_36;
        _740 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _741) -> [return: bb356, unwind: bb443];
    }

    bb475: {
        _915 = discriminant(_770);
        _829 = const false;
        _830 = const false;
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_767);
        StorageLive(_778);
        StorageLive(_779);
        _779 = &_764;
        StorageLive(_780);
        _780 = &_766;
        _778 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _779, move _780) -> [return: bb376, unwind: bb443];
    }

    bb476 (cleanup): {
        _977 = discriminant(_770);
        goto -> bb443;
    }

    bb477 (cleanup): {
        _978 = discriminant(_732);
        goto -> bb443;
    }

    bb478 (cleanup): {
        _979 = discriminant(_695);
        goto -> bb441;
    }

    bb479 (cleanup): {
        drop(_668) -> [return: bb444, unwind terminate(cleanup)];
    }

    bb480 (cleanup): {
        switchInt(_834) -> [0: bb444, otherwise: bb479];
    }

    bb481 (cleanup): {
        drop(_647) -> [return: bb444, unwind terminate(cleanup)];
    }

    bb482 (cleanup): {
        switchInt(_835) -> [0: bb444, otherwise: bb481];
    }

    bb483 (cleanup): {
        drop(_624) -> [return: bb444, unwind terminate(cleanup)];
    }

    bb484 (cleanup): {
        switchInt(_836) -> [0: bb444, otherwise: bb483];
    }

    bb485 (cleanup): {
        _980 = discriminant(_601);
        goto -> bb471;
    }

    bb486 (cleanup): {
        _981 = discriminant(_591);
        goto -> bb488;
    }

    bb487 (cleanup): {
        drop(_578) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb488 (cleanup): {
        switchInt(_839) -> [0: bb471, otherwise: bb487];
    }

    bb489 (cleanup): {
        _982 = discriminant(_534);
        goto -> bb495;
    }

    bb490 (cleanup): {
        drop(_536) -> [return: bb495, unwind terminate(cleanup)];
    }

    bb491 (cleanup): {
        switchInt(_840) -> [0: bb495, otherwise: bb490];
    }

    bb492 (cleanup): {
        drop(_537) -> [return: bb495, unwind terminate(cleanup)];
    }

    bb493 (cleanup): {
        switchInt(_841) -> [0: bb495, otherwise: bb492];
    }

    bb494 (cleanup): {
        drop(_526) -> [return: bb506, unwind terminate(cleanup)];
    }

    bb495 (cleanup): {
        switchInt(_842) -> [0: bb506, otherwise: bb494];
    }

    bb496 (cleanup): {
        _983 = discriminant(_434);
        goto -> bb506;
    }

    bb497 (cleanup): {
        _984 = discriminant(_510);
        goto -> bb453;
    }

    bb498 (cleanup): {
        _985 = discriminant(_497);
        goto -> bb452;
    }

    bb499 (cleanup): {
        _986 = discriminant(_485);
        goto -> bb452;
    }

    bb500 (cleanup): {
        _987 = discriminant(_476);
        goto -> bb453;
    }

    bb501 (cleanup): {
        drop(_436) -> [return: bb506, unwind terminate(cleanup)];
    }

    bb502 (cleanup): {
        switchInt(_844) -> [0: bb506, otherwise: bb501];
    }

    bb503 (cleanup): {
        drop(_437) -> [return: bb506, unwind terminate(cleanup)];
    }

    bb504 (cleanup): {
        switchInt(_845) -> [0: bb506, otherwise: bb503];
    }

    bb505 (cleanup): {
        drop(_426) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb506 (cleanup): {
        switchInt(_846) -> [0: bb471, otherwise: bb505];
    }

    bb507 (cleanup): {
        _988 = discriminant(_417);
        goto -> bb509;
    }

    bb508 (cleanup): {
        drop(_407) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb509 (cleanup): {
        switchInt(_847) -> [0: bb471, otherwise: bb508];
    }

    bb510 (cleanup): {
        _989 = discriminant(_392);
        goto -> bb461;
    }

    bb511 (cleanup): {
        _990 = discriminant(_379);
        goto -> bb460;
    }

    bb512 (cleanup): {
        _991 = discriminant(_367);
        goto -> bb460;
    }

    bb513 (cleanup): {
        _992 = discriminant(_358);
        goto -> bb461;
    }

    bb514 (cleanup): {
        drop(_327) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb515 (cleanup): {
        switchInt(_849) -> [0: bb471, otherwise: bb514];
    }

    bb516 (cleanup): {
        _993 = discriminant(_270);
        goto -> bb522;
    }

    bb517 (cleanup): {
        drop(_272) -> [return: bb522, unwind terminate(cleanup)];
    }

    bb518 (cleanup): {
        switchInt(_850) -> [0: bb522, otherwise: bb517];
    }

    bb519 (cleanup): {
        drop(_273) -> [return: bb522, unwind terminate(cleanup)];
    }

    bb520 (cleanup): {
        switchInt(_851) -> [0: bb522, otherwise: bb519];
    }

    bb521 (cleanup): {
        drop(_260) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb522 (cleanup): {
        switchInt(_852) -> [0: bb471, otherwise: bb521];
    }

    bb523 (cleanup): {
        _994 = discriminant(_246);
        goto -> bb470;
    }

    bb524 (cleanup): {
        _995 = discriminant(_233);
        goto -> bb469;
    }

    bb525 (cleanup): {
        _996 = discriminant(_221);
        goto -> bb469;
    }

    bb526 (cleanup): {
        _997 = discriminant(_212);
        goto -> bb470;
    }

    bb527 (cleanup): {
        drop(_179) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb528 (cleanup): {
        switchInt(_854) -> [0: bb471, otherwise: bb527];
    }

    bb529 (cleanup): {
        _998 = discriminant(_142);
        goto -> bb471;
    }

    bb530 (cleanup): {
        _999 = discriminant(_127);
        goto -> bb471;
    }

    bb531 (cleanup): {
        _1000 = discriminant(_112);
        goto -> bb471;
    }

    bb532 (cleanup): {
        _1001 = discriminant(_97);
        goto -> bb471;
    }

    bb533 (cleanup): {
        _1002 = discriminant(_67);
        goto -> bb471;
    }

    bb534 (cleanup): {
        _1003 = discriminant(_52);
        goto -> bb472;
    }

    bb535 (cleanup): {
        _1004 = discriminant(_37);
        goto -> bb473;
    }

    bb536 (cleanup): {
        _1005 = discriminant(_22);
        goto -> bb473;
    }

    bb537 (cleanup): {
        _1006 = discriminant(_7);
        goto -> bb473;
    }
}
