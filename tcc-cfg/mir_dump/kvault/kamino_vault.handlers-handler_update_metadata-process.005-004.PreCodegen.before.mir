// MIR for `handlers::handler_update_metadata::process` before PreCodegen

fn handlers::handler_update_metadata::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_metadata::UpdateSharesMetadata<'_>>, _2: String, _3: String, _4: String) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug name => _2;
    debug symbol => _3;
    debug uri => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: &std::cell::Ref<'_, state::VaultState>;
    let _6: std::cell::Ref<'_, state::VaultState>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _8: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: std::cell::Ref<'_, state::VaultState>;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &std::string::String;
    let _20: std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 3];
    let _25: &[&str; 3];
    let _26: [&str; 3];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let mut _28: &[core::fmt::rt::Argument<'_>; 3];
    let _29: &[core::fmt::rt::Argument<'_>; 3];
    let _30: [core::fmt::rt::Argument<'_>; 3];
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: &std::string::String;
    let _39: &std::string::String;
    let _40: ();
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _42: std::result::Result<(), anchor_lang::error::Error>;
    let mut _43: anchor_lang::prelude::AccountInfo<'_>;
    let mut _44: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _45: anchor_lang::prelude::AccountInfo<'_>;
    let mut _46: &anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>;
    let mut _47: anchor_lang::prelude::AccountInfo<'_>;
    let mut _48: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _49: anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: &anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
    let mut _51: u64;
    let mut _52: &state::VaultState;
    let mut _53: &std::cell::Ref<'_, state::VaultState>;
    let mut _54: utils::metadata::TokenMetadata;
    let mut _55: std::string::String;
    let mut _56: std::string::String;
    let mut _57: std::string::String;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _63: ();
    let mut _65: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _66: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _67: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _68: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _69: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    scope 1 {
        debug vault => _5;
        let _21: std::string::String;
        let _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _62: ();
        let mut _64: &[&str; 3];
        scope 6 {
            debug res => _21;
        }
        scope 7 {
            debug residual => _59;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _62;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const true;
        _71 = const true;
        _70 = const true;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _65 = deref_copy (_1.1: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>);
        _9 = &((*_65).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _9) -> [return: bb1, unwind: bb49];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb49];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = move ((_7 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _6 = move _14;
        StorageDead(_14);
        _5 = &_6;
        _77 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _64 = const _;
        _25 = &(*_64);
        _24 = &(*_25);
        _23 = move _24 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_2;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<String>(move _32) -> [return: bb7, unwind: bb31];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb47];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _83 = discriminant(_7);
        StorageDead(_7);
        goto -> bb26;
    }

    bb7: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_3;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_display::<String>(move _35) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_4;
        _38 = &(*_39);
        _37 = core::fmt::rt::Argument::<'_>::new_display::<String>(move _38) -> [return: bb9, unwind: bb31];
    }

    bb9: {
        StorageDead(_38);
        _30 = [move _31, move _34, move _37];
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = move _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_28);
        _22 = Arguments::<'_>::new_v1(move _23, move _27) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_23);
        _21 = format(move _22) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        _20 = move _21;
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = <String as Deref>::deref(move _18) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        StorageDead(_16);
        drop(_20) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _66 = deref_copy (_1.1: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>);
        _44 = &((*_66).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _43 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _44) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _76 = const true;
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _67 = deref_copy (_1.1: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>);
        _46 = &((*_67).4: anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>);
        _45 = <anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _46) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        _75 = const true;
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _68 = deref_copy (_1.1: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>);
        _48 = &((*_68).2: anchor_lang::prelude::AccountInfo<'_>);
        _47 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _48) -> [return: bb17, unwind: bb44];
    }

    bb17: {
        _74 = const true;
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _69 = deref_copy (_1.1: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>);
        _50 = &((*_69).3: anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>);
        _49 = <anchor_lang::prelude::Account<'_, MetadataAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _50) -> [return: bb18, unwind: bb42];
    }

    bb18: {
        _73 = const true;
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_5);
        _52 = <Ref<'_, state::VaultState> as Deref>::deref(move _53) -> [return: bb19, unwind: bb40];
    }

    bb19: {
        StorageDead(_53);
        _51 = ((*_52).2: u64);
        StorageLive(_54);
        StorageLive(_55);
        _72 = const false;
        _55 = move _2;
        StorageLive(_56);
        _71 = const false;
        _56 = move _3;
        StorageLive(_57);
        _70 = const false;
        _57 = move _4;
        _54 = utils::metadata::TokenMetadata { name: move _55, symbol: move _56, uri: move _57 };
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _42 = utils::metadata::update(move _43, move _45, move _47, move _49, move _51, move _54) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        StorageDead(_54);
        StorageDead(_51);
        _73 = const false;
        StorageDead(_49);
        _74 = const false;
        StorageDead(_47);
        _75 = const false;
        StorageDead(_45);
        _76 = const false;
        StorageDead(_43);
        _41 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _42) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        StorageDead(_42);
        _58 = discriminant(_41);
        switchInt(move _58) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_62);
        _62 = ((_41 as Continue).0: ());
        _40 = _62;
        StorageDead(_62);
        _79 = discriminant(_41);
        StorageDead(_52);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_63);
        _63 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _63);
        StorageDead(_63);
        drop(_6) -> [return: bb25, unwind: bb49];
    }

    bb23: {
        StorageLive(_59);
        _59 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _61) -> [return: bb24, unwind: bb38];
    }

    bb24: {
        StorageDead(_61);
        StorageDead(_59);
        _81 = discriminant(_41);
        StorageDead(_52);
        StorageDead(_41);
        StorageDead(_40);
        drop(_6) -> [return: bb26, unwind: bb49];
    }

    bb25: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb29;
    }

    bb26: {
        StorageDead(_6);
        StorageDead(_5);
        switchInt(_70) -> [0: bb27, otherwise: bb35];
    }

    bb27: {
        switchInt(_71) -> [0: bb28, otherwise: bb36];
    }

    bb28: {
        switchInt(_72) -> [0: bb29, otherwise: bb37];
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_20) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_6) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_71) -> [0: bb33, otherwise: bb50];
    }

    bb33 (cleanup): {
        switchInt(_72) -> [0: bb34, otherwise: bb51];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35: {
        drop(_4) -> [return: bb27, unwind: bb32];
    }

    bb36: {
        drop(_3) -> [return: bb28, unwind: bb33];
    }

    bb37: {
        drop(_2) -> [return: bb29, unwind: bb34];
    }

    bb38 (cleanup): {
        _85 = discriminant(_41);
        goto -> bb31;
    }

    bb39 (cleanup): {
        drop(_49) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_73) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_47) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_74) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_45) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_75) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_43) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_76) -> [0: bb31, otherwise: bb45];
    }

    bb47 (cleanup): {
        _86 = discriminant(_7);
        goto -> bb49;
    }

    bb48 (cleanup): {
        drop(_4) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_70) -> [0: bb32, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_2) -> [return: bb34, unwind terminate(cleanup)];
    }
}
