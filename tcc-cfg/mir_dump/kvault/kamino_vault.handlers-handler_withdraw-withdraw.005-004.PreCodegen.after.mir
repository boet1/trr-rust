// MIR for `handlers::handler_withdraw::withdraw` after PreCodegen

fn handlers::handler_withdraw::withdraw(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_withdraw::Withdraw<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug shares_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let _5: ();
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: anchor_lang::prelude::Pubkey;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _13: !;
    let mut _14: anchor_lang::error::Error;
    let mut _15: anchor_lang::error::Error;
    let mut _16: anchor_lang::error::AnchorError;
    let mut _17: std::string::String;
    let mut _18: &anchor_lang::error::ErrorCode;
    let _19: anchor_lang::error::ErrorCode;
    let mut _20: u32;
    let mut _21: anchor_lang::error::ErrorCode;
    let mut _22: std::string::String;
    let mut _23: &anchor_lang::error::ErrorCode;
    let _24: anchor_lang::error::ErrorCode;
    let mut _25: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _26: anchor_lang::error::ErrorOrigin;
    let mut _27: anchor_lang::error::Source;
    let mut _28: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _29: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _36: (events::SharesToWithdrawEvent, events::WithdrawResultEvent);
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (events::SharesToWithdrawEvent, events::WithdrawResultEvent)>;
    let mut _38: std::result::Result<(events::SharesToWithdrawEvent, events::WithdrawResultEvent), anchor_lang::error::Error>;
    let mut _39: &handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _40: std::option::Option<&handlers::handler_withdraw::WithdrawFromInvested<'_>>;
    let mut _41: &handlers::handler_withdraw::WithdrawFromInvested<'_>;
    let mut _42: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _43: u64;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _49: ();
    let mut _51: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _55: &events::SharesToWithdrawEvent;
    let _56: &events::SharesToWithdrawEvent;
    let mut _58: std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>>;
    let mut _59: std::array::IntoIter<u8, 8>;
    let mut _60: [u8; 8];
    let mut _61: std::vec::IntoIter<u8>;
    let mut _62: std::vec::Vec<u8>;
    let mut _64: anchor_lang::prelude::Pubkey;
    let mut _65: &anchor_lang::prelude::Pubkey;
    let mut _66: &[u8];
    let _67: &[u8];
    let mut _68: &std::vec::Vec<u8>;
    let _69: &std::vec::Vec<u8>;
    let mut _70: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _71: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _72: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _73: usize;
    let mut _74: usize;
    let mut _75: *mut u8;
    let mut _76: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _77: anchor_lang::prelude::AccountMeta;
    let mut _78: anchor_lang::prelude::Pubkey;
    let _79: ();
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _81: std::result::Result<(), anchor_lang::error::Error>;
    let mut _82: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _83: &solana_program::instruction::Instruction;
    let _84: &solana_program::instruction::Instruction;
    let mut _85: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _87: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _88: [anchor_lang::prelude::AccountInfo<'_>; 1];
    let mut _89: anchor_lang::prelude::AccountInfo<'_>;
    let mut _90: &[&[&[u8]]];
    let mut _91: &[&[&[u8]]; 1];
    let _92: &[&[&[u8]]; 1];
    let _93: [&[&[u8]]; 1];
    let mut _94: &[&[u8]];
    let mut _95: &[&[u8]; 2];
    let _96: &[&[u8]; 2];
    let _97: [&[u8]; 2];
    let mut _98: &[u8];
    let mut _99: &[u8; 17];
    let _100: &[u8; 17];
    let mut _101: &[u8];
    let mut _102: &[u8; 1];
    let _103: &[u8; 1];
    let _104: [u8; 1];
    let mut _105: u8;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _111: ();
    let mut _113: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _117: &events::WithdrawResultEvent;
    let _118: &events::WithdrawResultEvent;
    let mut _120: std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>>;
    let mut _121: std::array::IntoIter<u8, 8>;
    let mut _122: [u8; 8];
    let mut _123: std::vec::IntoIter<u8>;
    let mut _124: std::vec::Vec<u8>;
    let mut _126: anchor_lang::prelude::Pubkey;
    let mut _127: &anchor_lang::prelude::Pubkey;
    let mut _128: &[u8];
    let _129: &[u8];
    let mut _130: &std::vec::Vec<u8>;
    let _131: &std::vec::Vec<u8>;
    let mut _132: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _133: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _134: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _135: usize;
    let mut _136: usize;
    let mut _137: *mut u8;
    let mut _138: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _139: anchor_lang::prelude::AccountMeta;
    let mut _140: anchor_lang::prelude::Pubkey;
    let _141: ();
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _143: std::result::Result<(), anchor_lang::error::Error>;
    let mut _144: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _145: &solana_program::instruction::Instruction;
    let _146: &solana_program::instruction::Instruction;
    let mut _147: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _148: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _149: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _150: [anchor_lang::prelude::AccountInfo<'_>; 1];
    let mut _151: anchor_lang::prelude::AccountInfo<'_>;
    let mut _152: &[&[&[u8]]];
    let mut _153: &[&[&[u8]]; 1];
    let _154: &[&[&[u8]]; 1];
    let _155: [&[&[u8]]; 1];
    let mut _156: &[&[u8]];
    let mut _157: &[&[u8]; 2];
    let _158: &[&[u8]; 2];
    let _159: [&[u8]; 2];
    let mut _160: &[u8];
    let mut _161: &[u8; 17];
    let _162: &[u8; 17];
    let mut _163: &[u8];
    let mut _164: &[u8; 1];
    let _165: &[u8; 1];
    let _166: [u8; 1];
    let mut _167: u8;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _173: ();
    let mut _176: &mut handlers::handler_withdraw::Withdraw<'_>;
    let mut _177: &mut handlers::handler_withdraw::Withdraw<'_>;
    let mut _178: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _179: &mut handlers::handler_withdraw::Withdraw<'_>;
    let mut _180: &anchor_lang::prelude::Pubkey;
    let mut _181: &mut handlers::handler_withdraw::Withdraw<'_>;
    let mut _182: &anchor_lang::prelude::Pubkey;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: *const [anchor_lang::prelude::AccountMeta; 1];
    let mut _206: *const [anchor_lang::prelude::AccountMeta; 1];
    scope 1 {
        debug withdraw_from_available => _3;
        let _4: &handlers::handler_withdraw::WithdrawFromInvested<'_>;
        scope 2 {
            debug withdraw_from_reserve => _4;
            let _34: events::SharesToWithdrawEvent;
            let _35: events::WithdrawResultEvent;
            let _45: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _48: (events::SharesToWithdrawEvent, events::WithdrawResultEvent);
            let mut _174: &anchor_lang::error::ErrorCode;
            let mut _175: &anchor_lang::error::ErrorCode;
            scope 3 {
                debug shares_to_withdraw_event => _34;
                debug withdraw_result_event => _35;
                let _50: anchor_lang::prelude::AccountInfo<'_>;
                let _112: anchor_lang::prelude::AccountInfo<'_>;
                scope 8 {
                    debug authority_info => _50;
                    let _52: u8;
                    scope 9 {
                        debug authority_bump => _52;
                        let _53: [u8; 8];
                        scope 10 {
                            debug disc => _53;
                            let _54: std::vec::Vec<u8>;
                            scope 11 {
                                debug inner_data => _54;
                                let _57: std::vec::Vec<u8>;
                                scope 12 {
                                    debug ix_data => _57;
                                    let _63: solana_program::instruction::Instruction;
                                    let mut _213: *const ();
                                    let mut _214: usize;
                                    let mut _215: usize;
                                    let mut _216: usize;
                                    let mut _217: usize;
                                    let mut _218: bool;
                                    scope 13 {
                                        debug ix => _63;
                                        let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _110: ();
                                        scope 15 {
                                            debug residual => _107;
                                            scope 16 {
                                            }
                                        }
                                        scope 17 {
                                            debug val => _110;
                                            scope 18 {
                                            }
                                        }
                                    }
                                    scope 14 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 19 {
                    debug authority_info => _112;
                    let _114: u8;
                    scope 20 {
                        debug authority_bump => _114;
                        let _115: [u8; 8];
                        scope 21 {
                            debug disc => _115;
                            let _116: std::vec::Vec<u8>;
                            scope 22 {
                                debug inner_data => _116;
                                let _119: std::vec::Vec<u8>;
                                scope 23 {
                                    debug ix_data => _119;
                                    let _125: solana_program::instruction::Instruction;
                                    let mut _207: *const ();
                                    let mut _208: usize;
                                    let mut _209: usize;
                                    let mut _210: usize;
                                    let mut _211: usize;
                                    let mut _212: bool;
                                    scope 24 {
                                        debug ix => _125;
                                        let _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _172: ();
                                        scope 26 {
                                            debug residual => _169;
                                            scope 27 {
                                            }
                                        }
                                        scope 28 {
                                            debug val => _172;
                                            scope 29 {
                                            }
                                        }
                                    }
                                    scope 25 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 4 {
                debug residual => _45;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _48;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _189 = const false;
        _188 = const false;
        _187 = const false;
        _186 = const false;
        _185 = const false;
        _184 = const false;
        _183 = const false;
        StorageLive(_3);
        _176 = deref_copy (_1.1: &mut handlers::handler_withdraw::Withdraw<'_>);
        _3 = &((*_176).0: handlers::handler_withdraw::WithdrawFromAvailable<'_>);
        StorageLive(_4);
        _177 = deref_copy (_1.1: &mut handlers::handler_withdraw::Withdraw<'_>);
        _4 = &((*_177).1: handlers::handler_withdraw::WithdrawFromInvested<'_>);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_3).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _8 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_4).0: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _11 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_11;
        StorageDead(_12);
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _7, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb12, otherwise: bb4];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _175 = const _;
        _18 = &(*_175);
        _17 = anchor_lang::error::ErrorCode::name(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        _21 = RequireKeysEqViolated;
        _20 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _21) -> [return: bb6, unwind: bb76];
    }

    bb6: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _174 = const _;
        _23 = &(*_174);
        _22 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _23) -> [return: bb7, unwind: bb76];
    }

    bb7: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_withdraw.rs", line: const 32_u32 };
        _26 = anchor_lang::error::ErrorOrigin::Source(move _27);
        StorageDead(_27);
        _25 = Option::<ErrorOrigin>::Some(move _26);
        StorageDead(_26);
        StorageLive(_28);
        _28 = Option::<ComparedValues>::None;
        _16 = anchor_lang::error::AnchorError { error_name: move _17, error_code_number: move _20, error_msg: move _22, error_origin: move _25, compared_values: move _28 };
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_17);
        _15 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _16) -> [return: bb8, unwind: bb77];
    }

    bb8: {
        _189 = const true;
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_3).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _30 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _31) -> [return: bb9, unwind: bb94];
    }

    bb9: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_4).0: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _32 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _33) -> [return: bb10, unwind: bb94];
    }

    bb10: {
        StorageDead(_33);
        _29 = (move _30, move _32);
        StorageDead(_32);
        StorageDead(_30);
        _189 = const false;
        _14 = anchor_lang::error::Error::with_pubkeys(move _15, move _29) -> [return: bb11, unwind: bb94];
    }

    bb11: {
        StorageDead(_29);
        _189 = const false;
        StorageDead(_15);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _14);
        StorageDead(_14);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb66;
    }

    bb12: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_3);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_4);
        _40 = Option::<&handlers::handler_withdraw::WithdrawFromInvested<'_>>::Some(move _41);
        StorageDead(_41);
        StorageLive(_42);
        _178 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _42 = &(*_178);
        StorageLive(_43);
        _43 = _2;
        _38 = withdraw_utils::withdraw(move _39, move _40, move _42, move _43) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        _37 = <std::result::Result<(SharesToWithdrawEvent, WithdrawResultEvent), anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb14, unwind: bb77];
    }

    bb14: {
        StorageDead(_38);
        _44 = discriminant(_37);
        switchInt(move _44) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_48);
        _48 = move ((_37 as Continue).0: (events::SharesToWithdrawEvent, events::WithdrawResultEvent));
        _36 = move _48;
        StorageDead(_48);
        StorageLive(_34);
        _34 = move (_36.0: events::SharesToWithdrawEvent);
        StorageLive(_35);
        _35 = move (_36.1: events::WithdrawResultEvent);
        _190 = discriminant(_37);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _179 = deref_copy (_1.1: &mut handlers::handler_withdraw::Withdraw<'_>);
        _51 = &((*_179).2: anchor_lang::prelude::AccountInfo<'_>);
        _188 = const true;
        _50 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _51) -> [return: bb19, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_45);
        _45 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_47);
        _47 = move _45;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _47) -> [return: bb18, unwind: bb92];
    }

    bb18: {
        StorageDead(_47);
        StorageDead(_45);
        _200 = discriminant(_37);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb66;
    }

    bb19: {
        StorageDead(_51);
        StorageLive(_52);
        _52 = ((_1.3: handlers::handler_withdraw::WithdrawBumps).2: u8);
        StorageLive(_53);
        _53 = const _;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_34;
        _55 = &(*_56);
        _54 = <SharesToWithdrawEvent as anchor_lang::Event>::data(move _55) -> [return: bb20, unwind: bb91];
    }

    bb20: {
        _187 = const true;
        StorageDead(_55);
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _53;
        _59 = <[u8; 8] as IntoIterator>::into_iter(move _60) -> [return: bb21, unwind: bb89];
    }

    bb21: {
        _186 = const true;
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        _187 = const false;
        _62 = move _54;
        _61 = <Vec<u8> as IntoIterator>::into_iter(move _62) -> [return: bb22, unwind: bb87];
    }

    bb22: {
        StorageDead(_62);
        _186 = const false;
        _58 = <std::array::IntoIter<u8, 8> as Iterator>::chain::<std::vec::IntoIter<u8>>(move _59, move _61) -> [return: bb23, unwind: bb87];
    }

    bb23: {
        StorageDead(_61);
        _186 = const false;
        StorageDead(_59);
        _57 = <std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>> as Iterator>::collect::<Vec<u8>>(move _58) -> [return: bb24, unwind: bb89];
    }

    bb24: {
        StorageDead(_58);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = const {alloc73: &anchor_lang::prelude::Pubkey};
        _64 = (*_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_57;
        _68 = &(*_69);
        _67 = <Vec<u8> as Deref>::deref(move _68) -> [return: bb25, unwind: bb75];
    }

    bb25: {
        _66 = &(*_67);
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _73 = SizeOf([anchor_lang::prelude::AccountMeta; 1]);
        _74 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _75 = alloc::alloc::exchange_malloc(move _73, move _74) -> [return: bb26, unwind: bb75];
    }

    bb26: {
        StorageLive(_76);
        _76 = ShallowInitBox(move _75, [anchor_lang::prelude::AccountMeta; 1]);
        StorageLive(_77);
        StorageLive(_78);
        _180 = deref_copy (_50.0: &anchor_lang::prelude::Pubkey);
        _78 = (*_180);
        _77 = AccountMeta::new_readonly(move _78, const true) -> [return: bb27, unwind: bb74];
    }

    bb27: {
        StorageDead(_78);
        _205 = (((_76.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 1]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 1]>).0: *const [anchor_lang::prelude::AccountMeta; 1]);
        _213 = _205 as *const () (PtrToPtr);
        _214 = _213 as usize (Transmute);
        _215 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _216 = Sub(_215, const 1_usize);
        _217 = BitAnd(_214, _216);
        _218 = Eq(_217, const 0_usize);
        assert(_218, "misaligned pointer dereference: address must be a multiple of {} but is {}", _215, _214) -> [success: bb96, unwind unreachable];
    }

    bb28: {
        StorageDead(_71);
        _63 = Instruction::new_with_bytes(move _64, move _66, move _70) -> [return: bb29, unwind: bb75];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_63;
        _83 = &(*_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _188 = const false;
        _89 = move _50;
        _88 = [move _89];
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = const b"__event_authority";
        _99 = &(*_100);
        _98 = move _99 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _52;
        _104 = [move _105];
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = move _102 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_102);
        _97 = [move _98, move _101];
        StorageDead(_101);
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = move _95 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_95);
        _93 = [move _94];
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_91);
        _82 = invoke_signed(move _83, move _85, move _90) -> [return: bb30, unwind: bb72];
    }

    bb30: {
        StorageDead(_90);
        StorageDead(_85);
        StorageDead(_83);
        _81 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from}>(move _82, <anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from) -> [return: bb31, unwind: bb72];
    }

    bb31: {
        StorageDead(_82);
        _80 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _81) -> [return: bb32, unwind: bb72];
    }

    bb32: {
        StorageDead(_81);
        _106 = discriminant(_80);
        switchInt(move _106) -> [0: bb33, 1: bb34, otherwise: bb16];
    }

    bb33: {
        StorageLive(_110);
        _110 = ((_80 as Continue).0: ());
        _79 = _110;
        StorageDead(_110);
        _192 = discriminant(_80);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        drop(_88) -> [return: bb36, unwind: bb73];
    }

    bb34: {
        StorageLive(_107);
        _107 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb35, unwind: bb85];
    }

    bb35: {
        StorageDead(_109);
        StorageDead(_107);
        _198 = discriminant(_80);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        drop(_88) -> [return: bb62, unwind: bb73];
    }

    bb36: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_79);
        _49 = const ();
        drop(_63) -> [return: bb37, unwind: bb75];
    }

    bb37: {
        StorageDead(_63);
        drop(_57) -> [return: bb38, unwind: bb89];
    }

    bb38: {
        StorageDead(_57);
        _187 = const false;
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        _188 = const false;
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _181 = deref_copy (_1.1: &mut handlers::handler_withdraw::Withdraw<'_>);
        _113 = &((*_181).2: anchor_lang::prelude::AccountInfo<'_>);
        _185 = const true;
        _112 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _113) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_113);
        StorageLive(_114);
        _114 = ((_1.3: handlers::handler_withdraw::WithdrawBumps).2: u8);
        StorageLive(_115);
        _115 = const _;
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_35;
        _117 = &(*_118);
        _116 = <WithdrawResultEvent as anchor_lang::Event>::data(move _117) -> [return: bb40, unwind: bb84];
    }

    bb40: {
        _184 = const true;
        StorageDead(_117);
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = _115;
        _121 = <[u8; 8] as IntoIterator>::into_iter(move _122) -> [return: bb41, unwind: bb82];
    }

    bb41: {
        _183 = const true;
        StorageDead(_122);
        StorageLive(_123);
        StorageLive(_124);
        _184 = const false;
        _124 = move _116;
        _123 = <Vec<u8> as IntoIterator>::into_iter(move _124) -> [return: bb42, unwind: bb80];
    }

    bb42: {
        StorageDead(_124);
        _183 = const false;
        _120 = <std::array::IntoIter<u8, 8> as Iterator>::chain::<std::vec::IntoIter<u8>>(move _121, move _123) -> [return: bb43, unwind: bb80];
    }

    bb43: {
        StorageDead(_123);
        _183 = const false;
        StorageDead(_121);
        _119 = <std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>> as Iterator>::collect::<Vec<u8>>(move _120) -> [return: bb44, unwind: bb82];
    }

    bb44: {
        StorageDead(_120);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = const {alloc73: &anchor_lang::prelude::Pubkey};
        _126 = (*_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_119;
        _130 = &(*_131);
        _129 = <Vec<u8> as Deref>::deref(move _130) -> [return: bb45, unwind: bb71];
    }

    bb45: {
        _128 = &(*_129);
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _135 = SizeOf([anchor_lang::prelude::AccountMeta; 1]);
        _136 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _137 = alloc::alloc::exchange_malloc(move _135, move _136) -> [return: bb46, unwind: bb71];
    }

    bb46: {
        StorageLive(_138);
        _138 = ShallowInitBox(move _137, [anchor_lang::prelude::AccountMeta; 1]);
        StorageLive(_139);
        StorageLive(_140);
        _182 = deref_copy (_112.0: &anchor_lang::prelude::Pubkey);
        _140 = (*_182);
        _139 = AccountMeta::new_readonly(move _140, const true) -> [return: bb47, unwind: bb70];
    }

    bb47: {
        StorageDead(_140);
        _206 = (((_138.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 1]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 1]>).0: *const [anchor_lang::prelude::AccountMeta; 1]);
        _207 = _206 as *const () (PtrToPtr);
        _208 = _207 as usize (Transmute);
        _209 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _210 = Sub(_209, const 1_usize);
        _211 = BitAnd(_208, _210);
        _212 = Eq(_211, const 0_usize);
        assert(_212, "misaligned pointer dereference: address must be a multiple of {} but is {}", _209, _208) -> [success: bb95, unwind unreachable];
    }

    bb48: {
        StorageDead(_133);
        _125 = Instruction::new_with_bytes(move _126, move _128, move _132) -> [return: bb49, unwind: bb71];
    }

    bb49: {
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_125;
        _145 = &(*_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _185 = const false;
        _151 = move _112;
        _150 = [move _151];
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = move _148 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_148);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = const b"__event_authority";
        _161 = &(*_162);
        _160 = move _161 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_161);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = _114;
        _166 = [move _167];
        StorageDead(_167);
        _165 = &_166;
        _164 = &(*_165);
        _163 = move _164 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_164);
        _159 = [move _160, move _163];
        StorageDead(_163);
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = move _157 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_157);
        _155 = [move _156];
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_153);
        _144 = invoke_signed(move _145, move _147, move _152) -> [return: bb50, unwind: bb68];
    }

    bb50: {
        StorageDead(_152);
        StorageDead(_147);
        StorageDead(_145);
        _143 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from}>(move _144, <anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from) -> [return: bb51, unwind: bb68];
    }

    bb51: {
        StorageDead(_144);
        _142 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb52, unwind: bb68];
    }

    bb52: {
        StorageDead(_143);
        _168 = discriminant(_142);
        switchInt(move _168) -> [0: bb53, 1: bb54, otherwise: bb16];
    }

    bb53: {
        StorageLive(_172);
        _172 = ((_142 as Continue).0: ());
        _141 = _172;
        StorageDead(_172);
        _194 = discriminant(_142);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        drop(_150) -> [return: bb56, unwind: bb69];
    }

    bb54: {
        StorageLive(_169);
        _169 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_171);
        _171 = move _169;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _171) -> [return: bb55, unwind: bb78];
    }

    bb55: {
        StorageDead(_171);
        StorageDead(_169);
        _196 = discriminant(_142);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        drop(_150) -> [return: bb59, unwind: bb69];
    }

    bb56: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_142);
        StorageDead(_141);
        _111 = const ();
        drop(_125) -> [return: bb57, unwind: bb71];
    }

    bb57: {
        StorageDead(_125);
        drop(_119) -> [return: bb58, unwind: bb82];
    }

    bb58: {
        StorageDead(_119);
        _184 = const false;
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        _185 = const false;
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_173);
        _173 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _173);
        StorageDead(_173);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb67;
    }

    bb59: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_142);
        StorageDead(_141);
        drop(_125) -> [return: bb60, unwind: bb71];
    }

    bb60: {
        StorageDead(_125);
        drop(_119) -> [return: bb61, unwind: bb82];
    }

    bb61: {
        StorageDead(_119);
        _184 = const false;
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        _185 = const false;
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb65;
    }

    bb62: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_79);
        drop(_63) -> [return: bb63, unwind: bb75];
    }

    bb63: {
        StorageDead(_63);
        drop(_57) -> [return: bb64, unwind: bb89];
    }

    bb64: {
        StorageDead(_57);
        _187 = const false;
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        _188 = const false;
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb67;
    }

    bb67: {
        return;
    }

    bb68 (cleanup): {
        drop(_150) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_125) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_138) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_119) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_88) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_63) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_76) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_57) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_17) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78 (cleanup): {
        _202 = discriminant(_142);
        goto -> bb68;
    }

    bb79 (cleanup): {
        drop(_121) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_183) -> [0: bb82, otherwise: bb79];
    }

    bb81 (cleanup): {
        drop(_116) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_184) -> [0: bb84, otherwise: bb81];
    }

    bb83 (cleanup): {
        drop(_112) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_185) -> [0: bb77, otherwise: bb83];
    }

    bb85 (cleanup): {
        _203 = discriminant(_80);
        goto -> bb72;
    }

    bb86 (cleanup): {
        drop(_59) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_186) -> [0: bb89, otherwise: bb86];
    }

    bb88 (cleanup): {
        drop(_54) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_187) -> [0: bb91, otherwise: bb88];
    }

    bb90 (cleanup): {
        drop(_50) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_188) -> [0: bb77, otherwise: bb90];
    }

    bb92 (cleanup): {
        _204 = discriminant(_37);
        goto -> bb77;
    }

    bb93 (cleanup): {
        drop(_15) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_189) -> [0: bb77, otherwise: bb93];
    }

    bb95: {
        (*_206) = [move _139];
        StorageDead(_139);
        _134 = move _138;
        _133 = move _134 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageDead(_134);
        _132 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _133) -> [return: bb48, unwind: bb71];
    }

    bb96: {
        (*_205) = [move _77];
        StorageDead(_77);
        _72 = move _76;
        _71 = move _72 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageDead(_72);
        _70 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _71) -> [return: bb28, unwind: bb75];
    }
}

alloc82 (size: 17, align: 1) {
    0x00 │ 5f 5f 65 76 65 6e 74 5f 61 75 74 68 6f 72 69 74 │ __event_authorit
    0x10 │ 79                                              │ y
}

alloc81 (size: 17, align: 1) {
    0x00 │ 5f 5f 65 76 65 6e 74 5f 61 75 74 68 6f 72 69 74 │ __event_authorit
    0x10 │ 79                                              │ y
}

alloc73 (static: ID, size: 32, align: 1) {
    0x00 │ 04 d9 0a f1 db 89 39 ec 35 ff 94 d9 64 0d 57 dc │ ......9.5...d.W.
    0x10 │ c3 27 94 bb 3e 1b b6 6f d3 ae 84 9a 84 dc db 94 │ .'..>..o........
}
