digraph Mir_0_494 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::VaultState::allocation_for_reserve(_1: &amp;ReErased state::VaultState, _2: &amp;ReErased anchor_lang::prelude::Pubkey) -&gt; std::result::Result&lt;&amp;ReErased state::VaultAllocation, anchor_lang::error::Error&gt;<br align="left"/>let _3: &amp;ReErased state::VaultAllocation;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, &amp;ReErased state::VaultAllocation&gt;;<br align="left"/>let mut _5: std::result::Result&lt;&amp;ReErased state::VaultAllocation, anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: std::option::Option&lt;&amp;ReErased state::VaultAllocation&gt;;<br align="left"/>let mut _7: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::VaultAllocation&gt;;<br align="left"/>let mut _8: std::slice::Iter&lt;ReErased, state::VaultAllocation&gt;;<br align="left"/>let mut _9: &amp;ReErased [state::VaultAllocation];<br align="left"/>let mut _10: &amp;ReErased [state::VaultAllocation; 25_usize];<br align="left"/>let mut _11: Closure(DefId(0:495 ~ kamino_vault[b3c4]::state::{impl#1}::allocation_for_reserve::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased state::VaultAllocation,)) -&gt; bool, [Region(BrAnon)]), (&amp;ReErased anchor_lang::prelude::Pubkey,)]);<br align="left"/>let mut _12: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _13: Closure(DefId(0:496 ~ kamino_vault[b3c4]::state::{impl#1}::allocation_for_reserve::{closure#1}), [i32, Binder(extern &quot;RustCall&quot; fn(()) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _18: &amp;ReErased state::VaultAllocation;<br align="left"/>let mut _19: &amp;ReErased state::VaultAllocation;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug reserve =&gt; _2;<br align="left"/>debug allocation =&gt; _3;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>>;
    bb0__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;((*_1).18: [state::VaultAllocation; 25])<br/>_9 = move _10 as &amp;[state::VaultAllocation] (PointerCoercion(Unsize))<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = core::slice::&lt;impl [VaultAllocation]&gt;::iter(move _9)</td></tr></table>>];
    bb1__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;mut _8<br/>StorageDead(_9)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;(*_2)<br/>_11 = {closure@programs\kvault\src\state.rs:210:19: 210:22} { reserve: move _12 }<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::Iter&lt;'_, VaultAllocation&gt; as Iterator&gt;::find::&lt;{closure@programs\kvault\src\state.rs:210:19: 210:22}&gt;(move _7, move _11)</td></tr></table>>];
    bb2__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_7)<br/>StorageLive(_13)<br/>_13 = {closure@programs\kvault\src\state.rs:211:25: 211:27}<br/></td></tr><tr><td align="left">_5 = Option::&lt;&amp;VaultAllocation&gt;::ok_or_else::&lt;anchor_lang::error::Error, {closure@programs\kvault\src\state.rs:211:25: 211:27}&gt;(move _6, move _13)</td></tr></table>>];
    bb3__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;&amp;VaultAllocation, anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb4__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_14 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb5__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_4 as Continue).0: &amp;state::VaultAllocation)<br/>_3 = _18<br/>StorageDead(_18)<br/>_20 = discriminant(_4)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageLive(_19)<br/>_19 = &amp;(*_3)<br/>_0 = std::result::Result::&lt;&amp;VaultAllocation, anchor_lang::error::Error&gt;::Ok(move _19)<br/>StorageDead(_19)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_17)<br/>_17 = move _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;&amp;VaultAllocation, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb8__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>_22 = discriminant(_4)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb11__0_494 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left" balign="left">_24 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_494 -> bb1__0_494 [label="return"];
    bb1__0_494 -> bb2__0_494 [label="return"];
    bb2__0_494 -> bb3__0_494 [label="return"];
    bb3__0_494 -> bb4__0_494 [label="return"];
    bb3__0_494 -> bb10__0_494 [label="unwind"];
    bb4__0_494 -> bb5__0_494 [label="0"];
    bb4__0_494 -> bb7__0_494 [label="1"];
    bb4__0_494 -> bb6__0_494 [label="otherwise"];
    bb5__0_494 -> bb9__0_494 [label=""];
    bb7__0_494 -> bb8__0_494 [label="return"];
    bb7__0_494 -> bb11__0_494 [label="unwind"];
    bb8__0_494 -> bb9__0_494 [label=""];
    bb11__0_494 -> bb10__0_494 [label=""];
}
