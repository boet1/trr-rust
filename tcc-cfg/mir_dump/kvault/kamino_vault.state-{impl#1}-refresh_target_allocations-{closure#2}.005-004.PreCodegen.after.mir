// MIR for `state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::refresh_target_allocations::{closure#2}` after PreCodegen

fn state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::refresh_target_allocations::{closure#2}(_1: &mut {closure@programs\kvault\src\state.rs:334:25: 334:69}, _2: &((&mut VaultAllocation, &InvestedReserve), &mut FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>)) -> bool {
    let mut _0: bool;
    let _3: &&mut state::VaultAllocation;
    let _4: &&mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _5: bool;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: anchor_lang::prelude::Pubkey;
    let mut _9: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: &u64;
    let mut _11: &mut state::VaultAllocation;
    let mut _12: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: &mut state::VaultAllocation;
    scope 1 {
        debug allocation => _3;
        debug token_target_allocation => _4;
    }

    bb0: {
        StorageLive(_3);
        _3 = &(((*_2).0: (&mut state::VaultAllocation, &operations::vault_operations::common::InvestedReserve)).0: &mut state::VaultAllocation);
        StorageLive(_4);
        _4 = &((*_2).1: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_5);
        StorageLive(_6);
        _11 = deref_copy (*_3);
        _6 = &((*_11).0: anchor_lang::prelude::Pubkey);
        StorageLive(_7);
        StorageLive(_8);
        _8 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _5 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_9);
        _12 = deref_copy (*_4);
        _9 = &(*_12);
        StorageLive(_10);
        _13 = deref_copy (*_3);
        _10 = &((*_13).3: u64);
        _0 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<u64>>::lt(move _9, move _10) -> [return: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        _0 = const false;
        goto -> bb6;
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
