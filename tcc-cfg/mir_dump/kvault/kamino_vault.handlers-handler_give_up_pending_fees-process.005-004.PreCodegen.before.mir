// MIR for `handlers::handler_give_up_pending_fees::process` before PreCodegen

fn handlers::handler_give_up_pending_fees::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_give_up_pending_fees::GiveUpPendingFees<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_amount_to_give_up => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _4: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _5: &handlers::handler_give_up_pending_fees::GiveUpPendingFees<'_>;
    let mut _6: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _8: std::cell::RefMut<'_, state::VaultState>;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::VaultState>>;
    let mut _10: std::result::Result<std::cell::RefMut<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _11: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _12: isize;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _19: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _26: &state::VaultState;
    let _27: &state::VaultState;
    let mut _28: &std::cell::RefMut<'_, state::VaultState>;
    let _29: ();
    let _30: ();
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _32: std::result::Result<(), anchor_lang::error::Error>;
    let mut _33: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _34: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _35: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _36: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _37: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _46: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _47: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: usize;
    let mut _50: {closure@programs\kvault\src\handlers\handler_give_up_pending_fees.rs:36:14: 36:28};
    let _51: ();
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _53: std::result::Result<(), anchor_lang::error::Error>;
    let mut _54: &mut state::VaultState;
    let mut _55: &mut state::VaultState;
    let mut _56: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _57: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_give_up_pending_fees.rs:36:14: 36:28}>;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _61: i64;
    let mut _62: u64;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _68: ();
    let mut _69: &mut handlers::handler_give_up_pending_fees::GiveUpPendingFees<'_>;
    let mut _70: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &mut handlers::handler_give_up_pending_fees::GiveUpPendingFees<'_>;
    let mut _72: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _73: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    scope 1 {
        debug cpi_mem => _3;
        let _7: &mut std::cell::RefMut<'_, state::VaultState>;
        let _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _16: std::cell::RefMut<'_, state::VaultState>;
        scope 2 {
            debug vault_state => _7;
            let _17: anchor_lang::prelude::Clock;
            let _21: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _24: anchor_lang::prelude::Clock;
            scope 7 {
                debug clock => _17;
                let _25: usize;
                scope 12 {
                    debug reserves_count => _25;
                    let _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _44: ();
                    let _45: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_give_up_pending_fees.rs:36:14: 36:28}>;
                    scope 13 {
                        debug residual => _41;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _44;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug reserves_iter => _45;
                        let _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _67: ();
                        scope 18 {
                            debug residual => _64;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _67;
                            scope 21 {
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _21;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _24;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _13;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _69 = deref_copy (_1.1: &mut handlers::handler_give_up_pending_fees::GiveUpPendingFees<'_>);
        _5 = &(*_69);
        _4 = <handlers::handler_give_up_pending_fees::GiveUpPendingFees<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        _70 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _6 = &(*_70);
        _3 = cpi_mem::CpiMemoryLender::<'_>::build_cpi_memory_lender(move _4, move _6) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _71 = deref_copy (_1.1: &mut handlers::handler_give_up_pending_fees::GiveUpPendingFees<'_>);
        _11 = &((*_71).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _10 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load_mut(move _11) -> [return: bb3, unwind: bb42];
    }

    bb3: {
        StorageDead(_11);
        _9 = <std::result::Result<RefMut<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _10) -> [return: bb4, unwind: bb42];
    }

    bb4: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_9 as Continue).0: std::cell::RefMut<'_, state::VaultState>);
        _8 = move _16;
        StorageDead(_16);
        _7 = &mut _8;
        _74 = discriminant(_9);
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb9, unwind: bb41];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_13);
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _15) -> [return: bb8, unwind: bb47];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_13);
        _88 = discriminant(_9);
        StorageDead(_9);
        goto -> bb38;
    }

    bb9: {
        _18 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _19) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        StorageDead(_19);
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_24);
        _24 = move ((_18 as Continue).0: anchor_lang::prelude::Clock);
        _17 = move _24;
        StorageDead(_24);
        _76 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_7);
        _27 = <RefMut<'_, state::VaultState> as Deref>::deref(move _28) -> [return: bb14, unwind: bb41];
    }

    bb12: {
        StorageLive(_21);
        _21 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _23) -> [return: bb13, unwind: bb46];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_21);
        _86 = discriminant(_18);
        StorageDead(_18);
        goto -> bb37;
    }

    bb14: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = state::VaultState::get_reserves_count(move _26) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        StorageDead(_26);
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _3;
        _33 = &mut (*_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _72 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _37 = &(*_72);
        _36 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _37) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        StorageDead(_37);
        StorageLive(_38);
        _38 = _25;
        _35 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _36, move _38) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_39);
        _39 = _25;
        _32 = cpi_refresh_reserves::<'_, '_, std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _33, move _35, move _39) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_33);
        _31 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _32) -> [return: bb19, unwind: bb41];
    }

    bb19: {
        StorageDead(_32);
        _40 = discriminant(_31);
        switchInt(move _40) -> [0: bb20, 1: bb21, otherwise: bb6];
    }

    bb20: {
        StorageLive(_44);
        _44 = ((_31 as Continue).0: ());
        _30 = _44;
        StorageDead(_44);
        _78 = discriminant(_31);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        _29 = const ();
        StorageDead(_29);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _73 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _48 = &(*_73);
        _47 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _48) -> [return: bb23, unwind: bb41];
    }

    bb21: {
        StorageLive(_41);
        _41 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _43) -> [return: bb22, unwind: bb45];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_41);
        _84 = discriminant(_31);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb36;
    }

    bb23: {
        StorageDead(_48);
        StorageLive(_49);
        _49 = _25;
        _46 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _47, move _49) -> [return: bb24, unwind: bb41];
    }

    bb24: {
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_50);
        _50 = {closure@programs\kvault\src\handlers\handler_give_up_pending_fees.rs:36:14: 36:28};
        _45 = <std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, {closure@programs\kvault\src\handlers\handler_give_up_pending_fees.rs:36:14: 36:28}>(move _46, move _50) -> [return: bb25, unwind: bb41];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut (*_7);
        _55 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _56) -> [return: bb26, unwind: bb41];
    }

    bb26: {
        _54 = &mut (*_55);
        StorageDead(_56);
        StorageLive(_57);
        _57 = move _45;
        StorageLive(_58);
        _58 = (_17.0: u64);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = (_17.4: i64);
        _60 = <u64 as std::convert::TryFrom<i64>>::try_from(move _61) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        StorageDead(_61);
        _59 = std::result::Result::<u64, TryFromIntError>::unwrap(move _60) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        StorageDead(_60);
        StorageLive(_62);
        _62 = _2;
        _53 = give_up_pending_fee::<'_, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_give_up_pending_fees.rs:36:14: 36:28}>>(move _54, move _57, move _58, move _59, move _62) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_54);
        _52 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb30, unwind: bb41];
    }

    bb30: {
        StorageDead(_53);
        _63 = discriminant(_52);
        switchInt(move _63) -> [0: bb31, 1: bb32, otherwise: bb6];
    }

    bb31: {
        StorageLive(_67);
        _67 = ((_52 as Continue).0: ());
        _51 = _67;
        StorageDead(_67);
        _80 = discriminant(_52);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_68);
        _68 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _68);
        StorageDead(_68);
        StorageDead(_45);
        StorageDead(_25);
        StorageDead(_17);
        drop(_8) -> [return: bb34, unwind: bb42];
    }

    bb32: {
        StorageLive(_64);
        _64 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_66);
        _66 = move _64;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _66) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        StorageDead(_66);
        StorageDead(_64);
        _82 = discriminant(_52);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_45);
        goto -> bb36;
    }

    bb34: {
        StorageDead(_8);
        StorageDead(_7);
        drop(_3) -> [return: bb35, unwind: bb43];
    }

    bb35: {
        StorageDead(_3);
        goto -> bb40;
    }

    bb36: {
        StorageDead(_25);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_17);
        drop(_8) -> [return: bb38, unwind: bb42];
    }

    bb38: {
        StorageDead(_8);
        StorageDead(_7);
        drop(_3) -> [return: bb39, unwind: bb43];
    }

    bb39: {
        StorageDead(_3);
        goto -> bb40;
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_8) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_3) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        _90 = discriminant(_52);
        goto -> bb41;
    }

    bb45 (cleanup): {
        _91 = discriminant(_31);
        goto -> bb41;
    }

    bb46 (cleanup): {
        _92 = discriminant(_18);
        goto -> bb41;
    }

    bb47 (cleanup): {
        _93 = discriminant(_9);
        goto -> bb42;
    }
}
