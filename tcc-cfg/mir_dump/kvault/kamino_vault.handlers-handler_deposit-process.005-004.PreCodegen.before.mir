// MIR for `handlers::handler_deposit::process` before PreCodegen

fn handlers::handler_deposit::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_deposit::Deposit<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: !;
    let mut _7: anchor_lang::error::Error;
    let mut _8: anchor_lang::error::AnchorError;
    let mut _9: std::string::String;
    let mut _10: &KaminoVaultError;
    let _11: KaminoVaultError;
    let mut _12: u32;
    let mut _13: KaminoVaultError;
    let mut _14: std::string::String;
    let mut _15: &KaminoVaultError;
    let _16: KaminoVaultError;
    let mut _17: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _18: anchor_lang::error::ErrorOrigin;
    let mut _19: anchor_lang::error::Source;
    let mut _20: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _21: utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _22: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _23: &handlers::handler_deposit::Deposit<'_>;
    let mut _24: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: std::cell::RefMut<'_, state::VaultState>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::VaultState>>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _29: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: &state::VaultState;
    let _37: &state::VaultState;
    let mut _38: &std::cell::RefMut<'_, state::VaultState>;
    let _39: ();
    let _40: ();
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _42: std::result::Result<(), anchor_lang::error::Error>;
    let mut _43: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _44: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _45: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _46: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: usize;
    let mut _49: usize;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _56: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _57: &anchor_spl::token_interface::TokenAccount;
    let _58: &anchor_spl::token_interface::TokenAccount;
    let mut _59: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _61: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _62: &anchor_spl::token_interface::TokenAccount;
    let _63: &anchor_spl::token_interface::TokenAccount;
    let mut _64: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _66: &state::VaultState;
    let mut _67: &std::cell::RefMut<'_, state::VaultState>;
    let _68: ();
    let mut _70: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _74: &events::DepositUserAtaBalanceEvent;
    let _75: &events::DepositUserAtaBalanceEvent;
    let _76: events::DepositUserAtaBalanceEvent;
    let mut _77: u64;
    let mut _79: std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>>;
    let mut _80: std::array::IntoIter<u8, 8>;
    let mut _81: [u8; 8];
    let mut _82: std::vec::IntoIter<u8>;
    let mut _83: std::vec::Vec<u8>;
    let mut _85: anchor_lang::prelude::Pubkey;
    let mut _86: &anchor_lang::prelude::Pubkey;
    let mut _87: &[u8];
    let _88: &[u8];
    let mut _89: &std::vec::Vec<u8>;
    let _90: &std::vec::Vec<u8>;
    let mut _91: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _92: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _93: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _94: usize;
    let mut _95: usize;
    let mut _96: *mut u8;
    let mut _97: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _98: anchor_lang::prelude::AccountMeta;
    let mut _99: anchor_lang::prelude::Pubkey;
    let _100: ();
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _102: std::result::Result<(), anchor_lang::error::Error>;
    let mut _103: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _104: &solana_program::instruction::Instruction;
    let _105: &solana_program::instruction::Instruction;
    let mut _106: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _107: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _108: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _109: [anchor_lang::prelude::AccountInfo<'_>; 1];
    let mut _110: anchor_lang::prelude::AccountInfo<'_>;
    let mut _111: &[&[&[u8]]];
    let mut _112: &[&[&[u8]]; 1];
    let _113: &[&[&[u8]]; 1];
    let _114: [&[&[u8]]; 1];
    let mut _115: &[&[u8]];
    let mut _116: &[&[u8]; 2];
    let _117: &[&[u8]; 2];
    let _118: [&[u8]; 2];
    let mut _119: &[u8];
    let mut _120: &[u8; 17];
    let _121: &[u8; 17];
    let mut _122: &[u8];
    let mut _123: &[u8; 1];
    let _124: &[u8; 1];
    let _125: [u8; 1];
    let mut _126: u8;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _133: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _134: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _135: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _136: usize;
    let mut _137: {closure@programs\kvault\src\handlers\handler_deposit.rs:52:14: 52:28};
    let mut _141: operations::effects::DepositEffects;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, operations::effects::DepositEffects>;
    let mut _143: std::result::Result<operations::effects::DepositEffects, anchor_lang::error::Error>;
    let mut _144: &mut state::VaultState;
    let mut _145: &mut state::VaultState;
    let mut _146: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _147: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_deposit.rs:52:14: 52:28}>;
    let mut _148: u64;
    let mut _149: u64;
    let mut _150: anchor_lang::prelude::Clock;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _152: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _158: u64;
    let mut _159: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _160: i64;
    let mut _161: anchor_lang::prelude::Clock;
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _163: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _174: ();
    let mut _176: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _180: &events::DepositResultEvent;
    let _181: &events::DepositResultEvent;
    let _182: events::DepositResultEvent;
    let mut _183: u64;
    let mut _184: u64;
    let mut _185: u64;
    let mut _187: std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>>;
    let mut _188: std::array::IntoIter<u8, 8>;
    let mut _189: [u8; 8];
    let mut _190: std::vec::IntoIter<u8>;
    let mut _191: std::vec::Vec<u8>;
    let mut _193: anchor_lang::prelude::Pubkey;
    let mut _194: &anchor_lang::prelude::Pubkey;
    let mut _195: &[u8];
    let _196: &[u8];
    let mut _197: &std::vec::Vec<u8>;
    let _198: &std::vec::Vec<u8>;
    let mut _199: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _200: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _201: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _202: usize;
    let mut _203: usize;
    let mut _204: *mut u8;
    let mut _205: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 1]>;
    let mut _206: anchor_lang::prelude::AccountMeta;
    let mut _207: anchor_lang::prelude::Pubkey;
    let _208: ();
    let mut _209: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _210: std::result::Result<(), anchor_lang::error::Error>;
    let mut _211: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _212: &solana_program::instruction::Instruction;
    let _213: &solana_program::instruction::Instruction;
    let mut _214: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _215: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _216: &[anchor_lang::prelude::AccountInfo<'_>; 1];
    let _217: [anchor_lang::prelude::AccountInfo<'_>; 1];
    let mut _218: anchor_lang::prelude::AccountInfo<'_>;
    let mut _219: &[&[&[u8]]];
    let mut _220: &[&[&[u8]]; 1];
    let _221: &[&[&[u8]]; 1];
    let _222: [&[&[u8]]; 1];
    let mut _223: &[&[u8]];
    let mut _224: &[&[u8]; 2];
    let _225: &[&[u8]; 2];
    let _226: [&[u8]; 2];
    let mut _227: &[u8];
    let mut _228: &[u8; 17];
    let _229: &[u8; 17];
    let mut _230: &[u8];
    let mut _231: &[u8; 1];
    let _232: &[u8; 1];
    let _233: [u8; 1];
    let mut _234: u8;
    let mut _235: isize;
    let mut _237: !;
    let mut _238: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _240: ();
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _242: std::result::Result<(), anchor_lang::error::Error>;
    let mut _243: &utils::token_ops::tokens::UserTransferAccounts<'_>;
    let _244: &utils::token_ops::tokens::UserTransferAccounts<'_>;
    let _245: utils::token_ops::tokens::UserTransferAccounts<'_>;
    let mut _246: anchor_lang::prelude::AccountInfo<'_>;
    let mut _247: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _248: anchor_lang::prelude::AccountInfo<'_>;
    let mut _249: &anchor_lang::prelude::Signer<'_>;
    let mut _250: anchor_lang::prelude::AccountInfo<'_>;
    let mut _251: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _252: anchor_lang::prelude::AccountInfo<'_>;
    let mut _253: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _254: anchor_lang::prelude::AccountInfo<'_>;
    let mut _255: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _256: u64;
    let mut _257: u64;
    let mut _258: u64;
    let mut _259: (u64, bool);
    let mut _260: u8;
    let mut _261: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _262: &anchor_spl::token_interface::Mint;
    let _263: &anchor_spl::token_interface::Mint;
    let mut _264: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _265: isize;
    let mut _267: !;
    let mut _268: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _270: ();
    let mut _271: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _272: std::result::Result<(), anchor_lang::error::Error>;
    let mut _273: anchor_lang::prelude::AccountInfo<'_>;
    let mut _274: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _275: anchor_lang::prelude::AccountInfo<'_>;
    let mut _276: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _277: anchor_lang::prelude::AccountInfo<'_>;
    let mut _278: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _279: anchor_lang::prelude::AccountInfo<'_>;
    let mut _280: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _281: anchor_lang::prelude::AccountInfo<'_>;
    let mut _282: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _283: u64;
    let mut _284: &state::VaultState;
    let mut _285: &std::cell::RefMut<'_, state::VaultState>;
    let mut _286: u64;
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _293: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _294: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _295: &anchor_lang::prelude::AccountInfo<'_>;
    let _296: &anchor_lang::prelude::AccountInfo<'_>;
    let _297: anchor_lang::prelude::AccountInfo<'_>;
    let mut _298: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _299: isize;
    let mut _301: !;
    let mut _302: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _305: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _306: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _307: &anchor_lang::prelude::AccountInfo<'_>;
    let _308: &anchor_lang::prelude::AccountInfo<'_>;
    let _309: anchor_lang::prelude::AccountInfo<'_>;
    let mut _310: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _317: u64;
    let mut _318: u64;
    let mut _319: (u64, bool);
    let _320: ();
    let mut _321: bool;
    let mut _322: u64;
    let mut _323: u64;
    let mut _324: u64;
    let mut _325: (u64, bool);
    let mut _326: u64;
    let mut _327: !;
    let mut _328: anchor_lang::error::Error;
    let mut _329: anchor_lang::error::AnchorError;
    let mut _330: std::string::String;
    let mut _331: &KaminoVaultError;
    let _332: KaminoVaultError;
    let mut _333: u32;
    let mut _334: KaminoVaultError;
    let mut _335: std::string::String;
    let mut _336: &KaminoVaultError;
    let _337: KaminoVaultError;
    let mut _338: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _339: anchor_lang::error::ErrorOrigin;
    let mut _340: anchor_lang::error::Source;
    let mut _341: std::option::Option<anchor_lang::error::ComparedValues>;
    let _342: ();
    let mut _343: bool;
    let mut _344: u64;
    let mut _345: u64;
    let mut _346: u64;
    let mut _347: (u64, bool);
    let mut _348: u64;
    let mut _349: &state::VaultState;
    let mut _350: &std::cell::RefMut<'_, state::VaultState>;
    let mut _351: !;
    let mut _352: anchor_lang::error::Error;
    let mut _353: anchor_lang::error::AnchorError;
    let mut _354: std::string::String;
    let mut _355: &KaminoVaultError;
    let _356: KaminoVaultError;
    let mut _357: u32;
    let mut _358: KaminoVaultError;
    let mut _359: std::string::String;
    let mut _360: &KaminoVaultError;
    let _361: KaminoVaultError;
    let mut _362: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _363: anchor_lang::error::ErrorOrigin;
    let mut _364: anchor_lang::error::Source;
    let mut _365: std::option::Option<anchor_lang::error::ComparedValues>;
    let _366: ();
    let mut _367: bool;
    let mut _368: u64;
    let mut _369: u64;
    let mut _370: u64;
    let mut _371: u64;
    let mut _372: (u64, bool);
    let mut _373: u64;
    let mut _374: (u64, bool);
    let mut _375: u64;
    let mut _376: !;
    let mut _377: anchor_lang::error::Error;
    let mut _378: anchor_lang::error::AnchorError;
    let mut _379: std::string::String;
    let mut _380: &KaminoVaultError;
    let _381: KaminoVaultError;
    let mut _382: u32;
    let mut _383: KaminoVaultError;
    let mut _384: std::string::String;
    let mut _385: &KaminoVaultError;
    let _386: KaminoVaultError;
    let mut _387: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _388: anchor_lang::error::ErrorOrigin;
    let mut _389: anchor_lang::error::Source;
    let mut _390: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _391: ();
    let mut _398: &KaminoVaultError;
    let mut _399: &KaminoVaultError;
    let mut _400: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _401: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _402: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _403: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _404: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _405: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _406: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _407: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _408: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _409: &anchor_lang::prelude::Pubkey;
    let mut _410: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _411: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _412: &anchor_lang::prelude::Pubkey;
    let mut _413: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _414: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _415: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _416: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _417: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _418: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _419: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _420: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _421: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _422: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _423: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _424: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _425: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _426: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _427: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _428: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _429: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _430: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _431: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _432: &mut handlers::handler_deposit::Deposit<'_>;
    let mut _433: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _434: bool;
    let mut _435: bool;
    let mut _436: bool;
    let mut _437: bool;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: bool;
    let mut _441: bool;
    let mut _442: bool;
    let mut _443: bool;
    let mut _444: bool;
    let mut _445: bool;
    let mut _446: bool;
    let mut _447: bool;
    let mut _448: bool;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _505: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _506: *const [anchor_lang::prelude::AccountMeta; 1];
    let mut _507: *const [anchor_lang::prelude::AccountMeta; 1];
    let mut _508: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _509: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _510: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _511: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _512: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _513: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _514: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _515: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug cpi_mem => _21;
        let _25: &mut std::cell::RefMut<'_, state::VaultState>;
        let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _34: std::cell::RefMut<'_, state::VaultState>;
        scope 2 {
            debug vault_state => _25;
            let _35: usize;
            scope 7 {
                debug reserves_count => _35;
                let _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _54: ();
                let _55: u64;
                scope 8 {
                    debug residual => _51;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _54;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug user_initial_shares_balance => _55;
                    let _60: u64;
                    scope 13 {
                        debug user_intial_ata_balance => _60;
                        let _65: u64;
                        scope 14 {
                            debug initial_vault_shares_issued => _65;
                            let _69: anchor_lang::prelude::AccountInfo<'_>;
                            let _132: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_deposit.rs:52:14: 52:28}>;
                            scope 15 {
                                debug authority_info => _69;
                                let _71: u8;
                                scope 16 {
                                    debug authority_bump => _71;
                                    let _72: [u8; 8];
                                    scope 17 {
                                        debug disc => _72;
                                        let _73: std::vec::Vec<u8>;
                                        scope 18 {
                                            debug inner_data => _73;
                                            let _78: std::vec::Vec<u8>;
                                            scope 19 {
                                                debug ix_data => _78;
                                                let _84: solana_program::instruction::Instruction;
                                                let mut _522: *const ();
                                                let mut _523: usize;
                                                let mut _524: usize;
                                                let mut _525: usize;
                                                let mut _526: usize;
                                                let mut _527: bool;
                                                scope 20 {
                                                    debug ix => _84;
                                                    let _128: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _131: ();
                                                    scope 22 {
                                                        debug residual => _128;
                                                        scope 23 {
                                                        }
                                                    }
                                                    scope 24 {
                                                        debug val => _131;
                                                        scope 25 {
                                                        }
                                                    }
                                                }
                                                scope 21 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 26 {
                                debug reserves_iter => _132;
                                let _138: u64;
                                let _139: u64;
                                let _140: u64;
                                let _154: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _157: anchor_lang::prelude::Clock;
                                let _165: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _168: anchor_lang::prelude::Clock;
                                let _170: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _173: operations::effects::DepositEffects;
                                scope 27 {
                                    debug shares_to_mint => _138;
                                    debug token_to_deposit => _139;
                                    debug crank_funds_to_deposit => _140;
                                    let _175: anchor_lang::prelude::AccountInfo<'_>;
                                    let _266: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _269: ();
                                    let _288: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _291: ();
                                    let _292: u64;
                                    let _300: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _303: u64;
                                    scope 40 {
                                        debug authority_info => _175;
                                        let _177: u8;
                                        scope 41 {
                                            debug authority_bump => _177;
                                            let _178: [u8; 8];
                                            scope 42 {
                                                debug disc => _178;
                                                let _179: std::vec::Vec<u8>;
                                                scope 43 {
                                                    debug inner_data => _179;
                                                    let _186: std::vec::Vec<u8>;
                                                    scope 44 {
                                                        debug ix_data => _186;
                                                        let _192: solana_program::instruction::Instruction;
                                                        let mut _516: *const ();
                                                        let mut _517: usize;
                                                        let mut _518: usize;
                                                        let mut _519: usize;
                                                        let mut _520: usize;
                                                        let mut _521: bool;
                                                        scope 45 {
                                                            debug ix => _192;
                                                            let _236: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _239: ();
                                                            scope 47 {
                                                                debug residual => _236;
                                                                scope 48 {
                                                                }
                                                            }
                                                            scope 49 {
                                                                debug val => _239;
                                                                scope 50 {
                                                                }
                                                            }
                                                        }
                                                        scope 46 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 51 {
                                        debug residual => _266;
                                        scope 52 {
                                        }
                                    }
                                    scope 53 {
                                        debug val => _269;
                                        scope 54 {
                                        }
                                    }
                                    scope 55 {
                                        debug residual => _288;
                                        scope 56 {
                                        }
                                    }
                                    scope 57 {
                                        debug val => _291;
                                        scope 58 {
                                        }
                                    }
                                    scope 59 {
                                        debug user_ata_balance_after => _292;
                                        let _304: u64;
                                        let _312: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _315: u64;
                                        scope 64 {
                                            debug user_shares_balance_after => _304;
                                            let _316: u64;
                                            scope 69 {
                                                debug user_shares_gained => _316;
                                                let mut _392: &KaminoVaultError;
                                                let mut _393: &KaminoVaultError;
                                                let mut _394: &KaminoVaultError;
                                                let mut _395: &KaminoVaultError;
                                                let mut _396: &KaminoVaultError;
                                                let mut _397: &KaminoVaultError;
                                            }
                                        }
                                        scope 65 {
                                            debug residual => _312;
                                            scope 66 {
                                            }
                                        }
                                        scope 67 {
                                            debug val => _315;
                                            scope 68 {
                                            }
                                        }
                                    }
                                    scope 60 {
                                        debug residual => _300;
                                        scope 61 {
                                        }
                                    }
                                    scope 62 {
                                        debug val => _303;
                                        scope 63 {
                                        }
                                    }
                                }
                                scope 28 {
                                    debug residual => _154;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => _157;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug residual => _165;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => _168;
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug residual => _170;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => _173;
                                    scope 39 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _31;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _34;
            scope 6 {
            }
        }
    }

    bb0: {
        _448 = const false;
        _447 = const false;
        _446 = const false;
        _445 = const false;
        _444 = const false;
        _443 = const false;
        _442 = const false;
        _441 = const false;
        _440 = const false;
        _439 = const false;
        _438 = const false;
        _437 = const false;
        _436 = const false;
        _435 = const false;
        _434 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        _4 = Gt(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _400 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _23 = &(*_400);
        _22 = <handlers::handler_deposit::Deposit<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _23) -> [return: bb7, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _399 = const _;
        _10 = &(*_399);
        _9 = KaminoVaultError::name(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = KaminoVaultError::DepositAmountsZero;
        _12 = <KaminoVaultError as Into<u32>>::into(move _13) -> [return: bb4, unwind: bb195];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _398 = const _;
        _15 = &(*_398);
        _14 = <KaminoVaultError as ToString>::to_string(move _15) -> [return: bb5, unwind: bb195];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_deposit.rs", line: const 23_u32 };
        _18 = anchor_lang::error::ErrorOrigin::Source(move _19);
        StorageDead(_19);
        _17 = Option::<ErrorOrigin>::Some(move _18);
        StorageDead(_18);
        StorageLive(_20);
        _20 = Option::<ComparedValues>::None;
        _8 = anchor_lang::error::AnchorError { error_name: move _9, error_code_number: move _12, error_msg: move _14, error_origin: move _17, compared_values: move _20 };
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_9);
        _7 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _8) -> [return: bb6, unwind: bb196];
    }

    bb6: {
        StorageDead(_8);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _7);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb174;
    }

    bb7: {
        StorageDead(_23);
        StorageLive(_24);
        _401 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _24 = &(*_401);
        _21 = cpi_mem::CpiMemoryLender::<'_>::build_cpi_memory_lender(move _22, move _24) -> [return: bb8, unwind: bb196];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _402 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _29 = &((*_402).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _28 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load_mut(move _29) -> [return: bb9, unwind: bb194];
    }

    bb9: {
        StorageDead(_29);
        _27 = <std::result::Result<RefMut<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _28) -> [return: bb10, unwind: bb194];
    }

    bb10: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_27 as Continue).0: std::cell::RefMut<'_, state::VaultState>);
        _26 = move _34;
        StorageDead(_34);
        _25 = &mut _26;
        _449 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_25);
        _37 = <RefMut<'_, state::VaultState> as Deref>::deref(move _38) -> [return: bb15, unwind: bb193];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_31);
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb14, unwind: bb230];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_31);
        _491 = discriminant(_27);
        StorageDead(_27);
        goto -> bb172;
    }

    bb15: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = state::VaultState::get_reserves_count(move _36) -> [return: bb16, unwind: bb193];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &mut _21;
        _43 = &mut (*_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _403 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _47 = &(*_403);
        _46 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _47) -> [return: bb17, unwind: bb193];
    }

    bb17: {
        StorageDead(_47);
        StorageLive(_48);
        _48 = _35;
        _45 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _46, move _48) -> [return: bb18, unwind: bb193];
    }

    bb18: {
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_49);
        _49 = _35;
        _42 = cpi_refresh_reserves::<'_, '_, std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _43, move _45, move _49) -> [return: bb19, unwind: bb193];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_43);
        _41 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _42) -> [return: bb20, unwind: bb193];
    }

    bb20: {
        StorageDead(_42);
        _50 = discriminant(_41);
        switchInt(move _50) -> [0: bb21, 1: bb22, otherwise: bb12];
    }

    bb21: {
        StorageLive(_54);
        _54 = ((_41 as Continue).0: ());
        _40 = _54;
        StorageDead(_54);
        _451 = discriminant(_41);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        _39 = const ();
        StorageDead(_39);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _404 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _405 = deref_copy ((*_404).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _504 = (((_405.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _59 = &(*_504);
        _58 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _59) -> [return: bb24, unwind: bb193];
    }

    bb22: {
        StorageLive(_51);
        _51 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _53) -> [return: bb23, unwind: bb229];
    }

    bb23: {
        StorageDead(_53);
        StorageDead(_51);
        _489 = discriminant(_41);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb171;
    }

    bb24: {
        _57 = &(*_58);
        _56 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _57) -> [return: bb25, unwind: bb193];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_57);
        _55 = ((*_56).2: u64);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _406 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _407 = deref_copy ((*_406).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _505 = (((_407.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _64 = &(*_505);
        _63 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _64) -> [return: bb26, unwind: bb193];
    }

    bb26: {
        _62 = &(*_63);
        _61 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _62) -> [return: bb27, unwind: bb193];
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_62);
        _60 = ((*_61).2: u64);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &(*_25);
        _66 = <RefMut<'_, state::VaultState> as Deref>::deref(move _67) -> [return: bb28, unwind: bb193];
    }

    bb28: {
        StorageDead(_67);
        _65 = ((*_66).10: u64);
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _408 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _70 = &((*_408).11: anchor_lang::prelude::AccountInfo<'_>);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _70) -> [return: bb29, unwind: bb193];
    }

    bb29: {
        _448 = const true;
        StorageDead(_70);
        StorageLive(_71);
        _71 = ((_1.3: handlers::handler_deposit::DepositBumps).0: u8);
        StorageLive(_72);
        _72 = const _;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _60;
        _76 = DepositUserAtaBalanceEvent { user_ata_balance: move _77 };
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = <DepositUserAtaBalanceEvent as anchor_lang::Event>::data(move _74) -> [return: bb30, unwind: bb228];
    }

    bb30: {
        _447 = const true;
        StorageDead(_74);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _72;
        _80 = <[u8; 8] as IntoIterator>::into_iter(move _81) -> [return: bb31, unwind: bb226];
    }

    bb31: {
        _446 = const true;
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        _447 = const false;
        _83 = move _73;
        _82 = <Vec<u8> as IntoIterator>::into_iter(move _83) -> [return: bb32, unwind: bb224];
    }

    bb32: {
        StorageDead(_83);
        _446 = const false;
        _79 = <std::array::IntoIter<u8, 8> as Iterator>::chain::<std::vec::IntoIter<u8>>(move _80, move _82) -> [return: bb33, unwind: bb224];
    }

    bb33: {
        StorageDead(_82);
        _446 = const false;
        StorageDead(_80);
        _78 = <std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>> as Iterator>::collect::<Vec<u8>>(move _79) -> [return: bb34, unwind: bb226];
    }

    bb34: {
        StorageDead(_79);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = const {alloc73: &anchor_lang::prelude::Pubkey};
        _85 = (*_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_78;
        _89 = &(*_90);
        _88 = <Vec<u8> as Deref>::deref(move _89) -> [return: bb35, unwind: bb192];
    }

    bb35: {
        _87 = &(*_88);
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _94 = SizeOf([anchor_lang::prelude::AccountMeta; 1]);
        _95 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _96 = alloc::alloc::exchange_malloc(move _94, move _95) -> [return: bb36, unwind: bb192];
    }

    bb36: {
        StorageLive(_97);
        _97 = ShallowInitBox(move _96, [anchor_lang::prelude::AccountMeta; 1]);
        StorageLive(_98);
        StorageLive(_99);
        _409 = deref_copy (_69.0: &anchor_lang::prelude::Pubkey);
        _99 = (*_409);
        _98 = AccountMeta::new_readonly(move _99, const true) -> [return: bb37, unwind: bb191];
    }

    bb37: {
        StorageDead(_99);
        _506 = (((_97.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 1]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 1]>).0: *const [anchor_lang::prelude::AccountMeta; 1]);
        _522 = _506 as *const () (PtrToPtr);
        _523 = _522 as usize (Transmute);
        _524 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _525 = Sub(_524, const 1_usize);
        _526 = BitAnd(_523, _525);
        _527 = Eq(_526, const 0_usize);
        assert(_527, "misaligned pointer dereference: address must be a multiple of {} but is {}", _524, _523) -> [success: bb232, unwind unreachable];
    }

    bb38: {
        StorageDead(_92);
        _84 = Instruction::new_with_bytes(move _85, move _87, move _91) -> [return: bb39, unwind: bb192];
    }

    bb39: {
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_84;
        _104 = &(*_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _448 = const false;
        _110 = move _69;
        _109 = [move _110];
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = move _107 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = const b"__event_authority";
        _120 = &(*_121);
        _119 = move _120 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _71;
        _125 = [move _126];
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = move _123 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_123);
        _118 = [move _119, move _122];
        StorageDead(_122);
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = move _116 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_116);
        _114 = [move _115];
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = move _112 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_112);
        _103 = invoke_signed(move _104, move _106, move _111) -> [return: bb40, unwind: bb189];
    }

    bb40: {
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_104);
        _102 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from}>(move _103, <anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from) -> [return: bb41, unwind: bb189];
    }

    bb41: {
        StorageDead(_103);
        _101 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _102) -> [return: bb42, unwind: bb189];
    }

    bb42: {
        StorageDead(_102);
        _127 = discriminant(_101);
        switchInt(move _127) -> [0: bb43, 1: bb44, otherwise: bb12];
    }

    bb43: {
        StorageLive(_131);
        _131 = ((_101 as Continue).0: ());
        _100 = _131;
        StorageDead(_131);
        _453 = discriminant(_101);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        drop(_109) -> [return: bb46, unwind: bb190];
    }

    bb44: {
        StorageLive(_128);
        _128 = move ((_101 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _130) -> [return: bb45, unwind: bb222];
    }

    bb45: {
        StorageDead(_130);
        StorageDead(_128);
        _487 = discriminant(_101);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        drop(_109) -> [return: bb167, unwind: bb190];
    }

    bb46: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_100);
        _68 = const ();
        drop(_84) -> [return: bb47, unwind: bb192];
    }

    bb47: {
        StorageDead(_84);
        drop(_78) -> [return: bb48, unwind: bb226];
    }

    bb48: {
        StorageDead(_78);
        _447 = const false;
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        _448 = const false;
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _410 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _135 = &(*_410);
        _134 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _135) -> [return: bb49, unwind: bb193];
    }

    bb49: {
        StorageDead(_135);
        StorageLive(_136);
        _136 = _35;
        _133 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _134, move _136) -> [return: bb50, unwind: bb193];
    }

    bb50: {
        StorageDead(_136);
        StorageDead(_134);
        StorageLive(_137);
        _137 = {closure@programs\kvault\src\handlers\handler_deposit.rs:52:14: 52:28};
        _132 = <std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, {closure@programs\kvault\src\handlers\handler_deposit.rs:52:14: 52:28}>(move _133, move _137) -> [return: bb51, unwind: bb193];
    }

    bb51: {
        StorageDead(_137);
        StorageDead(_133);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &mut (*_25);
        _145 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _146) -> [return: bb52, unwind: bb193];
    }

    bb52: {
        _144 = &mut (*_145);
        StorageDead(_146);
        StorageLive(_147);
        _147 = move _132;
        StorageLive(_148);
        _148 = _2;
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb53, unwind: bb193];
    }

    bb53: {
        _151 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _152) -> [return: bb54, unwind: bb193];
    }

    bb54: {
        _436 = const true;
        _437 = const true;
        StorageDead(_152);
        _153 = discriminant(_151);
        switchInt(move _153) -> [0: bb55, 1: bb56, otherwise: bb12];
    }

    bb55: {
        StorageLive(_157);
        _157 = move ((_151 as Continue).0: anchor_lang::prelude::Clock);
        _150 = move _157;
        StorageDead(_157);
        _149 = (_150.0: u64);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb58, unwind: bb221];
    }

    bb56: {
        StorageLive(_154);
        _154 = move ((_151 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_156);
        _156 = move _154;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _156) -> [return: bb57, unwind: bb221];
    }

    bb57: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb197;
    }

    bb58: {
        _162 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _163) -> [return: bb59, unwind: bb221];
    }

    bb59: {
        _434 = const true;
        _435 = const true;
        StorageDead(_163);
        _164 = discriminant(_162);
        switchInt(move _164) -> [0: bb60, 1: bb61, otherwise: bb12];
    }

    bb60: {
        StorageLive(_168);
        _168 = move ((_162 as Continue).0: anchor_lang::prelude::Clock);
        _161 = move _168;
        StorageDead(_168);
        _160 = (_161.4: i64);
        _159 = <i64 as TryInto<u64>>::try_into(move _160) -> [return: bb63, unwind: bb220];
    }

    bb61: {
        StorageLive(_165);
        _165 = move ((_162 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_167);
        _167 = move _165;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _167) -> [return: bb62, unwind: bb220];
    }

    bb62: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb165;
    }

    bb63: {
        StorageDead(_160);
        _158 = std::result::Result::<u64, TryFromIntError>::unwrap(move _159) -> [return: bb64, unwind: bb220];
    }

    bb64: {
        StorageDead(_159);
        _143 = operations::vault_operations::deposit::<'_, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_deposit.rs:52:14: 52:28}>>(move _144, move _147, move _148, move _149, move _158) -> [return: bb65, unwind: bb220];
    }

    bb65: {
        StorageDead(_158);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_144);
        _142 = <std::result::Result<DepositEffects, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb66, unwind: bb220];
    }

    bb66: {
        StorageDead(_143);
        _169 = discriminant(_142);
        switchInt(move _169) -> [0: bb67, 1: bb68, otherwise: bb12];
    }

    bb67: {
        StorageLive(_173);
        _173 = move ((_142 as Continue).0: operations::effects::DepositEffects);
        _141 = move _173;
        StorageDead(_173);
        StorageLive(_138);
        _138 = (_141.0: u64);
        StorageLive(_139);
        _139 = (_141.1: u64);
        StorageLive(_140);
        _140 = (_141.2: u64);
        _455 = discriminant(_142);
        _457 = discriminant(_162);
        _434 = const false;
        _435 = const false;
        StorageDead(_162);
        StorageDead(_161);
        _459 = discriminant(_151);
        _436 = const false;
        _437 = const false;
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _411 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _176 = &((*_411).11: anchor_lang::prelude::AccountInfo<'_>);
        _175 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _176) -> [return: bb70, unwind: bb193];
    }

    bb68: {
        StorageLive(_170);
        _170 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_172);
        _172 = move _170;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _172) -> [return: bb69, unwind: bb219];
    }

    bb69: {
        StorageDead(_172);
        StorageDead(_170);
        _481 = discriminant(_142);
        goto -> bb165;
    }

    bb70: {
        _445 = const true;
        StorageDead(_176);
        StorageLive(_177);
        _177 = ((_1.3: handlers::handler_deposit::DepositBumps).0: u8);
        StorageLive(_178);
        _178 = const _;
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = _138;
        StorageLive(_184);
        _184 = _139;
        StorageLive(_185);
        _185 = _140;
        _182 = DepositResultEvent { shares_to_mint: move _183, token_to_deposit: move _184, crank_funds_to_deposit: move _185 };
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_183);
        _181 = &_182;
        _180 = &(*_181);
        _179 = <DepositResultEvent as anchor_lang::Event>::data(move _180) -> [return: bb71, unwind: bb218];
    }

    bb71: {
        _444 = const true;
        StorageDead(_180);
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = _178;
        _188 = <[u8; 8] as IntoIterator>::into_iter(move _189) -> [return: bb72, unwind: bb216];
    }

    bb72: {
        _443 = const true;
        StorageDead(_189);
        StorageLive(_190);
        StorageLive(_191);
        _444 = const false;
        _191 = move _179;
        _190 = <Vec<u8> as IntoIterator>::into_iter(move _191) -> [return: bb73, unwind: bb214];
    }

    bb73: {
        StorageDead(_191);
        _443 = const false;
        _187 = <std::array::IntoIter<u8, 8> as Iterator>::chain::<std::vec::IntoIter<u8>>(move _188, move _190) -> [return: bb74, unwind: bb214];
    }

    bb74: {
        StorageDead(_190);
        _443 = const false;
        StorageDead(_188);
        _186 = <std::iter::Chain<std::array::IntoIter<u8, 8>, std::vec::IntoIter<u8>> as Iterator>::collect::<Vec<u8>>(move _187) -> [return: bb75, unwind: bb216];
    }

    bb75: {
        StorageDead(_187);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = const {alloc73: &anchor_lang::prelude::Pubkey};
        _193 = (*_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &_186;
        _197 = &(*_198);
        _196 = <Vec<u8> as Deref>::deref(move _197) -> [return: bb76, unwind: bb188];
    }

    bb76: {
        _195 = &(*_196);
        StorageDead(_197);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _202 = SizeOf([anchor_lang::prelude::AccountMeta; 1]);
        _203 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _204 = alloc::alloc::exchange_malloc(move _202, move _203) -> [return: bb77, unwind: bb188];
    }

    bb77: {
        StorageLive(_205);
        _205 = ShallowInitBox(move _204, [anchor_lang::prelude::AccountMeta; 1]);
        StorageLive(_206);
        StorageLive(_207);
        _412 = deref_copy (_175.0: &anchor_lang::prelude::Pubkey);
        _207 = (*_412);
        _206 = AccountMeta::new_readonly(move _207, const true) -> [return: bb78, unwind: bb187];
    }

    bb78: {
        StorageDead(_207);
        _507 = (((_205.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 1]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 1]>).0: *const [anchor_lang::prelude::AccountMeta; 1]);
        _516 = _507 as *const () (PtrToPtr);
        _517 = _516 as usize (Transmute);
        _518 = AlignOf([anchor_lang::prelude::AccountMeta; 1]);
        _519 = Sub(_518, const 1_usize);
        _520 = BitAnd(_517, _519);
        _521 = Eq(_520, const 0_usize);
        assert(_521, "misaligned pointer dereference: address must be a multiple of {} but is {}", _518, _517) -> [success: bb231, unwind unreachable];
    }

    bb79: {
        StorageDead(_200);
        _192 = Instruction::new_with_bytes(move _193, move _195, move _199) -> [return: bb80, unwind: bb188];
    }

    bb80: {
        StorageDead(_199);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_192;
        _212 = &(*_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _445 = const false;
        _218 = move _175;
        _217 = [move _218];
        StorageDead(_218);
        _216 = &_217;
        _215 = &(*_216);
        _214 = move _215 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_215);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = const b"__event_authority";
        _228 = &(*_229);
        _227 = move _228 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_228);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = _177;
        _233 = [move _234];
        StorageDead(_234);
        _232 = &_233;
        _231 = &(*_232);
        _230 = move _231 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_231);
        _226 = [move _227, move _230];
        StorageDead(_230);
        StorageDead(_227);
        _225 = &_226;
        _224 = &(*_225);
        _223 = move _224 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_224);
        _222 = [move _223];
        StorageDead(_223);
        _221 = &_222;
        _220 = &(*_221);
        _219 = move _220 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_220);
        _211 = invoke_signed(move _212, move _214, move _219) -> [return: bb81, unwind: bb185];
    }

    bb81: {
        StorageDead(_219);
        StorageDead(_214);
        StorageDead(_212);
        _210 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from}>(move _211, <anchor_lang::error::Error as From<anchor_lang::prelude::ProgramError>>::from) -> [return: bb82, unwind: bb185];
    }

    bb82: {
        StorageDead(_211);
        _209 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _210) -> [return: bb83, unwind: bb185];
    }

    bb83: {
        StorageDead(_210);
        _235 = discriminant(_209);
        switchInt(move _235) -> [0: bb84, 1: bb85, otherwise: bb12];
    }

    bb84: {
        StorageLive(_239);
        _239 = ((_209 as Continue).0: ());
        _208 = _239;
        StorageDead(_239);
        _461 = discriminant(_209);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_222);
        StorageDead(_221);
        drop(_217) -> [return: bb87, unwind: bb186];
    }

    bb85: {
        StorageLive(_236);
        _236 = move ((_209 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_238);
        _238 = move _236;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _238) -> [return: bb86, unwind: bb212];
    }

    bb86: {
        StorageDead(_238);
        StorageDead(_236);
        _479 = discriminant(_209);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_222);
        StorageDead(_221);
        drop(_217) -> [return: bb161, unwind: bb186];
    }

    bb87: {
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_209);
        StorageDead(_208);
        _174 = const ();
        drop(_192) -> [return: bb88, unwind: bb188];
    }

    bb88: {
        StorageDead(_192);
        drop(_186) -> [return: bb89, unwind: bb216];
    }

    bb89: {
        StorageDead(_186);
        _444 = const false;
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        _445 = const false;
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _413 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _247 = &((*_413).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _246 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _247) -> [return: bb90, unwind: bb193];
    }

    bb90: {
        StorageDead(_247);
        StorageLive(_248);
        StorageLive(_249);
        _414 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _249 = &((*_414).0: anchor_lang::prelude::Signer<'_>);
        _248 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _249) -> [return: bb91, unwind: bb184];
    }

    bb91: {
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        _415 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _416 = deref_copy ((*_415).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _508 = (((_416.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _251 = &(*_508);
        _250 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _251) -> [return: bb92, unwind: bb183];
    }

    bb92: {
        StorageDead(_251);
        StorageLive(_252);
        StorageLive(_253);
        _417 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _418 = deref_copy ((*_417).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _509 = (((_418.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _253 = &(*_509);
        _252 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _253) -> [return: bb93, unwind: bb182];
    }

    bb93: {
        StorageDead(_253);
        StorageLive(_254);
        StorageLive(_255);
        _419 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _420 = deref_copy ((*_419).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _510 = (((_420.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _255 = &(*_510);
        _254 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _255) -> [return: bb94, unwind: bb181];
    }

    bb94: {
        StorageDead(_255);
        _245 = UserTransferAccounts::<'_> { token_program: move _246, token_vault: move _252, token_ata: move _250, token_mint: move _254, user_authority: move _248 };
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_246);
        _244 = &_245;
        _243 = &(*_244);
        StorageLive(_256);
        StorageLive(_257);
        _257 = _139;
        StorageLive(_258);
        _258 = _140;
        _259 = CheckedAdd(_257, _258);
        assert(!move (_259.1: bool), "attempt to compute `{} + {}`, which would overflow", move _257, move _258) -> [success: bb95, unwind: bb180];
    }

    bb95: {
        _256 = move (_259.0: u64);
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _421 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _422 = deref_copy ((*_421).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _511 = (((_422.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _264 = &(*_511);
        _263 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _264) -> [return: bb96, unwind: bb180];
    }

    bb96: {
        _262 = &(*_263);
        _261 = <anchor_spl::token_interface::Mint as Deref>::deref(move _262) -> [return: bb97, unwind: bb180];
    }

    bb97: {
        StorageDead(_264);
        StorageDead(_262);
        _260 = ((*_261).2: u8);
        _242 = transfer_to_vault(move _243, move _256, move _260) -> [return: bb98, unwind: bb180];
    }

    bb98: {
        StorageDead(_260);
        StorageDead(_256);
        StorageDead(_243);
        _241 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _242) -> [return: bb99, unwind: bb180];
    }

    bb99: {
        StorageDead(_242);
        _265 = discriminant(_241);
        switchInt(move _265) -> [0: bb100, 1: bb101, otherwise: bb12];
    }

    bb100: {
        StorageLive(_269);
        _269 = ((_241 as Continue).0: ());
        _240 = _269;
        StorageDead(_269);
        _463 = discriminant(_241);
        StorageDead(_263);
        StorageDead(_261);
        drop(_245) -> [return: bb103, unwind: bb193];
    }

    bb101: {
        StorageLive(_266);
        _266 = move ((_241 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_268);
        _268 = move _266;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _268) -> [return: bb102, unwind: bb211];
    }

    bb102: {
        StorageDead(_268);
        StorageDead(_266);
        _477 = discriminant(_241);
        StorageDead(_263);
        StorageDead(_261);
        drop(_245) -> [return: bb160, unwind: bb193];
    }

    bb103: {
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _423 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _274 = &((*_423).10: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _273 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _274) -> [return: bb104, unwind: bb193];
    }

    bb104: {
        _442 = const true;
        StorageDead(_274);
        StorageLive(_275);
        StorageLive(_276);
        _424 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _425 = deref_copy ((*_424).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _512 = (((_425.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _276 = &(*_512);
        _275 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _276) -> [return: bb105, unwind: bb210];
    }

    bb105: {
        _441 = const true;
        StorageDead(_276);
        StorageLive(_277);
        StorageLive(_278);
        _426 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _278 = &((*_426).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _277 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _278) -> [return: bb106, unwind: bb208];
    }

    bb106: {
        _440 = const true;
        StorageDead(_278);
        StorageLive(_279);
        StorageLive(_280);
        _427 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _280 = &((*_427).4: anchor_lang::prelude::AccountInfo<'_>);
        _279 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _280) -> [return: bb107, unwind: bb206];
    }

    bb107: {
        _439 = const true;
        StorageDead(_280);
        StorageLive(_281);
        StorageLive(_282);
        _428 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _429 = deref_copy ((*_428).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _513 = (((_429.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _282 = &(*_513);
        _281 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _282) -> [return: bb108, unwind: bb204];
    }

    bb108: {
        _438 = const true;
        StorageDead(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &(*_25);
        _284 = <RefMut<'_, state::VaultState> as Deref>::deref(move _285) -> [return: bb109, unwind: bb202];
    }

    bb109: {
        StorageDead(_285);
        _283 = ((*_284).2: u64);
        StorageLive(_286);
        _286 = _138;
        _442 = const false;
        _441 = const false;
        _440 = const false;
        _439 = const false;
        _438 = const false;
        _272 = utils::token_ops::shares::mint(move _273, move _275, move _277, move _279, move _281, move _283, move _286) -> [return: bb110, unwind: bb202];
    }

    bb110: {
        StorageDead(_286);
        StorageDead(_283);
        _438 = const false;
        StorageDead(_281);
        _439 = const false;
        StorageDead(_279);
        _440 = const false;
        StorageDead(_277);
        _441 = const false;
        StorageDead(_275);
        _442 = const false;
        StorageDead(_273);
        _271 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _272) -> [return: bb111, unwind: bb193];
    }

    bb111: {
        StorageDead(_272);
        _287 = discriminant(_271);
        switchInt(move _287) -> [0: bb112, 1: bb113, otherwise: bb12];
    }

    bb112: {
        StorageLive(_291);
        _291 = ((_271 as Continue).0: ());
        _270 = _291;
        StorageDead(_291);
        _465 = discriminant(_271);
        StorageDead(_284);
        StorageDead(_271);
        StorageDead(_270);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        _430 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _431 = deref_copy ((*_430).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _514 = (((_431.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _298 = &(*_514);
        _297 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _298) -> [return: bb115, unwind: bb193];
    }

    bb113: {
        StorageLive(_288);
        _288 = move ((_271 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_290);
        _290 = move _288;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _290) -> [return: bb114, unwind: bb200];
    }

    bb114: {
        StorageDead(_290);
        StorageDead(_288);
        _475 = discriminant(_271);
        StorageDead(_284);
        StorageDead(_271);
        StorageDead(_270);
        goto -> bb164;
    }

    bb115: {
        StorageDead(_298);
        _296 = &_297;
        _295 = &(*_296);
        _294 = anchor_spl::token::accessor::amount(move _295) -> [return: bb116, unwind: bb179];
    }

    bb116: {
        StorageDead(_295);
        _293 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _294) -> [return: bb117, unwind: bb179];
    }

    bb117: {
        StorageDead(_294);
        _299 = discriminant(_293);
        switchInt(move _299) -> [0: bb118, 1: bb119, otherwise: bb12];
    }

    bb118: {
        StorageLive(_303);
        _303 = ((_293 as Continue).0: u64);
        _292 = _303;
        StorageDead(_303);
        _467 = discriminant(_293);
        drop(_297) -> [return: bb121, unwind: bb193];
    }

    bb119: {
        StorageLive(_300);
        _300 = move ((_293 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_302);
        _302 = move _300;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _302) -> [return: bb120, unwind: bb199];
    }

    bb120: {
        StorageDead(_302);
        StorageDead(_300);
        _473 = discriminant(_293);
        drop(_297) -> [return: bb158, unwind: bb193];
    }

    bb121: {
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_293);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _432 = deref_copy (_1.1: &mut handlers::handler_deposit::Deposit<'_>);
        _433 = deref_copy ((*_432).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _515 = (((_433.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _310 = &(*_515);
        _309 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _310) -> [return: bb122, unwind: bb193];
    }

    bb122: {
        StorageDead(_310);
        _308 = &_309;
        _307 = &(*_308);
        _306 = anchor_spl::token::accessor::amount(move _307) -> [return: bb123, unwind: bb178];
    }

    bb123: {
        StorageDead(_307);
        _305 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _306) -> [return: bb124, unwind: bb178];
    }

    bb124: {
        StorageDead(_306);
        _311 = discriminant(_305);
        switchInt(move _311) -> [0: bb125, 1: bb126, otherwise: bb12];
    }

    bb125: {
        StorageLive(_315);
        _315 = ((_305 as Continue).0: u64);
        _304 = _315;
        StorageDead(_315);
        _469 = discriminant(_305);
        drop(_309) -> [return: bb128, unwind: bb193];
    }

    bb126: {
        StorageLive(_312);
        _312 = move ((_305 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_314);
        _314 = move _312;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _314) -> [return: bb127, unwind: bb198];
    }

    bb127: {
        StorageDead(_314);
        StorageDead(_312);
        _471 = discriminant(_305);
        drop(_309) -> [return: bb156, unwind: bb193];
    }

    bb128: {
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_305);
        StorageLive(_316);
        StorageLive(_317);
        _317 = _304;
        StorageLive(_318);
        _318 = _55;
        _319 = CheckedSub(_317, _318);
        assert(!move (_319.1: bool), "attempt to compute `{} - {}`, which would overflow", move _317, move _318) -> [success: bb129, unwind: bb193];
    }

    bb129: {
        _316 = move (_319.0: u64);
        StorageDead(_318);
        StorageDead(_317);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = _139;
        StorageLive(_324);
        _324 = _140;
        _325 = CheckedAdd(_323, _324);
        assert(!move (_325.1: bool), "attempt to compute `{} + {}`, which would overflow", move _323, move _324) -> [success: bb130, unwind: bb193];
    }

    bb130: {
        _322 = move (_325.0: u64);
        StorageDead(_324);
        StorageDead(_323);
        StorageLive(_326);
        _326 = _2;
        _321 = Le(move _322, move _326);
        switchInt(move _321) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        StorageDead(_326);
        StorageDead(_322);
        _320 = const ();
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = _65;
        StorageLive(_346);
        _346 = _316;
        _347 = CheckedAdd(_345, _346);
        assert(!move (_347.1: bool), "attempt to compute `{} + {}`, which would overflow", move _345, move _346) -> [success: bb137, unwind: bb193];
    }

    bb132: {
        StorageDead(_326);
        StorageDead(_322);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _397 = const _;
        _331 = &(*_397);
        _330 = KaminoVaultError::name(move _331) -> [return: bb133, unwind: bb193];
    }

    bb133: {
        StorageDead(_331);
        StorageLive(_333);
        StorageLive(_334);
        _334 = KaminoVaultError::DepositAmountGreaterThanRequestedAmount;
        _333 = <KaminoVaultError as Into<u32>>::into(move _334) -> [return: bb134, unwind: bb177];
    }

    bb134: {
        StorageDead(_334);
        StorageLive(_335);
        StorageLive(_336);
        _396 = const _;
        _336 = &(*_396);
        _335 = <KaminoVaultError as ToString>::to_string(move _336) -> [return: bb135, unwind: bb177];
    }

    bb135: {
        StorageDead(_336);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _340 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_deposit.rs", line: const 100_u32 };
        _339 = anchor_lang::error::ErrorOrigin::Source(move _340);
        StorageDead(_340);
        _338 = Option::<ErrorOrigin>::Some(move _339);
        StorageDead(_339);
        StorageLive(_341);
        _341 = Option::<ComparedValues>::None;
        _329 = anchor_lang::error::AnchorError { error_name: move _330, error_code_number: move _333, error_msg: move _335, error_origin: move _338, compared_values: move _341 };
        StorageDead(_341);
        StorageDead(_338);
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_330);
        _328 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _329) -> [return: bb136, unwind: bb193];
    }

    bb136: {
        StorageDead(_329);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _328);
        StorageDead(_328);
        StorageDead(_321);
        StorageDead(_320);
        goto -> bb155;
    }

    bb137: {
        _344 = move (_347.0: u64);
        StorageDead(_346);
        StorageDead(_345);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _350 = &(*_25);
        _349 = <RefMut<'_, state::VaultState> as Deref>::deref(move _350) -> [return: bb138, unwind: bb193];
    }

    bb138: {
        StorageDead(_350);
        _348 = ((*_349).10: u64);
        _343 = Eq(move _344, move _348);
        switchInt(move _343) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        StorageDead(_348);
        StorageDead(_344);
        StorageDead(_349);
        _342 = const ();
        StorageDead(_343);
        StorageDead(_342);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = _60;
        StorageLive(_371);
        _371 = _139;
        _372 = CheckedSub(_370, _371);
        assert(!move (_372.1: bool), "attempt to compute `{} - {}`, which would overflow", move _370, move _371) -> [success: bb145, unwind: bb193];
    }

    bb140: {
        StorageDead(_348);
        StorageDead(_344);
        StorageDead(_349);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _395 = const _;
        _355 = &(*_395);
        _354 = KaminoVaultError::name(move _355) -> [return: bb141, unwind: bb193];
    }

    bb141: {
        StorageDead(_355);
        StorageLive(_357);
        StorageLive(_358);
        _358 = KaminoVaultError::SharesIssuedAmountDoesNotMatch;
        _357 = <KaminoVaultError as Into<u32>>::into(move _358) -> [return: bb142, unwind: bb176];
    }

    bb142: {
        StorageDead(_358);
        StorageLive(_359);
        StorageLive(_360);
        _394 = const _;
        _360 = &(*_394);
        _359 = <KaminoVaultError as ToString>::to_string(move _360) -> [return: bb143, unwind: bb176];
    }

    bb143: {
        StorageDead(_360);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_deposit.rs", line: const 104_u32 };
        _363 = anchor_lang::error::ErrorOrigin::Source(move _364);
        StorageDead(_364);
        _362 = Option::<ErrorOrigin>::Some(move _363);
        StorageDead(_363);
        StorageLive(_365);
        _365 = Option::<ComparedValues>::None;
        _353 = anchor_lang::error::AnchorError { error_name: move _354, error_code_number: move _357, error_msg: move _359, error_origin: move _362, compared_values: move _365 };
        StorageDead(_365);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_354);
        _352 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _353) -> [return: bb144, unwind: bb193];
    }

    bb144: {
        StorageDead(_353);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _352);
        StorageDead(_352);
        StorageDead(_343);
        StorageDead(_342);
        goto -> bb155;
    }

    bb145: {
        _369 = move (_372.0: u64);
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_373);
        _373 = _140;
        _374 = CheckedSub(_369, _373);
        assert(!move (_374.1: bool), "attempt to compute `{} - {}`, which would overflow", move _369, move _373) -> [success: bb146, unwind: bb193];
    }

    bb146: {
        _368 = move (_374.0: u64);
        StorageDead(_373);
        StorageDead(_369);
        StorageLive(_375);
        _375 = _292;
        _367 = Eq(move _368, move _375);
        switchInt(move _367) -> [0: bb148, otherwise: bb147];
    }

    bb147: {
        StorageDead(_375);
        StorageDead(_368);
        _366 = const ();
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_391);
        _391 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _391);
        StorageDead(_391);
        StorageDead(_316);
        StorageDead(_304);
        StorageDead(_292);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_132);
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_35);
        drop(_26) -> [return: bb153, unwind: bb194];
    }

    bb148: {
        StorageDead(_375);
        StorageDead(_368);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _393 = const _;
        _380 = &(*_393);
        _379 = KaminoVaultError::name(move _380) -> [return: bb149, unwind: bb193];
    }

    bb149: {
        StorageDead(_380);
        StorageLive(_382);
        StorageLive(_383);
        _383 = KaminoVaultError::TokensDepositedAmountDoesNotMatch;
        _382 = <KaminoVaultError as Into<u32>>::into(move _383) -> [return: bb150, unwind: bb175];
    }

    bb150: {
        StorageDead(_383);
        StorageLive(_384);
        StorageLive(_385);
        _392 = const _;
        _385 = &(*_392);
        _384 = <KaminoVaultError as ToString>::to_string(move _385) -> [return: bb151, unwind: bb175];
    }

    bb151: {
        StorageDead(_385);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_deposit.rs", line: const 109_u32 };
        _388 = anchor_lang::error::ErrorOrigin::Source(move _389);
        StorageDead(_389);
        _387 = Option::<ErrorOrigin>::Some(move _388);
        StorageDead(_388);
        StorageLive(_390);
        _390 = Option::<ComparedValues>::None;
        _378 = anchor_lang::error::AnchorError { error_name: move _379, error_code_number: move _382, error_msg: move _384, error_origin: move _387, compared_values: move _390 };
        StorageDead(_390);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_379);
        _377 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _378) -> [return: bb152, unwind: bb193];
    }

    bb152: {
        StorageDead(_378);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _377);
        StorageDead(_377);
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb155;
    }

    bb153: {
        StorageDead(_26);
        StorageDead(_25);
        drop(_21) -> [return: bb154, unwind: bb196];
    }

    bb154: {
        StorageDead(_21);
        goto -> bb174;
    }

    bb155: {
        StorageDead(_316);
        goto -> bb157;
    }

    bb156: {
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_305);
        goto -> bb157;
    }

    bb157: {
        StorageDead(_304);
        goto -> bb159;
    }

    bb158: {
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_293);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_292);
        goto -> bb164;
    }

    bb160: {
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_240);
        goto -> bb164;
    }

    bb161: {
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_209);
        StorageDead(_208);
        drop(_192) -> [return: bb162, unwind: bb188];
    }

    bb162: {
        StorageDead(_192);
        drop(_186) -> [return: bb163, unwind: bb216];
    }

    bb163: {
        StorageDead(_186);
        _444 = const false;
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        _445 = const false;
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb166;
    }

    bb165: {
        _483 = discriminant(_162);
        _434 = const false;
        _435 = const false;
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb197;
    }

    bb166: {
        StorageDead(_132);
        goto -> bb170;
    }

    bb167: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_100);
        drop(_84) -> [return: bb168, unwind: bb192];
    }

    bb168: {
        StorageDead(_84);
        drop(_78) -> [return: bb169, unwind: bb226];
    }

    bb169: {
        StorageDead(_78);
        _447 = const false;
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        _448 = const false;
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb170;
    }

    bb170: {
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_55);
        goto -> bb171;
    }

    bb171: {
        StorageDead(_35);
        drop(_26) -> [return: bb172, unwind: bb194];
    }

    bb172: {
        StorageDead(_26);
        StorageDead(_25);
        drop(_21) -> [return: bb173, unwind: bb196];
    }

    bb173: {
        StorageDead(_21);
        goto -> bb174;
    }

    bb174: {
        return;
    }

    bb175 (cleanup): {
        drop(_379) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_354) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_330) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_309) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_297) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_245) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_252) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_250) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_248) -> [return: bb184, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_246) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_217) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_192) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_205) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_186) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_109) -> [return: bb190, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_84) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_97) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_78) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_26) -> [return: bb194, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_21) -> [return: bb196, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        drop(_9) -> [return: bb196, unwind terminate(cleanup)];
    }

    bb196 (cleanup): {
        resume;
    }

    bb197: {
        _485 = discriminant(_151);
        _436 = const false;
        _437 = const false;
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_141);
        goto -> bb166;
    }

    bb198 (cleanup): {
        _493 = discriminant(_305);
        goto -> bb178;
    }

    bb199 (cleanup): {
        _494 = discriminant(_293);
        goto -> bb179;
    }

    bb200 (cleanup): {
        _495 = discriminant(_271);
        goto -> bb193;
    }

    bb201 (cleanup): {
        drop(_281) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        switchInt(_438) -> [0: bb204, otherwise: bb201];
    }

    bb203 (cleanup): {
        drop(_279) -> [return: bb206, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        switchInt(_439) -> [0: bb206, otherwise: bb203];
    }

    bb205 (cleanup): {
        drop(_277) -> [return: bb208, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        switchInt(_440) -> [0: bb208, otherwise: bb205];
    }

    bb207 (cleanup): {
        drop(_275) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        switchInt(_441) -> [0: bb210, otherwise: bb207];
    }

    bb209 (cleanup): {
        drop(_273) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        switchInt(_442) -> [0: bb193, otherwise: bb209];
    }

    bb211 (cleanup): {
        _496 = discriminant(_241);
        goto -> bb180;
    }

    bb212 (cleanup): {
        _497 = discriminant(_209);
        goto -> bb185;
    }

    bb213 (cleanup): {
        drop(_188) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        switchInt(_443) -> [0: bb216, otherwise: bb213];
    }

    bb215 (cleanup): {
        drop(_179) -> [return: bb218, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        switchInt(_444) -> [0: bb218, otherwise: bb215];
    }

    bb217 (cleanup): {
        drop(_175) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        switchInt(_445) -> [0: bb193, otherwise: bb217];
    }

    bb219 (cleanup): {
        _498 = discriminant(_142);
        goto -> bb220;
    }

    bb220 (cleanup): {
        _499 = discriminant(_162);
        goto -> bb221;
    }

    bb221 (cleanup): {
        _500 = discriminant(_151);
        goto -> bb193;
    }

    bb222 (cleanup): {
        _501 = discriminant(_101);
        goto -> bb189;
    }

    bb223 (cleanup): {
        drop(_80) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        switchInt(_446) -> [0: bb226, otherwise: bb223];
    }

    bb225 (cleanup): {
        drop(_73) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        switchInt(_447) -> [0: bb228, otherwise: bb225];
    }

    bb227 (cleanup): {
        drop(_69) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        switchInt(_448) -> [0: bb193, otherwise: bb227];
    }

    bb229 (cleanup): {
        _502 = discriminant(_41);
        goto -> bb193;
    }

    bb230 (cleanup): {
        _503 = discriminant(_27);
        goto -> bb194;
    }

    bb231: {
        (*_507) = [move _206];
        StorageDead(_206);
        _201 = move _205;
        _200 = move _201 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_205);
        StorageDead(_201);
        _199 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _200) -> [return: bb79, unwind: bb188];
    }

    bb232: {
        (*_506) = [move _98];
        StorageDead(_98);
        _93 = move _97;
        _92 = move _93 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_97);
        StorageDead(_93);
        _91 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _92) -> [return: bb38, unwind: bb192];
    }
}

alloc75 (size: 17, align: 1) {
    0x00 │ 5f 5f 65 76 65 6e 74 5f 61 75 74 68 6f 72 69 74 │ __event_authorit
    0x10 │ 79                                              │ y
}

alloc74 (size: 17, align: 1) {
    0x00 │ 5f 5f 65 76 65 6e 74 5f 61 75 74 68 6f 72 69 74 │ __event_authorit
    0x10 │ 79                                              │ y
}

alloc73 (static: ID, size: 32, align: 1) {
    0x00 │ 04 d9 0a f1 db 89 39 ec 35 ff 94 d9 64 0d 57 dc │ ......9.5...d.W.
    0x10 │ c3 27 94 bb 3e 1b b6 6f d3 ae 84 9a 84 dc db 94 │ .'..>..o........
}
