// MIR for `instruction::<impl at programs\kvault\src\lib.rs:32:1: 32:11>::deserialize_reader` before PreCodegen

fn instruction::<impl at programs\kvault\src\lib.rs:32:1: 32:11>::deserialize_reader(_1: &mut R) -> std::result::Result<instruction::InitializeSharesMetadata, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<instruction::InitializeSharesMetadata, std::io::Error>;
    let mut _2: instruction::InitializeSharesMetadata;
    let mut _3: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: std::string::String;
    let mut _12: std::string::String;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _14: std::result::Result<std::string::String, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: std::string::String;
    let mut _21: std::string::String;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _23: std::result::Result<std::string::String, std::io::Error>;
    let mut _24: &mut R;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: std::string::String;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _26;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }

    bb0: {
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <String as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<String, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        _32 = const true;
        _33 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::string::String);
        _3 = move _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <String as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb25];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<instruction::InitializeSharesMetadata, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb31];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb28;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<String, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _30 = const true;
        _31 = const true;
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_13 as Continue).0: std::string::String);
        _12 = move _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_1);
        _23 = <String as BorshDeserialize>::deserialize_reader::<R>(move _24) -> [return: bb12, unwind: bb23];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<instruction::InitializeSharesMetadata, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        drop(_3) -> [return: bb19, unwind: bb30];
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<String, std::io::Error> as Try>::branch(move _23) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = move ((_22 as Continue).0: std::string::String);
        _21 = move _29;
        StorageDead(_29);
        _2 = instruction::InitializeSharesMetadata { name: move _3, symbol: move _12, uri: move _21 };
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<instruction::InitializeSharesMetadata, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _34 = discriminant(_22);
        StorageDead(_22);
        _36 = discriminant(_13);
        _30 = const false;
        _31 = const false;
        StorageDead(_13);
        _38 = discriminant(_4);
        _32 = const false;
        _33 = const false;
        StorageDead(_4);
        goto -> bb20;
    }

    bb15: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<instruction::InitializeSharesMetadata, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        drop(_12) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_12);
        drop(_3) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        StorageDead(_3);
        StorageDead(_2);
        _40 = discriminant(_22);
        StorageDead(_22);
        goto -> bb27;
    }

    bb19: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb27;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_12) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27: {
        _42 = discriminant(_13);
        _30 = const false;
        _31 = const false;
        StorageDead(_13);
        goto -> bb28;
    }

    bb28: {
        _44 = discriminant(_4);
        _32 = const false;
        _33 = const false;
        StorageDead(_4);
        goto -> bb20;
    }

    bb29 (cleanup): {
        _46 = discriminant(_22);
        goto -> bb30;
    }

    bb30 (cleanup): {
        _47 = discriminant(_13);
        goto -> bb31;
    }

    bb31 (cleanup): {
        _48 = discriminant(_4);
        goto -> bb26;
    }
}
