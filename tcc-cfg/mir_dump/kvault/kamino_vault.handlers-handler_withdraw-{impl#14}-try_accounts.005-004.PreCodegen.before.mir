// MIR for `handlers::handler_withdraw::<impl at programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18>::try_accounts` before PreCodegen

fn handlers::handler_withdraw::<impl at programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut WithdrawFromAvailableBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::VaultState>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _38: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _68: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _113: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _128: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _143: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>>;
    let mut _158: std::result::Result<anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _173: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _188: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _189: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _192: &[u8];
    let mut _193: &mut handlers::handler_withdraw::WithdrawFromAvailableBumps;
    let mut _194: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _195: {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _201: ();
    let mut _202: bool;
    let mut _203: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _204: &anchor_lang::prelude::Signer<'_>;
    let _205: &anchor_lang::prelude::Signer<'_>;
    let mut _206: !;
    let mut _207: anchor_lang::error::Error;
    let mut _208: anchor_lang::error::Error;
    let mut _209: anchor_lang::error::ErrorCode;
    let _210: ();
    let mut _211: bool;
    let mut _212: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _213: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let _214: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _215: !;
    let mut _216: anchor_lang::error::Error;
    let mut _217: anchor_lang::error::Error;
    let mut _218: anchor_lang::error::ErrorCode;
    let _219: ();
    let mut _221: &state::VaultState;
    let mut _222: &std::cell::Ref<'_, state::VaultState>;
    let _223: std::cell::Ref<'_, state::VaultState>;
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _225: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _226: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _233: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _234: bool;
    let mut _235: &anchor_lang::prelude::Pubkey;
    let mut _236: &anchor_lang::prelude::Pubkey;
    let mut _237: !;
    let mut _238: anchor_lang::error::Error;
    let mut _239: anchor_lang::error::Error;
    let mut _240: anchor_lang::error::Error;
    let mut _241: anchor_lang::error::ErrorCode;
    let mut _242: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _243: anchor_lang::prelude::Pubkey;
    let mut _244: anchor_lang::prelude::Pubkey;
    let _245: ();
    let mut _247: &state::VaultState;
    let mut _248: &std::cell::Ref<'_, state::VaultState>;
    let _249: std::cell::Ref<'_, state::VaultState>;
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _251: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _252: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _253: isize;
    let mut _255: !;
    let mut _256: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _259: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _260: bool;
    let mut _261: &anchor_lang::prelude::Pubkey;
    let mut _262: &anchor_lang::prelude::Pubkey;
    let mut _263: !;
    let mut _264: anchor_lang::error::Error;
    let mut _265: anchor_lang::error::Error;
    let mut _266: anchor_lang::error::Error;
    let mut _267: anchor_lang::error::ErrorCode;
    let mut _268: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _269: anchor_lang::prelude::Pubkey;
    let mut _270: anchor_lang::prelude::Pubkey;
    let _271: ();
    let mut _273: &state::VaultState;
    let mut _274: &std::cell::Ref<'_, state::VaultState>;
    let _275: std::cell::Ref<'_, state::VaultState>;
    let mut _276: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _277: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _278: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _279: isize;
    let mut _281: !;
    let mut _282: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _285: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _286: bool;
    let mut _287: &anchor_lang::prelude::Pubkey;
    let mut _288: &anchor_lang::prelude::Pubkey;
    let mut _289: !;
    let mut _290: anchor_lang::error::Error;
    let mut _291: anchor_lang::error::Error;
    let mut _292: anchor_lang::error::Error;
    let mut _293: anchor_lang::error::ErrorCode;
    let mut _294: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _295: anchor_lang::prelude::Pubkey;
    let mut _296: anchor_lang::prelude::Pubkey;
    let _297: ();
    let mut _299: &state::VaultState;
    let mut _300: &std::cell::Ref<'_, state::VaultState>;
    let _301: std::cell::Ref<'_, state::VaultState>;
    let mut _302: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _303: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _304: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _305: isize;
    let mut _307: !;
    let mut _308: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _311: &anchor_lang::prelude::AccountInfo<'_>;
    let _312: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _313: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _314: bool;
    let mut _315: &anchor_lang::prelude::Pubkey;
    let mut _316: &anchor_lang::prelude::Pubkey;
    let mut _317: !;
    let mut _318: anchor_lang::error::Error;
    let mut _319: anchor_lang::error::Error;
    let mut _320: anchor_lang::error::Error;
    let mut _321: anchor_lang::error::ErrorCode;
    let mut _322: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _323: anchor_lang::prelude::Pubkey;
    let mut _324: anchor_lang::prelude::Pubkey;
    let _325: ();
    let mut _327: &state::VaultState;
    let mut _328: &std::cell::Ref<'_, state::VaultState>;
    let _329: std::cell::Ref<'_, state::VaultState>;
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _331: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _332: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _333: isize;
    let mut _335: !;
    let mut _336: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _339: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _340: bool;
    let mut _341: &anchor_lang::prelude::Pubkey;
    let mut _342: &anchor_lang::prelude::Pubkey;
    let mut _343: !;
    let mut _344: anchor_lang::error::Error;
    let mut _345: anchor_lang::error::Error;
    let mut _346: anchor_lang::error::Error;
    let mut _347: anchor_lang::error::ErrorCode;
    let mut _348: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _349: anchor_lang::prelude::Pubkey;
    let mut _350: anchor_lang::prelude::Pubkey;
    let _351: ();
    let mut _352: bool;
    let mut _353: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _355: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _356: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _357: !;
    let mut _358: anchor_lang::error::Error;
    let mut _359: anchor_lang::error::Error;
    let mut _360: anchor_lang::error::ErrorCode;
    let _361: ();
    let mut _362: bool;
    let mut _363: &&anchor_lang::prelude::Pubkey;
    let _364: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _365: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _366: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _367: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _368: &&anchor_lang::prelude::Pubkey;
    let _369: &anchor_lang::prelude::Pubkey;
    let _370: anchor_lang::prelude::Pubkey;
    let mut _371: &anchor_lang::prelude::AccountInfo<'_>;
    let _372: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _373: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _374: !;
    let mut _375: anchor_lang::error::Error;
    let mut _376: anchor_lang::error::ErrorCode;
    let _377: ();
    let _378: ();
    let mut _379: bool;
    let mut _380: &&anchor_lang::prelude::Pubkey;
    let _381: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _382: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _383: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _384: &&anchor_lang::prelude::Pubkey;
    let _385: &anchor_lang::prelude::Pubkey;
    let _386: anchor_lang::prelude::Pubkey;
    let mut _387: &anchor_lang::prelude::AccountInfo<'_>;
    let _388: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _389: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _390: !;
    let mut _391: anchor_lang::error::Error;
    let mut _392: anchor_lang::error::ErrorCode;
    let mut _394: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _395: &anchor_spl::token_interface::TokenAccount;
    let _396: &anchor_spl::token_interface::TokenAccount;
    let mut _397: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _399: &anchor_lang::prelude::Signer<'_>;
    let _400: ();
    let mut _401: bool;
    let mut _402: &anchor_lang::prelude::Pubkey;
    let mut _403: &anchor_lang::prelude::Pubkey;
    let mut _404: !;
    let mut _405: anchor_lang::error::Error;
    let mut _406: anchor_lang::error::Error;
    let mut _407: anchor_lang::error::Error;
    let mut _408: anchor_lang::error::ErrorCode;
    let mut _409: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _410: anchor_lang::prelude::Pubkey;
    let mut _411: anchor_lang::prelude::Pubkey;
    let mut _413: &anchor_lang::prelude::Pubkey;
    let _414: &anchor_lang::prelude::Pubkey;
    let mut _415: &anchor_lang::prelude::Pubkey;
    let _416: &anchor_lang::prelude::Pubkey;
    let _417: anchor_lang::prelude::Pubkey;
    let mut _418: &anchor_lang::prelude::Pubkey;
    let _419: anchor_lang::prelude::Pubkey;
    let mut _420: &anchor_lang::prelude::Pubkey;
    let _421: &state::VaultState;
    let mut _422: &std::cell::Ref<'_, state::VaultState>;
    let _423: std::cell::Ref<'_, state::VaultState>;
    let mut _424: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _425: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _426: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _427: isize;
    let mut _429: !;
    let mut _430: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _432: &anchor_lang::prelude::Pubkey;
    let _433: &anchor_lang::prelude::Pubkey;
    let _434: anchor_lang::prelude::Pubkey;
    let mut _435: &anchor_lang::prelude::AccountInfo<'_>;
    let _436: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _437: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _439: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _440: bool;
    let mut _441: &anchor_lang::prelude::Pubkey;
    let mut _442: &anchor_lang::prelude::Pubkey;
    let mut _443: !;
    let mut _444: anchor_lang::error::Error;
    let mut _445: anchor_lang::error::Error;
    let mut _446: anchor_lang::error::Error;
    let mut _447: anchor_lang::error::ErrorCode;
    let mut _448: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _449: anchor_lang::prelude::Pubkey;
    let mut _450: anchor_lang::prelude::Pubkey;
    let _451: ();
    let mut _452: bool;
    let mut _453: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _454: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _455: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _456: !;
    let mut _457: anchor_lang::error::Error;
    let mut _458: anchor_lang::error::Error;
    let mut _459: anchor_lang::error::ErrorCode;
    let _460: ();
    let mut _461: bool;
    let mut _462: &bool;
    let mut _463: !;
    let mut _464: anchor_lang::error::Error;
    let mut _465: anchor_lang::error::Error;
    let mut _466: anchor_lang::error::ErrorCode;
    let _467: ();
    let _468: ();
    let mut _469: bool;
    let mut _470: &&anchor_lang::prelude::Pubkey;
    let _471: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _472: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _473: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _474: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _475: &&anchor_lang::prelude::Pubkey;
    let _476: &anchor_lang::prelude::Pubkey;
    let _477: anchor_lang::prelude::Pubkey;
    let mut _478: &anchor_lang::prelude::AccountInfo<'_>;
    let _479: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _480: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _481: !;
    let mut _482: anchor_lang::error::Error;
    let mut _483: anchor_lang::error::ErrorCode;
    let mut _485: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _486: &anchor_spl::token_interface::TokenAccount;
    let _487: &anchor_spl::token_interface::TokenAccount;
    let mut _488: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _490: &anchor_lang::prelude::Signer<'_>;
    let _491: ();
    let mut _492: bool;
    let mut _493: &anchor_lang::prelude::Pubkey;
    let mut _494: &anchor_lang::prelude::Pubkey;
    let mut _495: !;
    let mut _496: anchor_lang::error::Error;
    let mut _497: anchor_lang::error::Error;
    let mut _498: anchor_lang::error::Error;
    let mut _499: anchor_lang::error::ErrorCode;
    let mut _500: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _501: anchor_lang::prelude::Pubkey;
    let mut _502: anchor_lang::prelude::Pubkey;
    let mut _504: &anchor_lang::prelude::Pubkey;
    let _505: &anchor_lang::prelude::Pubkey;
    let mut _506: &anchor_lang::prelude::Pubkey;
    let _507: &anchor_lang::prelude::Pubkey;
    let _508: anchor_lang::prelude::Pubkey;
    let mut _509: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _510: &anchor_lang::prelude::Pubkey;
    let _511: &anchor_lang::prelude::Pubkey;
    let _512: anchor_lang::prelude::Pubkey;
    let mut _513: &anchor_lang::prelude::AccountInfo<'_>;
    let _514: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _515: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _517: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _518: bool;
    let mut _519: &anchor_lang::prelude::Pubkey;
    let mut _520: &anchor_lang::prelude::Pubkey;
    let mut _521: !;
    let mut _522: anchor_lang::error::Error;
    let mut _523: anchor_lang::error::Error;
    let mut _524: anchor_lang::error::Error;
    let mut _525: anchor_lang::error::ErrorCode;
    let mut _526: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _527: anchor_lang::prelude::Pubkey;
    let mut _528: anchor_lang::prelude::Pubkey;
    let _529: ();
    let mut _530: bool;
    let mut _531: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _532: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _533: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _534: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _535: !;
    let mut _536: anchor_lang::error::Error;
    let mut _537: anchor_lang::error::Error;
    let mut _538: anchor_lang::error::ErrorCode;
    let _539: ();
    let mut _540: bool;
    let mut _541: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _542: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _543: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _544: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _545: !;
    let mut _546: anchor_lang::error::Error;
    let mut _547: anchor_lang::error::Error;
    let mut _548: anchor_lang::error::ErrorCode;
    let mut _551: (anchor_lang::prelude::Pubkey, u8);
    let mut _552: &[&[u8]];
    let mut _553: &[&[u8]; 1];
    let _554: &[&[u8]; 1];
    let _555: [&[u8]; 1];
    let mut _556: &[u8];
    let mut _557: &[u8; 17];
    let _558: &[u8; 17];
    let mut _559: &anchor_lang::prelude::Pubkey;
    let _560: &&anchor_lang::prelude::Pubkey;
    let mut _561: u8;
    let _562: ();
    let mut _563: bool;
    let mut _564: &anchor_lang::prelude::Pubkey;
    let _565: anchor_lang::prelude::Pubkey;
    let mut _566: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _567: &anchor_lang::prelude::Pubkey;
    let mut _568: !;
    let mut _569: anchor_lang::error::Error;
    let mut _570: anchor_lang::error::Error;
    let mut _571: anchor_lang::error::Error;
    let mut _572: anchor_lang::error::ErrorCode;
    let mut _573: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _574: anchor_lang::prelude::Pubkey;
    let mut _575: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _576: anchor_lang::prelude::Pubkey;
    let mut _577: handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _578: anchor_lang::prelude::Signer<'_>;
    let mut _579: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _580: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _581: anchor_lang::prelude::AccountInfo<'_>;
    let mut _582: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _583: anchor_lang::prelude::AccountInfo<'_>;
    let mut _584: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _585: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _586: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _587: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _588: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
    let mut _589: anchor_lang::prelude::AccountInfo<'_>;
    let mut _590: anchor_lang::prelude::AccountInfo<'_>;
    let mut _592: &anchor_lang::prelude::Pubkey;
    let mut _593: bool;
    let mut _594: bool;
    let mut _595: bool;
    let mut _596: bool;
    let mut _597: bool;
    let mut _598: bool;
    let mut _599: bool;
    let mut _600: bool;
    let mut _601: bool;
    let mut _602: bool;
    let mut _603: bool;
    let mut _604: bool;
    let mut _605: bool;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    let mut _675: isize;
    let mut _676: isize;
    let mut _677: isize;
    let mut _678: isize;
    let mut _679: isize;
    let mut _680: isize;
    let mut _681: isize;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _702: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _703: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _704: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _705: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug user => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        scope 6 {
            debug vault_state => _21;
            let _36: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
            scope 11 {
                debug token_vault => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug base_vault_authority => _51;
                    let _66: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                    scope 21 {
                        debug user_token_ata => _66;
                        let _81: anchor_lang::prelude::AccountInfo<'_>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::AccountInfo<'_>;
                        scope 26 {
                            debug token_mint => _81;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 31 {
                                debug user_shares_ata => _96;
                                let _111: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                scope 36 {
                                    debug shares_mint => _111;
                                    let _126: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                    scope 41 {
                                        debug token_program => _126;
                                        let _141: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                        scope 46 {
                                            debug shares_token_program => _141;
                                            let _156: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
                                            scope 51 {
                                                debug klend_program => _156;
                                                let _171: anchor_lang::prelude::AccountInfo<'_>;
                                                let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _185: anchor_lang::prelude::AccountInfo<'_>;
                                                scope 56 {
                                                    debug event_authority => _171;
                                                    let _186: anchor_lang::prelude::AccountInfo<'_>;
                                                    let _197: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _200: anchor_lang::prelude::AccountInfo<'_>;
                                                    scope 61 {
                                                        debug program => _186;
                                                        let _220: anchor_lang::prelude::Pubkey;
                                                        let _228: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _231: std::cell::Ref<'_, state::VaultState>;
                                                        let _246: anchor_lang::prelude::Pubkey;
                                                        let _254: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _257: std::cell::Ref<'_, state::VaultState>;
                                                        let _272: anchor_lang::prelude::Pubkey;
                                                        let _280: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _283: std::cell::Ref<'_, state::VaultState>;
                                                        let _298: anchor_lang::prelude::Pubkey;
                                                        let _306: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _309: std::cell::Ref<'_, state::VaultState>;
                                                        let _326: anchor_lang::prelude::Pubkey;
                                                        let _334: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _337: std::cell::Ref<'_, state::VaultState>;
                                                        let _393: anchor_lang::prelude::Pubkey;
                                                        let _484: anchor_lang::prelude::Pubkey;
                                                        let _549: anchor_lang::prelude::Pubkey;
                                                        let _550: u8;
                                                        let mut _591: &[&[u8]; 1];
                                                        scope 66 {
                                                            debug my_key => _220;
                                                            let _232: anchor_lang::prelude::Pubkey;
                                                            scope 71 {
                                                                debug target_key => _232;
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug residual => _228;
                                                            scope 68 {
                                                            }
                                                        }
                                                        scope 69 {
                                                            debug val => _231;
                                                            scope 70 {
                                                            }
                                                        }
                                                        scope 72 {
                                                            debug my_key => _246;
                                                            let _258: anchor_lang::prelude::Pubkey;
                                                            scope 77 {
                                                                debug target_key => _258;
                                                            }
                                                        }
                                                        scope 73 {
                                                            debug residual => _254;
                                                            scope 74 {
                                                            }
                                                        }
                                                        scope 75 {
                                                            debug val => _257;
                                                            scope 76 {
                                                            }
                                                        }
                                                        scope 78 {
                                                            debug my_key => _272;
                                                            let _284: anchor_lang::prelude::Pubkey;
                                                            scope 83 {
                                                                debug target_key => _284;
                                                            }
                                                        }
                                                        scope 79 {
                                                            debug residual => _280;
                                                            scope 80 {
                                                            }
                                                        }
                                                        scope 81 {
                                                            debug val => _283;
                                                            scope 82 {
                                                            }
                                                        }
                                                        scope 84 {
                                                            debug my_key => _298;
                                                            let _310: anchor_lang::prelude::Pubkey;
                                                            scope 89 {
                                                                debug target_key => _310;
                                                            }
                                                        }
                                                        scope 85 {
                                                            debug residual => _306;
                                                            scope 86 {
                                                            }
                                                        }
                                                        scope 87 {
                                                            debug val => _309;
                                                            scope 88 {
                                                            }
                                                        }
                                                        scope 90 {
                                                            debug my_key => _326;
                                                            let _338: anchor_lang::prelude::Pubkey;
                                                            scope 95 {
                                                                debug target_key => _338;
                                                            }
                                                        }
                                                        scope 91 {
                                                            debug residual => _334;
                                                            scope 92 {
                                                            }
                                                        }
                                                        scope 93 {
                                                            debug val => _337;
                                                            scope 94 {
                                                            }
                                                        }
                                                        scope 96 {
                                                            debug my_owner => _393;
                                                            let _398: anchor_lang::prelude::Pubkey;
                                                            scope 97 {
                                                                debug wallet_address => _398;
                                                                let _412: anchor_lang::prelude::Pubkey;
                                                                let _428: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _431: std::cell::Ref<'_, state::VaultState>;
                                                                scope 98 {
                                                                    debug __associated_token_address => _412;
                                                                    let _438: anchor_lang::prelude::Pubkey;
                                                                    scope 103 {
                                                                        debug my_key => _438;
                                                                    }
                                                                }
                                                                scope 99 {
                                                                    debug residual => _428;
                                                                    scope 100 {
                                                                    }
                                                                }
                                                                scope 101 {
                                                                    debug val => _431;
                                                                    scope 102 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 104 {
                                                            debug my_owner => _484;
                                                            let _489: anchor_lang::prelude::Pubkey;
                                                            scope 105 {
                                                                debug wallet_address => _489;
                                                                let _503: anchor_lang::prelude::Pubkey;
                                                                scope 106 {
                                                                    debug __associated_token_address => _503;
                                                                    let _516: anchor_lang::prelude::Pubkey;
                                                                    scope 107 {
                                                                        debug my_key => _516;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 108 {
                                                            debug __pda_address => _549;
                                                            debug __bump => _550;
                                                        }
                                                    }
                                                    scope 62 {
                                                        debug residual => _197;
                                                        scope 63 {
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug val => _200;
                                                        scope 65 {
                                                        }
                                                    }
                                                }
                                                scope 57 {
                                                    debug residual => _182;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug val => _185;
                                                    scope 60 {
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _167;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _170;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 47 {
                                            debug residual => _152;
                                            scope 48 {
                                            }
                                        }
                                        scope 49 {
                                            debug val => _155;
                                            scope 50 {
                                            }
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _137;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _140;
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _122;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _125;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _593 = const false;
        _605 = const false;
        _604 = const false;
        _603 = const false;
        _602 = const false;
        _601 = const false;
        _600 = const false;
        _599 = const false;
        _598 = const false;
        _597 = const false;
        _596 = const false;
        _595 = const false;
        _594 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _9, move _15) -> [return: bb2, unwind: bb301];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb301];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _606 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb328];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _680 = discriminant(_7);
        StorageDead(_7);
        goto -> bb286;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _24, move _30) -> [return: bb9, unwind: bb301];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb301];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _21 = move _35;
        StorageDead(_35);
        _608 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb327];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _678 = discriminant(_22);
        StorageDead(_22);
        goto -> bb285;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _38 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _39, move _45) -> [return: bb15, unwind: bb301];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb301];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _36 = move _50;
        StorageDead(_50);
        _610 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb300];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb326];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _676 = discriminant(_37);
        StorageDead(_37);
        goto -> bb284;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _54, move _60) -> [return: bb21, unwind: bb300];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb300];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _612 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb299];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb325];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _674 = discriminant(_52);
        StorageDead(_52);
        goto -> bb283;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _68 = std::result::Result::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _69, move _75) -> [return: bb27, unwind: bb299];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb299];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _66 = move _80;
        StorageDead(_80);
        _614 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb299];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb324];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _672 = discriminant(_67);
        StorageDead(_67);
        goto -> bb282;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _83 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _84, move _90) -> [return: bb33, unwind: bb299];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb299];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _81 = move _95;
        StorageDead(_95);
        _616 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb298];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb323];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _670 = discriminant(_82);
        StorageDead(_82);
        goto -> bb281;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _99, move _105) -> [return: bb39, unwind: bb298];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb298];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _618 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb297];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb322];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _668 = discriminant(_97);
        StorageDead(_97);
        goto -> bb280;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _113 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _114, move _120) -> [return: bb45, unwind: bb297];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb297];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _111 = move _125;
        StorageDead(_125);
        _620 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb296];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb321];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _666 = discriminant(_112);
        StorageDead(_112);
        goto -> bb279;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _128 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _129, move _135) -> [return: bb51, unwind: bb296];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb296];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _126 = move _140;
        StorageDead(_140);
        _622 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb296];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb320];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _664 = discriminant(_127);
        StorageDead(_127);
        goto -> bb278;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _143 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _144, move _150) -> [return: bb57, unwind: bb296];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb296];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _141 = move _155;
        StorageDead(_155);
        _624 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <anchor_lang::prelude::Program<'_, KaminoLending> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb296];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb319];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _662 = discriminant(_142);
        StorageDead(_142);
        goto -> bb277;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _158 = std::result::Result::<anchor_lang::prelude::Program<'_, KaminoLending>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _159, move _165) -> [return: bb63, unwind: bb296];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<anchor_lang::prelude::Program<'_, KaminoLending>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb296];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>);
        _156 = move _170;
        StorageDead(_170);
        _626 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_3);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb296];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb318];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _660 = discriminant(_157);
        StorageDead(_157);
        goto -> bb276;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _173 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _174, move _180) -> [return: bb69, unwind: bb296];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb296];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _171 = move _185;
        StorageDead(_185);
        _628 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_1);
        StorageLive(_191);
        _191 = &mut (*_2);
        StorageLive(_192);
        _192 = &(*_3);
        StorageLive(_193);
        _193 = &mut (*_4);
        StorageLive(_194);
        _194 = &mut (*_5);
        _189 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, WithdrawFromAvailableBumps>>::try_accounts(move _190, move _191, move _192, move _193, move _194) -> [return: bb74, unwind: bb295];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb317];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _658 = discriminant(_172);
        StorageDead(_172);
        goto -> bb275;
    }

    bb74: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_195);
        _195 = {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18};
        _188 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_withdraw.rs:108:10: 108:18}>(move _189, move _195) -> [return: bb75, unwind: bb295];
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_189);
        _187 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb76, unwind: bb295];
    }

    bb76: {
        StorageDead(_188);
        _196 = discriminant(_187);
        switchInt(move _196) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_200);
        _200 = move ((_187 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _186 = move _200;
        StorageDead(_200);
        _630 = discriminant(_187);
        StorageDead(_187);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_6;
        _204 = &(*_205);
        _203 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _204) -> [return: bb80, unwind: bb294];
    }

    bb78: {
        StorageLive(_197);
        _197 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _199) -> [return: bb79, unwind: bb316];
    }

    bb79: {
        StorageDead(_199);
        StorageDead(_197);
        _656 = discriminant(_187);
        StorageDead(_187);
        goto -> bb274;
    }

    bb80: {
        StorageDead(_204);
        _202 = ((*_203).6: bool);
        switchInt(move _202) -> [0: bb81, otherwise: bb84];
    }

    bb81: {
        StorageDead(_205);
        StorageDead(_203);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = ConstraintMut;
        _208 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _209) -> [return: bb82, unwind: bb294];
    }

    bb82: {
        StorageDead(_209);
        _207 = anchor_lang::error::Error::with_account_name::<&str>(move _208, const "user") -> [return: bb83, unwind: bb294];
    }

    bb83: {
        StorageDead(_208);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _207);
        StorageDead(_207);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb273;
    }

    bb84: {
        StorageDead(_205);
        StorageDead(_203);
        _201 = const ();
        StorageDead(_202);
        StorageDead(_201);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_21;
        _213 = &(*_214);
        _212 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _213) -> [return: bb85, unwind: bb294];
    }

    bb85: {
        StorageDead(_213);
        _211 = ((*_212).6: bool);
        switchInt(move _211) -> [0: bb86, otherwise: bb89];
    }

    bb86: {
        StorageDead(_214);
        StorageDead(_212);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = ConstraintMut;
        _217 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _218) -> [return: bb87, unwind: bb294];
    }

    bb87: {
        StorageDead(_218);
        _216 = anchor_lang::error::Error::with_account_name::<&str>(move _217, const "vault_state") -> [return: bb88, unwind: bb294];
    }

    bb88: {
        StorageDead(_217);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _216);
        StorageDead(_216);
        StorageDead(_211);
        StorageDead(_210);
        goto -> bb273;
    }

    bb89: {
        StorageDead(_214);
        StorageDead(_212);
        _210 = const ();
        StorageDead(_211);
        StorageDead(_210);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_21;
        _225 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _226) -> [return: bb90, unwind: bb294];
    }

    bb90: {
        StorageDead(_226);
        _224 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _225) -> [return: bb91, unwind: bb294];
    }

    bb91: {
        _604 = const true;
        _605 = const true;
        StorageDead(_225);
        _227 = discriminant(_224);
        switchInt(move _227) -> [0: bb92, 1: bb93, otherwise: bb5];
    }

    bb92: {
        StorageLive(_231);
        _231 = move ((_224 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _223 = move _231;
        StorageDead(_231);
        _222 = &_223;
        _221 = <Ref<'_, state::VaultState> as Deref>::deref(move _222) -> [return: bb95, unwind: bb293];
    }

    bb93: {
        StorageLive(_228);
        _228 = move ((_224 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_230);
        _230 = move _228;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _230) -> [return: bb94, unwind: bb315];
    }

    bb94: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_222);
        _654 = discriminant(_224);
        _604 = const false;
        _605 = const false;
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_221);
        goto -> bb272;
    }

    bb95: {
        StorageDead(_222);
        _220 = ((*_221).1: anchor_lang::prelude::Pubkey);
        drop(_223) -> [return: bb302, unwind: bb315];
    }

    bb96: {
        StorageDead(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_220;
        StorageLive(_236);
        _236 = &_232;
        _234 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _235, move _236) -> [return: bb97, unwind: bb294];
    }

    bb97: {
        switchInt(move _234) -> [0: bb102, otherwise: bb98];
    }

    bb98: {
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = ConstraintHasOne;
        _240 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _241) -> [return: bb99, unwind: bb294];
    }

    bb99: {
        StorageDead(_241);
        _239 = anchor_lang::error::Error::with_account_name::<&str>(move _240, const "vault_state") -> [return: bb100, unwind: bb294];
    }

    bb100: {
        StorageDead(_240);
        StorageLive(_242);
        StorageLive(_243);
        _243 = _220;
        StorageLive(_244);
        _244 = _232;
        _242 = (move _243, move _244);
        StorageDead(_244);
        StorageDead(_243);
        _238 = anchor_lang::error::Error::with_pubkeys(move _239, move _242) -> [return: bb101, unwind: bb294];
    }

    bb101: {
        StorageDead(_242);
        StorageDead(_239);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _238);
        StorageDead(_238);
        StorageDead(_234);
        StorageDead(_232);
        goto -> bb272;
    }

    bb102: {
        StorageDead(_236);
        StorageDead(_235);
        _219 = const ();
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &_21;
        _251 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _252) -> [return: bb103, unwind: bb294];
    }

    bb103: {
        StorageDead(_252);
        _250 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _251) -> [return: bb104, unwind: bb294];
    }

    bb104: {
        _602 = const true;
        _603 = const true;
        StorageDead(_251);
        _253 = discriminant(_250);
        switchInt(move _253) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_257);
        _257 = move ((_250 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _249 = move _257;
        StorageDead(_257);
        _248 = &_249;
        _247 = <Ref<'_, state::VaultState> as Deref>::deref(move _248) -> [return: bb108, unwind: bb292];
    }

    bb106: {
        StorageLive(_254);
        _254 = move ((_250 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_256);
        _256 = move _254;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _256) -> [return: bb107, unwind: bb314];
    }

    bb107: {
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_248);
        _652 = discriminant(_250);
        _602 = const false;
        _603 = const false;
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_247);
        goto -> bb271;
    }

    bb108: {
        StorageDead(_248);
        _246 = ((*_247).5: anchor_lang::prelude::Pubkey);
        drop(_249) -> [return: bb303, unwind: bb314];
    }

    bb109: {
        StorageDead(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &_246;
        StorageLive(_262);
        _262 = &_258;
        _260 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _261, move _262) -> [return: bb110, unwind: bb294];
    }

    bb110: {
        switchInt(move _260) -> [0: bb115, otherwise: bb111];
    }

    bb111: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = ConstraintHasOne;
        _266 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _267) -> [return: bb112, unwind: bb294];
    }

    bb112: {
        StorageDead(_267);
        _265 = anchor_lang::error::Error::with_account_name::<&str>(move _266, const "vault_state") -> [return: bb113, unwind: bb294];
    }

    bb113: {
        StorageDead(_266);
        StorageLive(_268);
        StorageLive(_269);
        _269 = _246;
        StorageLive(_270);
        _270 = _258;
        _268 = (move _269, move _270);
        StorageDead(_270);
        StorageDead(_269);
        _264 = anchor_lang::error::Error::with_pubkeys(move _265, move _268) -> [return: bb114, unwind: bb294];
    }

    bb114: {
        StorageDead(_268);
        StorageDead(_265);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _264);
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_258);
        goto -> bb271;
    }

    bb115: {
        StorageDead(_262);
        StorageDead(_261);
        _245 = const ();
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_21;
        _277 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _278) -> [return: bb116, unwind: bb294];
    }

    bb116: {
        StorageDead(_278);
        _276 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _277) -> [return: bb117, unwind: bb294];
    }

    bb117: {
        _600 = const true;
        _601 = const true;
        StorageDead(_277);
        _279 = discriminant(_276);
        switchInt(move _279) -> [0: bb118, 1: bb119, otherwise: bb5];
    }

    bb118: {
        StorageLive(_283);
        _283 = move ((_276 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _275 = move _283;
        StorageDead(_283);
        _274 = &_275;
        _273 = <Ref<'_, state::VaultState> as Deref>::deref(move _274) -> [return: bb121, unwind: bb291];
    }

    bb119: {
        StorageLive(_280);
        _280 = move ((_276 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_282);
        _282 = move _280;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _282) -> [return: bb120, unwind: bb313];
    }

    bb120: {
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_274);
        _650 = discriminant(_276);
        _600 = const false;
        _601 = const false;
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_273);
        goto -> bb270;
    }

    bb121: {
        StorageDead(_274);
        _272 = ((*_273).3: anchor_lang::prelude::Pubkey);
        drop(_275) -> [return: bb304, unwind: bb313];
    }

    bb122: {
        StorageDead(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_272;
        StorageLive(_288);
        _288 = &_284;
        _286 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _287, move _288) -> [return: bb123, unwind: bb294];
    }

    bb123: {
        switchInt(move _286) -> [0: bb128, otherwise: bb124];
    }

    bb124: {
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = ConstraintHasOne;
        _292 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _293) -> [return: bb125, unwind: bb294];
    }

    bb125: {
        StorageDead(_293);
        _291 = anchor_lang::error::Error::with_account_name::<&str>(move _292, const "vault_state") -> [return: bb126, unwind: bb294];
    }

    bb126: {
        StorageDead(_292);
        StorageLive(_294);
        StorageLive(_295);
        _295 = _272;
        StorageLive(_296);
        _296 = _284;
        _294 = (move _295, move _296);
        StorageDead(_296);
        StorageDead(_295);
        _290 = anchor_lang::error::Error::with_pubkeys(move _291, move _294) -> [return: bb127, unwind: bb294];
    }

    bb127: {
        StorageDead(_294);
        StorageDead(_291);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _290);
        StorageDead(_290);
        StorageDead(_286);
        StorageDead(_284);
        goto -> bb270;
    }

    bb128: {
        StorageDead(_288);
        StorageDead(_287);
        _271 = const ();
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_272);
        StorageDead(_271);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_21;
        _303 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _304) -> [return: bb129, unwind: bb294];
    }

    bb129: {
        StorageDead(_304);
        _302 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _303) -> [return: bb130, unwind: bb294];
    }

    bb130: {
        _598 = const true;
        _599 = const true;
        StorageDead(_303);
        _305 = discriminant(_302);
        switchInt(move _305) -> [0: bb131, 1: bb132, otherwise: bb5];
    }

    bb131: {
        StorageLive(_309);
        _309 = move ((_302 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _301 = move _309;
        StorageDead(_309);
        _300 = &_301;
        _299 = <Ref<'_, state::VaultState> as Deref>::deref(move _300) -> [return: bb134, unwind: bb290];
    }

    bb132: {
        StorageLive(_306);
        _306 = move ((_302 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_308);
        _308 = move _306;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _308) -> [return: bb133, unwind: bb312];
    }

    bb133: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_300);
        _648 = discriminant(_302);
        _598 = const false;
        _599 = const false;
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_299);
        goto -> bb269;
    }

    bb134: {
        StorageDead(_300);
        _298 = ((*_299).6: anchor_lang::prelude::Pubkey);
        drop(_301) -> [return: bb305, unwind: bb312];
    }

    bb135: {
        _311 = &(*_312);
        StorageDead(_313);
        _310 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _311) -> [return: bb136, unwind: bb294];
    }

    bb136: {
        StorageDead(_311);
        StorageDead(_312);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_298;
        StorageLive(_316);
        _316 = &_310;
        _314 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _315, move _316) -> [return: bb137, unwind: bb294];
    }

    bb137: {
        switchInt(move _314) -> [0: bb142, otherwise: bb138];
    }

    bb138: {
        StorageDead(_316);
        StorageDead(_315);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = ConstraintHasOne;
        _320 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _321) -> [return: bb139, unwind: bb294];
    }

    bb139: {
        StorageDead(_321);
        _319 = anchor_lang::error::Error::with_account_name::<&str>(move _320, const "vault_state") -> [return: bb140, unwind: bb294];
    }

    bb140: {
        StorageDead(_320);
        StorageLive(_322);
        StorageLive(_323);
        _323 = _298;
        StorageLive(_324);
        _324 = _310;
        _322 = (move _323, move _324);
        StorageDead(_324);
        StorageDead(_323);
        _318 = anchor_lang::error::Error::with_pubkeys(move _319, move _322) -> [return: bb141, unwind: bb294];
    }

    bb141: {
        StorageDead(_322);
        StorageDead(_319);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _318);
        StorageDead(_318);
        StorageDead(_314);
        StorageDead(_310);
        goto -> bb269;
    }

    bb142: {
        StorageDead(_316);
        StorageDead(_315);
        _297 = const ();
        StorageDead(_314);
        StorageDead(_310);
        StorageDead(_298);
        StorageDead(_297);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_21;
        _331 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _332) -> [return: bb143, unwind: bb294];
    }

    bb143: {
        StorageDead(_332);
        _330 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _331) -> [return: bb144, unwind: bb294];
    }

    bb144: {
        _596 = const true;
        _597 = const true;
        StorageDead(_331);
        _333 = discriminant(_330);
        switchInt(move _333) -> [0: bb145, 1: bb146, otherwise: bb5];
    }

    bb145: {
        StorageLive(_337);
        _337 = move ((_330 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _329 = move _337;
        StorageDead(_337);
        _328 = &_329;
        _327 = <Ref<'_, state::VaultState> as Deref>::deref(move _328) -> [return: bb148, unwind: bb289];
    }

    bb146: {
        StorageLive(_334);
        _334 = move ((_330 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_336);
        _336 = move _334;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _336) -> [return: bb147, unwind: bb311];
    }

    bb147: {
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_328);
        _646 = discriminant(_330);
        _596 = const false;
        _597 = const false;
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_327);
        goto -> bb268;
    }

    bb148: {
        StorageDead(_328);
        _326 = ((*_327).7: anchor_lang::prelude::Pubkey);
        drop(_329) -> [return: bb306, unwind: bb311];
    }

    bb149: {
        StorageDead(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &_326;
        StorageLive(_342);
        _342 = &_338;
        _340 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _341, move _342) -> [return: bb150, unwind: bb294];
    }

    bb150: {
        switchInt(move _340) -> [0: bb155, otherwise: bb151];
    }

    bb151: {
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = ConstraintHasOne;
        _346 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _347) -> [return: bb152, unwind: bb294];
    }

    bb152: {
        StorageDead(_347);
        _345 = anchor_lang::error::Error::with_account_name::<&str>(move _346, const "vault_state") -> [return: bb153, unwind: bb294];
    }

    bb153: {
        StorageDead(_346);
        StorageLive(_348);
        StorageLive(_349);
        _349 = _326;
        StorageLive(_350);
        _350 = _338;
        _348 = (move _349, move _350);
        StorageDead(_350);
        StorageDead(_349);
        _344 = anchor_lang::error::Error::with_pubkeys(move _345, move _348) -> [return: bb154, unwind: bb294];
    }

    bb154: {
        StorageDead(_348);
        StorageDead(_345);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _344);
        StorageDead(_344);
        StorageDead(_340);
        StorageDead(_338);
        goto -> bb268;
    }

    bb155: {
        StorageDead(_342);
        StorageDead(_341);
        _325 = const ();
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_326);
        StorageDead(_325);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &_36;
        _355 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _356) -> [return: bb156, unwind: bb294];
    }

    bb156: {
        _354 = &(*_355);
        StorageDead(_356);
        _353 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _354) -> [return: bb157, unwind: bb294];
    }

    bb157: {
        StorageDead(_354);
        _352 = ((*_353).6: bool);
        switchInt(move _352) -> [0: bb158, otherwise: bb161];
    }

    bb158: {
        StorageDead(_355);
        StorageDead(_353);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = ConstraintMut;
        _359 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _360) -> [return: bb159, unwind: bb294];
    }

    bb159: {
        StorageDead(_360);
        _358 = anchor_lang::error::Error::with_account_name::<&str>(move _359, const "token_vault") -> [return: bb160, unwind: bb294];
    }

    bb160: {
        StorageDead(_359);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _358);
        StorageDead(_358);
        StorageDead(_352);
        StorageDead(_351);
        goto -> bb273;
    }

    bb161: {
        StorageDead(_355);
        StorageDead(_353);
        _351 = const ();
        StorageDead(_352);
        StorageDead(_351);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &_36;
        _366 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _367) -> [return: bb162, unwind: bb294];
    }

    bb162: {
        _365 = &(*_366);
        StorageDead(_367);
        _364 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _365) -> [return: bb163, unwind: bb294];
    }

    bb163: {
        StorageDead(_365);
        _363 = &((*_364).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = &_126;
        _372 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _373) -> [return: bb164, unwind: bb294];
    }

    bb164: {
        _371 = &(*_372);
        StorageDead(_373);
        _370 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _371) -> [return: bb165, unwind: bb294];
    }

    bb165: {
        StorageDead(_371);
        _369 = &_370;
        _368 = &_369;
        _362 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _363, move _368) -> [return: bb166, unwind: bb294];
    }

    bb166: {
        switchInt(move _362) -> [0: bb169, otherwise: bb167];
    }

    bb167: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        StorageLive(_375);
        StorageLive(_376);
        _376 = ConstraintTokenTokenProgram;
        _375 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _376) -> [return: bb168, unwind: bb294];
    }

    bb168: {
        StorageDead(_376);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _375);
        StorageDead(_375);
        StorageDead(_362);
        StorageDead(_361);
        goto -> bb273;
    }

    bb169: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        _361 = const ();
        StorageDead(_362);
        StorageDead(_361);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &_66;
        _382 = &(*_383);
        _381 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _382) -> [return: bb170, unwind: bb294];
    }

    bb170: {
        StorageDead(_382);
        _380 = &((*_381).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = &_126;
        _388 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _389) -> [return: bb171, unwind: bb294];
    }

    bb171: {
        _387 = &(*_388);
        StorageDead(_389);
        _386 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _387) -> [return: bb172, unwind: bb294];
    }

    bb172: {
        StorageDead(_387);
        _385 = &_386;
        _384 = &_385;
        _379 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _380, move _384) -> [return: bb173, unwind: bb294];
    }

    bb173: {
        switchInt(move _379) -> [0: bb176, otherwise: bb174];
    }

    bb174: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageLive(_391);
        StorageLive(_392);
        _392 = ConstraintAssociatedTokenTokenProgram;
        _391 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _392) -> [return: bb175, unwind: bb294];
    }

    bb175: {
        StorageDead(_392);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _391);
        StorageDead(_391);
        StorageDead(_379);
        StorageDead(_378);
        goto -> bb267;
    }

    bb176: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        _378 = const ();
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _397 = &_66;
        _396 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _397) -> [return: bb177, unwind: bb294];
    }

    bb177: {
        _395 = &(*_396);
        _394 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _395) -> [return: bb178, unwind: bb294];
    }

    bb178: {
        StorageDead(_397);
        StorageDead(_395);
        _393 = ((*_394).1: anchor_lang::prelude::Pubkey);
        StorageDead(_396);
        StorageDead(_394);
        StorageLive(_398);
        StorageLive(_399);
        _399 = &_6;
        _398 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _399) -> [return: bb179, unwind: bb294];
    }

    bb179: {
        StorageDead(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = &_393;
        StorageLive(_403);
        _403 = &_398;
        _401 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _402, move _403) -> [return: bb180, unwind: bb294];
    }

    bb180: {
        switchInt(move _401) -> [0: bb185, otherwise: bb181];
    }

    bb181: {
        StorageDead(_403);
        StorageDead(_402);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = ConstraintTokenOwner;
        _407 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _408) -> [return: bb182, unwind: bb294];
    }

    bb182: {
        StorageDead(_408);
        _406 = anchor_lang::error::Error::with_account_name::<&str>(move _407, const "user_token_ata") -> [return: bb183, unwind: bb294];
    }

    bb183: {
        StorageDead(_407);
        StorageLive(_409);
        StorageLive(_410);
        _410 = _393;
        StorageLive(_411);
        _411 = _398;
        _409 = (move _410, move _411);
        StorageDead(_411);
        StorageDead(_410);
        _405 = anchor_lang::error::Error::with_pubkeys(move _406, move _409) -> [return: bb184, unwind: bb294];
    }

    bb184: {
        StorageDead(_409);
        StorageDead(_406);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _405);
        StorageDead(_405);
        StorageDead(_401);
        StorageDead(_400);
        goto -> bb266;
    }

    bb185: {
        StorageDead(_403);
        StorageDead(_402);
        _400 = const ();
        StorageDead(_401);
        StorageDead(_400);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_398;
        _413 = &(*_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = &_21;
        _425 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _426) -> [return: bb186, unwind: bb294];
    }

    bb186: {
        StorageDead(_426);
        _424 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _425) -> [return: bb187, unwind: bb294];
    }

    bb187: {
        _594 = const true;
        _595 = const true;
        StorageDead(_425);
        _427 = discriminant(_424);
        switchInt(move _427) -> [0: bb188, 1: bb189, otherwise: bb5];
    }

    bb188: {
        StorageLive(_431);
        _431 = move ((_424 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _423 = move _431;
        StorageDead(_431);
        _422 = &_423;
        _421 = <Ref<'_, state::VaultState> as Deref>::deref(move _422) -> [return: bb191, unwind: bb288];
    }

    bb189: {
        StorageLive(_428);
        _428 = move ((_424 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_430);
        _430 = move _428;
        _0 = <std::result::Result<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _430) -> [return: bb190, unwind: bb310];
    }

    bb190: {
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_413);
        _644 = discriminant(_424);
        _594 = const false;
        _595 = const false;
        StorageDead(_424);
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_414);
        goto -> bb265;
    }

    bb191: {
        StorageDead(_422);
        _420 = &((*_421).3: anchor_lang::prelude::Pubkey);
        _419 = <anchor_lang::prelude::Pubkey as anchor_lang::Key>::key(move _420) -> [return: bb192, unwind: bb288];
    }

    bb192: {
        _418 = &_419;
        StorageDead(_420);
        _417 = <anchor_lang::prelude::Pubkey as anchor_lang::Key>::key(move _418) -> [return: bb193, unwind: bb288];
    }

    bb193: {
        StorageDead(_418);
        _416 = &_417;
        _415 = &(*_416);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _437 = &_126;
        _436 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _437) -> [return: bb194, unwind: bb288];
    }

    bb194: {
        _435 = &(*_436);
        StorageDead(_437);
        _434 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _435) -> [return: bb195, unwind: bb288];
    }

    bb195: {
        StorageDead(_435);
        _433 = &_434;
        _432 = &(*_433);
        _412 = get_associated_token_address_with_program_id(move _413, move _415, move _432) -> [return: bb196, unwind: bb288];
    }

    bb196: {
        StorageDead(_432);
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_433);
        drop(_423) -> [return: bb307, unwind: bb310];
    }

    bb197: {
        StorageDead(_439);
        StorageLive(_440);
        StorageLive(_441);
        _441 = &_438;
        StorageLive(_442);
        _442 = &_412;
        _440 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _441, move _442) -> [return: bb198, unwind: bb294];
    }

    bb198: {
        switchInt(move _440) -> [0: bb203, otherwise: bb199];
    }

    bb199: {
        StorageDead(_442);
        StorageDead(_441);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = ConstraintAssociated;
        _446 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _447) -> [return: bb200, unwind: bb294];
    }

    bb200: {
        StorageDead(_447);
        _445 = anchor_lang::error::Error::with_account_name::<&str>(move _446, const "user_token_ata") -> [return: bb201, unwind: bb294];
    }

    bb201: {
        StorageDead(_446);
        StorageLive(_448);
        StorageLive(_449);
        _449 = _438;
        StorageLive(_450);
        _450 = _412;
        _448 = (move _449, move _450);
        StorageDead(_450);
        StorageDead(_449);
        _444 = anchor_lang::error::Error::with_pubkeys(move _445, move _448) -> [return: bb202, unwind: bb294];
    }

    bb202: {
        StorageDead(_448);
        StorageDead(_445);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _444);
        StorageDead(_444);
        StorageDead(_440);
        StorageDead(_438);
        goto -> bb265;
    }

    bb203: {
        StorageDead(_442);
        StorageDead(_441);
        _377 = const ();
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_412);
        StorageDead(_398);
        StorageDead(_393);
        StorageDead(_377);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _455 = &_66;
        _454 = &(*_455);
        _453 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _454) -> [return: bb204, unwind: bb294];
    }

    bb204: {
        StorageDead(_454);
        _452 = ((*_453).6: bool);
        switchInt(move _452) -> [0: bb205, otherwise: bb208];
    }

    bb205: {
        StorageDead(_455);
        StorageDead(_453);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        _459 = ConstraintMut;
        _458 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _459) -> [return: bb206, unwind: bb294];
    }

    bb206: {
        StorageDead(_459);
        _457 = anchor_lang::error::Error::with_account_name::<&str>(move _458, const "user_token_ata") -> [return: bb207, unwind: bb294];
    }

    bb207: {
        StorageDead(_458);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _457);
        StorageDead(_457);
        StorageDead(_452);
        StorageDead(_451);
        goto -> bb273;
    }

    bb208: {
        StorageDead(_455);
        StorageDead(_453);
        _451 = const ();
        StorageDead(_452);
        StorageDead(_451);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &(_81.6: bool);
        _461 = <&bool as Not>::not(move _462) -> [return: bb209, unwind: bb294];
    }

    bb209: {
        switchInt(move _461) -> [0: bb213, otherwise: bb210];
    }

    bb210: {
        StorageDead(_462);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = ConstraintMut;
        _465 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _466) -> [return: bb211, unwind: bb294];
    }

    bb211: {
        StorageDead(_466);
        _464 = anchor_lang::error::Error::with_account_name::<&str>(move _465, const "token_mint") -> [return: bb212, unwind: bb294];
    }

    bb212: {
        StorageDead(_465);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _464);
        StorageDead(_464);
        StorageDead(_461);
        StorageDead(_460);
        goto -> bb273;
    }

    bb213: {
        StorageDead(_462);
        _460 = const ();
        StorageDead(_461);
        StorageDead(_460);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        _474 = &_96;
        _473 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _474) -> [return: bb214, unwind: bb294];
    }

    bb214: {
        _472 = &(*_473);
        StorageDead(_474);
        _471 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _472) -> [return: bb215, unwind: bb294];
    }

    bb215: {
        StorageDead(_472);
        _470 = &((*_471).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_141;
        _479 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _480) -> [return: bb216, unwind: bb294];
    }

    bb216: {
        _478 = &(*_479);
        StorageDead(_480);
        _477 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _478) -> [return: bb217, unwind: bb294];
    }

    bb217: {
        StorageDead(_478);
        _476 = &_477;
        _475 = &_476;
        _469 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _470, move _475) -> [return: bb218, unwind: bb294];
    }

    bb218: {
        switchInt(move _469) -> [0: bb221, otherwise: bb219];
    }

    bb219: {
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_470);
        StorageLive(_482);
        StorageLive(_483);
        _483 = ConstraintAssociatedTokenTokenProgram;
        _482 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _483) -> [return: bb220, unwind: bb294];
    }

    bb220: {
        StorageDead(_483);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _482);
        StorageDead(_482);
        StorageDead(_469);
        StorageDead(_468);
        goto -> bb264;
    }

    bb221: {
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_470);
        _468 = const ();
        StorageDead(_469);
        StorageDead(_468);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        _703 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _488 = &(*_703);
        _487 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _488) -> [return: bb222, unwind: bb294];
    }

    bb222: {
        _486 = &(*_487);
        _485 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _486) -> [return: bb223, unwind: bb294];
    }

    bb223: {
        StorageDead(_488);
        StorageDead(_486);
        _484 = ((*_485).1: anchor_lang::prelude::Pubkey);
        StorageDead(_487);
        StorageDead(_485);
        StorageLive(_489);
        StorageLive(_490);
        _490 = &_6;
        _489 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _490) -> [return: bb224, unwind: bb294];
    }

    bb224: {
        StorageDead(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        _493 = &_484;
        StorageLive(_494);
        _494 = &_489;
        _492 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _493, move _494) -> [return: bb225, unwind: bb294];
    }

    bb225: {
        switchInt(move _492) -> [0: bb230, otherwise: bb226];
    }

    bb226: {
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = ConstraintTokenOwner;
        _498 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _499) -> [return: bb227, unwind: bb294];
    }

    bb227: {
        StorageDead(_499);
        _497 = anchor_lang::error::Error::with_account_name::<&str>(move _498, const "user_shares_ata") -> [return: bb228, unwind: bb294];
    }

    bb228: {
        StorageDead(_498);
        StorageLive(_500);
        StorageLive(_501);
        _501 = _484;
        StorageLive(_502);
        _502 = _489;
        _500 = (move _501, move _502);
        StorageDead(_502);
        StorageDead(_501);
        _496 = anchor_lang::error::Error::with_pubkeys(move _497, move _500) -> [return: bb229, unwind: bb294];
    }

    bb229: {
        StorageDead(_500);
        StorageDead(_497);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _496);
        StorageDead(_496);
        StorageDead(_492);
        StorageDead(_491);
        goto -> bb263;
    }

    bb230: {
        StorageDead(_494);
        StorageDead(_493);
        _491 = const ();
        StorageDead(_492);
        StorageDead(_491);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &_489;
        _504 = &(*_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _704 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _509 = &(*_704);
        _508 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _509) -> [return: bb231, unwind: bb294];
    }

    bb231: {
        StorageDead(_509);
        _507 = &_508;
        _506 = &(*_507);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &_141;
        _514 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _515) -> [return: bb232, unwind: bb294];
    }

    bb232: {
        _513 = &(*_514);
        StorageDead(_515);
        _512 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _513) -> [return: bb233, unwind: bb294];
    }

    bb233: {
        StorageDead(_513);
        _511 = &_512;
        _510 = &(*_511);
        _503 = get_associated_token_address_with_program_id(move _504, move _506, move _510) -> [return: bb234, unwind: bb294];
    }

    bb234: {
        StorageDead(_510);
        StorageDead(_506);
        StorageDead(_504);
        StorageDead(_514);
        StorageDead(_512);
        StorageDead(_511);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_505);
        StorageLive(_516);
        StorageLive(_517);
        _705 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _517 = &(*_705);
        _516 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _517) -> [return: bb235, unwind: bb294];
    }

    bb235: {
        StorageDead(_517);
        StorageLive(_518);
        StorageLive(_519);
        _519 = &_516;
        StorageLive(_520);
        _520 = &_503;
        _518 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _519, move _520) -> [return: bb236, unwind: bb294];
    }

    bb236: {
        switchInt(move _518) -> [0: bb241, otherwise: bb237];
    }

    bb237: {
        StorageDead(_520);
        StorageDead(_519);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _525 = ConstraintAssociated;
        _524 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _525) -> [return: bb238, unwind: bb294];
    }

    bb238: {
        StorageDead(_525);
        _523 = anchor_lang::error::Error::with_account_name::<&str>(move _524, const "user_shares_ata") -> [return: bb239, unwind: bb294];
    }

    bb239: {
        StorageDead(_524);
        StorageLive(_526);
        StorageLive(_527);
        _527 = _516;
        StorageLive(_528);
        _528 = _503;
        _526 = (move _527, move _528);
        StorageDead(_528);
        StorageDead(_527);
        _522 = anchor_lang::error::Error::with_pubkeys(move _523, move _526) -> [return: bb240, unwind: bb294];
    }

    bb240: {
        StorageDead(_526);
        StorageDead(_523);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _522);
        StorageDead(_522);
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_503);
        goto -> bb263;
    }

    bb241: {
        StorageDead(_520);
        StorageDead(_519);
        _467 = const ();
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_503);
        StorageDead(_489);
        StorageDead(_484);
        StorageDead(_467);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        _534 = &_96;
        _533 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _534) -> [return: bb242, unwind: bb294];
    }

    bb242: {
        _532 = &(*_533);
        StorageDead(_534);
        _531 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _532) -> [return: bb243, unwind: bb294];
    }

    bb243: {
        StorageDead(_532);
        _530 = ((*_531).6: bool);
        switchInt(move _530) -> [0: bb244, otherwise: bb247];
    }

    bb244: {
        StorageDead(_533);
        StorageDead(_531);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _538 = ConstraintMut;
        _537 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _538) -> [return: bb245, unwind: bb294];
    }

    bb245: {
        StorageDead(_538);
        _536 = anchor_lang::error::Error::with_account_name::<&str>(move _537, const "user_shares_ata") -> [return: bb246, unwind: bb294];
    }

    bb246: {
        StorageDead(_537);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _536);
        StorageDead(_536);
        StorageDead(_530);
        StorageDead(_529);
        goto -> bb273;
    }

    bb247: {
        StorageDead(_533);
        StorageDead(_531);
        _529 = const ();
        StorageDead(_530);
        StorageDead(_529);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        _544 = &_111;
        _543 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _544) -> [return: bb248, unwind: bb294];
    }

    bb248: {
        _542 = &(*_543);
        StorageDead(_544);
        _541 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _542) -> [return: bb249, unwind: bb294];
    }

    bb249: {
        StorageDead(_542);
        _540 = ((*_541).6: bool);
        switchInt(move _540) -> [0: bb250, otherwise: bb253];
    }

    bb250: {
        StorageDead(_543);
        StorageDead(_541);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = ConstraintMut;
        _547 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _548) -> [return: bb251, unwind: bb294];
    }

    bb251: {
        StorageDead(_548);
        _546 = anchor_lang::error::Error::with_account_name::<&str>(move _547, const "shares_mint") -> [return: bb252, unwind: bb294];
    }

    bb252: {
        StorageDead(_547);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _546);
        StorageDead(_546);
        StorageDead(_540);
        StorageDead(_539);
        goto -> bb273;
    }

    bb253: {
        StorageDead(_543);
        StorageDead(_541);
        _539 = const ();
        StorageDead(_540);
        StorageDead(_539);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        _591 = const _;
        _554 = &(*_591);
        _553 = &(*_554);
        _552 = move _553 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_553);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &_1;
        _592 = deref_copy (*_560);
        _559 = &(*_592);
        _551 = anchor_lang::prelude::Pubkey::find_program_address(move _552, move _559) -> [return: bb254, unwind: bb294];
    }

    bb254: {
        StorageDead(_559);
        StorageDead(_552);
        StorageLive(_549);
        _549 = (_551.0: anchor_lang::prelude::Pubkey);
        StorageLive(_550);
        _550 = (_551.1: u8);
        StorageDead(_560);
        StorageDead(_554);
        StorageDead(_551);
        StorageLive(_561);
        _561 = _550;
        ((*_4).0: u8) = move _561;
        StorageDead(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &_171;
        _565 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _566) -> [return: bb255, unwind: bb294];
    }

    bb255: {
        _564 = &_565;
        StorageDead(_566);
        StorageLive(_567);
        _567 = &_549;
        _563 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _564, move _567) -> [return: bb256, unwind: bb294];
    }

    bb256: {
        switchInt(move _563) -> [0: bb262, otherwise: bb257];
    }

    bb257: {
        StorageDead(_567);
        StorageDead(_565);
        StorageDead(_564);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = ConstraintSeeds;
        _571 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _572) -> [return: bb258, unwind: bb294];
    }

    bb258: {
        StorageDead(_572);
        _570 = anchor_lang::error::Error::with_account_name::<&str>(move _571, const "event_authority") -> [return: bb259, unwind: bb294];
    }

    bb259: {
        _593 = const true;
        StorageDead(_571);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _575 = &_171;
        _574 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _575) -> [return: bb260, unwind: bb309];
    }

    bb260: {
        StorageDead(_575);
        StorageLive(_576);
        _576 = _549;
        _573 = (move _574, move _576);
        StorageDead(_576);
        StorageDead(_574);
        _593 = const false;
        _569 = anchor_lang::error::Error::with_pubkeys(move _570, move _573) -> [return: bb261, unwind: bb309];
    }

    bb261: {
        StorageDead(_573);
        _593 = const false;
        StorageDead(_570);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Err(move _569);
        StorageDead(_569);
        StorageDead(_563);
        StorageDead(_562);
        StorageDead(_550);
        StorageDead(_549);
        goto -> bb273;
    }

    bb262: {
        StorageDead(_567);
        StorageDead(_565);
        StorageDead(_564);
        _562 = const ();
        StorageDead(_563);
        StorageDead(_562);
        StorageLive(_577);
        StorageLive(_578);
        _578 = move _6;
        StorageLive(_579);
        _579 = move _21;
        StorageLive(_580);
        _580 = move _36;
        StorageLive(_581);
        _581 = move _51;
        StorageLive(_582);
        _582 = move _66;
        StorageLive(_583);
        _583 = move _81;
        StorageLive(_584);
        _584 = move _96;
        StorageLive(_585);
        _585 = move _111;
        StorageLive(_586);
        _586 = move _126;
        StorageLive(_587);
        _587 = move _141;
        StorageLive(_588);
        _588 = move _156;
        StorageLive(_589);
        _589 = move _171;
        StorageLive(_590);
        _590 = move _186;
        _577 = handlers::handler_withdraw::WithdrawFromAvailable::<'_> { user: move _578, vault_state: move _579, token_vault: move _580, base_vault_authority: move _581, user_token_ata: move _582, token_mint: move _583, user_shares_ata: move _584, shares_mint: move _585, token_program: move _586, shares_token_program: move _587, klend_program: move _588, event_authority: move _589, program: move _590 };
        StorageDead(_590);
        StorageDead(_589);
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_586);
        StorageDead(_585);
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_578);
        _0 = std::result::Result::<handlers::handler_withdraw::WithdrawFromAvailable<'_>, anchor_lang::error::Error>::Ok(move _577);
        StorageDead(_577);
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_186);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb287;
    }

    bb263: {
        StorageDead(_489);
        StorageDead(_484);
        goto -> bb264;
    }

    bb264: {
        StorageDead(_467);
        goto -> bb273;
    }

    bb265: {
        StorageDead(_412);
        goto -> bb266;
    }

    bb266: {
        StorageDead(_398);
        StorageDead(_393);
        goto -> bb267;
    }

    bb267: {
        StorageDead(_377);
        goto -> bb273;
    }

    bb268: {
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb273;
    }

    bb269: {
        StorageDead(_298);
        StorageDead(_297);
        goto -> bb273;
    }

    bb270: {
        StorageDead(_272);
        StorageDead(_271);
        goto -> bb273;
    }

    bb271: {
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb273;
    }

    bb272: {
        StorageDead(_220);
        StorageDead(_219);
        goto -> bb273;
    }

    bb273: {
        drop(_186) -> [return: bb274, unwind: bb295];
    }

    bb274: {
        StorageDead(_186);
        drop(_171) -> [return: bb275, unwind: bb296];
    }

    bb275: {
        StorageDead(_171);
        goto -> bb276;
    }

    bb276: {
        StorageDead(_156);
        goto -> bb277;
    }

    bb277: {
        StorageDead(_141);
        goto -> bb278;
    }

    bb278: {
        StorageDead(_126);
        drop(_111) -> [return: bb279, unwind: bb297];
    }

    bb279: {
        StorageDead(_111);
        drop(_96) -> [return: bb280, unwind: bb298];
    }

    bb280: {
        StorageDead(_96);
        drop(_81) -> [return: bb281, unwind: bb299];
    }

    bb281: {
        StorageDead(_81);
        goto -> bb282;
    }

    bb282: {
        StorageDead(_66);
        drop(_51) -> [return: bb283, unwind: bb300];
    }

    bb283: {
        StorageDead(_51);
        drop(_36) -> [return: bb284, unwind: bb301];
    }

    bb284: {
        StorageDead(_36);
        goto -> bb285;
    }

    bb285: {
        StorageDead(_21);
        goto -> bb286;
    }

    bb286: {
        StorageDead(_6);
        goto -> bb287;
    }

    bb287: {
        return;
    }

    bb288 (cleanup): {
        drop(_423) -> [return: bb310, unwind terminate(cleanup)];
    }

    bb289 (cleanup): {
        drop(_329) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        drop(_301) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb291 (cleanup): {
        drop(_275) -> [return: bb313, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        drop(_249) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        drop(_223) -> [return: bb315, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        drop(_186) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        drop(_171) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb296 (cleanup): {
        drop(_111) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb297 (cleanup): {
        drop(_96) -> [return: bb298, unwind terminate(cleanup)];
    }

    bb298 (cleanup): {
        drop(_81) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb299 (cleanup): {
        drop(_51) -> [return: bb300, unwind terminate(cleanup)];
    }

    bb300 (cleanup): {
        drop(_36) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb301 (cleanup): {
        resume;
    }

    bb302: {
        _632 = discriminant(_224);
        _604 = const false;
        _605 = const false;
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_221);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_51;
        _232 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _233) -> [return: bb96, unwind: bb294];
    }

    bb303: {
        _634 = discriminant(_250);
        _602 = const false;
        _603 = const false;
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_247);
        StorageLive(_258);
        StorageLive(_259);
        _701 = (((_36.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _259 = &(*_701);
        _258 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _259) -> [return: bb109, unwind: bb294];
    }

    bb304: {
        _636 = discriminant(_276);
        _600 = const false;
        _601 = const false;
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_273);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &_81;
        _284 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _285) -> [return: bb122, unwind: bb294];
    }

    bb305: {
        _638 = discriminant(_302);
        _598 = const false;
        _599 = const false;
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_299);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &_126;
        _312 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _313) -> [return: bb135, unwind: bb294];
    }

    bb306: {
        _640 = discriminant(_330);
        _596 = const false;
        _597 = const false;
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_327);
        StorageLive(_338);
        StorageLive(_339);
        _702 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _339 = &(*_702);
        _338 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _339) -> [return: bb149, unwind: bb294];
    }

    bb307: {
        _642 = discriminant(_424);
        _594 = const false;
        _595 = const false;
        StorageDead(_424);
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_414);
        StorageLive(_438);
        StorageLive(_439);
        _439 = &_66;
        _438 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _439) -> [return: bb197, unwind: bb294];
    }

    bb308 (cleanup): {
        drop(_570) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb309 (cleanup): {
        switchInt(_593) -> [0: bb294, otherwise: bb308];
    }

    bb310 (cleanup): {
        _682 = discriminant(_424);
        goto -> bb294;
    }

    bb311 (cleanup): {
        _683 = discriminant(_330);
        goto -> bb294;
    }

    bb312 (cleanup): {
        _684 = discriminant(_302);
        goto -> bb294;
    }

    bb313 (cleanup): {
        _685 = discriminant(_276);
        goto -> bb294;
    }

    bb314 (cleanup): {
        _686 = discriminant(_250);
        goto -> bb294;
    }

    bb315 (cleanup): {
        _687 = discriminant(_224);
        goto -> bb294;
    }

    bb316 (cleanup): {
        _688 = discriminant(_187);
        goto -> bb295;
    }

    bb317 (cleanup): {
        _689 = discriminant(_172);
        goto -> bb296;
    }

    bb318 (cleanup): {
        _690 = discriminant(_157);
        goto -> bb296;
    }

    bb319 (cleanup): {
        _691 = discriminant(_142);
        goto -> bb296;
    }

    bb320 (cleanup): {
        _692 = discriminant(_127);
        goto -> bb296;
    }

    bb321 (cleanup): {
        _693 = discriminant(_112);
        goto -> bb297;
    }

    bb322 (cleanup): {
        _694 = discriminant(_97);
        goto -> bb298;
    }

    bb323 (cleanup): {
        _695 = discriminant(_82);
        goto -> bb299;
    }

    bb324 (cleanup): {
        _696 = discriminant(_67);
        goto -> bb299;
    }

    bb325 (cleanup): {
        _697 = discriminant(_52);
        goto -> bb300;
    }

    bb326 (cleanup): {
        _698 = discriminant(_37);
        goto -> bb301;
    }

    bb327 (cleanup): {
        _699 = discriminant(_22);
        goto -> bb301;
    }

    bb328 (cleanup): {
        _700 = discriminant(_7);
        goto -> bb301;
    }
}
