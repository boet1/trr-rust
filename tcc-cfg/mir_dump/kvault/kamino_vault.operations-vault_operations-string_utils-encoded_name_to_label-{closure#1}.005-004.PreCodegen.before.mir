// MIR for `encoded_name_to_label::{closure#1}` before PreCodegen

fn encoded_name_to_label::{closure#1}(_1: {closure@programs\kvault\src\operations\vault_operations.rs:910:29: 910:32}, _2: Utf8Error) -> String {
    debug mint => (*(_1.0: &anchor_lang::prelude::Pubkey));
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[&str; 1];
    let _7: &[&str; 1];
    let _8: [&str; 1];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let mut _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let _15: &anchor_lang::prelude::Pubkey;
    let mut _16: &[&str; 1];
    let mut _17: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug res => _3;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _16 = const _;
        _7 = &(*_16);
        _6 = &(*_7);
        _5 = move _6 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _17 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _15 = &(*_17);
        _14 = &(*_15);
        _13 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        _12 = [move _13];
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _9 = move _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_10);
        _4 = Arguments::<'_>::new_v1(move _5, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_5);
        _3 = format(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_7);
        _0 = move _3;
        StorageDead(_3);
        return;
    }
}
