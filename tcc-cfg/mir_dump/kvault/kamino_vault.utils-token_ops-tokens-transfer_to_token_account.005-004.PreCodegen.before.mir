// MIR for `transfer_to_token_account` before PreCodegen

fn transfer_to_token_account(_1: &VaultTransferAccounts<'_>, _2: u8, _3: u64, _4: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug base_vault_authority_bump => _2;
    debug amount => _3;
    debug decimals => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: &str;
    let _7: &str;
    let mut _8: &std::string::String;
    let _9: &std::string::String;
    let _10: std::string::String;
    let _11: std::string::String;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[&str; 1];
    let _15: &[&str; 1];
    let _16: [&str; 1];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let mut _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let mut _22: &u64;
    let _23: &u64;
    let _24: &[&[u8]; 3];
    let _25: [&[u8]; 3];
    let mut _26: &[u8];
    let mut _27: &[u8];
    let mut _28: &[u8; 9];
    let _29: &[u8; 9];
    let mut _30: &[u8];
    let _31: &[u8];
    let mut _32: &[u8];
    let _33: &[u8];
    let mut _34: &anchor_lang::prelude::Pubkey;
    let mut _35: &[u8];
    let mut _36: &[u8; 1];
    let _37: &[u8; 1];
    let _38: [u8; 1];
    let mut _39: u8;
    let _40: ();
    let mut _41: bool;
    let mut _42: u64;
    let _43: ();
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _45: std::result::Result<(), anchor_lang::error::Error>;
    let mut _46: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _47: anchor_lang::prelude::AccountInfo<'_>;
    let mut _48: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _49: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _50: anchor_lang::prelude::AccountInfo<'_>;
    let mut _51: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _52: anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _54: anchor_lang::prelude::AccountInfo<'_>;
    let mut _55: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _56: anchor_lang::prelude::AccountInfo<'_>;
    let mut _57: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _58: &[&[&[u8]]];
    let mut _59: &[&[&[u8]]; 1];
    let _60: &[&[&[u8]]; 1];
    let _61: [&[&[u8]]; 1];
    let mut _62: &[&[u8]];
    let mut _63: &[&[u8]; 3];
    let mut _64: u64;
    let mut _65: u8;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _71: ();
    let mut _72: &[&str; 1];
    let mut _73: &anchor_lang::prelude::Pubkey;
    let mut _74: bool;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    scope 1 {
        debug res => _11;
    }
    scope 2 {
        debug signer_seeds => _24;
        let _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _70: ();
        scope 3 {
            debug residual => _67;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _70;
            scope 6 {
            }
        }
    }

    bb0: {
        _74 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _72 = const _;
        _15 = &(*_72);
        _14 = &(*_15);
        _13 = move _14 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_3;
        _22 = &(*_23);
        _21 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _22) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_22);
        _20 = [move _21];
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = move _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_18);
        _12 = Arguments::<'_>::new_v1(move _13, move _17) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_17);
        StorageDead(_13);
        _11 = format(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_15);
        _10 = move _11;
        StorageDead(_11);
        _9 = &_10;
        _8 = &(*_9);
        _7 = <String as Deref>::deref(move _8) -> [return: bb4, unwind: bb28];
    }

    bb4: {
        _6 = &(*_7);
        StorageDead(_8);
        _5 = solana_program::log::sol_log(move _6) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        StorageDead(_6);
        drop(_10) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = const _;
        _28 = &(*_29);
        _27 = move _28 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_28);
        _26 = _27;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _73 = deref_copy (((*_1).5: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _34 = &(*_73);
        _33 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _34) -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = <[u8] as AsRef<[u8]>>::as_ref(move _32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _30 = &(*_31);
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _2;
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_36);
        _25 = [move _26, move _30, move _35];
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_26);
        _24 = &_25;
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _3;
        _41 = Gt(move _42, const 0_u64);
        switchInt(move _41) -> [0: bb22, otherwise: bb9];
    }

    bb9: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _74 = const true;
        _47 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _48) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).2: anchor_lang::prelude::AccountInfo<'_>);
        _50 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _51) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_1).1: anchor_lang::prelude::AccountInfo<'_>);
        _52 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _53) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &((*_1).4: anchor_lang::prelude::AccountInfo<'_>);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _55) -> [return: bb13, unwind: bb26];
    }

    bb13: {
        StorageDead(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _56 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _57) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        StorageDead(_57);
        _49 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _52, mint: move _56, to: move _50, authority: move _54 };
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_24);
        _62 = move _63 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_63);
        _61 = [move _62];
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_59);
        _74 = const false;
        _46 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new_with_signer(move _47, move _49, move _58) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        StorageDead(_58);
        StorageDead(_49);
        _74 = const false;
        StorageDead(_47);
        StorageLive(_64);
        _64 = _3;
        StorageLive(_65);
        _65 = _4;
        _45 = anchor_spl::token_2022::transfer_checked(move _46, move _64, move _65) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_46);
        _44 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _45) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        StorageDead(_45);
        _66 = discriminant(_44);
        switchInt(move _66) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_70);
        _70 = ((_44 as Continue).0: ());
        _43 = _70;
        StorageDead(_70);
        _75 = discriminant(_44);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_44);
        StorageDead(_43);
        _40 = const ();
        goto -> bb23;
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_67);
        _67 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _69) -> [return: bb21, unwind: bb30];
    }

    bb21: {
        StorageDead(_69);
        StorageDead(_67);
        _77 = discriminant(_44);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb24;
    }

    bb22: {
        StorageDead(_42);
        _40 = const ();
        goto -> bb23;
    }

    bb23: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_71);
        _71 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _71);
        StorageDead(_71);
        StorageDead(_38);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_54) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_52) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_50) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_10) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        _79 = discriminant(_44);
        goto -> bb29;
    }

    bb31 (cleanup): {
        drop(_47) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_74) -> [0: bb29, otherwise: bb31];
    }
}
