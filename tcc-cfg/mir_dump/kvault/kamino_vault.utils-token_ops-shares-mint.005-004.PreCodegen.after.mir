// MIR for `utils::token_ops::shares::mint` after PreCodegen

fn utils::token_ops::shares::mint(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: anchor_lang::prelude::AccountInfo<'_>, _6: u64, _7: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug token_program => _1;
    debug shares_mint => _2;
    debug vault_state => _3;
    debug base_vault_authority => _4;
    debug user_shares_ata => _5;
    debug base_vault_authority_bump => _6;
    debug shares_to_mint => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _8: &[&[u8]; 3];
    let _9: [&[u8]; 3];
    let mut _10: &[u8];
    let mut _11: &[u8];
    let mut _12: &[u8; 9];
    let _13: &[u8; 9];
    let mut _14: &[u8];
    let _15: &[u8];
    let mut _16: &[u8];
    let _17: &[u8];
    let mut _18: &anchor_lang::prelude::Pubkey;
    let mut _19: &[u8];
    let mut _20: &[u8; 1];
    let _21: &[u8; 1];
    let _22: [u8; 1];
    let mut _23: u8;
    let mut _24: u64;
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _27: std::result::Result<(), anchor_lang::error::Error>;
    let mut _28: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token::MintTo<'_>>;
    let mut _29: anchor_lang::prelude::AccountInfo<'_>;
    let mut _30: anchor_spl::token::MintTo<'_>;
    let mut _31: anchor_lang::prelude::AccountInfo<'_>;
    let mut _32: anchor_lang::prelude::AccountInfo<'_>;
    let mut _33: anchor_lang::prelude::AccountInfo<'_>;
    let mut _34: &[&[&[u8]]];
    let mut _35: &[&[&[u8]]; 1];
    let _36: &[&[&[u8]]; 1];
    let _37: [&[&[u8]]; 1];
    let mut _38: &[&[u8]];
    let mut _39: &[&[u8]; 3];
    let mut _40: u64;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _46: ();
    let mut _47: &anchor_lang::prelude::Pubkey;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    scope 1 {
        debug signer_seeds => _8;
        let _42: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _45: ();
        scope 2 {
            debug residual => _42;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _45;
            scope 5 {
            }
        }
    }

    bb0: {
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _51 = const true;
        _50 = const true;
        _49 = const true;
        _48 = const true;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const _;
        _12 = &(*_13);
        _11 = move _12 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_12);
        _10 = _11;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _47 = deref_copy (_3.0: &anchor_lang::prelude::Pubkey);
        _18 = &(*_47);
        _17 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _18) -> [return: bb1, unwind: bb17];
    }

    bb1: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = <[u8] as AsRef<[u8]>>::as_ref(move _16) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _14 = &(*_15);
        StorageDead(_16);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _6;
        _23 = move _24 as u8 (IntToInt);
        StorageDead(_24);
        _22 = [move _23];
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = move _20 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_20);
        _9 = [move _10, move _14, move _19];
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_10);
        _8 = &_9;
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _51 = const false;
        _29 = move _1;
        StorageLive(_30);
        StorageLive(_31);
        _50 = const false;
        _31 = move _2;
        StorageLive(_32);
        _48 = const false;
        _32 = move _5;
        StorageLive(_33);
        _49 = const false;
        _33 = move _4;
        _30 = anchor_spl::token::MintTo::<'_> { mint: move _31, to: move _32, authority: move _33 };
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_8);
        _38 = move _39 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_39);
        _37 = [move _38];
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = move _35 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_35);
        _28 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token::MintTo<'_>>::new_with_signer(move _29, move _30, move _34) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_40);
        _40 = _7;
        _27 = anchor_spl::token::mint_to(move _28, move _40) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        StorageDead(_40);
        StorageDead(_28);
        _26 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _27) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        StorageDead(_27);
        _41 = discriminant(_26);
        switchInt(move _41) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_45);
        _45 = ((_26 as Continue).0: ());
        _25 = _45;
        StorageDead(_45);
        _52 = discriminant(_26);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_46);
        _46 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _46);
        StorageDead(_46);
        StorageDead(_22);
        StorageDead(_9);
        StorageDead(_8);
        drop(_3) -> [return: bb10, unwind: bb20];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_42);
        _42 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_44);
        _44 = move _42;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _44) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        StorageDead(_44);
        StorageDead(_42);
        _54 = discriminant(_26);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_9);
        StorageDead(_8);
        drop(_3) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        switchInt(_49) -> [0: bb12, otherwise: bb18];
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_51) -> [0: bb14, otherwise: bb21];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        _56 = discriminant(_26);
        goto -> bb17;
    }

    bb16 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_48) -> [0: bb11, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_50) -> [0: bb13, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate(cleanup)];
    }
}
