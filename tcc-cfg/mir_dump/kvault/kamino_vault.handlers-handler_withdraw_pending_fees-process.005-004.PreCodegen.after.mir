// MIR for `handlers::handler_withdraw_pending_fees::process` after PreCodegen

fn handlers::handler_withdraw_pending_fees::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _4: &handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _5: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _7: std::cell::RefMut<'_, state::VaultState>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::VaultState>>;
    let mut _9: std::result::Result<std::cell::RefMut<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: &state::VaultState;
    let _18: &state::VaultState;
    let mut _19: &std::cell::RefMut<'_, state::VaultState>;
    let _20: ();
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _23: std::result::Result<(), anchor_lang::error::Error>;
    let mut _24: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _25: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _26: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _27: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _28: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, kamino_lending::Reserve>>;
    let mut _38: std::result::Result<std::cell::Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _46: &state::VaultState;
    let mut _47: &std::cell::RefMut<'_, state::VaultState>;
    let mut _49: anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _52: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _53: &anchor_spl::token_interface::TokenAccount;
    let _54: &anchor_spl::token_interface::TokenAccount;
    let mut _55: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _57: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _58: &anchor_spl::token_interface::TokenAccount;
    let _59: &anchor_spl::token_interface::TokenAccount;
    let mut _60: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _62: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _63: &anchor_spl::token_interface::TokenAccount;
    let _64: &anchor_spl::token_interface::TokenAccount;
    let mut _65: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _67: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _68: &anchor_spl::token_interface::TokenAccount;
    let _69: &anchor_spl::token_interface::TokenAccount;
    let mut _70: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _72: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _73: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _74: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _75: usize;
    let mut _76: {closure@programs\kvault\src\handlers\handler_withdraw_pending_fees.rs:53:14: 53:28};
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, &state::VaultAllocation>;
    let mut _79: std::result::Result<&state::VaultAllocation, anchor_lang::error::Error>;
    let mut _80: &state::VaultState;
    let _81: &state::VaultState;
    let mut _82: &std::cell::RefMut<'_, state::VaultState>;
    let mut _83: &anchor_lang::prelude::Pubkey;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _89: ();
    let mut _90: bool;
    let mut _91: &anchor_lang::prelude::Pubkey;
    let mut _92: &anchor_lang::prelude::Pubkey;
    let _93: anchor_lang::prelude::Pubkey;
    let mut _94: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _95: !;
    let mut _96: anchor_lang::error::Error;
    let mut _97: anchor_lang::error::Error;
    let mut _98: anchor_lang::error::AnchorError;
    let mut _99: std::string::String;
    let mut _100: &anchor_lang::error::ErrorCode;
    let _101: anchor_lang::error::ErrorCode;
    let mut _102: u32;
    let mut _103: anchor_lang::error::ErrorCode;
    let mut _104: std::string::String;
    let mut _105: &anchor_lang::error::ErrorCode;
    let _106: anchor_lang::error::ErrorCode;
    let mut _107: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _108: anchor_lang::error::ErrorOrigin;
    let mut _109: anchor_lang::error::Source;
    let mut _110: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _111: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _112: anchor_lang::prelude::Pubkey;
    let mut _113: anchor_lang::prelude::Pubkey;
    let mut _114: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, operations::effects::WithdrawPendingFeesEffects>;
    let mut _117: std::result::Result<operations::effects::WithdrawPendingFeesEffects, anchor_lang::error::Error>;
    let mut _118: &mut state::VaultState;
    let mut _119: &mut state::VaultState;
    let mut _120: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _121: &anchor_lang::prelude::Pubkey;
    let mut _122: &kamino_lending::Reserve;
    let _123: &kamino_lending::Reserve;
    let mut _124: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let _125: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _126: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_withdraw_pending_fees.rs:53:14: 53:28}>;
    let mut _127: u64;
    let mut _128: anchor_lang::prelude::Clock;
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _130: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _136: u64;
    let mut _137: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _138: i64;
    let mut _139: anchor_lang::prelude::Clock;
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _141: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _142: isize;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 4];
    let _166: &[&str; 4];
    let _167: [&str; 4];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 4];
    let _170: &[core::fmt::rt::Argument<'_>; 4];
    let _171: [core::fmt::rt::Argument<'_>; 4];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &u64;
    let _174: &u64;
    let mut _175: core::fmt::rt::Argument<'_>;
    let mut _176: &u64;
    let _177: &u64;
    let mut _178: core::fmt::rt::Argument<'_>;
    let mut _179: &u64;
    let _180: &u64;
    let mut _181: core::fmt::rt::Argument<'_>;
    let mut _182: &u64;
    let _183: &u64;
    let _184: ();
    let mut _185: std::cell::Ref<'_, kamino_lending::Reserve>;
    let _186: ();
    let mut _187: bool;
    let mut _188: u64;
    let _189: ();
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _191: std::result::Result<(), anchor_lang::error::Error>;
    let mut _192: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>>;
    let _193: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>>;
    let mut _194: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _195: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _196: u8;
    let mut _197: u64;
    let mut _198: u64;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _206: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _207: &anchor_lang::prelude::AccountInfo<'_>;
    let _208: &anchor_lang::prelude::AccountInfo<'_>;
    let _209: anchor_lang::prelude::AccountInfo<'_>;
    let mut _210: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _217: u64;
    let mut _218: u64;
    let mut _219: (u64, bool);
    let _220: ();
    let mut _221: bool;
    let mut _222: u64;
    let mut _223: u64;
    let mut _224: !;
    let mut _225: anchor_lang::error::Error;
    let mut _226: anchor_lang::error::AnchorError;
    let mut _227: std::string::String;
    let mut _228: &KaminoVaultError;
    let _229: KaminoVaultError;
    let mut _230: u32;
    let mut _231: KaminoVaultError;
    let mut _232: std::string::String;
    let mut _233: &KaminoVaultError;
    let _234: KaminoVaultError;
    let mut _235: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _236: anchor_lang::error::ErrorOrigin;
    let mut _237: anchor_lang::error::Source;
    let mut _238: std::option::Option<anchor_lang::error::ComparedValues>;
    let _239: ();
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _241: std::result::Result<(), anchor_lang::error::Error>;
    let mut _242: &utils::token_ops::tokens::VaultTransferAccounts<'_>;
    let _243: &utils::token_ops::tokens::VaultTransferAccounts<'_>;
    let _244: utils::token_ops::tokens::VaultTransferAccounts<'_>;
    let mut _245: anchor_lang::prelude::AccountInfo<'_>;
    let mut _246: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _247: anchor_lang::prelude::AccountInfo<'_>;
    let mut _248: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _249: anchor_lang::prelude::AccountInfo<'_>;
    let mut _250: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _251: anchor_lang::prelude::AccountInfo<'_>;
    let mut _252: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _253: anchor_lang::prelude::AccountInfo<'_>;
    let mut _254: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _255: anchor_lang::prelude::AccountInfo<'_>;
    let mut _256: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _257: u8;
    let mut _258: std::result::Result<u8, std::num::TryFromIntError>;
    let mut _259: u64;
    let mut _260: &state::VaultState;
    let mut _261: &std::cell::RefMut<'_, state::VaultState>;
    let mut _262: u64;
    let mut _263: u64;
    let mut _264: u64;
    let mut _265: (u64, bool);
    let mut _266: u8;
    let mut _267: std::result::Result<u8, std::num::TryFromIntError>;
    let mut _268: u64;
    let mut _269: &state::VaultState;
    let mut _270: &std::cell::RefMut<'_, state::VaultState>;
    let mut _271: isize;
    let mut _273: !;
    let mut _274: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _277: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _278: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _279: &anchor_lang::prelude::AccountInfo<'_>;
    let _280: &anchor_lang::prelude::AccountInfo<'_>;
    let _281: anchor_lang::prelude::AccountInfo<'_>;
    let mut _282: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _290: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _291: &anchor_lang::prelude::AccountInfo<'_>;
    let _292: &anchor_lang::prelude::AccountInfo<'_>;
    let _293: anchor_lang::prelude::AccountInfo<'_>;
    let mut _294: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _302: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _303: &anchor_lang::prelude::AccountInfo<'_>;
    let _304: &anchor_lang::prelude::AccountInfo<'_>;
    let _305: anchor_lang::prelude::AccountInfo<'_>;
    let mut _306: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _313: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _314: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _315: &anchor_lang::prelude::AccountInfo<'_>;
    let _316: &anchor_lang::prelude::AccountInfo<'_>;
    let _317: anchor_lang::prelude::AccountInfo<'_>;
    let mut _318: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _319: isize;
    let mut _321: !;
    let mut _322: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _324: ();
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _326: std::result::Result<(), anchor_lang::error::Error>;
    let mut _327: operations::vault_checks::VaultAndUserBalances;
    let mut _328: u64;
    let mut _329: u64;
    let mut _330: u64;
    let mut _331: u64;
    let mut _332: operations::vault_checks::VaultAndUserBalances;
    let mut _333: u64;
    let mut _334: u64;
    let mut _335: u64;
    let mut _336: u64;
    let mut _337: operations::effects::WithdrawPendingFeesEffects;
    let mut _338: isize;
    let mut _340: !;
    let mut _341: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _343: ();
    let mut _349: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _350: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _351: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _352: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _353: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _354: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _355: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _356: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _357: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _358: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _359: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _360: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _361: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _362: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _363: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _364: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _365: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _366: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _367: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _368: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _369: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _370: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _371: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _372: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _373: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _374: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _375: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _376: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _377: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _378: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _379: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _380: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _381: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>;
    let mut _382: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _383: bool;
    let mut _384: bool;
    let mut _385: bool;
    let mut _386: bool;
    let mut _387: bool;
    let mut _388: bool;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _465: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _466: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _467: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _468: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _469: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _470: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _471: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _472: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _473: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug cpi_mem => _2;
        let _6: &mut std::cell::RefMut<'_, state::VaultState>;
        let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _15: std::cell::RefMut<'_, state::VaultState>;
        scope 2 {
            debug vault_state => _6;
            let _16: usize;
            scope 7 {
                debug reserves_count => _16;
                let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _35: ();
                let _36: std::cell::Ref<'_, kamino_lending::Reserve>;
                let _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _44: std::cell::Ref<'_, kamino_lending::Reserve>;
                scope 8 {
                    debug residual => _32;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _35;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug reserve => _36;
                    let _45: u64;
                    scope 17 {
                        debug bump => _45;
                        let _48: &anchor_lang::prelude::Pubkey;
                        scope 18 {
                            debug reserve_address => _48;
                            let _51: u64;
                            scope 19 {
                                debug token_vault_before => _51;
                                let _56: u64;
                                scope 20 {
                                    debug ctoken_vault_before => _56;
                                    let _61: u64;
                                    scope 21 {
                                        debug admin_ata_before => _61;
                                        let _66: u64;
                                        scope 22 {
                                            debug reserve_supply_liquidity_before => _66;
                                            let _71: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_withdraw_pending_fees.rs:53:14: 53:28}>;
                                            scope 23 {
                                                debug reserves_iter => _71;
                                                let _77: &state::VaultAllocation;
                                                let _85: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _88: &state::VaultAllocation;
                                                scope 24 {
                                                    debug reserve_allocation => _77;
                                                    let _115: operations::effects::WithdrawPendingFeesEffects;
                                                    let _132: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                    let _135: anchor_lang::prelude::Clock;
                                                    let _143: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                    let _146: anchor_lang::prelude::Clock;
                                                    let _148: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _151: operations::effects::WithdrawPendingFeesEffects;
                                                    let mut _344: &anchor_lang::error::ErrorCode;
                                                    let mut _345: &anchor_lang::error::ErrorCode;
                                                    scope 29 {
                                                        debug withdraw_pending_fees_effects => _115;
                                                        let _152: u64;
                                                        let _153: u64;
                                                        let _154: u64;
                                                        let _155: u64;
                                                        scope 42 {
                                                            debug available_to_send_to_user => _152;
                                                            debug invested_to_disinvest_ctokens => _153;
                                                            debug invested_liquidity_to_send_to_user => _154;
                                                            debug invested_liquidity_to_disinvest => _155;
                                                            let _162: std::string::String;
                                                            let _200: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _203: ();
                                                            let _204: u64;
                                                            let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _215: u64;
                                                            let mut _348: &[&str; 4];
                                                            scope 43 {
                                                                debug res => _162;
                                                            }
                                                            scope 44 {
                                                                debug residual => _200;
                                                                scope 45 {
                                                                }
                                                            }
                                                            scope 46 {
                                                                debug val => _203;
                                                                scope 47 {
                                                                }
                                                            }
                                                            scope 48 {
                                                                debug token_vault_before_transfer => _204;
                                                                let _216: u64;
                                                                scope 53 {
                                                                    debug liquidity_received => _216;
                                                                    let _272: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _275: ();
                                                                    let _276: u64;
                                                                    let _284: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _287: u64;
                                                                    let mut _346: &KaminoVaultError;
                                                                    let mut _347: &KaminoVaultError;
                                                                    scope 54 {
                                                                        debug residual => _272;
                                                                        scope 55 {
                                                                        }
                                                                    }
                                                                    scope 56 {
                                                                        debug val => _275;
                                                                        scope 57 {
                                                                        }
                                                                    }
                                                                    scope 58 {
                                                                        debug token_vault_after => _276;
                                                                        let _288: u64;
                                                                        let _296: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _299: u64;
                                                                        scope 63 {
                                                                            debug ctoken_vault_after => _288;
                                                                            let _300: u64;
                                                                            let _308: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _311: u64;
                                                                            scope 68 {
                                                                                debug admin_ata_after => _300;
                                                                                let _312: u64;
                                                                                let _320: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _323: u64;
                                                                                scope 73 {
                                                                                    debug reserve_supply_liquidity_after => _312;
                                                                                    let _339: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _342: ();
                                                                                    scope 78 {
                                                                                        debug residual => _339;
                                                                                        scope 79 {
                                                                                        }
                                                                                    }
                                                                                    scope 80 {
                                                                                        debug val => _342;
                                                                                        scope 81 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 74 {
                                                                                    debug residual => _320;
                                                                                    scope 75 {
                                                                                    }
                                                                                }
                                                                                scope 76 {
                                                                                    debug val => _323;
                                                                                    scope 77 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug residual => _308;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug val => _311;
                                                                                scope 72 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 64 {
                                                                            debug residual => _296;
                                                                            scope 65 {
                                                                            }
                                                                        }
                                                                        scope 66 {
                                                                            debug val => _299;
                                                                            scope 67 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug residual => _284;
                                                                        scope 60 {
                                                                        }
                                                                    }
                                                                    scope 61 {
                                                                        debug val => _287;
                                                                        scope 62 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 49 {
                                                                debug residual => _212;
                                                                scope 50 {
                                                                }
                                                            }
                                                            scope 51 {
                                                                debug val => _215;
                                                                scope 52 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 30 {
                                                        debug residual => _132;
                                                        scope 31 {
                                                        }
                                                    }
                                                    scope 32 {
                                                        debug val => _135;
                                                        scope 33 {
                                                        }
                                                    }
                                                    scope 34 {
                                                        debug residual => _143;
                                                        scope 35 {
                                                        }
                                                    }
                                                    scope 36 {
                                                        debug val => _146;
                                                        scope 37 {
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug residual => _148;
                                                        scope 39 {
                                                        }
                                                    }
                                                    scope 40 {
                                                        debug val => _151;
                                                        scope 41 {
                                                        }
                                                    }
                                                }
                                                scope 25 {
                                                    debug residual => _85;
                                                    scope 26 {
                                                    }
                                                }
                                                scope 27 {
                                                    debug val => _88;
                                                    scope 28 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _41;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _44;
                    scope 16 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        _387 = const false;
        _388 = const false;
        _386 = const false;
        _385 = const false;
        _384 = const false;
        _383 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _349 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _4 = &(*_349);
        _3 = <handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _350 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _5 = &(*_350);
        _2 = cpi_mem::CpiMemoryLender::<'_>::build_cpi_memory_lender(move _3, move _5) -> [return: bb2, unwind: bb195];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _351 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _10 = &((*_351).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _9 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load_mut(move _10) -> [return: bb3, unwind: bb194];
    }

    bb3: {
        StorageDead(_10);
        _8 = <std::result::Result<RefMut<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb4, unwind: bb194];
    }

    bb4: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_15);
        _15 = move ((_8 as Continue).0: std::cell::RefMut<'_, state::VaultState>);
        _7 = move _15;
        StorageDead(_15);
        _6 = &mut _7;
        _389 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_6);
        _18 = <RefMut<'_, state::VaultState> as Deref>::deref(move _19) -> [return: bb9, unwind: bb193];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb8, unwind: bb216];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        _447 = discriminant(_8);
        StorageDead(_8);
        goto -> bb176;
    }

    bb9: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = state::VaultState::get_reserves_count(move _17) -> [return: bb10, unwind: bb193];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut _2;
        _24 = &mut (*_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _352 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _28 = &(*_352);
        _27 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _28) -> [return: bb11, unwind: bb193];
    }

    bb11: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = _16;
        _26 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _27, move _29) -> [return: bb12, unwind: bb193];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_30);
        _30 = _16;
        _23 = cpi_refresh_reserves::<'_, '_, std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _24, move _26, move _30) -> [return: bb13, unwind: bb193];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_24);
        _22 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb14, unwind: bb193];
    }

    bb14: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb15, 1: bb16, otherwise: bb6];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_22 as Continue).0: ());
        _21 = _35;
        StorageDead(_35);
        _391 = discriminant(_22);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        _20 = const ();
        StorageDead(_20);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _353 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _39 = &((*_353).2: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _38 = anchor_lang::prelude::AccountLoader::<'_, kamino_lending::Reserve>::load(move _39) -> [return: bb18, unwind: bb193];
    }

    bb16: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb17, unwind: bb215];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        _445 = discriminant(_22);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb175;
    }

    bb18: {
        StorageDead(_39);
        _37 = <std::result::Result<Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb19, unwind: bb193];
    }

    bb19: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb20, 1: bb21, otherwise: bb6];
    }

    bb20: {
        StorageLive(_44);
        _44 = move ((_37 as Continue).0: std::cell::Ref<'_, kamino_lending::Reserve>);
        _387 = const true;
        _36 = move _44;
        StorageDead(_44);
        _393 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_6);
        _46 = <RefMut<'_, state::VaultState> as Deref>::deref(move _47) -> [return: bb23, unwind: bb213];
    }

    bb21: {
        StorageLive(_41);
        _41 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _43) -> [return: bb22, unwind: bb214];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_41);
        _443 = discriminant(_37);
        StorageDead(_37);
        goto -> bb174;
    }

    bb23: {
        StorageDead(_47);
        _45 = ((*_46).2: u64);
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _354 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _50 = &((*_354).2: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _49 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _50) -> [return: bb24, unwind: bb213];
    }

    bb24: {
        StorageDead(_50);
        _48 = (_49.0: &anchor_lang::prelude::Pubkey);
        drop(_49) -> [return: bb25, unwind: bb213];
    }

    bb25: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _355 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _356 = deref_copy ((*_355).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _464 = (((_356.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _55 = &(*_464);
        _54 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _55) -> [return: bb26, unwind: bb213];
    }

    bb26: {
        _53 = &(*_54);
        _52 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _53) -> [return: bb27, unwind: bb213];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        _51 = ((*_52).2: u64);
        StorageDead(_54);
        StorageDead(_52);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _357 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _358 = deref_copy ((*_357).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _465 = (((_358.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _60 = &(*_465);
        _59 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _60) -> [return: bb28, unwind: bb213];
    }

    bb28: {
        _58 = &(*_59);
        _57 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _58) -> [return: bb29, unwind: bb213];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        _56 = ((*_57).2: u64);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _359 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _65 = &((*_359).6: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _64 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _65) -> [return: bb30, unwind: bb213];
    }

    bb30: {
        _63 = &(*_64);
        _62 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _63) -> [return: bb31, unwind: bb213];
    }

    bb31: {
        StorageDead(_65);
        StorageDead(_63);
        _61 = ((*_62).2: u64);
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _360 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _361 = deref_copy ((*_360).10: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _466 = (((_361.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _70 = &(*_466);
        _69 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _70) -> [return: bb32, unwind: bb213];
    }

    bb32: {
        _68 = &(*_69);
        _67 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _68) -> [return: bb33, unwind: bb213];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_68);
        _66 = ((*_67).2: u64);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _362 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _74 = &(*_362);
        _73 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _74) -> [return: bb34, unwind: bb213];
    }

    bb34: {
        StorageDead(_74);
        StorageLive(_75);
        _75 = _16;
        _72 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _73, move _75) -> [return: bb35, unwind: bb213];
    }

    bb35: {
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_76);
        _76 = {closure@programs\kvault\src\handlers\handler_withdraw_pending_fees.rs:53:14: 53:28};
        _71 = <std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, {closure@programs\kvault\src\handlers\handler_withdraw_pending_fees.rs:53:14: 53:28}>(move _72, move _76) -> [return: bb36, unwind: bb213];
    }

    bb36: {
        StorageDead(_76);
        StorageDead(_72);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_6);
        _81 = <RefMut<'_, state::VaultState> as Deref>::deref(move _82) -> [return: bb37, unwind: bb213];
    }

    bb37: {
        _80 = &(*_81);
        StorageDead(_82);
        StorageLive(_83);
        _83 = &(*_48);
        _79 = state::VaultState::allocation_for_reserve(move _80, move _83) -> [return: bb38, unwind: bb213];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_80);
        _78 = <std::result::Result<&VaultAllocation, anchor_lang::error::Error> as Try>::branch(move _79) -> [return: bb39, unwind: bb213];
    }

    bb39: {
        StorageDead(_79);
        _84 = discriminant(_78);
        switchInt(move _84) -> [0: bb40, 1: bb41, otherwise: bb6];
    }

    bb40: {
        StorageLive(_88);
        _88 = ((_78 as Continue).0: &state::VaultAllocation);
        _77 = _88;
        StorageDead(_88);
        _395 = discriminant(_78);
        StorageDead(_81);
        StorageDead(_78);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &((*_77).1: anchor_lang::prelude::Pubkey);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _363 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _364 = deref_copy ((*_363).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _467 = (((_364.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _94 = &(*_467);
        _93 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _94) -> [return: bb43, unwind: bb213];
    }

    bb41: {
        StorageLive(_85);
        _85 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _87) -> [return: bb42, unwind: bb211];
    }

    bb42: {
        StorageDead(_87);
        StorageDead(_85);
        _441 = discriminant(_78);
        StorageDead(_81);
        StorageDead(_78);
        goto -> bb173;
    }

    bb43: {
        _92 = &_93;
        StorageDead(_94);
        _90 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _91, move _92) -> [return: bb44, unwind: bb213];
    }

    bb44: {
        switchInt(move _90) -> [0: bb52, otherwise: bb45];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _345 = const _;
        _100 = &(*_345);
        _99 = anchor_lang::error::ErrorCode::name(move _100) -> [return: bb46, unwind: bb213];
    }

    bb46: {
        StorageDead(_100);
        StorageLive(_102);
        StorageLive(_103);
        _103 = RequireKeysEqViolated;
        _102 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _103) -> [return: bb47, unwind: bb192];
    }

    bb47: {
        StorageDead(_103);
        StorageLive(_104);
        StorageLive(_105);
        _344 = const _;
        _105 = &(*_344);
        _104 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _105) -> [return: bb48, unwind: bb192];
    }

    bb48: {
        StorageDead(_105);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_withdraw_pending_fees.rs", line: const 56_u32 };
        _108 = anchor_lang::error::ErrorOrigin::Source(move _109);
        StorageDead(_109);
        _107 = Option::<ErrorOrigin>::Some(move _108);
        StorageDead(_108);
        StorageLive(_110);
        _110 = Option::<ComparedValues>::None;
        _98 = anchor_lang::error::AnchorError { error_name: move _99, error_code_number: move _102, error_msg: move _104, error_origin: move _107, compared_values: move _110 };
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_99);
        _97 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _98) -> [return: bb49, unwind: bb213];
    }

    bb49: {
        _388 = const true;
        StorageDead(_98);
        StorageLive(_111);
        StorageLive(_112);
        _112 = ((*_77).1: anchor_lang::prelude::Pubkey);
        StorageLive(_113);
        StorageLive(_114);
        _365 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _366 = deref_copy ((*_365).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _468 = (((_366.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _114 = &(*_468);
        _113 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _114) -> [return: bb50, unwind: bb210];
    }

    bb50: {
        StorageDead(_114);
        _111 = (move _112, move _113);
        StorageDead(_113);
        StorageDead(_112);
        _388 = const false;
        _96 = anchor_lang::error::Error::with_pubkeys(move _97, move _111) -> [return: bb51, unwind: bb210];
    }

    bb51: {
        StorageDead(_111);
        _388 = const false;
        StorageDead(_97);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _96);
        StorageDead(_96);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb173;
    }

    bb52: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        _89 = const ();
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &mut (*_6);
        _119 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _120) -> [return: bb53, unwind: bb213];
    }

    bb53: {
        _118 = &mut (*_119);
        StorageDead(_120);
        StorageLive(_121);
        _121 = &(*_48);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_36;
        _124 = &(*_125);
        _123 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _124) -> [return: bb54, unwind: bb213];
    }

    bb54: {
        _122 = &(*_123);
        StorageDead(_124);
        StorageLive(_126);
        _126 = move _71;
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb55, unwind: bb213];
    }

    bb55: {
        _129 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _130) -> [return: bb56, unwind: bb213];
    }

    bb56: {
        _385 = const true;
        _386 = const true;
        StorageDead(_130);
        _131 = discriminant(_129);
        switchInt(move _131) -> [0: bb57, 1: bb58, otherwise: bb6];
    }

    bb57: {
        StorageLive(_135);
        _135 = move ((_129 as Continue).0: anchor_lang::prelude::Clock);
        _128 = move _135;
        StorageDead(_135);
        _127 = (_128.0: u64);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb60, unwind: bb208];
    }

    bb58: {
        StorageLive(_132);
        _132 = move ((_129 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_134);
        _134 = move _132;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _134) -> [return: bb59, unwind: bb208];
    }

    bb59: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb196;
    }

    bb60: {
        _140 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _141) -> [return: bb61, unwind: bb208];
    }

    bb61: {
        _383 = const true;
        _384 = const true;
        StorageDead(_141);
        _142 = discriminant(_140);
        switchInt(move _142) -> [0: bb62, 1: bb63, otherwise: bb6];
    }

    bb62: {
        StorageLive(_146);
        _146 = move ((_140 as Continue).0: anchor_lang::prelude::Clock);
        _139 = move _146;
        StorageDead(_146);
        _138 = (_139.4: i64);
        _137 = <i64 as TryInto<u64>>::try_into(move _138) -> [return: bb65, unwind: bb207];
    }

    bb63: {
        StorageLive(_143);
        _143 = move ((_140 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_145);
        _145 = move _143;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _145) -> [return: bb64, unwind: bb207];
    }

    bb64: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb171;
    }

    bb65: {
        StorageDead(_138);
        _136 = std::result::Result::<u64, TryFromIntError>::unwrap(move _137) -> [return: bb66, unwind: bb207];
    }

    bb66: {
        StorageDead(_137);
        _117 = operations::vault_operations::withdraw_pending_fees::<'_, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_withdraw_pending_fees.rs:53:14: 53:28}>>(move _118, move _121, move _122, move _126, move _127, move _136) -> [return: bb67, unwind: bb207];
    }

    bb67: {
        StorageDead(_136);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_118);
        _116 = <std::result::Result<WithdrawPendingFeesEffects, anchor_lang::error::Error> as Try>::branch(move _117) -> [return: bb68, unwind: bb207];
    }

    bb68: {
        StorageDead(_117);
        _147 = discriminant(_116);
        switchInt(move _147) -> [0: bb69, 1: bb70, otherwise: bb6];
    }

    bb69: {
        StorageLive(_151);
        _151 = move ((_116 as Continue).0: operations::effects::WithdrawPendingFeesEffects);
        _115 = move _151;
        StorageDead(_151);
        _397 = discriminant(_116);
        _399 = discriminant(_140);
        _383 = const false;
        _384 = const false;
        StorageDead(_140);
        StorageDead(_139);
        _401 = discriminant(_129);
        _385 = const false;
        _386 = const false;
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_116);
        StorageLive(_152);
        _152 = (_115.0: u64);
        StorageLive(_153);
        _153 = (_115.1: u64);
        StorageLive(_154);
        _154 = (_115.2: u64);
        StorageLive(_155);
        _155 = (_115.3: u64);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _348 = const _;
        _166 = &(*_348);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_152;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _173) -> [return: bb72, unwind: bb213];
    }

    bb70: {
        StorageLive(_148);
        _148 = move ((_116 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_150);
        _150 = move _148;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _150) -> [return: bb71, unwind: bb206];
    }

    bb71: {
        StorageDead(_150);
        StorageDead(_148);
        _435 = discriminant(_116);
        goto -> bb171;
    }

    bb72: {
        StorageDead(_173);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_153;
        _176 = &(*_177);
        _175 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _176) -> [return: bb73, unwind: bb213];
    }

    bb73: {
        StorageDead(_176);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_154;
        _179 = &(*_180);
        _178 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _179) -> [return: bb74, unwind: bb213];
    }

    bb74: {
        StorageDead(_179);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &_155;
        _182 = &(*_183);
        _181 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _182) -> [return: bb75, unwind: bb213];
    }

    bb75: {
        StorageDead(_182);
        _171 = [move _172, move _175, move _178, move _181];
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb76, unwind: bb213];
    }

    bb76: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb77, unwind: bb213];
    }

    bb77: {
        StorageDead(_163);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <String as Deref>::deref(move _159) -> [return: bb78, unwind: bb191];
    }

    bb78: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb79, unwind: bb191];
    }

    bb79: {
        StorageDead(_157);
        drop(_161) -> [return: bb80, unwind: bb213];
    }

    bb80: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_184);
        StorageLive(_185);
        _387 = const false;
        _185 = move _36;
        _184 = std::mem::drop::<Ref<'_, kamino_lending::Reserve>>(move _185) -> [return: bb81, unwind: bb213];
    }

    bb81: {
        StorageDead(_185);
        StorageDead(_184);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = _153;
        _187 = Gt(move _188, const 0_u64);
        switchInt(move _187) -> [0: bb88, otherwise: bb82];
    }

    bb82: {
        StorageDead(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &_1;
        _192 = &(*_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &mut _2;
        _194 = &mut (*_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = _45;
        _196 = move _197 as u8 (IntToInt);
        StorageDead(_197);
        StorageLive(_198);
        _198 = _153;
        _191 = cpi_redeem_reserve_liquidity_from_withdraw_pending_fees(move _192, move _194, move _196, move _198) -> [return: bb83, unwind: bb213];
    }

    bb83: {
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        _190 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _191) -> [return: bb84, unwind: bb213];
    }

    bb84: {
        StorageDead(_191);
        _199 = discriminant(_190);
        switchInt(move _199) -> [0: bb85, 1: bb86, otherwise: bb6];
    }

    bb85: {
        StorageLive(_203);
        _203 = ((_190 as Continue).0: ());
        _189 = _203;
        StorageDead(_203);
        _403 = discriminant(_190);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_189);
        _186 = const ();
        goto -> bb89;
    }

    bb86: {
        StorageLive(_200);
        _200 = move ((_190 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_202);
        _202 = move _200;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _202) -> [return: bb87, unwind: bb205];
    }

    bb87: {
        StorageDead(_202);
        StorageDead(_200);
        _433 = discriminant(_190);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb170;
    }

    bb88: {
        StorageDead(_188);
        _186 = const ();
        goto -> bb89;
    }

    bb89: {
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _367 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _368 = deref_copy ((*_367).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _469 = (((_368.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _210 = &(*_469);
        _209 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _210) -> [return: bb90, unwind: bb213];
    }

    bb90: {
        StorageDead(_210);
        _208 = &_209;
        _207 = &(*_208);
        _206 = anchor_spl::token::accessor::amount(move _207) -> [return: bb91, unwind: bb190];
    }

    bb91: {
        StorageDead(_207);
        _205 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _206) -> [return: bb92, unwind: bb190];
    }

    bb92: {
        StorageDead(_206);
        _211 = discriminant(_205);
        switchInt(move _211) -> [0: bb93, 1: bb94, otherwise: bb6];
    }

    bb93: {
        StorageLive(_215);
        _215 = ((_205 as Continue).0: u64);
        _204 = _215;
        StorageDead(_215);
        _405 = discriminant(_205);
        drop(_209) -> [return: bb96, unwind: bb213];
    }

    bb94: {
        StorageLive(_212);
        _212 = move ((_205 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb95, unwind: bb204];
    }

    bb95: {
        StorageDead(_214);
        StorageDead(_212);
        _431 = discriminant(_205);
        drop(_209) -> [return: bb168, unwind: bb213];
    }

    bb96: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_205);
        StorageLive(_216);
        StorageLive(_217);
        _217 = _204;
        StorageLive(_218);
        _218 = _51;
        _219 = CheckedSub(_217, _218);
        assert(!move (_219.1: bool), "attempt to compute `{} - {}`, which would overflow", move _217, move _218) -> [success: bb97, unwind: bb213];
    }

    bb97: {
        _216 = move (_219.0: u64);
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = _216;
        StorageLive(_223);
        _223 = _154;
        _221 = Ge(move _222, move _223);
        switchInt(move _221) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        StorageDead(_223);
        StorageDead(_222);
        _220 = const ();
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _369 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _246 = &((*_369).13: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _245 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _246) -> [return: bb104, unwind: bb213];
    }

    bb99: {
        StorageDead(_223);
        StorageDead(_222);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _347 = const _;
        _228 = &(*_347);
        _227 = KaminoVaultError::name(move _228) -> [return: bb100, unwind: bb213];
    }

    bb100: {
        StorageDead(_228);
        StorageLive(_230);
        StorageLive(_231);
        _231 = KaminoVaultError::NotEnoughLiquidityDisinvestedToSendToUser;
        _230 = <KaminoVaultError as Into<u32>>::into(move _231) -> [return: bb101, unwind: bb189];
    }

    bb101: {
        StorageDead(_231);
        StorageLive(_232);
        StorageLive(_233);
        _346 = const _;
        _233 = &(*_346);
        _232 = <KaminoVaultError as ToString>::to_string(move _233) -> [return: bb102, unwind: bb189];
    }

    bb102: {
        StorageDead(_233);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_withdraw_pending_fees.rs", line: const 101_u32 };
        _236 = anchor_lang::error::ErrorOrigin::Source(move _237);
        StorageDead(_237);
        _235 = Option::<ErrorOrigin>::Some(move _236);
        StorageDead(_236);
        StorageLive(_238);
        _238 = Option::<ComparedValues>::None;
        _226 = anchor_lang::error::AnchorError { error_name: move _227, error_code_number: move _230, error_msg: move _232, error_origin: move _235, compared_values: move _238 };
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_227);
        _225 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _226) -> [return: bb103, unwind: bb213];
    }

    bb103: {
        StorageDead(_226);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _225);
        StorageDead(_225);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb167;
    }

    bb104: {
        StorageDead(_246);
        StorageLive(_247);
        StorageLive(_248);
        _370 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _371 = deref_copy ((*_370).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _470 = (((_371.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _248 = &(*_470);
        _247 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _248) -> [return: bb105, unwind: bb188];
    }

    bb105: {
        StorageDead(_248);
        StorageLive(_249);
        StorageLive(_250);
        _372 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _250 = &((*_372).6: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _249 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _250) -> [return: bb106, unwind: bb187];
    }

    bb106: {
        StorageDead(_250);
        StorageLive(_251);
        StorageLive(_252);
        _373 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _252 = &((*_373).7: anchor_lang::prelude::AccountInfo<'_>);
        _251 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _252) -> [return: bb107, unwind: bb186];
    }

    bb107: {
        StorageDead(_252);
        StorageLive(_253);
        StorageLive(_254);
        _374 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _254 = &((*_374).5: anchor_lang::prelude::AccountInfo<'_>);
        _253 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _254) -> [return: bb108, unwind: bb185];
    }

    bb108: {
        StorageDead(_254);
        StorageLive(_255);
        StorageLive(_256);
        _375 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _256 = &((*_375).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _255 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _256) -> [return: bb109, unwind: bb184];
    }

    bb109: {
        StorageDead(_256);
        _244 = VaultTransferAccounts::<'_> { token_program: move _245, token_vault: move _247, token_ata: move _249, token_mint: move _251, base_vault_authority: move _253, vault_state: move _255 };
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_245);
        _243 = &_244;
        _242 = &(*_243);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &(*_6);
        _260 = <RefMut<'_, state::VaultState> as Deref>::deref(move _261) -> [return: bb110, unwind: bb183];
    }

    bb110: {
        StorageDead(_261);
        _259 = ((*_260).2: u64);
        _258 = <u8 as std::convert::TryFrom<u64>>::try_from(move _259) -> [return: bb111, unwind: bb183];
    }

    bb111: {
        StorageDead(_259);
        _257 = std::result::Result::<u8, TryFromIntError>::unwrap(move _258) -> [return: bb112, unwind: bb183];
    }

    bb112: {
        StorageDead(_258);
        StorageLive(_262);
        StorageLive(_263);
        _263 = _152;
        StorageLive(_264);
        _264 = _154;
        _265 = CheckedAdd(_263, _264);
        assert(!move (_265.1: bool), "attempt to compute `{} + {}`, which would overflow", move _263, move _264) -> [success: bb113, unwind: bb183];
    }

    bb113: {
        _262 = move (_265.0: u64);
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &(*_6);
        _269 = <RefMut<'_, state::VaultState> as Deref>::deref(move _270) -> [return: bb114, unwind: bb183];
    }

    bb114: {
        StorageDead(_270);
        _268 = ((*_269).4: u64);
        _267 = <u8 as std::convert::TryFrom<u64>>::try_from(move _268) -> [return: bb115, unwind: bb183];
    }

    bb115: {
        StorageDead(_268);
        _266 = std::result::Result::<u8, TryFromIntError>::unwrap(move _267) -> [return: bb116, unwind: bb183];
    }

    bb116: {
        StorageDead(_267);
        _241 = transfer_to_token_account(move _242, move _257, move _262, move _266) -> [return: bb117, unwind: bb183];
    }

    bb117: {
        StorageDead(_266);
        StorageDead(_262);
        StorageDead(_257);
        StorageDead(_242);
        _240 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _241) -> [return: bb118, unwind: bb183];
    }

    bb118: {
        StorageDead(_241);
        _271 = discriminant(_240);
        switchInt(move _271) -> [0: bb119, 1: bb120, otherwise: bb6];
    }

    bb119: {
        StorageLive(_275);
        _275 = ((_240 as Continue).0: ());
        _239 = _275;
        StorageDead(_275);
        _407 = discriminant(_240);
        StorageDead(_269);
        StorageDead(_260);
        drop(_244) -> [return: bb122, unwind: bb213];
    }

    bb120: {
        StorageLive(_272);
        _272 = move ((_240 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_274);
        _274 = move _272;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _274) -> [return: bb121, unwind: bb203];
    }

    bb121: {
        StorageDead(_274);
        StorageDead(_272);
        _429 = discriminant(_240);
        StorageDead(_269);
        StorageDead(_260);
        drop(_244) -> [return: bb166, unwind: bb213];
    }

    bb122: {
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_239);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _376 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _377 = deref_copy ((*_376).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _471 = (((_377.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _282 = &(*_471);
        _281 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _282) -> [return: bb123, unwind: bb213];
    }

    bb123: {
        StorageDead(_282);
        _280 = &_281;
        _279 = &(*_280);
        _278 = anchor_spl::token::accessor::amount(move _279) -> [return: bb124, unwind: bb182];
    }

    bb124: {
        StorageDead(_279);
        _277 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _278) -> [return: bb125, unwind: bb182];
    }

    bb125: {
        StorageDead(_278);
        _283 = discriminant(_277);
        switchInt(move _283) -> [0: bb126, 1: bb127, otherwise: bb6];
    }

    bb126: {
        StorageLive(_287);
        _287 = ((_277 as Continue).0: u64);
        _276 = _287;
        StorageDead(_287);
        _409 = discriminant(_277);
        drop(_281) -> [return: bb129, unwind: bb213];
    }

    bb127: {
        StorageLive(_284);
        _284 = move ((_277 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_286);
        _286 = move _284;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _286) -> [return: bb128, unwind: bb202];
    }

    bb128: {
        StorageDead(_286);
        StorageDead(_284);
        _427 = discriminant(_277);
        drop(_281) -> [return: bb164, unwind: bb213];
    }

    bb129: {
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _378 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _379 = deref_copy ((*_378).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _472 = (((_379.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _294 = &(*_472);
        _293 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _294) -> [return: bb130, unwind: bb213];
    }

    bb130: {
        StorageDead(_294);
        _292 = &_293;
        _291 = &(*_292);
        _290 = anchor_spl::token::accessor::amount(move _291) -> [return: bb131, unwind: bb181];
    }

    bb131: {
        StorageDead(_291);
        _289 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _290) -> [return: bb132, unwind: bb181];
    }

    bb132: {
        StorageDead(_290);
        _295 = discriminant(_289);
        switchInt(move _295) -> [0: bb133, 1: bb134, otherwise: bb6];
    }

    bb133: {
        StorageLive(_299);
        _299 = ((_289 as Continue).0: u64);
        _288 = _299;
        StorageDead(_299);
        _411 = discriminant(_289);
        drop(_293) -> [return: bb136, unwind: bb213];
    }

    bb134: {
        StorageLive(_296);
        _296 = move ((_289 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_298);
        _298 = move _296;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _298) -> [return: bb135, unwind: bb201];
    }

    bb135: {
        StorageDead(_298);
        StorageDead(_296);
        _425 = discriminant(_289);
        drop(_293) -> [return: bb162, unwind: bb213];
    }

    bb136: {
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_289);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _380 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _306 = &((*_380).6: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _305 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _306) -> [return: bb137, unwind: bb213];
    }

    bb137: {
        StorageDead(_306);
        _304 = &_305;
        _303 = &(*_304);
        _302 = anchor_spl::token::accessor::amount(move _303) -> [return: bb138, unwind: bb180];
    }

    bb138: {
        StorageDead(_303);
        _301 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _302) -> [return: bb139, unwind: bb180];
    }

    bb139: {
        StorageDead(_302);
        _307 = discriminant(_301);
        switchInt(move _307) -> [0: bb140, 1: bb141, otherwise: bb6];
    }

    bb140: {
        StorageLive(_311);
        _311 = ((_301 as Continue).0: u64);
        _300 = _311;
        StorageDead(_311);
        _413 = discriminant(_301);
        drop(_305) -> [return: bb143, unwind: bb213];
    }

    bb141: {
        StorageLive(_308);
        _308 = move ((_301 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_310);
        _310 = move _308;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _310) -> [return: bb142, unwind: bb200];
    }

    bb142: {
        StorageDead(_310);
        StorageDead(_308);
        _423 = discriminant(_301);
        drop(_305) -> [return: bb160, unwind: bb213];
    }

    bb143: {
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_301);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _381 = deref_copy (_1.1: &mut handlers::handler_withdraw_pending_fees::WithdrawPendingFees<'_>);
        _382 = deref_copy ((*_381).10: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _473 = (((_382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _318 = &(*_473);
        _317 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _318) -> [return: bb144, unwind: bb213];
    }

    bb144: {
        StorageDead(_318);
        _316 = &_317;
        _315 = &(*_316);
        _314 = anchor_spl::token::accessor::amount(move _315) -> [return: bb145, unwind: bb179];
    }

    bb145: {
        StorageDead(_315);
        _313 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _314) -> [return: bb146, unwind: bb179];
    }

    bb146: {
        StorageDead(_314);
        _319 = discriminant(_313);
        switchInt(move _319) -> [0: bb147, 1: bb148, otherwise: bb6];
    }

    bb147: {
        StorageLive(_323);
        _323 = ((_313 as Continue).0: u64);
        _312 = _323;
        StorageDead(_323);
        _415 = discriminant(_313);
        drop(_317) -> [return: bb150, unwind: bb213];
    }

    bb148: {
        StorageLive(_320);
        _320 = move ((_313 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_322);
        _322 = move _320;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _322) -> [return: bb149, unwind: bb199];
    }

    bb149: {
        StorageDead(_322);
        StorageDead(_320);
        _421 = discriminant(_313);
        drop(_317) -> [return: bb158, unwind: bb213];
    }

    bb150: {
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_313);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = _66;
        StorageLive(_329);
        _329 = _51;
        StorageLive(_330);
        _330 = _56;
        StorageLive(_331);
        _331 = _61;
        _327 = vault_checks::VaultAndUserBalances { reserve_supply_liquidity_balance: move _328, vault_token_balance: move _329, vault_ctoken_balance: move _330, user_token_balance: move _331, user_shares_balance: const 0_u64 };
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_328);
        StorageLive(_332);
        StorageLive(_333);
        _333 = _312;
        StorageLive(_334);
        _334 = _276;
        StorageLive(_335);
        _335 = _288;
        StorageLive(_336);
        _336 = _300;
        _332 = vault_checks::VaultAndUserBalances { reserve_supply_liquidity_balance: move _333, vault_token_balance: move _334, vault_ctoken_balance: move _335, user_token_balance: move _336, user_shares_balance: const 0_u64 };
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_333);
        StorageLive(_337);
        _337 = move _115;
        _326 = post_transfer_withdraw_pending_fees_balance_checks(move _327, move _332, move _337) -> [return: bb151, unwind: bb213];
    }

    bb151: {
        StorageDead(_337);
        StorageDead(_332);
        StorageDead(_327);
        _325 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _326) -> [return: bb152, unwind: bb213];
    }

    bb152: {
        StorageDead(_326);
        _338 = discriminant(_325);
        switchInt(move _338) -> [0: bb153, 1: bb154, otherwise: bb6];
    }

    bb153: {
        StorageLive(_342);
        _342 = ((_325 as Continue).0: ());
        _324 = _342;
        StorageDead(_342);
        _417 = discriminant(_325);
        StorageDead(_325);
        StorageDead(_324);
        StorageLive(_343);
        _343 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _343);
        StorageDead(_343);
        StorageDead(_312);
        StorageDead(_300);
        StorageDead(_288);
        StorageDead(_276);
        StorageDead(_216);
        StorageDead(_204);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_115);
        StorageDead(_77);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        _387 = const false;
        StorageDead(_36);
        StorageDead(_16);
        drop(_7) -> [return: bb156, unwind: bb194];
    }

    bb154: {
        StorageLive(_339);
        _339 = move ((_325 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_341);
        _341 = move _339;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _341) -> [return: bb155, unwind: bb198];
    }

    bb155: {
        StorageDead(_341);
        StorageDead(_339);
        _419 = discriminant(_325);
        StorageDead(_325);
        StorageDead(_324);
        goto -> bb159;
    }

    bb156: {
        StorageDead(_7);
        StorageDead(_6);
        drop(_2) -> [return: bb157, unwind: bb195];
    }

    bb157: {
        StorageDead(_2);
        goto -> bb178;
    }

    bb158: {
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_313);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_312);
        goto -> bb161;
    }

    bb160: {
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_301);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_300);
        goto -> bb163;
    }

    bb162: {
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_289);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_288);
        goto -> bb165;
    }

    bb164: {
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        goto -> bb165;
    }

    bb165: {
        StorageDead(_276);
        goto -> bb167;
    }

    bb166: {
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_239);
        goto -> bb167;
    }

    bb167: {
        StorageDead(_216);
        goto -> bb169;
    }

    bb168: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_205);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_204);
        goto -> bb170;
    }

    bb170: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb172;
    }

    bb171: {
        _437 = discriminant(_140);
        _383 = const false;
        _384 = const false;
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb196;
    }

    bb172: {
        StorageDead(_115);
        goto -> bb173;
    }

    bb173: {
        StorageDead(_77);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        switchInt(_387) -> [0: bb174, otherwise: bb197];
    }

    bb174: {
        _387 = const false;
        StorageDead(_36);
        goto -> bb175;
    }

    bb175: {
        StorageDead(_16);
        drop(_7) -> [return: bb176, unwind: bb194];
    }

    bb176: {
        StorageDead(_7);
        StorageDead(_6);
        drop(_2) -> [return: bb177, unwind: bb195];
    }

    bb177: {
        StorageDead(_2);
        goto -> bb178;
    }

    bb178: {
        return;
    }

    bb179 (cleanup): {
        drop(_317) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_305) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_293) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_281) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_244) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_253) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_251) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_249) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_247) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_245) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_227) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_209) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_161) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_99) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_7) -> [return: bb194, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_2) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        resume;
    }

    bb196: {
        _439 = discriminant(_129);
        _385 = const false;
        _386 = const false;
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_116);
        goto -> bb172;
    }

    bb197: {
        drop(_36) -> [return: bb174, unwind: bb193];
    }

    bb198 (cleanup): {
        _449 = discriminant(_325);
        goto -> bb213;
    }

    bb199 (cleanup): {
        _450 = discriminant(_313);
        goto -> bb179;
    }

    bb200 (cleanup): {
        _451 = discriminant(_301);
        goto -> bb180;
    }

    bb201 (cleanup): {
        _452 = discriminant(_289);
        goto -> bb181;
    }

    bb202 (cleanup): {
        _453 = discriminant(_277);
        goto -> bb182;
    }

    bb203 (cleanup): {
        _454 = discriminant(_240);
        goto -> bb183;
    }

    bb204 (cleanup): {
        _455 = discriminant(_205);
        goto -> bb190;
    }

    bb205 (cleanup): {
        _456 = discriminant(_190);
        goto -> bb213;
    }

    bb206 (cleanup): {
        _457 = discriminant(_116);
        goto -> bb207;
    }

    bb207 (cleanup): {
        _458 = discriminant(_140);
        goto -> bb208;
    }

    bb208 (cleanup): {
        _459 = discriminant(_129);
        goto -> bb213;
    }

    bb209 (cleanup): {
        drop(_97) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        switchInt(_388) -> [0: bb213, otherwise: bb209];
    }

    bb211 (cleanup): {
        _460 = discriminant(_78);
        goto -> bb213;
    }

    bb212 (cleanup): {
        drop(_36) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        switchInt(_387) -> [0: bb193, otherwise: bb212];
    }

    bb214 (cleanup): {
        _461 = discriminant(_37);
        goto -> bb193;
    }

    bb215 (cleanup): {
        _462 = discriminant(_22);
        goto -> bb193;
    }

    bb216 (cleanup): {
        _463 = discriminant(_8);
        goto -> bb194;
    }
}
