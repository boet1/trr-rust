// MIR for `operations::vault_operations::invest` before PreCodegen

fn operations::vault_operations::invest(_1: &mut state::VaultState, _2: impl Iterator<Item = T>, _3: &kamino_lending::Reserve, _4: &anchor_lang::prelude::Pubkey, _5: u64, _6: u64) -> std::result::Result<InvestEffects, anchor_lang::error::Error> {
    debug vault => _1;
    debug reserves_iter => _2;
    debug reserve => _3;
    debug reserve_address => _4;
    debug current_slot => _5;
    debug current_timestamp => _6;
    let mut _0: std::result::Result<operations::effects::InvestEffects, anchor_lang::error::Error>;
    let _7: operations::vault_operations::common::Holdings;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, operations::vault_operations::common::Holdings>;
    let mut _9: std::result::Result<operations::vault_operations::common::Holdings, anchor_lang::error::Error>;
    let mut _10: &state::VaultState;
    let mut _11: impl Iterator<Item = T>;
    let mut _12: u64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _17: operations::vault_operations::common::Holdings;
    let _18: ();
    let _21: ();
    let mut _22: std::result::Result<(), std::fmt::Error>;
    let mut _23: &mut arrform::ArrForm<50>;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 1];
    let _27: &[&str; 1];
    let _28: [&str; 1];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &u64;
    let _35: &u64;
    let mut _36: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _37: &mut arrform::ArrForm<50>;
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: &std::string::String;
    let _42: &std::string::String;
    let _43: std::string::String;
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[&str; 1];
    let _48: &[&str; 1];
    let _49: [&str; 1];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let mut _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &&str;
    let _56: &&str;
    let _57: &str;
    let mut _58: &arrform::ArrForm<50>;
    let _59: ();
    let _62: ();
    let mut _63: std::result::Result<(), std::fmt::Error>;
    let mut _64: &mut arrform::ArrForm<50>;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 1];
    let _68: &[&str; 1];
    let _69: [&str; 1];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: [core::fmt::rt::Argument<'_>; 1];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &kamino_lending::utils::FractionDisplay<'_>;
    let _76: &kamino_lending::utils::FractionDisplay<'_>;
    let _77: kamino_lending::utils::FractionDisplay<'_>;
    let mut _78: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _79: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _80: &mut arrform::ArrForm<50>;
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 1];
    let _91: &[&str; 1];
    let _92: [&str; 1];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &&str;
    let _99: &&str;
    let _100: &str;
    let mut _101: &arrform::ArrForm<50>;
    let _103: ();
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _105: std::result::Result<(), anchor_lang::error::Error>;
    let mut _106: &mut state::VaultState;
    let mut _107: &operations::vault_operations::common::Invested;
    let _108: &operations::vault_operations::common::Invested;
    let mut _109: u64;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _115: ();
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _117: std::result::Result<(), anchor_lang::error::Error>;
    let mut _118: &mut state::VaultState;
    let mut _119: &operations::vault_operations::common::Invested;
    let _120: &operations::vault_operations::common::Invested;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _126: ();
    let mut _127: bool;
    let mut _128: &state::VaultState;
    let mut _129: anchor_lang::prelude::Pubkey;
    let mut _130: !;
    let mut _131: anchor_lang::error::Error;
    let mut _132: anchor_lang::error::AnchorError;
    let mut _133: std::string::String;
    let mut _134: &KaminoVaultError;
    let _135: KaminoVaultError;
    let mut _136: u32;
    let mut _137: KaminoVaultError;
    let mut _138: std::string::String;
    let mut _139: &KaminoVaultError;
    let _140: KaminoVaultError;
    let mut _141: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _142: anchor_lang::error::ErrorOrigin;
    let mut _143: anchor_lang::error::Source;
    let mut _144: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, &state::VaultAllocation>;
    let mut _147: std::result::Result<&state::VaultAllocation, anchor_lang::error::Error>;
    let mut _148: &state::VaultState;
    let mut _149: &anchor_lang::prelude::Pubkey;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _155: ();
    let mut _156: usize;
    let mut _157: &str;
    let _158: &str;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: bool;
    let _167: ();
    let mut _168: std::result::Result<(), std::fmt::Error>;
    let mut _169: &mut arrform::ArrForm<150>;
    let mut _170: std::fmt::Arguments<'_>;
    let mut _171: &[&str];
    let mut _172: &[&str; 3];
    let _173: &[&str; 3];
    let _174: [&str; 3];
    let mut _175: &[core::fmt::rt::Argument<'_>];
    let mut _176: &[core::fmt::rt::Argument<'_>; 3];
    let _177: &[core::fmt::rt::Argument<'_>; 3];
    let _178: [core::fmt::rt::Argument<'_>; 3];
    let mut _179: core::fmt::rt::Argument<'_>;
    let mut _180: &anchor_lang::prelude::Pubkey;
    let _181: &anchor_lang::prelude::Pubkey;
    let mut _182: core::fmt::rt::Argument<'_>;
    let mut _183: &u64;
    let _184: &u64;
    let mut _185: core::fmt::rt::Argument<'_>;
    let mut _186: &u64;
    let _187: &u64;
    let mut _188: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _189: &mut arrform::ArrForm<150>;
    let _190: ();
    let mut _191: &str;
    let _192: &str;
    let mut _193: &std::string::String;
    let _194: &std::string::String;
    let _195: std::string::String;
    let mut _197: std::fmt::Arguments<'_>;
    let mut _198: &[&str];
    let mut _199: &[&str; 1];
    let _200: &[&str; 1];
    let _201: [&str; 1];
    let mut _202: &[core::fmt::rt::Argument<'_>];
    let mut _203: &[core::fmt::rt::Argument<'_>; 1];
    let _204: &[core::fmt::rt::Argument<'_>; 1];
    let _205: [core::fmt::rt::Argument<'_>; 1];
    let mut _206: core::fmt::rt::Argument<'_>;
    let mut _207: &&str;
    let _208: &&str;
    let _209: &str;
    let mut _210: &arrform::ArrForm<150>;
    let _213: ();
    let mut _214: std::result::Result<(), std::fmt::Error>;
    let mut _215: &mut arrform::ArrForm<300>;
    let mut _216: std::fmt::Arguments<'_>;
    let mut _217: &[&str];
    let mut _218: &[&str; 3];
    let _219: &[&str; 3];
    let _220: [&str; 3];
    let mut _221: &[core::fmt::rt::Argument<'_>];
    let mut _222: &[core::fmt::rt::Argument<'_>; 3];
    let _223: &[core::fmt::rt::Argument<'_>; 3];
    let _224: [core::fmt::rt::Argument<'_>; 3];
    let mut _225: core::fmt::rt::Argument<'_>;
    let mut _226: &anchor_lang::prelude::Pubkey;
    let _227: &anchor_lang::prelude::Pubkey;
    let mut _228: core::fmt::rt::Argument<'_>;
    let mut _229: &u64;
    let _230: &u64;
    let mut _231: core::fmt::rt::Argument<'_>;
    let mut _232: &u64;
    let _233: &u64;
    let mut _234: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _235: &mut arrform::ArrForm<300>;
    let _236: ();
    let mut _237: &str;
    let _238: &str;
    let mut _239: &std::string::String;
    let _240: &std::string::String;
    let _241: std::string::String;
    let mut _243: std::fmt::Arguments<'_>;
    let mut _244: &[&str];
    let mut _245: &[&str; 1];
    let _246: &[&str; 1];
    let _247: [&str; 1];
    let mut _248: &[core::fmt::rt::Argument<'_>];
    let mut _249: &[core::fmt::rt::Argument<'_>; 1];
    let _250: &[core::fmt::rt::Argument<'_>; 1];
    let _251: [core::fmt::rt::Argument<'_>; 1];
    let mut _252: core::fmt::rt::Argument<'_>;
    let mut _253: &&str;
    let _254: &&str;
    let _255: &str;
    let mut _256: &arrform::ArrForm<300>;
    let _259: ();
    let mut _260: std::result::Result<(), std::fmt::Error>;
    let mut _261: &mut arrform::ArrForm<600>;
    let mut _262: std::fmt::Arguments<'_>;
    let mut _263: &[&str];
    let mut _264: &[&str; 3];
    let _265: &[&str; 3];
    let _266: [&str; 3];
    let mut _267: &[core::fmt::rt::Argument<'_>];
    let mut _268: &[core::fmt::rt::Argument<'_>; 3];
    let _269: &[core::fmt::rt::Argument<'_>; 3];
    let _270: [core::fmt::rt::Argument<'_>; 3];
    let mut _271: core::fmt::rt::Argument<'_>;
    let mut _272: &anchor_lang::prelude::Pubkey;
    let _273: &anchor_lang::prelude::Pubkey;
    let mut _274: core::fmt::rt::Argument<'_>;
    let mut _275: &u64;
    let _276: &u64;
    let mut _277: core::fmt::rt::Argument<'_>;
    let mut _278: &u64;
    let _279: &u64;
    let mut _280: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _281: &mut arrform::ArrForm<600>;
    let _282: ();
    let mut _283: &str;
    let _284: &str;
    let mut _285: &std::string::String;
    let _286: &std::string::String;
    let _287: std::string::String;
    let mut _289: std::fmt::Arguments<'_>;
    let mut _290: &[&str];
    let mut _291: &[&str; 1];
    let _292: &[&str; 1];
    let _293: [&str; 1];
    let mut _294: &[core::fmt::rt::Argument<'_>];
    let mut _295: &[core::fmt::rt::Argument<'_>; 1];
    let _296: &[core::fmt::rt::Argument<'_>; 1];
    let _297: [core::fmt::rt::Argument<'_>; 1];
    let mut _298: core::fmt::rt::Argument<'_>;
    let mut _299: &&str;
    let _300: &&str;
    let _301: &str;
    let mut _302: &arrform::ArrForm<600>;
    let _305: ();
    let mut _306: std::result::Result<(), std::fmt::Error>;
    let mut _307: &mut arrform::ArrForm<1200>;
    let mut _308: std::fmt::Arguments<'_>;
    let mut _309: &[&str];
    let mut _310: &[&str; 3];
    let _311: &[&str; 3];
    let _312: [&str; 3];
    let mut _313: &[core::fmt::rt::Argument<'_>];
    let mut _314: &[core::fmt::rt::Argument<'_>; 3];
    let _315: &[core::fmt::rt::Argument<'_>; 3];
    let _316: [core::fmt::rt::Argument<'_>; 3];
    let mut _317: core::fmt::rt::Argument<'_>;
    let mut _318: &anchor_lang::prelude::Pubkey;
    let _319: &anchor_lang::prelude::Pubkey;
    let mut _320: core::fmt::rt::Argument<'_>;
    let mut _321: &u64;
    let _322: &u64;
    let mut _323: core::fmt::rt::Argument<'_>;
    let mut _324: &u64;
    let _325: &u64;
    let mut _326: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _327: &mut arrform::ArrForm<1200>;
    let _328: ();
    let mut _329: &str;
    let _330: &str;
    let mut _331: &std::string::String;
    let _332: &std::string::String;
    let _333: std::string::String;
    let mut _335: std::fmt::Arguments<'_>;
    let mut _336: &[&str];
    let mut _337: &[&str; 1];
    let _338: &[&str; 1];
    let _339: [&str; 1];
    let mut _340: &[core::fmt::rt::Argument<'_>];
    let mut _341: &[core::fmt::rt::Argument<'_>; 1];
    let _342: &[core::fmt::rt::Argument<'_>; 1];
    let _343: [core::fmt::rt::Argument<'_>; 1];
    let mut _344: core::fmt::rt::Argument<'_>;
    let mut _345: &&str;
    let _346: &&str;
    let _347: &str;
    let mut _348: &arrform::ArrForm<1200>;
    let _349: ();
    let mut _350: bool;
    let mut _351: u64;
    let mut _352: u64;
    let mut _353: u64;
    let mut _354: u64;
    let mut _355: (u64, bool);
    let mut _356: !;
    let mut _357: anchor_lang::error::Error;
    let mut _358: anchor_lang::error::AnchorError;
    let mut _359: std::string::String;
    let mut _360: &KaminoVaultError;
    let _361: KaminoVaultError;
    let mut _362: u32;
    let mut _363: KaminoVaultError;
    let mut _364: std::string::String;
    let mut _365: &KaminoVaultError;
    let _366: KaminoVaultError;
    let mut _367: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _368: anchor_lang::error::ErrorOrigin;
    let mut _369: anchor_lang::error::Source;
    let mut _370: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _372: &operations::vault_operations::common::Invested;
    let mut _373: &anchor_lang::prelude::Pubkey;
    let mut _376: &state::VaultAllocation;
    let mut _379: (fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, operations::effects::InvestingDirection);
    let mut _380: bool;
    let mut _381: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _382: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _384: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _385: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _386: ();
    let mut _387: usize;
    let mut _388: &str;
    let _389: &str;
    let mut _390: bool;
    let mut _391: bool;
    let mut _392: bool;
    let mut _393: bool;
    let mut _394: bool;
    let mut _395: bool;
    let _398: ();
    let mut _399: std::result::Result<(), std::fmt::Error>;
    let mut _400: &mut arrform::ArrForm<150>;
    let mut _401: std::fmt::Arguments<'_>;
    let mut _402: &[&str];
    let mut _403: &[&str; 3];
    let _404: &[&str; 3];
    let _405: [&str; 3];
    let mut _406: &[core::fmt::rt::Argument<'_>];
    let mut _407: &[core::fmt::rt::Argument<'_>; 3];
    let _408: &[core::fmt::rt::Argument<'_>; 3];
    let _409: [core::fmt::rt::Argument<'_>; 3];
    let mut _410: core::fmt::rt::Argument<'_>;
    let mut _411: &kamino_lending::utils::FractionDisplay<'_>;
    let _412: &kamino_lending::utils::FractionDisplay<'_>;
    let _413: kamino_lending::utils::FractionDisplay<'_>;
    let mut _414: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _415: core::fmt::rt::Argument<'_>;
    let mut _416: &kamino_lending::utils::FractionDisplay<'_>;
    let _417: &kamino_lending::utils::FractionDisplay<'_>;
    let _418: kamino_lending::utils::FractionDisplay<'_>;
    let mut _419: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _420: core::fmt::rt::Argument<'_>;
    let mut _421: &kamino_lending::utils::FractionDisplay<'_>;
    let _422: &kamino_lending::utils::FractionDisplay<'_>;
    let _423: kamino_lending::utils::FractionDisplay<'_>;
    let mut _424: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _425: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _426: &mut arrform::ArrForm<150>;
    let _427: ();
    let mut _428: &str;
    let _429: &str;
    let mut _430: &std::string::String;
    let _431: &std::string::String;
    let _432: std::string::String;
    let mut _434: std::fmt::Arguments<'_>;
    let mut _435: &[&str];
    let mut _436: &[&str; 1];
    let _437: &[&str; 1];
    let _438: [&str; 1];
    let mut _439: &[core::fmt::rt::Argument<'_>];
    let mut _440: &[core::fmt::rt::Argument<'_>; 1];
    let _441: &[core::fmt::rt::Argument<'_>; 1];
    let _442: [core::fmt::rt::Argument<'_>; 1];
    let mut _443: core::fmt::rt::Argument<'_>;
    let mut _444: &&str;
    let _445: &&str;
    let _446: &str;
    let mut _447: &arrform::ArrForm<150>;
    let _450: ();
    let mut _451: std::result::Result<(), std::fmt::Error>;
    let mut _452: &mut arrform::ArrForm<300>;
    let mut _453: std::fmt::Arguments<'_>;
    let mut _454: &[&str];
    let mut _455: &[&str; 3];
    let _456: &[&str; 3];
    let _457: [&str; 3];
    let mut _458: &[core::fmt::rt::Argument<'_>];
    let mut _459: &[core::fmt::rt::Argument<'_>; 3];
    let _460: &[core::fmt::rt::Argument<'_>; 3];
    let _461: [core::fmt::rt::Argument<'_>; 3];
    let mut _462: core::fmt::rt::Argument<'_>;
    let mut _463: &kamino_lending::utils::FractionDisplay<'_>;
    let _464: &kamino_lending::utils::FractionDisplay<'_>;
    let _465: kamino_lending::utils::FractionDisplay<'_>;
    let mut _466: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _467: core::fmt::rt::Argument<'_>;
    let mut _468: &kamino_lending::utils::FractionDisplay<'_>;
    let _469: &kamino_lending::utils::FractionDisplay<'_>;
    let _470: kamino_lending::utils::FractionDisplay<'_>;
    let mut _471: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _472: core::fmt::rt::Argument<'_>;
    let mut _473: &kamino_lending::utils::FractionDisplay<'_>;
    let _474: &kamino_lending::utils::FractionDisplay<'_>;
    let _475: kamino_lending::utils::FractionDisplay<'_>;
    let mut _476: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _477: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _478: &mut arrform::ArrForm<300>;
    let _479: ();
    let mut _480: &str;
    let _481: &str;
    let mut _482: &std::string::String;
    let _483: &std::string::String;
    let _484: std::string::String;
    let mut _486: std::fmt::Arguments<'_>;
    let mut _487: &[&str];
    let mut _488: &[&str; 1];
    let _489: &[&str; 1];
    let _490: [&str; 1];
    let mut _491: &[core::fmt::rt::Argument<'_>];
    let mut _492: &[core::fmt::rt::Argument<'_>; 1];
    let _493: &[core::fmt::rt::Argument<'_>; 1];
    let _494: [core::fmt::rt::Argument<'_>; 1];
    let mut _495: core::fmt::rt::Argument<'_>;
    let mut _496: &&str;
    let _497: &&str;
    let _498: &str;
    let mut _499: &arrform::ArrForm<300>;
    let _502: ();
    let mut _503: std::result::Result<(), std::fmt::Error>;
    let mut _504: &mut arrform::ArrForm<600>;
    let mut _505: std::fmt::Arguments<'_>;
    let mut _506: &[&str];
    let mut _507: &[&str; 3];
    let _508: &[&str; 3];
    let _509: [&str; 3];
    let mut _510: &[core::fmt::rt::Argument<'_>];
    let mut _511: &[core::fmt::rt::Argument<'_>; 3];
    let _512: &[core::fmt::rt::Argument<'_>; 3];
    let _513: [core::fmt::rt::Argument<'_>; 3];
    let mut _514: core::fmt::rt::Argument<'_>;
    let mut _515: &kamino_lending::utils::FractionDisplay<'_>;
    let _516: &kamino_lending::utils::FractionDisplay<'_>;
    let _517: kamino_lending::utils::FractionDisplay<'_>;
    let mut _518: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _519: core::fmt::rt::Argument<'_>;
    let mut _520: &kamino_lending::utils::FractionDisplay<'_>;
    let _521: &kamino_lending::utils::FractionDisplay<'_>;
    let _522: kamino_lending::utils::FractionDisplay<'_>;
    let mut _523: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _524: core::fmt::rt::Argument<'_>;
    let mut _525: &kamino_lending::utils::FractionDisplay<'_>;
    let _526: &kamino_lending::utils::FractionDisplay<'_>;
    let _527: kamino_lending::utils::FractionDisplay<'_>;
    let mut _528: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _529: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _530: &mut arrform::ArrForm<600>;
    let _531: ();
    let mut _532: &str;
    let _533: &str;
    let mut _534: &std::string::String;
    let _535: &std::string::String;
    let _536: std::string::String;
    let mut _538: std::fmt::Arguments<'_>;
    let mut _539: &[&str];
    let mut _540: &[&str; 1];
    let _541: &[&str; 1];
    let _542: [&str; 1];
    let mut _543: &[core::fmt::rt::Argument<'_>];
    let mut _544: &[core::fmt::rt::Argument<'_>; 1];
    let _545: &[core::fmt::rt::Argument<'_>; 1];
    let _546: [core::fmt::rt::Argument<'_>; 1];
    let mut _547: core::fmt::rt::Argument<'_>;
    let mut _548: &&str;
    let _549: &&str;
    let _550: &str;
    let mut _551: &arrform::ArrForm<600>;
    let _554: ();
    let mut _555: std::result::Result<(), std::fmt::Error>;
    let mut _556: &mut arrform::ArrForm<1200>;
    let mut _557: std::fmt::Arguments<'_>;
    let mut _558: &[&str];
    let mut _559: &[&str; 3];
    let _560: &[&str; 3];
    let _561: [&str; 3];
    let mut _562: &[core::fmt::rt::Argument<'_>];
    let mut _563: &[core::fmt::rt::Argument<'_>; 3];
    let _564: &[core::fmt::rt::Argument<'_>; 3];
    let _565: [core::fmt::rt::Argument<'_>; 3];
    let mut _566: core::fmt::rt::Argument<'_>;
    let mut _567: &kamino_lending::utils::FractionDisplay<'_>;
    let _568: &kamino_lending::utils::FractionDisplay<'_>;
    let _569: kamino_lending::utils::FractionDisplay<'_>;
    let mut _570: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _571: core::fmt::rt::Argument<'_>;
    let mut _572: &kamino_lending::utils::FractionDisplay<'_>;
    let _573: &kamino_lending::utils::FractionDisplay<'_>;
    let _574: kamino_lending::utils::FractionDisplay<'_>;
    let mut _575: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _576: core::fmt::rt::Argument<'_>;
    let mut _577: &kamino_lending::utils::FractionDisplay<'_>;
    let _578: &kamino_lending::utils::FractionDisplay<'_>;
    let _579: kamino_lending::utils::FractionDisplay<'_>;
    let mut _580: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _581: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _582: &mut arrform::ArrForm<1200>;
    let _583: ();
    let mut _584: &str;
    let _585: &str;
    let mut _586: &std::string::String;
    let _587: &std::string::String;
    let _588: std::string::String;
    let mut _590: std::fmt::Arguments<'_>;
    let mut _591: &[&str];
    let mut _592: &[&str; 1];
    let _593: &[&str; 1];
    let _594: [&str; 1];
    let mut _595: &[core::fmt::rt::Argument<'_>];
    let mut _596: &[core::fmt::rt::Argument<'_>; 1];
    let _597: &[core::fmt::rt::Argument<'_>; 1];
    let _598: [core::fmt::rt::Argument<'_>; 1];
    let mut _599: core::fmt::rt::Argument<'_>;
    let mut _600: &&str;
    let _601: &&str;
    let _602: &str;
    let mut _603: &arrform::ArrForm<1200>;
    let mut _604: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _605: operations::effects::InvestingDirection;
    let mut _607: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _608: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _610: &state::VaultState;
    let _611: ();
    let mut _612: usize;
    let mut _613: &str;
    let _614: &str;
    let mut _615: bool;
    let mut _616: bool;
    let mut _617: bool;
    let mut _618: bool;
    let mut _619: bool;
    let mut _620: bool;
    let _623: ();
    let mut _624: std::result::Result<(), std::fmt::Error>;
    let mut _625: &mut arrform::ArrForm<150>;
    let mut _626: std::fmt::Arguments<'_>;
    let mut _627: &[&str];
    let mut _628: &[&str; 4];
    let _629: &[&str; 4];
    let _630: [&str; 4];
    let mut _631: &[core::fmt::rt::Argument<'_>];
    let mut _632: &[core::fmt::rt::Argument<'_>; 4];
    let _633: &[core::fmt::rt::Argument<'_>; 4];
    let _634: [core::fmt::rt::Argument<'_>; 4];
    let mut _635: core::fmt::rt::Argument<'_>;
    let mut _636: &kamino_lending::utils::FractionDisplay<'_>;
    let _637: &kamino_lending::utils::FractionDisplay<'_>;
    let _638: kamino_lending::utils::FractionDisplay<'_>;
    let mut _639: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _640: core::fmt::rt::Argument<'_>;
    let mut _641: &kamino_lending::utils::FractionDisplay<'_>;
    let _642: &kamino_lending::utils::FractionDisplay<'_>;
    let _643: kamino_lending::utils::FractionDisplay<'_>;
    let mut _644: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _645: core::fmt::rt::Argument<'_>;
    let mut _646: &u64;
    let _647: &u64;
    let mut _648: core::fmt::rt::Argument<'_>;
    let mut _649: &kamino_lending::utils::FractionDisplay<'_>;
    let _650: &kamino_lending::utils::FractionDisplay<'_>;
    let _651: kamino_lending::utils::FractionDisplay<'_>;
    let mut _652: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _653: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _654: &mut arrform::ArrForm<150>;
    let _655: ();
    let mut _656: &str;
    let _657: &str;
    let mut _658: &std::string::String;
    let _659: &std::string::String;
    let _660: std::string::String;
    let mut _662: std::fmt::Arguments<'_>;
    let mut _663: &[&str];
    let mut _664: &[&str; 1];
    let _665: &[&str; 1];
    let _666: [&str; 1];
    let mut _667: &[core::fmt::rt::Argument<'_>];
    let mut _668: &[core::fmt::rt::Argument<'_>; 1];
    let _669: &[core::fmt::rt::Argument<'_>; 1];
    let _670: [core::fmt::rt::Argument<'_>; 1];
    let mut _671: core::fmt::rt::Argument<'_>;
    let mut _672: &&str;
    let _673: &&str;
    let _674: &str;
    let mut _675: &arrform::ArrForm<150>;
    let _678: ();
    let mut _679: std::result::Result<(), std::fmt::Error>;
    let mut _680: &mut arrform::ArrForm<300>;
    let mut _681: std::fmt::Arguments<'_>;
    let mut _682: &[&str];
    let mut _683: &[&str; 4];
    let _684: &[&str; 4];
    let _685: [&str; 4];
    let mut _686: &[core::fmt::rt::Argument<'_>];
    let mut _687: &[core::fmt::rt::Argument<'_>; 4];
    let _688: &[core::fmt::rt::Argument<'_>; 4];
    let _689: [core::fmt::rt::Argument<'_>; 4];
    let mut _690: core::fmt::rt::Argument<'_>;
    let mut _691: &kamino_lending::utils::FractionDisplay<'_>;
    let _692: &kamino_lending::utils::FractionDisplay<'_>;
    let _693: kamino_lending::utils::FractionDisplay<'_>;
    let mut _694: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _695: core::fmt::rt::Argument<'_>;
    let mut _696: &kamino_lending::utils::FractionDisplay<'_>;
    let _697: &kamino_lending::utils::FractionDisplay<'_>;
    let _698: kamino_lending::utils::FractionDisplay<'_>;
    let mut _699: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _700: core::fmt::rt::Argument<'_>;
    let mut _701: &u64;
    let _702: &u64;
    let mut _703: core::fmt::rt::Argument<'_>;
    let mut _704: &kamino_lending::utils::FractionDisplay<'_>;
    let _705: &kamino_lending::utils::FractionDisplay<'_>;
    let _706: kamino_lending::utils::FractionDisplay<'_>;
    let mut _707: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _708: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _709: &mut arrform::ArrForm<300>;
    let _710: ();
    let mut _711: &str;
    let _712: &str;
    let mut _713: &std::string::String;
    let _714: &std::string::String;
    let _715: std::string::String;
    let mut _717: std::fmt::Arguments<'_>;
    let mut _718: &[&str];
    let mut _719: &[&str; 1];
    let _720: &[&str; 1];
    let _721: [&str; 1];
    let mut _722: &[core::fmt::rt::Argument<'_>];
    let mut _723: &[core::fmt::rt::Argument<'_>; 1];
    let _724: &[core::fmt::rt::Argument<'_>; 1];
    let _725: [core::fmt::rt::Argument<'_>; 1];
    let mut _726: core::fmt::rt::Argument<'_>;
    let mut _727: &&str;
    let _728: &&str;
    let _729: &str;
    let mut _730: &arrform::ArrForm<300>;
    let _733: ();
    let mut _734: std::result::Result<(), std::fmt::Error>;
    let mut _735: &mut arrform::ArrForm<600>;
    let mut _736: std::fmt::Arguments<'_>;
    let mut _737: &[&str];
    let mut _738: &[&str; 4];
    let _739: &[&str; 4];
    let _740: [&str; 4];
    let mut _741: &[core::fmt::rt::Argument<'_>];
    let mut _742: &[core::fmt::rt::Argument<'_>; 4];
    let _743: &[core::fmt::rt::Argument<'_>; 4];
    let _744: [core::fmt::rt::Argument<'_>; 4];
    let mut _745: core::fmt::rt::Argument<'_>;
    let mut _746: &kamino_lending::utils::FractionDisplay<'_>;
    let _747: &kamino_lending::utils::FractionDisplay<'_>;
    let _748: kamino_lending::utils::FractionDisplay<'_>;
    let mut _749: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _750: core::fmt::rt::Argument<'_>;
    let mut _751: &kamino_lending::utils::FractionDisplay<'_>;
    let _752: &kamino_lending::utils::FractionDisplay<'_>;
    let _753: kamino_lending::utils::FractionDisplay<'_>;
    let mut _754: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _755: core::fmt::rt::Argument<'_>;
    let mut _756: &u64;
    let _757: &u64;
    let mut _758: core::fmt::rt::Argument<'_>;
    let mut _759: &kamino_lending::utils::FractionDisplay<'_>;
    let _760: &kamino_lending::utils::FractionDisplay<'_>;
    let _761: kamino_lending::utils::FractionDisplay<'_>;
    let mut _762: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _763: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _764: &mut arrform::ArrForm<600>;
    let _765: ();
    let mut _766: &str;
    let _767: &str;
    let mut _768: &std::string::String;
    let _769: &std::string::String;
    let _770: std::string::String;
    let mut _772: std::fmt::Arguments<'_>;
    let mut _773: &[&str];
    let mut _774: &[&str; 1];
    let _775: &[&str; 1];
    let _776: [&str; 1];
    let mut _777: &[core::fmt::rt::Argument<'_>];
    let mut _778: &[core::fmt::rt::Argument<'_>; 1];
    let _779: &[core::fmt::rt::Argument<'_>; 1];
    let _780: [core::fmt::rt::Argument<'_>; 1];
    let mut _781: core::fmt::rt::Argument<'_>;
    let mut _782: &&str;
    let _783: &&str;
    let _784: &str;
    let mut _785: &arrform::ArrForm<600>;
    let _788: ();
    let mut _789: std::result::Result<(), std::fmt::Error>;
    let mut _790: &mut arrform::ArrForm<1200>;
    let mut _791: std::fmt::Arguments<'_>;
    let mut _792: &[&str];
    let mut _793: &[&str; 4];
    let _794: &[&str; 4];
    let _795: [&str; 4];
    let mut _796: &[core::fmt::rt::Argument<'_>];
    let mut _797: &[core::fmt::rt::Argument<'_>; 4];
    let _798: &[core::fmt::rt::Argument<'_>; 4];
    let _799: [core::fmt::rt::Argument<'_>; 4];
    let mut _800: core::fmt::rt::Argument<'_>;
    let mut _801: &kamino_lending::utils::FractionDisplay<'_>;
    let _802: &kamino_lending::utils::FractionDisplay<'_>;
    let _803: kamino_lending::utils::FractionDisplay<'_>;
    let mut _804: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _805: core::fmt::rt::Argument<'_>;
    let mut _806: &kamino_lending::utils::FractionDisplay<'_>;
    let _807: &kamino_lending::utils::FractionDisplay<'_>;
    let _808: kamino_lending::utils::FractionDisplay<'_>;
    let mut _809: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _810: core::fmt::rt::Argument<'_>;
    let mut _811: &u64;
    let _812: &u64;
    let mut _813: core::fmt::rt::Argument<'_>;
    let mut _814: &kamino_lending::utils::FractionDisplay<'_>;
    let _815: &kamino_lending::utils::FractionDisplay<'_>;
    let _816: kamino_lending::utils::FractionDisplay<'_>;
    let mut _817: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _818: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _819: &mut arrform::ArrForm<1200>;
    let _820: ();
    let mut _821: &str;
    let _822: &str;
    let mut _823: &std::string::String;
    let _824: &std::string::String;
    let _825: std::string::String;
    let mut _827: std::fmt::Arguments<'_>;
    let mut _828: &[&str];
    let mut _829: &[&str; 1];
    let _830: &[&str; 1];
    let _831: [&str; 1];
    let mut _832: &[core::fmt::rt::Argument<'_>];
    let mut _833: &[core::fmt::rt::Argument<'_>; 1];
    let _834: &[core::fmt::rt::Argument<'_>; 1];
    let _835: [core::fmt::rt::Argument<'_>; 1];
    let mut _836: core::fmt::rt::Argument<'_>;
    let mut _837: &&str;
    let _838: &&str;
    let _839: &str;
    let mut _840: &arrform::ArrForm<1200>;
    let mut _841: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _842: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _843: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _844: u64;
    let mut _845: operations::effects::InvestingDirection;
    let _846: ();
    let mut _847: bool;
    let mut _848: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _849: &u64;
    let mut _850: !;
    let mut _851: anchor_lang::error::Error;
    let mut _852: anchor_lang::error::AnchorError;
    let mut _853: std::string::String;
    let mut _854: &KaminoVaultError;
    let _855: KaminoVaultError;
    let mut _856: u32;
    let mut _857: KaminoVaultError;
    let mut _858: std::string::String;
    let mut _859: &KaminoVaultError;
    let _860: KaminoVaultError;
    let mut _861: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _862: anchor_lang::error::ErrorOrigin;
    let mut _863: anchor_lang::error::Source;
    let mut _864: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _866: &kamino_lending::Reserve;
    let mut _868: bool;
    let mut _869: u64;
    let mut _871: &kamino_lending::CollateralExchangeRate;
    let mut _872: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _873: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _875: &kamino_lending::CollateralExchangeRate;
    let mut _876: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _877: u64;
    let mut _880: bool;
    let mut _881: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _882: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _883: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _884: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _885: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _886: ();
    let mut _887: isize;
    let mut _888: u64;
    let mut _889: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _890: ();
    let mut _891: &mut state::VaultState;
    let mut _892: u64;
    let mut _893: u64;
    let mut _894: u64;
    let mut _895: (u64, bool);
    let _896: ();
    let mut _897: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _898: std::result::Result<(), anchor_lang::error::Error>;
    let mut _899: &mut state::VaultState;
    let mut _900: u64;
    let mut _901: &anchor_lang::prelude::Pubkey;
    let mut _902: isize;
    let mut _904: !;
    let mut _905: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _907: u64;
    let mut _908: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _909: ();
    let mut _910: &mut state::VaultState;
    let mut _911: u64;
    let mut _912: u64;
    let mut _913: u64;
    let mut _914: (u64, bool);
    let _915: ();
    let mut _916: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _917: std::result::Result<(), anchor_lang::error::Error>;
    let mut _918: &mut state::VaultState;
    let mut _919: u64;
    let mut _920: &anchor_lang::prelude::Pubkey;
    let mut _921: isize;
    let mut _923: !;
    let mut _924: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _926: ();
    let mut _927: bool;
    let mut _928: u64;
    let mut _929: u64;
    let mut _930: u64;
    let mut _931: (u64, bool);
    let _932: ();
    let mut _933: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _934: std::result::Result<(), anchor_lang::error::Error>;
    let mut _935: &mut state::VaultState;
    let mut _936: &anchor_lang::prelude::Pubkey;
    let mut _937: u64;
    let mut _938: isize;
    let mut _940: !;
    let mut _941: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _943: operations::effects::InvestEffects;
    let mut _944: u64;
    let mut _945: operations::effects::InvestingDirection;
    let mut _946: u64;
    let mut _947: u64;
    let mut _983: bool;
    let mut _984: isize;
    let mut _985: isize;
    let mut _986: isize;
    let mut _987: isize;
    let mut _988: isize;
    let mut _989: isize;
    let mut _990: isize;
    let mut _991: isize;
    let mut _992: isize;
    let mut _993: isize;
    let mut _994: isize;
    let mut _995: isize;
    let mut _996: isize;
    let mut _997: isize;
    let mut _998: isize;
    let mut _999: isize;
    let mut _1000: isize;
    let mut _1001: isize;
    let mut _1002: isize;
    let mut _1003: isize;
    let mut _1004: isize;
    let mut _1005: isize;
    let mut _1006: isize;
    let mut _1007: isize;
    let mut _1008: isize;
    let mut _1009: isize;
    let mut _1010: isize;
    let mut _1011: isize;
    let mut _1012: isize;
    let mut _1013: isize;
    let mut _1014: isize;
    let mut _1015: isize;
    let mut _1016: isize;
    let mut _1017: isize;
    let mut _1018: isize;
    scope 1 {
        debug holdings => _7;
        let _19: arrform::ArrForm<50>;
        let mut _20: arrform::ArrForm<50>;
        let _60: arrform::ArrForm<50>;
        let mut _61: arrform::ArrForm<50>;
        let _102: operations::vault_operations::common::Invested;
        scope 6 {
            debug formatted => _19;
            let _44: std::string::String;
            let mut _981: &[&str; 1];
            scope 8 {
                debug res => _44;
            }
        }
        scope 7 {
            debug af => _20;
            let mut _982: &[&str; 1];
        }
        scope 9 {
            debug formatted => _60;
            let _87: std::string::String;
            let mut _979: &[&str; 1];
            scope 11 {
                debug res => _87;
            }
        }
        scope 10 {
            debug af => _61;
            let mut _980: &[&str; 1];
        }
        scope 12 {
            debug invested => _102;
            let _111: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _114: ();
            let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _125: ();
            let _145: &state::VaultAllocation;
            let _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _154: &state::VaultAllocation;
            let mut _977: &KaminoVaultError;
            let mut _978: &KaminoVaultError;
            scope 13 {
                debug residual => _111;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _114;
                scope 16 {
                }
            }
            scope 17 {
                debug residual => _122;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _125;
                scope 20 {
                }
            }
            scope 21 {
                debug allocation_for_reserve => _145;
                let _165: arrform::ArrForm<150>;
                let mut _166: arrform::ArrForm<150>;
                let _211: arrform::ArrForm<300>;
                let mut _212: arrform::ArrForm<300>;
                let _257: arrform::ArrForm<600>;
                let mut _258: arrform::ArrForm<600>;
                let _303: arrform::ArrForm<1200>;
                let mut _304: arrform::ArrForm<1200>;
                let _371: &operations::vault_operations::common::InvestedReserve;
                let mut _948: &KaminoVaultError;
                let mut _949: &KaminoVaultError;
                scope 26 {
                    debug formatted => _165;
                    let _196: std::string::String;
                    let mut _975: &[&str; 1];
                    scope 28 {
                        debug res => _196;
                    }
                }
                scope 27 {
                    debug af => _166;
                    let mut _976: &[&str; 3];
                }
                scope 29 {
                    debug formatted => _211;
                    let _242: std::string::String;
                    let mut _973: &[&str; 1];
                    scope 31 {
                        debug res => _242;
                    }
                }
                scope 30 {
                    debug af => _212;
                    let mut _974: &[&str; 3];
                }
                scope 32 {
                    debug formatted => _257;
                    let _288: std::string::String;
                    let mut _971: &[&str; 1];
                    scope 34 {
                        debug res => _288;
                    }
                }
                scope 33 {
                    debug af => _258;
                    let mut _972: &[&str; 3];
                }
                scope 35 {
                    debug formatted => _303;
                    let _334: std::string::String;
                    let mut _969: &[&str; 1];
                    scope 37 {
                        debug res => _334;
                    }
                }
                scope 36 {
                    debug af => _304;
                    let mut _970: &[&str; 3];
                }
                scope 38 {
                    debug invested_in_reserve => _371;
                    let _374: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 39 {
                        debug actual_tokens_invested => _374;
                        let _375: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        scope 40 {
                            debug target_tokens_invested => _375;
                            let _377: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                            let _378: operations::effects::InvestingDirection;
                            let _383: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                            let _606: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                            scope 41 {
                                debug liquidity_f => _377;
                                debug direction => _378;
                                let _865: kamino_lending::CollateralExchangeRate;
                                let mut _950: &KaminoVaultError;
                                let mut _951: &KaminoVaultError;
                                scope 69 {
                                    debug exchange_rate => _865;
                                    let _867: u64;
                                    let _870: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                    scope 70 {
                                        debug collateral_amount => _867;
                                        let _874: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                        scope 72 {
                                            debug liquidity_amount_f => _874;
                                            let _878: u64;
                                            scope 73 {
                                                debug liquidity_amount => _878;
                                                let mut _879: u64;
                                                let mut _952: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                scope 74 {
                                                    debug rounding_loss => _879;
                                                    let _903: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _906: ();
                                                    let _922: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _925: ();
                                                    let _939: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _942: ();
                                                    scope 75 {
                                                        debug residual => _903;
                                                        scope 76 {
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug val => _906;
                                                        scope 78 {
                                                        }
                                                    }
                                                    scope 79 {
                                                        debug residual => _922;
                                                        scope 80 {
                                                        }
                                                    }
                                                    scope 81 {
                                                        debug val => _925;
                                                        scope 82 {
                                                        }
                                                    }
                                                    scope 83 {
                                                        debug residual => _939;
                                                        scope 84 {
                                                        }
                                                    }
                                                    scope 85 {
                                                        debug val => _942;
                                                        scope 86 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 71 {
                                        debug collateral_f => _870;
                                    }
                                }
                            }
                            scope 42 {
                                debug diff => _383;
                                let _396: arrform::ArrForm<150>;
                                let mut _397: arrform::ArrForm<150>;
                                let _448: arrform::ArrForm<300>;
                                let mut _449: arrform::ArrForm<300>;
                                let _500: arrform::ArrForm<600>;
                                let mut _501: arrform::ArrForm<600>;
                                let _552: arrform::ArrForm<1200>;
                                let mut _553: arrform::ArrForm<1200>;
                                scope 43 {
                                    debug formatted => _396;
                                    let _433: std::string::String;
                                    let mut _959: &[&str; 1];
                                    scope 45 {
                                        debug res => _433;
                                    }
                                }
                                scope 44 {
                                    debug af => _397;
                                    let mut _960: &[&str; 3];
                                }
                                scope 46 {
                                    debug formatted => _448;
                                    let _485: std::string::String;
                                    let mut _957: &[&str; 1];
                                    scope 48 {
                                        debug res => _485;
                                    }
                                }
                                scope 47 {
                                    debug af => _449;
                                    let mut _958: &[&str; 3];
                                }
                                scope 49 {
                                    debug formatted => _500;
                                    let _537: std::string::String;
                                    let mut _955: &[&str; 1];
                                    scope 51 {
                                        debug res => _537;
                                    }
                                }
                                scope 50 {
                                    debug af => _501;
                                    let mut _956: &[&str; 3];
                                }
                                scope 52 {
                                    debug formatted => _552;
                                    let _589: std::string::String;
                                    let mut _953: &[&str; 1];
                                    scope 54 {
                                        debug res => _589;
                                    }
                                }
                                scope 53 {
                                    debug af => _553;
                                    let mut _954: &[&str; 3];
                                }
                            }
                            scope 55 {
                                debug diff => _606;
                                let _609: u64;
                                scope 56 {
                                    debug available => _609;
                                    let _621: arrform::ArrForm<150>;
                                    let mut _622: arrform::ArrForm<150>;
                                    let _676: arrform::ArrForm<300>;
                                    let mut _677: arrform::ArrForm<300>;
                                    let _731: arrform::ArrForm<600>;
                                    let mut _732: arrform::ArrForm<600>;
                                    let _786: arrform::ArrForm<1200>;
                                    let mut _787: arrform::ArrForm<1200>;
                                    scope 57 {
                                        debug formatted => _621;
                                        let _661: std::string::String;
                                        let mut _967: &[&str; 1];
                                        scope 59 {
                                            debug res => _661;
                                        }
                                    }
                                    scope 58 {
                                        debug af => _622;
                                        let mut _968: &[&str; 4];
                                    }
                                    scope 60 {
                                        debug formatted => _676;
                                        let _716: std::string::String;
                                        let mut _965: &[&str; 1];
                                        scope 62 {
                                            debug res => _716;
                                        }
                                    }
                                    scope 61 {
                                        debug af => _677;
                                        let mut _966: &[&str; 4];
                                    }
                                    scope 63 {
                                        debug formatted => _731;
                                        let _771: std::string::String;
                                        let mut _963: &[&str; 1];
                                        scope 65 {
                                            debug res => _771;
                                        }
                                    }
                                    scope 64 {
                                        debug af => _732;
                                        let mut _964: &[&str; 4];
                                    }
                                    scope 66 {
                                        debug formatted => _786;
                                        let _826: std::string::String;
                                        let mut _961: &[&str; 1];
                                        scope 68 {
                                            debug res => _826;
                                        }
                                    }
                                    scope 67 {
                                        debug af => _787;
                                        let mut _962: &[&str; 4];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 22 {
                debug residual => _151;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _154;
                scope 25 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        _983 = const false;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = move _2;
        StorageLive(_12);
        _12 = _5;
        _9 = holdings::<'_, T, impl Iterator<Item = T>>(move _10, move _11, move _12) -> [return: bb1, unwind: bb376];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<Holdings, anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb2, unwind: bb376];
    }

    bb2: {
        StorageDead(_9);
        _13 = discriminant(_8);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = move ((_8 as Continue).0: operations::vault_operations::common::Holdings);
        _983 = const true;
        _7 = move _17;
        StorageDead(_17);
        _984 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ArrForm::<50>::new() -> [return: bb7, unwind: bb384];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _16) -> [return: bb6, unwind: bb385];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        _1010 = discriminant(_8);
        StorageDead(_8);
        goto -> bb356;
    }

    bb7: {
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &mut _20;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _982 = const _;
        _27 = &(*_982);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(_7.0: u64);
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _34) -> [return: bb8, unwind: bb384];
    }

    bb8: {
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb9, unwind: bb384];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_25);
        _22 = ArrForm::<50>::format(move _23, move _24) -> [return: bb10, unwind: bb384];
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut _20;
        _36 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _37 };
        StorageDead(_37);
        _21 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _22, move _36) -> [return: bb11, unwind: bb384];
    }

    bb11: {
        StorageDead(_36);
        StorageDead(_22);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_21);
        _19 = move _20;
        StorageDead(_20);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _981 = const _;
        _48 = &(*_981);
        _47 = &(*_48);
        _46 = move _47 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_19;
        _57 = ArrForm::<50>::as_str(move _58) -> [return: bb12, unwind: bb384];
    }

    bb12: {
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _55) -> [return: bb13, unwind: bb384];
    }

    bb13: {
        StorageDead(_55);
        _53 = [move _54];
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = move _51 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_51);
        _45 = Arguments::<'_>::new_v1(move _46, move _50) -> [return: bb14, unwind: bb384];
    }

    bb14: {
        StorageDead(_50);
        StorageDead(_46);
        _44 = format(move _45) -> [return: bb15, unwind: bb384];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        _43 = move _44;
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = <String as Deref>::deref(move _41) -> [return: bb16, unwind: bb375];
    }

    bb16: {
        _39 = &(*_40);
        StorageDead(_41);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb17, unwind: bb375];
    }

    bb17: {
        StorageDead(_39);
        drop(_43) -> [return: bb18, unwind: bb384];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = ArrForm::<50>::new() -> [return: bb19, unwind: bb384];
    }

    bb19: {
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut _61;
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _980 = const _;
        _68 = &(*_980);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &((_7.1: operations::vault_operations::common::Invested).1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _77 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _78) -> [return: bb20, unwind: bb384];
    }

    bb20: {
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _75) -> [return: bb21, unwind: bb384];
    }

    bb21: {
        StorageDead(_75);
        _73 = [move _74];
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb22, unwind: bb384];
    }

    bb22: {
        StorageDead(_70);
        StorageDead(_66);
        _63 = ArrForm::<50>::format(move _64, move _65) -> [return: bb23, unwind: bb384];
    }

    bb23: {
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut _61;
        _79 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _80 };
        StorageDead(_80);
        _62 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _63, move _79) -> [return: bb24, unwind: bb384];
    }

    bb24: {
        StorageDead(_79);
        StorageDead(_63);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_62);
        _60 = move _61;
        StorageDead(_61);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _979 = const _;
        _91 = &(*_979);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_60;
        _100 = ArrForm::<50>::as_str(move _101) -> [return: bb25, unwind: bb384];
    }

    bb25: {
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _98) -> [return: bb26, unwind: bb384];
    }

    bb26: {
        StorageDead(_98);
        _96 = [move _97];
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb27, unwind: bb384];
    }

    bb27: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb28, unwind: bb384];
    }

    bb28: {
        StorageDead(_88);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb29, unwind: bb374];
    }

    bb29: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb30, unwind: bb374];
    }

    bb30: {
        StorageDead(_82);
        drop(_86) -> [return: bb31, unwind: bb384];
    }

    bb31: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        _59 = const ();
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_102);
        _983 = const false;
        _102 = move (_7.1: operations::vault_operations::common::Invested);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &mut (*_1);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_102;
        _107 = &(*_108);
        StorageLive(_109);
        _109 = _6;
        _105 = charge_fees(move _106, move _107, move _109) -> [return: bb32, unwind: bb373];
    }

    bb32: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_106);
        _104 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _105) -> [return: bb33, unwind: bb373];
    }

    bb33: {
        StorageDead(_105);
        _110 = discriminant(_104);
        switchInt(move _110) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_114);
        _114 = ((_104 as Continue).0: ());
        _103 = _114;
        StorageDead(_114);
        _986 = discriminant(_104);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &mut (*_1);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_102;
        _119 = &(*_120);
        _117 = state::VaultState::refresh_target_allocations(move _118, move _119) -> [return: bb37, unwind: bb373];
    }

    bb35: {
        StorageLive(_111);
        _111 = move ((_104 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_113);
        _113 = move _111;
        _0 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _113) -> [return: bb36, unwind: bb382];
    }

    bb36: {
        StorageDead(_113);
        StorageDead(_111);
        _1008 = discriminant(_104);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb354;
    }

    bb37: {
        StorageDead(_119);
        StorageDead(_118);
        _116 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _117) -> [return: bb38, unwind: bb373];
    }

    bb38: {
        StorageDead(_117);
        _121 = discriminant(_116);
        switchInt(move _121) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_125);
        _125 = ((_116 as Continue).0: ());
        _115 = _125;
        StorageDead(_125);
        _988 = discriminant(_116);
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &(*_1);
        StorageLive(_129);
        _129 = (*_4);
        _127 = state::VaultState::is_allocated_to_reserve(move _128, move _129) -> [return: bb42, unwind: bb373];
    }

    bb40: {
        StorageLive(_122);
        _122 = move ((_116 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb41, unwind: bb381];
    }

    bb41: {
        StorageDead(_124);
        StorageDead(_122);
        _1006 = discriminant(_116);
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb354;
    }

    bb42: {
        switchInt(move _127) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        StorageDead(_129);
        StorageDead(_128);
        _126 = const ();
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &(*_1);
        StorageLive(_149);
        _149 = &(*_4);
        _147 = state::VaultState::allocation_for_reserve(move _148, move _149) -> [return: bb49, unwind: bb373];
    }

    bb44: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _978 = const _;
        _134 = &(*_978);
        _133 = KaminoVaultError::name(move _134) -> [return: bb45, unwind: bb373];
    }

    bb45: {
        StorageDead(_134);
        StorageLive(_136);
        StorageLive(_137);
        _137 = KaminoVaultError::ReserveNotPartOfAllocations;
        _136 = <KaminoVaultError as Into<u32>>::into(move _137) -> [return: bb46, unwind: bb372];
    }

    bb46: {
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        _977 = const _;
        _139 = &(*_977);
        _138 = <KaminoVaultError as ToString>::to_string(move _139) -> [return: bb47, unwind: bb372];
    }

    bb47: {
        StorageDead(_139);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 434_u32 };
        _142 = anchor_lang::error::ErrorOrigin::Source(move _143);
        StorageDead(_143);
        _141 = Option::<ErrorOrigin>::Some(move _142);
        StorageDead(_142);
        StorageLive(_144);
        _144 = Option::<ComparedValues>::None;
        _132 = anchor_lang::error::AnchorError { error_name: move _133, error_code_number: move _136, error_msg: move _138, error_origin: move _141, compared_values: move _144 };
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_133);
        _131 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _132) -> [return: bb48, unwind: bb373];
    }

    bb48: {
        StorageDead(_132);
        _0 = std::result::Result::<InvestEffects, anchor_lang::error::Error>::Err(move _131);
        StorageDead(_131);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb354;
    }

    bb49: {
        StorageDead(_149);
        StorageDead(_148);
        _146 = <std::result::Result<&VaultAllocation, anchor_lang::error::Error> as Try>::branch(move _147) -> [return: bb50, unwind: bb373];
    }

    bb50: {
        StorageDead(_147);
        _150 = discriminant(_146);
        switchInt(move _150) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_154);
        _154 = ((_146 as Continue).0: &state::VaultAllocation);
        _145 = _154;
        StorageDead(_154);
        _990 = discriminant(_146);
        StorageDead(_146);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = const "alloc_for_reserve address {} weight {} cap {}";
        _157 = &(*_158);
        _156 = core::str::<impl str>::len(move _157) -> [return: bb54, unwind: bb373];
    }

    bb52: {
        StorageLive(_151);
        _151 = move ((_146 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_153);
        _153 = move _151;
        _0 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _153) -> [return: bb53, unwind: bb380];
    }

    bb53: {
        StorageDead(_153);
        StorageDead(_151);
        _1004 = discriminant(_146);
        StorageDead(_146);
        goto -> bb353;
    }

    bb54: {
        StorageDead(_157);
        _163 = Le(const 0_usize, _156);
        switchInt(move _163) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _164 = Le(_156, const 50_usize);
        switchInt(move _164) -> [0: bb56, otherwise: bb61];
    }

    bb56: {
        _161 = Le(const 51_usize, _156);
        switchInt(move _161) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _162 = Le(_156, const 100_usize);
        switchInt(move _162) -> [0: bb58, otherwise: bb76];
    }

    bb58: {
        _159 = Le(const 101_usize, _156);
        switchInt(move _159) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _160 = Le(_156, const 200_usize);
        switchInt(move _160) -> [0: bb60, otherwise: bb91];
    }

    bb60: {
        StorageLive(_303);
        StorageLive(_304);
        _304 = ArrForm::<1200>::new() -> [return: bb106, unwind: bb373];
    }

    bb61: {
        StorageLive(_165);
        StorageLive(_166);
        _166 = ArrForm::<150>::new() -> [return: bb62, unwind: bb373];
    }

    bb62: {
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &mut _166;
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _976 = const _;
        _173 = &(*_976);
        _172 = &(*_173);
        _171 = move _172 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_172);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &((*_145).0: anchor_lang::prelude::Pubkey);
        _180 = &(*_181);
        _179 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _180) -> [return: bb63, unwind: bb373];
    }

    bb63: {
        StorageDead(_180);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &((*_145).2: u64);
        _183 = &(*_184);
        _182 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _183) -> [return: bb64, unwind: bb373];
    }

    bb64: {
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &((*_145).3: u64);
        _186 = &(*_187);
        _185 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _186) -> [return: bb65, unwind: bb373];
    }

    bb65: {
        StorageDead(_186);
        _178 = [move _179, move _182, move _185];
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = move _176 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_176);
        _170 = Arguments::<'_>::new_v1(move _171, move _175) -> [return: bb66, unwind: bb373];
    }

    bb66: {
        StorageDead(_175);
        StorageDead(_171);
        _168 = ArrForm::<150>::format(move _169, move _170) -> [return: bb67, unwind: bb373];
    }

    bb67: {
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &mut _166;
        _188 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _189 };
        StorageDead(_189);
        _167 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _168, move _188) -> [return: bb68, unwind: bb373];
    }

    bb68: {
        StorageDead(_188);
        StorageDead(_168);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_173);
        StorageDead(_167);
        _165 = move _166;
        StorageDead(_166);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _975 = const _;
        _200 = &(*_975);
        _199 = &(*_200);
        _198 = move _199 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_199);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_165;
        _209 = ArrForm::<150>::as_str(move _210) -> [return: bb69, unwind: bb373];
    }

    bb69: {
        StorageDead(_210);
        _208 = &_209;
        _207 = &(*_208);
        _206 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _207) -> [return: bb70, unwind: bb373];
    }

    bb70: {
        StorageDead(_207);
        _205 = [move _206];
        StorageDead(_206);
        _204 = &_205;
        _203 = &(*_204);
        _202 = move _203 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_203);
        _197 = Arguments::<'_>::new_v1(move _198, move _202) -> [return: bb71, unwind: bb373];
    }

    bb71: {
        StorageDead(_202);
        StorageDead(_198);
        _196 = format(move _197) -> [return: bb72, unwind: bb373];
    }

    bb72: {
        StorageDead(_197);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_200);
        _195 = move _196;
        StorageDead(_196);
        _194 = &_195;
        _193 = &(*_194);
        _192 = <String as Deref>::deref(move _193) -> [return: bb73, unwind: bb371];
    }

    bb73: {
        _191 = &(*_192);
        StorageDead(_193);
        _190 = solana_program::log::sol_log(move _191) -> [return: bb74, unwind: bb371];
    }

    bb74: {
        StorageDead(_191);
        drop(_195) -> [return: bb75, unwind: bb373];
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        _155 = const ();
        StorageDead(_165);
        goto -> bb120;
    }

    bb76: {
        StorageLive(_211);
        StorageLive(_212);
        _212 = ArrForm::<300>::new() -> [return: bb77, unwind: bb373];
    }

    bb77: {
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &mut _212;
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _974 = const _;
        _219 = &(*_974);
        _218 = &(*_219);
        _217 = move _218 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_218);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &((*_145).0: anchor_lang::prelude::Pubkey);
        _226 = &(*_227);
        _225 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _226) -> [return: bb78, unwind: bb373];
    }

    bb78: {
        StorageDead(_226);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &((*_145).2: u64);
        _229 = &(*_230);
        _228 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _229) -> [return: bb79, unwind: bb373];
    }

    bb79: {
        StorageDead(_229);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &((*_145).3: u64);
        _232 = &(*_233);
        _231 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _232) -> [return: bb80, unwind: bb373];
    }

    bb80: {
        StorageDead(_232);
        _224 = [move _225, move _228, move _231];
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_225);
        _223 = &_224;
        _222 = &(*_223);
        _221 = move _222 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_222);
        _216 = Arguments::<'_>::new_v1(move _217, move _221) -> [return: bb81, unwind: bb373];
    }

    bb81: {
        StorageDead(_221);
        StorageDead(_217);
        _214 = ArrForm::<300>::format(move _215, move _216) -> [return: bb82, unwind: bb373];
    }

    bb82: {
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &mut _212;
        _234 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _235 };
        StorageDead(_235);
        _213 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _214, move _234) -> [return: bb83, unwind: bb373];
    }

    bb83: {
        StorageDead(_234);
        StorageDead(_214);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_219);
        StorageDead(_213);
        _211 = move _212;
        StorageDead(_212);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _973 = const _;
        _246 = &(*_973);
        _245 = &(*_246);
        _244 = move _245 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_245);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_211;
        _255 = ArrForm::<300>::as_str(move _256) -> [return: bb84, unwind: bb373];
    }

    bb84: {
        StorageDead(_256);
        _254 = &_255;
        _253 = &(*_254);
        _252 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _253) -> [return: bb85, unwind: bb373];
    }

    bb85: {
        StorageDead(_253);
        _251 = [move _252];
        StorageDead(_252);
        _250 = &_251;
        _249 = &(*_250);
        _248 = move _249 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_249);
        _243 = Arguments::<'_>::new_v1(move _244, move _248) -> [return: bb86, unwind: bb373];
    }

    bb86: {
        StorageDead(_248);
        StorageDead(_244);
        _242 = format(move _243) -> [return: bb87, unwind: bb373];
    }

    bb87: {
        StorageDead(_243);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_246);
        _241 = move _242;
        StorageDead(_242);
        _240 = &_241;
        _239 = &(*_240);
        _238 = <String as Deref>::deref(move _239) -> [return: bb88, unwind: bb370];
    }

    bb88: {
        _237 = &(*_238);
        StorageDead(_239);
        _236 = solana_program::log::sol_log(move _237) -> [return: bb89, unwind: bb370];
    }

    bb89: {
        StorageDead(_237);
        drop(_241) -> [return: bb90, unwind: bb373];
    }

    bb90: {
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_236);
        _155 = const ();
        StorageDead(_211);
        goto -> bb120;
    }

    bb91: {
        StorageLive(_257);
        StorageLive(_258);
        _258 = ArrForm::<600>::new() -> [return: bb92, unwind: bb373];
    }

    bb92: {
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &mut _258;
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _972 = const _;
        _265 = &(*_972);
        _264 = &(*_265);
        _263 = move _264 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_264);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &((*_145).0: anchor_lang::prelude::Pubkey);
        _272 = &(*_273);
        _271 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _272) -> [return: bb93, unwind: bb373];
    }

    bb93: {
        StorageDead(_272);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &((*_145).2: u64);
        _275 = &(*_276);
        _274 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _275) -> [return: bb94, unwind: bb373];
    }

    bb94: {
        StorageDead(_275);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _279 = &((*_145).3: u64);
        _278 = &(*_279);
        _277 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _278) -> [return: bb95, unwind: bb373];
    }

    bb95: {
        StorageDead(_278);
        _270 = [move _271, move _274, move _277];
        StorageDead(_277);
        StorageDead(_274);
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _267 = move _268 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_268);
        _262 = Arguments::<'_>::new_v1(move _263, move _267) -> [return: bb96, unwind: bb373];
    }

    bb96: {
        StorageDead(_267);
        StorageDead(_263);
        _260 = ArrForm::<600>::format(move _261, move _262) -> [return: bb97, unwind: bb373];
    }

    bb97: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &mut _258;
        _280 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _281 };
        StorageDead(_281);
        _259 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _260, move _280) -> [return: bb98, unwind: bb373];
    }

    bb98: {
        StorageDead(_280);
        StorageDead(_260);
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_265);
        StorageDead(_259);
        _257 = move _258;
        StorageDead(_258);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _971 = const _;
        _292 = &(*_971);
        _291 = &(*_292);
        _290 = move _291 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_257;
        _301 = ArrForm::<600>::as_str(move _302) -> [return: bb99, unwind: bb373];
    }

    bb99: {
        StorageDead(_302);
        _300 = &_301;
        _299 = &(*_300);
        _298 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _299) -> [return: bb100, unwind: bb373];
    }

    bb100: {
        StorageDead(_299);
        _297 = [move _298];
        StorageDead(_298);
        _296 = &_297;
        _295 = &(*_296);
        _294 = move _295 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_295);
        _289 = Arguments::<'_>::new_v1(move _290, move _294) -> [return: bb101, unwind: bb373];
    }

    bb101: {
        StorageDead(_294);
        StorageDead(_290);
        _288 = format(move _289) -> [return: bb102, unwind: bb373];
    }

    bb102: {
        StorageDead(_289);
        StorageDead(_301);
        StorageDead(_300);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_292);
        _287 = move _288;
        StorageDead(_288);
        _286 = &_287;
        _285 = &(*_286);
        _284 = <String as Deref>::deref(move _285) -> [return: bb103, unwind: bb369];
    }

    bb103: {
        _283 = &(*_284);
        StorageDead(_285);
        _282 = solana_program::log::sol_log(move _283) -> [return: bb104, unwind: bb369];
    }

    bb104: {
        StorageDead(_283);
        drop(_287) -> [return: bb105, unwind: bb373];
    }

    bb105: {
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_282);
        _155 = const ();
        StorageDead(_257);
        goto -> bb120;
    }

    bb106: {
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &mut _304;
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _970 = const _;
        _311 = &(*_970);
        _310 = &(*_311);
        _309 = move _310 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_310);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &((*_145).0: anchor_lang::prelude::Pubkey);
        _318 = &(*_319);
        _317 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _318) -> [return: bb107, unwind: bb373];
    }

    bb107: {
        StorageDead(_318);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &((*_145).2: u64);
        _321 = &(*_322);
        _320 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _321) -> [return: bb108, unwind: bb373];
    }

    bb108: {
        StorageDead(_321);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &((*_145).3: u64);
        _324 = &(*_325);
        _323 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _324) -> [return: bb109, unwind: bb373];
    }

    bb109: {
        StorageDead(_324);
        _316 = [move _317, move _320, move _323];
        StorageDead(_323);
        StorageDead(_320);
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = move _314 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_314);
        _308 = Arguments::<'_>::new_v1(move _309, move _313) -> [return: bb110, unwind: bb373];
    }

    bb110: {
        StorageDead(_313);
        StorageDead(_309);
        _306 = ArrForm::<1200>::format(move _307, move _308) -> [return: bb111, unwind: bb373];
    }

    bb111: {
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &mut _304;
        _326 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _327 };
        StorageDead(_327);
        _305 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _306, move _326) -> [return: bb112, unwind: bb373];
    }

    bb112: {
        StorageDead(_326);
        StorageDead(_306);
        StorageDead(_325);
        StorageDead(_322);
        StorageDead(_319);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_311);
        StorageDead(_305);
        _303 = move _304;
        StorageDead(_304);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _969 = const _;
        _338 = &(*_969);
        _337 = &(*_338);
        _336 = move _337 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_337);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &_303;
        _347 = ArrForm::<1200>::as_str(move _348) -> [return: bb113, unwind: bb373];
    }

    bb113: {
        StorageDead(_348);
        _346 = &_347;
        _345 = &(*_346);
        _344 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _345) -> [return: bb114, unwind: bb373];
    }

    bb114: {
        StorageDead(_345);
        _343 = [move _344];
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = move _341 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_341);
        _335 = Arguments::<'_>::new_v1(move _336, move _340) -> [return: bb115, unwind: bb373];
    }

    bb115: {
        StorageDead(_340);
        StorageDead(_336);
        _334 = format(move _335) -> [return: bb116, unwind: bb373];
    }

    bb116: {
        StorageDead(_335);
        StorageDead(_347);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_338);
        _333 = move _334;
        StorageDead(_334);
        _332 = &_333;
        _331 = &(*_332);
        _330 = <String as Deref>::deref(move _331) -> [return: bb117, unwind: bb368];
    }

    bb117: {
        _329 = &(*_330);
        StorageDead(_331);
        _328 = solana_program::log::sol_log(move _329) -> [return: bb118, unwind: bb368];
    }

    bb118: {
        StorageDead(_329);
        drop(_333) -> [return: bb119, unwind: bb373];
    }

    bb119: {
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_328);
        _155 = const ();
        StorageDead(_303);
        goto -> bb120;
    }

    bb120: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = _5;
        StorageLive(_352);
        StorageLive(_353);
        _353 = ((*_145).7: u64);
        StorageLive(_354);
        _354 = ((*_1).23: u64);
        _355 = CheckedAdd(_353, _354);
        assert(!move (_355.1: bool), "attempt to compute `{} + {}`, which would overflow", move _353, move _354) -> [success: bb121, unwind: bb373];
    }

    bb121: {
        _352 = move (_355.0: u64);
        StorageDead(_354);
        StorageDead(_353);
        _350 = Lt(move _351, move _352);
        switchInt(move _350) -> [0: bb127, otherwise: bb122];
    }

    bb122: {
        StorageDead(_352);
        StorageDead(_351);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _949 = const _;
        _360 = &(*_949);
        _359 = KaminoVaultError::name(move _360) -> [return: bb123, unwind: bb373];
    }

    bb123: {
        StorageDead(_360);
        StorageLive(_362);
        StorageLive(_363);
        _363 = KaminoVaultError::InvestTooSoon;
        _362 = <KaminoVaultError as Into<u32>>::into(move _363) -> [return: bb124, unwind: bb367];
    }

    bb124: {
        StorageDead(_363);
        StorageLive(_364);
        StorageLive(_365);
        _948 = const _;
        _365 = &(*_948);
        _364 = <KaminoVaultError as ToString>::to_string(move _365) -> [return: bb125, unwind: bb367];
    }

    bb125: {
        StorageDead(_365);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _369 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 446_u32 };
        _368 = anchor_lang::error::ErrorOrigin::Source(move _369);
        StorageDead(_369);
        _367 = Option::<ErrorOrigin>::Some(move _368);
        StorageDead(_368);
        StorageLive(_370);
        _370 = Option::<ComparedValues>::None;
        _358 = anchor_lang::error::AnchorError { error_name: move _359, error_code_number: move _362, error_msg: move _364, error_origin: move _367, compared_values: move _370 };
        StorageDead(_370);
        StorageDead(_367);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_359);
        _357 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _358) -> [return: bb126, unwind: bb373];
    }

    bb126: {
        StorageDead(_358);
        _0 = std::result::Result::<InvestEffects, anchor_lang::error::Error>::Err(move _357);
        StorageDead(_357);
        StorageDead(_350);
        StorageDead(_349);
        goto -> bb353;
    }

    bb127: {
        StorageDead(_352);
        StorageDead(_351);
        _349 = const ();
        StorageDead(_350);
        StorageDead(_349);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &_102;
        StorageLive(_373);
        _373 = &(*_4);
        _371 = Invested::in_reserve(move _372, move _373) -> [return: bb128, unwind: bb373];
    }

    bb128: {
        StorageDead(_373);
        StorageDead(_372);
        StorageLive(_374);
        _374 = ((*_371).1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &(*_145);
        _375 = VaultAllocation::get_token_target_allocation(move _376) -> [return: bb129, unwind: bb373];
    }

    bb129: {
        StorageDead(_376);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &_374;
        StorageLive(_382);
        _382 = &_375;
        _380 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _381, move _382) -> [return: bb130, unwind: bb373];
    }

    bb130: {
        switchInt(move _380) -> [0: bb212, otherwise: bb131];
    }

    bb131: {
        StorageDead(_382);
        StorageDead(_381);
        StorageLive(_383);
        StorageLive(_384);
        _384 = _374;
        StorageLive(_385);
        _385 = _375;
        _383 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _384, move _385) -> [return: bb132, unwind: bb373];
    }

    bb132: {
        StorageDead(_385);
        StorageDead(_384);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = const "Actual {} target {}, need to Subtract {}";
        _388 = &(*_389);
        _387 = core::str::<impl str>::len(move _388) -> [return: bb133, unwind: bb373];
    }

    bb133: {
        StorageDead(_388);
        _394 = Le(const 0_usize, _387);
        switchInt(move _394) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _395 = Le(_387, const 50_usize);
        switchInt(move _395) -> [0: bb135, otherwise: bb140];
    }

    bb135: {
        _392 = Le(const 51_usize, _387);
        switchInt(move _392) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        _393 = Le(_387, const 100_usize);
        switchInt(move _393) -> [0: bb137, otherwise: bb158];
    }

    bb137: {
        _390 = Le(const 101_usize, _387);
        switchInt(move _390) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _391 = Le(_387, const 200_usize);
        switchInt(move _391) -> [0: bb139, otherwise: bb176];
    }

    bb139: {
        StorageLive(_552);
        StorageLive(_553);
        _553 = ArrForm::<1200>::new() -> [return: bb194, unwind: bb373];
    }

    bb140: {
        StorageLive(_396);
        StorageLive(_397);
        _397 = ArrForm::<150>::new() -> [return: bb141, unwind: bb373];
    }

    bb141: {
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &mut _397;
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _960 = const _;
        _404 = &(*_960);
        _403 = &(*_404);
        _402 = move _403 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_403);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_374;
        _413 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _414) -> [return: bb142, unwind: bb373];
    }

    bb142: {
        StorageDead(_414);
        _412 = &_413;
        _411 = &(*_412);
        _410 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _411) -> [return: bb143, unwind: bb373];
    }

    bb143: {
        StorageDead(_411);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = &_375;
        _418 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _419) -> [return: bb144, unwind: bb373];
    }

    bb144: {
        StorageDead(_419);
        _417 = &_418;
        _416 = &(*_417);
        _415 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _416) -> [return: bb145, unwind: bb373];
    }

    bb145: {
        StorageDead(_416);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &_383;
        _423 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _424) -> [return: bb146, unwind: bb373];
    }

    bb146: {
        StorageDead(_424);
        _422 = &_423;
        _421 = &(*_422);
        _420 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _421) -> [return: bb147, unwind: bb373];
    }

    bb147: {
        StorageDead(_421);
        _409 = [move _410, move _415, move _420];
        StorageDead(_420);
        StorageDead(_415);
        StorageDead(_410);
        _408 = &_409;
        _407 = &(*_408);
        _406 = move _407 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_407);
        _401 = Arguments::<'_>::new_v1(move _402, move _406) -> [return: bb148, unwind: bb373];
    }

    bb148: {
        StorageDead(_406);
        StorageDead(_402);
        _399 = ArrForm::<150>::format(move _400, move _401) -> [return: bb149, unwind: bb373];
    }

    bb149: {
        StorageDead(_401);
        StorageDead(_400);
        StorageLive(_425);
        StorageLive(_426);
        _426 = &mut _397;
        _425 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _426 };
        StorageDead(_426);
        _398 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _399, move _425) -> [return: bb150, unwind: bb373];
    }

    bb150: {
        StorageDead(_425);
        StorageDead(_399);
        StorageDead(_423);
        StorageDead(_422);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_404);
        StorageDead(_398);
        _396 = move _397;
        StorageDead(_397);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _959 = const _;
        _437 = &(*_959);
        _436 = &(*_437);
        _435 = move _436 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_436);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = &_396;
        _446 = ArrForm::<150>::as_str(move _447) -> [return: bb151, unwind: bb373];
    }

    bb151: {
        StorageDead(_447);
        _445 = &_446;
        _444 = &(*_445);
        _443 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _444) -> [return: bb152, unwind: bb373];
    }

    bb152: {
        StorageDead(_444);
        _442 = [move _443];
        StorageDead(_443);
        _441 = &_442;
        _440 = &(*_441);
        _439 = move _440 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_440);
        _434 = Arguments::<'_>::new_v1(move _435, move _439) -> [return: bb153, unwind: bb373];
    }

    bb153: {
        StorageDead(_439);
        StorageDead(_435);
        _433 = format(move _434) -> [return: bb154, unwind: bb373];
    }

    bb154: {
        StorageDead(_434);
        StorageDead(_446);
        StorageDead(_445);
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_437);
        _432 = move _433;
        StorageDead(_433);
        _431 = &_432;
        _430 = &(*_431);
        _429 = <String as Deref>::deref(move _430) -> [return: bb155, unwind: bb366];
    }

    bb155: {
        _428 = &(*_429);
        StorageDead(_430);
        _427 = solana_program::log::sol_log(move _428) -> [return: bb156, unwind: bb366];
    }

    bb156: {
        StorageDead(_428);
        drop(_432) -> [return: bb157, unwind: bb373];
    }

    bb157: {
        StorageDead(_432);
        StorageDead(_431);
        StorageDead(_429);
        StorageDead(_427);
        _386 = const ();
        StorageDead(_396);
        goto -> bb211;
    }

    bb158: {
        StorageLive(_448);
        StorageLive(_449);
        _449 = ArrForm::<300>::new() -> [return: bb159, unwind: bb373];
    }

    bb159: {
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _452 = &mut _449;
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _958 = const _;
        _456 = &(*_958);
        _455 = &(*_456);
        _454 = move _455 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_455);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = &_374;
        _465 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _466) -> [return: bb160, unwind: bb373];
    }

    bb160: {
        StorageDead(_466);
        _464 = &_465;
        _463 = &(*_464);
        _462 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _463) -> [return: bb161, unwind: bb373];
    }

    bb161: {
        StorageDead(_463);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_375;
        _470 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _471) -> [return: bb162, unwind: bb373];
    }

    bb162: {
        StorageDead(_471);
        _469 = &_470;
        _468 = &(*_469);
        _467 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _468) -> [return: bb163, unwind: bb373];
    }

    bb163: {
        StorageDead(_468);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _476 = &_383;
        _475 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _476) -> [return: bb164, unwind: bb373];
    }

    bb164: {
        StorageDead(_476);
        _474 = &_475;
        _473 = &(*_474);
        _472 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _473) -> [return: bb165, unwind: bb373];
    }

    bb165: {
        StorageDead(_473);
        _461 = [move _462, move _467, move _472];
        StorageDead(_472);
        StorageDead(_467);
        StorageDead(_462);
        _460 = &_461;
        _459 = &(*_460);
        _458 = move _459 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_459);
        _453 = Arguments::<'_>::new_v1(move _454, move _458) -> [return: bb166, unwind: bb373];
    }

    bb166: {
        StorageDead(_458);
        StorageDead(_454);
        _451 = ArrForm::<300>::format(move _452, move _453) -> [return: bb167, unwind: bb373];
    }

    bb167: {
        StorageDead(_453);
        StorageDead(_452);
        StorageLive(_477);
        StorageLive(_478);
        _478 = &mut _449;
        _477 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _478 };
        StorageDead(_478);
        _450 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _451, move _477) -> [return: bb168, unwind: bb373];
    }

    bb168: {
        StorageDead(_477);
        StorageDead(_451);
        StorageDead(_475);
        StorageDead(_474);
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_465);
        StorageDead(_464);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_456);
        StorageDead(_450);
        _448 = move _449;
        StorageDead(_449);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _957 = const _;
        _489 = &(*_957);
        _488 = &(*_489);
        _487 = move _488 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_488);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &_448;
        _498 = ArrForm::<300>::as_str(move _499) -> [return: bb169, unwind: bb373];
    }

    bb169: {
        StorageDead(_499);
        _497 = &_498;
        _496 = &(*_497);
        _495 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _496) -> [return: bb170, unwind: bb373];
    }

    bb170: {
        StorageDead(_496);
        _494 = [move _495];
        StorageDead(_495);
        _493 = &_494;
        _492 = &(*_493);
        _491 = move _492 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_492);
        _486 = Arguments::<'_>::new_v1(move _487, move _491) -> [return: bb171, unwind: bb373];
    }

    bb171: {
        StorageDead(_491);
        StorageDead(_487);
        _485 = format(move _486) -> [return: bb172, unwind: bb373];
    }

    bb172: {
        StorageDead(_486);
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_494);
        StorageDead(_493);
        StorageDead(_489);
        _484 = move _485;
        StorageDead(_485);
        _483 = &_484;
        _482 = &(*_483);
        _481 = <String as Deref>::deref(move _482) -> [return: bb173, unwind: bb365];
    }

    bb173: {
        _480 = &(*_481);
        StorageDead(_482);
        _479 = solana_program::log::sol_log(move _480) -> [return: bb174, unwind: bb365];
    }

    bb174: {
        StorageDead(_480);
        drop(_484) -> [return: bb175, unwind: bb373];
    }

    bb175: {
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_481);
        StorageDead(_479);
        _386 = const ();
        StorageDead(_448);
        goto -> bb211;
    }

    bb176: {
        StorageLive(_500);
        StorageLive(_501);
        _501 = ArrForm::<600>::new() -> [return: bb177, unwind: bb373];
    }

    bb177: {
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        _504 = &mut _501;
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _956 = const _;
        _508 = &(*_956);
        _507 = &(*_508);
        _506 = move _507 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_507);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        _518 = &_374;
        _517 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _518) -> [return: bb178, unwind: bb373];
    }

    bb178: {
        StorageDead(_518);
        _516 = &_517;
        _515 = &(*_516);
        _514 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _515) -> [return: bb179, unwind: bb373];
    }

    bb179: {
        StorageDead(_515);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = &_375;
        _522 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _523) -> [return: bb180, unwind: bb373];
    }

    bb180: {
        StorageDead(_523);
        _521 = &_522;
        _520 = &(*_521);
        _519 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _520) -> [return: bb181, unwind: bb373];
    }

    bb181: {
        StorageDead(_520);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _528 = &_383;
        _527 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _528) -> [return: bb182, unwind: bb373];
    }

    bb182: {
        StorageDead(_528);
        _526 = &_527;
        _525 = &(*_526);
        _524 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _525) -> [return: bb183, unwind: bb373];
    }

    bb183: {
        StorageDead(_525);
        _513 = [move _514, move _519, move _524];
        StorageDead(_524);
        StorageDead(_519);
        StorageDead(_514);
        _512 = &_513;
        _511 = &(*_512);
        _510 = move _511 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_511);
        _505 = Arguments::<'_>::new_v1(move _506, move _510) -> [return: bb184, unwind: bb373];
    }

    bb184: {
        StorageDead(_510);
        StorageDead(_506);
        _503 = ArrForm::<600>::format(move _504, move _505) -> [return: bb185, unwind: bb373];
    }

    bb185: {
        StorageDead(_505);
        StorageDead(_504);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &mut _501;
        _529 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _530 };
        StorageDead(_530);
        _502 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _503, move _529) -> [return: bb186, unwind: bb373];
    }

    bb186: {
        StorageDead(_529);
        StorageDead(_503);
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_517);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_508);
        StorageDead(_502);
        _500 = move _501;
        StorageDead(_501);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _955 = const _;
        _541 = &(*_955);
        _540 = &(*_541);
        _539 = move _540 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_540);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = &_500;
        _550 = ArrForm::<600>::as_str(move _551) -> [return: bb187, unwind: bb373];
    }

    bb187: {
        StorageDead(_551);
        _549 = &_550;
        _548 = &(*_549);
        _547 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _548) -> [return: bb188, unwind: bb373];
    }

    bb188: {
        StorageDead(_548);
        _546 = [move _547];
        StorageDead(_547);
        _545 = &_546;
        _544 = &(*_545);
        _543 = move _544 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_544);
        _538 = Arguments::<'_>::new_v1(move _539, move _543) -> [return: bb189, unwind: bb373];
    }

    bb189: {
        StorageDead(_543);
        StorageDead(_539);
        _537 = format(move _538) -> [return: bb190, unwind: bb373];
    }

    bb190: {
        StorageDead(_538);
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_546);
        StorageDead(_545);
        StorageDead(_541);
        _536 = move _537;
        StorageDead(_537);
        _535 = &_536;
        _534 = &(*_535);
        _533 = <String as Deref>::deref(move _534) -> [return: bb191, unwind: bb364];
    }

    bb191: {
        _532 = &(*_533);
        StorageDead(_534);
        _531 = solana_program::log::sol_log(move _532) -> [return: bb192, unwind: bb364];
    }

    bb192: {
        StorageDead(_532);
        drop(_536) -> [return: bb193, unwind: bb373];
    }

    bb193: {
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_531);
        _386 = const ();
        StorageDead(_500);
        goto -> bb211;
    }

    bb194: {
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        _556 = &mut _553;
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        _954 = const _;
        _560 = &(*_954);
        _559 = &(*_560);
        _558 = move _559 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_559);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        _570 = &_374;
        _569 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _570) -> [return: bb195, unwind: bb373];
    }

    bb195: {
        StorageDead(_570);
        _568 = &_569;
        _567 = &(*_568);
        _566 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _567) -> [return: bb196, unwind: bb373];
    }

    bb196: {
        StorageDead(_567);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _575 = &_375;
        _574 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _575) -> [return: bb197, unwind: bb373];
    }

    bb197: {
        StorageDead(_575);
        _573 = &_574;
        _572 = &(*_573);
        _571 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _572) -> [return: bb198, unwind: bb373];
    }

    bb198: {
        StorageDead(_572);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        _580 = &_383;
        _579 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _580) -> [return: bb199, unwind: bb373];
    }

    bb199: {
        StorageDead(_580);
        _578 = &_579;
        _577 = &(*_578);
        _576 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _577) -> [return: bb200, unwind: bb373];
    }

    bb200: {
        StorageDead(_577);
        _565 = [move _566, move _571, move _576];
        StorageDead(_576);
        StorageDead(_571);
        StorageDead(_566);
        _564 = &_565;
        _563 = &(*_564);
        _562 = move _563 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_563);
        _557 = Arguments::<'_>::new_v1(move _558, move _562) -> [return: bb201, unwind: bb373];
    }

    bb201: {
        StorageDead(_562);
        StorageDead(_558);
        _555 = ArrForm::<1200>::format(move _556, move _557) -> [return: bb202, unwind: bb373];
    }

    bb202: {
        StorageDead(_557);
        StorageDead(_556);
        StorageLive(_581);
        StorageLive(_582);
        _582 = &mut _553;
        _581 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _582 };
        StorageDead(_582);
        _554 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _555, move _581) -> [return: bb203, unwind: bb373];
    }

    bb203: {
        StorageDead(_581);
        StorageDead(_555);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_565);
        StorageDead(_564);
        StorageDead(_560);
        StorageDead(_554);
        _552 = move _553;
        StorageDead(_553);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _953 = const _;
        _593 = &(*_953);
        _592 = &(*_593);
        _591 = move _592 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_592);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        _603 = &_552;
        _602 = ArrForm::<1200>::as_str(move _603) -> [return: bb204, unwind: bb373];
    }

    bb204: {
        StorageDead(_603);
        _601 = &_602;
        _600 = &(*_601);
        _599 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _600) -> [return: bb205, unwind: bb373];
    }

    bb205: {
        StorageDead(_600);
        _598 = [move _599];
        StorageDead(_599);
        _597 = &_598;
        _596 = &(*_597);
        _595 = move _596 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_596);
        _590 = Arguments::<'_>::new_v1(move _591, move _595) -> [return: bb206, unwind: bb373];
    }

    bb206: {
        StorageDead(_595);
        StorageDead(_591);
        _589 = format(move _590) -> [return: bb207, unwind: bb373];
    }

    bb207: {
        StorageDead(_590);
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_598);
        StorageDead(_597);
        StorageDead(_593);
        _588 = move _589;
        StorageDead(_589);
        _587 = &_588;
        _586 = &(*_587);
        _585 = <String as Deref>::deref(move _586) -> [return: bb208, unwind: bb363];
    }

    bb208: {
        _584 = &(*_585);
        StorageDead(_586);
        _583 = solana_program::log::sol_log(move _584) -> [return: bb209, unwind: bb363];
    }

    bb209: {
        StorageDead(_584);
        drop(_588) -> [return: bb210, unwind: bb373];
    }

    bb210: {
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_585);
        StorageDead(_583);
        _386 = const ();
        StorageDead(_552);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_389);
        StorageDead(_387);
        StorageDead(_386);
        StorageLive(_604);
        _604 = _383;
        StorageLive(_605);
        _605 = InvestingDirection::Subtract;
        _379 = (move _604, move _605);
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_383);
        goto -> bb300;
    }

    bb212: {
        StorageDead(_382);
        StorageDead(_381);
        StorageLive(_606);
        StorageLive(_607);
        _607 = _375;
        StorageLive(_608);
        _608 = _374;
        _606 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _607, move _608) -> [return: bb213, unwind: bb373];
    }

    bb213: {
        StorageDead(_608);
        StorageDead(_607);
        StorageLive(_609);
        StorageLive(_610);
        _610 = &(*_1);
        _609 = available_to_invest(move _610) -> [return: bb214, unwind: bb373];
    }

    bb214: {
        StorageDead(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        _614 = const "Actual {} target {} available {}, need to Add {}";
        _613 = &(*_614);
        _612 = core::str::<impl str>::len(move _613) -> [return: bb215, unwind: bb373];
    }

    bb215: {
        StorageDead(_613);
        _619 = Le(const 0_usize, _612);
        switchInt(move _619) -> [0: bb217, otherwise: bb216];
    }

    bb216: {
        _620 = Le(_612, const 50_usize);
        switchInt(move _620) -> [0: bb217, otherwise: bb222];
    }

    bb217: {
        _617 = Le(const 51_usize, _612);
        switchInt(move _617) -> [0: bb219, otherwise: bb218];
    }

    bb218: {
        _618 = Le(_612, const 100_usize);
        switchInt(move _618) -> [0: bb219, otherwise: bb241];
    }

    bb219: {
        _615 = Le(const 101_usize, _612);
        switchInt(move _615) -> [0: bb221, otherwise: bb220];
    }

    bb220: {
        _616 = Le(_612, const 200_usize);
        switchInt(move _616) -> [0: bb221, otherwise: bb260];
    }

    bb221: {
        StorageLive(_786);
        StorageLive(_787);
        _787 = ArrForm::<1200>::new() -> [return: bb279, unwind: bb373];
    }

    bb222: {
        StorageLive(_621);
        StorageLive(_622);
        _622 = ArrForm::<150>::new() -> [return: bb223, unwind: bb373];
    }

    bb223: {
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        _625 = &mut _622;
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        _968 = const _;
        _629 = &(*_968);
        _628 = &(*_629);
        _627 = move _628 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_628);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _639 = &_374;
        _638 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _639) -> [return: bb224, unwind: bb373];
    }

    bb224: {
        StorageDead(_639);
        _637 = &_638;
        _636 = &(*_637);
        _635 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _636) -> [return: bb225, unwind: bb373];
    }

    bb225: {
        StorageDead(_636);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        _644 = &_375;
        _643 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _644) -> [return: bb226, unwind: bb373];
    }

    bb226: {
        StorageDead(_644);
        _642 = &_643;
        _641 = &(*_642);
        _640 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _641) -> [return: bb227, unwind: bb373];
    }

    bb227: {
        StorageDead(_641);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        _647 = &_609;
        _646 = &(*_647);
        _645 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _646) -> [return: bb228, unwind: bb373];
    }

    bb228: {
        StorageDead(_646);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        _652 = &_606;
        _651 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _652) -> [return: bb229, unwind: bb373];
    }

    bb229: {
        StorageDead(_652);
        _650 = &_651;
        _649 = &(*_650);
        _648 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _649) -> [return: bb230, unwind: bb373];
    }

    bb230: {
        StorageDead(_649);
        _634 = [move _635, move _640, move _645, move _648];
        StorageDead(_648);
        StorageDead(_645);
        StorageDead(_640);
        StorageDead(_635);
        _633 = &_634;
        _632 = &(*_633);
        _631 = move _632 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_632);
        _626 = Arguments::<'_>::new_v1(move _627, move _631) -> [return: bb231, unwind: bb373];
    }

    bb231: {
        StorageDead(_631);
        StorageDead(_627);
        _624 = ArrForm::<150>::format(move _625, move _626) -> [return: bb232, unwind: bb373];
    }

    bb232: {
        StorageDead(_626);
        StorageDead(_625);
        StorageLive(_653);
        StorageLive(_654);
        _654 = &mut _622;
        _653 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _654 };
        StorageDead(_654);
        _623 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _624, move _653) -> [return: bb233, unwind: bb373];
    }

    bb233: {
        StorageDead(_653);
        StorageDead(_624);
        StorageDead(_651);
        StorageDead(_650);
        StorageDead(_647);
        StorageDead(_643);
        StorageDead(_642);
        StorageDead(_638);
        StorageDead(_637);
        StorageDead(_634);
        StorageDead(_633);
        StorageDead(_629);
        StorageDead(_623);
        _621 = move _622;
        StorageDead(_622);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        _967 = const _;
        _665 = &(*_967);
        _664 = &(*_665);
        _663 = move _664 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_664);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        _675 = &_621;
        _674 = ArrForm::<150>::as_str(move _675) -> [return: bb234, unwind: bb373];
    }

    bb234: {
        StorageDead(_675);
        _673 = &_674;
        _672 = &(*_673);
        _671 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _672) -> [return: bb235, unwind: bb373];
    }

    bb235: {
        StorageDead(_672);
        _670 = [move _671];
        StorageDead(_671);
        _669 = &_670;
        _668 = &(*_669);
        _667 = move _668 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_668);
        _662 = Arguments::<'_>::new_v1(move _663, move _667) -> [return: bb236, unwind: bb373];
    }

    bb236: {
        StorageDead(_667);
        StorageDead(_663);
        _661 = format(move _662) -> [return: bb237, unwind: bb373];
    }

    bb237: {
        StorageDead(_662);
        StorageDead(_674);
        StorageDead(_673);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_665);
        _660 = move _661;
        StorageDead(_661);
        _659 = &_660;
        _658 = &(*_659);
        _657 = <String as Deref>::deref(move _658) -> [return: bb238, unwind: bb362];
    }

    bb238: {
        _656 = &(*_657);
        StorageDead(_658);
        _655 = solana_program::log::sol_log(move _656) -> [return: bb239, unwind: bb362];
    }

    bb239: {
        StorageDead(_656);
        drop(_660) -> [return: bb240, unwind: bb373];
    }

    bb240: {
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_657);
        StorageDead(_655);
        _611 = const ();
        StorageDead(_621);
        goto -> bb297;
    }

    bb241: {
        StorageLive(_676);
        StorageLive(_677);
        _677 = ArrForm::<300>::new() -> [return: bb242, unwind: bb373];
    }

    bb242: {
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        _680 = &mut _677;
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        _966 = const _;
        _684 = &(*_966);
        _683 = &(*_684);
        _682 = move _683 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_683);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = &_374;
        _693 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _694) -> [return: bb243, unwind: bb373];
    }

    bb243: {
        StorageDead(_694);
        _692 = &_693;
        _691 = &(*_692);
        _690 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _691) -> [return: bb244, unwind: bb373];
    }

    bb244: {
        StorageDead(_691);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        _699 = &_375;
        _698 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _699) -> [return: bb245, unwind: bb373];
    }

    bb245: {
        StorageDead(_699);
        _697 = &_698;
        _696 = &(*_697);
        _695 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _696) -> [return: bb246, unwind: bb373];
    }

    bb246: {
        StorageDead(_696);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        _702 = &_609;
        _701 = &(*_702);
        _700 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _701) -> [return: bb247, unwind: bb373];
    }

    bb247: {
        StorageDead(_701);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        _707 = &_606;
        _706 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _707) -> [return: bb248, unwind: bb373];
    }

    bb248: {
        StorageDead(_707);
        _705 = &_706;
        _704 = &(*_705);
        _703 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _704) -> [return: bb249, unwind: bb373];
    }

    bb249: {
        StorageDead(_704);
        _689 = [move _690, move _695, move _700, move _703];
        StorageDead(_703);
        StorageDead(_700);
        StorageDead(_695);
        StorageDead(_690);
        _688 = &_689;
        _687 = &(*_688);
        _686 = move _687 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_687);
        _681 = Arguments::<'_>::new_v1(move _682, move _686) -> [return: bb250, unwind: bb373];
    }

    bb250: {
        StorageDead(_686);
        StorageDead(_682);
        _679 = ArrForm::<300>::format(move _680, move _681) -> [return: bb251, unwind: bb373];
    }

    bb251: {
        StorageDead(_681);
        StorageDead(_680);
        StorageLive(_708);
        StorageLive(_709);
        _709 = &mut _677;
        _708 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _709 };
        StorageDead(_709);
        _678 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _679, move _708) -> [return: bb252, unwind: bb373];
    }

    bb252: {
        StorageDead(_708);
        StorageDead(_679);
        StorageDead(_706);
        StorageDead(_705);
        StorageDead(_702);
        StorageDead(_698);
        StorageDead(_697);
        StorageDead(_693);
        StorageDead(_692);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_684);
        StorageDead(_678);
        _676 = move _677;
        StorageDead(_677);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        _965 = const _;
        _720 = &(*_965);
        _719 = &(*_720);
        _718 = move _719 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_719);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        _730 = &_676;
        _729 = ArrForm::<300>::as_str(move _730) -> [return: bb253, unwind: bb373];
    }

    bb253: {
        StorageDead(_730);
        _728 = &_729;
        _727 = &(*_728);
        _726 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _727) -> [return: bb254, unwind: bb373];
    }

    bb254: {
        StorageDead(_727);
        _725 = [move _726];
        StorageDead(_726);
        _724 = &_725;
        _723 = &(*_724);
        _722 = move _723 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_723);
        _717 = Arguments::<'_>::new_v1(move _718, move _722) -> [return: bb255, unwind: bb373];
    }

    bb255: {
        StorageDead(_722);
        StorageDead(_718);
        _716 = format(move _717) -> [return: bb256, unwind: bb373];
    }

    bb256: {
        StorageDead(_717);
        StorageDead(_729);
        StorageDead(_728);
        StorageDead(_725);
        StorageDead(_724);
        StorageDead(_720);
        _715 = move _716;
        StorageDead(_716);
        _714 = &_715;
        _713 = &(*_714);
        _712 = <String as Deref>::deref(move _713) -> [return: bb257, unwind: bb361];
    }

    bb257: {
        _711 = &(*_712);
        StorageDead(_713);
        _710 = solana_program::log::sol_log(move _711) -> [return: bb258, unwind: bb361];
    }

    bb258: {
        StorageDead(_711);
        drop(_715) -> [return: bb259, unwind: bb373];
    }

    bb259: {
        StorageDead(_715);
        StorageDead(_714);
        StorageDead(_712);
        StorageDead(_710);
        _611 = const ();
        StorageDead(_676);
        goto -> bb297;
    }

    bb260: {
        StorageLive(_731);
        StorageLive(_732);
        _732 = ArrForm::<600>::new() -> [return: bb261, unwind: bb373];
    }

    bb261: {
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        _735 = &mut _732;
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        _964 = const _;
        _739 = &(*_964);
        _738 = &(*_739);
        _737 = move _738 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_738);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        _749 = &_374;
        _748 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _749) -> [return: bb262, unwind: bb373];
    }

    bb262: {
        StorageDead(_749);
        _747 = &_748;
        _746 = &(*_747);
        _745 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _746) -> [return: bb263, unwind: bb373];
    }

    bb263: {
        StorageDead(_746);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        _754 = &_375;
        _753 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _754) -> [return: bb264, unwind: bb373];
    }

    bb264: {
        StorageDead(_754);
        _752 = &_753;
        _751 = &(*_752);
        _750 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _751) -> [return: bb265, unwind: bb373];
    }

    bb265: {
        StorageDead(_751);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &_609;
        _756 = &(*_757);
        _755 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _756) -> [return: bb266, unwind: bb373];
    }

    bb266: {
        StorageDead(_756);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        _762 = &_606;
        _761 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _762) -> [return: bb267, unwind: bb373];
    }

    bb267: {
        StorageDead(_762);
        _760 = &_761;
        _759 = &(*_760);
        _758 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _759) -> [return: bb268, unwind: bb373];
    }

    bb268: {
        StorageDead(_759);
        _744 = [move _745, move _750, move _755, move _758];
        StorageDead(_758);
        StorageDead(_755);
        StorageDead(_750);
        StorageDead(_745);
        _743 = &_744;
        _742 = &(*_743);
        _741 = move _742 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_742);
        _736 = Arguments::<'_>::new_v1(move _737, move _741) -> [return: bb269, unwind: bb373];
    }

    bb269: {
        StorageDead(_741);
        StorageDead(_737);
        _734 = ArrForm::<600>::format(move _735, move _736) -> [return: bb270, unwind: bb373];
    }

    bb270: {
        StorageDead(_736);
        StorageDead(_735);
        StorageLive(_763);
        StorageLive(_764);
        _764 = &mut _732;
        _763 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _764 };
        StorageDead(_764);
        _733 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _734, move _763) -> [return: bb271, unwind: bb373];
    }

    bb271: {
        StorageDead(_763);
        StorageDead(_734);
        StorageDead(_761);
        StorageDead(_760);
        StorageDead(_757);
        StorageDead(_753);
        StorageDead(_752);
        StorageDead(_748);
        StorageDead(_747);
        StorageDead(_744);
        StorageDead(_743);
        StorageDead(_739);
        StorageDead(_733);
        _731 = move _732;
        StorageDead(_732);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        _963 = const _;
        _775 = &(*_963);
        _774 = &(*_775);
        _773 = move _774 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_774);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        _785 = &_731;
        _784 = ArrForm::<600>::as_str(move _785) -> [return: bb272, unwind: bb373];
    }

    bb272: {
        StorageDead(_785);
        _783 = &_784;
        _782 = &(*_783);
        _781 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _782) -> [return: bb273, unwind: bb373];
    }

    bb273: {
        StorageDead(_782);
        _780 = [move _781];
        StorageDead(_781);
        _779 = &_780;
        _778 = &(*_779);
        _777 = move _778 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_778);
        _772 = Arguments::<'_>::new_v1(move _773, move _777) -> [return: bb274, unwind: bb373];
    }

    bb274: {
        StorageDead(_777);
        StorageDead(_773);
        _771 = format(move _772) -> [return: bb275, unwind: bb373];
    }

    bb275: {
        StorageDead(_772);
        StorageDead(_784);
        StorageDead(_783);
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_775);
        _770 = move _771;
        StorageDead(_771);
        _769 = &_770;
        _768 = &(*_769);
        _767 = <String as Deref>::deref(move _768) -> [return: bb276, unwind: bb360];
    }

    bb276: {
        _766 = &(*_767);
        StorageDead(_768);
        _765 = solana_program::log::sol_log(move _766) -> [return: bb277, unwind: bb360];
    }

    bb277: {
        StorageDead(_766);
        drop(_770) -> [return: bb278, unwind: bb373];
    }

    bb278: {
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_767);
        StorageDead(_765);
        _611 = const ();
        StorageDead(_731);
        goto -> bb297;
    }

    bb279: {
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        _790 = &mut _787;
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        _962 = const _;
        _794 = &(*_962);
        _793 = &(*_794);
        _792 = move _793 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_793);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        _804 = &_374;
        _803 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _804) -> [return: bb280, unwind: bb373];
    }

    bb280: {
        StorageDead(_804);
        _802 = &_803;
        _801 = &(*_802);
        _800 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _801) -> [return: bb281, unwind: bb373];
    }

    bb281: {
        StorageDead(_801);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        _809 = &_375;
        _808 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _809) -> [return: bb282, unwind: bb373];
    }

    bb282: {
        StorageDead(_809);
        _807 = &_808;
        _806 = &(*_807);
        _805 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _806) -> [return: bb283, unwind: bb373];
    }

    bb283: {
        StorageDead(_806);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        _812 = &_609;
        _811 = &(*_812);
        _810 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _811) -> [return: bb284, unwind: bb373];
    }

    bb284: {
        StorageDead(_811);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        _817 = &_606;
        _816 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _817) -> [return: bb285, unwind: bb373];
    }

    bb285: {
        StorageDead(_817);
        _815 = &_816;
        _814 = &(*_815);
        _813 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _814) -> [return: bb286, unwind: bb373];
    }

    bb286: {
        StorageDead(_814);
        _799 = [move _800, move _805, move _810, move _813];
        StorageDead(_813);
        StorageDead(_810);
        StorageDead(_805);
        StorageDead(_800);
        _798 = &_799;
        _797 = &(*_798);
        _796 = move _797 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_797);
        _791 = Arguments::<'_>::new_v1(move _792, move _796) -> [return: bb287, unwind: bb373];
    }

    bb287: {
        StorageDead(_796);
        StorageDead(_792);
        _789 = ArrForm::<1200>::format(move _790, move _791) -> [return: bb288, unwind: bb373];
    }

    bb288: {
        StorageDead(_791);
        StorageDead(_790);
        StorageLive(_818);
        StorageLive(_819);
        _819 = &mut _787;
        _818 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _819 };
        StorageDead(_819);
        _788 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _789, move _818) -> [return: bb289, unwind: bb373];
    }

    bb289: {
        StorageDead(_818);
        StorageDead(_789);
        StorageDead(_816);
        StorageDead(_815);
        StorageDead(_812);
        StorageDead(_808);
        StorageDead(_807);
        StorageDead(_803);
        StorageDead(_802);
        StorageDead(_799);
        StorageDead(_798);
        StorageDead(_794);
        StorageDead(_788);
        _786 = move _787;
        StorageDead(_787);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        _961 = const _;
        _830 = &(*_961);
        _829 = &(*_830);
        _828 = move _829 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_829);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        _840 = &_786;
        _839 = ArrForm::<1200>::as_str(move _840) -> [return: bb290, unwind: bb373];
    }

    bb290: {
        StorageDead(_840);
        _838 = &_839;
        _837 = &(*_838);
        _836 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _837) -> [return: bb291, unwind: bb373];
    }

    bb291: {
        StorageDead(_837);
        _835 = [move _836];
        StorageDead(_836);
        _834 = &_835;
        _833 = &(*_834);
        _832 = move _833 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_833);
        _827 = Arguments::<'_>::new_v1(move _828, move _832) -> [return: bb292, unwind: bb373];
    }

    bb292: {
        StorageDead(_832);
        StorageDead(_828);
        _826 = format(move _827) -> [return: bb293, unwind: bb373];
    }

    bb293: {
        StorageDead(_827);
        StorageDead(_839);
        StorageDead(_838);
        StorageDead(_835);
        StorageDead(_834);
        StorageDead(_830);
        _825 = move _826;
        StorageDead(_826);
        _824 = &_825;
        _823 = &(*_824);
        _822 = <String as Deref>::deref(move _823) -> [return: bb294, unwind: bb359];
    }

    bb294: {
        _821 = &(*_822);
        StorageDead(_823);
        _820 = solana_program::log::sol_log(move _821) -> [return: bb295, unwind: bb359];
    }

    bb295: {
        StorageDead(_821);
        drop(_825) -> [return: bb296, unwind: bb373];
    }

    bb296: {
        StorageDead(_825);
        StorageDead(_824);
        StorageDead(_822);
        StorageDead(_820);
        _611 = const ();
        StorageDead(_786);
        goto -> bb297;
    }

    bb297: {
        StorageDead(_614);
        StorageDead(_612);
        StorageDead(_611);
        StorageLive(_841);
        StorageLive(_842);
        _842 = _606;
        StorageLive(_843);
        StorageLive(_844);
        _844 = _609;
        _843 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _844) -> [return: bb298, unwind: bb373];
    }

    bb298: {
        StorageDead(_844);
        _841 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Ord>::min(move _842, move _843) -> [return: bb299, unwind: bb373];
    }

    bb299: {
        StorageDead(_843);
        StorageDead(_842);
        StorageLive(_845);
        _845 = InvestingDirection::Add;
        _379 = (move _841, move _845);
        StorageDead(_845);
        StorageDead(_841);
        StorageDead(_609);
        StorageDead(_606);
        goto -> bb300;
    }

    bb300: {
        StorageDead(_380);
        StorageLive(_377);
        _377 = (_379.0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_378);
        _378 = (_379.1: operations::effects::InvestingDirection);
        StorageDead(_379);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        _848 = &_377;
        StorageLive(_849);
        _849 = &((*_1).22: u64);
        _847 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<u64>>::le(move _848, move _849) -> [return: bb301, unwind: bb373];
    }

    bb301: {
        switchInt(move _847) -> [0: bb307, otherwise: bb302];
    }

    bb302: {
        StorageDead(_849);
        StorageDead(_848);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        _951 = const _;
        _854 = &(*_951);
        _853 = KaminoVaultError::name(move _854) -> [return: bb303, unwind: bb373];
    }

    bb303: {
        StorageDead(_854);
        StorageLive(_856);
        StorageLive(_857);
        _857 = KaminoVaultError::InvestAmountBelowMinimum;
        _856 = <KaminoVaultError as Into<u32>>::into(move _857) -> [return: bb304, unwind: bb358];
    }

    bb304: {
        StorageDead(_857);
        StorageLive(_858);
        StorageLive(_859);
        _950 = const _;
        _859 = &(*_950);
        _858 = <KaminoVaultError as ToString>::to_string(move _859) -> [return: bb305, unwind: bb358];
    }

    bb305: {
        StorageDead(_859);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        _863 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 478_u32 };
        _862 = anchor_lang::error::ErrorOrigin::Source(move _863);
        StorageDead(_863);
        _861 = Option::<ErrorOrigin>::Some(move _862);
        StorageDead(_862);
        StorageLive(_864);
        _864 = Option::<ComparedValues>::None;
        _852 = anchor_lang::error::AnchorError { error_name: move _853, error_code_number: move _856, error_msg: move _858, error_origin: move _861, compared_values: move _864 };
        StorageDead(_864);
        StorageDead(_861);
        StorageDead(_858);
        StorageDead(_856);
        StorageDead(_853);
        _851 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _852) -> [return: bb306, unwind: bb373];
    }

    bb306: {
        StorageDead(_852);
        _0 = std::result::Result::<InvestEffects, anchor_lang::error::Error>::Err(move _851);
        StorageDead(_851);
        StorageDead(_847);
        StorageDead(_846);
        goto -> bb352;
    }

    bb307: {
        StorageDead(_849);
        StorageDead(_848);
        _846 = const ();
        StorageDead(_847);
        StorageDead(_846);
        StorageLive(_865);
        StorageLive(_866);
        _866 = &(*_3);
        _865 = kamino_lending::Reserve::collateral_exchange_rate(move _866) -> [return: bb308, unwind: bb373];
    }

    bb308: {
        StorageDead(_866);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        _869 = ((*_145).2: u64);
        _868 = Eq(move _869, const 0_u64);
        switchInt(move _868) -> [0: bb310, otherwise: bb309];
    }

    bb309: {
        StorageDead(_869);
        _867 = ((*_145).6: u64);
        goto -> bb313;
    }

    bb310: {
        StorageDead(_869);
        StorageLive(_870);
        StorageLive(_871);
        _871 = &_865;
        StorageLive(_872);
        _872 = _377;
        _870 = CollateralExchangeRate::fraction_liquidity_to_collateral(move _871, move _872) -> [return: bb311, unwind: bb373];
    }

    bb311: {
        StorageDead(_872);
        StorageDead(_871);
        StorageLive(_873);
        _873 = &_870;
        _867 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_floor::<u64>(move _873) -> [return: bb312, unwind: bb373];
    }

    bb312: {
        StorageDead(_873);
        StorageDead(_870);
        goto -> bb313;
    }

    bb313: {
        StorageDead(_868);
        StorageLive(_874);
        StorageLive(_875);
        _875 = &_865;
        StorageLive(_876);
        StorageLive(_877);
        _877 = _867;
        _876 = <u64 as Into<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::into(move _877) -> [return: bb314, unwind: bb373];
    }

    bb314: {
        StorageDead(_877);
        _874 = CollateralExchangeRate::fraction_collateral_to_liquidity(move _875, move _876) -> [return: bb315, unwind: bb373];
    }

    bb315: {
        StorageDead(_876);
        StorageDead(_875);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        _883 = _874;
        _882 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::frac(move _883) -> [return: bb316, unwind: bb373];
    }

    bb316: {
        _881 = &_882;
        StorageDead(_883);
        StorageLive(_884);
        _952 = const _;
        _884 = &(*_952);
        _880 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _881, move _884) -> [return: bb317, unwind: bb373];
    }

    bb317: {
        switchInt(move _880) -> [0: bb319, otherwise: bb318];
    }

    bb318: {
        StorageDead(_884);
        StorageDead(_882);
        StorageDead(_881);
        _879 = const 1_u64;
        goto -> bb320;
    }

    bb319: {
        StorageDead(_884);
        StorageDead(_882);
        StorageDead(_881);
        _879 = const 0_u64;
        goto -> bb320;
    }

    bb320: {
        StorageDead(_880);
        StorageLive(_886);
        _887 = discriminant(_378);
        switchInt(move _887) -> [0: bb322, 1: bb321, otherwise: bb4];
    }

    bb321: {
        StorageLive(_907);
        StorageLive(_908);
        _908 = &_874;
        _907 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_floor::<u64>(move _908) -> [return: bb331, unwind: bb373];
    }

    bb322: {
        StorageLive(_888);
        StorageLive(_889);
        _889 = &_874;
        _888 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_ceil::<u64>(move _889) -> [return: bb323, unwind: bb373];
    }

    bb323: {
        StorageDead(_889);
        _878 = move _888;
        StorageDead(_888);
        StorageLive(_890);
        StorageLive(_891);
        _891 = &mut (*_1);
        StorageLive(_892);
        StorageLive(_893);
        _893 = _878;
        StorageLive(_894);
        _894 = _879;
        _895 = CheckedSub(_893, _894);
        assert(!move (_895.1: bool), "attempt to compute `{} - {}`, which would overflow", move _893, move _894) -> [success: bb324, unwind: bb373];
    }

    bb324: {
        _892 = move (_895.0: u64);
        StorageDead(_894);
        StorageDead(_893);
        _890 = withdraw_from_vault(move _891, move _892) -> [return: bb325, unwind: bb373];
    }

    bb325: {
        StorageDead(_892);
        StorageDead(_891);
        StorageDead(_890);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        _899 = &mut (*_1);
        StorageLive(_900);
        _900 = _867;
        StorageLive(_901);
        _901 = &(*_4);
        _898 = deposit_into_vault_allocation(move _899, move _900, move _901) -> [return: bb326, unwind: bb373];
    }

    bb326: {
        StorageDead(_901);
        StorageDead(_900);
        StorageDead(_899);
        _897 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _898) -> [return: bb327, unwind: bb373];
    }

    bb327: {
        StorageDead(_898);
        _902 = discriminant(_897);
        switchInt(move _902) -> [0: bb328, 1: bb329, otherwise: bb4];
    }

    bb328: {
        StorageLive(_906);
        _906 = ((_897 as Continue).0: ());
        _896 = _906;
        StorageDead(_906);
        _992 = discriminant(_897);
        StorageDead(_897);
        StorageDead(_896);
        _886 = const ();
        goto -> bb339;
    }

    bb329: {
        StorageLive(_903);
        _903 = move ((_897 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_905);
        _905 = move _903;
        _0 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _905) -> [return: bb330, unwind: bb379];
    }

    bb330: {
        StorageDead(_905);
        StorageDead(_903);
        _1002 = discriminant(_897);
        StorageDead(_897);
        StorageDead(_896);
        goto -> bb350;
    }

    bb331: {
        StorageDead(_908);
        _878 = move _907;
        StorageDead(_907);
        StorageLive(_909);
        StorageLive(_910);
        _910 = &mut (*_1);
        StorageLive(_911);
        StorageLive(_912);
        _912 = _878;
        StorageLive(_913);
        _913 = _879;
        _914 = CheckedAdd(_912, _913);
        assert(!move (_914.1: bool), "attempt to compute `{} + {}`, which would overflow", move _912, move _913) -> [success: bb332, unwind: bb373];
    }

    bb332: {
        _911 = move (_914.0: u64);
        StorageDead(_913);
        StorageDead(_912);
        _909 = deposit_into_vault(move _910, move _911) -> [return: bb333, unwind: bb373];
    }

    bb333: {
        StorageDead(_911);
        StorageDead(_910);
        StorageDead(_909);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        _918 = &mut (*_1);
        StorageLive(_919);
        _919 = _867;
        StorageLive(_920);
        _920 = &(*_4);
        _917 = withdraw_from_vault_allocation(move _918, move _919, move _920) -> [return: bb334, unwind: bb373];
    }

    bb334: {
        StorageDead(_920);
        StorageDead(_919);
        StorageDead(_918);
        _916 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _917) -> [return: bb335, unwind: bb373];
    }

    bb335: {
        StorageDead(_917);
        _921 = discriminant(_916);
        switchInt(move _921) -> [0: bb336, 1: bb337, otherwise: bb4];
    }

    bb336: {
        StorageLive(_925);
        _925 = ((_916 as Continue).0: ());
        _915 = _925;
        StorageDead(_925);
        _994 = discriminant(_916);
        StorageDead(_916);
        StorageDead(_915);
        _886 = const ();
        goto -> bb339;
    }

    bb337: {
        StorageLive(_922);
        _922 = move ((_916 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_924);
        _924 = move _922;
        _0 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _924) -> [return: bb338, unwind: bb378];
    }

    bb338: {
        StorageDead(_924);
        StorageDead(_922);
        _1000 = discriminant(_916);
        StorageDead(_916);
        StorageDead(_915);
        goto -> bb350;
    }

    bb339: {
        StorageDead(_886);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        _928 = ((*_1).11: u64);
        StorageLive(_929);
        _929 = _879;
        _927 = Ge(move _928, move _929);
        switchInt(move _927) -> [0: bb342, otherwise: bb340];
    }

    bb340: {
        StorageDead(_929);
        StorageDead(_928);
        StorageLive(_930);
        _930 = _879;
        _931 = CheckedSub(((*_1).11: u64), _930);
        assert(!move (_931.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).11: u64), move _930) -> [success: bb341, unwind: bb373];
    }

    bb341: {
        ((*_1).11: u64) = move (_931.0: u64);
        StorageDead(_930);
        _879 = const 0_u64;
        _926 = const ();
        goto -> bb343;
    }

    bb342: {
        StorageDead(_929);
        StorageDead(_928);
        _926 = const ();
        goto -> bb343;
    }

    bb343: {
        StorageDead(_927);
        StorageDead(_926);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        _935 = &mut (*_1);
        StorageLive(_936);
        _936 = &(*_4);
        StorageLive(_937);
        _937 = _5;
        _934 = state::VaultState::set_allocation_last_invest_slot(move _935, move _936, move _937) -> [return: bb344, unwind: bb373];
    }

    bb344: {
        StorageDead(_937);
        StorageDead(_936);
        StorageDead(_935);
        _933 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _934) -> [return: bb345, unwind: bb373];
    }

    bb345: {
        StorageDead(_934);
        _938 = discriminant(_933);
        switchInt(move _938) -> [0: bb346, 1: bb347, otherwise: bb4];
    }

    bb346: {
        StorageLive(_942);
        _942 = ((_933 as Continue).0: ());
        _932 = _942;
        StorageDead(_942);
        _996 = discriminant(_933);
        StorageDead(_933);
        StorageDead(_932);
        StorageLive(_943);
        StorageLive(_944);
        _944 = _878;
        StorageLive(_945);
        _945 = _378;
        StorageLive(_946);
        _946 = _867;
        StorageLive(_947);
        _947 = _879;
        _943 = InvestEffects { direction: move _945, liquidity_amount: move _944, collateral_amount: move _946, rounding_loss: move _947 };
        StorageDead(_947);
        StorageDead(_946);
        StorageDead(_945);
        StorageDead(_944);
        _0 = std::result::Result::<InvestEffects, anchor_lang::error::Error>::Ok(move _943);
        StorageDead(_943);
        StorageDead(_879);
        StorageDead(_878);
        StorageDead(_874);
        StorageDead(_867);
        StorageDead(_865);
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_375);
        StorageDead(_374);
        StorageDead(_371);
        StorageDead(_145);
        drop(_102) -> [return: bb349, unwind: bb384];
    }

    bb347: {
        StorageLive(_939);
        _939 = move ((_933 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_941);
        _941 = move _939;
        _0 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _941) -> [return: bb348, unwind: bb377];
    }

    bb348: {
        StorageDead(_941);
        StorageDead(_939);
        _998 = discriminant(_933);
        StorageDead(_933);
        StorageDead(_932);
        goto -> bb351;
    }

    bb349: {
        StorageDead(_102);
        _983 = const false;
        StorageDead(_7);
        goto -> bb357;
    }

    bb350: {
        StorageDead(_886);
        goto -> bb351;
    }

    bb351: {
        StorageDead(_879);
        StorageDead(_878);
        StorageDead(_874);
        StorageDead(_867);
        StorageDead(_865);
        goto -> bb352;
    }

    bb352: {
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_375);
        StorageDead(_374);
        StorageDead(_371);
        goto -> bb353;
    }

    bb353: {
        StorageDead(_145);
        goto -> bb354;
    }

    bb354: {
        drop(_102) -> [return: bb355, unwind: bb384];
    }

    bb355: {
        StorageDead(_102);
        goto -> bb356;
    }

    bb356: {
        _983 = const false;
        StorageDead(_7);
        goto -> bb357;
    }

    bb357: {
        return;
    }

    bb358 (cleanup): {
        drop(_853) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        drop(_825) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb360 (cleanup): {
        drop(_770) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb361 (cleanup): {
        drop(_715) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb362 (cleanup): {
        drop(_660) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb363 (cleanup): {
        drop(_588) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb364 (cleanup): {
        drop(_536) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb365 (cleanup): {
        drop(_484) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb366 (cleanup): {
        drop(_432) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb367 (cleanup): {
        drop(_359) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb368 (cleanup): {
        drop(_333) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb369 (cleanup): {
        drop(_287) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb370 (cleanup): {
        drop(_241) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb371 (cleanup): {
        drop(_195) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb372 (cleanup): {
        drop(_133) -> [return: bb373, unwind terminate(cleanup)];
    }

    bb373 (cleanup): {
        drop(_102) -> [return: bb384, unwind terminate(cleanup)];
    }

    bb374 (cleanup): {
        drop(_86) -> [return: bb384, unwind terminate(cleanup)];
    }

    bb375 (cleanup): {
        drop(_43) -> [return: bb384, unwind terminate(cleanup)];
    }

    bb376 (cleanup): {
        resume;
    }

    bb377 (cleanup): {
        _1012 = discriminant(_933);
        goto -> bb373;
    }

    bb378 (cleanup): {
        _1013 = discriminant(_916);
        goto -> bb373;
    }

    bb379 (cleanup): {
        _1014 = discriminant(_897);
        goto -> bb373;
    }

    bb380 (cleanup): {
        _1015 = discriminant(_146);
        goto -> bb373;
    }

    bb381 (cleanup): {
        _1016 = discriminant(_116);
        goto -> bb373;
    }

    bb382 (cleanup): {
        _1017 = discriminant(_104);
        goto -> bb373;
    }

    bb383 (cleanup): {
        drop((_7.1: operations::vault_operations::common::Invested)) -> [return: bb376, unwind terminate(cleanup)];
    }

    bb384 (cleanup): {
        switchInt(_983) -> [0: bb376, otherwise: bb383];
    }

    bb385 (cleanup): {
        _1018 = discriminant(_8);
        goto -> bb376;
    }
}
