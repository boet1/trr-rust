// MIR for `withdraw_obligation_collateral_transfer` before PreCodegen

fn withdraw_obligation_collateral_transfer(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: &[&[u8]], _6: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug token_program => _1;
    debug destination_collateral => _2;
    debug source_collateral => _3;
    debug lending_market_authority => _4;
    debug authority_signer_seeds => _5;
    debug withdraw_amount => _6;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _9: std::result::Result<(), anchor_lang::error::Error>;
    let mut _10: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::Transfer<'_>>;
    let mut _11: anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: anchor_spl::token_2022::Transfer<'_>;
    let mut _13: anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: &[&[&[u8]]];
    let mut _17: &[&[&[u8]]; 1];
    let _18: &[&[&[u8]]; 1];
    let _19: [&[&[u8]]; 1];
    let mut _20: &[&[u8]];
    let mut _21: u64;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _27: ();
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    scope 1 {
        let _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _26: ();
        scope 2 {
            debug residual => _23;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _26;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = move _1;
        StorageLive(_12);
        StorageLive(_13);
        _13 = move _2;
        StorageLive(_14);
        _14 = move _3;
        StorageLive(_15);
        _15 = move _4;
        _12 = anchor_spl::token_2022::Transfer::<'_> { from: move _14, to: move _13, authority: move _15 };
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_5);
        _19 = [move _20];
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = move _17 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_17);
        _10 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::Transfer<'_>>::new_with_signer(move _11, move _12, move _16) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_21);
        _21 = _6;
        _9 = anchor_spl::token_2022::transfer(move _10, move _21) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_21);
        StorageDead(_10);
        _8 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_9);
        _22 = discriminant(_8);
        switchInt(move _22) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_26);
        _26 = ((_8 as Continue).0: ());
        _7 = _26;
        StorageDead(_26);
        _28 = discriminant(_8);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_27);
        _27 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _27);
        StorageDead(_27);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_23);
        _23 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _25) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_25);
        StorageDead(_23);
        _30 = discriminant(_8);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _32 = discriminant(_8);
        goto -> bb9;
    }
}
