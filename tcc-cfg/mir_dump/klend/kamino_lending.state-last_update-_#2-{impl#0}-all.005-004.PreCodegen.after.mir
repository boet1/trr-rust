// MIR for `last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\lib.rs:618:9: 618:29>::all` after PreCodegen

fn last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\lib.rs:618:9: 618:29>::all() -> last_update::PriceStatusFlags {
    let mut _0: state::last_update::PriceStatusFlags;
    let mut _1: u8;
    let _3: ();
    let mut _5: &state::last_update::PriceStatusFlags;
    let _6: &state::last_update::PriceStatusFlags;
    let mut _7: &bitflags::Flag<state::last_update::PriceStatusFlags>;
    let _8: &[bitflags::Flag<state::last_update::PriceStatusFlags>];
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: u8;
    let mut _13: u8;
    let mut _14: (usize, bool);
    let _15: ();
    let mut _17: &state::last_update::PriceStatusFlags;
    let _18: &state::last_update::PriceStatusFlags;
    let mut _19: &bitflags::Flag<state::last_update::PriceStatusFlags>;
    let _20: &[bitflags::Flag<state::last_update::PriceStatusFlags>];
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let mut _26: (usize, bool);
    let _27: ();
    let mut _29: &state::last_update::PriceStatusFlags;
    let _30: &state::last_update::PriceStatusFlags;
    let mut _31: &bitflags::Flag<state::last_update::PriceStatusFlags>;
    let _32: &[bitflags::Flag<state::last_update::PriceStatusFlags>];
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: u8;
    let mut _37: u8;
    let mut _38: (usize, bool);
    let _39: ();
    let mut _41: &state::last_update::PriceStatusFlags;
    let _42: &state::last_update::PriceStatusFlags;
    let mut _43: &bitflags::Flag<state::last_update::PriceStatusFlags>;
    let _44: &[bitflags::Flag<state::last_update::PriceStatusFlags>];
    let _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: u8;
    let mut _49: u8;
    let mut _50: (usize, bool);
    let _51: ();
    let mut _53: &state::last_update::PriceStatusFlags;
    let _54: &state::last_update::PriceStatusFlags;
    let mut _55: &bitflags::Flag<state::last_update::PriceStatusFlags>;
    let _56: &[bitflags::Flag<state::last_update::PriceStatusFlags>];
    let _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: u8;
    let mut _61: u8;
    let mut _62: (usize, bool);
    let _63: ();
    let mut _65: &state::last_update::PriceStatusFlags;
    let _66: &state::last_update::PriceStatusFlags;
    let mut _67: &bitflags::Flag<state::last_update::PriceStatusFlags>;
    let _68: &[bitflags::Flag<state::last_update::PriceStatusFlags>];
    let _69: usize;
    let mut _70: usize;
    let mut _71: bool;
    let mut _72: u8;
    let mut _73: u8;
    let mut _74: (usize, bool);
    let mut _75: u8;
    scope 1 {
        debug truncated => _1;
        let mut _2: usize;
        scope 2 {
            debug i => _2;
            let _4: u8;
            let _16: u8;
            let _28: u8;
            let _40: u8;
            let _52: u8;
            let _64: u8;
            scope 3 {
                debug flag => _4;
            }
            scope 4 {
                debug flag => _16;
            }
            scope 5 {
                debug flag => _28;
            }
            scope 6 {
                debug flag => _40;
            }
            scope 7 {
                debug flag => _52;
            }
            scope 8 {
                debug flag => _64;
            }
            scope 9 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const _;
        StorageLive(_9);
        _9 = _2;
        _10 = Len((*_8));
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb1, unwind continue];
    }

    bb1: {
        _7 = &(*_8)[_9];
        _6 = Flag::<last_update::PriceStatusFlags>::value(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &(*_6);
        StorageDead(_7);
        _4 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        _13 = _4;
        _1 = BitOr(move _12, move _13);
        StorageDead(_13);
        StorageDead(_12);
        _14 = CheckedAdd(_2, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb4, unwind continue];
    }

    bb4: {
        _2 = move (_14.0: usize);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = const _;
        StorageLive(_21);
        _21 = _2;
        _22 = Len((*_20));
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> [success: bb5, unwind continue];
    }

    bb5: {
        _19 = &(*_20)[_21];
        _18 = Flag::<last_update::PriceStatusFlags>::value(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_24);
        _24 = _1;
        StorageLive(_25);
        _25 = _16;
        _1 = BitOr(move _24, move _25);
        StorageDead(_25);
        StorageDead(_24);
        _26 = CheckedAdd(_2, const 1_usize);
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb8, unwind continue];
    }

    bb8: {
        _2 = move (_26.0: usize);
        _15 = const ();
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = const _;
        StorageLive(_33);
        _33 = _2;
        _34 = Len((*_32));
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb9, unwind continue];
    }

    bb9: {
        _31 = &(*_32)[_33];
        _30 = Flag::<last_update::PriceStatusFlags>::value(move _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_36);
        _36 = _1;
        StorageLive(_37);
        _37 = _28;
        _1 = BitOr(move _36, move _37);
        StorageDead(_37);
        StorageDead(_36);
        _38 = CheckedAdd(_2, const 1_usize);
        assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb12, unwind continue];
    }

    bb12: {
        _2 = move (_38.0: usize);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const _;
        StorageLive(_45);
        _45 = _2;
        _46 = Len((*_44));
        _47 = Lt(_45, _46);
        assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb13, unwind continue];
    }

    bb13: {
        _43 = &(*_44)[_45];
        _42 = Flag::<last_update::PriceStatusFlags>::value(move _43) -> [return: bb14, unwind continue];
    }

    bb14: {
        _41 = &(*_42);
        StorageDead(_43);
        _40 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _41) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_48);
        _48 = _1;
        StorageLive(_49);
        _49 = _40;
        _1 = BitOr(move _48, move _49);
        StorageDead(_49);
        StorageDead(_48);
        _50 = CheckedAdd(_2, const 1_usize);
        assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb16, unwind continue];
    }

    bb16: {
        _2 = move (_50.0: usize);
        _39 = const ();
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = const _;
        StorageLive(_57);
        _57 = _2;
        _58 = Len((*_56));
        _59 = Lt(_57, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb17, unwind continue];
    }

    bb17: {
        _55 = &(*_56)[_57];
        _54 = Flag::<last_update::PriceStatusFlags>::value(move _55) -> [return: bb18, unwind continue];
    }

    bb18: {
        _53 = &(*_54);
        StorageDead(_55);
        _52 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _53) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        StorageLive(_60);
        _60 = _1;
        StorageLive(_61);
        _61 = _52;
        _1 = BitOr(move _60, move _61);
        StorageDead(_61);
        StorageDead(_60);
        _62 = CheckedAdd(_2, const 1_usize);
        assert(!move (_62.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb20, unwind continue];
    }

    bb20: {
        _2 = move (_62.0: usize);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = const _;
        StorageLive(_69);
        _69 = _2;
        _70 = Len((*_68));
        _71 = Lt(_69, _70);
        assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb21, unwind continue];
    }

    bb21: {
        _67 = &(*_68)[_69];
        _66 = Flag::<last_update::PriceStatusFlags>::value(move _67) -> [return: bb22, unwind continue];
    }

    bb22: {
        _65 = &(*_66);
        StorageDead(_67);
        _64 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _65) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_65);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_72);
        _72 = _1;
        StorageLive(_73);
        _73 = _64;
        _1 = BitOr(move _72, move _73);
        StorageDead(_73);
        StorageDead(_72);
        _74 = CheckedAdd(_2, const 1_usize);
        assert(!move (_74.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb24, unwind continue];
    }

    bb24: {
        _2 = move (_74.0: usize);
        _63 = const ();
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_75);
        _75 = _1;
        _0 = last_update::_::<impl last_update::PriceStatusFlags>::from_bits_retain(move _75) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_75);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
