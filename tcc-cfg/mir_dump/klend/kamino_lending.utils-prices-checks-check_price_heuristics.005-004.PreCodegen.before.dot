digraph Mir_0_2536 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn check_price_heuristics(_1: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, _2: &amp;ReErased state::token_info::PriceHeuristic) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u64;<br align="left"/>let _6: utils::prices::types::Price&lt;u64&gt;;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: std::result::Result&lt;u32, std::num::TryFromIntError&gt;;<br align="left"/>let mut _10: u64;<br align="left"/>let _11: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _12: utils::prices::types::Price&lt;u64&gt;;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _15: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: anchor_lang::error::Error;<br align="left"/>let mut _18: anchor_lang::error::AnchorError;<br align="left"/>let mut _19: std::string::String;<br align="left"/>let mut _20: &amp;ReErased LendingError;<br align="left"/>let _21: LendingError;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: LendingError;<br align="left"/>let mut _24: std::string::String;<br align="left"/>let mut _25: &amp;ReErased LendingError;<br align="left"/>let _26: LendingError;<br align="left"/>let mut _27: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _28: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _29: anchor_lang::error::Source;<br align="left"/>let mut _30: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let _31: ();<br align="left"/>let mut _32: bool;<br align="left"/>let mut _33: u64;<br align="left"/>let _34: utils::prices::types::Price&lt;u64&gt;;<br align="left"/>let mut _35: u64;<br align="left"/>let mut _36: u32;<br align="left"/>let mut _37: std::result::Result&lt;u32, std::num::TryFromIntError&gt;;<br align="left"/>let mut _38: u64;<br align="left"/>let _39: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _40: utils::prices::types::Price&lt;u64&gt;;<br align="left"/>let mut _41: bool;<br align="left"/>let mut _42: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _43: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _44: !;<br align="left"/>let mut _45: anchor_lang::error::Error;<br align="left"/>let mut _46: anchor_lang::error::AnchorError;<br align="left"/>let mut _47: std::string::String;<br align="left"/>let mut _48: &amp;ReErased LendingError;<br align="left"/>let _49: LendingError;<br align="left"/>let mut _50: u32;<br align="left"/>let mut _51: LendingError;<br align="left"/>let mut _52: std::string::String;<br align="left"/>let mut _53: &amp;ReErased LendingError;<br align="left"/>let _54: LendingError;<br align="left"/>let mut _55: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _56: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _57: anchor_lang::error::Source;<br align="left"/>let mut _58: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _59: ();<br align="left"/>let mut _60: &amp;ReErased LendingError;<br align="left"/>let mut _61: &amp;ReErased LendingError;<br align="left"/>let mut _62: &amp;ReErased LendingError;<br align="left"/>let mut _63: &amp;ReErased LendingError;<br align="left"/>debug token_price =&gt; _1;<br align="left"/>debug heuristic =&gt; _2;<br align="left"/>debug lower_heuristic =&gt; _6;<br align="left"/>debug lower_heuristic =&gt; _11;<br align="left"/>debug upper_heuristic =&gt; _34;<br align="left"/>debug upper_heuristic =&gt; _39;<br align="left"/>>;
    bb0__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = ((*_2).0: u64)<br/>_4 = Gt(move _5, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = ((*_2).0: u64)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = ((*_2).2: u64)<br/></td></tr><tr><td align="left">_9 = &lt;u64 as TryInto&lt;u32&gt;&gt;::try_into(move _10)</td></tr></table>>];
    bb2__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = std::result::Result::&lt;u32, TryFromIntError&gt;::unwrap(move _9)</td></tr></table>>];
    bb3__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_6 = prices::types::Price::&lt;u64&gt; { value: move _7, exp: move _8 }<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _6<br/></td></tr><tr><td align="left">_11 = price_to_fraction::&lt;u64&gt;(move _12)</td></tr></table>>];
    bb4__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;_1<br/>StorageLive(_15)<br/>_15 = &amp;_11<br/></td></tr><tr><td align="left">_13 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as PartialOrd&gt;::lt(move _14, move _15)</td></tr></table>>];
    bb5__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb6__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_61 = const _<br/>_20 = &amp;(*_61)<br/></td></tr><tr><td align="left">_19 = LendingError::name(move _20)</td></tr></table>>];
    bb7__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = LendingError::PriceIsLowerThanHeuristic<br/></td></tr><tr><td align="left">_22 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _23)</td></tr></table>>];
    bb8__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_60 = const _<br/>_25 = &amp;(*_60)<br/></td></tr><tr><td align="left">_24 = &lt;LendingError as ToString&gt;::to_string(move _25)</td></tr></table>>];
    bb9__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\utils\\prices\\checks.rs&quot;, line: const 153_u32 }<br/>_28 = anchor_lang::error::ErrorOrigin::Source(move _29)<br/>StorageDead(_29)<br/>_27 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _28)<br/>StorageDead(_28)<br/>StorageLive(_30)<br/>_30 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 }<br/>StorageDead(_30)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _18)</td></tr></table>>];
    bb10__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _17)<br/>StorageDead(_17)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>_3 = const ()<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = ((*_2).1: u64)<br/>_32 = Gt(move _33, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb14__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = ((*_2).1: u64)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = ((*_2).2: u64)<br/></td></tr><tr><td align="left">_37 = &lt;u64 as TryInto&lt;u32&gt;&gt;::try_into(move _38)</td></tr></table>>];
    bb15__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/></td></tr><tr><td align="left">_36 = std::result::Result::&lt;u32, TryFromIntError&gt;::unwrap(move _37)</td></tr></table>>];
    bb16__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_34 = prices::types::Price::&lt;u64&gt; { value: move _35, exp: move _36 }<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = _34<br/></td></tr><tr><td align="left">_39 = price_to_fraction::&lt;u64&gt;(move _40)</td></tr></table>>];
    bb17__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;_39<br/>StorageLive(_43)<br/>_43 = &amp;_1<br/></td></tr><tr><td align="left">_41 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as PartialOrd&gt;::lt(move _42, move _43)</td></tr></table>>];
    bb18__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb19__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_63 = const _<br/>_48 = &amp;(*_63)<br/></td></tr><tr><td align="left">_47 = LendingError::name(move _48)</td></tr></table>>];
    bb20__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = LendingError::PriceIsBiggerThanHeuristic<br/></td></tr><tr><td align="left">_50 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _51)</td></tr></table>>];
    bb21__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_62 = const _<br/>_53 = &amp;(*_62)<br/></td></tr><tr><td align="left">_52 = &lt;LendingError as ToString&gt;::to_string(move _53)</td></tr></table>>];
    bb22__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\utils\\prices\\checks.rs&quot;, line: const 166_u32 }<br/>_56 = anchor_lang::error::ErrorOrigin::Source(move _57)<br/>StorageDead(_57)<br/>_55 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _56)<br/>StorageDead(_56)<br/>StorageLive(_58)<br/>_58 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_46 = anchor_lang::error::AnchorError { error_name: move _47, error_code_number: move _50, error_msg: move _52, error_origin: move _55, compared_values: move _58 }<br/>StorageDead(_58)<br/>StorageDead(_55)<br/>StorageDead(_52)<br/>StorageDead(_50)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">_45 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _46)</td></tr></table>>];
    bb23__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _45)<br/>StorageDead(_45)<br/>StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/>_31 = const ()<br/>StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_31 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/>StorageLive(_59)<br/>_59 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _59)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb28__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left">drop(_47)</td></tr></table>>];
    bb29__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">29 (cleanup)</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb30__0_2536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_2536 -> bb12__0_2536 [label="0"];
    bb0__0_2536 -> bb1__0_2536 [label="otherwise"];
    bb1__0_2536 -> bb2__0_2536 [label="return"];
    bb2__0_2536 -> bb3__0_2536 [label="return"];
    bb3__0_2536 -> bb4__0_2536 [label="return"];
    bb4__0_2536 -> bb5__0_2536 [label="return"];
    bb5__0_2536 -> bb11__0_2536 [label="0"];
    bb5__0_2536 -> bb6__0_2536 [label="otherwise"];
    bb6__0_2536 -> bb7__0_2536 [label="return"];
    bb7__0_2536 -> bb8__0_2536 [label="return"];
    bb7__0_2536 -> bb29__0_2536 [label="unwind"];
    bb8__0_2536 -> bb9__0_2536 [label="return"];
    bb8__0_2536 -> bb29__0_2536 [label="unwind"];
    bb9__0_2536 -> bb10__0_2536 [label="return"];
    bb9__0_2536 -> bb30__0_2536 [label="unwind"];
    bb10__0_2536 -> bb27__0_2536 [label=""];
    bb11__0_2536 -> bb13__0_2536 [label=""];
    bb12__0_2536 -> bb13__0_2536 [label=""];
    bb13__0_2536 -> bb25__0_2536 [label="0"];
    bb13__0_2536 -> bb14__0_2536 [label="otherwise"];
    bb14__0_2536 -> bb15__0_2536 [label="return"];
    bb15__0_2536 -> bb16__0_2536 [label="return"];
    bb16__0_2536 -> bb17__0_2536 [label="return"];
    bb17__0_2536 -> bb18__0_2536 [label="return"];
    bb18__0_2536 -> bb24__0_2536 [label="0"];
    bb18__0_2536 -> bb19__0_2536 [label="otherwise"];
    bb19__0_2536 -> bb20__0_2536 [label="return"];
    bb20__0_2536 -> bb21__0_2536 [label="return"];
    bb20__0_2536 -> bb28__0_2536 [label="unwind"];
    bb21__0_2536 -> bb22__0_2536 [label="return"];
    bb21__0_2536 -> bb28__0_2536 [label="unwind"];
    bb22__0_2536 -> bb23__0_2536 [label="return"];
    bb22__0_2536 -> bb30__0_2536 [label="unwind"];
    bb23__0_2536 -> bb27__0_2536 [label=""];
    bb24__0_2536 -> bb26__0_2536 [label=""];
    bb25__0_2536 -> bb26__0_2536 [label=""];
    bb26__0_2536 -> bb27__0_2536 [label=""];
    bb28__0_2536 -> bb30__0_2536 [label="return"];
    bb29__0_2536 -> bb30__0_2536 [label="return"];
}
