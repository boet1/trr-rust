// MIR for `update_elevation_group_debt_trackers_on_new_deposit` after PreCodegen

fn update_elevation_group_debt_trackers_on_new_deposit(_1: std::option::Option<u64>, _2: &mut obligation::ObligationCollateral, _3: usize, _4: std::option::Option<&state::lending_market::ElevationGroup>, _5: &anchor_lang::prelude::Pubkey, _6: &mut reserve::Reserve, _7: state::types::MaxReservesAsCollateralCheck) -> std::result::Result<(), anchor_lang::error::Error> {
    debug total_borrowed => _1;
    debug obligation_collateral => _2;
    debug pre_deposit_count => _3;
    debug elevation_group => _4;
    debug deposit_reserve_pk => _5;
    debug deposit_reserve => _6;
    debug max_reserves_as_collateral_check => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _8: ();
    let mut _9: isize;
    let _11: ();
    let mut _12: bool;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let mut _15: !;
    let mut _16: anchor_lang::error::Error;
    let mut _17: anchor_lang::error::Error;
    let mut _18: anchor_lang::error::AnchorError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: u32;
    let mut _23: LendingError;
    let mut _24: std::string::String;
    let mut _25: &LendingError;
    let _26: LendingError;
    let mut _27: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _28: anchor_lang::error::ErrorOrigin;
    let mut _29: anchor_lang::error::Source;
    let mut _30: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _31: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: anchor_lang::prelude::Pubkey;
    let _34: ();
    let mut _35: bool;
    let mut _36: &state::types::MaxReservesAsCollateralCheck;
    let mut _37: &state::types::MaxReservesAsCollateralCheck;
    let _38: state::types::MaxReservesAsCollateralCheck;
    let _39: ();
    let mut _40: bool;
    let mut _41: usize;
    let mut _42: u8;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: (usize, bool);
    let mut _46: !;
    let mut _47: anchor_lang::error::Error;
    let mut _48: anchor_lang::error::Error;
    let mut _49: anchor_lang::error::AnchorError;
    let mut _50: std::string::String;
    let mut _51: &LendingError;
    let _52: LendingError;
    let mut _53: u32;
    let mut _54: LendingError;
    let mut _55: std::string::String;
    let mut _56: &LendingError;
    let _57: LendingError;
    let mut _58: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _59: anchor_lang::error::ErrorOrigin;
    let mut _60: anchor_lang::error::Source;
    let mut _61: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _62: (usize, usize);
    let mut _63: usize;
    let mut _64: u8;
    let mut _65: usize;
    let mut _66: usize;
    let mut _67: (usize, bool);
    let mut _69: &state::lending_market::ElevationGroup;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _72: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _73: std::option::Option<u64>;
    let mut _74: {closure@programs\klend\src\lending_market\lending_operations.rs:2714:29: 2714:31};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _80: u64;
    let _81: usize;
    let mut _82: usize;
    let mut _83: bool;
    let mut _84: (u64, bool);
    let mut _85: u64;
    let mut _86: ();
    let mut _92: bool;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    scope 1 {
        debug elevation_group => _10;
        let _10: &state::lending_market::ElevationGroup;
        let _68: usize;
        let mut _87: &LendingError;
        let mut _88: &LendingError;
        let mut _89: &LendingError;
        let mut _90: &LendingError;
        let mut _91: &state::types::MaxReservesAsCollateralCheck;
        scope 2 {
            debug elevation_group_index => _68;
            let _70: u64;
            let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _79: u64;
            scope 3 {
                debug total_borrowed => _70;
            }
            scope 4 {
                debug residual => _76;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _79;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _92 = const false;
        StorageLive(_8);
        _9 = discriminant(_4);
        switchInt(move _9) -> [1: bb1, otherwise: bb34];
    }

    bb1: {
        StorageLive(_10);
        _10 = ((_4 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_10).7: anchor_lang::prelude::Pubkey);
        StorageLive(_14);
        _14 = &(*_5);
        _12 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _13, move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _12) -> [0: bb9, otherwise: bb3];
    }

    bb3: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _88 = const _;
        _20 = &(*_88);
        _19 = LendingError::name(move _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = LendingError::ElevationGroupDebtReserveAsCollateral;
        _22 = <LendingError as Into<u32>>::into(move _23) -> [return: bb5, unwind: bb39];
    }

    bb5: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _87 = const _;
        _25 = &(*_87);
        _24 = <LendingError as ToString>::to_string(move _25) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2697_u32 };
        _28 = anchor_lang::error::ErrorOrigin::Source(move _29);
        StorageDead(_29);
        _27 = std::option::Option::<ErrorOrigin>::Some(move _28);
        StorageDead(_28);
        StorageLive(_30);
        _30 = std::option::Option::<ComparedValues>::None;
        _18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 };
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        _17 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _18) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_10).7: anchor_lang::prelude::Pubkey);
        StorageLive(_33);
        _33 = (*_5);
        _31 = (move _32, move _33);
        StorageDead(_33);
        StorageDead(_32);
        _16 = anchor_lang::error::Error::with_pubkeys(move _17, move _31) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        StorageDead(_31);
        StorageDead(_17);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _16);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb36;
    }

    bb9: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_7;
        StorageLive(_37);
        _91 = const _;
        _37 = &(*_91);
        _35 = <state::types::MaxReservesAsCollateralCheck as PartialEq>::eq(move _36, move _37) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _35) -> [0: bb23, otherwise: bb11];
    }

    bb11: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_10).5: u8);
        _41 = <usize as From<u8>>::from(move _42) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _3;
        _45 = CheckedAdd(_44, const 1_usize);
        assert(!move (_45.1: bool), "attempt to compute `{} + {}`, which would overflow", move _44, const 1_usize) -> [success: bb13, unwind continue];
    }

    bb13: {
        _43 = move (_45.0: usize);
        StorageDead(_44);
        _40 = Lt(move _41, move _43);
        switchInt(move _40) -> [0: bb22, otherwise: bb14];
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _90 = const _;
        _51 = &(*_90);
        _50 = LendingError::name(move _51) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        _54 = LendingError::ObligationCollateralExceedsElevationGroupLimit;
        _53 = <LendingError as Into<u32>>::into(move _54) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        _89 = const _;
        _56 = &(*_89);
        _55 = <LendingError as ToString>::to_string(move _56) -> [return: bb17, unwind: bb38];
    }

    bb17: {
        StorageDead(_56);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2704_u32 };
        _59 = anchor_lang::error::ErrorOrigin::Source(move _60);
        StorageDead(_60);
        _58 = std::option::Option::<ErrorOrigin>::Some(move _59);
        StorageDead(_59);
        StorageLive(_61);
        _61 = std::option::Option::<ComparedValues>::None;
        _49 = anchor_lang::error::AnchorError { error_name: move _50, error_code_number: move _53, error_msg: move _55, error_origin: move _58, compared_values: move _61 };
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_50);
        _48 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _49) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        _92 = const true;
        StorageDead(_49);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = ((*_10).5: u8);
        _63 = <usize as From<u8>>::from(move _64) -> [return: bb19, unwind: bb43];
    }

    bb19: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _3;
        _67 = CheckedAdd(_66, const 1_usize);
        assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", move _66, const 1_usize) -> [success: bb20, unwind: bb43];
    }

    bb20: {
        _65 = move (_67.0: usize);
        StorageDead(_66);
        _62 = (move _63, move _65);
        StorageDead(_65);
        StorageDead(_63);
        _92 = const false;
        _47 = anchor_lang::error::Error::with_values::<usize, usize>(move _48, move _62) -> [return: bb21, unwind: bb43];
    }

    bb21: {
        StorageDead(_62);
        _92 = const false;
        StorageDead(_48);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _47);
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb36;
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_41);
        _39 = const ();
        StorageDead(_40);
        StorageDead(_39);
        _34 = const ();
        goto -> bb24;
    }

    bb23: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = const ();
        goto -> bb24;
    }

    bb24: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_10);
        _68 = state::lending_market::ElevationGroup::get_index(move _69) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _1;
        StorageLive(_74);
        _74 = {closure@programs\klend\src\lending_market\lending_operations.rs:2714:29: 2714:31};
        _72 = std::option::Option::<u64>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:2714:29: 2714:31}>(move _73, move _74) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        _71 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _72) -> [return: bb27, unwind: bb40];
    }

    bb27: {
        StorageDead(_72);
        _75 = discriminant(_71);
        switchInt(move _75) -> [0: bb28, 1: bb30, otherwise: bb29];
    }

    bb28: {
        StorageLive(_79);
        _79 = ((_71 as Continue).0: u64);
        _70 = _79;
        StorageDead(_79);
        _93 = discriminant(_71);
        StorageDead(_71);
        StorageLive(_80);
        _80 = _70;
        StorageLive(_81);
        _81 = _68;
        _82 = Len(((*_6).12: [u64; 32]));
        _83 = Lt(_81, _82);
        assert(move _83, "index out of bounds: the length is {} but the index is {}", move _82, _81) -> [success: bb32, unwind continue];
    }

    bb29: {
        unreachable;
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _95 = discriminant(_71);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb36;
    }

    bb32: {
        _84 = CheckedAdd(((*_6).12: [u64; 32])[_81], _80);
        assert(!move (_84.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_6).12: [u64; 32])[_81], move _80) -> [success: bb33, unwind continue];
    }

    bb33: {
        ((*_6).12: [u64; 32])[_81] = move (_84.0: u64);
        StorageDead(_80);
        StorageDead(_81);
        StorageLive(_85);
        _85 = _70;
        ((*_2).3: u64) = move _85;
        StorageDead(_85);
        _8 = const ();
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_10);
        goto -> bb35;
    }

    bb34: {
        _8 = const ();
        goto -> bb35;
    }

    bb35: {
        StorageDead(_8);
        StorageLive(_86);
        _86 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _86);
        StorageDead(_86);
        goto -> bb37;
    }

    bb36: {
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb37;
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_50) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_19) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }

    bb41 (cleanup): {
        _97 = discriminant(_71);
        goto -> bb40;
    }

    bb42 (cleanup): {
        drop(_48) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_92) -> [0: bb40, otherwise: bb42];
    }
}
