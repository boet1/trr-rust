// MIR for `check_twap_in_tolerance` after PreCodegen

fn check_twap_in_tolerance(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _3: &token_info::TokenInfo) -> std::result::Result<(), anchor_lang::error::Error> {
    debug price => _1;
    debug twap => _2;
    debug token_info => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: u64;
    let _5: ();
    let mut _6: bool;
    let mut _7: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: u64;
    let mut _10: !;
    let mut _12: &state::token_info::TokenInfo;
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: &std::string::String;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 4];
    let _23: &[&str; 4];
    let _24: [&str; 4];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 4];
    let _27: &[core::fmt::rt::Argument<'_>; 4];
    let _28: [core::fmt::rt::Argument<'_>; 4];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &&str;
    let _31: &&str;
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _34: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _37: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _38: core::fmt::rt::Argument<'_>;
    let mut _39: &u64;
    let _40: &u64;
    let mut _41: anchor_lang::error::Error;
    let mut _42: LendingError;
    let mut _43: ();
    scope 1 {
        debug acceptable_twap_tolerance_bps => _4;
        let _11: &str;
        scope 2 {
            debug token_span => _11;
            let _19: std::string::String;
            let mut _44: &[&str; 4];
            scope 3 {
                debug res => _19;
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = ((*_3).2: u64);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = _4;
        _6 = is_within_tolerance(move _7, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_43);
        _43 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _43);
        StorageDead(_43);
        StorageDead(_4);
        goto -> bb15;
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_3);
        _11 = token_info::TokenInfo::symbol(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _44 = const _;
        _23 = &(*_44);
        _22 = &(*_23);
        _21 = move _22 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_11;
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _30) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_1;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _33) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_2;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _36) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_4;
        _39 = &(*_40);
        _38 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _39) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_39);
        _28 = [move _29, move _32, move _35, move _38];
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_26);
        _20 = Arguments::<'_>::new_v1(move _21, move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_21);
        _19 = format(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        _18 = move _19;
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = <std::string::String as Deref>::deref(move _16) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        StorageDead(_14);
        drop(_18) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_41);
        StorageLive(_42);
        _42 = LendingError::PriceTooDivergentFromTwap;
        _41 = <LendingError as Into<anchor_lang::error::Error>>::into(move _42) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_42);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _41);
        StorageDead(_41);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_18) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}
