// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1559:3: 1559:41>::not` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1559:3: 1559:41>::not(_1: uint_types::U256) -> uint_types::U256 {
    debug self => _1;
    let mut _0: utils::fraction::uint_types::U256;
    let _2: &[u64; 4];
    let _4: ();
    let mut _5: std::ops::Range<usize>;
    let mut _6: std::ops::Range<usize>;
    let mut _8: ();
    let _9: ();
    let mut _10: std::option::Option<usize>;
    let mut _11: &mut std::ops::Range<usize>;
    let mut _12: &mut std::ops::Range<usize>;
    let mut _13: isize;
    let mut _14: !;
    let mut _16: u64;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: [u64; 4];
    scope 1 {
        debug arr => _2;
        let mut _3: [u64; 4];
        scope 2 {
            debug ret => _3;
            let mut _7: std::ops::Range<usize>;
            scope 3 {
                debug iter => _7;
                let _15: usize;
                scope 4 {
                    debug i => _15;
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = &(_1.0: [u64; 4]);
        StorageLive(_3);
        _3 = [const 0_u64; 4];
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = std::ops::Range::<usize> { start: const 0_usize, end: const 4_usize };
        _5 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = move _5;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _7;
        _11 = &mut (*_12);
        _10 = <std::ops::Range<usize> as Iterator>::next(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_10 as Some).0: usize);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _15;
        _18 = Len((*_2));
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _4 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_23);
        _23 = _3;
        _0 = uint_types::U256(move _23);
        StorageDead(_23);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }

    bb7: {
        _16 = (*_2)[_17];
        StorageLive(_20);
        _20 = _15;
        _21 = Len(_3);
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb8, unwind continue];
    }

    bb8: {
        _3[_20] = Not(move _16);
        StorageDead(_16);
        StorageDead(_20);
        StorageDead(_17);
        _9 = const ();
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _8 = const ();
        goto -> bb2;
    }
}
