// MIR for `get_price_usd` after PreCodegen

fn get_price_usd(_1: &scope_types::OraclePrices, _2: [u16; 4]) -> std::result::Result<TimestampedPrice, anchor_lang::error::Error> {
    debug scope_prices => _1;
    debug tokens_chain => _2;
    let mut _0: std::result::Result<utils::prices::types::TimestampedPrice, anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &[u16; 4];
    let mut _6: &[u16; 4];
    let _7: [u16; 4];
    let mut _8: !;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: anchor_lang::error::Error;
    let mut _13: anchor_lang::error::AnchorError;
    let mut _14: std::string::String;
    let mut _15: &LendingError;
    let _16: LendingError;
    let mut _17: u32;
    let mut _18: LendingError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _23: anchor_lang::error::ErrorOrigin;
    let mut _24: anchor_lang::error::Source;
    let mut _25: std::option::Option<anchor_lang::error::ComparedValues>;
    let _26: [std::option::Option<(utils::prices::types::Price<u64>, u64)>; 4];
    let mut _27: [u16; 4];
    let mut _28: {closure@programs\klend\src\utils\prices\scope.rs:87:44: 87:54};
    let mut _29: &scope_types::OraclePrices;
    let mut _31: std::iter::TakeWhile<std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>, {closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58}>;
    let mut _32: std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>;
    let mut _33: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>];
    let mut _34: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>; 4];
    let mut _35: {closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58};
    let _36: ();
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: !;
    let _40: ();
    let mut _41: &str;
    let _42: &str;
    let mut _43: anchor_lang::error::Error;
    let mut _44: anchor_lang::error::AnchorError;
    let mut _45: std::string::String;
    let mut _46: &LendingError;
    let _47: LendingError;
    let mut _48: u32;
    let mut _49: LendingError;
    let mut _50: std::string::String;
    let mut _51: &LendingError;
    let _52: LendingError;
    let mut _53: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _54: anchor_lang::error::ErrorOrigin;
    let mut _55: anchor_lang::error::Source;
    let mut _56: std::option::Option<anchor_lang::error::ComparedValues>;
    let _57: ();
    let mut _58: bool;
    let mut _59: usize;
    let mut _60: !;
    let mut _62: std::option::Option<(utils::prices::types::Price<u64>, u64)>;
    let _63: usize;
    let mut _64: usize;
    let mut _65: bool;
    let mut _67: {closure@programs\klend\src\utils\prices\scope.rs:99:35: 99:42};
    let mut _68: utils::prices::types::TimestampedPrice;
    let mut _69: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>;
    let mut _70: std::boxed::Box<{closure@programs\klend\src\utils\prices\scope.rs:99:35: 99:42}>;
    let mut _71: u64;
    let mut _73: std::option::Option<u64>;
    let mut _74: std::iter::Map<std::iter::Flatten<std::iter::Take<std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>>>, {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17}>;
    let mut _75: std::iter::Flatten<std::iter::Take<std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>>>;
    let mut _76: std::iter::Take<std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>>;
    let mut _77: std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>;
    let mut _78: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>];
    let mut _79: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>; 4];
    let mut _80: usize;
    let mut _81: {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17};
    let mut _83: utils::fraction::uint_types::U256;
    let mut _85: {closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38};
    let mut _86: utils::prices::types::TimestampedPrice;
    let mut _87: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>;
    let mut _88: std::boxed::Box<{closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38}>;
    let mut _89: u64;
    let mut _90: &LendingError;
    let mut _91: &LendingError;
    let mut _94: &[u16; 4];
    scope 1 {
        debug price_chain_raw => _26;
        let _30: usize;
        scope 2 {
            debug chain_len => _30;
            let _61: (utils::prices::types::Price<u64>, u64);
            let _72: u64;
            let mut _92: &LendingError;
            let mut _93: &LendingError;
            scope 3 {
                debug price => _61;
                let _66: std::boxed::Box<{closure@programs\klend\src\utils\prices\scope.rs:99:35: 99:42}>;
                scope 4 {
                    debug price_load => _66;
                }
            }
            scope 5 {
                debug oldest_timestamp => _72;
                let _82: utils::prices::types::Price<utils::fraction::uint_types::U256>;
                scope 6 {
                    debug init_price => _82;
                    let _84: std::boxed::Box<{closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38}>;
                    scope 7 {
                        debug price_load => _84;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_2;
        StorageLive(_6);
        _94 = const _;
        _6 = &(*_94);
        _4 = <[u16; 4] as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "Scope chain is not initialized properly";
        _10 = &(*_11);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _91 = const _;
        _15 = &(*_91);
        _14 = LendingError::name(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = LendingError::PriceNotValid;
        _17 = <LendingError as Into<u32>>::into(move _18) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _90 = const _;
        _20 = &(*_90);
        _19 = <LendingError as ToString>::to_string(move _20) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\scope.rs", line: const 84_u32 };
        _23 = anchor_lang::error::ErrorOrigin::Source(move _24);
        StorageDead(_24);
        _22 = std::option::Option::<ErrorOrigin>::Some(move _23);
        StorageDead(_23);
        StorageLive(_25);
        _25 = std::option::Option::<ComparedValues>::None;
        _13 = anchor_lang::error::AnchorError { error_name: move _14, error_code_number: move _17, error_msg: move _19, error_origin: move _22, compared_values: move _25 };
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        _12 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _13) -> [return: bb7, unwind: bb37];
    }

    bb7: {
        StorageDead(_13);
        _0 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::Err(move _12);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb34;
    }

    bb8: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _2;
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_1);
        _28 = {closure@programs\klend\src\utils\prices\scope.rs:87:44: 87:54} { scope_prices: move _29 };
        StorageDead(_29);
        _26 = array::<impl [u16; 4]>::map::<{closure@programs\klend\src\utils\prices\scope.rs:87:44: 87:54}, std::option::Option<(prices::types::Price<u64>, u64)>>(move _27, move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_26;
        _33 = move _34 as &[std::option::Option<(utils::prices::types::Price<u64>, u64)>] (PointerCoercion(Unsize));
        StorageDead(_34);
        _32 = core::slice::<impl [std::option::Option<(prices::types::Price<u64>, u64)>]>::iter(move _33) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_33);
        StorageLive(_35);
        _35 = {closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58};
        _31 = <std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>> as Iterator>::take_while::<{closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58}>(move _32, move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_32);
        _30 = <TakeWhile<std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>>, {closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58}> as Iterator>::count(move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_31);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _30;
        _37 = Eq(move _38, const 0_usize);
        switchInt(move _37) -> [0: bb19, otherwise: bb13];
    }

    bb13: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const "Scope chain is empty";
        _41 = &(*_42);
        _40 = solana_program::log::sol_log(move _41) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_41);
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _93 = const _;
        _46 = &(*_93);
        _45 = LendingError::name(move _46) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        _49 = LendingError::NoPriceFound;
        _48 = <LendingError as Into<u32>>::into(move _49) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _92 = const _;
        _51 = &(*_92);
        _50 = <LendingError as ToString>::to_string(move _51) -> [return: bb17, unwind: bb35];
    }

    bb17: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\scope.rs", line: const 93_u32 };
        _54 = anchor_lang::error::ErrorOrigin::Source(move _55);
        StorageDead(_55);
        _53 = std::option::Option::<ErrorOrigin>::Some(move _54);
        StorageDead(_54);
        StorageLive(_56);
        _56 = std::option::Option::<ComparedValues>::None;
        _44 = anchor_lang::error::AnchorError { error_name: move _45, error_code_number: move _48, error_msg: move _50, error_origin: move _53, compared_values: move _56 };
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_45);
        _43 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _44) -> [return: bb18, unwind: bb37];
    }

    bb18: {
        StorageDead(_44);
        _0 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::Err(move _43);
        StorageDead(_43);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb33;
    }

    bb19: {
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _30;
        _58 = Eq(move _59, const 1_usize);
        switchInt(move _58) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = const 0_usize;
        _64 = Len(_26);
        _65 = Lt(_63, _64);
        assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _63) -> [success: bb22, unwind continue];
    }

    bb21: {
        StorageDead(_59);
        _57 = const ();
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_26;
        _78 = move _79 as &[std::option::Option<(utils::prices::types::Price<u64>, u64)>] (PointerCoercion(Unsize));
        StorageDead(_79);
        _77 = core::slice::<impl [std::option::Option<(prices::types::Price<u64>, u64)>]>::iter(move _78) -> [return: bb25, unwind continue];
    }

    bb22: {
        _62 = _26[_63];
        _61 = std::option::Option::<(prices::types::Price<u64>, u64)>::unwrap(move _62) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_62);
        StorageDead(_63);
        StorageLive(_66);
        StorageLive(_67);
        _67 = {closure@programs\klend\src\utils\prices\scope.rs:99:35: 99:42} { price: (_61.0: utils::prices::types::Price<u64>) };
        _66 = Box::<{closure@programs\klend\src\utils\prices\scope.rs:99:35: 99:42}>::new(move _67) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = move _66;
        _69 = move _70 as std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>> (PointerCoercion(Unsize));
        StorageDead(_70);
        StorageLive(_71);
        _71 = (_61.1: u64);
        _68 = TimestampedPrice { price_load: move _69, timestamp: move _71 };
        StorageDead(_71);
        StorageDead(_69);
        _0 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::Ok(move _68);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb33;
    }

    bb25: {
        StorageDead(_78);
        StorageLive(_80);
        _80 = _30;
        _76 = <std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>> as Iterator>::take(move _77, move _80) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_80);
        StorageDead(_77);
        _75 = <std::iter::Take<std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>>> as Iterator>::flatten(move _76) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_76);
        StorageLive(_81);
        _81 = {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17};
        _74 = <Flatten<std::iter::Take<std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>>>> as Iterator>::map::<u64, {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17}>(move _75, move _81) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_81);
        StorageDead(_75);
        _73 = <std::iter::Map<Flatten<std::iter::Take<std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>>>>, {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17}> as Iterator>::min(move _74) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_74);
        _72 = std::option::Option::<u64>::unwrap(move _73) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_73);
        StorageLive(_82);
        StorageLive(_83);
        _83 = <uint_types::U256 as From<u64>>::from(const 1_u64) -> [return: bb31, unwind continue];
    }

    bb31: {
        _82 = prices::types::Price::<uint_types::U256> { value: move _83, exp: const 0_u32 };
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = {closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38} { price_chain_raw: _26, chain_len: _30, init_price: _82 };
        _84 = Box::<{closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38}>::new(move _85) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = move _84;
        _87 = move _88 as std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>> (PointerCoercion(Unsize));
        StorageDead(_88);
        StorageLive(_89);
        _89 = _72;
        _86 = TimestampedPrice { price_load: move _87, timestamp: move _89 };
        StorageDead(_89);
        StorageDead(_87);
        _0 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::Ok(move _86);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_72);
        StorageDead(_30);
        StorageDead(_26);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_30);
        StorageDead(_26);
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_45) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_14) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }
}
