// MIR for `cpi_set_stake_delegated` after PreCodegen

fn cpi_set_stake_delegated(_1: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, _2: &reserve::Reserve, _3: reserve::ReserveFarmKind, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts_ctx => _1;
    debug reserve => _2;
    debug mode => _3;
    debug amount => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _7: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _17: &state::reserve::Reserve;
    let mut _18: state::reserve::ReserveFarmKind;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _22: &farms::accounts::SetStakeDelegated;
    let _23: farms::accounts::SetStakeDelegated;
    let mut _24: anchor_lang::prelude::Pubkey;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let _26: anchor_lang::prelude::AccountInfo<'_>;
    let mut _27: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _28: anchor_lang::prelude::Pubkey;
    let mut _29: anchor_lang::prelude::Pubkey;
    let mut _30: std::option::Option<bool>;
    let mut _32: &farms::instruction::SetStakeDelegated;
    let _33: farms::instruction::SetStakeDelegated;
    let mut _34: u64;
    let mut _36: anchor_lang::prelude::Pubkey;
    let mut _37: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _38: std::vec::Vec<u8>;
    let _40: [&[u8]; 3];
    let mut _41: &[u8];
    let mut _42: &[u8];
    let _43: &[u8];
    let mut _44: &[u8];
    let _45: &[u8];
    let mut _46: &[u8];
    let _47: &[u8];
    let mut _48: &anchor_lang::prelude::Pubkey;
    let mut _49: &[u8];
    let mut _50: &[u8; 1];
    let _51: &[u8; 1];
    let _52: [u8; 1];
    let mut _53: u8;
    let mut _54: u64;
    let mut _55: &state::lending_market::LendingMarket;
    let mut _56: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _58: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let mut _59: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _60: &solana_program::instruction::Instruction;
    let _61: &solana_program::instruction::Instruction;
    let mut _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let _63: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _65: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _66: &[&[&[u8]]];
    let mut _67: &[&[&[u8]]; 1];
    let _68: &[&[&[u8]]; 1];
    let _69: [&[&[u8]]; 1];
    let mut _70: &[&[u8]];
    let mut _71: &[&[u8]; 3];
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    scope 1 {
        debug lending_market => _5;
        let _14: anchor_lang::prelude::Pubkey;
        scope 6 {
            debug lending_market_key => _14;
            let _16: anchor_lang::prelude::Pubkey;
            scope 7 {
                debug farm => _16;
                let _19: anchor_lang::prelude::Pubkey;
                scope 8 {
                    debug farmer => _19;
                    let _21: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
                    scope 9 {
                        debug accounts => _21;
                        let _31: std::vec::Vec<u8>;
                        scope 10 {
                            debug data => _31;
                            let _35: solana_program::instruction::Instruction;
                            scope 11 {
                                debug instruction => _35;
                                let _39: &[&[u8]; 3];
                                scope 12 {
                                    debug lending_market_authority_signer_seeds => _39;
                                    let _57: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
                                    scope 13 {
                                        debug account_infos => _57;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        _73 = const false;
        _72 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).5: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_6 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _5 = move _13;
        StorageDead(_13);
        _74 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_1).5: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _14 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _15) -> [return: bb7, unwind: bb30];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _76 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb26;
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_2);
        StorageLive(_18);
        _18 = _3;
        _16 = reserve::Reserve::get_farm(move _17, move _18) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>);
        _19 = <anchor_lang::prelude::AccountLoader<'_, UserState> as anchor_lang::Key>::key(move _20) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).1: anchor_lang::prelude::AccountInfo<'_>);
        _26 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _27) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _25 = &_26;
        StorageDead(_27);
        _24 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _25) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        StorageDead(_25);
        StorageLive(_28);
        _28 = _19;
        StorageLive(_29);
        _29 = _16;
        _23 = farms::accounts::SetStakeDelegated { delegate_authority: move _24, user_state: move _28, farm_state: move _29 };
        _22 = &_23;
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        StorageLive(_30);
        _30 = std::option::Option::<bool>::None;
        _21 = <farms::accounts::SetStakeDelegated as anchor_lang::ToAccountMetas>::to_account_metas(move _22, move _30) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _73 = const true;
        StorageDead(_30);
        StorageDead(_22);
        drop(_26) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_23);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _4;
        _33 = farms::instruction::SetStakeDelegated { new_amount: move _34 };
        _32 = &_33;
        StorageDead(_34);
        _31 = <farms::instruction::SetStakeDelegated as InstructionData>::data(move _32) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _72 = const true;
        StorageDead(_32);
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        _36 = farms::id() -> [return: bb15, unwind: bb33];
    }

    bb15: {
        StorageLive(_37);
        _73 = const false;
        _37 = move _21;
        StorageLive(_38);
        _72 = const false;
        _38 = move _31;
        _35 = Instruction { program_id: move _36, accounts: move _37, data: move _38 };
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const _;
        _42 = &(*_43);
        _41 = _42;
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &_14;
        _47 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _48) -> [return: bb16, unwind: bb28];
    }

    bb16: {
        _46 = &(*_47);
        StorageDead(_48);
        _45 = <[u8] as AsRef<[u8]>>::as_ref(move _46) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _44 = &(*_45);
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_5;
        _55 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _56) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        StorageDead(_56);
        _54 = ((*_55).1: u64);
        _53 = move _54 as u8 (IntToInt);
        StorageDead(_54);
        _52 = [move _53];
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = move _50 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_50);
        _40 = [move _41, move _44, move _49];
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_41);
        _39 = &_40;
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &(*_1);
        _57 = <handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _58) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_35;
        _60 = &(*_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_57;
        _64 = &(*_65);
        _63 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _64) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _62 = &(*_63);
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_39);
        _70 = move _71 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_71);
        _69 = [move _70];
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _66 = move _67 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_67);
        _59 = invoke_signed(move _60, move _62, move _66) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        StorageDead(_66);
        StorageDead(_62);
        StorageDead(_60);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into}>(move _59, <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        StorageDead(_59);
        drop(_57) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_40);
        StorageDead(_39);
        drop(_35) -> [return: bb24, unwind: bb33];
    }

    bb24: {
        StorageDead(_35);
        _72 = const false;
        StorageDead(_31);
        _73 = const false;
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        drop(_5) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        StorageDead(_5);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_57) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_35) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_5) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        drop(_31) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_72) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_21) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_73) -> [0: bb30, otherwise: bb34];
    }

    bb36 (cleanup): {
        _78 = discriminant(_6);
        goto -> bb31;
    }
}
