digraph Mir_0_11413 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U256::split_u128(_1: u128) -&gt; (u64, u64)<br align="left"/>let mut _2: u64;<br align="left"/>let mut _3: u64;<br align="left"/>let mut _4: u128;<br align="left"/>let mut _5: u128;<br align="left"/>let mut _6: u32;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: u128;<br align="left"/>debug a =&gt; _1;<br align="left"/>>;
    bb0__0_11413 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _1<br/>_6 = const 64_i32 as u32 (IntToInt)<br/>_7 = Lt(move _6, const 128_u32)<br/></td></tr><tr><td align="left">assert(move _7, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 64_i32)</td></tr></table>>];
    bb1__0_11413 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = Shr(move _5, const 64_i32)<br/>StorageDead(_5)<br/>_3 = move _4 as u64 (IntToInt)<br/>_2 = _3<br/>StorageDead(_4)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _1<br/>_10 = BitAnd(move _11, const 18446744073709551615_u128)<br/>StorageDead(_11)<br/>_9 = move _10 as u64 (IntToInt)<br/>_8 = _9<br/>StorageDead(_10)<br/>_0 = (move _2, move _8)<br/>StorageDead(_8)<br/>StorageDead(_2)<br/>StorageDead(_9)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11413 -> bb1__0_11413 [label="success"];
}
