// MIR for `handlers::handler_init_lending_market::<impl at programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18>::try_accounts` after PreCodegen

fn handlers::handler_init_lending_market::<impl at programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitLendingMarketBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_init_lending_market::InitLendingMarketBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let _21: ();
    let mut _22: bool;
    let mut _23: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _24: !;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::ErrorCode;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: std::ops::RangeFrom<usize>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_init_lending_market::InitLendingMarketBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_init_lending_market::InitLendingMarketBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_init_lending_market::InitLendingMarketBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: &anchor_lang::prelude::Signer<'_>;
    let _85: &anchor_lang::prelude::Signer<'_>;
    let mut _86: !;
    let mut _87: anchor_lang::error::Error;
    let mut _88: anchor_lang::error::Error;
    let mut _89: anchor_lang::error::ErrorCode;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _92: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _100: &&mut [u8];
    let mut _101: &std::cell::Ref<'_, &mut [u8]>;
    let _102: &std::cell::Ref<'_, &mut [u8]>;
    let _103: std::cell::Ref<'_, &mut [u8]>;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _105: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _106: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _113: ();
    let mut _114: &mut [u8];
    let mut _115: &mut [u8; 8];
    let mut _116: &[u8];
    let _117: &[u8];
    let _118: &[u8];
    let mut _119: &[u8];
    let mut _120: std::ops::RangeTo<usize>;
    let mut _122: [u8; 8];
    let _123: ();
    let mut _124: bool;
    let mut _125: u64;
    let mut _126: !;
    let mut _127: anchor_lang::error::Error;
    let mut _128: anchor_lang::error::Error;
    let mut _129: anchor_lang::error::ErrorCode;
    let mut _130: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _131: &anchor_lang::prelude::Pubkey;
    let mut _132: &anchor_lang::prelude::AccountInfo<'_>;
    let _133: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _134: isize;
    let mut _137: !;
    let mut _138: anchor_lang::error::Error;
    let mut _139: anchor_lang::error::Error;
    let _140: ();
    let mut _141: bool;
    let mut _142: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _144: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _145: !;
    let mut _146: anchor_lang::error::Error;
    let mut _147: anchor_lang::error::Error;
    let mut _148: anchor_lang::error::ErrorCode;
    let _149: ();
    let mut _150: bool;
    let mut _151: &anchor_lang::prelude::Rent;
    let mut _152: u64;
    let mut _153: &anchor_lang::prelude::AccountInfo<'_>;
    let _154: anchor_lang::prelude::AccountInfo<'_>;
    let mut _155: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _156: usize;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _158: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _159: &anchor_lang::prelude::AccountInfo<'_>;
    let _160: anchor_lang::prelude::AccountInfo<'_>;
    let mut _161: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _162: isize;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _167: !;
    let mut _168: anchor_lang::error::Error;
    let mut _169: anchor_lang::error::Error;
    let mut _170: anchor_lang::error::ErrorCode;
    let mut _173: (anchor_lang::prelude::Pubkey, u8);
    let mut _174: &[&[u8]];
    let mut _175: &[&[u8]; 2];
    let _176: &[&[u8]; 2];
    let _177: [&[u8]; 2];
    let mut _178: &[u8];
    let _179: &[u8];
    let mut _180: &[u8];
    let _181: &[u8];
    let mut _182: &anchor_lang::prelude::Pubkey;
    let _183: anchor_lang::prelude::Pubkey;
    let mut _184: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _185: &anchor_lang::prelude::Pubkey;
    let _186: &&anchor_lang::prelude::Pubkey;
    let mut _187: u8;
    let _188: ();
    let mut _189: bool;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let _191: anchor_lang::prelude::Pubkey;
    let mut _192: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _193: &anchor_lang::prelude::Pubkey;
    let mut _194: !;
    let mut _195: anchor_lang::error::Error;
    let mut _196: anchor_lang::error::Error;
    let mut _197: anchor_lang::error::Error;
    let mut _198: anchor_lang::error::ErrorCode;
    let mut _199: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _200: anchor_lang::prelude::Pubkey;
    let mut _201: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _202: anchor_lang::prelude::Pubkey;
    let mut _203: handlers::handler_init_lending_market::InitLendingMarket<'_>;
    let mut _204: anchor_lang::prelude::Signer<'_>;
    let mut _205: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _206: anchor_lang::prelude::AccountInfo<'_>;
    let mut _207: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _208: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _209: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _210: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _211: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _212: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _213: &mut [u8];
    let mut _214: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _215: &anchor_lang::prelude::Pubkey;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    scope 1 {
        debug lending_market_owner => _6;
        let _27: &anchor_lang::prelude::AccountInfo<'_>;
        scope 6 {
            debug lending_market => _27;
            let _36: anchor_lang::prelude::AccountInfo<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug lending_market_authority => _36;
                let _51: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                scope 12 {
                    debug system_program => _51;
                    let _66: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    scope 17 {
                        debug rent => _66;
                        let _90: anchor_lang::prelude::Rent;
                        let _94: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _97: anchor_lang::prelude::Rent;
                        scope 22 {
                            debug __anchor_rent => _90;
                            let _98: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                            let mut _99: &[u8];
                            let _108: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _111: std::cell::Ref<'_, &mut [u8]>;
                            scope 27 {
                                debug lending_market => _98;
                                let _163: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _166: usize;
                                let _171: anchor_lang::prelude::Pubkey;
                                let _172: u8;
                                scope 37 {
                                    debug residual => _163;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _166;
                                    scope 40 {
                                    }
                                }
                                scope 41 {
                                    debug __pda_address => _171;
                                    debug __bump => _172;
                                }
                            }
                            scope 28 {
                                debug __data => _99;
                                let mut _112: [u8; 8];
                                scope 33 {
                                    debug __disc_bytes => _112;
                                    let _121: u64;
                                    scope 34 {
                                        debug __discriminator => _121;
                                        let _135: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                                        let _136: anchor_lang::error::Error;
                                        scope 35 {
                                            debug val => _135;
                                        }
                                        scope 36 {
                                            debug e => _136;
                                        }
                                    }
                                }
                            }
                            scope 29 {
                                debug residual => _108;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _111;
                                scope 32 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _94;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _97;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _62;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _65;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _47;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _50;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _216 = const false;
        _219 = const false;
        _218 = const false;
        _217 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitLendingMarketBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18}>(move _9, move _15) -> [return: bb2, unwind: bb111];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb111];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _220 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _209 = deref_copy (*_2);
        _23 = &(*_209);
        _22 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _23) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb121];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _252 = discriminant(_7);
        StorageDead(_7);
        goto -> bb103;
    }

    bb8: {
        switchInt(move _22) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = AccountNotEnoughKeys;
        _25 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Err(move _25);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb103;
    }

    bb11: {
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const 0_usize;
        _210 = deref_copy (*_2);
        _29 = Len((*_210));
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb12, unwind continue];
    }

    bb12: {
        _211 = deref_copy (*_2);
        _27 = &(*_211)[_28];
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _212 = deref_copy (*_2);
        _34 = &(*_212);
        StorageLive(_35);
        _35 = RangeFrom::<usize> { start: const 1_usize };
        _33 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _34, move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = &(*_33);
        _31 = &(*_32);
        (*_2) = move _31;
        StorageDead(_31);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitLendingMarketBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18}>(move _39, move _45) -> [return: bb15, unwind: bb111];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb111];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _36 = move _50;
        StorageDead(_50);
        _222 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitLendingMarketBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb110];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb120];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _250 = discriminant(_37);
        StorageDead(_37);
        goto -> bb102;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
        _53 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18}>(move _54, move _60) -> [return: bb21, unwind: bb110];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb110];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _51 = move _65;
        StorageDead(_65);
        _224 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitLendingMarketBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb110];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb119];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _248 = discriminant(_52);
        StorageDead(_52);
        goto -> bb101;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18};
        _68 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_lending_market.rs:20:10: 20:18}>(move _69, move _75) -> [return: bb27, unwind: bb110];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb110];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _66 = move _80;
        StorageDead(_80);
        _226 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_6;
        _84 = &(*_85);
        _83 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _84) -> [return: bb32, unwind: bb110];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb118];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _246 = discriminant(_67);
        StorageDead(_67);
        goto -> bb100;
    }

    bb32: {
        StorageDead(_84);
        _82 = ((*_83).6: bool);
        switchInt(move _82) -> [0: bb33, otherwise: bb36];
    }

    bb33: {
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = ConstraintMut;
        _88 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _89) -> [return: bb34, unwind: bb110];
    }

    bb34: {
        StorageDead(_89);
        _87 = anchor_lang::error::Error::with_account_name::<&str>(move _88, const "lending_market_owner") -> [return: bb35, unwind: bb110];
    }

    bb35: {
        StorageDead(_88);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Err(move _87);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb100;
    }

    bb36: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb37, unwind: bb110];
    }

    bb37: {
        _91 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _92) -> [return: bb38, unwind: bb110];
    }

    bb38: {
        StorageDead(_92);
        _93 = discriminant(_91);
        switchInt(move _93) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_97);
        _97 = ((_91 as Continue).0: anchor_lang::prelude::Rent);
        _90 = _97;
        StorageDead(_97);
        _228 = discriminant(_91);
        StorageDead(_91);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_27);
        _105 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _106) -> [return: bb42, unwind: bb110];
    }

    bb40: {
        StorageLive(_94);
        _94 = move ((_91 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _96) -> [return: bb41, unwind: bb117];
    }

    bb41: {
        StorageDead(_96);
        StorageDead(_94);
        _244 = discriminant(_91);
        StorageDead(_91);
        goto -> bb99;
    }

    bb42: {
        StorageDead(_106);
        _104 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _105) -> [return: bb43, unwind: bb110];
    }

    bb43: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_111);
        _111 = move ((_104 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _103 = move _111;
        StorageDead(_111);
        _102 = &_103;
        _101 = &(*_102);
        _100 = <Ref<'_, &mut [u8]> as Deref>::deref(move _101) -> [return: bb47, unwind: bb108];
    }

    bb45: {
        StorageLive(_108);
        _108 = move ((_104 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_110);
        _110 = move _108;
        _0 = <std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _110) -> [return: bb46, unwind: bb116];
    }

    bb46: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_101);
        _242 = discriminant(_104);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb97;
    }

    bb47: {
        _213 = deref_copy (*_100);
        _99 = &(*_213);
        StorageDead(_101);
        _230 = discriminant(_104);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_112);
        _112 = [const 0_u8; 8];
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &mut _112;
        _114 = move _115 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_99);
        StorageLive(_120);
        _120 = RangeTo::<usize> { end: const 8_usize };
        _118 = <[u8] as Index<RangeTo<usize>>>::index(move _119, move _120) -> [return: bb48, unwind: bb109];
    }

    bb48: {
        StorageDead(_120);
        StorageDead(_119);
        _117 = &(*_118);
        _116 = &(*_117);
        _113 = core::slice::<impl [u8]>::copy_from_slice(move _114, move _116) -> [return: bb49, unwind: bb109];
    }

    bb49: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_113);
        StorageLive(_121);
        StorageLive(_122);
        _122 = _112;
        _121 = core::num::<impl u64>::from_le_bytes(move _122) -> [return: bb50, unwind: bb109];
    }

    bb50: {
        StorageDead(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _121;
        _124 = Ne(move _125, const 0_u64);
        switchInt(move _124) -> [0: bb54, otherwise: bb51];
    }

    bb51: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = ConstraintZero;
        _128 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _129) -> [return: bb52, unwind: bb109];
    }

    bb52: {
        StorageDead(_129);
        _127 = anchor_lang::error::Error::with_account_name::<&str>(move _128, const "lending_market") -> [return: bb53, unwind: bb109];
    }

    bb53: {
        StorageDead(_128);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Err(move _127);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_112);
        drop(_103) -> [return: bb97, unwind: bb110];
    }

    bb54: {
        StorageDead(_125);
        _123 = const ();
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &(*_1);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_27;
        _214 = deref_copy (*_133);
        _132 = &(*_214);
        _130 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::try_from_unchecked(move _131, move _132) -> [return: bb55, unwind: bb109];
    }

    bb55: {
        _218 = const true;
        _219 = const true;
        StorageDead(_132);
        StorageDead(_131);
        _134 = discriminant(_130);
        switchInt(move _134) -> [0: bb57, 1: bb56, otherwise: bb5];
    }

    bb56: {
        StorageLive(_136);
        _136 = move ((_130 as Err).0: anchor_lang::error::Error);
        StorageLive(_138);
        StorageLive(_139);
        _139 = move _136;
        _138 = anchor_lang::error::Error::with_account_name::<&str>(move _139, const "lending_market") -> [return: bb58, unwind: bb107];
    }

    bb57: {
        StorageLive(_135);
        _135 = move ((_130 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _98 = move _135;
        StorageDead(_135);
        StorageDead(_121);
        StorageDead(_112);
        drop(_103) -> [return: bb59, unwind: bb115];
    }

    bb58: {
        StorageDead(_139);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Err(move _138);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_121);
        StorageDead(_112);
        drop(_103) -> [return: bb96, unwind: bb115];
    }

    bb59: {
        StorageDead(_103);
        StorageDead(_99);
        _232 = discriminant(_130);
        StorageDead(_133);
        _218 = const false;
        _219 = const false;
        StorageDead(_130);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_98;
        _143 = &(*_144);
        _142 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _143) -> [return: bb60, unwind: bb110];
    }

    bb60: {
        StorageDead(_143);
        _141 = ((*_142).6: bool);
        switchInt(move _141) -> [0: bb61, otherwise: bb64];
    }

    bb61: {
        StorageDead(_144);
        StorageDead(_142);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = ConstraintMut;
        _147 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _148) -> [return: bb62, unwind: bb110];
    }

    bb62: {
        StorageDead(_148);
        _146 = anchor_lang::error::Error::with_account_name::<&str>(move _147, const "lending_market") -> [return: bb63, unwind: bb110];
    }

    bb63: {
        StorageDead(_147);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Err(move _146);
        StorageDead(_146);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb98;
    }

    bb64: {
        StorageDead(_144);
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_90;
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_98;
        _154 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _155) -> [return: bb65, unwind: bb110];
    }

    bb65: {
        _153 = &_154;
        StorageDead(_155);
        _152 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _153) -> [return: bb66, unwind: bb106];
    }

    bb66: {
        StorageDead(_153);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_98;
        _160 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _161) -> [return: bb67, unwind: bb106];
    }

    bb67: {
        _159 = &_160;
        StorageDead(_161);
        _158 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _159) -> [return: bb68, unwind: bb105];
    }

    bb68: {
        StorageDead(_159);
        _157 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _158) -> [return: bb69, unwind: bb105];
    }

    bb69: {
        _217 = const true;
        StorageDead(_158);
        _162 = discriminant(_157);
        switchInt(move _162) -> [0: bb70, 1: bb71, otherwise: bb5];
    }

    bb70: {
        StorageLive(_166);
        _166 = ((_157 as Continue).0: usize);
        _156 = _166;
        StorageDead(_166);
        _150 = anchor_lang::prelude::Rent::is_exempt(move _151, move _152, move _156) -> [return: bb73, unwind: bb114];
    }

    bb71: {
        StorageLive(_163);
        _163 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_165);
        _165 = move _163;
        _0 = <std::result::Result<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _165) -> [return: bb72, unwind: bb114];
    }

    bb72: {
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_151);
        _238 = discriminant(_157);
        drop(_160) -> [return: bb93, unwind: bb106];
    }

    bb73: {
        switchInt(move _150) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_151);
        _234 = discriminant(_157);
        drop(_160) -> [return: bb80, unwind: bb106];
    }

    bb75: {
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_151);
        _236 = discriminant(_157);
        drop(_160) -> [return: bb76, unwind: bb106];
    }

    bb76: {
        StorageDead(_160);
        _217 = const false;
        StorageDead(_157);
        drop(_154) -> [return: bb77, unwind: bb110];
    }

    bb77: {
        StorageDead(_154);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = ConstraintRentExempt;
        _169 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _170) -> [return: bb78, unwind: bb110];
    }

    bb78: {
        StorageDead(_170);
        _168 = anchor_lang::error::Error::with_account_name::<&str>(move _169, const "lending_market") -> [return: bb79, unwind: bb110];
    }

    bb79: {
        StorageDead(_169);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Err(move _168);
        StorageDead(_168);
        goto -> bb95;
    }

    bb80: {
        StorageDead(_160);
        _217 = const false;
        StorageDead(_157);
        drop(_154) -> [return: bb81, unwind: bb110];
    }

    bb81: {
        StorageDead(_154);
        _149 = const ();
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = const _;
        _178 = &(*_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_98;
        _183 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _184) -> [return: bb82, unwind: bb110];
    }

    bb82: {
        _182 = &_183;
        StorageDead(_184);
        _181 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _182) -> [return: bb83, unwind: bb110];
    }

    bb83: {
        _180 = &(*_181);
        StorageDead(_182);
        _177 = [move _178, move _180];
        StorageDead(_180);
        StorageDead(_178);
        _176 = &_177;
        _175 = &(*_176);
        _174 = move _175 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_175);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_1;
        _215 = deref_copy (*_186);
        _185 = &(*_215);
        _173 = anchor_lang::prelude::Pubkey::find_program_address(move _174, move _185) -> [return: bb84, unwind: bb110];
    }

    bb84: {
        StorageDead(_185);
        StorageDead(_174);
        StorageLive(_171);
        _171 = (_173.0: anchor_lang::prelude::Pubkey);
        StorageLive(_172);
        _172 = (_173.1: u8);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_173);
        StorageLive(_187);
        _187 = _172;
        ((*_4).0: u8) = move _187;
        StorageDead(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &_36;
        _191 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _192) -> [return: bb85, unwind: bb110];
    }

    bb85: {
        _190 = &_191;
        StorageDead(_192);
        StorageLive(_193);
        _193 = &_171;
        _189 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _190, move _193) -> [return: bb86, unwind: bb110];
    }

    bb86: {
        switchInt(move _189) -> [0: bb92, otherwise: bb87];
    }

    bb87: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = ConstraintSeeds;
        _197 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _198) -> [return: bb88, unwind: bb110];
    }

    bb88: {
        StorageDead(_198);
        _196 = anchor_lang::error::Error::with_account_name::<&str>(move _197, const "lending_market_authority") -> [return: bb89, unwind: bb110];
    }

    bb89: {
        _216 = const true;
        StorageDead(_197);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &_36;
        _200 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _201) -> [return: bb90, unwind: bb113];
    }

    bb90: {
        StorageDead(_201);
        StorageLive(_202);
        _202 = _171;
        _199 = (move _200, move _202);
        StorageDead(_202);
        StorageDead(_200);
        _216 = const false;
        _195 = anchor_lang::error::Error::with_pubkeys(move _196, move _199) -> [return: bb91, unwind: bb113];
    }

    bb91: {
        StorageDead(_199);
        _216 = const false;
        StorageDead(_196);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Err(move _195);
        StorageDead(_195);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_172);
        StorageDead(_171);
        goto -> bb98;
    }

    bb92: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_190);
        _188 = const ();
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_203);
        StorageLive(_204);
        _204 = move _6;
        StorageLive(_205);
        _205 = move _98;
        StorageLive(_206);
        _206 = move _36;
        StorageLive(_207);
        _207 = move _51;
        StorageLive(_208);
        _208 = move _66;
        _203 = handlers::handler_init_lending_market::InitLendingMarket::<'_> { lending_market_owner: move _204, lending_market: move _205, lending_market_authority: move _206, system_program: move _207, rent: move _208 };
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        _0 = std::result::Result::<handlers::handler_init_lending_market::InitLendingMarket<'_>, anchor_lang::error::Error>::Ok(move _203);
        StorageDead(_203);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_98);
        StorageDead(_90);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_6);
        goto -> bb104;
    }

    bb93: {
        StorageDead(_160);
        _217 = const false;
        StorageDead(_157);
        drop(_154) -> [return: bb94, unwind: bb110];
    }

    bb94: {
        StorageDead(_154);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb98;
    }

    bb96: {
        StorageDead(_103);
        StorageDead(_99);
        _240 = discriminant(_130);
        StorageDead(_133);
        _218 = const false;
        _219 = const false;
        StorageDead(_130);
        goto -> bb98;
    }

    bb97: {
        StorageDead(_103);
        StorageDead(_99);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_98);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_90);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_66);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_51);
        drop(_36) -> [return: bb102, unwind: bb111];
    }

    bb102: {
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_6);
        goto -> bb104;
    }

    bb104: {
        return;
    }

    bb105 (cleanup): {
        drop(_160) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_154) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_103) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        _256 = discriminant(_104);
        goto -> bb109;
    }

    bb109 (cleanup): {
        drop(_103) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_36) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        resume;
    }

    bb112 (cleanup): {
        drop(_196) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_216) -> [0: bb110, otherwise: bb112];
    }

    bb114 (cleanup): {
        _254 = discriminant(_157);
        goto -> bb105;
    }

    bb115 (cleanup): {
        _255 = discriminant(_130);
        goto -> bb110;
    }

    bb116 (cleanup): {
        _257 = discriminant(_104);
        goto -> bb110;
    }

    bb117 (cleanup): {
        _258 = discriminant(_91);
        goto -> bb110;
    }

    bb118 (cleanup): {
        _259 = discriminant(_67);
        goto -> bb110;
    }

    bb119 (cleanup): {
        _260 = discriminant(_52);
        goto -> bb110;
    }

    bb120 (cleanup): {
        _261 = discriminant(_37);
        goto -> bb111;
    }

    bb121 (cleanup): {
        _262 = discriminant(_7);
        goto -> bb111;
    }
}
