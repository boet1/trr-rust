// MIR for `handlers::handler_redeem_fees::<impl at programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18>::try_accounts` before PreCodegen

fn handlers::handler_redeem_fees::<impl at programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut RedeemFeesBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _8: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_redeem_fees::RedeemFeesBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_redeem_fees::RedeemFeesBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _38: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_redeem_fees::RedeemFeesBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_redeem_fees::RedeemFeesBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_redeem_fees::RedeemFeesBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_redeem_fees::RedeemFeesBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _98: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_redeem_fees::RedeemFeesBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _111: ();
    let mut _112: bool;
    let mut _113: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _114: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _115: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _116: !;
    let mut _117: anchor_lang::error::Error;
    let mut _118: anchor_lang::error::Error;
    let mut _119: anchor_lang::error::ErrorCode;
    let _120: ();
    let mut _122: &state::reserve::Reserve;
    let mut _123: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _124: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _126: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _127: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _134: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _135: bool;
    let mut _136: &anchor_lang::prelude::Pubkey;
    let mut _137: &anchor_lang::prelude::Pubkey;
    let mut _138: !;
    let mut _139: anchor_lang::error::Error;
    let mut _140: anchor_lang::error::Error;
    let mut _141: anchor_lang::error::Error;
    let mut _142: anchor_lang::error::ErrorCode;
    let mut _143: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _144: anchor_lang::prelude::Pubkey;
    let mut _145: anchor_lang::prelude::Pubkey;
    let _146: ();
    let mut _148: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _150: &state::reserve::Reserve;
    let mut _151: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _152: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _154: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _155: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _161: bool;
    let mut _162: &anchor_lang::prelude::Pubkey;
    let mut _163: &anchor_lang::prelude::Pubkey;
    let mut _164: !;
    let mut _165: anchor_lang::error::Error;
    let mut _166: anchor_lang::error::Error;
    let mut _167: anchor_lang::error::Error;
    let mut _168: anchor_lang::error::ErrorCode;
    let mut _169: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _170: anchor_lang::prelude::Pubkey;
    let mut _171: anchor_lang::prelude::Pubkey;
    let _172: ();
    let mut _173: bool;
    let mut _174: &&anchor_lang::prelude::Pubkey;
    let _175: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _177: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _178: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _179: &&anchor_lang::prelude::Pubkey;
    let _180: &anchor_lang::prelude::Pubkey;
    let _181: anchor_lang::prelude::Pubkey;
    let mut _182: &anchor_lang::prelude::AccountInfo<'_>;
    let _183: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _184: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _185: !;
    let mut _186: anchor_lang::error::Error;
    let mut _187: anchor_lang::error::ErrorCode;
    let _188: ();
    let mut _189: bool;
    let mut _190: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _192: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _193: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _194: !;
    let mut _195: anchor_lang::error::Error;
    let mut _196: anchor_lang::error::Error;
    let mut _197: anchor_lang::error::ErrorCode;
    let _198: ();
    let mut _200: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _202: &state::reserve::Reserve;
    let mut _203: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _204: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _206: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _207: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _213: bool;
    let mut _214: &anchor_lang::prelude::Pubkey;
    let mut _215: &anchor_lang::prelude::Pubkey;
    let mut _216: !;
    let mut _217: anchor_lang::error::Error;
    let mut _218: anchor_lang::error::Error;
    let mut _219: anchor_lang::error::Error;
    let mut _220: anchor_lang::error::ErrorCode;
    let mut _221: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _222: anchor_lang::prelude::Pubkey;
    let mut _223: anchor_lang::prelude::Pubkey;
    let _224: ();
    let mut _225: bool;
    let mut _226: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _227: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _228: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _229: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _230: !;
    let mut _231: anchor_lang::error::Error;
    let mut _232: anchor_lang::error::Error;
    let mut _233: anchor_lang::error::ErrorCode;
    let _234: ();
    let mut _236: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _238: &state::reserve::Reserve;
    let mut _239: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _240: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _242: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _243: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _249: bool;
    let mut _250: &anchor_lang::prelude::Pubkey;
    let mut _251: &anchor_lang::prelude::Pubkey;
    let mut _252: !;
    let mut _253: anchor_lang::error::Error;
    let mut _254: anchor_lang::error::Error;
    let mut _255: anchor_lang::error::Error;
    let mut _256: anchor_lang::error::ErrorCode;
    let mut _257: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _258: anchor_lang::prelude::Pubkey;
    let mut _259: anchor_lang::prelude::Pubkey;
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _262: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _263: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _264: &[&[u8]];
    let mut _265: &[&[u8]; 3];
    let _266: &[&[u8]; 3];
    let _267: [&[u8]; 3];
    let mut _268: &[u8];
    let _269: &[u8];
    let mut _270: &[u8];
    let _271: &[u8];
    let mut _272: &anchor_lang::prelude::Pubkey;
    let _273: anchor_lang::prelude::Pubkey;
    let mut _274: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _275: &[u8];
    let _276: &[u8];
    let _277: &[u8];
    let mut _278: &[u8; 1];
    let _279: [u8; 1];
    let mut _280: u8;
    let mut _281: u64;
    let mut _282: &state::lending_market::LendingMarket;
    let mut _283: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _284: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _285: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _286: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _287: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _288: isize;
    let mut _290: !;
    let mut _291: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _293: std::ops::RangeFull;
    let mut _294: &anchor_lang::prelude::Pubkey;
    let _295: &&anchor_lang::prelude::Pubkey;
    let mut _296: {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
    let mut _297: isize;
    let mut _299: !;
    let mut _300: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _302: ();
    let mut _303: bool;
    let mut _304: &anchor_lang::prelude::Pubkey;
    let _305: anchor_lang::prelude::Pubkey;
    let mut _306: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _307: &anchor_lang::prelude::Pubkey;
    let mut _308: !;
    let mut _309: anchor_lang::error::Error;
    let mut _310: anchor_lang::error::Error;
    let mut _311: anchor_lang::error::Error;
    let mut _312: anchor_lang::error::ErrorCode;
    let mut _313: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _314: anchor_lang::prelude::Pubkey;
    let mut _315: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _316: anchor_lang::prelude::Pubkey;
    let mut _317: handlers::handler_redeem_fees::RedeemFees<'_>;
    let mut _318: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _319: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _320: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _321: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _322: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _323: anchor_lang::prelude::AccountInfo<'_>;
    let mut _324: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _325: &anchor_lang::prelude::Pubkey;
    let mut _326: bool;
    let mut _327: bool;
    let mut _328: bool;
    let mut _329: bool;
    let mut _330: bool;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: bool;
    let mut _334: bool;
    let mut _335: bool;
    let mut _336: bool;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _403: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _404: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug reserve => _6;
        let _21: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
        scope 6 {
            debug reserve_liquidity_mint => _21;
            let _36: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
            scope 11 {
                debug reserve_liquidity_fee_receiver => _36;
                let _51: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                scope 16 {
                    debug reserve_supply_liquidity => _51;
                    let _66: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                    scope 21 {
                        debug lending_market => _66;
                        let _81: anchor_lang::prelude::AccountInfo<'_>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::AccountInfo<'_>;
                        scope 26 {
                            debug lending_market_authority => _81;
                            let _96: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                            scope 31 {
                                debug token_program => _96;
                                let _121: anchor_lang::prelude::Pubkey;
                                let _129: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _132: std::cell::Ref<'_, state::reserve::Reserve>;
                                let _147: anchor_lang::prelude::Pubkey;
                                let _199: anchor_lang::prelude::Pubkey;
                                let _235: anchor_lang::prelude::Pubkey;
                                let _260: anchor_lang::prelude::Pubkey;
                                let _289: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _292: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                let _298: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _301: anchor_lang::prelude::Pubkey;
                                scope 36 {
                                    debug my_key => _121;
                                    let _133: anchor_lang::prelude::Pubkey;
                                    scope 41 {
                                        debug target_key => _133;
                                    }
                                }
                                scope 37 {
                                    debug residual => _129;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _132;
                                    scope 40 {
                                    }
                                }
                                scope 42 {
                                    debug actual => _147;
                                    let _149: anchor_lang::prelude::Pubkey;
                                    let _157: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _160: std::cell::Ref<'_, state::reserve::Reserve>;
                                    scope 43 {
                                        debug expected => _149;
                                    }
                                    scope 44 {
                                        debug residual => _157;
                                        scope 45 {
                                        }
                                    }
                                    scope 46 {
                                        debug val => _160;
                                        scope 47 {
                                        }
                                    }
                                }
                                scope 48 {
                                    debug actual => _199;
                                    let _201: anchor_lang::prelude::Pubkey;
                                    let _209: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _212: std::cell::Ref<'_, state::reserve::Reserve>;
                                    scope 49 {
                                        debug expected => _201;
                                    }
                                    scope 50 {
                                        debug residual => _209;
                                        scope 51 {
                                        }
                                    }
                                    scope 52 {
                                        debug val => _212;
                                        scope 53 {
                                        }
                                    }
                                }
                                scope 54 {
                                    debug actual => _235;
                                    let _237: anchor_lang::prelude::Pubkey;
                                    let _245: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _248: std::cell::Ref<'_, state::reserve::Reserve>;
                                    scope 55 {
                                        debug expected => _237;
                                    }
                                    scope 56 {
                                        debug residual => _245;
                                        scope 57 {
                                        }
                                    }
                                    scope 58 {
                                        debug val => _248;
                                        scope 59 {
                                        }
                                    }
                                }
                                scope 60 {
                                    debug __pda_address => _260;
                                }
                                scope 61 {
                                    debug residual => _289;
                                    scope 62 {
                                    }
                                }
                                scope 63 {
                                    debug val => _292;
                                    scope 64 {
                                    }
                                }
                                scope 65 {
                                    debug residual => _298;
                                    scope 66 {
                                    }
                                }
                                scope 67 {
                                    debug val => _301;
                                    scope 68 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _328 = const false;
        _336 = const false;
        _335 = const false;
        _334 = const false;
        _333 = const false;
        _332 = const false;
        _331 = const false;
        _330 = const false;
        _329 = const false;
        _327 = const false;
        _326 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, RedeemFeesBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _8 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _9, move _15) -> [return: bb2, unwind: bb166];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb166];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _6 = move _20;
        StorageDead(_20);
        _337 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, RedeemFeesBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb187];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _387 = discriminant(_7);
        StorageDead(_7);
        goto -> bb155;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _23 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _24, move _30) -> [return: bb9, unwind: bb166];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb166];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _21 = move _35;
        StorageDead(_35);
        _339 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, RedeemFeesBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb165];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb186];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _385 = discriminant(_22);
        StorageDead(_22);
        goto -> bb154;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _38 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _39, move _45) -> [return: bb15, unwind: bb165];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb165];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _36 = move _50;
        StorageDead(_50);
        _341 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, RedeemFeesBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb164];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb185];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _383 = discriminant(_37);
        StorageDead(_37);
        goto -> bb153;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _53 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _54, move _60) -> [return: bb21, unwind: bb164];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb164];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _51 = move _65;
        StorageDead(_65);
        _343 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, RedeemFeesBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb163];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb184];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _381 = discriminant(_52);
        StorageDead(_52);
        goto -> bb152;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _69, move _75) -> [return: bb27, unwind: bb163];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb163];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _66 = move _80;
        StorageDead(_80);
        _345 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, RedeemFeesBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb163];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb183];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _379 = discriminant(_67);
        StorageDead(_67);
        goto -> bb151;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _83 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _84, move _90) -> [return: bb33, unwind: bb163];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb163];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _81 = move _95;
        StorageDead(_95);
        _347 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, RedeemFeesBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb162];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb182];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _377 = discriminant(_82);
        StorageDead(_82);
        goto -> bb150;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _98 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _99, move _105) -> [return: bb39, unwind: bb162];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb162];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _96 = move _110;
        StorageDead(_110);
        _349 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_6;
        _114 = &(*_115);
        _113 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _114) -> [return: bb44, unwind: bb162];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb181];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _375 = discriminant(_97);
        StorageDead(_97);
        goto -> bb149;
    }

    bb44: {
        StorageDead(_114);
        _112 = ((*_113).6: bool);
        switchInt(move _112) -> [0: bb45, otherwise: bb48];
    }

    bb45: {
        StorageDead(_115);
        StorageDead(_113);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = ConstraintMut;
        _118 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _119) -> [return: bb46, unwind: bb162];
    }

    bb46: {
        StorageDead(_119);
        _117 = anchor_lang::error::Error::with_account_name::<&str>(move _118, const "reserve") -> [return: bb47, unwind: bb162];
    }

    bb47: {
        StorageDead(_118);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _117);
        StorageDead(_117);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb149;
    }

    bb48: {
        StorageDead(_115);
        StorageDead(_113);
        _111 = const ();
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_6;
        _126 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _127) -> [return: bb49, unwind: bb162];
    }

    bb49: {
        StorageDead(_127);
        _125 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _126) -> [return: bb50, unwind: bb162];
    }

    bb50: {
        _335 = const true;
        _336 = const true;
        StorageDead(_126);
        _128 = discriminant(_125);
        switchInt(move _128) -> [0: bb51, 1: bb52, otherwise: bb5];
    }

    bb51: {
        StorageLive(_132);
        _132 = move ((_125 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _124 = move _132;
        StorageDead(_132);
        _123 = &_124;
        _122 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _123) -> [return: bb54, unwind: bb161];
    }

    bb52: {
        StorageLive(_129);
        _129 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_131);
        _131 = move _129;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _131) -> [return: bb53, unwind: bb180];
    }

    bb53: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_123);
        _373 = discriminant(_125);
        _335 = const false;
        _336 = const false;
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        goto -> bb148;
    }

    bb54: {
        StorageDead(_123);
        _121 = ((*_122).2: anchor_lang::prelude::Pubkey);
        drop(_124) -> [return: bb167, unwind: bb180];
    }

    bb55: {
        StorageDead(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_121;
        StorageLive(_137);
        _137 = &_133;
        _135 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _136, move _137) -> [return: bb56, unwind: bb162];
    }

    bb56: {
        switchInt(move _135) -> [0: bb61, otherwise: bb57];
    }

    bb57: {
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = ConstraintHasOne;
        _141 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _142) -> [return: bb58, unwind: bb162];
    }

    bb58: {
        StorageDead(_142);
        _140 = anchor_lang::error::Error::with_account_name::<&str>(move _141, const "reserve") -> [return: bb59, unwind: bb162];
    }

    bb59: {
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _121;
        StorageLive(_145);
        _145 = _133;
        _143 = (move _144, move _145);
        StorageDead(_145);
        StorageDead(_144);
        _139 = anchor_lang::error::Error::with_pubkeys(move _140, move _143) -> [return: bb60, unwind: bb162];
    }

    bb60: {
        StorageDead(_143);
        StorageDead(_140);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _139);
        StorageDead(_139);
        StorageDead(_135);
        StorageDead(_133);
        goto -> bb148;
    }

    bb61: {
        StorageDead(_137);
        StorageDead(_136);
        _120 = const ();
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _402 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _148 = &(*_402);
        _147 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _148) -> [return: bb62, unwind: bb162];
    }

    bb62: {
        StorageDead(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_6;
        _154 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _155) -> [return: bb63, unwind: bb162];
    }

    bb63: {
        StorageDead(_155);
        _153 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _154) -> [return: bb64, unwind: bb162];
    }

    bb64: {
        _333 = const true;
        _334 = const true;
        StorageDead(_154);
        _156 = discriminant(_153);
        switchInt(move _156) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_160);
        _160 = move ((_153 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _152 = move _160;
        StorageDead(_160);
        _151 = &_152;
        _150 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _151) -> [return: bb68, unwind: bb160];
    }

    bb66: {
        StorageLive(_157);
        _157 = move ((_153 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_159);
        _159 = move _157;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _159) -> [return: bb67, unwind: bb179];
    }

    bb67: {
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_151);
        _371 = discriminant(_153);
        _333 = const false;
        _334 = const false;
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_150);
        goto -> bb147;
    }

    bb68: {
        StorageDead(_151);
        _149 = (((*_150).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        drop(_152) -> [return: bb168, unwind: bb179];
    }

    bb69: {
        switchInt(move _161) -> [0: bb74, otherwise: bb70];
    }

    bb70: {
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = ConstraintAddress;
        _167 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _168) -> [return: bb71, unwind: bb162];
    }

    bb71: {
        StorageDead(_168);
        _166 = anchor_lang::error::Error::with_account_name::<&str>(move _167, const "reserve_liquidity_mint") -> [return: bb72, unwind: bb162];
    }

    bb72: {
        StorageDead(_167);
        StorageLive(_169);
        StorageLive(_170);
        _170 = _147;
        StorageLive(_171);
        _171 = _149;
        _169 = (move _170, move _171);
        StorageDead(_171);
        StorageDead(_170);
        _165 = anchor_lang::error::Error::with_pubkeys(move _166, move _169) -> [return: bb73, unwind: bb162];
    }

    bb73: {
        StorageDead(_169);
        StorageDead(_166);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _165);
        StorageDead(_165);
        StorageDead(_161);
        goto -> bb147;
    }

    bb74: {
        StorageDead(_163);
        StorageDead(_162);
        _146 = const ();
        StorageDead(_161);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_21;
        _177 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _178) -> [return: bb75, unwind: bb162];
    }

    bb75: {
        _176 = &(*_177);
        StorageDead(_178);
        _175 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _176) -> [return: bb76, unwind: bb162];
    }

    bb76: {
        StorageDead(_176);
        _174 = &((*_175).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_96;
        _183 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _184) -> [return: bb77, unwind: bb162];
    }

    bb77: {
        _182 = &(*_183);
        StorageDead(_184);
        _181 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _182) -> [return: bb78, unwind: bb162];
    }

    bb78: {
        StorageDead(_182);
        _180 = &_181;
        _179 = &_180;
        _173 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _174, move _179) -> [return: bb79, unwind: bb162];
    }

    bb79: {
        switchInt(move _173) -> [0: bb82, otherwise: bb80];
    }

    bb80: {
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_186);
        StorageLive(_187);
        _187 = ConstraintMintTokenProgram;
        _186 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _187) -> [return: bb81, unwind: bb162];
    }

    bb81: {
        StorageDead(_187);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _186);
        StorageDead(_186);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb149;
    }

    bb82: {
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        _172 = const ();
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &_36;
        _192 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _193) -> [return: bb83, unwind: bb162];
    }

    bb83: {
        _191 = &(*_192);
        StorageDead(_193);
        _190 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _191) -> [return: bb84, unwind: bb162];
    }

    bb84: {
        StorageDead(_191);
        _189 = ((*_190).6: bool);
        switchInt(move _189) -> [0: bb85, otherwise: bb88];
    }

    bb85: {
        StorageDead(_192);
        StorageDead(_190);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = ConstraintMut;
        _196 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _197) -> [return: bb86, unwind: bb162];
    }

    bb86: {
        StorageDead(_197);
        _195 = anchor_lang::error::Error::with_account_name::<&str>(move _196, const "reserve_liquidity_fee_receiver") -> [return: bb87, unwind: bb162];
    }

    bb87: {
        StorageDead(_196);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _195);
        StorageDead(_195);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb149;
    }

    bb88: {
        StorageDead(_192);
        StorageDead(_190);
        _188 = const ();
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _403 = (((_36.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _200 = &(*_403);
        _199 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _200) -> [return: bb89, unwind: bb162];
    }

    bb89: {
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &_6;
        _206 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _207) -> [return: bb90, unwind: bb162];
    }

    bb90: {
        StorageDead(_207);
        _205 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _206) -> [return: bb91, unwind: bb162];
    }

    bb91: {
        _331 = const true;
        _332 = const true;
        StorageDead(_206);
        _208 = discriminant(_205);
        switchInt(move _208) -> [0: bb92, 1: bb93, otherwise: bb5];
    }

    bb92: {
        StorageLive(_212);
        _212 = move ((_205 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _204 = move _212;
        StorageDead(_212);
        _203 = &_204;
        _202 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _203) -> [return: bb95, unwind: bb159];
    }

    bb93: {
        StorageLive(_209);
        _209 = move ((_205 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_211);
        _211 = move _209;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _211) -> [return: bb94, unwind: bb178];
    }

    bb94: {
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_203);
        _369 = discriminant(_205);
        _331 = const false;
        _332 = const false;
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_202);
        goto -> bb146;
    }

    bb95: {
        StorageDead(_203);
        _201 = (((*_202).5: state::reserve::ReserveLiquidity).2: anchor_lang::prelude::Pubkey);
        drop(_204) -> [return: bb169, unwind: bb178];
    }

    bb96: {
        switchInt(move _213) -> [0: bb101, otherwise: bb97];
    }

    bb97: {
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = ConstraintAddress;
        _219 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _220) -> [return: bb98, unwind: bb162];
    }

    bb98: {
        StorageDead(_220);
        _218 = anchor_lang::error::Error::with_account_name::<&str>(move _219, const "reserve_liquidity_fee_receiver") -> [return: bb99, unwind: bb162];
    }

    bb99: {
        StorageDead(_219);
        StorageLive(_221);
        StorageLive(_222);
        _222 = _199;
        StorageLive(_223);
        _223 = _201;
        _221 = (move _222, move _223);
        StorageDead(_223);
        StorageDead(_222);
        _217 = anchor_lang::error::Error::with_pubkeys(move _218, move _221) -> [return: bb100, unwind: bb162];
    }

    bb100: {
        StorageDead(_221);
        StorageDead(_218);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _217);
        StorageDead(_217);
        StorageDead(_213);
        goto -> bb146;
    }

    bb101: {
        StorageDead(_215);
        StorageDead(_214);
        _198 = const ();
        StorageDead(_213);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_51;
        _228 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _229) -> [return: bb102, unwind: bb162];
    }

    bb102: {
        _227 = &(*_228);
        StorageDead(_229);
        _226 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _227) -> [return: bb103, unwind: bb162];
    }

    bb103: {
        StorageDead(_227);
        _225 = ((*_226).6: bool);
        switchInt(move _225) -> [0: bb104, otherwise: bb107];
    }

    bb104: {
        StorageDead(_228);
        StorageDead(_226);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = ConstraintMut;
        _232 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _233) -> [return: bb105, unwind: bb162];
    }

    bb105: {
        StorageDead(_233);
        _231 = anchor_lang::error::Error::with_account_name::<&str>(move _232, const "reserve_supply_liquidity") -> [return: bb106, unwind: bb162];
    }

    bb106: {
        StorageDead(_232);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _231);
        StorageDead(_231);
        StorageDead(_225);
        StorageDead(_224);
        goto -> bb149;
    }

    bb107: {
        StorageDead(_228);
        StorageDead(_226);
        _224 = const ();
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _404 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _236 = &(*_404);
        _235 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _236) -> [return: bb108, unwind: bb162];
    }

    bb108: {
        StorageDead(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &_6;
        _242 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _243) -> [return: bb109, unwind: bb162];
    }

    bb109: {
        StorageDead(_243);
        _241 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _242) -> [return: bb110, unwind: bb162];
    }

    bb110: {
        _329 = const true;
        _330 = const true;
        StorageDead(_242);
        _244 = discriminant(_241);
        switchInt(move _244) -> [0: bb111, 1: bb112, otherwise: bb5];
    }

    bb111: {
        StorageLive(_248);
        _248 = move ((_241 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _240 = move _248;
        StorageDead(_248);
        _239 = &_240;
        _238 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _239) -> [return: bb114, unwind: bb158];
    }

    bb112: {
        StorageLive(_245);
        _245 = move ((_241 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_247);
        _247 = move _245;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _247) -> [return: bb113, unwind: bb177];
    }

    bb113: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_239);
        _367 = discriminant(_241);
        _329 = const false;
        _330 = const false;
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_238);
        goto -> bb145;
    }

    bb114: {
        StorageDead(_239);
        _237 = (((*_238).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        drop(_240) -> [return: bb170, unwind: bb177];
    }

    bb115: {
        switchInt(move _249) -> [0: bb120, otherwise: bb116];
    }

    bb116: {
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = ConstraintAddress;
        _255 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _256) -> [return: bb117, unwind: bb162];
    }

    bb117: {
        StorageDead(_256);
        _254 = anchor_lang::error::Error::with_account_name::<&str>(move _255, const "reserve_supply_liquidity") -> [return: bb118, unwind: bb162];
    }

    bb118: {
        StorageDead(_255);
        StorageLive(_257);
        StorageLive(_258);
        _258 = _235;
        StorageLive(_259);
        _259 = _237;
        _257 = (move _258, move _259);
        StorageDead(_259);
        StorageDead(_258);
        _253 = anchor_lang::error::Error::with_pubkeys(move _254, move _257) -> [return: bb119, unwind: bb162];
    }

    bb119: {
        StorageDead(_257);
        StorageDead(_254);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _253);
        StorageDead(_253);
        StorageDead(_249);
        goto -> bb145;
    }

    bb120: {
        StorageDead(_251);
        StorageDead(_250);
        _234 = const ();
        StorageDead(_249);
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = const _;
        _268 = &(*_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_66;
        _273 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _274) -> [return: bb121, unwind: bb162];
    }

    bb121: {
        _272 = &_273;
        StorageDead(_274);
        _271 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _272) -> [return: bb122, unwind: bb162];
    }

    bb122: {
        _270 = &(*_271);
        StorageDead(_272);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_66;
        _286 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _287) -> [return: bb123, unwind: bb162];
    }

    bb123: {
        StorageDead(_287);
        _285 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _286) -> [return: bb124, unwind: bb162];
    }

    bb124: {
        _326 = const true;
        _327 = const true;
        StorageDead(_286);
        _288 = discriminant(_285);
        switchInt(move _288) -> [0: bb125, 1: bb126, otherwise: bb5];
    }

    bb125: {
        StorageLive(_292);
        _292 = move ((_285 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _284 = move _292;
        StorageDead(_292);
        _283 = &_284;
        _282 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _283) -> [return: bb128, unwind: bb157];
    }

    bb126: {
        StorageLive(_289);
        _289 = move ((_285 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_291);
        _291 = move _289;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _291) -> [return: bb127, unwind: bb176];
    }

    bb127: {
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_262);
        goto -> bb172;
    }

    bb128: {
        StorageDead(_283);
        _281 = ((*_282).1: u64);
        _280 = move _281 as u8 (IntToInt);
        StorageDead(_281);
        _279 = [move _280];
        _278 = &_279;
        StorageDead(_280);
        StorageLive(_293);
        _293 = RangeFull;
        _277 = <[u8; 1] as Index<RangeFull>>::index(move _278, move _293) -> [return: bb129, unwind: bb157];
    }

    bb129: {
        StorageDead(_293);
        StorageDead(_278);
        _276 = &(*_277);
        _275 = &(*_276);
        _267 = [move _268, move _270, move _275];
        StorageDead(_275);
        StorageDead(_270);
        StorageDead(_268);
        _266 = &_267;
        _265 = &(*_266);
        _264 = move _265 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_265);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &_1;
        _325 = deref_copy (*_295);
        _294 = &(*_325);
        _263 = anchor_lang::prelude::Pubkey::create_program_address(move _264, move _294) -> [return: bb130, unwind: bb157];
    }

    bb130: {
        StorageDead(_294);
        StorageDead(_264);
        StorageLive(_296);
        _296 = {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18};
        _262 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_redeem_fees.rs:46:10: 46:18}>(move _263, move _296) -> [return: bb131, unwind: bb157];
    }

    bb131: {
        StorageDead(_296);
        StorageDead(_263);
        _261 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _262) -> [return: bb132, unwind: bb157];
    }

    bb132: {
        StorageDead(_262);
        _297 = discriminant(_261);
        switchInt(move _297) -> [0: bb133, 1: bb134, otherwise: bb5];
    }

    bb133: {
        StorageLive(_301);
        _301 = ((_261 as Continue).0: anchor_lang::prelude::Pubkey);
        _260 = _301;
        StorageDead(_301);
        _359 = discriminant(_261);
        StorageDead(_295);
        drop(_284) -> [return: bb171, unwind: bb176];
    }

    bb134: {
        StorageLive(_298);
        _298 = move ((_261 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_300);
        _300 = move _298;
        _0 = <std::result::Result<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _300) -> [return: bb135, unwind: bb175];
    }

    bb135: {
        StorageDead(_300);
        StorageDead(_298);
        _363 = discriminant(_261);
        StorageDead(_295);
        drop(_284) -> [return: bb172, unwind: bb176];
    }

    bb136: {
        _304 = &_305;
        StorageDead(_306);
        StorageLive(_307);
        _307 = &_260;
        _303 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _304, move _307) -> [return: bb137, unwind: bb162];
    }

    bb137: {
        switchInt(move _303) -> [0: bb143, otherwise: bb138];
    }

    bb138: {
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = ConstraintSeeds;
        _311 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _312) -> [return: bb139, unwind: bb162];
    }

    bb139: {
        StorageDead(_312);
        _310 = anchor_lang::error::Error::with_account_name::<&str>(move _311, const "lending_market_authority") -> [return: bb140, unwind: bb162];
    }

    bb140: {
        _328 = const true;
        StorageDead(_311);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_81;
        _314 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _315) -> [return: bb141, unwind: bb174];
    }

    bb141: {
        StorageDead(_315);
        StorageLive(_316);
        _316 = _260;
        _313 = (move _314, move _316);
        StorageDead(_316);
        StorageDead(_314);
        _328 = const false;
        _309 = anchor_lang::error::Error::with_pubkeys(move _310, move _313) -> [return: bb142, unwind: bb174];
    }

    bb142: {
        StorageDead(_313);
        _328 = const false;
        StorageDead(_310);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Err(move _309);
        StorageDead(_309);
        StorageDead(_303);
        StorageDead(_302);
        goto -> bb144;
    }

    bb143: {
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_304);
        _302 = const ();
        StorageDead(_303);
        StorageDead(_302);
        StorageLive(_317);
        StorageLive(_318);
        _318 = move _6;
        StorageLive(_319);
        _319 = move _21;
        StorageLive(_320);
        _320 = move _36;
        StorageLive(_321);
        _321 = move _51;
        StorageLive(_322);
        _322 = move _66;
        StorageLive(_323);
        _323 = move _81;
        StorageLive(_324);
        _324 = move _96;
        _317 = handlers::handler_redeem_fees::RedeemFees::<'_> { reserve: move _318, reserve_liquidity_mint: move _319, reserve_liquidity_fee_receiver: move _320, reserve_supply_liquidity: move _321, lending_market: move _322, lending_market_authority: move _323, token_program: move _324 };
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_318);
        _0 = std::result::Result::<handlers::handler_redeem_fees::RedeemFees<'_>, anchor_lang::error::Error>::Ok(move _317);
        StorageDead(_317);
        StorageDead(_260);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb156;
    }

    bb144: {
        StorageDead(_260);
        goto -> bb149;
    }

    bb145: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb149;
    }

    bb146: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb149;
    }

    bb147: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb149;
    }

    bb148: {
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_96);
        drop(_81) -> [return: bb150, unwind: bb163];
    }

    bb150: {
        StorageDead(_81);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_66);
        drop(_51) -> [return: bb152, unwind: bb164];
    }

    bb152: {
        StorageDead(_51);
        drop(_36) -> [return: bb153, unwind: bb165];
    }

    bb153: {
        StorageDead(_36);
        drop(_21) -> [return: bb154, unwind: bb166];
    }

    bb154: {
        StorageDead(_21);
        goto -> bb155;
    }

    bb155: {
        StorageDead(_6);
        goto -> bb156;
    }

    bb156: {
        return;
    }

    bb157 (cleanup): {
        drop(_284) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_240) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_204) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_152) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_124) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_81) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        drop(_51) -> [return: bb164, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        drop(_36) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_21) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        resume;
    }

    bb167: {
        _351 = discriminant(_125);
        _335 = const false;
        _336 = const false;
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_66;
        _133 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _134) -> [return: bb55, unwind: bb162];
    }

    bb168: {
        _353 = discriminant(_153);
        _333 = const false;
        _334 = const false;
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_147;
        StorageLive(_163);
        _163 = &_149;
        _161 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _162, move _163) -> [return: bb69, unwind: bb162];
    }

    bb169: {
        _355 = discriminant(_205);
        _331 = const false;
        _332 = const false;
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_202);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_199;
        StorageLive(_215);
        _215 = &_201;
        _213 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _214, move _215) -> [return: bb96, unwind: bb162];
    }

    bb170: {
        _357 = discriminant(_241);
        _329 = const false;
        _330 = const false;
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_238);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &_235;
        StorageLive(_251);
        _251 = &_237;
        _249 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _250, move _251) -> [return: bb115, unwind: bb162];
    }

    bb171: {
        _361 = discriminant(_285);
        _326 = const false;
        _327 = const false;
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_261);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &_81;
        _305 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _306) -> [return: bb136, unwind: bb162];
    }

    bb172: {
        _365 = discriminant(_285);
        _326 = const false;
        _327 = const false;
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_261);
        goto -> bb144;
    }

    bb173 (cleanup): {
        drop(_310) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        switchInt(_328) -> [0: bb162, otherwise: bb173];
    }

    bb175 (cleanup): {
        _389 = discriminant(_261);
        goto -> bb157;
    }

    bb176 (cleanup): {
        _390 = discriminant(_285);
        goto -> bb162;
    }

    bb177 (cleanup): {
        _391 = discriminant(_241);
        goto -> bb162;
    }

    bb178 (cleanup): {
        _392 = discriminant(_205);
        goto -> bb162;
    }

    bb179 (cleanup): {
        _393 = discriminant(_153);
        goto -> bb162;
    }

    bb180 (cleanup): {
        _394 = discriminant(_125);
        goto -> bb162;
    }

    bb181 (cleanup): {
        _395 = discriminant(_97);
        goto -> bb162;
    }

    bb182 (cleanup): {
        _396 = discriminant(_82);
        goto -> bb163;
    }

    bb183 (cleanup): {
        _397 = discriminant(_67);
        goto -> bb163;
    }

    bb184 (cleanup): {
        _398 = discriminant(_52);
        goto -> bb164;
    }

    bb185 (cleanup): {
        _399 = discriminant(_37);
        goto -> bb165;
    }

    bb186 (cleanup): {
        _400 = discriminant(_22);
        goto -> bb166;
    }

    bb187 (cleanup): {
        _401 = discriminant(_7);
        goto -> bb166;
    }
}
