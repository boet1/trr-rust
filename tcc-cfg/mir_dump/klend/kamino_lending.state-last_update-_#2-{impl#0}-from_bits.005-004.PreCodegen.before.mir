// MIR for `last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\lib.rs:618:9: 618:29>::from_bits` before PreCodegen

fn last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\lib.rs:618:9: 618:29>::from_bits(_1: u8) -> std::option::Option<last_update::PriceStatusFlags> {
    debug bits => _1;
    let mut _0: std::option::Option<state::last_update::PriceStatusFlags>;
    let _2: u8;
    let mut _4: state::last_update::PriceStatusFlags;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: u8;
    let mut _8: u8;
    let mut _9: state::last_update::PriceStatusFlags;
    let mut _10: u8;
    scope 1 {
        debug bits => _2;
        let _3: u8;
        scope 2 {
            debug truncated => _3;
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = _1;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        _4 = last_update::_::<impl last_update::PriceStatusFlags>::from_bits_truncate(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = (_4.0: u8);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _3;
        StorageLive(_8);
        _8 = _2;
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        _9 = last_update::PriceStatusFlags(move _10);
        StorageDead(_10);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::Some(move _9);
        StorageDead(_9);
        goto -> bb4;
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::None;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
