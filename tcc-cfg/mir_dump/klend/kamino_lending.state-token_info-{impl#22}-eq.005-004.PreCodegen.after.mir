// MIR for `token_info::<impl at programs\klend\src\state\token_info.rs:191:51: 191:60>::eq` after PreCodegen

fn token_info::<impl at programs\klend\src\state\token_info.rs:191:51: 191:60>::eq(_1: &token_info::PriceHeuristic, _2: &token_info::PriceHeuristic) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: u64;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u64);
        StorageLive(_5);
        _5 = ((*_2).0: u64);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u64);
        StorageLive(_8);
        _8 = ((*_2).1: u64);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = ((*_1).2: u64);
        StorageLive(_10);
        _10 = ((*_2).2: u64);
        _0 = Eq(move _9, move _10);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb6;
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb5;
    }

    bb5: {
        _0 = const false;
        goto -> bb6;
    }

    bb6: {
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
