// MIR for `post_repay_obligation_invariants` after PreCodegen

fn post_repay_obligation_invariants(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: &obligation::Obligation, _3: &reserve::Reserve, _4: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _5: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug amount => _1;
    debug obligation => _2;
    debug reserve => _3;
    debug liquidity_asset_mv => _4;
    debug min_accepted_net_value => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _7: &state::reserve::Reserve;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: u128;
    let mut _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: &state::reserve::Reserve;
    let mut _16: bool;
    let mut _17: u8;
    let mut _19: u128;
    let _20: ();
    let mut _21: bool;
    let mut _22: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: &i32;
    let _24: i32;
    let mut _26: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _27: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _28: bool;
    let mut _29: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: &i32;
    let _31: i32;
    let mut _32: bool;
    let mut _33: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _34: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _35: !;
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[&str; 2];
    let _46: &[&str; 2];
    let _47: [&str; 2];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let mut _49: &[core::fmt::rt::Argument<'_>; 2];
    let _50: &[core::fmt::rt::Argument<'_>; 2];
    let _51: [core::fmt::rt::Argument<'_>; 2];
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &utils::fraction::FractionDisplay<'_>;
    let _54: &utils::fraction::FractionDisplay<'_>;
    let _55: utils::fraction::FractionDisplay<'_>;
    let mut _56: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &&str;
    let _59: &&str;
    let _60: &str;
    let mut _61: &state::reserve::Reserve;
    let mut _62: anchor_lang::error::Error;
    let mut _63: anchor_lang::error::AnchorError;
    let mut _64: std::string::String;
    let mut _65: &LendingError;
    let _66: LendingError;
    let mut _67: u32;
    let mut _68: LendingError;
    let mut _69: std::string::String;
    let mut _70: &LendingError;
    let _71: LendingError;
    let mut _72: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _73: anchor_lang::error::ErrorOrigin;
    let mut _74: anchor_lang::error::Source;
    let mut _75: std::option::Option<anchor_lang::error::ComparedValues>;
    let _76: ();
    let mut _77: bool;
    let mut _78: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _79: &i32;
    let _80: i32;
    let mut _82: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _83: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _84: bool;
    let mut _85: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _86: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _87: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _88: &state::obligation::Obligation;
    let mut _89: !;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: &std::string::String;
    let _94: &std::string::String;
    let _95: std::string::String;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[&str; 3];
    let _100: &[&str; 3];
    let _101: [&str; 3];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let mut _103: &[core::fmt::rt::Argument<'_>; 3];
    let _104: &[core::fmt::rt::Argument<'_>; 3];
    let _105: [core::fmt::rt::Argument<'_>; 3];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &utils::fraction::FractionDisplay<'_>;
    let _108: &utils::fraction::FractionDisplay<'_>;
    let _109: utils::fraction::FractionDisplay<'_>;
    let mut _110: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &utils::fraction::FractionDisplay<'_>;
    let _113: &utils::fraction::FractionDisplay<'_>;
    let _114: utils::fraction::FractionDisplay<'_>;
    let mut _115: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _116: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _117: &state::obligation::Obligation;
    let mut _118: core::fmt::rt::Argument<'_>;
    let mut _119: &&str;
    let _120: &&str;
    let _121: &str;
    let mut _122: &state::reserve::Reserve;
    let mut _123: &[core::fmt::rt::Placeholder];
    let mut _124: &[core::fmt::rt::Placeholder; 3];
    let _125: &[core::fmt::rt::Placeholder; 3];
    let _126: [core::fmt::rt::Placeholder; 3];
    let mut _127: core::fmt::rt::Placeholder;
    let mut _128: core::fmt::rt::Alignment;
    let mut _129: core::fmt::rt::Count;
    let mut _130: core::fmt::rt::Count;
    let mut _131: core::fmt::rt::Placeholder;
    let mut _132: core::fmt::rt::Alignment;
    let mut _133: core::fmt::rt::Count;
    let mut _134: core::fmt::rt::Count;
    let mut _135: core::fmt::rt::Placeholder;
    let mut _136: core::fmt::rt::Alignment;
    let mut _137: core::fmt::rt::Count;
    let mut _138: core::fmt::rt::Count;
    let mut _139: core::fmt::rt::UnsafeArg;
    let mut _140: anchor_lang::error::Error;
    let mut _141: anchor_lang::error::AnchorError;
    let mut _142: std::string::String;
    let mut _143: &LendingError;
    let _144: LendingError;
    let mut _145: u32;
    let mut _146: LendingError;
    let mut _147: std::string::String;
    let mut _148: &LendingError;
    let _149: LendingError;
    let mut _150: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _151: anchor_lang::error::ErrorOrigin;
    let mut _152: anchor_lang::error::Source;
    let mut _153: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _154: ();
    scope 1 {
        debug asset_mv => _6;
        let _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug new_total_bf_debt_mv => _9;
            let _18: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug total_deposited_mv => _18;
                let _25: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                let _81: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                let mut _161: &i32;
                let mut _163: &i32;
                scope 4 {
                    debug new_liquidity_asset_mv => _25;
                    let _42: std::string::String;
                    let mut _155: &LendingError;
                    let mut _156: &LendingError;
                    let mut _157: &[&str; 2];
                    let mut _162: &i32;
                    scope 5 {
                        debug res => _42;
                    }
                }
                scope 6 {
                    debug new_ltv => _81;
                    let _96: std::string::String;
                    let mut _158: &LendingError;
                    let mut _159: &LendingError;
                    let mut _160: &[&str; 3];
                    scope 7 {
                        debug res => _96;
                    }
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_3);
        StorageLive(_8);
        _8 = _1;
        _6 = calculate_market_value_from_liquidity_amount(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_2).8: u128);
        _10 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _6;
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_2).14: u8);
        _16 = Ne(move _17, const _);
        StorageDead(_17);
        _14 = reserve::Reserve::borrow_factor_f(move _15, move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageDead(_15);
        _12 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        _9 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _10, move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_2).6: u128);
        _18 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_4;
        StorageLive(_23);
        _163 = const _;
        _23 = &(*_163);
        _21 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::ne(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _21) -> [0: bb30, otherwise: bb8];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _4;
        StorageLive(_27);
        _27 = _6;
        _25 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _26, move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_25;
        StorageLive(_30);
        _162 = const _;
        _30 = &(*_162);
        _28 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _29, move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _28) -> [0: bb28, otherwise: bb11];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_25;
        StorageLive(_34);
        _34 = &_5;
        _32 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _33, move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _32) -> [0: bb27, otherwise: bb13];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _157 = const _;
        _46 = &(*_157);
        _45 = &(*_46);
        _44 = move _45 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_25;
        _55 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _56) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _53) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_53);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_3);
        _60 = reserve::Reserve::token_symbol(move _61) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _58) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_58);
        _51 = [move _52, move _57];
        StorageDead(_57);
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = move _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_49);
        _43 = Arguments::<'_>::new_v1(move _44, move _48) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_48);
        StorageDead(_44);
        _42 = format(move _43) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        _41 = move _42;
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <std::string::String as Deref>::deref(move _39) -> [return: bb20, unwind: bb66];
    }

    bb20: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb21, unwind: bb66];
    }

    bb21: {
        StorageDead(_37);
        drop(_41) -> [return: bb22, unwind: bb67];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _156 = const _;
        _65 = &(*_156);
        _64 = LendingError::name(move _65) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        _68 = LendingError::NetValueRemainingTooSmall;
        _67 = <LendingError as Into<u32>>::into(move _68) -> [return: bb24, unwind: bb65];
    }

    bb24: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _155 = const _;
        _70 = &(*_155);
        _69 = <LendingError as ToString>::to_string(move _70) -> [return: bb25, unwind: bb65];
    }

    bb25: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3075_u32 };
        _73 = anchor_lang::error::ErrorOrigin::Source(move _74);
        StorageDead(_74);
        _72 = std::option::Option::<ErrorOrigin>::Some(move _73);
        StorageDead(_73);
        StorageLive(_75);
        _75 = std::option::Option::<ComparedValues>::None;
        _63 = anchor_lang::error::AnchorError { error_name: move _64, error_code_number: move _67, error_msg: move _69, error_origin: move _72, compared_values: move _75 };
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_64);
        _62 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _63) -> [return: bb26, unwind: bb67];
    }

    bb26: {
        StorageDead(_63);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _62);
        StorageDead(_62);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb61;
    }

    bb27: {
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb29;
    }

    bb29: {
        _20 = const ();
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb31;
    }

    bb30: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = const ();
        goto -> bb31;
    }

    bb31: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_18;
        StorageLive(_79);
        _161 = const _;
        _79 = &(*_161);
        _77 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _78, move _79) -> [return: bb32, unwind continue];
    }

    bb32: {
        switchInt(move _77) -> [0: bb59, otherwise: bb33];
    }

    bb33: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _9;
        StorageLive(_83);
        _83 = _18;
        _81 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _82, move _83) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_81;
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_2);
        _87 = obligation::Obligation::loan_to_value(move _88) -> [return: bb35, unwind continue];
    }

    bb35: {
        _86 = &_87;
        StorageDead(_88);
        _84 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _85, move _86) -> [return: bb36, unwind continue];
    }

    bb36: {
        switchInt(move _84) -> [0: bb58, otherwise: bb37];
    }

    bb37: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _160 = const _;
        _100 = &(*_160);
        _99 = &(*_100);
        _98 = move _99 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_81;
        _109 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _110) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _107) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_107);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &(*_2);
        _116 = obligation::Obligation::unhealthy_loan_to_value(move _117) -> [return: bb40, unwind continue];
    }

    bb40: {
        _115 = &_116;
        StorageDead(_117);
        _114 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _115) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _112) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_112);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_3);
        _121 = reserve::Reserve::token_symbol(move _122) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _119) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_119);
        _105 = [move _106, move _111, move _118];
        StorageDead(_118);
        StorageDead(_111);
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_103);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_129);
        _129 = core::fmt::rt::Count::Is(const 2_usize);
        StorageLive(_130);
        _130 = core::fmt::rt::Count::Implied;
        _127 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _128, const 0_u32, move _129, move _130) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        _132 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_133);
        _133 = core::fmt::rt::Count::Is(const 2_usize);
        StorageLive(_134);
        _134 = core::fmt::rt::Count::Implied;
        _131 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _132, const 0_u32, move _133, move _134) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_135);
        StorageLive(_136);
        _136 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_137);
        _137 = core::fmt::rt::Count::Implied;
        StorageLive(_138);
        _138 = core::fmt::rt::Count::Implied;
        _135 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _136, const 0_u32, move _137, move _138) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        _126 = [move _127, move _131, move _135];
        StorageDead(_135);
        StorageDead(_131);
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = move _124 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_124);
        StorageLive(_139);
        _139 = core::fmt::rt::UnsafeArg::new() -> [return: bb48, unwind continue];
    }

    bb48: {
        _97 = Arguments::<'_>::new_v1_formatted(move _98, move _102, move _123, move _139) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_139);
        StorageDead(_123);
        StorageDead(_102);
        StorageDead(_98);
        _96 = format(move _97) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_97);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        _95 = move _96;
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <std::string::String as Deref>::deref(move _93) -> [return: bb51, unwind: bb64];
    }

    bb51: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb52, unwind: bb64];
    }

    bb52: {
        StorageDead(_91);
        drop(_95) -> [return: bb53, unwind: bb67];
    }

    bb53: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _159 = const _;
        _143 = &(*_159);
        _142 = LendingError::name(move _143) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_143);
        StorageLive(_145);
        StorageLive(_146);
        _146 = LendingError::WorseLtvBlocked;
        _145 = <LendingError as Into<u32>>::into(move _146) -> [return: bb55, unwind: bb63];
    }

    bb55: {
        StorageDead(_146);
        StorageLive(_147);
        StorageLive(_148);
        _158 = const _;
        _148 = &(*_158);
        _147 = <LendingError as ToString>::to_string(move _148) -> [return: bb56, unwind: bb63];
    }

    bb56: {
        StorageDead(_148);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3090_u32 };
        _151 = anchor_lang::error::ErrorOrigin::Source(move _152);
        StorageDead(_152);
        _150 = std::option::Option::<ErrorOrigin>::Some(move _151);
        StorageDead(_151);
        StorageLive(_153);
        _153 = std::option::Option::<ComparedValues>::None;
        _141 = anchor_lang::error::AnchorError { error_name: move _142, error_code_number: move _145, error_msg: move _147, error_origin: move _150, compared_values: move _153 };
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_142);
        _140 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _141) -> [return: bb57, unwind: bb67];
    }

    bb57: {
        StorageDead(_141);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _140);
        StorageDead(_140);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb61;
    }

    bb58: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        _76 = const ();
        StorageDead(_84);
        StorageDead(_81);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_79);
        StorageDead(_78);
        _76 = const ();
        goto -> bb60;
    }

    bb60: {
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_154);
        _154 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _154);
        StorageDead(_154);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb62;
    }

    bb61: {
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb62;
    }

    bb62: {
        return;
    }

    bb63 (cleanup): {
        drop(_142) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_95) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_64) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_41) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        resume;
    }
}
