// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::div_mod` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::div_mod(_1: uint_types::U256, _2: uint_types::U256) -> (uint_types::U256, uint_types::U256) {
    debug self => _1;
    debug other => _2;
    let mut _0: (utils::fraction::uint_types::U256, utils::fraction::uint_types::U256);
    let _3: usize;
    let mut _4: &utils::fraction::uint_types::U256;
    let mut _6: &utils::fraction::uint_types::U256;
    let _7: ();
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: !;
    let _11: !;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[&str; 1];
    let _15: &[&str; 1];
    let _16: [&str; 1];
    let _17: ();
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: !;
    let mut _22: utils::fraction::uint_types::U256;
    let mut _23: utils::fraction::uint_types::U256;
    let _24: ();
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: !;
    let mut _28: utils::fraction::uint_types::U256;
    let mut _29: u64;
    let mut _30: &utils::fraction::uint_types::U256;
    let mut _33: (usize, usize);
    let mut _35: usize;
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: (usize, bool);
    let mut _43: utils::fraction::uint_types::U256;
    let mut _44: utils::fraction::uint_types::U256;
    let mut _45: usize;
    let mut _46: usize;
    scope 1 {
        debug my_bits => _3;
        let _5: usize;
        scope 2 {
            debug your_bits => _5;
            let _31: usize;
            let _32: usize;
            let _34: usize;
            let mut _47: &[&str; 1];
            scope 3 {
                debug n => _31;
                debug m => _32;
            }
            scope 4 {
                debug my_words => _34;
                let _36: usize;
                scope 5 {
                    debug your_words => _36;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = uint_types::U256::bits(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = uint_types::U256::bits(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _5;
        _8 = Ne(move _9, const 0_usize);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_9);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _3;
        StorageLive(_20);
        _20 = _5;
        _18 = Lt(move _19, move _20);
        switchInt(move _18) -> [0: bb7, otherwise: bb6];
    }

    bb4: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _47 = const _;
        _15 = &(*_47);
        _14 = &(*_15);
        _13 = move _14 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_14);
        _12 = Arguments::<'_>::new_const(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        _11 = panic_fmt(move _12) -> unwind continue;
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_22);
        _22 = uint_types::U256::zero() -> [return: bb8, unwind continue];
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = const ();
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _5;
        _25 = Le(move _26, const _);
        switchInt(move _25) -> [0: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_23);
        _23 = _1;
        _0 = (move _22, move _23);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb17;
    }

    bb9: {
        StorageDead(_26);
        StorageLive(_28);
        _28 = _1;
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_2;
        _29 = uint_types::U256::low_u64(move _30) -> [return: bb11, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _24 = const ();
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _3;
        _34 = uint_types::U256::words(move _35) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageDead(_30);
        _0 = uint_types::U256::div_mod_small(move _28, move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb17;
    }

    bb13: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _5;
        _36 = uint_types::U256::words(move _37) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_37);
        StorageLive(_38);
        _38 = _36;
        StorageLive(_39);
        StorageLive(_40);
        _40 = _34;
        StorageLive(_41);
        _41 = _36;
        _42 = CheckedSub(_40, _41);
        assert(!move (_42.1: bool), "attempt to compute `{} - {}`, which would overflow", move _40, move _41) -> [success: bb15, unwind continue];
    }

    bb15: {
        _39 = move (_42.0: usize);
        StorageDead(_41);
        StorageDead(_40);
        _33 = (move _38, move _39);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_31);
        _31 = (_33.0: usize);
        StorageLive(_32);
        _32 = (_33.1: usize);
        StorageDead(_33);
        StorageLive(_43);
        _43 = _1;
        StorageLive(_44);
        _44 = _2;
        StorageLive(_45);
        _45 = _31;
        StorageLive(_46);
        _46 = _32;
        _0 = uint_types::U256::div_mod_knuth(move _43, move _44, move _45, move _46) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}
