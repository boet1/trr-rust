digraph Mir_0_2692 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_most_recent_price_and_twap::{closure#2}(_1: Closure(DefId(0:2692 ~ kamino_lending[6389]::utils::prices::get_most_recent_price_and_twap::{closure#2}), [i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;,)) -&gt; std::option::Option&lt;utils::prices::types::TimestampedPriceWithTwap&gt;, []), (&amp;ReErased state::token_info::TokenInfo,)]), _2: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;) -&gt; std::option::Option&lt;utils::prices::types::TimestampedPriceWithTwap&gt;<br align="left"/>let mut _3: std::result::Result&lt;utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error&gt;;<br align="left"/>let mut _4: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _5: &amp;ReErased state::token_info::ScopeConfiguration;<br align="left"/>let _6: &amp;ReErased state::token_info::ScopeConfiguration;<br align="left"/>let mut _7: &amp;ReErased state::token_info::TokenInfo;<br align="left"/>debug a =&gt; _2;<br align="left"/>debug token_info =&gt; (*(_1.0: &amp;state::token_info::TokenInfo));<br align="left"/>>;
    bb0__0_2692 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = &amp;(*_2)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_7 = deref_copy (_1.0: &amp;state::token_info::TokenInfo)<br/>_6 = &amp;((*_7).5: state::token_info::ScopeConfiguration)<br/>_5 = &amp;(*_6)<br/></td></tr><tr><td align="left">_3 = get_scope_price_and_twap(move _4, move _5)</td></tr></table>>];
    bb1__0_2692 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">_0 = std::result::Result::&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt;::ok(move _3)</td></tr></table>>];
    bb2__0_2692 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb3__0_2692 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">3 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_2692 -> bb1__0_2692 [label="return"];
    bb1__0_2692 -> bb2__0_2692 [label="return"];
    bb1__0_2692 -> bb3__0_2692 [label="unwind"];
}
