// MIR for `__cpi_client_accounts_refresh_reserve::<impl at programs\klend\src\handlers\handler_refresh_reserve.rs:65:10: 65:18>::to_account_metas` before PreCodegen

fn __cpi_client_accounts_refresh_reserve::<impl at programs\klend\src\handlers\handler_refresh_reserve.rs:65:10: 65:18>::to_account_metas(_1: &__cpi_client_accounts_refresh_reserve::RefreshReserve<'_>, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::AccountInfo<'_>;
    let _9: &anchor_lang::prelude::AccountInfo<'_>;
    let _10: ();
    let mut _11: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _12: anchor_lang::prelude::AccountMeta;
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _15: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: ();
    let mut _17: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _18: isize;
    let _20: ();
    let mut _21: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::AccountInfo<'_>;
    let _25: ();
    let mut _26: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _27: anchor_lang::prelude::AccountMeta;
    let mut _28: anchor_lang::prelude::Pubkey;
    let mut _29: &anchor_lang::prelude::Pubkey;
    let _30: ();
    let mut _31: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _32: isize;
    let _34: ();
    let mut _35: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _36: anchor_lang::prelude::AccountMeta;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let _39: ();
    let mut _40: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _41: anchor_lang::prelude::AccountMeta;
    let mut _42: anchor_lang::prelude::Pubkey;
    let mut _43: &anchor_lang::prelude::Pubkey;
    let _44: ();
    let mut _45: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _46: isize;
    let _48: ();
    let mut _49: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _50: anchor_lang::prelude::AccountMeta;
    let mut _51: anchor_lang::prelude::Pubkey;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let _53: ();
    let mut _54: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _55: anchor_lang::prelude::AccountMeta;
    let mut _56: anchor_lang::prelude::Pubkey;
    let mut _57: &anchor_lang::prelude::Pubkey;
    let _58: ();
    let mut _59: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _60: isize;
    let _62: ();
    let mut _63: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _64: anchor_lang::prelude::AccountMeta;
    let mut _65: anchor_lang::prelude::Pubkey;
    let mut _66: &anchor_lang::prelude::AccountInfo<'_>;
    let _67: ();
    let mut _68: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _69: anchor_lang::prelude::AccountMeta;
    let mut _70: anchor_lang::prelude::Pubkey;
    let mut _71: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
        scope 2 {
            debug pyth_oracle => _19;
            let _19: &anchor_lang::prelude::AccountInfo<'_>;
        }
        scope 3 {
            debug switchboard_price_oracle => _33;
            let _33: &anchor_lang::prelude::AccountInfo<'_>;
        }
        scope 4 {
            debug switchboard_twap_oracle => _47;
            let _47: &anchor_lang::prelude::AccountInfo<'_>;
        }
        scope 5 {
            debug scope_prices => _61;
            let _61: &anchor_lang::prelude::AccountInfo<'_>;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _8 = &(*_9);
        _7 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _8) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        StorageDead(_8);
        _6 = anchor_lang::prelude::AccountMeta::new(move _7, const false) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb4, unwind: bb40];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_4);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut _3;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_1).1: anchor_lang::prelude::AccountInfo<'_>);
        _14 = &(*_15);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _14) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        StorageDead(_14);
        _12 = anchor_lang::prelude::AccountMeta::new_readonly(move _13, const false) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        StorageDead(_13);
        _10 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _11, move _12) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_15);
        StorageDead(_10);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).2: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _18 = discriminant((*_17));
        switchInt(move _18) -> [1: bb8, otherwise: bb12];
    }

    bb8: {
        StorageLive(_19);
        _19 = &(((*_17) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _3;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_19);
        _23 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _24) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        StorageDead(_24);
        _22 = anchor_lang::prelude::AccountMeta::new_readonly(move _23, const false) -> [return: bb10, unwind: bb40];
    }

    bb10: {
        StorageDead(_23);
        _20 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _21, move _22) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _16 = const ();
        StorageDead(_19);
        goto -> bb15;
    }

    bb12: {
        StorageLive(_25);
        StorageLive(_26);
        _26 = &mut _3;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _28 = (*_29);
        _27 = anchor_lang::prelude::AccountMeta::new_readonly(move _28, const false) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        StorageDead(_28);
        _25 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _26, move _27) -> [return: bb14, unwind: bb40];
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_29);
        StorageDead(_25);
        _16 = const ();
        goto -> bb15;
    }

    bb15: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_1).3: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _32 = discriminant((*_31));
        switchInt(move _32) -> [1: bb16, otherwise: bb20];
    }

    bb16: {
        StorageLive(_33);
        _33 = &(((*_31) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut _3;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_33);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _38) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        StorageDead(_38);
        _36 = anchor_lang::prelude::AccountMeta::new_readonly(move _37, const false) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        StorageDead(_37);
        _34 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _35, move _36) -> [return: bb19, unwind: bb40];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        _30 = const ();
        StorageDead(_33);
        goto -> bb23;
    }

    bb20: {
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut _3;
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _42 = (*_43);
        _41 = anchor_lang::prelude::AccountMeta::new_readonly(move _42, const false) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        StorageDead(_42);
        _39 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _40, move _41) -> [return: bb22, unwind: bb40];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_43);
        StorageDead(_39);
        _30 = const ();
        goto -> bb23;
    }

    bb23: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_1).4: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _46 = discriminant((*_45));
        switchInt(move _46) -> [1: bb24, otherwise: bb28];
    }

    bb24: {
        StorageLive(_47);
        _47 = &(((*_45) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &mut _3;
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_47);
        _51 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _52) -> [return: bb25, unwind: bb40];
    }

    bb25: {
        StorageDead(_52);
        _50 = anchor_lang::prelude::AccountMeta::new_readonly(move _51, const false) -> [return: bb26, unwind: bb40];
    }

    bb26: {
        StorageDead(_51);
        _48 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _49, move _50) -> [return: bb27, unwind: bb40];
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _44 = const ();
        StorageDead(_47);
        goto -> bb31;
    }

    bb28: {
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut _3;
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _56 = (*_57);
        _55 = anchor_lang::prelude::AccountMeta::new_readonly(move _56, const false) -> [return: bb29, unwind: bb40];
    }

    bb29: {
        StorageDead(_56);
        _53 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _54, move _55) -> [return: bb30, unwind: bb40];
    }

    bb30: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_57);
        StorageDead(_53);
        _44 = const ();
        goto -> bb31;
    }

    bb31: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &((*_1).5: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _60 = discriminant((*_59));
        switchInt(move _60) -> [1: bb32, otherwise: bb36];
    }

    bb32: {
        StorageLive(_61);
        _61 = &(((*_59) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &mut _3;
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_61);
        _65 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _66) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        StorageDead(_66);
        _64 = anchor_lang::prelude::AccountMeta::new_readonly(move _65, const false) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        StorageDead(_65);
        _62 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _63, move _64) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        _58 = const ();
        StorageDead(_61);
        goto -> bb39;
    }

    bb36: {
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut _3;
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _70 = (*_71);
        _69 = anchor_lang::prelude::AccountMeta::new_readonly(move _70, const false) -> [return: bb37, unwind: bb40];
    }

    bb37: {
        StorageDead(_70);
        _67 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _68, move _69) -> [return: bb38, unwind: bb40];
    }

    bb38: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_71);
        StorageDead(_67);
        _58 = const ();
        goto -> bb39;
    }

    bb39: {
        StorageDead(_59);
        StorageDead(_58);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb40 (cleanup): {
        drop(_3) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
