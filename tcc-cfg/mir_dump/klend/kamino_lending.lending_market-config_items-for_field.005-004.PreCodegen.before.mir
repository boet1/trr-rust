// MIR for `for_field` before PreCodegen

fn for_field(_1: &mut T) -> ConfigItemUpdater<'_, T, T, for<'a> fn(&'a mut T, T) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<T>}, for<'t, 'a> fn(&'t T, &'a T) -> std::result::Result<std::option::Option<&'t T>, anchor_lang::error::Error> {get_field_directly::<T>}, for<'a> fn(&'a T) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<T>}, for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<T>}> {
    debug field => _1;
    let mut _0: lending_market::config_items::ConfigItemUpdater<'_, T, T, for<'a> fn(&'a mut T, T) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<T>}, for<'t, 'a> fn(&'t T, &'a T) -> std::result::Result<std::option::Option<&'t T>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<T>}, for<'a> fn(&'a T) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<T>}, for<'a, 'b, 'c> fn(&'a T, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<T>}>;
    let mut _2: lending_market::config_items::ConfigItemUpdater<'_, T, (), (), (), (), ()>;
    let mut _3: &mut T;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &mut (*_1);
        _2 = for_object::<T>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _0 = ConfigItemUpdater::<'_, T, (), (), (), (), ()>::using_setter_and_getter::<T, for<'a> fn(&'a mut T, T) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<T>}, for<'t, 'a> fn(&'t T, &'a T) -> std::result::Result<std::option::Option<&'t T>, anchor_lang::error::Error> {get_field_directly::<T>}>(move _2, set_field_directly::<T>, get_field_directly::<T>) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
