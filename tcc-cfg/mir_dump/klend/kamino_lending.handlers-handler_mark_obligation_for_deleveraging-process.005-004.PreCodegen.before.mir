// MIR for `handlers::handler_mark_obligation_for_deleveraging::process` before PreCodegen

fn handlers::handler_mark_obligation_for_deleveraging::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_mark_obligation_for_deleveraging::MarkObligationForDeleveraging<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug autodeleverage_target_ltv_pct => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _4: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::RefMut<'_, state::obligation::Obligation>;
    let _14: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _16: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _25: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _31: &state::lending_market::LendingMarket;
    let _32: &state::lending_market::LendingMarket;
    let mut _33: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _34: &mut state::obligation::Obligation;
    let mut _35: &mut state::obligation::Obligation;
    let mut _36: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _37: u8;
    let mut _38: u64;
    let mut _39: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _40: i64;
    let mut _41: &mut handlers::handler_mark_obligation_for_deleveraging::MarkObligationForDeleveraging<'_>;
    let mut _42: &mut handlers::handler_mark_obligation_for_deleveraging::MarkObligationForDeleveraging<'_>;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    scope 1 {
        debug obligation => _3;
        let _13: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
        let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _22: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        scope 6 {
            debug lending_market => _13;
            let _23: anchor_lang::prelude::Clock;
            let _27: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _30: anchor_lang::prelude::Clock;
            scope 11 {
                debug clock => _23;
            }
            scope 12 {
                debug residual => _27;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _30;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _19;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _22;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _41 = deref_copy (_1.1: &mut handlers::handler_mark_obligation_for_deleveraging::MarkObligationForDeleveraging<'_>);
        _7 = &((*_41).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb29];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _4 = move _12;
        StorageDead(_12);
        _3 = &mut _4;
        _43 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _42 = deref_copy (_1.1: &mut handlers::handler_mark_obligation_for_deleveraging::MarkObligationForDeleveraging<'_>);
        _17 = &((*_42).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _16 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _17) -> [return: bb7, unwind: bb28];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb32];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _53 = discriminant(_5);
        StorageDead(_5);
        goto -> bb25;
    }

    bb7: {
        StorageDead(_17);
        _15 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = move ((_15 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _14 = move _22;
        StorageDead(_22);
        _13 = &_14;
        _45 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb12, unwind: bb27];
    }

    bb10: {
        StorageLive(_19);
        _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _21) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        _51 = discriminant(_15);
        StorageDead(_15);
        goto -> bb24;
    }

    bb12: {
        _24 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _25) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        StorageDead(_25);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = move ((_24 as Continue).0: anchor_lang::prelude::Clock);
        _23 = move _30;
        StorageDead(_30);
        _47 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &(*_13);
        _32 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _33) -> [return: bb17, unwind: bb27];
    }

    bb15: {
        StorageLive(_27);
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _29) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        _49 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        drop(_14) -> [return: bb24, unwind: bb28];
    }

    bb17: {
        _31 = &(*_32);
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &mut (*_3);
        _35 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _36) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _34 = &mut (*_35);
        StorageDead(_36);
        StorageLive(_37);
        _37 = _2;
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = (_23.4: i64);
        _39 = <u64 as TryFrom<i64>>::try_from(move _40) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        StorageDead(_40);
        _38 = std::result::Result::<u64, TryFromIntError>::unwrap(move _39) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        StorageDead(_39);
        _0 = lending_operations::mark_obligation_for_deleveraging(move _31, move _34, move _37, move _38) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_23);
        drop(_14) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_35);
        StorageDead(_32);
        goto -> bb26;
    }

    bb24: {
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_14) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_4) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        _55 = discriminant(_24);
        goto -> bb27;
    }

    bb31 (cleanup): {
        _56 = discriminant(_15);
        goto -> bb28;
    }

    bb32 (cleanup): {
        _57 = discriminant(_5);
        goto -> bb29;
    }
}
