digraph Mir_0_11903 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U128::words(_1: usize) -&gt; usize<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: !;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: usize;<br align="left"/>let mut _11: (usize, bool);<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: (usize, bool);<br align="left"/>debug bits =&gt; _1;<br align="left"/>>;
    bb0__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_3 = const true<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _1<br/>_5 = Gt(move _6, const 0_usize)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb2__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>_2 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/></td></tr><tr><td align="left">_7 = panic(const &quot;assertion failed: bits &gt; 0&quot;)</td></tr></table>>];
    bb4__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_2 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _1<br/>_11 = CheckedSub(_10, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_11.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _10, const 1_usize)</td></tr></table>>];
    bb6__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_9 = move (_11.0: usize)<br/>StorageDead(_10)<br/>_12 = Eq(const _, const 0_usize)<br/></td></tr><tr><td align="left">assert(!move _12, &quot;attempt to divide `{}` by zero&quot;, _9)</td></tr></table>>];
    bb7__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_8 = Div(move _9, const _)<br/>StorageDead(_9)<br/>_13 = CheckedAdd(const 1_usize, _8)<br/></td></tr><tr><td align="left">assert(!move (_13.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const 1_usize, move _8)</td></tr></table>>];
    bb8__0_11903 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_0 = move (_13.0: usize)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11903 -> bb4__0_11903 [label="0"];
    bb0__0_11903 -> bb1__0_11903 [label="otherwise"];
    bb1__0_11903 -> bb3__0_11903 [label="0"];
    bb1__0_11903 -> bb2__0_11903 [label="otherwise"];
    bb2__0_11903 -> bb5__0_11903 [label=""];
    bb4__0_11903 -> bb5__0_11903 [label=""];
    bb5__0_11903 -> bb6__0_11903 [label="success"];
    bb6__0_11903 -> bb7__0_11903 [label="success"];
    bb7__0_11903 -> bb8__0_11903 [label="success"];
}
