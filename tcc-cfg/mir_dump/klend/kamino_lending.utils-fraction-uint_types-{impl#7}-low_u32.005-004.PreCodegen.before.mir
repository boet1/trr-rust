// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::low_u32` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::low_u32(_1: &uint_types::U256) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let _2: &[u64; 4];
    let mut _3: u64;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    scope 1 {
        debug arr => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = &((*_1).0: [u64; 4]);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const 0_usize;
        _5 = Len((*_2));
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = (*_2)[_4];
        _0 = move _3 as u32 (IntToInt);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_4);
        return;
    }
}
