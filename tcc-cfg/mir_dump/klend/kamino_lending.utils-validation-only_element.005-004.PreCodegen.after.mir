// MIR for `only_element` after PreCodegen

fn only_element(_1: impl IntoIterator<Item = T>) -> std::option::Option<T> {
    debug iter => _1;
    let mut _0: std::option::Option<T>;
    let mut _2: std::option::Option<T>;
    let _3: ();
    let mut _4: <impl IntoIterator<Item = T> as std::iter::IntoIterator>::IntoIter;
    let mut _5: <impl IntoIterator<Item = T> as std::iter::IntoIterator>::IntoIter;
    let mut _6: impl IntoIterator<Item = T>;
    let mut _8: ();
    let _9: ();
    let mut _10: std::option::Option<T>;
    let mut _11: &mut <impl IntoIterator<Item = T> as std::iter::IntoIterator>::IntoIter;
    let mut _12: &mut <impl IntoIterator<Item = T> as std::iter::IntoIterator>::IntoIter;
    let mut _13: isize;
    let mut _14: !;
    let _16: ();
    let mut _17: bool;
    let mut _18: &std::option::Option<T>;
    let mut _19: !;
    let mut _20: std::option::Option<T>;
    let mut _21: T;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    scope 1 {
        debug the_only => _2;
        let mut _7: <impl IntoIterator<Item = T> as std::iter::IntoIterator>::IntoIter;
        scope 2 {
            debug iter => _7;
            let _15: T;
            scope 3 {
                debug element => _15;
            }
        }
    }

    bb0: {
        _22 = const false;
        StorageLive(_2);
        _2 = std::option::Option::<T>::None;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = move _1;
        _5 = <impl IntoIterator<Item = T> as IntoIterator>::into_iter(move _6) -> [return: bb1, unwind: bb19];
    }

    bb1: {
        StorageDead(_6);
        _4 = <<impl IntoIterator<Item = T> as IntoIterator>::IntoIter as IntoIterator>::into_iter(move _5) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        _7 = move _4;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _7;
        _11 = &mut (*_12);
        _10 = <<impl IntoIterator<Item = T> as IntoIterator>::IntoIter as Iterator>::next(move _11) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_15);
        _22 = const true;
        _15 = move ((_10 as Some).0: T);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_2;
        _17 = std::option::Option::<T>::is_some(move _18) -> [return: bb8, unwind: bb22];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _3 = const ();
        _23 = discriminant(_10);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        drop(_7) -> [return: bb13, unwind: bb19];
    }

    bb8: {
        switchInt(move _17) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_18);
        _0 = std::option::Option::<T>::None;
        StorageDead(_17);
        StorageDead(_16);
        drop(_15) -> [return: bb14, unwind: bb23];
    }

    bb10: {
        StorageDead(_18);
        _16 = const ();
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_20);
        StorageLive(_21);
        _22 = const false;
        _21 = move _15;
        _20 = std::option::Option::<T>::Some(move _21);
        StorageDead(_21);
        drop(_2) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        _2 = move _20;
        StorageDead(_20);
        _9 = const ();
        _22 = const false;
        StorageDead(_15);
        _25 = discriminant(_10);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _8 = const ();
        goto -> bb3;
    }

    bb12 (cleanup): {
        _2 = move _20;
        goto -> bb22;
    }

    bb13: {
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        _0 = move _2;
        StorageDead(_2);
        goto -> bb17;
    }

    bb14: {
        _22 = const false;
        StorageDead(_15);
        _27 = discriminant(_10);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        drop(_7) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        drop(_2) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_2);
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_7) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_2) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop(_15) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_22) -> [0: bb23, otherwise: bb21];
    }

    bb23 (cleanup): {
        _29 = discriminant(_10);
        goto -> bb18;
    }
}
