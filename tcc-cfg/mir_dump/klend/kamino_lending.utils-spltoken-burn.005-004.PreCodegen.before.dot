digraph Mir_0_2785 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn spltoken::burn(_1: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _3: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _4: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _5: u64) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _6: ();<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _8: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: anchor_lang::context::CpiContext&lt;ReErased, ReErased, ReErased, ReErased, anchor_spl::token::Burn&lt;ReErased&gt;&gt;;<br align="left"/>let mut _10: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _11: anchor_spl::token::Burn&lt;ReErased&gt;;<br align="left"/>let mut _12: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _13: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _14: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _20: ();<br align="left"/>let mut _21: ();<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: isize;<br align="left"/>let mut _26: isize;<br align="left"/>debug token_mint =&gt; _1;<br align="left"/>debug user_token_ata =&gt; _2;<br align="left"/>debug user =&gt; _3;<br align="left"/>debug token_program =&gt; _4;<br align="left"/>debug burn_amount =&gt; _5;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = move _4<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = move _1<br/>StorageLive(_13)<br/>_13 = move _2<br/>StorageLive(_14)<br/>_14 = move _3<br/>_11 = anchor_spl::token::Burn::&lt;'_&gt; { mint: move _12, from: move _13, authority: move _14 }<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_9 = anchor_lang::context::CpiContext::&lt;'_, '_, '_, '_, anchor_spl::token::Burn&lt;'_&gt;&gt;::new(move _10, move _11)</td></tr></table>>];
    bb1__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_15)<br/>_15 = _5<br/></td></tr><tr><td align="left">_8 = anchor_spl::token::burn(move _9, move _15)</td></tr></table>>];
    bb2__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb3__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_16 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb4__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_7 as Continue).0: ())<br/>_6 = _20<br/>StorageDead(_20)<br/>_22 = discriminant(_7)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_21)<br/>_21 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _21)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = move ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_19)<br/>_19 = move _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb7__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>_24 = discriminant(_7)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_2785 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_26 = discriminant(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2785 -> bb1__0_2785 [label="return"];
    bb0__0_2785 -> bb9__0_2785 [label="unwind"];
    bb1__0_2785 -> bb2__0_2785 [label="return"];
    bb1__0_2785 -> bb9__0_2785 [label="unwind"];
    bb2__0_2785 -> bb3__0_2785 [label="return"];
    bb2__0_2785 -> bb9__0_2785 [label="unwind"];
    bb3__0_2785 -> bb4__0_2785 [label="0"];
    bb3__0_2785 -> bb6__0_2785 [label="1"];
    bb3__0_2785 -> bb5__0_2785 [label="otherwise"];
    bb4__0_2785 -> bb8__0_2785 [label=""];
    bb6__0_2785 -> bb7__0_2785 [label="return"];
    bb6__0_2785 -> bb10__0_2785 [label="unwind"];
    bb7__0_2785 -> bb8__0_2785 [label=""];
    bb10__0_2785 -> bb9__0_2785 [label=""];
}
