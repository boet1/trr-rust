// MIR for `evaluate_order_condition` before PreCodegen

fn evaluate_order_condition(_1: &reserve::Reserve, _2: &reserve::Reserve, _3: &obligation::Obligation, _4: &obligation::ObligationOrder) -> std::option::Option<ConditionHit> {
    debug collateral_reserve => _1;
    debug debt_reserve => _2;
    debug obligation => _3;
    debug order => _4;
    let mut _0: std::option::Option<state::order_operations::ConditionHit>;
    let mut _5: state::order_operations::ConditionType;
    let mut _6: &state::obligation::ObligationOrder;
    let mut _7: u8;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: &state::obligation::Obligation;
    let mut _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: &state::obligation::ObligationOrder;
    let mut _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: &state::obligation::Obligation;
    let mut _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: &state::obligation::Obligation;
    let mut _16: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _17: &state::obligation::ObligationOrder;
    let _18: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _19: &state::reserve::Reserve;
    let mut _20: &state::reserve::Reserve;
    let mut _21: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _22: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: &state::obligation::ObligationOrder;
    let mut _24: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _25: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _26: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _27: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _28: &state::obligation::Obligation;
    let mut _29: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: &state::obligation::Obligation;
    let mut _31: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _32: &state::reserve::Reserve;
    let mut _33: &state::reserve::Reserve;
    let mut _34: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _35: &state::obligation::ObligationOrder;
    scope 1 {
        debug price_ratio => _18;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_4);
        _5 = obligation::ObligationOrder::condition_type(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb5, 2: bb10, 3: bb14, 4: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_2);
        StorageLive(_33);
        _33 = &(*_1);
        _31 = calculate_price_ratio(move _32, move _33) -> [return: bb22, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = std::option::Option::<ConditionHit>::None;
        goto -> bb25;
    }

    bb5: {
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_3);
        _8 = obligation::Obligation::loan_to_value(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_4);
        _10 = obligation::ObligationOrder::condition_threshold(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_3);
        _12 = obligation::Obligation::unhealthy_loan_to_value(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_13);
        _0 = evaluate_stop_loss(move _8, move _10, move _12) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb25;
    }

    bb10: {
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        _14 = obligation::Obligation::loan_to_value(move _15) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_4);
        _16 = obligation::ObligationOrder::condition_threshold(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_17);
        _0 = evaluate_take_profit(move _14, move _16) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb25;
    }

    bb14: {
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_2);
        StorageLive(_20);
        _20 = &(*_1);
        _18 = calculate_price_ratio(move _19, move _20) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        _21 = _18;
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_4);
        _22 = obligation::ObligationOrder::condition_threshold(move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _18;
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_3);
        _27 = obligation::Obligation::unhealthy_loan_to_value(move _28) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_28);
        _25 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _26, move _27) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_3);
        _29 = obligation::Obligation::loan_to_value(move _30) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_30);
        _24 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _25, move _29) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_29);
        StorageDead(_25);
        _0 = evaluate_stop_loss(move _21, move _22, move _24) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb25;
    }

    bb22: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_4);
        _34 = obligation::ObligationOrder::condition_threshold(move _35) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_35);
        _0 = evaluate_take_profit(move _31, move _34) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_34);
        StorageDead(_31);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_5);
        return;
    }
}
