// MIR for `handlers::handler_borrow_obligation_liquidity::<impl at programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18>::try_accounts` before PreCodegen

fn handlers::handler_borrow_obligation_liquidity::<impl at programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut BorrowObligationLiquidityBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _113: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _128: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>>;
    let mut _143: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _158: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _173: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _186: ();
    let mut _187: bool;
    let mut _188: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _189: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _190: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _191: !;
    let mut _192: anchor_lang::error::Error;
    let mut _193: anchor_lang::error::Error;
    let mut _194: anchor_lang::error::ErrorCode;
    let _195: ();
    let mut _197: &state::obligation::Obligation;
    let mut _198: &std::cell::Ref<'_, state::obligation::Obligation>;
    let _199: std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _201: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _202: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _203: isize;
    let mut _205: !;
    let mut _206: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _209: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _210: bool;
    let mut _211: &anchor_lang::prelude::Pubkey;
    let mut _212: &anchor_lang::prelude::Pubkey;
    let mut _213: !;
    let mut _214: anchor_lang::error::Error;
    let mut _215: anchor_lang::error::Error;
    let mut _216: anchor_lang::error::Error;
    let mut _217: anchor_lang::error::ErrorCode;
    let mut _218: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _219: anchor_lang::prelude::Pubkey;
    let mut _220: anchor_lang::prelude::Pubkey;
    let _221: ();
    let mut _223: &state::obligation::Obligation;
    let mut _224: &std::cell::Ref<'_, state::obligation::Obligation>;
    let _225: std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _227: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _228: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _235: &anchor_lang::prelude::Signer<'_>;
    let mut _236: bool;
    let mut _237: &anchor_lang::prelude::Pubkey;
    let mut _238: &anchor_lang::prelude::Pubkey;
    let mut _239: !;
    let mut _240: anchor_lang::error::Error;
    let mut _241: anchor_lang::error::Error;
    let mut _242: anchor_lang::error::Error;
    let mut _243: LendingError;
    let mut _244: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _245: anchor_lang::prelude::Pubkey;
    let mut _246: anchor_lang::prelude::Pubkey;
    let mut _248: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _249: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _250: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _251: &[&[u8]];
    let mut _252: &[&[u8]; 3];
    let _253: &[&[u8]; 3];
    let _254: [&[u8]; 3];
    let mut _255: &[u8];
    let _256: &[u8];
    let mut _257: &[u8];
    let _258: &[u8];
    let mut _259: &anchor_lang::prelude::Pubkey;
    let _260: anchor_lang::prelude::Pubkey;
    let mut _261: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _262: &[u8];
    let _263: &[u8];
    let _264: &[u8];
    let mut _265: &[u8; 1];
    let _266: [u8; 1];
    let mut _267: u8;
    let mut _268: u64;
    let mut _269: &state::lending_market::LendingMarket;
    let mut _270: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _271: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _272: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _273: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _274: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _275: isize;
    let mut _277: !;
    let mut _278: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _280: std::ops::RangeFull;
    let mut _281: &anchor_lang::prelude::Pubkey;
    let _282: &&anchor_lang::prelude::Pubkey;
    let mut _283: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
    let mut _284: isize;
    let mut _286: !;
    let mut _287: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _289: ();
    let mut _290: bool;
    let mut _291: &anchor_lang::prelude::Pubkey;
    let _292: anchor_lang::prelude::Pubkey;
    let mut _293: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _294: &anchor_lang::prelude::Pubkey;
    let mut _295: !;
    let mut _296: anchor_lang::error::Error;
    let mut _297: anchor_lang::error::Error;
    let mut _298: anchor_lang::error::Error;
    let mut _299: anchor_lang::error::ErrorCode;
    let mut _300: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _301: anchor_lang::prelude::Pubkey;
    let mut _302: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _303: anchor_lang::prelude::Pubkey;
    let _304: ();
    let mut _305: bool;
    let mut _306: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _307: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _308: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _309: !;
    let mut _310: anchor_lang::error::Error;
    let mut _311: anchor_lang::error::Error;
    let mut _312: anchor_lang::error::ErrorCode;
    let _313: ();
    let mut _315: &state::reserve::Reserve;
    let mut _316: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _317: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _318: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _319: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _320: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _321: isize;
    let mut _323: !;
    let mut _324: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _327: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _328: bool;
    let mut _329: &anchor_lang::prelude::Pubkey;
    let mut _330: &anchor_lang::prelude::Pubkey;
    let mut _331: !;
    let mut _332: anchor_lang::error::Error;
    let mut _333: anchor_lang::error::Error;
    let mut _334: anchor_lang::error::Error;
    let mut _335: anchor_lang::error::ErrorCode;
    let mut _336: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _337: anchor_lang::prelude::Pubkey;
    let mut _338: anchor_lang::prelude::Pubkey;
    let _339: ();
    let mut _341: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _343: &state::reserve::Reserve;
    let mut _344: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _345: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _347: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _348: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _349: isize;
    let mut _351: !;
    let mut _352: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _354: bool;
    let mut _355: &anchor_lang::prelude::Pubkey;
    let mut _356: &anchor_lang::prelude::Pubkey;
    let mut _357: !;
    let mut _358: anchor_lang::error::Error;
    let mut _359: anchor_lang::error::Error;
    let mut _360: anchor_lang::error::Error;
    let mut _361: anchor_lang::error::ErrorCode;
    let mut _362: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _363: anchor_lang::prelude::Pubkey;
    let mut _364: anchor_lang::prelude::Pubkey;
    let _365: ();
    let mut _366: bool;
    let mut _367: &&anchor_lang::prelude::Pubkey;
    let _368: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _369: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _370: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _371: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _372: &&anchor_lang::prelude::Pubkey;
    let _373: &anchor_lang::prelude::Pubkey;
    let _374: anchor_lang::prelude::Pubkey;
    let mut _375: &anchor_lang::prelude::AccountInfo<'_>;
    let _376: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _377: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _378: !;
    let mut _379: anchor_lang::error::Error;
    let mut _380: anchor_lang::error::ErrorCode;
    let _381: ();
    let mut _382: bool;
    let mut _383: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _384: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _385: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _386: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _387: !;
    let mut _388: anchor_lang::error::Error;
    let mut _389: anchor_lang::error::Error;
    let mut _390: anchor_lang::error::ErrorCode;
    let _391: ();
    let mut _393: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _395: &state::reserve::Reserve;
    let mut _396: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _397: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _398: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _399: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _400: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _401: isize;
    let mut _403: !;
    let mut _404: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _406: bool;
    let mut _407: &anchor_lang::prelude::Pubkey;
    let mut _408: &anchor_lang::prelude::Pubkey;
    let mut _409: !;
    let mut _410: anchor_lang::error::Error;
    let mut _411: anchor_lang::error::Error;
    let mut _412: anchor_lang::error::Error;
    let mut _413: anchor_lang::error::ErrorCode;
    let mut _414: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _415: anchor_lang::prelude::Pubkey;
    let mut _416: anchor_lang::prelude::Pubkey;
    let _417: ();
    let mut _418: bool;
    let mut _419: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _420: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _421: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _422: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _423: !;
    let mut _424: anchor_lang::error::Error;
    let mut _425: anchor_lang::error::Error;
    let mut _426: anchor_lang::error::ErrorCode;
    let _427: ();
    let mut _429: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _431: &state::reserve::Reserve;
    let mut _432: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _433: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _434: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _435: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _436: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _437: isize;
    let mut _439: !;
    let mut _440: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _442: bool;
    let mut _443: &anchor_lang::prelude::Pubkey;
    let mut _444: &anchor_lang::prelude::Pubkey;
    let mut _445: !;
    let mut _446: anchor_lang::error::Error;
    let mut _447: anchor_lang::error::Error;
    let mut _448: anchor_lang::error::Error;
    let mut _449: anchor_lang::error::ErrorCode;
    let mut _450: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _451: anchor_lang::prelude::Pubkey;
    let mut _452: anchor_lang::prelude::Pubkey;
    let _453: ();
    let mut _454: bool;
    let mut _455: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _456: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _457: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _458: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _459: !;
    let mut _460: anchor_lang::error::Error;
    let mut _461: anchor_lang::error::Error;
    let mut _462: anchor_lang::error::ErrorCode;
    let _463: ();
    let _464: ();
    let mut _465: bool;
    let mut _466: &anchor_lang::prelude::Pubkey;
    let _467: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _468: &anchor_spl::token_interface::TokenAccount;
    let _469: &anchor_spl::token_interface::TokenAccount;
    let mut _470: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _471: &anchor_lang::prelude::Pubkey;
    let _472: anchor_lang::prelude::Pubkey;
    let mut _473: &anchor_lang::prelude::Signer<'_>;
    let mut _474: !;
    let mut _475: anchor_lang::error::Error;
    let mut _476: anchor_lang::error::ErrorCode;
    let mut _477: bool;
    let mut _478: &anchor_lang::prelude::Pubkey;
    let _479: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _480: &anchor_spl::token_interface::TokenAccount;
    let _481: &anchor_spl::token_interface::TokenAccount;
    let mut _482: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _483: &anchor_lang::prelude::Pubkey;
    let _484: anchor_lang::prelude::Pubkey;
    let mut _485: &anchor_lang::prelude::Pubkey;
    let _486: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _487: &anchor_spl::token_interface::TokenAccount;
    let _488: &anchor_spl::token_interface::TokenAccount;
    let mut _489: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _490: !;
    let mut _491: anchor_lang::error::Error;
    let mut _492: anchor_lang::error::ErrorCode;
    let _493: ();
    let mut _494: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
    let mut _495: isize;
    let mut _497: bool;
    let mut _498: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _499: &&anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let _500: &&anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _501: !;
    let mut _502: anchor_lang::error::Error;
    let mut _503: anchor_lang::error::Error;
    let mut _504: anchor_lang::error::ErrorCode;
    let _505: ();
    let mut _507: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _509: bool;
    let mut _510: &anchor_lang::prelude::Pubkey;
    let mut _511: &anchor_lang::prelude::Pubkey;
    let mut _512: !;
    let mut _513: anchor_lang::error::Error;
    let mut _514: anchor_lang::error::Error;
    let mut _515: anchor_lang::error::Error;
    let mut _516: anchor_lang::error::ErrorCode;
    let mut _517: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _518: anchor_lang::prelude::Pubkey;
    let mut _519: anchor_lang::prelude::Pubkey;
    let mut _520: handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>;
    let mut _521: anchor_lang::prelude::Signer<'_>;
    let mut _522: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _523: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _524: anchor_lang::prelude::AccountInfo<'_>;
    let mut _525: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _526: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _527: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _528: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _529: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _530: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
    let mut _531: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _532: anchor_lang::prelude::AccountInfo<'_>;
    let mut _533: &anchor_lang::prelude::Pubkey;
    let mut _534: bool;
    let mut _535: bool;
    let mut _536: bool;
    let mut _537: bool;
    let mut _538: bool;
    let mut _539: bool;
    let mut _540: bool;
    let mut _541: bool;
    let mut _542: bool;
    let mut _543: bool;
    let mut _544: bool;
    let mut _545: bool;
    let mut _546: bool;
    let mut _547: bool;
    let mut _548: bool;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _650: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _651: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _652: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _653: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _654: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug owner => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
        scope 6 {
            debug obligation => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
            scope 11 {
                debug lending_market => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug lending_market_authority => _51;
                    let _66: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                    scope 21 {
                        debug borrow_reserve => _66;
                        let _81: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        scope 26 {
                            debug borrow_reserve_liquidity_mint => _81;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 31 {
                                debug reserve_source_liquidity => _96;
                                let _111: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                scope 36 {
                                    debug borrow_reserve_liquidity_fee_receiver => _111;
                                    let _126: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    scope 41 {
                                        debug user_destination_liquidity => _126;
                                        let _141: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
                                        scope 46 {
                                            debug referrer_token_state => _141;
                                            let _156: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                            scope 51 {
                                                debug token_program => _156;
                                                let _171: anchor_lang::prelude::AccountInfo<'_>;
                                                let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _185: anchor_lang::prelude::AccountInfo<'_>;
                                                scope 56 {
                                                    debug instruction_sysvar_account => _171;
                                                    let _196: anchor_lang::prelude::Pubkey;
                                                    let _204: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _207: std::cell::Ref<'_, state::obligation::Obligation>;
                                                    let _222: anchor_lang::prelude::Pubkey;
                                                    let _230: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _233: std::cell::Ref<'_, state::obligation::Obligation>;
                                                    let _247: anchor_lang::prelude::Pubkey;
                                                    let _276: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _279: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                                    let _285: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _288: anchor_lang::prelude::Pubkey;
                                                    scope 61 {
                                                        debug my_key => _196;
                                                        let _208: anchor_lang::prelude::Pubkey;
                                                        scope 66 {
                                                            debug target_key => _208;
                                                        }
                                                    }
                                                    scope 62 {
                                                        debug residual => _204;
                                                        scope 63 {
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug val => _207;
                                                        scope 65 {
                                                        }
                                                    }
                                                    scope 67 {
                                                        debug my_key => _222;
                                                        let _234: anchor_lang::prelude::Pubkey;
                                                        scope 72 {
                                                            debug target_key => _234;
                                                        }
                                                    }
                                                    scope 68 {
                                                        debug residual => _230;
                                                        scope 69 {
                                                        }
                                                    }
                                                    scope 70 {
                                                        debug val => _233;
                                                        scope 71 {
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug __pda_address => _247;
                                                        let _314: anchor_lang::prelude::Pubkey;
                                                        let _322: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _325: std::cell::Ref<'_, state::reserve::Reserve>;
                                                        let _340: anchor_lang::prelude::Pubkey;
                                                        let _392: anchor_lang::prelude::Pubkey;
                                                        let _428: anchor_lang::prelude::Pubkey;
                                                        let _506: anchor_lang::prelude::Pubkey;
                                                        scope 82 {
                                                            debug my_key => _314;
                                                            let _326: anchor_lang::prelude::Pubkey;
                                                            scope 87 {
                                                                debug target_key => _326;
                                                            }
                                                        }
                                                        scope 83 {
                                                            debug residual => _322;
                                                            scope 84 {
                                                            }
                                                        }
                                                        scope 85 {
                                                            debug val => _325;
                                                            scope 86 {
                                                            }
                                                        }
                                                        scope 88 {
                                                            debug actual => _340;
                                                            let _342: anchor_lang::prelude::Pubkey;
                                                            let _350: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _353: std::cell::Ref<'_, state::reserve::Reserve>;
                                                            scope 89 {
                                                                debug expected => _342;
                                                            }
                                                            scope 90 {
                                                                debug residual => _350;
                                                                scope 91 {
                                                                }
                                                            }
                                                            scope 92 {
                                                                debug val => _353;
                                                                scope 93 {
                                                                }
                                                            }
                                                        }
                                                        scope 94 {
                                                            debug actual => _392;
                                                            let _394: anchor_lang::prelude::Pubkey;
                                                            let _402: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _405: std::cell::Ref<'_, state::reserve::Reserve>;
                                                            scope 95 {
                                                                debug expected => _394;
                                                            }
                                                            scope 96 {
                                                                debug residual => _402;
                                                                scope 97 {
                                                                }
                                                            }
                                                            scope 98 {
                                                                debug val => _405;
                                                                scope 99 {
                                                                }
                                                            }
                                                        }
                                                        scope 100 {
                                                            debug actual => _428;
                                                            let _430: anchor_lang::prelude::Pubkey;
                                                            let _438: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _441: std::cell::Ref<'_, state::reserve::Reserve>;
                                                            scope 101 {
                                                                debug expected => _430;
                                                            }
                                                            scope 102 {
                                                                debug residual => _438;
                                                                scope 103 {
                                                                }
                                                            }
                                                            scope 104 {
                                                                debug val => _441;
                                                                scope 105 {
                                                                }
                                                            }
                                                        }
                                                        scope 106 {
                                                            debug referrer_token_state => _496;
                                                            let _496: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
                                                        }
                                                        scope 107 {
                                                            debug actual => _506;
                                                            let _508: anchor_lang::prelude::Pubkey;
                                                            scope 108 {
                                                                debug expected => _508;
                                                            }
                                                        }
                                                    }
                                                    scope 74 {
                                                        debug residual => _276;
                                                        scope 75 {
                                                        }
                                                    }
                                                    scope 76 {
                                                        debug val => _279;
                                                        scope 77 {
                                                        }
                                                    }
                                                    scope 78 {
                                                        debug residual => _285;
                                                        scope 79 {
                                                        }
                                                    }
                                                    scope 80 {
                                                        debug val => _288;
                                                        scope 81 {
                                                        }
                                                    }
                                                }
                                                scope 57 {
                                                    debug residual => _182;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug val => _185;
                                                    scope 60 {
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _167;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _170;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 47 {
                                            debug residual => _152;
                                            scope 48 {
                                            }
                                        }
                                        scope 49 {
                                            debug val => _155;
                                            scope 50 {
                                            }
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _137;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _140;
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _122;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _125;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _544 = const false;
        _548 = const false;
        _547 = const false;
        _546 = const false;
        _545 = const false;
        _535 = const false;
        _534 = const false;
        _543 = const false;
        _542 = const false;
        _541 = const false;
        _540 = const false;
        _539 = const false;
        _538 = const false;
        _537 = const false;
        _536 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _9, move _15) -> [return: bb2, unwind: bb278];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb278];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _549 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb308];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _627 = discriminant(_7);
        StorageDead(_7);
        goto -> bb263;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _24, move _30) -> [return: bb9, unwind: bb278];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb278];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _21 = move _35;
        StorageDead(_35);
        _551 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb307];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _625 = discriminant(_22);
        StorageDead(_22);
        goto -> bb262;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _39, move _45) -> [return: bb15, unwind: bb278];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb278];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _36 = move _50;
        StorageDead(_50);
        _553 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb306];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _623 = discriminant(_37);
        StorageDead(_37);
        goto -> bb261;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _54, move _60) -> [return: bb21, unwind: bb278];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb278];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _555 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb277];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb305];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _621 = discriminant(_52);
        StorageDead(_52);
        goto -> bb260;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _69, move _75) -> [return: bb27, unwind: bb277];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb277];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _66 = move _80;
        StorageDead(_80);
        _557 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb277];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb304];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _619 = discriminant(_67);
        StorageDead(_67);
        goto -> bb259;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _84, move _90) -> [return: bb33, unwind: bb277];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb277];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _81 = move _95;
        StorageDead(_95);
        _559 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb276];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb303];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _617 = discriminant(_82);
        StorageDead(_82);
        goto -> bb258;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _99, move _105) -> [return: bb39, unwind: bb276];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb276];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _561 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb275];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb302];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _615 = discriminant(_97);
        StorageDead(_97);
        goto -> bb257;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _113 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _114, move _120) -> [return: bb45, unwind: bb275];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb275];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _111 = move _125;
        StorageDead(_125);
        _563 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb274];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb301];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _613 = discriminant(_112);
        StorageDead(_112);
        goto -> bb256;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _128 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _129, move _135) -> [return: bb51, unwind: bb274];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb274];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _126 = move _140;
        StorageDead(_140);
        _565 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <std::option::Option<anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState>> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb273];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb300];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _611 = discriminant(_127);
        StorageDead(_127);
        goto -> bb255;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _143 = std::result::Result::<std::option::Option<anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _144, move _150) -> [return: bb57, unwind: bb273];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState>>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb273];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>);
        _141 = move _155;
        StorageDead(_155);
        _567 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb273];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb299];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _609 = discriminant(_142);
        StorageDead(_142);
        goto -> bb254;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _158 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _159, move _165) -> [return: bb63, unwind: bb273];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb273];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _156 = move _170;
        StorageDead(_170);
        _569 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_3);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, BorrowObligationLiquidityBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb273];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb298];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _607 = discriminant(_157);
        StorageDead(_157);
        goto -> bb253;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _173 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _174, move _180) -> [return: bb69, unwind: bb273];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb273];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _171 = move _185;
        StorageDead(_185);
        _571 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_21;
        _189 = &(*_190);
        _188 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _189) -> [return: bb74, unwind: bb272];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb297];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _605 = discriminant(_172);
        StorageDead(_172);
        goto -> bb252;
    }

    bb74: {
        StorageDead(_189);
        _187 = ((*_188).6: bool);
        switchInt(move _187) -> [0: bb75, otherwise: bb78];
    }

    bb75: {
        StorageDead(_190);
        StorageDead(_188);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = ConstraintMut;
        _193 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _194) -> [return: bb76, unwind: bb272];
    }

    bb76: {
        StorageDead(_194);
        _192 = anchor_lang::error::Error::with_account_name::<&str>(move _193, const "obligation") -> [return: bb77, unwind: bb272];
    }

    bb77: {
        StorageDead(_193);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _192);
        StorageDead(_192);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb251;
    }

    bb78: {
        StorageDead(_190);
        StorageDead(_188);
        _186 = const ();
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_21;
        _201 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load(move _202) -> [return: bb79, unwind: bb272];
    }

    bb79: {
        StorageDead(_202);
        _200 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _201) -> [return: bb80, unwind: bb272];
    }

    bb80: {
        _547 = const true;
        _548 = const true;
        StorageDead(_201);
        _203 = discriminant(_200);
        switchInt(move _203) -> [0: bb81, 1: bb82, otherwise: bb5];
    }

    bb81: {
        StorageLive(_207);
        _207 = move ((_200 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _199 = move _207;
        StorageDead(_207);
        _198 = &_199;
        _197 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _198) -> [return: bb84, unwind: bb271];
    }

    bb82: {
        StorageLive(_204);
        _204 = move ((_200 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_206);
        _206 = move _204;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _206) -> [return: bb83, unwind: bb296];
    }

    bb83: {
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_198);
        _603 = discriminant(_200);
        _547 = const false;
        _548 = const false;
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        goto -> bb250;
    }

    bb84: {
        StorageDead(_198);
        _196 = ((*_197).2: anchor_lang::prelude::Pubkey);
        drop(_199) -> [return: bb279, unwind: bb296];
    }

    bb85: {
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_196;
        StorageLive(_212);
        _212 = &_208;
        _210 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _211, move _212) -> [return: bb86, unwind: bb272];
    }

    bb86: {
        switchInt(move _210) -> [0: bb91, otherwise: bb87];
    }

    bb87: {
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = ConstraintHasOne;
        _216 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _217) -> [return: bb88, unwind: bb272];
    }

    bb88: {
        StorageDead(_217);
        _215 = anchor_lang::error::Error::with_account_name::<&str>(move _216, const "obligation") -> [return: bb89, unwind: bb272];
    }

    bb89: {
        StorageDead(_216);
        StorageLive(_218);
        StorageLive(_219);
        _219 = _196;
        StorageLive(_220);
        _220 = _208;
        _218 = (move _219, move _220);
        StorageDead(_220);
        StorageDead(_219);
        _214 = anchor_lang::error::Error::with_pubkeys(move _215, move _218) -> [return: bb90, unwind: bb272];
    }

    bb90: {
        StorageDead(_218);
        StorageDead(_215);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _214);
        StorageDead(_214);
        StorageDead(_210);
        StorageDead(_208);
        goto -> bb250;
    }

    bb91: {
        StorageDead(_212);
        StorageDead(_211);
        _195 = const ();
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_21;
        _227 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load(move _228) -> [return: bb92, unwind: bb272];
    }

    bb92: {
        StorageDead(_228);
        _226 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _227) -> [return: bb93, unwind: bb272];
    }

    bb93: {
        _545 = const true;
        _546 = const true;
        StorageDead(_227);
        _229 = discriminant(_226);
        switchInt(move _229) -> [0: bb94, 1: bb95, otherwise: bb5];
    }

    bb94: {
        StorageLive(_233);
        _233 = move ((_226 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _225 = move _233;
        StorageDead(_233);
        _224 = &_225;
        _223 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _224) -> [return: bb97, unwind: bb270];
    }

    bb95: {
        StorageLive(_230);
        _230 = move ((_226 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_232);
        _232 = move _230;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _232) -> [return: bb96, unwind: bb295];
    }

    bb96: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_224);
        _601 = discriminant(_226);
        _545 = const false;
        _546 = const false;
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_223);
        goto -> bb249;
    }

    bb97: {
        StorageDead(_224);
        _222 = ((*_223).3: anchor_lang::prelude::Pubkey);
        drop(_225) -> [return: bb280, unwind: bb295];
    }

    bb98: {
        StorageDead(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_222;
        StorageLive(_238);
        _238 = &_234;
        _236 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _237, move _238) -> [return: bb99, unwind: bb272];
    }

    bb99: {
        switchInt(move _236) -> [0: bb104, otherwise: bb100];
    }

    bb100: {
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = LendingError::InvalidObligationOwner;
        _242 = <anchor_lang::error::Error as From<LendingError>>::from(move _243) -> [return: bb101, unwind: bb272];
    }

    bb101: {
        StorageDead(_243);
        _241 = anchor_lang::error::Error::with_account_name::<&str>(move _242, const "obligation") -> [return: bb102, unwind: bb272];
    }

    bb102: {
        StorageDead(_242);
        StorageLive(_244);
        StorageLive(_245);
        _245 = _222;
        StorageLive(_246);
        _246 = _234;
        _244 = (move _245, move _246);
        StorageDead(_246);
        StorageDead(_245);
        _240 = anchor_lang::error::Error::with_pubkeys(move _241, move _244) -> [return: bb103, unwind: bb272];
    }

    bb103: {
        StorageDead(_244);
        StorageDead(_241);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _240);
        StorageDead(_240);
        StorageDead(_236);
        StorageDead(_234);
        goto -> bb249;
    }

    bb104: {
        StorageDead(_238);
        StorageDead(_237);
        _221 = const ();
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = const _;
        _255 = &(*_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &_36;
        _260 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _261) -> [return: bb105, unwind: bb272];
    }

    bb105: {
        _259 = &_260;
        StorageDead(_261);
        _258 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _259) -> [return: bb106, unwind: bb272];
    }

    bb106: {
        _257 = &(*_258);
        StorageDead(_259);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_36;
        _273 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _274) -> [return: bb107, unwind: bb272];
    }

    bb107: {
        StorageDead(_274);
        _272 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _273) -> [return: bb108, unwind: bb272];
    }

    bb108: {
        _534 = const true;
        _535 = const true;
        StorageDead(_273);
        _275 = discriminant(_272);
        switchInt(move _275) -> [0: bb109, 1: bb110, otherwise: bb5];
    }

    bb109: {
        StorageLive(_279);
        _279 = move ((_272 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _271 = move _279;
        StorageDead(_279);
        _270 = &_271;
        _269 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _270) -> [return: bb112, unwind: bb269];
    }

    bb110: {
        StorageLive(_276);
        _276 = move ((_272 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_278);
        _278 = move _276;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _278) -> [return: bb111, unwind: bb294];
    }

    bb111: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_249);
        goto -> bb286;
    }

    bb112: {
        StorageDead(_270);
        _268 = ((*_269).1: u64);
        _267 = move _268 as u8 (IntToInt);
        StorageDead(_268);
        _266 = [move _267];
        _265 = &_266;
        StorageDead(_267);
        StorageLive(_280);
        _280 = RangeFull;
        _264 = <[u8; 1] as Index<RangeFull>>::index(move _265, move _280) -> [return: bb113, unwind: bb269];
    }

    bb113: {
        StorageDead(_280);
        StorageDead(_265);
        _263 = &(*_264);
        _262 = &(*_263);
        _254 = [move _255, move _257, move _262];
        StorageDead(_262);
        StorageDead(_257);
        StorageDead(_255);
        _253 = &_254;
        _252 = &(*_253);
        _251 = move _252 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_252);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &_1;
        _533 = deref_copy (*_282);
        _281 = &(*_533);
        _250 = anchor_lang::prelude::Pubkey::create_program_address(move _251, move _281) -> [return: bb114, unwind: bb269];
    }

    bb114: {
        StorageDead(_281);
        StorageDead(_251);
        StorageLive(_283);
        _283 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18};
        _249 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:156:10: 156:18}>(move _250, move _283) -> [return: bb115, unwind: bb269];
    }

    bb115: {
        StorageDead(_283);
        StorageDead(_250);
        _248 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _249) -> [return: bb116, unwind: bb269];
    }

    bb116: {
        StorageDead(_249);
        _284 = discriminant(_248);
        switchInt(move _284) -> [0: bb117, 1: bb118, otherwise: bb5];
    }

    bb117: {
        StorageLive(_288);
        _288 = ((_248 as Continue).0: anchor_lang::prelude::Pubkey);
        _247 = _288;
        StorageDead(_288);
        _577 = discriminant(_248);
        StorageDead(_282);
        drop(_271) -> [return: bb281, unwind: bb294];
    }

    bb118: {
        StorageLive(_285);
        _285 = move ((_248 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_287);
        _287 = move _285;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _287) -> [return: bb119, unwind: bb293];
    }

    bb119: {
        StorageDead(_287);
        StorageDead(_285);
        _597 = discriminant(_248);
        StorageDead(_282);
        drop(_271) -> [return: bb286, unwind: bb294];
    }

    bb120: {
        _291 = &_292;
        StorageDead(_293);
        StorageLive(_294);
        _294 = &_247;
        _290 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _291, move _294) -> [return: bb121, unwind: bb272];
    }

    bb121: {
        switchInt(move _290) -> [0: bb127, otherwise: bb122];
    }

    bb122: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = ConstraintSeeds;
        _298 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _299) -> [return: bb123, unwind: bb272];
    }

    bb123: {
        StorageDead(_299);
        _297 = anchor_lang::error::Error::with_account_name::<&str>(move _298, const "lending_market_authority") -> [return: bb124, unwind: bb272];
    }

    bb124: {
        _544 = const true;
        StorageDead(_298);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_51;
        _301 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _302) -> [return: bb125, unwind: bb292];
    }

    bb125: {
        StorageDead(_302);
        StorageLive(_303);
        _303 = _247;
        _300 = (move _301, move _303);
        StorageDead(_303);
        StorageDead(_301);
        _544 = const false;
        _296 = anchor_lang::error::Error::with_pubkeys(move _297, move _300) -> [return: bb126, unwind: bb292];
    }

    bb126: {
        StorageDead(_300);
        _544 = const false;
        StorageDead(_297);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _296);
        StorageDead(_296);
        StorageDead(_290);
        StorageDead(_289);
        goto -> bb248;
    }

    bb127: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        _289 = const ();
        StorageDead(_290);
        StorageDead(_289);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _308 = &_66;
        _307 = &(*_308);
        _306 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _307) -> [return: bb128, unwind: bb272];
    }

    bb128: {
        StorageDead(_307);
        _305 = ((*_306).6: bool);
        switchInt(move _305) -> [0: bb129, otherwise: bb132];
    }

    bb129: {
        StorageDead(_308);
        StorageDead(_306);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = ConstraintMut;
        _311 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _312) -> [return: bb130, unwind: bb272];
    }

    bb130: {
        StorageDead(_312);
        _310 = anchor_lang::error::Error::with_account_name::<&str>(move _311, const "borrow_reserve") -> [return: bb131, unwind: bb272];
    }

    bb131: {
        StorageDead(_311);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _310);
        StorageDead(_310);
        StorageDead(_305);
        StorageDead(_304);
        goto -> bb248;
    }

    bb132: {
        StorageDead(_308);
        StorageDead(_306);
        _304 = const ();
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &_66;
        _319 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _320) -> [return: bb133, unwind: bb272];
    }

    bb133: {
        StorageDead(_320);
        _318 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _319) -> [return: bb134, unwind: bb272];
    }

    bb134: {
        _542 = const true;
        _543 = const true;
        StorageDead(_319);
        _321 = discriminant(_318);
        switchInt(move _321) -> [0: bb135, 1: bb136, otherwise: bb5];
    }

    bb135: {
        StorageLive(_325);
        _325 = move ((_318 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _317 = move _325;
        StorageDead(_325);
        _316 = &_317;
        _315 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _316) -> [return: bb138, unwind: bb268];
    }

    bb136: {
        StorageLive(_322);
        _322 = move ((_318 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_324);
        _324 = move _322;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _324) -> [return: bb137, unwind: bb290];
    }

    bb137: {
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_316);
        _595 = discriminant(_318);
        _542 = const false;
        _543 = const false;
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_315);
        goto -> bb247;
    }

    bb138: {
        StorageDead(_316);
        _314 = ((*_315).2: anchor_lang::prelude::Pubkey);
        drop(_317) -> [return: bb282, unwind: bb290];
    }

    bb139: {
        StorageDead(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &_314;
        StorageLive(_330);
        _330 = &_326;
        _328 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _329, move _330) -> [return: bb140, unwind: bb272];
    }

    bb140: {
        switchInt(move _328) -> [0: bb145, otherwise: bb141];
    }

    bb141: {
        StorageDead(_330);
        StorageDead(_329);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = ConstraintHasOne;
        _334 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _335) -> [return: bb142, unwind: bb272];
    }

    bb142: {
        StorageDead(_335);
        _333 = anchor_lang::error::Error::with_account_name::<&str>(move _334, const "borrow_reserve") -> [return: bb143, unwind: bb272];
    }

    bb143: {
        StorageDead(_334);
        StorageLive(_336);
        StorageLive(_337);
        _337 = _314;
        StorageLive(_338);
        _338 = _326;
        _336 = (move _337, move _338);
        StorageDead(_338);
        StorageDead(_337);
        _332 = anchor_lang::error::Error::with_pubkeys(move _333, move _336) -> [return: bb144, unwind: bb272];
    }

    bb144: {
        StorageDead(_336);
        StorageDead(_333);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _332);
        StorageDead(_332);
        StorageDead(_328);
        StorageDead(_326);
        goto -> bb247;
    }

    bb145: {
        StorageDead(_330);
        StorageDead(_329);
        _313 = const ();
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_314);
        StorageDead(_313);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _649 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _341 = &(*_649);
        _340 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _341) -> [return: bb146, unwind: bb272];
    }

    bb146: {
        StorageDead(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &_66;
        _347 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _348) -> [return: bb147, unwind: bb272];
    }

    bb147: {
        StorageDead(_348);
        _346 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _347) -> [return: bb148, unwind: bb272];
    }

    bb148: {
        _540 = const true;
        _541 = const true;
        StorageDead(_347);
        _349 = discriminant(_346);
        switchInt(move _349) -> [0: bb149, 1: bb150, otherwise: bb5];
    }

    bb149: {
        StorageLive(_353);
        _353 = move ((_346 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _345 = move _353;
        StorageDead(_353);
        _344 = &_345;
        _343 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _344) -> [return: bb152, unwind: bb267];
    }

    bb150: {
        StorageLive(_350);
        _350 = move ((_346 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_352);
        _352 = move _350;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _352) -> [return: bb151, unwind: bb289];
    }

    bb151: {
        StorageDead(_352);
        StorageDead(_350);
        StorageDead(_344);
        _593 = discriminant(_346);
        _540 = const false;
        _541 = const false;
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_343);
        goto -> bb246;
    }

    bb152: {
        StorageDead(_344);
        _342 = (((*_343).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        drop(_345) -> [return: bb283, unwind: bb289];
    }

    bb153: {
        switchInt(move _354) -> [0: bb158, otherwise: bb154];
    }

    bb154: {
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = ConstraintAddress;
        _360 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _361) -> [return: bb155, unwind: bb272];
    }

    bb155: {
        StorageDead(_361);
        _359 = anchor_lang::error::Error::with_account_name::<&str>(move _360, const "borrow_reserve_liquidity_mint") -> [return: bb156, unwind: bb272];
    }

    bb156: {
        StorageDead(_360);
        StorageLive(_362);
        StorageLive(_363);
        _363 = _340;
        StorageLive(_364);
        _364 = _342;
        _362 = (move _363, move _364);
        StorageDead(_364);
        StorageDead(_363);
        _358 = anchor_lang::error::Error::with_pubkeys(move _359, move _362) -> [return: bb157, unwind: bb272];
    }

    bb157: {
        StorageDead(_362);
        StorageDead(_359);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _358);
        StorageDead(_358);
        StorageDead(_354);
        goto -> bb246;
    }

    bb158: {
        StorageDead(_356);
        StorageDead(_355);
        _339 = const ();
        StorageDead(_354);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_339);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = &_81;
        _370 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _371) -> [return: bb159, unwind: bb272];
    }

    bb159: {
        _369 = &(*_370);
        StorageDead(_371);
        _368 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _369) -> [return: bb160, unwind: bb272];
    }

    bb160: {
        StorageDead(_369);
        _367 = &((*_368).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &_156;
        _376 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _377) -> [return: bb161, unwind: bb272];
    }

    bb161: {
        _375 = &(*_376);
        StorageDead(_377);
        _374 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _375) -> [return: bb162, unwind: bb272];
    }

    bb162: {
        StorageDead(_375);
        _373 = &_374;
        _372 = &_373;
        _366 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _367, move _372) -> [return: bb163, unwind: bb272];
    }

    bb163: {
        switchInt(move _366) -> [0: bb166, otherwise: bb164];
    }

    bb164: {
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_368);
        StorageDead(_367);
        StorageLive(_379);
        StorageLive(_380);
        _380 = ConstraintMintTokenProgram;
        _379 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _380) -> [return: bb165, unwind: bb272];
    }

    bb165: {
        StorageDead(_380);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _379);
        StorageDead(_379);
        StorageDead(_366);
        StorageDead(_365);
        goto -> bb248;
    }

    bb166: {
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_368);
        StorageDead(_367);
        _365 = const ();
        StorageDead(_366);
        StorageDead(_365);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        _386 = &_96;
        _385 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _386) -> [return: bb167, unwind: bb272];
    }

    bb167: {
        _384 = &(*_385);
        StorageDead(_386);
        _383 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _384) -> [return: bb168, unwind: bb272];
    }

    bb168: {
        StorageDead(_384);
        _382 = ((*_383).6: bool);
        switchInt(move _382) -> [0: bb169, otherwise: bb172];
    }

    bb169: {
        StorageDead(_385);
        StorageDead(_383);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = ConstraintMut;
        _389 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _390) -> [return: bb170, unwind: bb272];
    }

    bb170: {
        StorageDead(_390);
        _388 = anchor_lang::error::Error::with_account_name::<&str>(move _389, const "reserve_source_liquidity") -> [return: bb171, unwind: bb272];
    }

    bb171: {
        StorageDead(_389);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _388);
        StorageDead(_388);
        StorageDead(_382);
        StorageDead(_381);
        goto -> bb248;
    }

    bb172: {
        StorageDead(_385);
        StorageDead(_383);
        _381 = const ();
        StorageDead(_382);
        StorageDead(_381);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _650 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _393 = &(*_650);
        _392 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _393) -> [return: bb173, unwind: bb272];
    }

    bb173: {
        StorageDead(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &_66;
        _399 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _400) -> [return: bb174, unwind: bb272];
    }

    bb174: {
        StorageDead(_400);
        _398 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _399) -> [return: bb175, unwind: bb272];
    }

    bb175: {
        _538 = const true;
        _539 = const true;
        StorageDead(_399);
        _401 = discriminant(_398);
        switchInt(move _401) -> [0: bb176, 1: bb177, otherwise: bb5];
    }

    bb176: {
        StorageLive(_405);
        _405 = move ((_398 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _397 = move _405;
        StorageDead(_405);
        _396 = &_397;
        _395 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _396) -> [return: bb179, unwind: bb266];
    }

    bb177: {
        StorageLive(_402);
        _402 = move ((_398 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_404);
        _404 = move _402;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _404) -> [return: bb178, unwind: bb288];
    }

    bb178: {
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_396);
        _591 = discriminant(_398);
        _538 = const false;
        _539 = const false;
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_395);
        goto -> bb245;
    }

    bb179: {
        StorageDead(_396);
        _394 = (((*_395).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        drop(_397) -> [return: bb284, unwind: bb288];
    }

    bb180: {
        switchInt(move _406) -> [0: bb185, otherwise: bb181];
    }

    bb181: {
        StorageDead(_408);
        StorageDead(_407);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = ConstraintAddress;
        _412 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _413) -> [return: bb182, unwind: bb272];
    }

    bb182: {
        StorageDead(_413);
        _411 = anchor_lang::error::Error::with_account_name::<&str>(move _412, const "reserve_source_liquidity") -> [return: bb183, unwind: bb272];
    }

    bb183: {
        StorageDead(_412);
        StorageLive(_414);
        StorageLive(_415);
        _415 = _392;
        StorageLive(_416);
        _416 = _394;
        _414 = (move _415, move _416);
        StorageDead(_416);
        StorageDead(_415);
        _410 = anchor_lang::error::Error::with_pubkeys(move _411, move _414) -> [return: bb184, unwind: bb272];
    }

    bb184: {
        StorageDead(_414);
        StorageDead(_411);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _410);
        StorageDead(_410);
        StorageDead(_406);
        goto -> bb245;
    }

    bb185: {
        StorageDead(_408);
        StorageDead(_407);
        _391 = const ();
        StorageDead(_406);
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = &_111;
        _421 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _422) -> [return: bb186, unwind: bb272];
    }

    bb186: {
        _420 = &(*_421);
        StorageDead(_422);
        _419 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _420) -> [return: bb187, unwind: bb272];
    }

    bb187: {
        StorageDead(_420);
        _418 = ((*_419).6: bool);
        switchInt(move _418) -> [0: bb188, otherwise: bb191];
    }

    bb188: {
        StorageDead(_421);
        StorageDead(_419);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = ConstraintMut;
        _425 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _426) -> [return: bb189, unwind: bb272];
    }

    bb189: {
        StorageDead(_426);
        _424 = anchor_lang::error::Error::with_account_name::<&str>(move _425, const "borrow_reserve_liquidity_fee_receiver") -> [return: bb190, unwind: bb272];
    }

    bb190: {
        StorageDead(_425);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _424);
        StorageDead(_424);
        StorageDead(_418);
        StorageDead(_417);
        goto -> bb248;
    }

    bb191: {
        StorageDead(_421);
        StorageDead(_419);
        _417 = const ();
        StorageDead(_418);
        StorageDead(_417);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _651 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _429 = &(*_651);
        _428 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _429) -> [return: bb192, unwind: bb272];
    }

    bb192: {
        StorageDead(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &_66;
        _435 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _436) -> [return: bb193, unwind: bb272];
    }

    bb193: {
        StorageDead(_436);
        _434 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _435) -> [return: bb194, unwind: bb272];
    }

    bb194: {
        _536 = const true;
        _537 = const true;
        StorageDead(_435);
        _437 = discriminant(_434);
        switchInt(move _437) -> [0: bb195, 1: bb196, otherwise: bb5];
    }

    bb195: {
        StorageLive(_441);
        _441 = move ((_434 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _433 = move _441;
        StorageDead(_441);
        _432 = &_433;
        _431 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _432) -> [return: bb198, unwind: bb265];
    }

    bb196: {
        StorageLive(_438);
        _438 = move ((_434 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_440);
        _440 = move _438;
        _0 = <std::result::Result<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _440) -> [return: bb197, unwind: bb287];
    }

    bb197: {
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_432);
        _589 = discriminant(_434);
        _536 = const false;
        _537 = const false;
        StorageDead(_434);
        StorageDead(_433);
        StorageDead(_431);
        goto -> bb244;
    }

    bb198: {
        StorageDead(_432);
        _430 = (((*_431).5: state::reserve::ReserveLiquidity).2: anchor_lang::prelude::Pubkey);
        drop(_433) -> [return: bb285, unwind: bb287];
    }

    bb199: {
        switchInt(move _442) -> [0: bb204, otherwise: bb200];
    }

    bb200: {
        StorageDead(_444);
        StorageDead(_443);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = ConstraintAddress;
        _448 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _449) -> [return: bb201, unwind: bb272];
    }

    bb201: {
        StorageDead(_449);
        _447 = anchor_lang::error::Error::with_account_name::<&str>(move _448, const "borrow_reserve_liquidity_fee_receiver") -> [return: bb202, unwind: bb272];
    }

    bb202: {
        StorageDead(_448);
        StorageLive(_450);
        StorageLive(_451);
        _451 = _428;
        StorageLive(_452);
        _452 = _430;
        _450 = (move _451, move _452);
        StorageDead(_452);
        StorageDead(_451);
        _446 = anchor_lang::error::Error::with_pubkeys(move _447, move _450) -> [return: bb203, unwind: bb272];
    }

    bb203: {
        StorageDead(_450);
        StorageDead(_447);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _446);
        StorageDead(_446);
        StorageDead(_442);
        goto -> bb244;
    }

    bb204: {
        StorageDead(_444);
        StorageDead(_443);
        _427 = const ();
        StorageDead(_442);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_427);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = &_126;
        _457 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _458) -> [return: bb205, unwind: bb272];
    }

    bb205: {
        _456 = &(*_457);
        StorageDead(_458);
        _455 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _456) -> [return: bb206, unwind: bb272];
    }

    bb206: {
        StorageDead(_456);
        _454 = ((*_455).6: bool);
        switchInt(move _454) -> [0: bb207, otherwise: bb210];
    }

    bb207: {
        StorageDead(_457);
        StorageDead(_455);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = ConstraintMut;
        _461 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _462) -> [return: bb208, unwind: bb272];
    }

    bb208: {
        StorageDead(_462);
        _460 = anchor_lang::error::Error::with_account_name::<&str>(move _461, const "user_destination_liquidity") -> [return: bb209, unwind: bb272];
    }

    bb209: {
        StorageDead(_461);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _460);
        StorageDead(_460);
        StorageDead(_454);
        StorageDead(_453);
        goto -> bb248;
    }

    bb210: {
        StorageDead(_457);
        StorageDead(_455);
        _453 = const ();
        StorageDead(_454);
        StorageDead(_453);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _652 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _470 = &(*_652);
        _469 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _470) -> [return: bb211, unwind: bb272];
    }

    bb211: {
        _468 = &(*_469);
        _467 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _468) -> [return: bb212, unwind: bb272];
    }

    bb212: {
        StorageDead(_470);
        StorageDead(_468);
        _466 = &((*_467).1: anchor_lang::prelude::Pubkey);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = &_6;
        _472 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _473) -> [return: bb213, unwind: bb272];
    }

    bb213: {
        _471 = &_472;
        StorageDead(_473);
        _465 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _466, move _471) -> [return: bb214, unwind: bb272];
    }

    bb214: {
        switchInt(move _465) -> [0: bb217, otherwise: bb215];
    }

    bb215: {
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_466);
        StorageLive(_475);
        StorageLive(_476);
        _476 = ConstraintTokenOwner;
        _475 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _476) -> [return: bb216, unwind: bb272];
    }

    bb216: {
        StorageDead(_476);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _475);
        StorageDead(_475);
        StorageDead(_465);
        StorageDead(_464);
        goto -> bb243;
    }

    bb217: {
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_466);
        _464 = const ();
        StorageDead(_465);
        StorageDead(_464);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _653 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _482 = &(*_653);
        _481 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _482) -> [return: bb218, unwind: bb272];
    }

    bb218: {
        _480 = &(*_481);
        _479 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _480) -> [return: bb219, unwind: bb272];
    }

    bb219: {
        StorageDead(_482);
        StorageDead(_480);
        _478 = &((*_479).0: anchor_lang::prelude::Pubkey);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _654 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _489 = &(*_654);
        _488 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _489) -> [return: bb220, unwind: bb272];
    }

    bb220: {
        _487 = &(*_488);
        _486 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _487) -> [return: bb221, unwind: bb272];
    }

    bb221: {
        StorageDead(_489);
        StorageDead(_487);
        _485 = &((*_486).0: anchor_lang::prelude::Pubkey);
        _484 = <anchor_lang::prelude::Pubkey as anchor_lang::Key>::key(move _485) -> [return: bb222, unwind: bb272];
    }

    bb222: {
        _483 = &_484;
        StorageDead(_485);
        _477 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _478, move _483) -> [return: bb223, unwind: bb272];
    }

    bb223: {
        switchInt(move _477) -> [0: bb226, otherwise: bb224];
    }

    bb224: {
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_478);
        StorageLive(_491);
        StorageLive(_492);
        _492 = ConstraintTokenMint;
        _491 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _492) -> [return: bb225, unwind: bb272];
    }

    bb225: {
        StorageDead(_492);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _491);
        StorageDead(_491);
        StorageDead(_477);
        goto -> bb243;
    }

    bb226: {
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_478);
        _463 = const ();
        StorageDead(_477);
        StorageDead(_463);
        StorageLive(_493);
        StorageLive(_494);
        _494 = &_141;
        _495 = discriminant((*_494));
        switchInt(move _495) -> [1: bb228, otherwise: bb227];
    }

    bb227: {
        _493 = const ();
        goto -> bb234;
    }

    bb228: {
        StorageLive(_496);
        _496 = &(((*_494) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        _500 = &_496;
        _499 = &(*_500);
        _498 = <&anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _499) -> [return: bb229, unwind: bb272];
    }

    bb229: {
        StorageDead(_499);
        _497 = ((*_498).6: bool);
        switchInt(move _497) -> [0: bb230, otherwise: bb233];
    }

    bb230: {
        StorageDead(_500);
        StorageDead(_498);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        _504 = ConstraintMut;
        _503 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _504) -> [return: bb231, unwind: bb272];
    }

    bb231: {
        StorageDead(_504);
        _502 = anchor_lang::error::Error::with_account_name::<&str>(move _503, const "referrer_token_state") -> [return: bb232, unwind: bb272];
    }

    bb232: {
        StorageDead(_503);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _502);
        StorageDead(_502);
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_493);
        goto -> bb248;
    }

    bb233: {
        StorageDead(_500);
        StorageDead(_498);
        _493 = const ();
        StorageDead(_497);
        StorageDead(_496);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = &_171;
        _506 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _507) -> [return: bb235, unwind: bb272];
    }

    bb235: {
        StorageDead(_507);
        StorageLive(_508);
        _508 = <Instructions as SysvarId>::id() -> [return: bb236, unwind: bb272];
    }

    bb236: {
        StorageLive(_509);
        StorageLive(_510);
        _510 = &_506;
        StorageLive(_511);
        _511 = &_508;
        _509 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _510, move _511) -> [return: bb237, unwind: bb272];
    }

    bb237: {
        switchInt(move _509) -> [0: bb242, otherwise: bb238];
    }

    bb238: {
        StorageDead(_511);
        StorageDead(_510);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _516 = ConstraintAddress;
        _515 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _516) -> [return: bb239, unwind: bb272];
    }

    bb239: {
        StorageDead(_516);
        _514 = anchor_lang::error::Error::with_account_name::<&str>(move _515, const "instruction_sysvar_account") -> [return: bb240, unwind: bb272];
    }

    bb240: {
        StorageDead(_515);
        StorageLive(_517);
        StorageLive(_518);
        _518 = _506;
        StorageLive(_519);
        _519 = _508;
        _517 = (move _518, move _519);
        StorageDead(_519);
        StorageDead(_518);
        _513 = anchor_lang::error::Error::with_pubkeys(move _514, move _517) -> [return: bb241, unwind: bb272];
    }

    bb241: {
        StorageDead(_517);
        StorageDead(_514);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Err(move _513);
        StorageDead(_513);
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_506);
        StorageDead(_505);
        goto -> bb248;
    }

    bb242: {
        StorageDead(_511);
        StorageDead(_510);
        _505 = const ();
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_506);
        StorageDead(_505);
        StorageLive(_520);
        StorageLive(_521);
        _521 = move _6;
        StorageLive(_522);
        _522 = move _21;
        StorageLive(_523);
        _523 = move _36;
        StorageLive(_524);
        _524 = move _51;
        StorageLive(_525);
        _525 = move _66;
        StorageLive(_526);
        _526 = move _81;
        StorageLive(_527);
        _527 = move _96;
        StorageLive(_528);
        _528 = move _111;
        StorageLive(_529);
        _529 = move _126;
        StorageLive(_530);
        _530 = move _141;
        StorageLive(_531);
        _531 = move _156;
        StorageLive(_532);
        _532 = move _171;
        _520 = handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity::<'_> { owner: move _521, obligation: move _522, lending_market: move _523, lending_market_authority: move _524, borrow_reserve: move _525, borrow_reserve_liquidity_mint: move _526, reserve_source_liquidity: move _527, borrow_reserve_liquidity_fee_receiver: move _528, user_destination_liquidity: move _529, referrer_token_state: move _530, token_program: move _531, instruction_sysvar_account: move _532 };
        StorageDead(_532);
        StorageDead(_531);
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_528);
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_521);
        _0 = std::result::Result::<handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, anchor_lang::error::Error>::Ok(move _520);
        StorageDead(_520);
        StorageDead(_247);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb264;
    }

    bb243: {
        StorageDead(_463);
        goto -> bb248;
    }

    bb244: {
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_427);
        goto -> bb248;
    }

    bb245: {
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_391);
        goto -> bb248;
    }

    bb246: {
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_339);
        goto -> bb248;
    }

    bb247: {
        StorageDead(_314);
        StorageDead(_313);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_247);
        goto -> bb251;
    }

    bb249: {
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb251;
    }

    bb250: {
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb251;
    }

    bb251: {
        drop(_171) -> [return: bb252, unwind: bb273];
    }

    bb252: {
        StorageDead(_171);
        goto -> bb253;
    }

    bb253: {
        StorageDead(_156);
        goto -> bb254;
    }

    bb254: {
        StorageDead(_141);
        drop(_126) -> [return: bb255, unwind: bb274];
    }

    bb255: {
        StorageDead(_126);
        drop(_111) -> [return: bb256, unwind: bb275];
    }

    bb256: {
        StorageDead(_111);
        drop(_96) -> [return: bb257, unwind: bb276];
    }

    bb257: {
        StorageDead(_96);
        drop(_81) -> [return: bb258, unwind: bb277];
    }

    bb258: {
        StorageDead(_81);
        goto -> bb259;
    }

    bb259: {
        StorageDead(_66);
        drop(_51) -> [return: bb260, unwind: bb278];
    }

    bb260: {
        StorageDead(_51);
        goto -> bb261;
    }

    bb261: {
        StorageDead(_36);
        goto -> bb262;
    }

    bb262: {
        StorageDead(_21);
        goto -> bb263;
    }

    bb263: {
        StorageDead(_6);
        goto -> bb264;
    }

    bb264: {
        return;
    }

    bb265 (cleanup): {
        drop(_433) -> [return: bb287, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        drop(_397) -> [return: bb288, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_345) -> [return: bb289, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_317) -> [return: bb290, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        drop(_271) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        drop(_225) -> [return: bb295, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_199) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_171) -> [return: bb273, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_126) -> [return: bb274, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_111) -> [return: bb275, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_96) -> [return: bb276, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_81) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_51) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        resume;
    }

    bb279: {
        _573 = discriminant(_200);
        _547 = const false;
        _548 = const false;
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_36;
        _208 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _209) -> [return: bb85, unwind: bb272];
    }

    bb280: {
        _575 = discriminant(_226);
        _545 = const false;
        _546 = const false;
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_223);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_6;
        _234 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _235) -> [return: bb98, unwind: bb272];
    }

    bb281: {
        _579 = discriminant(_272);
        _534 = const false;
        _535 = const false;
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_248);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_51;
        _292 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _293) -> [return: bb120, unwind: bb272];
    }

    bb282: {
        _581 = discriminant(_318);
        _542 = const false;
        _543 = const false;
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_315);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &_36;
        _326 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _327) -> [return: bb139, unwind: bb272];
    }

    bb283: {
        _583 = discriminant(_346);
        _540 = const false;
        _541 = const false;
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_343);
        StorageLive(_354);
        StorageLive(_355);
        _355 = &_340;
        StorageLive(_356);
        _356 = &_342;
        _354 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _355, move _356) -> [return: bb153, unwind: bb272];
    }

    bb284: {
        _585 = discriminant(_398);
        _538 = const false;
        _539 = const false;
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_395);
        StorageLive(_406);
        StorageLive(_407);
        _407 = &_392;
        StorageLive(_408);
        _408 = &_394;
        _406 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _407, move _408) -> [return: bb180, unwind: bb272];
    }

    bb285: {
        _587 = discriminant(_434);
        _536 = const false;
        _537 = const false;
        StorageDead(_434);
        StorageDead(_433);
        StorageDead(_431);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_428;
        StorageLive(_444);
        _444 = &_430;
        _442 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _443, move _444) -> [return: bb199, unwind: bb272];
    }

    bb286: {
        _599 = discriminant(_272);
        _534 = const false;
        _535 = const false;
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_248);
        goto -> bb248;
    }

    bb287 (cleanup): {
        _629 = discriminant(_434);
        goto -> bb272;
    }

    bb288 (cleanup): {
        _630 = discriminant(_398);
        goto -> bb272;
    }

    bb289 (cleanup): {
        _631 = discriminant(_346);
        goto -> bb272;
    }

    bb290 (cleanup): {
        _632 = discriminant(_318);
        goto -> bb272;
    }

    bb291 (cleanup): {
        drop(_297) -> [return: bb272, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        switchInt(_544) -> [0: bb272, otherwise: bb291];
    }

    bb293 (cleanup): {
        _633 = discriminant(_248);
        goto -> bb269;
    }

    bb294 (cleanup): {
        _634 = discriminant(_272);
        goto -> bb272;
    }

    bb295 (cleanup): {
        _635 = discriminant(_226);
        goto -> bb272;
    }

    bb296 (cleanup): {
        _636 = discriminant(_200);
        goto -> bb272;
    }

    bb297 (cleanup): {
        _637 = discriminant(_172);
        goto -> bb273;
    }

    bb298 (cleanup): {
        _638 = discriminant(_157);
        goto -> bb273;
    }

    bb299 (cleanup): {
        _639 = discriminant(_142);
        goto -> bb273;
    }

    bb300 (cleanup): {
        _640 = discriminant(_127);
        goto -> bb274;
    }

    bb301 (cleanup): {
        _641 = discriminant(_112);
        goto -> bb275;
    }

    bb302 (cleanup): {
        _642 = discriminant(_97);
        goto -> bb276;
    }

    bb303 (cleanup): {
        _643 = discriminant(_82);
        goto -> bb277;
    }

    bb304 (cleanup): {
        _644 = discriminant(_67);
        goto -> bb277;
    }

    bb305 (cleanup): {
        _645 = discriminant(_52);
        goto -> bb278;
    }

    bb306 (cleanup): {
        _646 = discriminant(_37);
        goto -> bb278;
    }

    bb307 (cleanup): {
        _647 = discriminant(_22);
        goto -> bb278;
    }

    bb308 (cleanup): {
        _648 = discriminant(_7);
        goto -> bb278;
    }
}
