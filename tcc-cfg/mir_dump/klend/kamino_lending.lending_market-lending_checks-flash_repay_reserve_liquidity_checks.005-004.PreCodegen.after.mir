// MIR for `flash_repay_reserve_liquidity_checks` after PreCodegen

fn flash_repay_reserve_liquidity_checks(_1: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _4: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _10: std::cell::Ref<'_, state::reserve::Reserve>;
    let _11: ();
    let mut _12: bool;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let _14: &state::reserve::Reserve;
    let mut _15: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _16: &anchor_lang::prelude::Pubkey;
    let _17: anchor_lang::prelude::Pubkey;
    let mut _18: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _19: !;
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: anchor_lang::error::Error;
    let mut _24: anchor_lang::error::AnchorError;
    let mut _25: std::string::String;
    let mut _26: &LendingError;
    let _27: LendingError;
    let mut _28: u32;
    let mut _29: LendingError;
    let mut _30: std::string::String;
    let mut _31: &LendingError;
    let _32: LendingError;
    let mut _33: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _34: anchor_lang::error::ErrorOrigin;
    let mut _35: anchor_lang::error::Source;
    let mut _36: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _37: ();
    let mut _40: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _41: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _42: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug reserve => _2;
        let mut _38: &LendingError;
        let mut _39: &LendingError;
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _40 = deref_copy ((*_1).1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _5 = &((*_40).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _4 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _2 = move _10;
        StorageDead(_10);
        _43 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_2;
        _14 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _15) -> [return: bb7, unwind: bb21];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _9) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _45 = discriminant(_3);
        StorageDead(_3);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_15);
        _13 = &(((*_14).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _41 = deref_copy ((*_1).1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _42 = deref_copy ((*_41).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _48 = (((_42.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _18 = &(*_48);
        _17 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _18) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _16 = &_17;
        StorageDead(_18);
        _12 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _13, move _16) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        switchInt(move _12) -> [0: bb16, otherwise: bb10];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = const "Reserve liquidity supply cannot be used as the source liquidity provided";
        _21 = &(*_22);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _39 = const _;
        _26 = &(*_39);
        _25 = LendingError::name(move _26) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = LendingError::InvalidAccountInput;
        _28 = <LendingError as Into<u32>>::into(move _29) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        _38 = const _;
        _31 = &(*_38);
        _30 = <LendingError as ToString>::to_string(move _31) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 310_u32 };
        _34 = anchor_lang::error::ErrorOrigin::Source(move _35);
        StorageDead(_35);
        _33 = std::option::Option::<ErrorOrigin>::Some(move _34);
        StorageDead(_34);
        StorageLive(_36);
        _36 = std::option::Option::<ComparedValues>::None;
        _24 = anchor_lang::error::AnchorError { error_name: move _25, error_code_number: move _28, error_msg: move _30, error_origin: move _33, compared_values: move _36 };
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_25);
        _23 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _24) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        StorageDead(_24);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _23);
        StorageDead(_23);
        StorageDead(_12);
        StorageDead(_11);
        drop(_2) -> [return: bb18, unwind: bb22];
    }

    bb16: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_37);
        _37 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _37);
        StorageDead(_37);
        drop(_2) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_2);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_25) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _47 = discriminant(_3);
        goto -> bb22;
    }
}
