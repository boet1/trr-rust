// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1708:3: 1708:45>::from_str` after PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1708:3: 1708:45>::from_str(_1: &str) -> std::result::Result<uint_types::U128, uint::FromHexError> {
    debug value => _1;
    let mut _0: std::result::Result<utils::fraction::uint_types::U128, uint::FromHexError>;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let mut _5: &str;
    let mut _8: &str;
    let _9: ();
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: &[u8];
    let mut _13: !;
    let mut _14: uint::FromHexError;
    let mut _15: uint::hex::FromHexError;
    let _16: ();
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: &[u8];
    let mut _21: bool;
    let mut _23: &mut [u8];
    let mut _24: &mut [u8; 16];
    let mut _25: std::ops::RangeFrom<usize>;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: &[u8];
    let mut _30: bool;
    let mut _31: (usize, bool);
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, uint::FromHexError>>;
    let mut _34: std::result::Result<(), uint::FromHexError>;
    let mut _35: std::result::Result<(), uint::hex::FromHexError>;
    let mut _36: &[u8];
    let mut _37: &mut [u8];
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, uint::FromHexError>;
    let _44: ();
    let mut _45: &mut [u8];
    let mut _46: &mut [u8];
    let mut _47: &mut [u8; 32];
    let mut _48: std::ops::RangeFrom<usize>;
    let mut _49: usize;
    let mut _50: usize;
    let mut _51: &[u8];
    let mut _52: (usize, bool);
    let mut _53: &[u8];
    let _55: &[u8];
    let mut _56: &[u8; 32];
    let mut _57: std::ops::RangeFrom<usize>;
    let mut _58: usize;
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: &[u8];
    let mut _62: (usize, bool);
    let mut _63: (usize, bool);
    let mut _65: &mut [u8];
    let mut _66: &mut [u8; 16];
    let mut _67: std::ops::RangeFrom<usize>;
    let mut _68: usize;
    let mut _69: usize;
    let mut _70: usize;
    let mut _71: &[u8];
    let mut _72: bool;
    let mut _73: (usize, bool);
    let _74: ();
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, uint::FromHexError>>;
    let mut _76: std::result::Result<(), uint::FromHexError>;
    let mut _77: std::result::Result<(), uint::hex::FromHexError>;
    let mut _78: &[u8];
    let mut _79: &mut [u8];
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, uint::FromHexError>;
    let mut _86: &[u8; 16];
    let _87: &[u8; 16];
    let mut _88: utils::fraction::uint_types::U128;
    let mut _89: &[u8];
    scope 1 {
        debug value => _2;
        let mut _6: [u8; 16];
        scope 2 {
            debug bytes => _6;
            let _7: &[u8];
            scope 3 {
                debug encoded => _7;
                let _22: &mut [u8];
                let mut _43: [u8; 32];
                let _85: &[u8];
                scope 4 {
                    debug out => _22;
                    let _39: std::result::Result<std::convert::Infallible, uint::FromHexError>;
                    let _42: ();
                    scope 5 {
                        debug residual => _39;
                        scope 6 {
                        }
                    }
                    scope 7 {
                        debug val => _42;
                        scope 8 {
                        }
                    }
                }
                scope 9 {
                    debug s => _43;
                    let _54: &[u8];
                    scope 10 {
                        debug encoded => _54;
                        let _64: &mut [u8];
                        scope 11 {
                            debug out => _64;
                            let _81: std::result::Result<std::convert::Infallible, uint::FromHexError>;
                            let _84: ();
                            scope 12 {
                                debug residual => _81;
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug val => _84;
                                scope 15 {
                                }
                            }
                        }
                    }
                }
                scope 16 {
                    debug bytes_ref => _85;
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = core::str::<impl str>::strip_prefix::<'_, &str>(move _4, const "0x") -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _2 = std::option::Option::<&str>::unwrap_or(move _3, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_6);
        _6 = [const 0_u8; 16];
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_2);
        _7 = core::str::<impl str>::as_bytes(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_7);
        _11 = core::slice::<impl [u8]>::len(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        _10 = Gt(move _11, const _);
        switchInt(move _10) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        _15 = InvalidStringLength;
        _14 = <uint::hex::FromHexError as Into<uint::FromHexError>>::into(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        _0 = std::result::Result::<uint_types::U128, uint::FromHexError>::Err(move _14);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb44;
    }

    bb7: {
        StorageDead(_11);
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_7);
        _19 = core::slice::<impl [u8]>::len(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        _21 = Eq(const 2_usize, const 0_usize);
        assert(!move _21, "attempt to calculate the remainder of `{}` with a divisor of zero", _19) -> [success: bb9, unwind continue];
    }

    bb9: {
        _18 = Rem(move _19, const 2_usize);
        StorageDead(_19);
        _17 = Eq(move _18, const 0_usize);
        switchInt(move _17) -> [0: bb22, otherwise: bb10];
    }

    bb10: {
        StorageDead(_18);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut _6;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_7);
        _28 = core::slice::<impl [u8]>::len(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _30 = Eq(const 2_usize, const 0_usize);
        assert(!move _30, "attempt to divide `{}` by zero", _28) -> [success: bb12, unwind continue];
    }

    bb12: {
        _27 = Div(move _28, const 2_usize);
        StorageDead(_28);
        _31 = CheckedSub(const _, _27);
        assert(!move (_31.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _27) -> [success: bb13, unwind continue];
    }

    bb13: {
        _26 = move (_31.0: usize);
        StorageDead(_27);
        _25 = RangeFrom::<usize> { start: move _26 };
        StorageDead(_26);
        _23 = <[u8; 16] as IndexMut<RangeFrom<usize>>>::index_mut(move _24, move _25) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = &mut (*_23);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _7;
        StorageLive(_37);
        _37 = &mut (*_22);
        _35 = decode_to_slice::<&[u8]>(move _36, move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = std::result::Result::<(), uint::hex::FromHexError>::map_err::<uint::FromHexError, fn(uint::hex::FromHexError) -> uint::FromHexError {<uint::FromHexError as From<uint::hex::FromHexError>>::from}>(move _35, <uint::FromHexError as From<uint::hex::FromHexError>>::from) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        _33 = <std::result::Result<(), uint::FromHexError> as Try>::branch(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        _38 = discriminant(_33);
        switchInt(move _38) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_42);
        _42 = ((_33 as Continue).0: ());
        _32 = _42;
        StorageDead(_42);
        StorageDead(_33);
        StorageDead(_32);
        _16 = const ();
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb41;
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_39);
        _39 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, uint::FromHexError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <std::result::Result<uint_types::U128, uint::FromHexError> as FromResidual<std::result::Result<Infallible, uint::FromHexError>>>::from_residual(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb43;
    }

    bb22: {
        StorageDead(_18);
        StorageLive(_43);
        _43 = [const 48_u8; 32];
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut _43;
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_7);
        _50 = core::slice::<impl [u8]>::len(move _51) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_51);
        _52 = CheckedSub(const _, _50);
        assert(!move (_52.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _50) -> [success: bb24, unwind continue];
    }

    bb24: {
        _49 = move (_52.0: usize);
        StorageDead(_50);
        _48 = RangeFrom::<usize> { start: move _49 };
        StorageDead(_49);
        _46 = <[u8; 32] as IndexMut<RangeFrom<usize>>>::index_mut(move _47, move _48) -> [return: bb25, unwind continue];
    }

    bb25: {
        _45 = &mut (*_46);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_53);
        _53 = &(*_7);
        _44 = core::slice::<impl [u8]>::copy_from_slice(move _45, move _53) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_53);
        StorageDead(_45);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_43;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_7);
        _60 = core::slice::<impl [u8]>::len(move _61) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_61);
        _62 = CheckedSub(const _, _60);
        assert(!move (_62.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _60) -> [success: bb28, unwind continue];
    }

    bb28: {
        _59 = move (_62.0: usize);
        StorageDead(_60);
        _63 = CheckedSub(_59, const 1_usize);
        assert(!move (_63.1: bool), "attempt to compute `{} - {}`, which would overflow", move _59, const 1_usize) -> [success: bb29, unwind continue];
    }

    bb29: {
        _58 = move (_63.0: usize);
        StorageDead(_59);
        _57 = RangeFrom::<usize> { start: move _58 };
        StorageDead(_58);
        _55 = <[u8; 32] as Index<RangeFrom<usize>>>::index(move _56, move _57) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = &(*_55);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut _6;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_54);
        _70 = core::slice::<impl [u8]>::len(move _71) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_71);
        _72 = Eq(const 2_usize, const 0_usize);
        assert(!move _72, "attempt to divide `{}` by zero", _70) -> [success: bb32, unwind continue];
    }

    bb32: {
        _69 = Div(move _70, const 2_usize);
        StorageDead(_70);
        _73 = CheckedSub(const _, _69);
        assert(!move (_73.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _69) -> [success: bb33, unwind continue];
    }

    bb33: {
        _68 = move (_73.0: usize);
        StorageDead(_69);
        _67 = RangeFrom::<usize> { start: move _68 };
        StorageDead(_68);
        _65 = <[u8; 16] as IndexMut<RangeFrom<usize>>>::index_mut(move _66, move _67) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = &mut (*_65);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _54;
        StorageLive(_79);
        _79 = &mut (*_64);
        _77 = decode_to_slice::<&[u8]>(move _78, move _79) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_79);
        StorageDead(_78);
        _76 = std::result::Result::<(), uint::hex::FromHexError>::map_err::<uint::FromHexError, fn(uint::hex::FromHexError) -> uint::FromHexError {<uint::FromHexError as From<uint::hex::FromHexError>>::from}>(move _77, <uint::FromHexError as From<uint::hex::FromHexError>>::from) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_77);
        _75 = <std::result::Result<(), uint::FromHexError> as Try>::branch(move _76) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_76);
        _80 = discriminant(_75);
        switchInt(move _80) -> [0: bb38, 1: bb39, otherwise: bb19];
    }

    bb38: {
        StorageLive(_84);
        _84 = ((_75 as Continue).0: ());
        _74 = _84;
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_74);
        _16 = const ();
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_43);
        goto -> bb41;
    }

    bb39: {
        StorageLive(_81);
        _81 = move ((_75 as Break).0: std::result::Result<std::convert::Infallible, uint::FromHexError>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<uint_types::U128, uint::FromHexError> as FromResidual<std::result::Result<Infallible, uint::FromHexError>>>::from_residual(move _83) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_43);
        goto -> bb43;
    }

    bb41: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_6;
        _86 = &(*_87);
        _85 = move _86 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_86);
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _85;
        _88 = <uint_types::U128 as From<&[u8]>>::from(move _89) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_89);
        _0 = std::result::Result::<uint_types::U128, uint::FromHexError>::Ok(move _88);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_2);
        goto -> bb45;
    }

    bb43: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_2);
        goto -> bb45;
    }

    bb45: {
        return;
    }
}
