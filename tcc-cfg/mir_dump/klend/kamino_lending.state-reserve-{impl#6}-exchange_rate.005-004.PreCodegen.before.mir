// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:806:1: 806:23>::exchange_rate` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:806:1: 806:23>::exchange_rate(_1: &ReserveCollateral, _2: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> reserve::CollateralExchangeRate {
    debug self => _1;
    debug total_liquidity => _2;
    let mut _0: state::reserve::CollateralExchangeRate;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: bool;
    let mut _6: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _7: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: u64;
    let mut _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).1: u64);
        _3 = Eq(move _4, const 0_u64);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        goto -> bb4;
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        StorageLive(_7);
        _11 = const _;
        _7 = &(*_11);
        _5 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _6, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _5) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_6);
        _0 = const _;
        goto -> bb7;
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_9);
        _9 = ((*_1).1: u64);
        StorageLive(_10);
        _10 = _2;
        _0 = reserve::CollateralExchangeRate::from_supply_and_liquidity(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_5);
        StorageDead(_3);
        return;
    }
}
