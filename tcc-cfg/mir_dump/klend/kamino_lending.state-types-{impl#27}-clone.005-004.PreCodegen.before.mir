// MIR for `state::types::<impl at programs\klend\src\state\types.rs:66:17: 66:22>::clone` before PreCodegen

fn state::types::<impl at programs\klend\src\state\types.rs:66:17: 66:22>::clone(_1: &state::types::LiquidateObligationResult) -> state::types::LiquidateObligationResult {
    debug self => _1;
    let mut _0: state::types::LiquidateObligationResult;
    let mut _2: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _3: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _4: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _5: u64;
    let mut _6: &u64;
    let _7: &u64;
    let mut _8: u64;
    let mut _9: &u64;
    let _10: &u64;
    let mut _11: u64;
    let mut _12: &u64;
    let _13: &u64;
    let mut _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _16: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _17: state::types::LiquidationReason;
    let mut _18: &state::types::LiquidationReason;
    let _19: &state::types::LiquidationReason;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _3 = &(*_4);
        _2 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: u64);
        _6 = &(*_7);
        _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: u64);
        _9 = &(*_10);
        _8 = <u64 as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: u64);
        _12 = &(*_13);
        _11 = <u64 as Clone>::clone(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _15 = &(*_16);
        _14 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Clone>::clone(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: state::types::LiquidationReason);
        _18 = &(*_19);
        _17 = <state::types::LiquidationReason as Clone>::clone(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        _0 = state::types::LiquidateObligationResult { settle_amount: move _2, repay_amount: move _5, withdraw_amount: move _8, withdraw_collateral_amount: move _11, liquidation_bonus_rate: move _14, liquidation_reason: move _17 };
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
