// MIR for `utils::fraction::<impl at programs\klend\src\utils\fraction.rs:97:1: 97:32>::mul_int_ratio` after PreCodegen

fn utils::fraction::<impl at programs\klend\src\utils\fraction.rs:97:1: 97:32>::mul_int_ratio(_1: &FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: impl Into<u128>, _3: impl Into<u128>) -> FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> {
    debug self => _1;
    debug numerator => _2;
    debug denominator => _3;
    let mut _0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _4: u128;
    let mut _5: impl Into<u128>;
    let mut _7: impl Into<u128>;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: bool;
    scope 1 {
        debug numerator => _4;
        let _6: u128;
        scope 2 {
            debug denominator => _6;
        }
    }

    bb0: {
        _12 = const false;
        _12 = const true;
        StorageLive(_4);
        StorageLive(_5);
        _5 = move _2;
        _4 = <impl Into<u128> as Into<u128>>::into(move _5) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _12 = const false;
        _7 = move _3;
        _6 = <impl Into<u128> as Into<u128>>::into(move _7) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = (*_1);
        StorageLive(_10);
        _10 = _4;
        _8 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul<u128>>::mul(move _9, move _10) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_11);
        _11 = _6;
        _0 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div<u128>>::div(move _8, move _11) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_12) -> [0: bb5, otherwise: bb6];
    }
}
