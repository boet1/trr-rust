// MIR for `handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_impl` after PreCodegen

fn handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_impl(_1: &handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: u64, _4: u64, _5: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug remaining_accounts => _2;
    debug liquidity_amount => _3;
    debug min_acceptable_received_liquidity_amount => _4;
    debug max_allowed_ltv_override_percent => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[&str; 3];
    let _11: &[&str; 3];
    let _12: [&str; 3];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let mut _14: &[core::fmt::rt::Argument<'_>; 2];
    let _15: &[core::fmt::rt::Argument<'_>; 2];
    let _16: [core::fmt::rt::Argument<'_>; 2];
    let mut _17: core::fmt::rt::Argument<'_>;
    let mut _18: &u64;
    let _19: &u64;
    let mut _20: core::fmt::rt::Argument<'_>;
    let mut _21: &u64;
    let _22: &u64;
    let _23: ();
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _25: std::result::Result<(), anchor_lang::error::Error>;
    let mut _26: &handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _31: ();
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _34: std::result::Result<(), anchor_lang::error::Error>;
    let mut _35: &state::nested_accounts::RedeemReserveCollateralAccounts<'_>;
    let _36: &state::nested_accounts::RedeemReserveCollateralAccounts<'_>;
    let _37: state::nested_accounts::RedeemReserveCollateralAccounts<'_>;
    let mut _38: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _39: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _40: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _41: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _42: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _43: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _44: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _45: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _46: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _47: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _48: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _49: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _50: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _51: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _52: anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _54: anchor_lang::prelude::Signer<'_>;
    let mut _55: &anchor_lang::prelude::Signer<'_>;
    let mut _56: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _57: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _58: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _59: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _60: isize;
    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _64: ();
    let _65: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _66: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _68: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _74: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _76: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _78: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _79: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _86: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _88: anchor_lang::prelude::Clock;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _90: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _97: bool;
    let mut _98: &anchor_lang::prelude::Pubkey;
    let _99: anchor_lang::prelude::Pubkey;
    let mut _100: &anchor_lang::prelude::Signer<'_>;
    let mut _101: &anchor_lang::prelude::Pubkey;
    let _102: &state::obligation::Obligation;
    let mut _103: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _104: bool;
    let mut _105: u64;
    let mut _106: bool;
    let mut _107: u64;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _113: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::AccountInfo<'_>;
    let _115: &anchor_lang::prelude::AccountInfo<'_>;
    let _116: anchor_lang::prelude::AccountInfo<'_>;
    let mut _117: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _125: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _126: &anchor_lang::prelude::AccountInfo<'_>;
    let _127: &anchor_lang::prelude::AccountInfo<'_>;
    let _128: anchor_lang::prelude::AccountInfo<'_>;
    let mut _129: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _137: (u64, u64);
    let mut _138: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _139: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _140: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _141: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _143: [&[u8]; 3];
    let mut _144: &[u8];
    let mut _145: &[u8];
    let _146: &[u8];
    let mut _147: &[u8];
    let _148: &[u8];
    let mut _149: &anchor_lang::prelude::Pubkey;
    let mut _150: &[u8];
    let mut _151: &[u8; 1];
    let _152: &[u8; 1];
    let _153: [u8; 1];
    let mut _154: u8;
    let mut _155: u64;
    let mut _156: &state::lending_market::LendingMarket;
    let mut _157: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _162: state::types::LiquidateAndRedeemResult;
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::LiquidateAndRedeemResult>;
    let mut _164: std::result::Result<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error>;
    let mut _165: &state::lending_market::LendingMarket;
    let _166: &state::lending_market::LendingMarket;
    let mut _167: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _168: &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve>;
    let mut _169: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _170: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _171: &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve>;
    let mut _172: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _173: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _174: &mut state::obligation::Obligation;
    let mut _175: &mut state::obligation::Obligation;
    let mut _176: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _177: &anchor_lang::prelude::Clock;
    let mut _178: u64;
    let mut _179: u64;
    let mut _180: std::option::Option<u64>;
    let mut _181: std::iter::Map<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:154:39: 154:42}>;
    let mut _182: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _183: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _184: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:154:39: 154:42};
    let mut _185: isize;
    let mut _187: !;
    let mut _188: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _190: ();
    let mut _191: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _192: std::result::Result<(), anchor_lang::error::Error>;
    let mut _193: anchor_lang::prelude::AccountInfo<'_>;
    let mut _194: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _195: anchor_lang::prelude::AccountInfo<'_>;
    let mut _196: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _197: anchor_lang::prelude::AccountInfo<'_>;
    let mut _198: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _199: anchor_lang::prelude::AccountInfo<'_>;
    let mut _200: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _201: anchor_lang::prelude::AccountInfo<'_>;
    let mut _202: &anchor_lang::prelude::Signer<'_>;
    let mut _203: u64;
    let mut _204: u8;
    let mut _205: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _206: &anchor_spl::token_interface::Mint;
    let _207: &anchor_spl::token_interface::Mint;
    let mut _208: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _209: isize;
    let mut _211: !;
    let mut _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _214: ();
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _216: std::result::Result<(), anchor_lang::error::Error>;
    let mut _217: anchor_lang::prelude::AccountInfo<'_>;
    let mut _218: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _219: anchor_lang::prelude::AccountInfo<'_>;
    let mut _220: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _221: anchor_lang::prelude::AccountInfo<'_>;
    let mut _222: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _223: anchor_lang::prelude::AccountInfo<'_>;
    let mut _224: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _225: &[&[u8]];
    let mut _226: &[&[u8]; 3];
    let mut _227: u64;
    let mut _228: isize;
    let mut _230: !;
    let mut _231: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _233: ();
    let mut _234: isize;
    let _237: ();
    let mut _238: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _239: std::result::Result<(), anchor_lang::error::Error>;
    let mut _240: anchor_lang::prelude::AccountInfo<'_>;
    let mut _241: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _242: anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _244: anchor_lang::prelude::AccountInfo<'_>;
    let mut _245: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _246: anchor_lang::prelude::AccountInfo<'_>;
    let mut _247: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _248: anchor_lang::prelude::AccountInfo<'_>;
    let mut _249: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _250: anchor_lang::prelude::AccountInfo<'_>;
    let mut _251: &anchor_lang::prelude::Signer<'_>;
    let mut _252: anchor_lang::prelude::AccountInfo<'_>;
    let mut _253: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _254: anchor_lang::prelude::AccountInfo<'_>;
    let mut _255: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _256: anchor_lang::prelude::AccountInfo<'_>;
    let mut _257: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _258: &[&[u8]];
    let mut _259: &[&[u8]; 3];
    let mut _260: u64;
    let mut _261: u64;
    let mut _262: u8;
    let mut _263: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _264: &anchor_spl::token_interface::Mint;
    let _265: &anchor_spl::token_interface::Mint;
    let mut _266: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _272: ();
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _274: std::result::Result<(), anchor_lang::error::Error>;
    let mut _275: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _276: anchor_lang::prelude::AccountInfo<'_>;
    let mut _277: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _278: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _279: anchor_lang::prelude::AccountInfo<'_>;
    let mut _280: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _281: anchor_lang::prelude::AccountInfo<'_>;
    let mut _282: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _283: anchor_lang::prelude::AccountInfo<'_>;
    let mut _284: &anchor_lang::prelude::Signer<'_>;
    let mut _285: anchor_lang::prelude::AccountInfo<'_>;
    let mut _286: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _287: u64;
    let mut _288: u8;
    let mut _289: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _290: &anchor_spl::token_interface::Mint;
    let _291: &anchor_spl::token_interface::Mint;
    let mut _292: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _293: isize;
    let mut _295: !;
    let mut _296: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _299: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _300: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _301: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _302: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _303: isize;
    let mut _305: !;
    let mut _306: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _309: bool;
    let mut _310: &&anchor_lang::prelude::Pubkey;
    let _311: anchor_lang::prelude::AccountInfo<'_>;
    let mut _312: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _313: &&anchor_lang::prelude::Pubkey;
    let _314: anchor_lang::prelude::AccountInfo<'_>;
    let mut _315: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _316: i64;
    let mut _317: u64;
    let mut _318: i64;
    let mut _319: u64;
    let mut _320: (i64, bool);
    let mut _321: u64;
    let _322: ();
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _324: std::result::Result<(), anchor_lang::error::Error>;
    let mut _325: u64;
    let mut _326: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _327: &anchor_lang::prelude::AccountInfo<'_>;
    let _328: &anchor_lang::prelude::AccountInfo<'_>;
    let _329: anchor_lang::prelude::AccountInfo<'_>;
    let mut _330: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _331: u64;
    let mut _332: &state::reserve::Reserve;
    let mut _333: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _334: u64;
    let mut _335: u64;
    let mut _336: state::types::LendingAction;
    let mut _337: i64;
    let mut _338: isize;
    let mut _340: !;
    let mut _341: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _344: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _345: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _346: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _347: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _348: isize;
    let mut _350: !;
    let mut _351: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _353: ();
    let mut _354: bool;
    let mut _355: &&anchor_lang::prelude::Pubkey;
    let _356: anchor_lang::prelude::AccountInfo<'_>;
    let mut _357: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _358: &&anchor_lang::prelude::Pubkey;
    let _359: anchor_lang::prelude::AccountInfo<'_>;
    let mut _360: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _361: bool;
    let mut _362: &std::option::Option<(u64, u64)>;
    let _363: ();
    let mut _364: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _365: std::result::Result<(), anchor_lang::error::Error>;
    let mut _366: u64;
    let mut _367: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _368: &anchor_lang::prelude::AccountInfo<'_>;
    let _369: &anchor_lang::prelude::AccountInfo<'_>;
    let _370: anchor_lang::prelude::AccountInfo<'_>;
    let mut _371: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _372: u64;
    let mut _373: &state::reserve::Reserve;
    let mut _374: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _375: u64;
    let mut _376: u64;
    let mut _377: state::types::LendingAction;
    let mut _378: u64;
    let mut _379: isize;
    let mut _381: !;
    let mut _382: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _384: ();
    let mut _385: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _386: std::result::Result<(), anchor_lang::error::Error>;
    let mut _387: u64;
    let mut _388: u64;
    let mut _389: isize;
    let mut _391: !;
    let mut _392: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _394: ();
    let mut _395: &[&str; 3];
    let mut _396: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _397: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _398: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _399: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _400: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _401: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _402: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _403: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _404: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _405: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _406: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _407: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _408: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _409: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _410: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _411: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _412: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _413: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _414: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _415: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _416: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _417: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _418: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _419: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _420: bool;
    let mut _421: bool;
    let mut _422: bool;
    let mut _423: bool;
    let mut _424: bool;
    let mut _425: bool;
    let mut _426: bool;
    let mut _427: bool;
    let mut _428: bool;
    let mut _429: bool;
    let mut _430: bool;
    let mut _431: bool;
    let mut _432: bool;
    let mut _433: bool;
    let mut _434: bool;
    let mut _435: bool;
    let mut _436: bool;
    let mut _437: bool;
    let mut _438: bool;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _525: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _526: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _527: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _528: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _529: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _530: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _531: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _532: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _533: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _534: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _535: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _536: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _537: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _538: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _539: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _540: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _541: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _542: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _543: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _544: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _545: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _546: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _547: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _28;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _31;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _61;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _64;
        scope 8 {
        }
    }
    scope 9 {
        debug lending_market => _65;
        let _75: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
        let _81: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _84: std::cell::RefMut<'_, state::obligation::Obligation>;
        scope 14 {
            debug obligation => _75;
            let _85: anchor_lang::prelude::Pubkey;
            scope 19 {
                debug lending_market_key => _85;
                let _87: &anchor_lang::prelude::Clock;
                let _92: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _95: anchor_lang::prelude::Clock;
                scope 20 {
                    debug clock => _87;
                    let _96: std::option::Option<u64>;
                    scope 25 {
                        debug max_allowed_ltv_override_pct_opt => _96;
                        let _111: u64;
                        let _119: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _122: u64;
                        scope 26 {
                            debug initial_withdraw_reserve_token_balance => _111;
                            let _123: u64;
                            let _131: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _134: u64;
                            scope 31 {
                                debug initial_repay_reserve_token_balance => _123;
                                let _135: u64;
                                let _136: u64;
                                scope 36 {
                                    debug initial_repay_reserve_available_amount => _135;
                                    debug initial_withdraw_reserve_available_amount => _136;
                                    let _142: &[&[u8]; 3];
                                    scope 37 {
                                        debug authority_signer_seeds => _142;
                                        let _158: u64;
                                        let _159: u64;
                                        let _160: u64;
                                        let _161: std::option::Option<(u64, u64)>;
                                        let _186: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _189: state::types::LiquidateAndRedeemResult;
                                        scope 38 {
                                            debug repay_amount => _158;
                                            debug withdraw_collateral_amount => _159;
                                            debug withdraw_amount => _160;
                                            debug total_withdraw_liquidity_amount => _161;
                                            let _210: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _213: ();
                                            let _229: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _232: ();
                                            let _343: &std::cell::Ref<'_, state::reserve::Reserve>;
                                            let _349: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _352: std::cell::Ref<'_, state::reserve::Reserve>;
                                            scope 43 {
                                                debug residual => _210;
                                                scope 44 {
                                                }
                                            }
                                            scope 45 {
                                                debug val => _213;
                                                scope 46 {
                                                }
                                            }
                                            scope 47 {
                                                debug residual => _229;
                                                scope 48 {
                                                }
                                            }
                                            scope 49 {
                                                debug val => _232;
                                                scope 50 {
                                                }
                                            }
                                            scope 51 {
                                                debug withdraw_liquidity_amount => _235;
                                                debug protocol_fee => _236;
                                                let _235: u64;
                                                let _236: u64;
                                                let _268: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _271: ();
                                                let _294: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _297: ();
                                                let _298: &std::cell::Ref<'_, state::reserve::Reserve>;
                                                let _304: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _307: std::cell::Ref<'_, state::reserve::Reserve>;
                                                scope 52 {
                                                    debug residual => _268;
                                                    scope 53 {
                                                    }
                                                }
                                                scope 54 {
                                                    debug val => _271;
                                                    scope 55 {
                                                    }
                                                }
                                                scope 56 {
                                                    debug residual => _294;
                                                    scope 57 {
                                                    }
                                                }
                                                scope 58 {
                                                    debug val => _297;
                                                    scope 59 {
                                                    }
                                                }
                                                scope 60 {
                                                    debug withdraw_reserve => _298;
                                                    let _308: i64;
                                                    scope 65 {
                                                        debug net_withdrawal_amount => _308;
                                                        let _339: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _342: ();
                                                        scope 66 {
                                                            debug residual => _339;
                                                            scope 67 {
                                                            }
                                                        }
                                                        scope 68 {
                                                            debug val => _342;
                                                            scope 69 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 61 {
                                                    debug residual => _304;
                                                    scope 62 {
                                                    }
                                                }
                                                scope 63 {
                                                    debug val => _307;
                                                    scope 64 {
                                                    }
                                                }
                                            }
                                            scope 70 {
                                                debug repay_reserve => _343;
                                                let _380: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _383: ();
                                                let _390: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _393: ();
                                                scope 75 {
                                                    debug residual => _380;
                                                    scope 76 {
                                                    }
                                                }
                                                scope 77 {
                                                    debug val => _383;
                                                    scope 78 {
                                                    }
                                                }
                                                scope 79 {
                                                    debug residual => _390;
                                                    scope 80 {
                                                    }
                                                }
                                                scope 81 {
                                                    debug val => _393;
                                                    scope 82 {
                                                    }
                                                }
                                            }
                                            scope 71 {
                                                debug residual => _349;
                                                scope 72 {
                                                }
                                            }
                                            scope 73 {
                                                debug val => _352;
                                                scope 74 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _186;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _189;
                                            scope 42 {
                                            }
                                        }
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _131;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _134;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _119;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _122;
                            scope 30 {
                            }
                        }
                    }
                }
                scope 21 {
                    debug residual => _92;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _95;
                    scope 24 {
                    }
                }
            }
        }
        scope 15 {
            debug residual => _81;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _84;
            scope 18 {
            }
        }
    }
    scope 10 {
        debug residual => _71;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _74;
        scope 13 {
        }
    }

    bb0: {
        _438 = const false;
        _437 = const false;
        _436 = const false;
        _435 = const false;
        _434 = const false;
        _433 = const false;
        _432 = const false;
        _431 = const false;
        _430 = const false;
        _429 = const false;
        _428 = const false;
        _427 = const false;
        _426 = const false;
        _425 = const false;
        _424 = const false;
        _423 = const false;
        _422 = const false;
        _420 = const false;
        _421 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _395 = const _;
        _11 = &(*_395);
        _10 = &(*_11);
        _9 = move _10 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_3;
        _18 = &(*_19);
        _17 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_5;
        _21 = &(*_22);
        _20 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _21) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_21);
        _16 = [move _17, move _20];
        StorageDead(_20);
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = move _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_14);
        _8 = Arguments::<'_>::new_v1(move _9, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_9);
        _7 = _print(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_7);
        _6 = const ();
        StorageDead(_6);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        _25 = liquidate_obligation_checks(move _26) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_26);
        _24 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb6, unwind: bb238];
    }

    bb6: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: ());
        _23 = _31;
        StorageDead(_31);
        _439 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_1).14: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _38 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _39) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_28);
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb10, unwind: bb293];
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_28);
        _505 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb215;
    }

    bb11: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &((*_1).15: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _40 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _41) -> [return: bb12, unwind: bb237];
    }

    bb12: {
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &((*_1).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _42 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as Clone>::clone(move _43) -> [return: bb13, unwind: bb236];
    }

    bb13: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _44 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as Clone>::clone(move _45) -> [return: bb14, unwind: bb236];
    }

    bb14: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &((*_1).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _46 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as Clone>::clone(move _47) -> [return: bb15, unwind: bb235];
    }

    bb15: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &((*_1).11: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _48 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _49) -> [return: bb16, unwind: bb234];
    }

    bb16: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _50 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as Clone>::clone(move _51) -> [return: bb17, unwind: bb233];
    }

    bb17: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _52 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _53) -> [return: bb18, unwind: bb233];
    }

    bb18: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _54 = <anchor_lang::prelude::Signer<'_> as Clone>::clone(move _55) -> [return: bb19, unwind: bb232];
    }

    bb19: {
        StorageDead(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &((*_1).16: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _56 = <anchor_lang::prelude::Program<'_, Token> as Clone>::clone(move _57) -> [return: bb20, unwind: bb232];
    }

    bb20: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &((*_1).18: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _58 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Clone>::clone(move _59) -> [return: bb21, unwind: bb232];
    }

    bb21: {
        StorageDead(_59);
        _37 = nested_accounts::RedeemReserveCollateralAccounts::<'_> { user_source_collateral: move _38, user_destination_liquidity: move _40, reserve: move _42, reserve_liquidity_mint: move _44, reserve_collateral_mint: move _46, reserve_liquidity_supply: move _48, lending_market: move _50, lending_market_authority: move _52, owner: move _54, collateral_token_program: move _56, liquidity_token_program: move _58 };
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = redeem_reserve_collateral_checks(move _35) -> [return: bb22, unwind: bb231];
    }

    bb22: {
        StorageDead(_35);
        _33 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _34) -> [return: bb23, unwind: bb231];
    }

    bb23: {
        StorageDead(_34);
        _60 = discriminant(_33);
        switchInt(move _60) -> [0: bb24, 1: bb25, otherwise: bb8];
    }

    bb24: {
        StorageLive(_64);
        _64 = ((_33 as Continue).0: ());
        _32 = _64;
        StorageDead(_64);
        _441 = discriminant(_33);
        drop(_37) -> [return: bb27, unwind: bb238];
    }

    bb25: {
        StorageLive(_61);
        _61 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb26, unwind: bb292];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_61);
        _503 = discriminant(_33);
        drop(_37) -> [return: bb214, unwind: bb238];
    }

    bb27: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _68 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _69) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_69);
        _67 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb29, unwind: bb238];
    }

    bb29: {
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb30, 1: bb31, otherwise: bb8];
    }

    bb30: {
        StorageLive(_74);
        _74 = move ((_67 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _66 = move _74;
        StorageDead(_74);
        _65 = &_66;
        _443 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _78 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _79) -> [return: bb33, unwind: bb230];
    }

    bb31: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _73) -> [return: bb32, unwind: bb291];
    }

    bb32: {
        StorageDead(_73);
        StorageDead(_71);
        _501 = discriminant(_67);
        StorageDead(_67);
        goto -> bb213;
    }

    bb33: {
        StorageDead(_79);
        _77 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _78) -> [return: bb34, unwind: bb230];
    }

    bb34: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb35, 1: bb36, otherwise: bb8];
    }

    bb35: {
        StorageLive(_84);
        _84 = move ((_77 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _76 = move _84;
        StorageDead(_84);
        _75 = &mut _76;
        _445 = discriminant(_77);
        StorageDead(_77);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _85 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _86) -> [return: bb38, unwind: bb229];
    }

    bb36: {
        StorageLive(_81);
        _81 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _83) -> [return: bb37, unwind: bb290];
    }

    bb37: {
        StorageDead(_83);
        StorageDead(_81);
        _499 = discriminant(_77);
        StorageDead(_77);
        goto -> bb212;
    }

    bb38: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb39, unwind: bb229];
    }

    bb39: {
        _89 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _90) -> [return: bb40, unwind: bb229];
    }

    bb40: {
        StorageDead(_90);
        _91 = discriminant(_89);
        switchInt(move _91) -> [0: bb41, 1: bb42, otherwise: bb8];
    }

    bb41: {
        StorageLive(_95);
        _95 = move ((_89 as Continue).0: anchor_lang::prelude::Clock);
        _88 = move _95;
        StorageDead(_95);
        _87 = &_88;
        _447 = discriminant(_89);
        StorageDead(_89);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _99 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _100) -> [return: bb44, unwind: bb229];
    }

    bb42: {
        StorageLive(_92);
        _92 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _94) -> [return: bb43, unwind: bb289];
    }

    bb43: {
        StorageDead(_94);
        StorageDead(_92);
        _497 = discriminant(_89);
        StorageDead(_89);
        goto -> bb211;
    }

    bb44: {
        _98 = &_99;
        StorageDead(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_75);
        _102 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _103) -> [return: bb45, unwind: bb229];
    }

    bb45: {
        StorageDead(_103);
        _101 = &((*_102).3: anchor_lang::prelude::Pubkey);
        _97 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _98, move _101) -> [return: bb46, unwind: bb229];
    }

    bb46: {
        switchInt(move _97) -> [0: bb54, otherwise: bb47];
    }

    bb47: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _5;
        _104 = Gt(move _105, const 0_u64);
        switchInt(move _104) -> [0: bb53, otherwise: bb48];
    }

    bb48: {
        StorageDead(_105);
        StorageLive(_106);
        _106 = const false;
        switchInt(move _106) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        StorageLive(_107);
        _107 = _5;
        _96 = std::option::Option::<u64>::Some(move _107);
        StorageDead(_107);
        goto -> bb52;
    }

    bb50: {
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = const "Warning! Attempting to set an ltv override outside the staging program";
        _109 = &(*_110);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb51, unwind: bb229];
    }

    bb51: {
        StorageDead(_109);
        StorageDead(_110);
        StorageDead(_108);
        _96 = std::option::Option::<u64>::None;
        goto -> bb52;
    }

    bb52: {
        StorageDead(_106);
        goto -> bb56;
    }

    bb53: {
        StorageDead(_105);
        goto -> bb55;
    }

    bb54: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb55;
    }

    bb55: {
        _96 = std::option::Option::<u64>::None;
        goto -> bb56;
    }

    bb56: {
        StorageDead(_104);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _396 = deref_copy ((*_1).11: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _524 = (((_396.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _117 = &(*_524);
        _116 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _117) -> [return: bb57, unwind: bb229];
    }

    bb57: {
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = amount(move _114) -> [return: bb58, unwind: bb228];
    }

    bb58: {
        StorageDead(_114);
        _112 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb59, unwind: bb228];
    }

    bb59: {
        StorageDead(_113);
        _118 = discriminant(_112);
        switchInt(move _118) -> [0: bb60, 1: bb61, otherwise: bb8];
    }

    bb60: {
        StorageLive(_122);
        _122 = ((_112 as Continue).0: u64);
        _111 = _122;
        StorageDead(_122);
        _449 = discriminant(_112);
        drop(_116) -> [return: bb63, unwind: bb229];
    }

    bb61: {
        StorageLive(_119);
        _119 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_121);
        _121 = move _119;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _121) -> [return: bb62, unwind: bb288];
    }

    bb62: {
        StorageDead(_121);
        StorageDead(_119);
        _495 = discriminant(_112);
        drop(_116) -> [return: bb209, unwind: bb229];
    }

    bb63: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_112);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _397 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _525 = (((_397.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _129 = &(*_525);
        _128 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _129) -> [return: bb64, unwind: bb229];
    }

    bb64: {
        StorageDead(_129);
        _127 = &_128;
        _126 = &(*_127);
        _125 = amount(move _126) -> [return: bb65, unwind: bb227];
    }

    bb65: {
        StorageDead(_126);
        _124 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _125) -> [return: bb66, unwind: bb227];
    }

    bb66: {
        StorageDead(_125);
        _130 = discriminant(_124);
        switchInt(move _130) -> [0: bb67, 1: bb68, otherwise: bb8];
    }

    bb67: {
        StorageLive(_134);
        _134 = ((_124 as Continue).0: u64);
        _123 = _134;
        StorageDead(_134);
        _451 = discriminant(_124);
        drop(_128) -> [return: bb70, unwind: bb229];
    }

    bb68: {
        StorageLive(_131);
        _131 = move ((_124 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_133);
        _133 = move _131;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _133) -> [return: bb69, unwind: bb287];
    }

    bb69: {
        StorageDead(_133);
        StorageDead(_131);
        _493 = discriminant(_124);
        drop(_128) -> [return: bb207, unwind: bb229];
    }

    bb70: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_124);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _138 = &(*_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &((*_1).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _140 = &(*_141);
        _137 = initial_liquidation_reserve_liquidity_available_amount(move _138, move _140) -> [return: bb71, unwind: bb229];
    }

    bb71: {
        StorageDead(_140);
        StorageDead(_138);
        StorageLive(_135);
        _135 = (_137.0: u64);
        StorageLive(_136);
        _136 = (_137.1: u64);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = const _;
        _145 = &(*_146);
        _144 = _145;
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_85;
        _148 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _149) -> [return: bb72, unwind: bb229];
    }

    bb72: {
        _147 = &(*_148);
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &(*_65);
        _156 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _157) -> [return: bb73, unwind: bb229];
    }

    bb73: {
        StorageDead(_157);
        _155 = ((*_156).1: u64);
        _154 = move _155 as u8 (IntToInt);
        StorageDead(_155);
        _153 = [move _154];
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = move _151 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_151);
        _143 = [move _144, move _147, move _150];
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        _142 = &_143;
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &(*_65);
        _166 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _167) -> [return: bb74, unwind: bb229];
    }

    bb74: {
        _165 = &(*_166);
        StorageDead(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _169 = &(*_170);
        _168 = move _169 as &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve> (PointerCoercion(Unsize));
        StorageDead(_169);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &((*_1).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _172 = &(*_173);
        _171 = move _172 as &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve> (PointerCoercion(Unsize));
        StorageDead(_172);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &mut (*_75);
        _175 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _176) -> [return: bb75, unwind: bb229];
    }

    bb75: {
        _174 = &mut (*_175);
        StorageDead(_176);
        StorageLive(_177);
        _177 = &(*_87);
        StorageLive(_178);
        _178 = _3;
        StorageLive(_179);
        _179 = _4;
        StorageLive(_180);
        _180 = _96;
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &(*_2);
        _182 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _183) -> [return: bb76, unwind: bb229];
    }

    bb76: {
        StorageDead(_183);
        StorageLive(_184);
        _184 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:154:39: 154:42};
        _181 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:154:39: 154:42}>(move _182, move _184) -> [return: bb77, unwind: bb229];
    }

    bb77: {
        StorageDead(_184);
        StorageDead(_182);
        _164 = liquidate_and_redeem::<'_, account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, std::iter::Map<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:154:39: 154:42}>>(move _165, move _168, move _171, move _174, move _177, move _178, move _179, move _180, move _181) -> [return: bb78, unwind: bb229];
    }

    bb78: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_165);
        _163 = <std::result::Result<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error> as Try>::branch(move _164) -> [return: bb79, unwind: bb229];
    }

    bb79: {
        StorageDead(_164);
        _185 = discriminant(_163);
        switchInt(move _185) -> [0: bb80, 1: bb81, otherwise: bb8];
    }

    bb80: {
        StorageLive(_189);
        _189 = move ((_163 as Continue).0: state::types::LiquidateAndRedeemResult);
        _162 = move _189;
        StorageDead(_189);
        StorageLive(_158);
        _158 = (_162.0: u64);
        StorageLive(_159);
        _159 = (_162.2: u64);
        StorageLive(_160);
        _160 = (_162.1: u64);
        StorageLive(_161);
        _161 = (_162.3: std::option::Option<(u64, u64)>);
        _453 = discriminant(_163);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &((*_1).17: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _193 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _194) -> [return: bb83, unwind: bb229];
    }

    bb81: {
        StorageLive(_186);
        _186 = move ((_163 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_188);
        _188 = move _186;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _188) -> [return: bb82, unwind: bb286];
    }

    bb82: {
        StorageDead(_188);
        StorageDead(_186);
        _491 = discriminant(_163);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_162);
        goto -> bb206;
    }

    bb83: {
        _438 = const true;
        StorageDead(_194);
        StorageLive(_195);
        StorageLive(_196);
        _398 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _526 = (((_398.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _196 = &(*_526);
        _195 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _196) -> [return: bb84, unwind: bb285];
    }

    bb84: {
        _437 = const true;
        StorageDead(_196);
        StorageLive(_197);
        StorageLive(_198);
        _399 = deref_copy ((*_1).13: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _527 = (((_399.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _198 = &(*_527);
        _197 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _198) -> [return: bb85, unwind: bb283];
    }

    bb85: {
        _436 = const true;
        StorageDead(_198);
        StorageLive(_199);
        StorageLive(_200);
        _400 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _528 = (((_400.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _200 = &(*_528);
        _199 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _200) -> [return: bb86, unwind: bb281];
    }

    bb86: {
        _435 = const true;
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _201 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _202) -> [return: bb87, unwind: bb279];
    }

    bb87: {
        _434 = const true;
        StorageDead(_202);
        StorageLive(_203);
        _203 = _158;
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _401 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _529 = (((_401.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _208 = &(*_529);
        _207 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _208) -> [return: bb88, unwind: bb277];
    }

    bb88: {
        _206 = &(*_207);
        _205 = <anchor_spl::token_interface::Mint as Deref>::deref(move _206) -> [return: bb89, unwind: bb277];
    }

    bb89: {
        StorageDead(_208);
        StorageDead(_206);
        _204 = ((*_205).2: u8);
        _438 = const false;
        _437 = const false;
        _436 = const false;
        _435 = const false;
        _434 = const false;
        _192 = repay_obligation_liquidity_transfer(move _193, move _195, move _197, move _199, move _201, move _203, move _204) -> [return: bb90, unwind: bb277];
    }

    bb90: {
        StorageDead(_204);
        StorageDead(_203);
        _434 = const false;
        StorageDead(_201);
        _435 = const false;
        StorageDead(_199);
        _436 = const false;
        StorageDead(_197);
        _437 = const false;
        StorageDead(_195);
        _438 = const false;
        StorageDead(_193);
        _191 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _192) -> [return: bb91, unwind: bb229];
    }

    bb91: {
        StorageDead(_192);
        _209 = discriminant(_191);
        switchInt(move _209) -> [0: bb92, 1: bb93, otherwise: bb8];
    }

    bb92: {
        StorageLive(_213);
        _213 = ((_191 as Continue).0: ());
        _190 = _213;
        StorageDead(_213);
        _455 = discriminant(_191);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = &((*_1).16: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _217 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _218) -> [return: bb95, unwind: bb229];
    }

    bb93: {
        StorageLive(_210);
        _210 = move ((_191 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_212);
        _212 = move _210;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _212) -> [return: bb94, unwind: bb275];
    }

    bb94: {
        StorageDead(_212);
        StorageDead(_210);
        _489 = discriminant(_191);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb205;
    }

    bb95: {
        _433 = const true;
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        _402 = deref_copy ((*_1).14: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _530 = (((_402.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _220 = &(*_530);
        _219 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _220) -> [return: bb96, unwind: bb274];
    }

    bb96: {
        _432 = const true;
        StorageDead(_220);
        StorageLive(_221);
        StorageLive(_222);
        _403 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _531 = (((_403.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _222 = &(*_531);
        _221 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _222) -> [return: bb97, unwind: bb272];
    }

    bb97: {
        _431 = const true;
        StorageDead(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _223 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _224) -> [return: bb98, unwind: bb270];
    }

    bb98: {
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &(*_142);
        _225 = move _226 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_226);
        StorageLive(_227);
        _227 = _160;
        _433 = const false;
        _432 = const false;
        _431 = const false;
        _216 = withdraw_obligation_collateral_transfer(move _217, move _219, move _221, move _223, move _225, move _227) -> [return: bb99, unwind: bb270];
    }

    bb99: {
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_223);
        _431 = const false;
        StorageDead(_221);
        _432 = const false;
        StorageDead(_219);
        _433 = const false;
        StorageDead(_217);
        _215 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _216) -> [return: bb100, unwind: bb229];
    }

    bb100: {
        StorageDead(_216);
        _228 = discriminant(_215);
        switchInt(move _228) -> [0: bb101, 1: bb102, otherwise: bb8];
    }

    bb101: {
        StorageLive(_232);
        _232 = ((_215 as Continue).0: ());
        _214 = _232;
        StorageDead(_232);
        _457 = discriminant(_215);
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_233);
        _234 = discriminant(_161);
        switchInt(move _234) -> [1: bb104, otherwise: bb161];
    }

    bb102: {
        StorageLive(_229);
        _229 = move ((_215 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_231);
        _231 = move _229;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _231) -> [return: bb103, unwind: bb268];
    }

    bb103: {
        StorageDead(_231);
        StorageDead(_229);
        _487 = discriminant(_215);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb205;
    }

    bb104: {
        StorageLive(_235);
        _235 = (((_161 as Some).0: (u64, u64)).0: u64);
        StorageLive(_236);
        _236 = (((_161 as Some).0: (u64, u64)).1: u64);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &((*_1).16: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _240 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _241) -> [return: bb105, unwind: bb229];
    }

    bb105: {
        _430 = const true;
        StorageDead(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &((*_1).18: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _242 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _243) -> [return: bb106, unwind: bb267];
    }

    bb106: {
        _429 = const true;
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        _404 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _532 = (((_404.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _245 = &(*_532);
        _244 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _245) -> [return: bb107, unwind: bb265];
    }

    bb107: {
        _428 = const true;
        StorageDead(_245);
        StorageLive(_246);
        StorageLive(_247);
        _405 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _533 = (((_405.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _247 = &(*_533);
        _246 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _247) -> [return: bb108, unwind: bb263];
    }

    bb108: {
        _427 = const true;
        StorageDead(_247);
        StorageLive(_248);
        StorageLive(_249);
        _406 = deref_copy ((*_1).14: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _534 = (((_406.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _249 = &(*_534);
        _248 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _249) -> [return: bb109, unwind: bb261];
    }

    bb109: {
        _426 = const true;
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _250 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _251) -> [return: bb110, unwind: bb259];
    }

    bb110: {
        _425 = const true;
        StorageDead(_251);
        StorageLive(_252);
        StorageLive(_253);
        _407 = deref_copy ((*_1).11: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _535 = (((_407.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _253 = &(*_535);
        _252 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _253) -> [return: bb111, unwind: bb257];
    }

    bb111: {
        _424 = const true;
        StorageDead(_253);
        StorageLive(_254);
        StorageLive(_255);
        _408 = deref_copy ((*_1).15: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _536 = (((_408.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _255 = &(*_536);
        _254 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _255) -> [return: bb112, unwind: bb255];
    }

    bb112: {
        _423 = const true;
        StorageDead(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _256 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _257) -> [return: bb113, unwind: bb253];
    }

    bb113: {
        _422 = const true;
        StorageDead(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &(*_142);
        _258 = move _259 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_259);
        StorageLive(_260);
        _260 = _159;
        StorageLive(_261);
        _261 = _235;
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _409 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _537 = (((_409.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _266 = &(*_537);
        _265 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _266) -> [return: bb114, unwind: bb251];
    }

    bb114: {
        _264 = &(*_265);
        _263 = <anchor_spl::token_interface::Mint as Deref>::deref(move _264) -> [return: bb115, unwind: bb251];
    }

    bb115: {
        StorageDead(_266);
        StorageDead(_264);
        _262 = ((*_263).2: u8);
        _430 = const false;
        _429 = const false;
        _428 = const false;
        _427 = const false;
        _426 = const false;
        _425 = const false;
        _424 = const false;
        _423 = const false;
        _422 = const false;
        _239 = redeem_reserve_collateral_transfer(move _240, move _242, move _244, move _246, move _248, move _250, move _252, move _254, move _256, move _258, move _260, move _261, move _262) -> [return: bb116, unwind: bb251];
    }

    bb116: {
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_258);
        _422 = const false;
        StorageDead(_256);
        _423 = const false;
        StorageDead(_254);
        _424 = const false;
        StorageDead(_252);
        _425 = const false;
        StorageDead(_250);
        _426 = const false;
        StorageDead(_248);
        _427 = const false;
        StorageDead(_246);
        _428 = const false;
        StorageDead(_244);
        _429 = const false;
        StorageDead(_242);
        _430 = const false;
        StorageDead(_240);
        _238 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _239) -> [return: bb117, unwind: bb229];
    }

    bb117: {
        StorageDead(_239);
        _267 = discriminant(_238);
        switchInt(move _267) -> [0: bb118, 1: bb119, otherwise: bb8];
    }

    bb118: {
        StorageLive(_271);
        _271 = ((_238 as Continue).0: ());
        _237 = _271;
        StorageDead(_271);
        _459 = discriminant(_238);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &((*_1).18: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _276 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _277) -> [return: bb121, unwind: bb229];
    }

    bb119: {
        StorageLive(_268);
        _268 = move ((_238 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_270);
        _270 = move _268;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _270) -> [return: bb120, unwind: bb249];
    }

    bb120: {
        StorageDead(_270);
        StorageDead(_268);
        _485 = discriminant(_238);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_238);
        StorageDead(_237);
        goto -> bb204;
    }

    bb121: {
        _421 = const true;
        StorageDead(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _410 = deref_copy ((*_1).15: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _538 = (((_410.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _280 = &(*_538);
        _279 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _280) -> [return: bb122, unwind: bb248];
    }

    bb122: {
        StorageDead(_280);
        StorageLive(_281);
        StorageLive(_282);
        _411 = deref_copy ((*_1).12: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _539 = (((_411.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _282 = &(*_539);
        _281 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _282) -> [return: bb123, unwind: bb226];
    }

    bb123: {
        StorageDead(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _283 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _284) -> [return: bb124, unwind: bb225];
    }

    bb124: {
        StorageDead(_284);
        StorageLive(_285);
        StorageLive(_286);
        _412 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _540 = (((_412.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _286 = &(*_540);
        _285 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _286) -> [return: bb125, unwind: bb224];
    }

    bb125: {
        StorageDead(_286);
        _278 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _279, mint: move _285, to: move _281, authority: move _283 };
        StorageDead(_285);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_279);
        _421 = const false;
        _275 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new(move _276, move _278) -> [return: bb126, unwind: bb248];
    }

    bb126: {
        _420 = const true;
        StorageDead(_278);
        _421 = const false;
        StorageDead(_276);
        StorageLive(_287);
        _287 = _236;
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _413 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _541 = (((_413.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _292 = &(*_541);
        _291 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _292) -> [return: bb127, unwind: bb246];
    }

    bb127: {
        _290 = &(*_291);
        _289 = <anchor_spl::token_interface::Mint as Deref>::deref(move _290) -> [return: bb128, unwind: bb246];
    }

    bb128: {
        StorageDead(_292);
        StorageDead(_290);
        _288 = ((*_289).2: u8);
        _420 = const false;
        _274 = anchor_spl::token_2022::transfer_checked(move _275, move _287, move _288) -> [return: bb129, unwind: bb246];
    }

    bb129: {
        StorageDead(_288);
        StorageDead(_287);
        _420 = const false;
        StorageDead(_275);
        _273 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _274) -> [return: bb130, unwind: bb229];
    }

    bb130: {
        StorageDead(_274);
        _293 = discriminant(_273);
        switchInt(move _293) -> [0: bb131, 1: bb132, otherwise: bb8];
    }

    bb131: {
        StorageLive(_297);
        _297 = ((_273 as Continue).0: ());
        _272 = _297;
        StorageDead(_297);
        _461 = discriminant(_273);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_273);
        StorageDead(_272);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &((*_1).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _301 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _302) -> [return: bb134, unwind: bb229];
    }

    bb132: {
        StorageLive(_294);
        _294 = move ((_273 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_296);
        _296 = move _294;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _296) -> [return: bb133, unwind: bb244];
    }

    bb133: {
        StorageDead(_296);
        StorageDead(_294);
        _483 = discriminant(_273);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_273);
        StorageDead(_272);
        goto -> bb204;
    }

    bb134: {
        StorageDead(_302);
        _300 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _301) -> [return: bb135, unwind: bb229];
    }

    bb135: {
        StorageDead(_301);
        _303 = discriminant(_300);
        switchInt(move _303) -> [0: bb136, 1: bb137, otherwise: bb8];
    }

    bb136: {
        StorageLive(_307);
        _307 = move ((_300 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _299 = move _307;
        StorageDead(_307);
        _298 = &_299;
        _463 = discriminant(_300);
        StorageDead(_300);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _414 = deref_copy ((*_1).11: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _542 = (((_414.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _312 = &(*_542);
        _311 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _312) -> [return: bb139, unwind: bb223];
    }

    bb137: {
        StorageLive(_304);
        _304 = move ((_300 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_306);
        _306 = move _304;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _306) -> [return: bb138, unwind: bb243];
    }

    bb138: {
        StorageDead(_306);
        StorageDead(_304);
        _481 = discriminant(_300);
        StorageDead(_300);
        goto -> bb203;
    }

    bb139: {
        StorageDead(_312);
        _310 = &(_311.0: &anchor_lang::prelude::Pubkey);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _415 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _543 = (((_415.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _315 = &(*_543);
        _314 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _315) -> [return: bb140, unwind: bb222];
    }

    bb140: {
        StorageDead(_315);
        _313 = &(_314.0: &anchor_lang::prelude::Pubkey);
        _309 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _310, move _313) -> [return: bb141, unwind: bb221];
    }

    bb141: {
        switchInt(move _309) -> [0: bb146, otherwise: bb142];
    }

    bb142: {
        drop(_314) -> [return: bb143, unwind: bb222];
    }

    bb143: {
        StorageDead(_314);
        StorageDead(_313);
        drop(_311) -> [return: bb144, unwind: bb223];
    }

    bb144: {
        StorageDead(_311);
        StorageDead(_310);
        StorageLive(_316);
        StorageLive(_317);
        _317 = _235;
        _316 = move _317 as i64 (IntToInt);
        StorageDead(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = _158;
        _318 = move _319 as i64 (IntToInt);
        StorageDead(_319);
        _320 = CheckedSub(_316, _318);
        assert(!move (_320.1: bool), "attempt to compute `{} - {}`, which would overflow", move _316, move _318) -> [success: bb145, unwind: bb223];
    }

    bb145: {
        _308 = move (_320.0: i64);
        StorageDead(_318);
        StorageDead(_316);
        goto -> bb149;
    }

    bb146: {
        drop(_314) -> [return: bb147, unwind: bb222];
    }

    bb147: {
        StorageDead(_314);
        StorageDead(_313);
        drop(_311) -> [return: bb148, unwind: bb223];
    }

    bb148: {
        StorageDead(_311);
        StorageDead(_310);
        StorageLive(_321);
        _321 = _235;
        _308 = move _321 as i64 (IntToInt);
        StorageDead(_321);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_309);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _416 = deref_copy ((*_1).11: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _544 = (((_416.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _330 = &(*_544);
        _329 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _330) -> [return: bb150, unwind: bb223];
    }

    bb150: {
        StorageDead(_330);
        _328 = &_329;
        _327 = &(*_328);
        _326 = amount(move _327) -> [return: bb151, unwind: bb220];
    }

    bb151: {
        StorageDead(_327);
        _325 = std::result::Result::<u64, anchor_lang::error::Error>::unwrap(move _326) -> [return: bb152, unwind: bb220];
    }

    bb152: {
        StorageDead(_326);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = &(*_298);
        _332 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _333) -> [return: bb153, unwind: bb220];
    }

    bb153: {
        StorageDead(_333);
        _331 = (((*_332).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_334);
        _334 = _111;
        StorageLive(_335);
        _335 = _136;
        StorageLive(_336);
        StorageLive(_337);
        _337 = _308;
        _336 = state::types::LendingAction::SubstractiveSigned(move _337);
        StorageDead(_337);
        _324 = post_transfer_vault_balance_liquidity_reserve_checks(move _325, move _331, move _334, move _335, move _336) -> [return: bb154, unwind: bb220];
    }

    bb154: {
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_325);
        _323 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _324) -> [return: bb155, unwind: bb220];
    }

    bb155: {
        StorageDead(_324);
        _338 = discriminant(_323);
        switchInt(move _338) -> [0: bb156, 1: bb157, otherwise: bb8];
    }

    bb156: {
        StorageLive(_342);
        _342 = ((_323 as Continue).0: ());
        _322 = _342;
        StorageDead(_342);
        _465 = discriminant(_323);
        StorageDead(_332);
        drop(_329) -> [return: bb159, unwind: bb223];
    }

    bb157: {
        StorageLive(_339);
        _339 = move ((_323 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_341);
        _341 = move _339;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _341) -> [return: bb158, unwind: bb242];
    }

    bb158: {
        StorageDead(_341);
        StorageDead(_339);
        _479 = discriminant(_323);
        StorageDead(_332);
        drop(_329) -> [return: bb202, unwind: bb223];
    }

    bb159: {
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_323);
        StorageDead(_322);
        _233 = const ();
        StorageDead(_308);
        drop(_299) -> [return: bb160, unwind: bb229];
    }

    bb160: {
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb162;
    }

    bb161: {
        _233 = const ();
        goto -> bb162;
    }

    bb162: {
        StorageDead(_233);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _346 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _347) -> [return: bb163, unwind: bb229];
    }

    bb163: {
        StorageDead(_347);
        _345 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _346) -> [return: bb164, unwind: bb229];
    }

    bb164: {
        StorageDead(_346);
        _348 = discriminant(_345);
        switchInt(move _348) -> [0: bb165, 1: bb166, otherwise: bb8];
    }

    bb165: {
        StorageLive(_352);
        _352 = move ((_345 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _344 = move _352;
        StorageDead(_352);
        _343 = &_344;
        _467 = discriminant(_345);
        StorageDead(_345);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _417 = deref_copy ((*_1).11: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _545 = (((_417.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _357 = &(*_545);
        _356 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _357) -> [return: bb168, unwind: bb219];
    }

    bb166: {
        StorageLive(_349);
        _349 = move ((_345 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_351);
        _351 = move _349;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _351) -> [return: bb167, unwind: bb241];
    }

    bb167: {
        StorageDead(_351);
        StorageDead(_349);
        _477 = discriminant(_345);
        StorageDead(_345);
        goto -> bb201;
    }

    bb168: {
        StorageDead(_357);
        _355 = &(_356.0: &anchor_lang::prelude::Pubkey);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _418 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _546 = (((_418.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _360 = &(*_546);
        _359 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _360) -> [return: bb169, unwind: bb218];
    }

    bb169: {
        StorageDead(_360);
        _358 = &(_359.0: &anchor_lang::prelude::Pubkey);
        _354 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _355, move _358) -> [return: bb170, unwind: bb217];
    }

    bb170: {
        switchInt(move _354) -> [0: bb174, otherwise: bb171];
    }

    bb171: {
        drop(_359) -> [return: bb172, unwind: bb218];
    }

    bb172: {
        StorageDead(_359);
        StorageDead(_358);
        drop(_356) -> [return: bb173, unwind: bb219];
    }

    bb173: {
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb178;
    }

    bb174: {
        drop(_359) -> [return: bb175, unwind: bb218];
    }

    bb175: {
        StorageDead(_359);
        StorageDead(_358);
        drop(_356) -> [return: bb176, unwind: bb219];
    }

    bb176: {
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &_161;
        _361 = std::option::Option::<(u64, u64)>::is_none(move _362) -> [return: bb177, unwind: bb219];
    }

    bb177: {
        switchInt(move _361) -> [0: bb189, otherwise: bb178];
    }

    bb178: {
        StorageDead(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _419 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _547 = (((_419.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _371 = &(*_547);
        _370 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _371) -> [return: bb179, unwind: bb219];
    }

    bb179: {
        StorageDead(_371);
        _369 = &_370;
        _368 = &(*_369);
        _367 = amount(move _368) -> [return: bb180, unwind: bb216];
    }

    bb180: {
        StorageDead(_368);
        _366 = std::result::Result::<u64, anchor_lang::error::Error>::unwrap(move _367) -> [return: bb181, unwind: bb216];
    }

    bb181: {
        StorageDead(_367);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        _374 = &(*_343);
        _373 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _374) -> [return: bb182, unwind: bb216];
    }

    bb182: {
        StorageDead(_374);
        _372 = (((*_373).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_375);
        _375 = _123;
        StorageLive(_376);
        _376 = _135;
        StorageLive(_377);
        StorageLive(_378);
        _378 = _158;
        _377 = state::types::LendingAction::Additive(move _378);
        StorageDead(_378);
        _365 = post_transfer_vault_balance_liquidity_reserve_checks(move _366, move _372, move _375, move _376, move _377) -> [return: bb183, unwind: bb216];
    }

    bb183: {
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_372);
        StorageDead(_366);
        _364 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _365) -> [return: bb184, unwind: bb216];
    }

    bb184: {
        StorageDead(_365);
        _379 = discriminant(_364);
        switchInt(move _379) -> [0: bb185, 1: bb186, otherwise: bb8];
    }

    bb185: {
        StorageLive(_383);
        _383 = ((_364 as Continue).0: ());
        _363 = _383;
        StorageDead(_383);
        _469 = discriminant(_364);
        StorageDead(_373);
        drop(_370) -> [return: bb188, unwind: bb219];
    }

    bb186: {
        StorageLive(_380);
        _380 = move ((_364 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_382);
        _382 = move _380;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _382) -> [return: bb187, unwind: bb240];
    }

    bb187: {
        StorageDead(_382);
        StorageDead(_380);
        _475 = discriminant(_364);
        StorageDead(_373);
        drop(_370) -> [return: bb199, unwind: bb219];
    }

    bb188: {
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_364);
        StorageDead(_363);
        _353 = const ();
        goto -> bb190;
    }

    bb189: {
        StorageDead(_362);
        _353 = const ();
        goto -> bb190;
    }

    bb190: {
        StorageDead(_361);
        StorageDead(_354);
        StorageDead(_353);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = _3;
        StorageLive(_388);
        _388 = _158;
        _386 = post_liquidate_repay_amount_check(move _387, move _388) -> [return: bb191, unwind: bb219];
    }

    bb191: {
        StorageDead(_388);
        StorageDead(_387);
        _385 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _386) -> [return: bb192, unwind: bb219];
    }

    bb192: {
        StorageDead(_386);
        _389 = discriminant(_385);
        switchInt(move _389) -> [0: bb193, 1: bb194, otherwise: bb8];
    }

    bb193: {
        StorageLive(_393);
        _393 = ((_385 as Continue).0: ());
        _384 = _393;
        StorageDead(_393);
        _471 = discriminant(_385);
        StorageDead(_385);
        StorageDead(_384);
        StorageLive(_394);
        _394 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _394);
        StorageDead(_394);
        drop(_344) -> [return: bb196, unwind: bb229];
    }

    bb194: {
        StorageLive(_390);
        _390 = move ((_385 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_392);
        _392 = move _390;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _392) -> [return: bb195, unwind: bb239];
    }

    bb195: {
        StorageDead(_392);
        StorageDead(_390);
        _473 = discriminant(_385);
        StorageDead(_385);
        StorageDead(_384);
        goto -> bb200;
    }

    bb196: {
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_153);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_123);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        drop(_76) -> [return: bb197, unwind: bb230];
    }

    bb197: {
        StorageDead(_76);
        StorageDead(_75);
        drop(_66) -> [return: bb198, unwind: bb238];
    }

    bb198: {
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb215;
    }

    bb199: {
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_354);
        StorageDead(_353);
        goto -> bb200;
    }

    bb200: {
        drop(_344) -> [return: bb201, unwind: bb229];
    }

    bb201: {
        StorageDead(_344);
        StorageDead(_343);
        goto -> bb205;
    }

    bb202: {
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_308);
        drop(_299) -> [return: bb203, unwind: bb229];
    }

    bb203: {
        StorageDead(_299);
        StorageDead(_298);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_233);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_153);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb208;
    }

    bb207: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_124);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_123);
        goto -> bb210;
    }

    bb209: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_112);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_111);
        StorageDead(_96);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        drop(_76) -> [return: bb212, unwind: bb230];
    }

    bb212: {
        StorageDead(_76);
        StorageDead(_75);
        drop(_66) -> [return: bb213, unwind: bb238];
    }

    bb213: {
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb215;
    }

    bb214: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb215;
    }

    bb215: {
        return;
    }

    bb216 (cleanup): {
        drop(_370) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_359) -> [return: bb218, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        drop(_356) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_344) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_329) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_314) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_311) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_299) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_283) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_281) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        drop(_279) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        drop(_128) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        drop(_116) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        drop(_76) -> [return: bb230, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        drop(_66) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        drop(_37) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        drop(_52) -> [return: bb233, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        drop(_48) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        drop(_46) -> [return: bb235, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        drop(_44) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        drop(_40) -> [return: bb237, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        drop(_38) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        resume;
    }

    bb239 (cleanup): {
        _507 = discriminant(_385);
        goto -> bb219;
    }

    bb240 (cleanup): {
        _508 = discriminant(_364);
        goto -> bb216;
    }

    bb241 (cleanup): {
        _509 = discriminant(_345);
        goto -> bb229;
    }

    bb242 (cleanup): {
        _510 = discriminant(_323);
        goto -> bb220;
    }

    bb243 (cleanup): {
        _511 = discriminant(_300);
        goto -> bb229;
    }

    bb244 (cleanup): {
        _512 = discriminant(_273);
        goto -> bb229;
    }

    bb245 (cleanup): {
        drop(_275) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        switchInt(_420) -> [0: bb229, otherwise: bb245];
    }

    bb247 (cleanup): {
        drop(_276) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        switchInt(_421) -> [0: bb229, otherwise: bb247];
    }

    bb249 (cleanup): {
        _513 = discriminant(_238);
        goto -> bb229;
    }

    bb250 (cleanup): {
        drop(_256) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        switchInt(_422) -> [0: bb253, otherwise: bb250];
    }

    bb252 (cleanup): {
        drop(_254) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb253 (cleanup): {
        switchInt(_423) -> [0: bb255, otherwise: bb252];
    }

    bb254 (cleanup): {
        drop(_252) -> [return: bb257, unwind terminate(cleanup)];
    }

    bb255 (cleanup): {
        switchInt(_424) -> [0: bb257, otherwise: bb254];
    }

    bb256 (cleanup): {
        drop(_250) -> [return: bb259, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        switchInt(_425) -> [0: bb259, otherwise: bb256];
    }

    bb258 (cleanup): {
        drop(_248) -> [return: bb261, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        switchInt(_426) -> [0: bb261, otherwise: bb258];
    }

    bb260 (cleanup): {
        drop(_246) -> [return: bb263, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        switchInt(_427) -> [0: bb263, otherwise: bb260];
    }

    bb262 (cleanup): {
        drop(_244) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb263 (cleanup): {
        switchInt(_428) -> [0: bb265, otherwise: bb262];
    }

    bb264 (cleanup): {
        drop(_242) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        switchInt(_429) -> [0: bb267, otherwise: bb264];
    }

    bb266 (cleanup): {
        drop(_240) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        switchInt(_430) -> [0: bb229, otherwise: bb266];
    }

    bb268 (cleanup): {
        _514 = discriminant(_215);
        goto -> bb229;
    }

    bb269 (cleanup): {
        drop(_221) -> [return: bb272, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        switchInt(_431) -> [0: bb272, otherwise: bb269];
    }

    bb271 (cleanup): {
        drop(_219) -> [return: bb274, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        switchInt(_432) -> [0: bb274, otherwise: bb271];
    }

    bb273 (cleanup): {
        drop(_217) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        switchInt(_433) -> [0: bb229, otherwise: bb273];
    }

    bb275 (cleanup): {
        _515 = discriminant(_191);
        goto -> bb229;
    }

    bb276 (cleanup): {
        drop(_201) -> [return: bb279, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        switchInt(_434) -> [0: bb279, otherwise: bb276];
    }

    bb278 (cleanup): {
        drop(_199) -> [return: bb281, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        switchInt(_435) -> [0: bb281, otherwise: bb278];
    }

    bb280 (cleanup): {
        drop(_197) -> [return: bb283, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        switchInt(_436) -> [0: bb283, otherwise: bb280];
    }

    bb282 (cleanup): {
        drop(_195) -> [return: bb285, unwind terminate(cleanup)];
    }

    bb283 (cleanup): {
        switchInt(_437) -> [0: bb285, otherwise: bb282];
    }

    bb284 (cleanup): {
        drop(_193) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb285 (cleanup): {
        switchInt(_438) -> [0: bb229, otherwise: bb284];
    }

    bb286 (cleanup): {
        _516 = discriminant(_163);
        goto -> bb229;
    }

    bb287 (cleanup): {
        _517 = discriminant(_124);
        goto -> bb227;
    }

    bb288 (cleanup): {
        _518 = discriminant(_112);
        goto -> bb228;
    }

    bb289 (cleanup): {
        _519 = discriminant(_89);
        goto -> bb229;
    }

    bb290 (cleanup): {
        _520 = discriminant(_77);
        goto -> bb230;
    }

    bb291 (cleanup): {
        _521 = discriminant(_67);
        goto -> bb238;
    }

    bb292 (cleanup): {
        _522 = discriminant(_33);
        goto -> bb231;
    }

    bb293 (cleanup): {
        _523 = discriminant(_24);
        goto -> bb238;
    }
}
