// MIR for `handlers::handler_init_referrer_token_state::process` before PreCodegen

fn handlers::handler_init_referrer_token_state::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::referral::ReferrerTokenState>>;
    let mut _4: std::result::Result<std::cell::RefMut<'_, state::referral::ReferrerTokenState>, anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _10: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _13: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _14: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: state::referral::ReferrerTokenState;
    let mut _24: anchor_lang::prelude::Pubkey;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: &state::reserve::Reserve;
    let mut _27: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _28: u64;
    let mut _29: u8;
    let mut _30: [u64; 31];
    let mut _31: &mut state::referral::ReferrerTokenState;
    let mut _32: &mut std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _33: ();
    let mut _34: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>;
    let mut _35: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>;
    let mut _36: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    scope 1 {
        debug referrer_token_state => _2;
        let _11: std::cell::Ref<'_, state::reserve::Reserve>;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _19: std::cell::Ref<'_, state::reserve::Reserve>;
        scope 6 {
            debug reserve => _11;
            let _20: anchor_lang::prelude::Pubkey;
            scope 11 {
                debug referrer => _20;
                let _22: u8;
                scope 12 {
                    debug bump => _22;
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _19;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _34 = deref_copy (_1.1: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>);
        _5 = &((*_34).4: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>);
        _4 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerTokenState>::load_init(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<RefMut<'_, referral::ReferrerTokenState>, anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>);
        _2 = move _10;
        StorageDead(_10);
        _37 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _35 = deref_copy (_1.1: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>);
        _14 = &((*_35).2: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _13 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _14) -> [return: bb7, unwind: bb21];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _9) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _43 = discriminant(_3);
        StorageDead(_3);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_14);
        _12 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _13) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_19);
        _19 = move ((_12 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _11 = move _19;
        StorageDead(_19);
        _39 = discriminant(_12);
        StorageDead(_12);
        StorageLive(_20);
        StorageLive(_21);
        _36 = deref_copy (_1.1: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>);
        _21 = &((*_36).3: anchor_lang::prelude::AccountInfo<'_>);
        _20 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _21) -> [return: bb12, unwind: bb20];
    }

    bb10: {
        StorageLive(_16);
        _16 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        _41 = discriminant(_12);
        StorageDead(_12);
        StorageDead(_11);
        drop(_2) -> [return: bb18, unwind: bb22];
    }

    bb12: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = ((_1.3: handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps).0: u8);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _20;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_11;
        _26 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _27) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        StorageDead(_27);
        _25 = (((*_26).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _22;
        _28 = <u8 as Into<u64>>::into(move _29) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = [const 0_u64; 31];
        _23 = referral::ReferrerTokenState { referrer: move _24, mint: move _25, amount_unclaimed_sf: const 0_u128, amount_cumulative_sf: const 0_u128, bump: move _28, padding: move _30 };
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &mut _2;
        _31 = <RefMut<'_, referral::ReferrerTokenState> as DerefMut>::deref_mut(move _32) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_32);
        (*_31) = move _23;
        StorageDead(_23);
        StorageDead(_31);
        StorageDead(_26);
        StorageLive(_33);
        _33 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _33);
        StorageDead(_33);
        StorageDead(_22);
        StorageDead(_20);
        drop(_11) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        StorageDead(_11);
        drop(_2) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_2);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_11) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _45 = discriminant(_12);
        goto -> bb21;
    }

    bb24 (cleanup): {
        _46 = discriminant(_3);
        goto -> bb22;
    }
}
