// MIR for `handlers::handler_repay_obligation_liquidity::process_v1` before PreCodegen

fn handlers::handler_repay_obligation_liquidity::process_v1(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let _4: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _6: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::Ref<'_, state::reserve::Reserve>;
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _15: std::result::Result<(), anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let _17: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _19: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 1];
    let _20: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 1];
    let _21: [(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 1];
    let mut _22: (anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _25: &state::reserve::Reserve;
    let _26: &state::reserve::Reserve;
    let mut _27: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _28: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _29: &anchor_lang::prelude::Pubkey;
    let _30: &anchor_lang::prelude::Pubkey;
    let _31: anchor_lang::prelude::Pubkey;
    let mut _32: &anchor_lang::prelude::AccountInfo<'_>;
    let _33: anchor_lang::prelude::AccountInfo<'_>;
    let mut _34: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _35: &[state::reserve::ReserveFarmKind];
    let mut _36: &[state::reserve::ReserveFarmKind; 1];
    let _37: &[state::reserve::ReserveFarmKind; 1];
    let _38: [state::reserve::ReserveFarmKind; 1];
    let mut _39: state::reserve::ReserveFarmKind;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _45: &handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _46: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: u64;
    let mut _50: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _51: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _52: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _53: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _54: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _55: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    scope 1 {
        debug _reserve => _4;
        let _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _44: ();
        let mut _49: &[state::reserve::ReserveFarmKind; 1];
        scope 6 {
            debug residual => _41;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _44;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _50 = deref_copy (_1.1: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        _7 = &((*_50).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _4 = move _12;
        StorageDead(_12);
        _56 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _51 = deref_copy (_1.1: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        _17 = &((*_51).8: anchor_lang::prelude::AccountInfo<'_>);
        _16 = &(*_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _52 = deref_copy (_1.1: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        _24 = &((*_52).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _23 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _24) -> [return: bb7, unwind: bb24];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb27];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _62 = discriminant(_5);
        StorageDead(_5);
        goto -> bb21;
    }

    bb7: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_4;
        _27 = &(*_28);
        _26 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _27) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _25 = &(*_26);
        StorageDead(_27);
        _22 = (move _23, move _25);
        StorageDead(_25);
        StorageDead(_23);
        _21 = [move _22];
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = move _19 as &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _53 = deref_copy (_1.1: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        _34 = &((*_53).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _33 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _34) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _32 = &_33;
        StorageDead(_34);
        _31 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _32) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _49 = const _;
        _37 = &(*_49);
        _36 = &(*_37);
        _35 = move _36 as &[state::reserve::ReserveFarmKind] (PointerCoercion(Unsize));
        StorageDead(_36);
        _15 = refresh_ix_utils::check_refresh(move _16, move _18, move _29, move _35) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        StorageDead(_15);
        _40 = discriminant(_14);
        switchInt(move _40) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_44);
        _44 = ((_14 as Continue).0: ());
        _13 = _44;
        StorageDead(_44);
        _58 = discriminant(_14);
        StorageDead(_37);
        drop(_33) -> [return: bb16, unwind: bb24];
    }

    bb14: {
        StorageLive(_41);
        _41 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _43) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        StorageDead(_43);
        StorageDead(_41);
        _60 = discriminant(_14);
        StorageDead(_37);
        drop(_33) -> [return: bb20, unwind: bb24];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        _3 = const ();
        drop(_4) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_45);
        _54 = deref_copy (_1.1: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        _45 = &(*_54);
        StorageLive(_46);
        StorageLive(_47);
        _55 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _47 = &(*_55);
        _46 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        StorageLive(_48);
        _48 = _2;
        _0 = handlers::handler_repay_obligation_liquidity::process_impl::<'_, '_, std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>(move _45, move _46, move _48) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb22;
    }

    bb20: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_33) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        _64 = discriminant(_14);
        goto -> bb23;
    }

    bb27 (cleanup): {
        _65 = discriminant(_5);
        goto -> bb25;
    }
}
