digraph Mir_0_2815 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn pay_borrowing_fees_transfer(_1: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _3: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _4: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _5: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _6: u64, _7: u8) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _8: ();<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _10: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _11: anchor_lang::context::CpiContext&lt;ReErased, ReErased, ReErased, ReErased, anchor_spl::token_2022::TransferChecked&lt;ReErased&gt;&gt;;<br align="left"/>let mut _12: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _13: anchor_spl::token_2022::TransferChecked&lt;ReErased&gt;;<br align="left"/>let mut _14: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _15: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _16: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _17: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: u8;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _24: ();<br align="left"/>let mut _25: ();<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>debug token_program =&gt; _1;<br align="left"/>debug liquidity_mint =&gt; _2;<br align="left"/>debug user_liquidity =&gt; _3;<br align="left"/>debug fee_collector =&gt; _4;<br align="left"/>debug user_authority =&gt; _5;<br align="left"/>debug fee =&gt; _6;<br align="left"/>debug decimals =&gt; _7;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>>;
    bb0__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = move _1<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = move _3<br/>StorageLive(_15)<br/>_15 = move _4<br/>StorageLive(_16)<br/>_16 = move _5<br/>StorageLive(_17)<br/>_17 = move _2<br/>_13 = anchor_spl::token_2022::TransferChecked::&lt;'_&gt; { from: move _14, mint: move _17, to: move _15, authority: move _16 }<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_11 = anchor_lang::context::CpiContext::&lt;'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked&lt;'_&gt;&gt;::new(move _12, move _13)</td></tr></table>>];
    bb1__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_18)<br/>_18 = _6<br/>StorageLive(_19)<br/>_19 = _7<br/></td></tr><tr><td align="left">_10 = anchor_spl::token_2022::transfer_checked(move _11, move _18, move _19)</td></tr></table>>];
    bb2__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb3__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_20 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb4__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_9 as Continue).0: ())<br/>_8 = _24<br/>StorageDead(_24)<br/>_26 = discriminant(_9)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_25)<br/>_25 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _25)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = move ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_23)<br/>_23 = move _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb7__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>_28 = discriminant(_9)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_2815 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_30 = discriminant(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2815 -> bb1__0_2815 [label="return"];
    bb0__0_2815 -> bb9__0_2815 [label="unwind"];
    bb1__0_2815 -> bb2__0_2815 [label="return"];
    bb1__0_2815 -> bb9__0_2815 [label="unwind"];
    bb2__0_2815 -> bb3__0_2815 [label="return"];
    bb2__0_2815 -> bb9__0_2815 [label="unwind"];
    bb3__0_2815 -> bb4__0_2815 [label="0"];
    bb3__0_2815 -> bb6__0_2815 [label="1"];
    bb3__0_2815 -> bb5__0_2815 [label="otherwise"];
    bb4__0_2815 -> bb8__0_2815 [label=""];
    bb6__0_2815 -> bb7__0_2815 [label="return"];
    bb6__0_2815 -> bb10__0_2815 [label="unwind"];
    bb7__0_2815 -> bb8__0_2815 [label=""];
    bb10__0_2815 -> bb9__0_2815 [label=""];
}
