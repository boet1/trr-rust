// MIR for `handlers::handler_init_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18>::try_accounts::<impl at programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18>::serialize` before PreCodegen

fn handlers::handler_init_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18>::try_accounts::<impl at programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18>::serialize(_1: &<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args, _2: &mut W) -> std::result::Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _5: std::result::Result<(), std::io::Error>;
    let mut _6: &std::string::String;
    let _7: &std::string::String;
    let mut _8: &mut W;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: ();
    let mut _14: ();
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: std::string::String);
        _6 = &(*_7);
        StorageLive(_8);
        _8 = &mut (*_2);
        _5 = <std::string::String as BorshSerialize>::serialize::<W>(move _6, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<(), std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: ());
        _3 = _13;
        StorageDead(_13);
        _15 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        _14 = ();
        _0 = std::result::Result::<(), std::io::Error>::Ok(move _14);
        StorageDead(_14);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _17 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        _19 = discriminant(_4);
        goto -> bb8;
    }
}
