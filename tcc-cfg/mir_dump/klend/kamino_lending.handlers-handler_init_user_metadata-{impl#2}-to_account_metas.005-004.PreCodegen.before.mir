// MIR for `handlers::handler_init_user_metadata::<impl at programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18>::to_account_metas` before PreCodegen

fn handlers::handler_init_user_metadata::<impl at programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18>::to_account_metas(_1: &handlers::handler_init_user_metadata::InitUserMetadata<'_>, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _7: &anchor_lang::prelude::Signer<'_>;
    let mut _8: std::option::Option<bool>;
    let _9: ();
    let mut _10: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _11: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _12: &anchor_lang::prelude::Signer<'_>;
    let mut _13: std::option::Option<bool>;
    let _14: ();
    let mut _15: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _16: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _18: std::option::Option<bool>;
    let _19: ();
    let mut _20: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>;
    let mut _21: isize;
    let _23: ();
    let mut _24: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _25: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _27: std::option::Option<bool>;
    let _28: ();
    let mut _29: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _30: anchor_lang::prelude::AccountMeta;
    let mut _31: anchor_lang::prelude::Pubkey;
    let mut _32: &anchor_lang::prelude::Pubkey;
    let _33: ();
    let mut _34: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _35: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _36: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _37: std::option::Option<bool>;
    let _38: ();
    let mut _39: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _40: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _41: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _42: std::option::Option<bool>;
    scope 1 {
        debug account_metas => _3;
        scope 2 {
            debug referrer_user_metadata => _22;
            let _22: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        StorageLive(_8);
        _8 = std::option::Option::<bool>::None;
        _6 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _7, move _8) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _4 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _5, move _6) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _3;
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).1: anchor_lang::prelude::Signer<'_>);
        StorageLive(_13);
        _13 = std::option::Option::<bool>::None;
        _11 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _12, move _13) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        _9 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _10, move _11) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut _3;
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        StorageLive(_18);
        _18 = std::option::Option::<bool>::None;
        _16 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::ToAccountMetas>::to_account_metas(move _17, move _18) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_17);
        _14 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _15, move _16) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).3: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>);
        _21 = discriminant((*_20));
        switchInt(move _21) -> [1: bb8, otherwise: bb11];
    }

    bb8: {
        StorageLive(_22);
        _22 = &(((*_20) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut _3;
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_22);
        StorageLive(_27);
        _27 = std::option::Option::<bool>::None;
        _25 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::ToAccountMetas>::to_account_metas(move _26, move _27) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_26);
        _23 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _24, move _25) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        _19 = const ();
        StorageDead(_22);
        goto -> bb14;
    }

    bb11: {
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _3;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _31 = (*_32);
        _30 = anchor_lang::prelude::AccountMeta::new_readonly(move _31, const false) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        StorageDead(_31);
        _28 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _29, move _30) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_32);
        StorageDead(_28);
        _19 = const ();
        goto -> bb14;
    }

    bb14: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _3;
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_1).4: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        StorageLive(_37);
        _37 = std::option::Option::<bool>::None;
        _35 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::ToAccountMetas>::to_account_metas(move _36, move _37) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_36);
        _33 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _34, move _35) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut _3;
        StorageLive(_40);
        StorageLive(_41);
        _41 = &((*_1).5: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        StorageLive(_42);
        _42 = std::option::Option::<bool>::None;
        _40 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountMetas>::to_account_metas(move _41, move _42) -> [return: bb17, unwind: bb19];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_41);
        _38 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _39, move _40) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
