// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::compute_depositable_amount_and_minted_collateral` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::compute_depositable_amount_and_minted_collateral(_1: &reserve::Reserve, _2: u64) -> std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> {
    debug self => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error>;
    let _3: u64;
    let mut _4: &state::reserve::CollateralExchangeRate;
    let _5: state::reserve::CollateralExchangeRate;
    let mut _6: &state::reserve::Reserve;
    let mut _7: u64;
    let mut _9: &state::reserve::CollateralExchangeRate;
    let _10: state::reserve::CollateralExchangeRate;
    let mut _11: &state::reserve::Reserve;
    let mut _12: u64;
    let _13: ();
    let mut _14: bool;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: !;
    let mut _18: anchor_lang::error::Error;
    let mut _19: anchor_lang::error::Error;
    let mut _20: anchor_lang::error::AnchorError;
    let mut _21: std::string::String;
    let mut _22: &LendingError;
    let _23: LendingError;
    let mut _24: u32;
    let mut _25: LendingError;
    let mut _26: std::string::String;
    let mut _27: &LendingError;
    let _28: LendingError;
    let mut _29: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _30: anchor_lang::error::ErrorOrigin;
    let mut _31: anchor_lang::error::Source;
    let mut _32: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _33: (u64, u64);
    let mut _34: u64;
    let mut _35: u64;
    let mut _36: state::types::DepositLiquidityResult;
    let mut _37: u64;
    let mut _38: u64;
    scope 1 {
        debug collateral_amount => _3;
        let _8: u64;
        scope 2 {
            debug liquidity_amount_to_deposit => _8;
            let mut _39: &LendingError;
            let mut _40: &LendingError;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = reserve::Reserve::collateral_exchange_rate(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        StorageDead(_6);
        StorageLive(_7);
        _7 = _2;
        _3 = reserve::CollateralExchangeRate::liquidity_to_collateral(move _4, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        _10 = reserve::Reserve::collateral_exchange_rate(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_10;
        StorageDead(_11);
        StorageLive(_12);
        _12 = _3;
        _8 = reserve::CollateralExchangeRate::collateral_to_liquidity_ceil(move _9, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        StorageLive(_16);
        _16 = _8;
        _14 = Lt(move _15, move _16);
        switchInt(move _14) -> [0: bb11, otherwise: bb5];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _40 = const _;
        _22 = &(*_40);
        _21 = LendingError::name(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = LendingError::MathOverflow;
        _24 = <LendingError as Into<u32>>::into(move _25) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        _39 = const _;
        _27 = &(*_39);
        _26 = <LendingError as ToString>::to_string(move _27) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\reserve.rs", line: const 206_u32 };
        _30 = anchor_lang::error::ErrorOrigin::Source(move _31);
        StorageDead(_31);
        _29 = std::option::Option::<ErrorOrigin>::Some(move _30);
        StorageDead(_30);
        StorageLive(_32);
        _32 = std::option::Option::<ComparedValues>::None;
        _20 = anchor_lang::error::AnchorError { error_name: move _21, error_code_number: move _24, error_msg: move _26, error_origin: move _29, compared_values: move _32 };
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_21);
        _19 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _20) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _2;
        StorageLive(_35);
        _35 = _8;
        _33 = (move _34, move _35);
        StorageDead(_35);
        StorageDead(_34);
        _18 = anchor_lang::error::Error::with_values::<u64, u64>(move _19, move _33) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        StorageDead(_33);
        StorageDead(_19);
        _0 = std::result::Result::<state::types::DepositLiquidityResult, anchor_lang::error::Error>::Err(move _18);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_3);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = const ();
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _8;
        StorageLive(_38);
        _38 = _3;
        _36 = state::types::DepositLiquidityResult { liquidity_amount: move _37, collateral_amount: move _38 };
        StorageDead(_38);
        StorageDead(_37);
        _0 = std::result::Result::<state::types::DepositLiquidityResult, anchor_lang::error::Error>::Ok(move _36);
        StorageDead(_36);
        StorageDead(_8);
        StorageDead(_3);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_21) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}
