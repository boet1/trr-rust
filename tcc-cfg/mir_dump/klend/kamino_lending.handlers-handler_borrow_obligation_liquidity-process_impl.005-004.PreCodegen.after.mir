// MIR for `handlers::handler_borrow_obligation_liquidity::process_impl` after PreCodegen

fn handlers::handler_borrow_obligation_liquidity::process_impl(_1: &handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug remaining_accounts => _2;
    debug liquidity_amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let mut _7: &std::string::String;
    let _8: &std::string::String;
    let _9: std::string::String;
    let _10: std::string::String;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[&str; 1];
    let _14: &[&str; 1];
    let _15: [&str; 1];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let mut _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let mut _21: &u64;
    let _22: &u64;
    let _23: ();
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _25: std::result::Result<(), anchor_lang::error::Error>;
    let mut _26: &handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _31: ();
    let _32: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _33: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _35: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _36: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _41: std::cell::RefMut<'_, state::reserve::Reserve>;
    let _43: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _45: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _46: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _53: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _55: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _56: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _63: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _65: anchor_lang::prelude::Clock;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _67: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _74: [&[u8]; 3];
    let mut _75: &[u8];
    let mut _76: &[u8];
    let _77: &[u8];
    let mut _78: &[u8];
    let _79: &[u8];
    let mut _80: &[u8];
    let _81: &[u8];
    let mut _82: &anchor_lang::prelude::Pubkey;
    let mut _83: &[u8];
    let mut _84: &[u8; 1];
    let _85: &[u8; 1];
    let _86: [u8; 1];
    let mut _87: u8;
    let mut _88: u64;
    let mut _89: &state::lending_market::LendingMarket;
    let mut _90: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _92: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _93: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _94: {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:72:14: 72:28};
    let mut _96: bool;
    let mut _97: &state::obligation::Obligation;
    let _98: &state::obligation::Obligation;
    let mut _99: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _100: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
    let mut _101: isize;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::referral::ReferrerTokenState>>;
    let mut _105: std::result::Result<std::cell::RefMut<'_, state::referral::ReferrerTokenState>, anchor_lang::error::Error>;
    let mut _106: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _112: ();
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _114: std::result::Result<(), anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let _116: &anchor_lang::prelude::Pubkey;
    let _117: &anchor_lang::prelude::Pubkey;
    let mut _118: &state::referral::ReferrerTokenState;
    let _119: &state::referral::ReferrerTokenState;
    let mut _120: &std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let _121: &std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _122: anchor_lang::prelude::Pubkey;
    let mut _123: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _124: anchor_lang::prelude::Pubkey;
    let mut _125: &state::reserve::Reserve;
    let mut _126: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _127: anchor_lang::prelude::Pubkey;
    let mut _128: &state::obligation::Obligation;
    let mut _129: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _130: anchor_lang::prelude::Pubkey;
    let mut _131: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _137: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _138: !;
    let mut _139: anchor_lang::error::Error;
    let mut _140: anchor_lang::error::AnchorError;
    let mut _141: std::string::String;
    let mut _142: &LendingError;
    let _143: LendingError;
    let mut _144: u32;
    let mut _145: LendingError;
    let mut _146: std::string::String;
    let mut _147: &LendingError;
    let _148: LendingError;
    let mut _149: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _150: anchor_lang::error::ErrorOrigin;
    let mut _151: anchor_lang::error::Source;
    let mut _152: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _155: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _156: &anchor_lang::prelude::AccountInfo<'_>;
    let _157: &anchor_lang::prelude::AccountInfo<'_>;
    let _158: anchor_lang::prelude::AccountInfo<'_>;
    let mut _159: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _166: &state::reserve::Reserve;
    let mut _167: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _170: state::types::CalculateBorrowResult;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::CalculateBorrowResult>;
    let mut _172: std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error>;
    let mut _173: &state::lending_market::LendingMarket;
    let _174: &state::lending_market::LendingMarket;
    let mut _175: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _176: &mut state::reserve::Reserve;
    let mut _177: &mut state::reserve::Reserve;
    let mut _178: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _179: &mut state::obligation::Obligation;
    let mut _180: &mut state::obligation::Obligation;
    let mut _181: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _182: u64;
    let mut _183: &anchor_lang::prelude::Clock;
    let mut _184: anchor_lang::prelude::Pubkey;
    let mut _185: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _186: std::option::Option<std::cell::RefMut<'_, state::referral::ReferrerTokenState>>;
    let mut _187: std::iter::Map<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:72:14: 72:28}>;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _193: ();
    let _194: ();
    let mut _195: std::fmt::Arguments<'_>;
    let mut _196: &[&str];
    let mut _197: &[&str; 3];
    let _198: &[&str; 3];
    let _199: [&str; 3];
    let mut _200: &[core::fmt::rt::Argument<'_>];
    let mut _201: &[core::fmt::rt::Argument<'_>; 2];
    let _202: &[core::fmt::rt::Argument<'_>; 2];
    let _203: [core::fmt::rt::Argument<'_>; 2];
    let mut _204: core::fmt::rt::Argument<'_>;
    let mut _205: &u64;
    let _206: &u64;
    let mut _207: core::fmt::rt::Argument<'_>;
    let mut _208: &u64;
    let _209: &u64;
    let _210: ();
    let mut _211: bool;
    let mut _212: u64;
    let _213: ();
    let mut _214: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _215: std::result::Result<(), anchor_lang::error::Error>;
    let mut _216: anchor_lang::prelude::AccountInfo<'_>;
    let mut _217: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _218: anchor_lang::prelude::AccountInfo<'_>;
    let mut _219: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _220: anchor_lang::prelude::AccountInfo<'_>;
    let mut _221: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _222: anchor_lang::prelude::AccountInfo<'_>;
    let mut _223: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _224: anchor_lang::prelude::AccountInfo<'_>;
    let mut _225: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _226: &[&[u8]];
    let mut _227: &[&[u8]; 3];
    let mut _228: u64;
    let mut _229: u8;
    let mut _230: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _231: &anchor_spl::token_interface::Mint;
    let _232: &anchor_spl::token_interface::Mint;
    let mut _233: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _239: ();
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _241: std::result::Result<(), anchor_lang::error::Error>;
    let mut _242: anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _244: anchor_lang::prelude::AccountInfo<'_>;
    let mut _245: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _246: anchor_lang::prelude::AccountInfo<'_>;
    let mut _247: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _248: anchor_lang::prelude::AccountInfo<'_>;
    let mut _249: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _250: anchor_lang::prelude::AccountInfo<'_>;
    let mut _251: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _252: &[&[u8]];
    let mut _253: &[&[u8]; 3];
    let mut _254: u64;
    let mut _255: u8;
    let mut _256: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _257: &anchor_spl::token_interface::Mint;
    let _258: &anchor_spl::token_interface::Mint;
    let mut _259: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _260: isize;
    let mut _262: !;
    let mut _263: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _265: ();
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _267: std::result::Result<(), anchor_lang::error::Error>;
    let mut _268: u64;
    let mut _269: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _270: &anchor_lang::prelude::AccountInfo<'_>;
    let _271: &anchor_lang::prelude::AccountInfo<'_>;
    let _272: anchor_lang::prelude::AccountInfo<'_>;
    let mut _273: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _274: u64;
    let mut _275: &state::reserve::Reserve;
    let mut _276: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _277: u64;
    let mut _278: u64;
    let mut _279: state::types::LendingAction;
    let mut _280: u64;
    let mut _281: u64;
    let mut _282: u64;
    let mut _283: (u64, bool);
    let mut _284: isize;
    let mut _286: !;
    let mut _287: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _289: ();
    let mut _293: &[&str; 1];
    let mut _294: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _295: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _296: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _297: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _298: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _299: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _300: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _301: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _302: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _303: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _304: bool;
    let mut _305: bool;
    let mut _306: bool;
    let mut _307: bool;
    let mut _308: bool;
    let mut _309: bool;
    let mut _310: bool;
    let mut _311: bool;
    let mut _312: bool;
    let mut _313: bool;
    let mut _314: bool;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _376: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _377: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _378: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _379: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _380: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _381: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _382: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _383: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _384: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug res => _10;
    }
    scope 2 {
        debug residual => _28;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _31;
        scope 5 {
        }
    }
    scope 6 {
        debug borrow_reserve => _32;
        let _42: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
        let _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _51: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        scope 11 {
            debug lending_market => _42;
            let _52: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
            let _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _61: std::cell::RefMut<'_, state::obligation::Obligation>;
            scope 16 {
                debug obligation => _52;
                let _62: anchor_lang::prelude::Pubkey;
                scope 21 {
                    debug lending_market_key => _62;
                    let _64: &anchor_lang::prelude::Clock;
                    let _69: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _72: anchor_lang::prelude::Clock;
                    scope 22 {
                        debug clock => _64;
                        let _73: &[&[u8]; 3];
                        scope 27 {
                            debug authority_signer_seeds => _73;
                            let _91: std::iter::Map<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:72:14: 72:28}>;
                            scope 28 {
                                debug deposit_reserves_iter => _91;
                                let _95: std::option::Option<std::cell::RefMut<'_, state::referral::ReferrerTokenState>>;
                                let _102: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
                                let mut _290: &LendingError;
                                let mut _291: &LendingError;
                                scope 29 {
                                    debug referrer_token_state_option => _95;
                                    let _153: u64;
                                    let _161: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _164: u64;
                                    scope 40 {
                                        debug initial_reserve_token_balance => _153;
                                        let _165: u64;
                                        scope 45 {
                                            debug initial_reserve_available_liquidity => _165;
                                            let _168: u64;
                                            let _169: u64;
                                            let _189: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _192: state::types::CalculateBorrowResult;
                                            scope 46 {
                                                debug receive_amount => _168;
                                                debug borrow_fee => _169;
                                                let _235: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _238: ();
                                                let _261: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _264: ();
                                                let _285: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _288: ();
                                                let mut _292: &[&str; 3];
                                                scope 51 {
                                                    debug residual => _235;
                                                    scope 52 {
                                                    }
                                                }
                                                scope 53 {
                                                    debug val => _238;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug residual => _261;
                                                    scope 56 {
                                                    }
                                                }
                                                scope 57 {
                                                    debug val => _264;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug residual => _285;
                                                    scope 60 {
                                                    }
                                                }
                                                scope 61 {
                                                    debug val => _288;
                                                    scope 62 {
                                                    }
                                                }
                                            }
                                            scope 47 {
                                                debug residual => _189;
                                                scope 48 {
                                                }
                                            }
                                            scope 49 {
                                                debug val => _192;
                                                scope 50 {
                                                }
                                            }
                                        }
                                    }
                                    scope 41 {
                                        debug residual => _161;
                                        scope 42 {
                                        }
                                    }
                                    scope 43 {
                                        debug val => _164;
                                        scope 44 {
                                        }
                                    }
                                }
                                scope 30 {
                                    debug referrer_token_state_loader => _102;
                                    let _103: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
                                    let _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _111: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
                                    scope 31 {
                                        debug referrer_token_state => _103;
                                        let _133: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _136: ();
                                        scope 36 {
                                            debug residual => _133;
                                            scope 37 {
                                            }
                                        }
                                        scope 38 {
                                            debug val => _136;
                                            scope 39 {
                                            }
                                        }
                                    }
                                    scope 32 {
                                        debug residual => _108;
                                        scope 33 {
                                        }
                                    }
                                    scope 34 {
                                        debug val => _111;
                                        scope 35 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 23 {
                        debug residual => _69;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _72;
                        scope 26 {
                        }
                    }
                }
            }
            scope 17 {
                debug residual => _58;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _61;
                scope 20 {
                }
            }
        }
        scope 12 {
            debug residual => _48;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _51;
            scope 15 {
            }
        }
    }
    scope 7 {
        debug residual => _38;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _41;
        scope 10 {
        }
    }

    bb0: {
        _304 = const false;
        _314 = const false;
        _313 = const false;
        _312 = const false;
        _311 = const false;
        _310 = const false;
        _309 = const false;
        _308 = const false;
        _307 = const false;
        _306 = const false;
        _305 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _293 = const _;
        _14 = &(*_293);
        _13 = &(*_14);
        _12 = move _13 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_3;
        _21 = &(*_22);
        _20 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _21) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_21);
        _19 = [move _20];
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = move _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_17);
        _11 = Arguments::<'_>::new_v1(move _12, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_12);
        _10 = format(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_14);
        _9 = move _10;
        StorageDead(_10);
        _8 = &_9;
        _7 = &(*_8);
        _6 = <std::string::String as Deref>::deref(move _7) -> [return: bb4, unwind: bb147];
    }

    bb4: {
        _5 = &(*_6);
        StorageDead(_7);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb5, unwind: bb147];
    }

    bb5: {
        StorageDead(_5);
        drop(_9) -> [return: bb6, unwind: bb148];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        _25 = borrow_obligation_liquidity_checks(move _26) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_26);
        _24 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb8, unwind: bb148];
    }

    bb8: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: ());
        _23 = _31;
        StorageDead(_31);
        _315 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _35 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _36) -> [return: bb13, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_28);
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb12, unwind: bb183];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        _361 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb139;
    }

    bb13: {
        StorageDead(_36);
        _34 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _35) -> [return: bb14, unwind: bb148];
    }

    bb14: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        StorageLive(_41);
        _41 = move ((_34 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _33 = move _41;
        StorageDead(_41);
        _32 = &mut _33;
        _317 = discriminant(_34);
        StorageDead(_34);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _45 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _46) -> [return: bb18, unwind: bb146];
    }

    bb16: {
        StorageLive(_38);
        _38 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _40) -> [return: bb17, unwind: bb182];
    }

    bb17: {
        StorageDead(_40);
        StorageDead(_38);
        _359 = discriminant(_34);
        StorageDead(_34);
        goto -> bb138;
    }

    bb18: {
        StorageDead(_46);
        _44 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _45) -> [return: bb19, unwind: bb146];
    }

    bb19: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb20, 1: bb21, otherwise: bb10];
    }

    bb20: {
        StorageLive(_51);
        _51 = move ((_44 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _43 = move _51;
        StorageDead(_51);
        _42 = &_43;
        _319 = discriminant(_44);
        StorageDead(_44);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _55 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _56) -> [return: bb23, unwind: bb145];
    }

    bb21: {
        StorageLive(_48);
        _48 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _50) -> [return: bb22, unwind: bb181];
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_48);
        _357 = discriminant(_44);
        StorageDead(_44);
        goto -> bb137;
    }

    bb23: {
        StorageDead(_56);
        _54 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _55) -> [return: bb24, unwind: bb145];
    }

    bb24: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb25, 1: bb26, otherwise: bb10];
    }

    bb25: {
        StorageLive(_61);
        _61 = move ((_54 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _53 = move _61;
        StorageDead(_61);
        _52 = &mut _53;
        _321 = discriminant(_54);
        StorageDead(_54);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _62 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _63) -> [return: bb28, unwind: bb144];
    }

    bb26: {
        StorageLive(_58);
        _58 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _60) -> [return: bb27, unwind: bb180];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_58);
        _355 = discriminant(_54);
        StorageDead(_54);
        goto -> bb136;
    }

    bb28: {
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb29, unwind: bb144];
    }

    bb29: {
        _66 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _67) -> [return: bb30, unwind: bb144];
    }

    bb30: {
        StorageDead(_67);
        _68 = discriminant(_66);
        switchInt(move _68) -> [0: bb31, 1: bb32, otherwise: bb10];
    }

    bb31: {
        StorageLive(_72);
        _72 = move ((_66 as Continue).0: anchor_lang::prelude::Clock);
        _65 = move _72;
        StorageDead(_72);
        _64 = &_65;
        _323 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = const _;
        _76 = &(*_77);
        _75 = _76;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_62;
        _81 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _82) -> [return: bb34, unwind: bb144];
    }

    bb32: {
        StorageLive(_69);
        _69 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_71);
        _71 = move _69;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _71) -> [return: bb33, unwind: bb179];
    }

    bb33: {
        StorageDead(_71);
        StorageDead(_69);
        _353 = discriminant(_66);
        StorageDead(_66);
        goto -> bb135;
    }

    bb34: {
        _80 = &(*_81);
        StorageDead(_82);
        _79 = <[u8] as AsRef<[u8]>>::as_ref(move _80) -> [return: bb35, unwind: bb144];
    }

    bb35: {
        _78 = &(*_79);
        StorageDead(_80);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &(*_42);
        _89 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _90) -> [return: bb36, unwind: bb144];
    }

    bb36: {
        StorageDead(_90);
        _88 = ((*_89).1: u64);
        _87 = move _88 as u8 (IntToInt);
        StorageDead(_88);
        _86 = [move _87];
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = move _84 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_84);
        _74 = [move _75, move _78, move _83];
        StorageDead(_83);
        StorageDead(_78);
        StorageDead(_75);
        _73 = &_74;
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(*_2);
        _92 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _93) -> [return: bb37, unwind: bb144];
    }

    bb37: {
        StorageDead(_93);
        StorageLive(_94);
        _94 = {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:72:14: 72:28};
        _91 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:72:14: 72:28}>(move _92, move _94) -> [return: bb38, unwind: bb144];
    }

    bb38: {
        StorageDead(_94);
        StorageDead(_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_52);
        _98 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _99) -> [return: bb39, unwind: bb144];
    }

    bb39: {
        _97 = &(*_98);
        StorageDead(_99);
        _96 = obligation::Obligation::has_referrer(move _97) -> [return: bb40, unwind: bb144];
    }

    bb40: {
        switchInt(move _96) -> [0: bb63, otherwise: bb41];
    }

    bb41: {
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_100);
        _100 = &((*_1).9: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>);
        _101 = discriminant((*_100));
        switchInt(move _101) -> [0: bb42, 1: bb43, otherwise: bb10];
    }

    bb42: {
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _291 = const _;
        _142 = &(*_291);
        _141 = LendingError::name(move _142) -> [return: bb59, unwind: bb144];
    }

    bb43: {
        StorageLive(_102);
        _102 = &(((*_100) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_102);
        _105 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerTokenState>::load_mut(move _106) -> [return: bb44, unwind: bb144];
    }

    bb44: {
        StorageDead(_106);
        _104 = <std::result::Result<RefMut<'_, referral::ReferrerTokenState>, anchor_lang::error::Error> as Try>::branch(move _105) -> [return: bb45, unwind: bb144];
    }

    bb45: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb46, 1: bb47, otherwise: bb10];
    }

    bb46: {
        StorageLive(_111);
        _111 = move ((_104 as Continue).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>);
        _103 = move _111;
        StorageDead(_111);
        _325 = discriminant(_104);
        StorageDead(_104);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _116 = &(*_117);
        _115 = &(*_116);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_103;
        _120 = &(*_121);
        _119 = <RefMut<'_, referral::ReferrerTokenState> as Deref>::deref(move _120) -> [return: bb49, unwind: bb143];
    }

    bb47: {
        StorageLive(_108);
        _108 = move ((_104 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_110);
        _110 = move _108;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _110) -> [return: bb48, unwind: bb178];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_108);
        _351 = discriminant(_104);
        StorageDead(_104);
        goto -> bb132;
    }

    bb49: {
        _118 = &(*_119);
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_102);
        _122 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState> as anchor_lang::Key>::key(move _123) -> [return: bb50, unwind: bb143];
    }

    bb50: {
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &(*_32);
        _125 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _126) -> [return: bb51, unwind: bb143];
    }

    bb51: {
        StorageDead(_126);
        _124 = (((*_125).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_52);
        _128 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _129) -> [return: bb52, unwind: bb143];
    }

    bb52: {
        StorageDead(_129);
        _127 = ((*_128).17: anchor_lang::prelude::Pubkey);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _130 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _131) -> [return: bb53, unwind: bb143];
    }

    bb53: {
        StorageDead(_131);
        _114 = lending_checks::validate_referrer_token_state(move _115, move _118, move _122, move _124, move _127, move _130) -> [return: bb54, unwind: bb143];
    }

    bb54: {
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_118);
        StorageDead(_115);
        _113 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _114) -> [return: bb55, unwind: bb143];
    }

    bb55: {
        StorageDead(_114);
        _132 = discriminant(_113);
        switchInt(move _132) -> [0: bb56, 1: bb57, otherwise: bb10];
    }

    bb56: {
        StorageLive(_136);
        _136 = ((_113 as Continue).0: ());
        _112 = _136;
        StorageDead(_136);
        _327 = discriminant(_113);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_137);
        _137 = move _103;
        _304 = const true;
        _95 = std::option::Option::<RefMut<'_, referral::ReferrerTokenState>>::Some(move _137);
        StorageDead(_137);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb64;
    }

    bb57: {
        StorageLive(_133);
        _133 = move ((_113 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_135);
        _135 = move _133;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _135) -> [return: bb58, unwind: bb177];
    }

    bb58: {
        StorageDead(_135);
        StorageDead(_133);
        _349 = discriminant(_113);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        drop(_103) -> [return: bb132, unwind: bb144];
    }

    bb59: {
        StorageDead(_142);
        StorageLive(_144);
        StorageLive(_145);
        _145 = LendingError::ReferrerAccountMissing;
        _144 = <LendingError as Into<u32>>::into(move _145) -> [return: bb60, unwind: bb142];
    }

    bb60: {
        StorageDead(_145);
        StorageLive(_146);
        StorageLive(_147);
        _290 = const _;
        _147 = &(*_290);
        _146 = <LendingError as ToString>::to_string(move _147) -> [return: bb61, unwind: bb142];
    }

    bb61: {
        StorageDead(_147);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_borrow_obligation_liquidity.rs", line: const 91_u32 };
        _150 = anchor_lang::error::ErrorOrigin::Source(move _151);
        StorageDead(_151);
        _149 = std::option::Option::<ErrorOrigin>::Some(move _150);
        StorageDead(_150);
        StorageLive(_152);
        _152 = std::option::Option::<ComparedValues>::None;
        _140 = anchor_lang::error::AnchorError { error_name: move _141, error_code_number: move _144, error_msg: move _146, error_origin: move _149, compared_values: move _152 };
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_141);
        _139 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _140) -> [return: bb62, unwind: bb144];
    }

    bb62: {
        StorageDead(_140);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _139);
        StorageDead(_139);
        goto -> bb133;
    }

    bb63: {
        StorageDead(_98);
        StorageDead(_97);
        _304 = const true;
        _95 = std::option::Option::<RefMut<'_, referral::ReferrerTokenState>>::None;
        goto -> bb64;
    }

    bb64: {
        StorageDead(_96);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _294 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _375 = (((_294.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _159 = &(*_375);
        _158 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _159) -> [return: bb65, unwind: bb176];
    }

    bb65: {
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = amount(move _156) -> [return: bb66, unwind: bb141];
    }

    bb66: {
        StorageDead(_156);
        _154 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _155) -> [return: bb67, unwind: bb141];
    }

    bb67: {
        StorageDead(_155);
        _160 = discriminant(_154);
        switchInt(move _160) -> [0: bb68, 1: bb69, otherwise: bb10];
    }

    bb68: {
        StorageLive(_164);
        _164 = ((_154 as Continue).0: u64);
        _153 = _164;
        StorageDead(_164);
        _329 = discriminant(_154);
        drop(_158) -> [return: bb71, unwind: bb176];
    }

    bb69: {
        StorageLive(_161);
        _161 = move ((_154 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_163);
        _163 = move _161;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _163) -> [return: bb70, unwind: bb174];
    }

    bb70: {
        StorageDead(_163);
        StorageDead(_161);
        _347 = discriminant(_154);
        drop(_158) -> [return: bb130, unwind: bb176];
    }

    bb71: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_154);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &(*_32);
        _166 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _167) -> [return: bb72, unwind: bb176];
    }

    bb72: {
        StorageDead(_167);
        _165 = (((*_166).5: state::reserve::ReserveLiquidity).3: u64);
        StorageDead(_166);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_42);
        _174 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _175) -> [return: bb73, unwind: bb176];
    }

    bb73: {
        _173 = &(*_174);
        StorageDead(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &mut (*_32);
        _177 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _178) -> [return: bb74, unwind: bb176];
    }

    bb74: {
        _176 = &mut (*_177);
        StorageDead(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &mut (*_52);
        _180 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _181) -> [return: bb75, unwind: bb176];
    }

    bb75: {
        _179 = &mut (*_180);
        StorageDead(_181);
        StorageLive(_182);
        _182 = _3;
        StorageLive(_183);
        _183 = &(*_64);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _184 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _185) -> [return: bb76, unwind: bb176];
    }

    bb76: {
        StorageDead(_185);
        StorageLive(_186);
        _304 = const false;
        _186 = move _95;
        StorageLive(_187);
        _187 = move _91;
        _172 = lending_operations::borrow_obligation_liquidity::<'_, account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, std::iter::Map<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_borrow_obligation_liquidity.rs:72:14: 72:28}>>(move _173, move _176, move _179, move _182, move _183, move _184, move _186, move _187) -> [return: bb77, unwind: bb176];
    }

    bb77: {
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        _171 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as Try>::branch(move _172) -> [return: bb78, unwind: bb176];
    }

    bb78: {
        StorageDead(_172);
        _188 = discriminant(_171);
        switchInt(move _188) -> [0: bb79, 1: bb80, otherwise: bb10];
    }

    bb79: {
        StorageLive(_192);
        _192 = move ((_171 as Continue).0: state::types::CalculateBorrowResult);
        _170 = move _192;
        StorageDead(_192);
        StorageLive(_168);
        _168 = (_170.1: u64);
        StorageLive(_169);
        _169 = (_170.2: u64);
        _331 = discriminant(_171);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _292 = const _;
        _198 = &(*_292);
        _197 = &(*_198);
        _196 = move _197 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_197);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_168;
        _205 = &(*_206);
        _204 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _205) -> [return: bb82, unwind: bb176];
    }

    bb80: {
        StorageLive(_189);
        _189 = move ((_171 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_191);
        _191 = move _189;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _191) -> [return: bb81, unwind: bb173];
    }

    bb81: {
        StorageDead(_191);
        StorageDead(_189);
        _345 = discriminant(_171);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb129;
    }

    bb82: {
        StorageDead(_205);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_169;
        _208 = &(*_209);
        _207 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _208) -> [return: bb83, unwind: bb176];
    }

    bb83: {
        StorageDead(_208);
        _203 = [move _204, move _207];
        StorageDead(_207);
        StorageDead(_204);
        _202 = &_203;
        _201 = &(*_202);
        _200 = move _201 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_201);
        _195 = Arguments::<'_>::new_v1(move _196, move _200) -> [return: bb84, unwind: bb176];
    }

    bb84: {
        StorageDead(_200);
        StorageDead(_196);
        _194 = _print(move _195) -> [return: bb85, unwind: bb176];
    }

    bb85: {
        StorageDead(_195);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_198);
        StorageDead(_194);
        _193 = const ();
        StorageDead(_193);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = _169;
        _211 = Gt(move _212, const 0_u64);
        switchInt(move _211) -> [0: bb99, otherwise: bb86];
    }

    bb86: {
        StorageDead(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &((*_1).10: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _216 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _217) -> [return: bb87, unwind: bb176];
    }

    bb87: {
        _314 = const true;
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        _295 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _376 = (((_295.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _219 = &(*_376);
        _218 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _219) -> [return: bb88, unwind: bb172];
    }

    bb88: {
        _313 = const true;
        StorageDead(_219);
        StorageLive(_220);
        StorageLive(_221);
        _296 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _377 = (((_296.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _221 = &(*_377);
        _220 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _221) -> [return: bb89, unwind: bb170];
    }

    bb89: {
        _312 = const true;
        StorageDead(_221);
        StorageLive(_222);
        StorageLive(_223);
        _297 = deref_copy ((*_1).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _378 = (((_297.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _223 = &(*_378);
        _222 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _223) -> [return: bb90, unwind: bb168];
    }

    bb90: {
        _311 = const true;
        StorageDead(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _224 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _225) -> [return: bb91, unwind: bb166];
    }

    bb91: {
        _310 = const true;
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &(*_73);
        _226 = move _227 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_227);
        StorageLive(_228);
        _228 = _169;
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _298 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _379 = (((_298.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _233 = &(*_379);
        _232 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _233) -> [return: bb92, unwind: bb164];
    }

    bb92: {
        _231 = &(*_232);
        _230 = <anchor_spl::token_interface::Mint as Deref>::deref(move _231) -> [return: bb93, unwind: bb164];
    }

    bb93: {
        StorageDead(_233);
        StorageDead(_231);
        _229 = ((*_230).2: u8);
        _314 = const false;
        _313 = const false;
        _312 = const false;
        _311 = const false;
        _310 = const false;
        _215 = send_origination_fees_transfer(move _216, move _218, move _220, move _222, move _224, move _226, move _228, move _229) -> [return: bb94, unwind: bb164];
    }

    bb94: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_226);
        _310 = const false;
        StorageDead(_224);
        _311 = const false;
        StorageDead(_222);
        _312 = const false;
        StorageDead(_220);
        _313 = const false;
        StorageDead(_218);
        _314 = const false;
        StorageDead(_216);
        _214 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _215) -> [return: bb95, unwind: bb176];
    }

    bb95: {
        StorageDead(_215);
        _234 = discriminant(_214);
        switchInt(move _234) -> [0: bb96, 1: bb97, otherwise: bb10];
    }

    bb96: {
        StorageLive(_238);
        _238 = ((_214 as Continue).0: ());
        _213 = _238;
        StorageDead(_238);
        _333 = discriminant(_214);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_214);
        StorageDead(_213);
        _210 = const ();
        goto -> bb100;
    }

    bb97: {
        StorageLive(_235);
        _235 = move ((_214 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_237);
        _237 = move _235;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _237) -> [return: bb98, unwind: bb162];
    }

    bb98: {
        StorageDead(_237);
        StorageDead(_235);
        _343 = discriminant(_214);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_210);
        goto -> bb128;
    }

    bb99: {
        StorageDead(_212);
        _210 = const ();
        goto -> bb100;
    }

    bb100: {
        StorageDead(_211);
        StorageDead(_210);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &((*_1).10: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _242 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _243) -> [return: bb101, unwind: bb176];
    }

    bb101: {
        _309 = const true;
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        _299 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _380 = (((_299.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _245 = &(*_380);
        _244 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _245) -> [return: bb102, unwind: bb161];
    }

    bb102: {
        _308 = const true;
        StorageDead(_245);
        StorageLive(_246);
        StorageLive(_247);
        _300 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _381 = (((_300.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _247 = &(*_381);
        _246 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _247) -> [return: bb103, unwind: bb159];
    }

    bb103: {
        _307 = const true;
        StorageDead(_247);
        StorageLive(_248);
        StorageLive(_249);
        _301 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _382 = (((_301.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _249 = &(*_382);
        _248 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _249) -> [return: bb104, unwind: bb157];
    }

    bb104: {
        _306 = const true;
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _250 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _251) -> [return: bb105, unwind: bb155];
    }

    bb105: {
        _305 = const true;
        StorageDead(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &(*_73);
        _252 = move _253 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_253);
        StorageLive(_254);
        _254 = _168;
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _302 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _383 = (((_302.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _259 = &(*_383);
        _258 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _259) -> [return: bb106, unwind: bb153];
    }

    bb106: {
        _257 = &(*_258);
        _256 = <anchor_spl::token_interface::Mint as Deref>::deref(move _257) -> [return: bb107, unwind: bb153];
    }

    bb107: {
        StorageDead(_259);
        StorageDead(_257);
        _255 = ((*_256).2: u8);
        _309 = const false;
        _308 = const false;
        _307 = const false;
        _306 = const false;
        _305 = const false;
        _241 = borrow_obligation_liquidity_transfer(move _242, move _244, move _246, move _248, move _250, move _252, move _254, move _255) -> [return: bb108, unwind: bb153];
    }

    bb108: {
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_252);
        _305 = const false;
        StorageDead(_250);
        _306 = const false;
        StorageDead(_248);
        _307 = const false;
        StorageDead(_246);
        _308 = const false;
        StorageDead(_244);
        _309 = const false;
        StorageDead(_242);
        _240 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _241) -> [return: bb109, unwind: bb176];
    }

    bb109: {
        StorageDead(_241);
        _260 = discriminant(_240);
        switchInt(move _260) -> [0: bb110, 1: bb111, otherwise: bb10];
    }

    bb110: {
        StorageLive(_264);
        _264 = ((_240 as Continue).0: ());
        _239 = _264;
        StorageDead(_264);
        _335 = discriminant(_240);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_240);
        StorageDead(_239);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _303 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _384 = (((_303.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _273 = &(*_384);
        _272 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _273) -> [return: bb113, unwind: bb176];
    }

    bb111: {
        StorageLive(_261);
        _261 = move ((_240 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_263);
        _263 = move _261;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _263) -> [return: bb112, unwind: bb151];
    }

    bb112: {
        StorageDead(_263);
        StorageDead(_261);
        _341 = discriminant(_240);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_240);
        StorageDead(_239);
        goto -> bb128;
    }

    bb113: {
        StorageDead(_273);
        _271 = &_272;
        _270 = &(*_271);
        _269 = amount(move _270) -> [return: bb114, unwind: bb140];
    }

    bb114: {
        StorageDead(_270);
        _268 = std::result::Result::<u64, anchor_lang::error::Error>::unwrap(move _269) -> [return: bb115, unwind: bb140];
    }

    bb115: {
        StorageDead(_269);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &(*_32);
        _275 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _276) -> [return: bb116, unwind: bb140];
    }

    bb116: {
        StorageDead(_276);
        _274 = (((*_275).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_277);
        _277 = _153;
        StorageLive(_278);
        _278 = _165;
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = _169;
        StorageLive(_282);
        _282 = _168;
        _283 = CheckedAdd(_281, _282);
        assert(!move (_283.1: bool), "attempt to compute `{} + {}`, which would overflow", move _281, move _282) -> [success: bb117, unwind: bb140];
    }

    bb117: {
        _280 = move (_283.0: u64);
        StorageDead(_282);
        StorageDead(_281);
        _279 = state::types::LendingAction::Subtractive(move _280);
        StorageDead(_280);
        _267 = post_transfer_vault_balance_liquidity_reserve_checks(move _268, move _274, move _277, move _278, move _279) -> [return: bb118, unwind: bb140];
    }

    bb118: {
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_274);
        StorageDead(_268);
        _266 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _267) -> [return: bb119, unwind: bb140];
    }

    bb119: {
        StorageDead(_267);
        _284 = discriminant(_266);
        switchInt(move _284) -> [0: bb120, 1: bb121, otherwise: bb10];
    }

    bb120: {
        StorageLive(_288);
        _288 = ((_266 as Continue).0: ());
        _265 = _288;
        StorageDead(_288);
        _337 = discriminant(_266);
        StorageDead(_275);
        drop(_272) -> [return: bb123, unwind: bb176];
    }

    bb121: {
        StorageLive(_285);
        _285 = move ((_266 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_287);
        _287 = move _285;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _287) -> [return: bb122, unwind: bb150];
    }

    bb122: {
        StorageDead(_287);
        StorageDead(_285);
        _339 = discriminant(_266);
        StorageDead(_275);
        drop(_272) -> [return: bb127, unwind: bb176];
    }

    bb123: {
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_289);
        _289 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _289);
        StorageDead(_289);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_153);
        _304 = const false;
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        drop(_53) -> [return: bb124, unwind: bb145];
    }

    bb124: {
        StorageDead(_53);
        StorageDead(_52);
        drop(_43) -> [return: bb125, unwind: bb146];
    }

    bb125: {
        StorageDead(_43);
        StorageDead(_42);
        drop(_33) -> [return: bb126, unwind: bb148];
    }

    bb126: {
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb139;
    }

    bb127: {
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_165);
        goto -> bb131;
    }

    bb130: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_154);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_153);
        switchInt(_304) -> [0: bb134, otherwise: bb149];
    }

    bb132: {
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_100);
        StorageDead(_96);
        goto -> bb134;
    }

    bb134: {
        _304 = const false;
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb135;
    }

    bb135: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        drop(_53) -> [return: bb136, unwind: bb145];
    }

    bb136: {
        StorageDead(_53);
        StorageDead(_52);
        drop(_43) -> [return: bb137, unwind: bb146];
    }

    bb137: {
        StorageDead(_43);
        StorageDead(_42);
        drop(_33) -> [return: bb138, unwind: bb148];
    }

    bb138: {
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb139;
    }

    bb139: {
        return;
    }

    bb140 (cleanup): {
        drop(_272) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_158) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_141) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_103) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_53) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_43) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_33) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_9) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        resume;
    }

    bb149: {
        drop(_95) -> [return: bb134, unwind: bb144];
    }

    bb150 (cleanup): {
        _363 = discriminant(_266);
        goto -> bb140;
    }

    bb151 (cleanup): {
        _364 = discriminant(_240);
        goto -> bb176;
    }

    bb152 (cleanup): {
        drop(_250) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_305) -> [0: bb155, otherwise: bb152];
    }

    bb154 (cleanup): {
        drop(_248) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        switchInt(_306) -> [0: bb157, otherwise: bb154];
    }

    bb156 (cleanup): {
        drop(_246) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        switchInt(_307) -> [0: bb159, otherwise: bb156];
    }

    bb158 (cleanup): {
        drop(_244) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        switchInt(_308) -> [0: bb161, otherwise: bb158];
    }

    bb160 (cleanup): {
        drop(_242) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        switchInt(_309) -> [0: bb176, otherwise: bb160];
    }

    bb162 (cleanup): {
        _365 = discriminant(_214);
        goto -> bb176;
    }

    bb163 (cleanup): {
        drop(_224) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        switchInt(_310) -> [0: bb166, otherwise: bb163];
    }

    bb165 (cleanup): {
        drop(_222) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        switchInt(_311) -> [0: bb168, otherwise: bb165];
    }

    bb167 (cleanup): {
        drop(_220) -> [return: bb170, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        switchInt(_312) -> [0: bb170, otherwise: bb167];
    }

    bb169 (cleanup): {
        drop(_218) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        switchInt(_313) -> [0: bb172, otherwise: bb169];
    }

    bb171 (cleanup): {
        drop(_216) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        switchInt(_314) -> [0: bb176, otherwise: bb171];
    }

    bb173 (cleanup): {
        _366 = discriminant(_171);
        goto -> bb176;
    }

    bb174 (cleanup): {
        _367 = discriminant(_154);
        goto -> bb141;
    }

    bb175 (cleanup): {
        drop(_95) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        switchInt(_304) -> [0: bb144, otherwise: bb175];
    }

    bb177 (cleanup): {
        _368 = discriminant(_113);
        goto -> bb143;
    }

    bb178 (cleanup): {
        _369 = discriminant(_104);
        goto -> bb144;
    }

    bb179 (cleanup): {
        _370 = discriminant(_66);
        goto -> bb144;
    }

    bb180 (cleanup): {
        _371 = discriminant(_54);
        goto -> bb145;
    }

    bb181 (cleanup): {
        _372 = discriminant(_44);
        goto -> bb146;
    }

    bb182 (cleanup): {
        _373 = discriminant(_34);
        goto -> bb148;
    }

    bb183 (cleanup): {
        _374 = discriminant(_24);
        goto -> bb148;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
