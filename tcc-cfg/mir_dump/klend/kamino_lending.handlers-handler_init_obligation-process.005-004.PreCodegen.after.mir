// MIR for `handlers::handler_init_obligation::process` after PreCodegen

fn handlers::handler_init_obligation::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_obligation::InitObligation<'_>>, _2: obligation::InitObligationArgs) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug args => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &anchor_lang::prelude::Clock;
    let _4: anchor_lang::prelude::Clock;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _6: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: anchor_lang::prelude::Clock;
    let _12: ();
    let mut _13: std::result::Result<(), anchor_lang::error::Error>;
    let mut _14: u8;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: &anchor_lang::prelude::AccountInfo<'_>;
    let _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _22: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _30: std::cell::Ref<'_, state::referral::UserMetadata>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::referral::UserMetadata>>;
    let mut _32: std::result::Result<std::cell::Ref<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _33: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _39: ();
    let mut _40: &mut state::obligation::Obligation;
    let mut _41: &mut state::obligation::Obligation;
    let mut _42: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _43: state::obligation::InitObligationParams;
    let mut _44: u64;
    let mut _45: anchor_lang::prelude::Pubkey;
    let mut _46: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _47: anchor_lang::prelude::Pubkey;
    let mut _48: &anchor_lang::prelude::Signer<'_>;
    let mut _49: [state::obligation::ObligationCollateral; 8];
    let mut _50: state::obligation::ObligationCollateral;
    let mut _51: [state::obligation::ObligationLiquidity; 5];
    let mut _52: state::obligation::ObligationLiquidity;
    let mut _53: u64;
    let mut _54: u8;
    let mut _55: anchor_lang::prelude::Pubkey;
    let mut _56: &state::referral::UserMetadata;
    let mut _57: &std::cell::Ref<'_, state::referral::UserMetadata>;
    let mut _58: ();
    let mut _59: &mut handlers::handler_init_obligation::InitObligation<'_>;
    let mut _60: &mut handlers::handler_init_obligation::InitObligation<'_>;
    let mut _61: &mut handlers::handler_init_obligation::InitObligation<'_>;
    let mut _62: &mut handlers::handler_init_obligation::InitObligation<'_>;
    let mut _63: &mut handlers::handler_init_obligation::InitObligation<'_>;
    let mut _64: &mut handlers::handler_init_obligation::InitObligation<'_>;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    scope 1 {
        debug clock => _3;
        let _19: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
        let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _28: std::cell::RefMut<'_, state::obligation::Obligation>;
        scope 6 {
            debug obligation => _19;
            let _29: &std::cell::Ref<'_, state::referral::UserMetadata>;
            let _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _38: std::cell::Ref<'_, state::referral::UserMetadata>;
            scope 11 {
                debug owner_user_metadata => _29;
            }
            scope 12 {
                debug residual => _35;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _38;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        StorageDead(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_5 as Continue).0: anchor_lang::prelude::Clock);
        _4 = move _11;
        StorageDead(_11);
        _3 = &_4;
        _65 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = (_2.0: u8);
        StorageLive(_15);
        StorageLive(_16);
        _59 = deref_copy (_1.1: &mut handlers::handler_init_obligation::InitObligation<'_>);
        _16 = &((*_59).4: anchor_lang::prelude::AccountInfo<'_>);
        _15 = &(*_16);
        StorageLive(_17);
        StorageLive(_18);
        _60 = deref_copy (_1.1: &mut handlers::handler_init_obligation::InitObligation<'_>);
        _18 = &((*_60).5: anchor_lang::prelude::AccountInfo<'_>);
        _17 = &(*_18);
        _13 = check_obligation_seeds(move _14, move _15, move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _75 = discriminant(_5);
        StorageDead(_5);
        goto -> bb29;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        _12 = std::result::Result::<(), anchor_lang::error::Error>::unwrap(move _13) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        StorageDead(_13);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_12);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _61 = deref_copy (_1.1: &mut handlers::handler_init_obligation::InitObligation<'_>);
        _23 = &((*_61).2: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _22 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_init(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        _21 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        StorageDead(_22);
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_28);
        _28 = move ((_21 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _20 = move _28;
        StorageDead(_28);
        _19 = &mut _20;
        _67 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _62 = deref_copy (_1.1: &mut handlers::handler_init_obligation::InitObligation<'_>);
        _33 = &((*_62).6: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        _32 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::load(move _33) -> [return: bb14, unwind: bb32];
    }

    bb12: {
        StorageLive(_25);
        _25 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _73 = discriminant(_21);
        StorageDead(_21);
        goto -> bb28;
    }

    bb14: {
        StorageDead(_33);
        _31 = <std::result::Result<Ref<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _32) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_38);
        _38 = move ((_31 as Continue).0: std::cell::Ref<'_, state::referral::UserMetadata>);
        _30 = move _38;
        StorageDead(_38);
        _29 = &_30;
        _69 = discriminant(_31);
        StorageDead(_31);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_19);
        _41 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _42) -> [return: bb19, unwind: bb31];
    }

    bb17: {
        StorageLive(_35);
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _37) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_35);
        _71 = discriminant(_31);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        drop(_20) -> [return: bb28, unwind: bb33];
    }

    bb19: {
        _40 = &mut (*_41);
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = ((*_3).0: u64);
        StorageLive(_45);
        StorageLive(_46);
        _63 = deref_copy (_1.1: &mut handlers::handler_init_obligation::InitObligation<'_>);
        _46 = &((*_63).3: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _45 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _46) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _64 = deref_copy (_1.1: &mut handlers::handler_init_obligation::InitObligation<'_>);
        _48 = &((*_64).0: anchor_lang::prelude::Signer<'_>);
        _47 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _48) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = <obligation::ObligationCollateral as Default>::default() -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _49 = [move _50; 8];
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = <obligation::ObligationLiquidity as Default>::default() -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _51 = [move _52; 5];
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = (_2.0: u8);
        _53 = move _54 as u64 (IntToInt);
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_29);
        _56 = <Ref<'_, referral::UserMetadata> as Deref>::deref(move _57) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        StorageDead(_57);
        _55 = ((*_56).0: anchor_lang::prelude::Pubkey);
        _43 = InitObligationParams { current_slot: move _44, lending_market: move _45, owner: move _47, deposits: move _49, borrows: move _51, tag: move _53, referrer: move _55 };
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_44);
        _39 = obligation::Obligation::init(move _40, move _43) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_56);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_58);
        _58 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _58);
        StorageDead(_58);
        drop(_30) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        StorageDead(_30);
        StorageDead(_29);
        drop(_20) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb30;
    }

    bb28: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_30) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_20) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }

    bb34 (cleanup): {
        _77 = discriminant(_31);
        goto -> bb32;
    }

    bb35 (cleanup): {
        _78 = discriminant(_21);
        goto -> bb33;
    }

    bb36 (cleanup): {
        _79 = discriminant(_5);
        goto -> bb33;
    }
}
