// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::from_dec_str` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::from_dec_str(_1: &str) -> std::result::Result<uint_types::U256, FromDecStrErr> {
    debug value => _1;
    let mut _0: std::result::Result<utils::fraction::uint_types::U256, uint::FromDecStrErr>;
    let mut _2: utils::fraction::uint_types::U256;
    let _3: ();
    let mut _4: std::iter::Map<std::str::Bytes<'_>, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}>;
    let mut _5: std::iter::Map<std::str::Bytes<'_>, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}>;
    let mut _6: std::str::Bytes<'_>;
    let mut _7: &str;
    let mut _8: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35};
    let mut _10: ();
    let _11: ();
    let mut _12: std::option::Option<u8>;
    let mut _13: &mut std::iter::Map<std::str::Bytes<'_>, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}>;
    let mut _14: &mut std::iter::Map<std::str::Bytes<'_>, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}>;
    let mut _15: isize;
    let mut _16: !;
    let _18: ();
    let mut _19: bool;
    let mut _20: u8;
    let mut _21: !;
    let mut _22: uint::FromDecStrErr;
    let mut _25: (utils::fraction::uint_types::U256, u64);
    let mut _26: utils::fraction::uint_types::U256;
    let _27: ();
    let mut _28: bool;
    let mut _29: u64;
    let mut _30: !;
    let mut _31: uint::FromDecStrErr;
    let mut _34: (utils::fraction::uint_types::U256, bool);
    let mut _35: utils::fraction::uint_types::U256;
    let mut _36: utils::fraction::uint_types::U256;
    let mut _37: u8;
    let _38: ();
    let mut _39: bool;
    let mut _40: !;
    let mut _41: uint::FromDecStrErr;
    let mut _42: utils::fraction::uint_types::U256;
    let mut _43: utils::fraction::uint_types::U256;
    scope 1 {
        debug res => _2;
        let mut _9: std::iter::Map<std::str::Bytes<'_>, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}>;
        scope 2 {
            debug iter => _9;
            let _17: u8;
            scope 3 {
                debug b => _17;
                let _23: utils::fraction::uint_types::U256;
                let _24: u64;
                scope 4 {
                    debug r => _23;
                    debug overflow => _24;
                    let _32: utils::fraction::uint_types::U256;
                    let _33: bool;
                    scope 5 {
                        debug r => _32;
                        debug overflow => _33;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = <uint_types::U256 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = core::str::<impl str>::bytes(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35};
        _5 = <std::str::Bytes<'_> as Iterator>::map::<u8, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}>(move _6, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::iter::Map<std::str::Bytes<'_>, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}> as IntoIterator>::into_iter(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_5);
        StorageLive(_9);
        _9 = move _4;
        goto -> bb5;
    }

    bb5: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _9;
        _13 = &mut (*_14);
        _12 = <std::iter::Map<std::str::Bytes<'_>, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:593:32: 593:35}> as Iterator>::next(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_17);
        _17 = ((_12 as Some).0: u8);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _17;
        _19 = Gt(move _20, const 9_u8);
        switchInt(move _19) -> [0: bb11, otherwise: bb10];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _3 = const ();
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_43);
        _43 = _2;
        _0 = std::result::Result::<uint_types::U256, FromDecStrErr>::Ok(move _43);
        StorageDead(_43);
        StorageDead(_2);
        goto -> bb21;
    }

    bb10: {
        StorageDead(_20);
        StorageLive(_22);
        _22 = uint::FromDecStrErr::InvalidCharacter;
        _0 = std::result::Result::<uint_types::U256, FromDecStrErr>::Err(move _22);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb20;
    }

    bb11: {
        StorageDead(_20);
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        _25 = uint_types::U256::overflowing_mul_u64(move _26, const 10_u64) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        StorageLive(_23);
        _23 = (_25.0: utils::fraction::uint_types::U256);
        StorageLive(_24);
        _24 = (_25.1: u64);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _24;
        _28 = Gt(move _29, const 0_u64);
        switchInt(move _28) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_31);
        _31 = uint::FromDecStrErr::InvalidLength;
        _0 = std::result::Result::<uint_types::U256, FromDecStrErr>::Err(move _31);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb19;
    }

    bb14: {
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _23;
        StorageLive(_36);
        StorageLive(_37);
        _37 = _17;
        _36 = <u8 as Into<uint_types::U256>>::into(move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        _34 = uint_types::U256::overflowing_add(move _35, move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_32);
        _32 = (_34.0: utils::fraction::uint_types::U256);
        StorageLive(_33);
        _33 = (_34.1: bool);
        StorageDead(_34);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _33;
        switchInt(move _39) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageLive(_41);
        _41 = uint::FromDecStrErr::InvalidLength;
        _0 = std::result::Result::<uint_types::U256, FromDecStrErr>::Err(move _41);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb19;
    }

    bb18: {
        _38 = const ();
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_42);
        _42 = _32;
        _2 = move _42;
        StorageDead(_42);
        _11 = const ();
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _10 = const ();
        goto -> bb5;
    }

    bb19: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
