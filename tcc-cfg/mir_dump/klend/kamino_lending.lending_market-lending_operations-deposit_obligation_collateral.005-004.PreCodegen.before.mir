// MIR for `lending_operations::deposit_obligation_collateral` before PreCodegen

fn lending_operations::deposit_obligation_collateral(_1: &state::lending_market::LendingMarket, _2: &mut reserve::Reserve, _3: &mut obligation::Obligation, _4: u64, _5: u64, _6: anchor_lang::prelude::Pubkey, _7: state::types::MaxReservesAsCollateralCheck) -> std::result::Result<(), anchor_lang::error::Error> {
    debug lending_market => _1;
    debug deposit_reserve => _2;
    debug obligation => _3;
    debug slot => _4;
    debug collateral_amount => _5;
    debug deposit_reserve_pk => _6;
    debug max_reserves_as_collateral_check => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _8: ();
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: !;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: anchor_lang::error::Error;
    let mut _16: anchor_lang::error::AnchorError;
    let mut _17: std::string::String;
    let mut _18: &LendingError;
    let _19: LendingError;
    let mut _20: u32;
    let mut _21: LendingError;
    let mut _22: std::string::String;
    let mut _23: &LendingError;
    let _24: LendingError;
    let mut _25: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _26: anchor_lang::error::ErrorOrigin;
    let mut _27: anchor_lang::error::Source;
    let mut _28: std::option::Option<anchor_lang::error::ComparedValues>;
    let _29: ();
    let mut _30: bool;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _32: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _33: &state::last_update::LastUpdate;
    let mut _34: u64;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _39: bool;
    let mut _40: !;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: anchor_lang::error::Error;
    let mut _45: anchor_lang::error::AnchorError;
    let mut _46: std::string::String;
    let mut _47: &LendingError;
    let _48: LendingError;
    let mut _49: u32;
    let mut _50: LendingError;
    let mut _51: std::string::String;
    let mut _52: &LendingError;
    let _53: LendingError;
    let mut _54: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _55: anchor_lang::error::ErrorOrigin;
    let mut _56: anchor_lang::error::Source;
    let mut _57: std::option::Option<anchor_lang::error::ComparedValues>;
    let _58: ();
    let mut _59: bool;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _61: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _62: &state::last_update::LastUpdate;
    let mut _63: u64;
    let mut _64: isize;
    let _65: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _68: bool;
    let mut _69: !;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: anchor_lang::error::Error;
    let mut _74: anchor_lang::error::AnchorError;
    let mut _75: std::string::String;
    let mut _76: &LendingError;
    let _77: LendingError;
    let mut _78: u32;
    let mut _79: LendingError;
    let mut _80: std::string::String;
    let mut _81: &LendingError;
    let _82: LendingError;
    let mut _83: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _84: anchor_lang::error::ErrorOrigin;
    let mut _85: anchor_lang::error::Source;
    let mut _86: std::option::Option<anchor_lang::error::ComparedValues>;
    let _87: ();
    let mut _88: bool;
    let mut _89: u8;
    let mut _90: bool;
    let mut _91: u8;
    let mut _92: bool;
    let mut _93: u128;
    let mut _94: !;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: anchor_lang::error::Error;
    let mut _99: anchor_lang::error::AnchorError;
    let mut _100: std::string::String;
    let mut _101: &LendingError;
    let _102: LendingError;
    let mut _103: u32;
    let mut _104: LendingError;
    let mut _105: std::string::String;
    let mut _106: &LendingError;
    let _107: LendingError;
    let mut _108: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _109: anchor_lang::error::ErrorOrigin;
    let mut _110: anchor_lang::error::Source;
    let mut _111: std::option::Option<anchor_lang::error::ComparedValues>;
    let _112: ();
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _114: std::result::Result<(), anchor_lang::error::Error>;
    let mut _115: &state::obligation::Obligation;
    let mut _116: &state::reserve::Reserve;
    let mut _117: isize;
    let _118: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _121: ();
    let _122: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&state::lending_market::ElevationGroup>>;
    let mut _124: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _125: u8;
    let mut _126: &state::lending_market::LendingMarket;
    let mut _127: isize;
    let _128: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _131: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _133: (u8, u8);
    let mut _134: &state::reserve::Reserve;
    let mut _135: std::option::Option<&state::lending_market::ElevationGroup>;
    let _136: ();
    let mut _137: bool;
    let mut _138: u8;
    let _139: ();
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _141: std::result::Result<(), anchor_lang::error::Error>;
    let mut _142: &state::obligation::Obligation;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _149: &state::obligation::Obligation;
    let mut _151: &state::obligation::Obligation;
    let mut _153: &state::reserve::ReserveConfig;
    let mut _157: (&mut state::obligation::ObligationCollateral, bool);
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&mut state::obligation::ObligationCollateral, bool)>;
    let mut _159: std::result::Result<(&mut state::obligation::ObligationCollateral, bool), anchor_lang::error::Error>;
    let mut _160: &mut state::obligation::Obligation;
    let mut _161: anchor_lang::prelude::Pubkey;
    let mut _162: state::reserve::AssetTier;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _168: ();
    let mut _169: bool;
    let _170: ();
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _172: std::result::Result<(), anchor_lang::error::Error>;
    let mut _173: std::option::Option<u64>;
    let mut _174: &mut state::obligation::ObligationCollateral;
    let mut _175: usize;
    let mut _176: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _177: &anchor_lang::prelude::Pubkey;
    let _178: &anchor_lang::prelude::Pubkey;
    let mut _179: &mut state::reserve::Reserve;
    let mut _180: state::types::MaxReservesAsCollateralCheck;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _186: ();
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _188: std::result::Result<(), anchor_lang::error::Error>;
    let mut _189: &mut state::obligation::ObligationCollateral;
    let mut _190: u64;
    let mut _191: isize;
    let mut _193: !;
    let mut _194: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _196: u128;
    let _197: ();
    let mut _198: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _199: std::result::Result<(), anchor_lang::error::Error>;
    let mut _200: &mut state::obligation::Obligation;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _206: ();
    let mut _207: &mut state::last_update::LastUpdate;
    let _208: ();
    let mut _209: &mut state::last_update::LastUpdate;
    let _210: ();
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _212: std::result::Result<(), anchor_lang::error::Error>;
    let mut _213: &state::obligation::Obligation;
    let mut _214: isize;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _219: ();
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _221: std::result::Result<(), anchor_lang::error::Error>;
    let mut _222: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _223: &state::reserve::CollateralExchangeRate;
    let _224: state::reserve::CollateralExchangeRate;
    let mut _225: &state::reserve::Reserve;
    let mut _226: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _227: u64;
    let mut _228: &state::obligation::Obligation;
    let mut _229: &state::reserve::Reserve;
    let mut _230: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _231: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _232: u128;
    let mut _233: isize;
    let mut _235: !;
    let mut _236: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _238: ();
    let mut _239: &LendingError;
    let mut _240: &LendingError;
    let mut _241: &LendingError;
    let mut _242: &LendingError;
    let mut _243: &LendingError;
    let mut _244: &LendingError;
    let mut _245: &LendingError;
    let mut _246: &LendingError;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    scope 1 {
        debug residual => _36;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _39;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _65;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _68;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _118;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _121;
        scope 12 {
        }
    }
    scope 13 {
        debug elevation_group => _122;
        let _132: u8;
        scope 18 {
            debug liquidation_threshold_pct => _132;
            let _144: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _147: ();
            let _148: usize;
            scope 19 {
                debug residual => _144;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _147;
                scope 22 {
                }
            }
            scope 23 {
                debug pre_deposit_count => _148;
                let _150: std::option::Option<u64>;
                scope 24 {
                    debug total_borrowed_amount => _150;
                    let _152: state::reserve::AssetTier;
                    scope 25 {
                        debug asset_tier => _152;
                        let _154: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        let _155: &mut state::obligation::ObligationCollateral;
                        let _156: bool;
                        let _164: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _167: (&mut state::obligation::ObligationCollateral, bool);
                        scope 26 {
                            debug pre_collateral_market_value_f => _154;
                            let _202: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _205: ();
                            let _215: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _218: ();
                            let _234: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _237: ();
                            scope 40 {
                                debug residual => _202;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _205;
                                scope 43 {
                                }
                            }
                            scope 44 {
                                debug residual => _215;
                                scope 45 {
                                }
                            }
                            scope 46 {
                                debug val => _218;
                                scope 47 {
                                }
                            }
                            scope 48 {
                                debug residual => _234;
                                scope 49 {
                                }
                            }
                            scope 50 {
                                debug val => _237;
                                scope 51 {
                                }
                            }
                        }
                        scope 27 {
                            debug obligation_collateral => _155;
                            debug newly_added => _156;
                            let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _185: ();
                            let _192: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _195: ();
                            scope 32 {
                                debug residual => _182;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _185;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug residual => _192;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _195;
                                scope 39 {
                                }
                            }
                        }
                        scope 28 {
                            debug residual => _164;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _167;
                            scope 31 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 14 {
        debug residual => _128;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _131;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _5;
        _9 = Eq(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const "Collateral amount provided cannot be zero";
        _13 = &(*_14);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _240 = const _;
        _18 = &(*_240);
        _17 = LendingError::name(move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        _21 = LendingError::InvalidAmount;
        _20 = <LendingError as Into<u32>>::into(move _21) -> [return: bb4, unwind: bb113];
    }

    bb4: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _239 = const _;
        _23 = &(*_239);
        _22 = <LendingError as ToString>::to_string(move _23) -> [return: bb5, unwind: bb113];
    }

    bb5: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 373_u32 };
        _26 = anchor_lang::error::ErrorOrigin::Source(move _27);
        StorageDead(_27);
        _25 = std::option::Option::<ErrorOrigin>::Some(move _26);
        StorageDead(_26);
        StorageLive(_28);
        _28 = std::option::Option::<ComparedValues>::None;
        _16 = anchor_lang::error::AnchorError { error_name: move _17, error_code_number: move _20, error_msg: move _22, error_origin: move _25, compared_values: move _28 };
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_17);
        _15 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _16) -> [return: bb6, unwind: bb114];
    }

    bb6: {
        StorageDead(_16);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _15);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb109;
    }

    bb7: {
        StorageDead(_10);
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_2).1: state::last_update::LastUpdate);
        StorageLive(_34);
        _34 = _4;
        _32 = last_update::LastUpdate::is_stale(move _33, move _34, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _32) -> [return: bb9, unwind: bb114];
    }

    bb9: {
        StorageDead(_32);
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_39);
        _39 = ((_31 as Continue).0: bool);
        _30 = _39;
        StorageDead(_39);
        switchInt(move _30) -> [0: bb116, otherwise: bb115];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_36);
        _36 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _38) -> [return: bb13, unwind: bb129];
    }

    bb13: {
        StorageDead(_38);
        StorageDead(_36);
        _293 = discriminant(_31);
        StorageDead(_31);
        goto -> bb108;
    }

    bb14: {
        StorageDead(_42);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _242 = const _;
        _47 = &(*_242);
        _46 = LendingError::name(move _47) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        _50 = LendingError::ReserveStale;
        _49 = <LendingError as Into<u32>>::into(move _50) -> [return: bb16, unwind: bb112];
    }

    bb16: {
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        _241 = const _;
        _52 = &(*_241);
        _51 = <LendingError as ToString>::to_string(move _52) -> [return: bb17, unwind: bb112];
    }

    bb17: {
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 381_u32 };
        _55 = anchor_lang::error::ErrorOrigin::Source(move _56);
        StorageDead(_56);
        _54 = std::option::Option::<ErrorOrigin>::Some(move _55);
        StorageDead(_55);
        StorageLive(_57);
        _57 = std::option::Option::<ComparedValues>::None;
        _45 = anchor_lang::error::AnchorError { error_name: move _46, error_code_number: move _49, error_msg: move _51, error_origin: move _54, compared_values: move _57 };
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_46);
        _44 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _45) -> [return: bb18, unwind: bb114];
    }

    bb18: {
        StorageDead(_45);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _44);
        StorageDead(_44);
        goto -> bb108;
    }

    bb19: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _61) -> [return: bb20, unwind: bb114];
    }

    bb20: {
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: bool);
        _59 = _68;
        StorageDead(_68);
        switchInt(move _59) -> [0: bb118, otherwise: bb117];
    }

    bb22: {
        StorageLive(_65);
        _65 = move ((_60 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _67) -> [return: bb23, unwind: bb128];
    }

    bb23: {
        StorageDead(_67);
        StorageDead(_65);
        _291 = discriminant(_60);
        StorageDead(_60);
        goto -> bb107;
    }

    bb24: {
        StorageDead(_71);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _244 = const _;
        _76 = &(*_244);
        _75 = LendingError::name(move _76) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        _79 = LendingError::ObligationStale;
        _78 = <LendingError as Into<u32>>::into(move _79) -> [return: bb26, unwind: bb111];
    }

    bb26: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        _243 = const _;
        _81 = &(*_243);
        _80 = <LendingError as ToString>::to_string(move _81) -> [return: bb27, unwind: bb111];
    }

    bb27: {
        StorageDead(_81);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 389_u32 };
        _84 = anchor_lang::error::ErrorOrigin::Source(move _85);
        StorageDead(_85);
        _83 = std::option::Option::<ErrorOrigin>::Some(move _84);
        StorageDead(_84);
        StorageLive(_86);
        _86 = std::option::Option::<ComparedValues>::None;
        _74 = anchor_lang::error::AnchorError { error_name: move _75, error_code_number: move _78, error_msg: move _80, error_origin: move _83, compared_values: move _86 };
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_75);
        _73 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _74) -> [return: bb28, unwind: bb114];
    }

    bb28: {
        StorageDead(_74);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _73);
        StorageDead(_73);
        goto -> bb107;
    }

    bb29: {
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = ((*_3).14: u8);
        _90 = Eq(move _91, const _);
        switchInt(move _90) -> [0: bb39, otherwise: bb31];
    }

    bb30: {
        StorageDead(_89);
        goto -> bb40;
    }

    bb31: {
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = ((*_3).8: u128);
        _92 = Gt(move _93, const 0_u128);
        switchInt(move _92) -> [0: bb38, otherwise: bb32];
    }

    bb32: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const "Deposit reserve is disabled for usage as collateral outside elevation group";
        _96 = &(*_97);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_96);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _246 = const _;
        _101 = &(*_246);
        _100 = LendingError::name(move _101) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        _104 = LendingError::DepositDisabledOutsideElevationGroup;
        _103 = <LendingError as Into<u32>>::into(move _104) -> [return: bb35, unwind: bb110];
    }

    bb35: {
        StorageDead(_104);
        StorageLive(_105);
        StorageLive(_106);
        _245 = const _;
        _106 = &(*_245);
        _105 = <LendingError as ToString>::to_string(move _106) -> [return: bb36, unwind: bb110];
    }

    bb36: {
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 397_u32 };
        _109 = anchor_lang::error::ErrorOrigin::Source(move _110);
        StorageDead(_110);
        _108 = std::option::Option::<ErrorOrigin>::Some(move _109);
        StorageDead(_109);
        StorageLive(_111);
        _111 = std::option::Option::<ComparedValues>::None;
        _99 = anchor_lang::error::AnchorError { error_name: move _100, error_code_number: move _103, error_msg: move _105, error_origin: move _108, compared_values: move _111 };
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_100);
        _98 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _99) -> [return: bb37, unwind: bb114];
    }

    bb37: {
        StorageDead(_99);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _98);
        StorageDead(_98);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb109;
    }

    bb38: {
        StorageDead(_93);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_91);
        goto -> bb40;
    }

    bb40: {
        _87 = const ();
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_3);
        StorageLive(_116);
        _116 = &(*_2);
        _114 = check_same_elevation_group(move _115, move _116) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_116);
        StorageDead(_115);
        _113 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _114) -> [return: bb42, unwind: bb114];
    }

    bb42: {
        StorageDead(_114);
        _117 = discriminant(_113);
        switchInt(move _117) -> [0: bb43, 1: bb44, otherwise: bb11];
    }

    bb43: {
        StorageLive(_121);
        _121 = ((_113 as Continue).0: ());
        _112 = _121;
        StorageDead(_121);
        _255 = discriminant(_113);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = ((*_3).14: u8);
        StorageLive(_126);
        _126 = &(*_1);
        _124 = get_elevation_group(move _125, move _126) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_118);
        _118 = move ((_113 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_120);
        _120 = move _118;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _120) -> [return: bb45, unwind: bb127];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_118);
        _289 = discriminant(_113);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb109;
    }

    bb46: {
        StorageDead(_126);
        StorageDead(_125);
        _123 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as Try>::branch(move _124) -> [return: bb47, unwind: bb114];
    }

    bb47: {
        StorageDead(_124);
        _127 = discriminant(_123);
        switchInt(move _127) -> [0: bb48, 1: bb49, otherwise: bb11];
    }

    bb48: {
        StorageLive(_131);
        _131 = ((_123 as Continue).0: std::option::Option<&state::lending_market::ElevationGroup>);
        _122 = _131;
        StorageDead(_131);
        _257 = discriminant(_123);
        StorageDead(_123);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_2);
        StorageLive(_135);
        _135 = _122;
        _133 = get_max_ltv_and_liquidation_threshold(move _134, move _135) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_128);
        _128 = move ((_123 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _130) -> [return: bb50, unwind: bb126];
    }

    bb50: {
        StorageDead(_130);
        StorageDead(_128);
        _287 = discriminant(_123);
        StorageDead(_123);
        goto -> bb106;
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_132);
        _132 = (_133.1: u8);
        StorageDead(_133);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = _132;
        _137 = Eq(move _138, const 0_u8);
        switchInt(move _137) -> [0: bb58, otherwise: bb52];
    }

    bb52: {
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &(*_3);
        _141 = obligation::Obligation::check_not_marked_for_deleveraging(move _142) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_142);
        _140 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _141) -> [return: bb54, unwind: bb114];
    }

    bb54: {
        StorageDead(_141);
        _143 = discriminant(_140);
        switchInt(move _143) -> [0: bb55, 1: bb56, otherwise: bb11];
    }

    bb55: {
        StorageLive(_147);
        _147 = ((_140 as Continue).0: ());
        _139 = _147;
        StorageDead(_147);
        _259 = discriminant(_140);
        StorageDead(_140);
        StorageDead(_139);
        _136 = const ();
        goto -> bb59;
    }

    bb56: {
        StorageLive(_144);
        _144 = move ((_140 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_146);
        _146 = move _144;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _146) -> [return: bb57, unwind: bb125];
    }

    bb57: {
        StorageDead(_146);
        StorageDead(_144);
        _285 = discriminant(_140);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb105;
    }

    bb58: {
        StorageDead(_138);
        _136 = const ();
        goto -> bb59;
    }

    bb59: {
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &(*_3);
        _148 = obligation::Obligation::active_deposits_count(move _149) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &(*_3);
        _150 = obligation::Obligation::get_borrowed_amount_if_single_token(move _151) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &((*_2).9: state::reserve::ReserveConfig);
        _152 = reserve::ReserveConfig::get_asset_tier(move _153) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_153);
        StorageLive(_154);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &mut (*_3);
        StorageLive(_161);
        _161 = _6;
        StorageLive(_162);
        _162 = move _152;
        _159 = obligation::Obligation::find_or_add_collateral_to_deposits(move _160, move _161, move _162) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        _158 = <std::result::Result<(&mut obligation::ObligationCollateral, bool), anchor_lang::error::Error> as Try>::branch(move _159) -> [return: bb64, unwind: bb114];
    }

    bb64: {
        StorageDead(_159);
        _163 = discriminant(_158);
        switchInt(move _163) -> [0: bb65, 1: bb66, otherwise: bb11];
    }

    bb65: {
        StorageLive(_167);
        _167 = move ((_158 as Continue).0: (&mut state::obligation::ObligationCollateral, bool));
        _157 = move _167;
        StorageDead(_167);
        StorageLive(_155);
        _155 = move (_157.0: &mut state::obligation::ObligationCollateral);
        StorageLive(_156);
        _156 = (_157.1: bool);
        _261 = discriminant(_158);
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_168);
        StorageLive(_169);
        _169 = _156;
        switchInt(move _169) -> [0: bb74, otherwise: bb68];
    }

    bb66: {
        StorageLive(_164);
        _164 = move ((_158 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_166);
        _166 = move _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _166) -> [return: bb67, unwind: bb124];
    }

    bb67: {
        StorageDead(_166);
        StorageDead(_164);
        _283 = discriminant(_158);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb104;
    }

    bb68: {
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _150;
        StorageLive(_174);
        _174 = &mut (*_155);
        StorageLive(_175);
        _175 = _148;
        StorageLive(_176);
        _176 = _122;
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_6;
        _177 = &(*_178);
        StorageLive(_179);
        _179 = &mut (*_2);
        StorageLive(_180);
        _180 = move _7;
        _172 = update_elevation_group_debt_trackers_on_new_deposit(move _173, move _174, move _175, move _176, move _177, move _179, move _180) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_173);
        _171 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _172) -> [return: bb70, unwind: bb114];
    }

    bb70: {
        StorageDead(_172);
        _181 = discriminant(_171);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb11];
    }

    bb71: {
        StorageLive(_185);
        _185 = ((_171 as Continue).0: ());
        _170 = _185;
        StorageDead(_185);
        _263 = discriminant(_171);
        StorageDead(_178);
        StorageDead(_171);
        StorageDead(_170);
        _168 = const ();
        goto -> bb75;
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_171 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb123];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _281 = discriminant(_171);
        StorageDead(_178);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb103;
    }

    bb74: {
        _168 = const ();
        goto -> bb75;
    }

    bb75: {
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &mut (*_155);
        StorageLive(_190);
        _190 = _5;
        _188 = obligation::ObligationCollateral::deposit(move _189, move _190) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_190);
        StorageDead(_189);
        _187 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb77, unwind: bb114];
    }

    bb77: {
        StorageDead(_188);
        _191 = discriminant(_187);
        switchInt(move _191) -> [0: bb78, 1: bb79, otherwise: bb11];
    }

    bb78: {
        StorageLive(_195);
        _195 = ((_187 as Continue).0: ());
        _186 = _195;
        StorageDead(_195);
        _265 = discriminant(_187);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_196);
        _196 = ((*_155).2: u128);
        _154 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _196) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_192);
        _192 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_194);
        _194 = move _192;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _194) -> [return: bb80, unwind: bb122];
    }

    bb80: {
        StorageDead(_194);
        StorageDead(_192);
        _279 = discriminant(_187);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb103;
    }

    bb81: {
        StorageDead(_196);
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &mut (*_3);
        _199 = check_orders_supported_after_user_operation(move _200) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_200);
        _198 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _199) -> [return: bb83, unwind: bb114];
    }

    bb83: {
        StorageDead(_199);
        _201 = discriminant(_198);
        switchInt(move _201) -> [0: bb84, 1: bb85, otherwise: bb11];
    }

    bb84: {
        StorageLive(_205);
        _205 = ((_198 as Continue).0: ());
        _197 = _205;
        StorageDead(_205);
        _267 = discriminant(_198);
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &mut ((*_3).1: state::last_update::LastUpdate);
        _206 = last_update::LastUpdate::mark_stale(move _207) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_202);
        _202 = move ((_198 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_204);
        _204 = move _202;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _204) -> [return: bb86, unwind: bb121];
    }

    bb86: {
        StorageDead(_204);
        StorageDead(_202);
        _277 = discriminant(_198);
        StorageDead(_198);
        StorageDead(_197);
        goto -> bb104;
    }

    bb87: {
        StorageDead(_207);
        StorageDead(_206);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &mut ((*_2).1: state::last_update::LastUpdate);
        _208 = last_update::LastUpdate::mark_stale(move _209) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &(*_3);
        _212 = validate_obligation_asset_tiers(move _213) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_213);
        _211 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _212) -> [return: bb90, unwind: bb114];
    }

    bb90: {
        StorageDead(_212);
        _214 = discriminant(_211);
        switchInt(move _214) -> [0: bb91, 1: bb92, otherwise: bb11];
    }

    bb91: {
        StorageLive(_218);
        _218 = ((_211 as Continue).0: ());
        _210 = _218;
        StorageDead(_218);
        _269 = discriminant(_211);
        StorageDead(_211);
        StorageDead(_210);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &(*_2);
        _224 = reserve::Reserve::collateral_exchange_rate(move _225) -> [return: bb94, unwind continue];
    }

    bb92: {
        StorageLive(_215);
        _215 = move ((_211 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_217);
        _217 = move _215;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _217) -> [return: bb93, unwind: bb120];
    }

    bb93: {
        StorageDead(_217);
        StorageDead(_215);
        _275 = discriminant(_211);
        StorageDead(_211);
        StorageDead(_210);
        goto -> bb104;
    }

    bb94: {
        _223 = &_224;
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = _5;
        _226 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _227) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_227);
        _222 = reserve::CollateralExchangeRate::fraction_collateral_to_liquidity(move _223, move _226) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_226);
        StorageDead(_223);
        StorageLive(_228);
        _228 = &(*_3);
        StorageLive(_229);
        _229 = &(*_2);
        StorageLive(_230);
        _230 = _154;
        StorageLive(_231);
        StorageLive(_232);
        _232 = ((*_1).20: u128);
        _231 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _232) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_232);
        _221 = post_deposit_obligation_invariants(move _222, move _228, move _229, move _230, move _231) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_222);
        _220 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _221) -> [return: bb99, unwind: bb114];
    }

    bb99: {
        StorageDead(_221);
        _233 = discriminant(_220);
        switchInt(move _233) -> [0: bb100, 1: bb101, otherwise: bb11];
    }

    bb100: {
        StorageLive(_237);
        _237 = ((_220 as Continue).0: ());
        _219 = _237;
        StorageDead(_237);
        _271 = discriminant(_220);
        StorageDead(_224);
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_238);
        _238 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _238);
        StorageDead(_238);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_132);
        StorageDead(_122);
        goto -> bb109;
    }

    bb101: {
        StorageLive(_234);
        _234 = move ((_220 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_236);
        _236 = move _234;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _236) -> [return: bb102, unwind: bb119];
    }

    bb102: {
        StorageDead(_236);
        StorageDead(_234);
        _273 = discriminant(_220);
        StorageDead(_224);
        StorageDead(_220);
        StorageDead(_219);
        goto -> bb104;
    }

    bb103: {
        StorageDead(_156);
        StorageDead(_155);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_148);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_132);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_122);
        goto -> bb109;
    }

    bb107: {
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb109;
    }

    bb108: {
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb109;
    }

    bb109: {
        return;
    }

    bb110 (cleanup): {
        drop(_100) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_75) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_46) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_17) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        resume;
    }

    bb115: {
        _247 = discriminant(_31);
        StorageDead(_31);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const "Deposit reserve is stale and must be refreshed in the current slot";
        _42 = &(*_43);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb14, unwind continue];
    }

    bb116: {
        _249 = discriminant(_31);
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_3).1: state::last_update::LastUpdate);
        StorageLive(_63);
        _63 = _4;
        _61 = last_update::LastUpdate::is_stale(move _62, move _63, const _) -> [return: bb19, unwind continue];
    }

    bb117: {
        _251 = discriminant(_60);
        StorageDead(_60);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = const "Obligation is stale and must be refreshed in the current slot";
        _71 = &(*_72);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb24, unwind continue];
    }

    bb118: {
        _253 = discriminant(_60);
        StorageDead(_60);
        _58 = const ();
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = (((*_2).9: state::reserve::ReserveConfig).23: u8);
        _88 = Gt(move _89, const 0_u8);
        switchInt(move _88) -> [0: bb30, otherwise: bb29];
    }

    bb119 (cleanup): {
        _295 = discriminant(_220);
        goto -> bb114;
    }

    bb120 (cleanup): {
        _296 = discriminant(_211);
        goto -> bb114;
    }

    bb121 (cleanup): {
        _297 = discriminant(_198);
        goto -> bb114;
    }

    bb122 (cleanup): {
        _298 = discriminant(_187);
        goto -> bb114;
    }

    bb123 (cleanup): {
        _299 = discriminant(_171);
        goto -> bb114;
    }

    bb124 (cleanup): {
        _300 = discriminant(_158);
        goto -> bb114;
    }

    bb125 (cleanup): {
        _301 = discriminant(_140);
        goto -> bb114;
    }

    bb126 (cleanup): {
        _302 = discriminant(_123);
        goto -> bb114;
    }

    bb127 (cleanup): {
        _303 = discriminant(_113);
        goto -> bb114;
    }

    bb128 (cleanup): {
        _304 = discriminant(_60);
        goto -> bb114;
    }

    bb129 (cleanup): {
        _305 = discriminant(_31);
        goto -> bb114;
    }
}
