// MIR for `get_price_account` before PreCodegen

fn get_price_account(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error> {
    debug scope_price_account => _1;
    let mut _0: std::result::Result<std::cell::Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: !;
    let mut _8: anchor_lang::error::Error;
    let mut _9: LendingError;
    let _10: std::cell::Ref<'_, &mut [u8]>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _12: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _13: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _18: std::cell::Ref<'_, &mut [u8]>;
    let _20: &[u8];
    let mut _21: &[u8];
    let _22: &&mut [u8];
    let mut _23: &std::cell::Ref<'_, &mut [u8]>;
    let mut _24: std::ops::Range<usize>;
    let _25: ();
    let mut _26: bool;
    let mut _27: &&[u8];
    let mut _28: &[u8; 8];
    let _29: [u8; 8];
    let mut _30: !;
    let mut _31: anchor_lang::error::Error;
    let mut _32: LendingError;
    let mut _33: std::cell::Ref<'_, scope_types::OraclePrices>;
    let mut _34: std::cell::Ref<'_, &mut [u8]>;
    let mut _35: {closure@programs\klend\src\utils\prices\scope.rs:72:23: 72:29};
    let mut _36: &anchor_lang::prelude::Pubkey;
    let mut _37: &anchor_lang::prelude::Pubkey;
    let mut _38: &mut [u8];
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    scope 1 {
        debug data => _10;
        let _19: &[u8];
        scope 6 {
            debug disc_bytes => _19;
        }
    }
    scope 2 {
        debug residual => _15;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _18;
        scope 5 {
        }
    }

    bb0: {
        _39 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _37 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _4 = &(*_37);
        StorageLive(_5);
        _36 = const _;
        _5 = &(*_36);
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = LendingError::InvalidOracleConfig;
        _8 = <LendingError as Into<anchor_lang::error::Error>>::into(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _0 = std::result::Result::<Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error>::Err(move _8);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb20;
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_1);
        _12 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        _11 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _12) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_18);
        _18 = move ((_11 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _39 = const true;
        _10 = move _18;
        StorageDead(_18);
        _40 = discriminant(_11);
        StorageDead(_11);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_10;
        _22 = <Ref<'_, &mut [u8]> as Deref>::deref(move _23) -> [return: bb11, unwind: bb23];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_15);
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _17) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_15);
        _42 = discriminant(_11);
        StorageDead(_11);
        goto -> bb19;
    }

    bb11: {
        _38 = deref_copy (*_22);
        _21 = &(*_38);
        StorageDead(_23);
        StorageLive(_24);
        _24 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _20 = <[u8] as Index<std::ops::Range<usize>>>::index(move _21, move _24) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_21);
        _19 = &(*_20);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_19;
        StorageLive(_28);
        StorageLive(_29);
        _29 = <scope_types::OraclePrices as Discriminator>::discriminator() -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _28 = &_29;
        _26 = <&[u8] as PartialEq<[u8; 8]>>::ne(move _27, move _28) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        switchInt(move _26) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_31);
        StorageLive(_32);
        _32 = LendingError::CouldNotDeserializeScope;
        _31 = <LendingError as Into<anchor_lang::error::Error>>::into(move _32) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        StorageDead(_32);
        _0 = std::result::Result::<Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error>::Err(move _31);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        drop(_10) -> [return: bb19, unwind: bb21];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_33);
        StorageLive(_34);
        _39 = const false;
        _34 = move _10;
        StorageLive(_35);
        _35 = {closure@programs\klend\src\utils\prices\scope.rs:72:23: 72:29};
        _33 = Ref::<'_, &mut [u8]>::map::<scope_types::OraclePrices, {closure@programs\klend\src\utils\prices\scope.rs:72:23: 72:29}>(move _34, move _35) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_34);
        _0 = std::result::Result::<Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error>::Ok(move _33);
        StorageDead(_33);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        _39 = const false;
        StorageDead(_10);
        goto -> bb20;
    }

    bb19: {
        _39 = const false;
        StorageDead(_10);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_39) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        _44 = discriminant(_11);
        goto -> bb21;
    }
}
