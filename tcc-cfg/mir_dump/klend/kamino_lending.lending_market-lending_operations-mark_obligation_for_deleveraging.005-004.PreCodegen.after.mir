// MIR for `lending_operations::mark_obligation_for_deleveraging` after PreCodegen

fn lending_operations::mark_obligation_for_deleveraging(_1: &state::lending_market::LendingMarket, _2: &mut obligation::Obligation, _3: u8, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug lending_market => _1;
    debug obligation => _2;
    debug autodeleverage_target_ltv_pct => _3;
    debug timestamp => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: bool;
    let mut _7: u8;
    let mut _8: !;
    let _9: ();
    let mut _10: bool;
    let mut _11: &state::obligation::Obligation;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let _18: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 3];
    let _22: &[&str; 3];
    let _23: [&str; 3];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 2];
    let _26: &[core::fmt::rt::Argument<'_>; 2];
    let _27: [core::fmt::rt::Argument<'_>; 2];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &u64;
    let _30: &u64;
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &u8;
    let _33: &u8;
    let mut _34: &mut state::obligation::Obligation;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: ();
    let _39: ();
    let mut _40: bool;
    let mut _41: u8;
    let mut _42: !;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: &std::string::String;
    let _47: &std::string::String;
    let _48: std::string::String;
    let _49: std::string::String;
    let mut _50: std::fmt::Arguments<'_>;
    let mut _51: &[&str];
    let mut _52: &[&str; 1];
    let _53: &[&str; 1];
    let _54: [&str; 1];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let mut _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: [core::fmt::rt::Argument<'_>; 1];
    let mut _59: core::fmt::rt::Argument<'_>;
    let mut _60: &u8;
    let _61: &u8;
    let mut _62: anchor_lang::error::Error;
    let mut _63: anchor_lang::error::AnchorError;
    let mut _64: std::string::String;
    let mut _65: &LendingError;
    let _66: LendingError;
    let mut _67: u32;
    let mut _68: LendingError;
    let mut _69: std::string::String;
    let mut _70: &LendingError;
    let _71: LendingError;
    let mut _72: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _73: anchor_lang::error::ErrorOrigin;
    let mut _74: anchor_lang::error::Source;
    let mut _75: std::option::Option<anchor_lang::error::ComparedValues>;
    let _76: ();
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _78: std::result::Result<(), anchor_lang::error::Error>;
    let mut _79: &state::obligation::Obligation;
    let mut _80: isize;
    let _81: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _84: ();
    let _85: ();
    let mut _86: bool;
    let mut _87: u64;
    let mut _88: !;
    let _89: ();
    let mut _90: &str;
    let _91: &str;
    let mut _92: anchor_lang::error::Error;
    let mut _93: anchor_lang::error::AnchorError;
    let mut _94: std::string::String;
    let mut _95: &LendingError;
    let _96: LendingError;
    let mut _97: u32;
    let mut _98: LendingError;
    let mut _99: std::string::String;
    let mut _100: &LendingError;
    let _101: LendingError;
    let mut _102: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _103: anchor_lang::error::ErrorOrigin;
    let mut _104: anchor_lang::error::Source;
    let mut _105: std::option::Option<anchor_lang::error::ComparedValues>;
    let _106: ();
    let mut _107: &str;
    let _108: &str;
    let mut _109: &std::string::String;
    let _110: &std::string::String;
    let _111: std::string::String;
    let _112: std::string::String;
    let mut _113: std::fmt::Arguments<'_>;
    let mut _114: &[&str];
    let mut _115: &[&str; 2];
    let _116: &[&str; 2];
    let _117: [&str; 2];
    let mut _118: &[core::fmt::rt::Argument<'_>];
    let mut _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: &[core::fmt::rt::Argument<'_>; 1];
    let _121: [core::fmt::rt::Argument<'_>; 1];
    let mut _122: core::fmt::rt::Argument<'_>;
    let mut _123: &u8;
    let _124: &u8;
    let _125: ();
    let mut _126: &mut state::obligation::Obligation;
    let mut _127: u64;
    let mut _128: u8;
    let mut _129: ();
    let mut _130: &[&str; 3];
    let mut _131: &LendingError;
    let mut _132: &LendingError;
    let mut _133: &[&str; 1];
    let mut _134: &LendingError;
    let mut _135: &LendingError;
    let mut _136: &[&str; 2];
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    scope 1 {
        debug res => _18;
    }
    scope 2 {
        debug res => _49;
    }
    scope 3 {
        debug residual => _81;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _84;
        scope 6 {
        }
    }
    scope 7 {
        debug res => _112;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _3;
        _6 = Eq(move _7, const _);
        switchInt(move _6) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_2);
        _10 = obligation::Obligation::is_marked_for_deleveraging(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _10) -> [0: bb12, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _130 = const _;
        _22 = &(*_130);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &((*_2).24: u64);
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _29) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_2).19: u8);
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _32) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_32);
        _27 = [move _28, move _31];
        StorageDead(_31);
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <std::string::String as Deref>::deref(move _15) -> [return: bb8, unwind: bb53];
    }

    bb8: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        StorageDead(_13);
        drop(_17) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_34);
        _34 = &mut (*_2);
        _9 = obligation::Obligation::unmark_for_deleveraging(move _34) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_34);
        goto -> bb14;
    }

    bb12: {
        StorageDead(_11);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = const "No-op unmarking of not-currently-marked obligation";
        _36 = &(*_37);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_37);
        StorageDead(_35);
        _9 = const ();
        goto -> bb14;
    }

    bb14: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_38);
        _38 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb48;
    }

    bb15: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _3;
        _40 = Gt(move _41, const 100_u8);
        switchInt(move _40) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _133 = const _;
        _53 = &(*_133);
        _52 = &(*_53);
        _51 = move _52 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_3;
        _60 = &(*_61);
        _59 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _60) -> [return: bb18, unwind continue];
    }

    bb17: {
        StorageDead(_41);
        _39 = const ();
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &(*_2);
        _78 = obligation::Obligation::check_not_marked_for_deleveraging(move _79) -> [return: bb28, unwind continue];
    }

    bb18: {
        StorageDead(_60);
        _58 = [move _59];
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = move _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_56);
        _50 = Arguments::<'_>::new_v1(move _51, move _55) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_55);
        StorageDead(_51);
        _49 = format(move _50) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_50);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_53);
        _48 = move _49;
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = <std::string::String as Deref>::deref(move _46) -> [return: bb21, unwind: bb52];
    }

    bb21: {
        _44 = &(*_45);
        StorageDead(_46);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb22, unwind: bb52];
    }

    bb22: {
        StorageDead(_44);
        drop(_48) -> [return: bb23, unwind: bb54];
    }

    bb23: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _132 = const _;
        _65 = &(*_132);
        _64 = LendingError::name(move _65) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        _68 = LendingError::InvalidConfig;
        _67 = <LendingError as Into<u32>>::into(move _68) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _131 = const _;
        _70 = &(*_131);
        _69 = <LendingError as ToString>::to_string(move _70) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1835_u32 };
        _73 = anchor_lang::error::ErrorOrigin::Source(move _74);
        StorageDead(_74);
        _72 = std::option::Option::<ErrorOrigin>::Some(move _73);
        StorageDead(_73);
        StorageLive(_75);
        _75 = std::option::Option::<ComparedValues>::None;
        _63 = anchor_lang::error::AnchorError { error_name: move _64, error_code_number: move _67, error_msg: move _69, error_origin: move _72, compared_values: move _75 };
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_64);
        _62 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _63) -> [return: bb27, unwind: bb54];
    }

    bb27: {
        StorageDead(_63);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _62);
        StorageDead(_62);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb48;
    }

    bb28: {
        StorageDead(_79);
        _77 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _78) -> [return: bb29, unwind: bb54];
    }

    bb29: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb30, 1: bb32, otherwise: bb31];
    }

    bb30: {
        StorageLive(_84);
        _84 = ((_77 as Continue).0: ());
        _76 = _84;
        StorageDead(_84);
        _137 = discriminant(_77);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = ((*_1).24: u64);
        _86 = Eq(move _87, const 0_u64);
        switchInt(move _86) -> [0: bb40, otherwise: bb34];
    }

    bb31: {
        unreachable;
    }

    bb32: {
        StorageLive(_81);
        _81 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _83) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        StorageDead(_83);
        StorageDead(_81);
        _139 = discriminant(_77);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb48;
    }

    bb34: {
        StorageDead(_87);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = const "Lending market is missing the `individual_autodeleverage_margin_call_period_secs` configuration";
        _90 = &(*_91);
        _89 = solana_program::log::sol_log(move _90) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_90);
        StorageDead(_91);
        StorageDead(_89);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _135 = const _;
        _95 = &(*_135);
        _94 = LendingError::name(move _95) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_95);
        StorageLive(_97);
        StorageLive(_98);
        _98 = LendingError::InvalidConfig;
        _97 = <LendingError as Into<u32>>::into(move _98) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        StorageDead(_98);
        StorageLive(_99);
        StorageLive(_100);
        _134 = const _;
        _100 = &(*_134);
        _99 = <LendingError as ToString>::to_string(move _100) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        StorageDead(_100);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1847_u32 };
        _103 = anchor_lang::error::ErrorOrigin::Source(move _104);
        StorageDead(_104);
        _102 = std::option::Option::<ErrorOrigin>::Some(move _103);
        StorageDead(_103);
        StorageLive(_105);
        _105 = std::option::Option::<ComparedValues>::None;
        _93 = anchor_lang::error::AnchorError { error_name: move _94, error_code_number: move _97, error_msg: move _99, error_origin: move _102, compared_values: move _105 };
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_94);
        _92 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _93) -> [return: bb39, unwind: bb54];
    }

    bb39: {
        StorageDead(_93);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _92);
        StorageDead(_92);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb48;
    }

    bb40: {
        StorageDead(_87);
        _85 = const ();
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _136 = const _;
        _116 = &(*_136);
        _115 = &(*_116);
        _114 = move _115 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_115);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_3;
        _123 = &(*_124);
        _122 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _123) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_123);
        _121 = [move _122];
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = move _119 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_119);
        _113 = Arguments::<'_>::new_v1(move _114, move _118) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_118);
        StorageDead(_114);
        _112 = format(move _113) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_113);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_116);
        _111 = move _112;
        StorageDead(_112);
        _110 = &_111;
        _109 = &(*_110);
        _108 = <std::string::String as Deref>::deref(move _109) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        _107 = &(*_108);
        StorageDead(_109);
        _106 = solana_program::log::sol_log(move _107) -> [return: bb45, unwind: bb49];
    }

    bb45: {
        StorageDead(_107);
        drop(_111) -> [return: bb46, unwind: bb54];
    }

    bb46: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_106);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &mut (*_2);
        StorageLive(_127);
        _127 = _4;
        StorageLive(_128);
        _128 = _3;
        _125 = obligation::Obligation::mark_for_deleveraging(move _126, move _127, move _128) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_129);
        _129 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _129);
        StorageDead(_129);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_111) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_94) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_64) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_48) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_17) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        resume;
    }

    bb55 (cleanup): {
        _141 = discriminant(_77);
        goto -> bb54;
    }
}
