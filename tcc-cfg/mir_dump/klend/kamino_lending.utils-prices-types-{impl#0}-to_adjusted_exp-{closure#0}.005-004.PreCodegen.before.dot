digraph Mir_0_2648 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn prices::types::Price::&lt;T&gt;::to_adjusted_exp::{closure#0}(_1: Closure(DefId(0:2648 ~ kamino_lending[6389]::utils::prices::types::{impl#0}::to_adjusted_exp::{closure#0}), [T/#0, i32, Binder(extern &quot;RustCall&quot; fn((utils::fraction::uint_types::U256,)) -&gt; std::option::Option&lt;utils::prices::types::Price&lt;T/#0&gt;&gt;, []), (&amp;ReErased u32,)]), _2: utils::fraction::uint_types::U256) -&gt; std::option::Option&lt;utils::prices::types::Price&lt;T/#0&gt;&gt;<br align="left"/>let mut _3: utils::prices::types::Price&lt;T/#0&gt;;<br align="left"/>let mut _4: T/#0;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::option::Option&lt;std::convert::Infallible&gt;, T/#0&gt;;<br align="left"/>let mut _6: std::option::Option&lt;T/#0&gt;;<br align="left"/>let mut _7: std::result::Result&lt;T/#0, Alias(Projection, AliasTy { args: [T/#0, utils::fraction::uint_types::U256], def_id: DefId(2:2592 ~ core[c321]::convert::TryFrom::Error) })&gt;;<br align="left"/>let mut _8: utils::fraction::uint_types::U256;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let _13: T/#0;<br align="left"/>let mut _14: u32;<br align="left"/>let mut _15: &amp;ReErased u32;<br align="left"/>debug value =&gt; _2;<br align="left"/>debug target_exp =&gt; (*(_1.0: &amp;u32));<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>>;
    bb0__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _2<br/></td></tr><tr><td align="left">_7 = &lt;T as TryFrom&lt;uint_types::U256&gt;&gt;::try_from(move _8)</td></tr></table>>];
    bb1__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = std::result::Result::&lt;T, &lt;T as TryFrom&lt;uint_types::U256&gt;&gt;::Error&gt;::ok(move _7)</td></tr></table>>];
    bb2__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::option::Option&lt;T&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb3__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb4__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_5 as Continue).0: T)<br/>_4 = _13<br/>StorageDead(_13)<br/>StorageLive(_14)<br/>_15 = deref_copy (_1.0: &amp;u32)<br/>_14 = (*_15)<br/>_3 = prices::types::Price::&lt;T&gt; { value: move _4, exp: move _14 }<br/>StorageDead(_14)<br/>StorageDead(_4)<br/>_0 = std::option::Option::&lt;prices::types::Price&lt;T&gt;&gt;::Some(move _3)<br/>StorageDead(_3)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_5 as Break).0: std::option::Option&lt;std::convert::Infallible&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::option::Option&lt;prices::types::Price&lt;T&gt;&gt; as FromResidual&lt;std::option::Option&lt;Infallible&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb7__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_2648 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_2648 -> bb1__0_2648 [label="return"];
    bb1__0_2648 -> bb2__0_2648 [label="return"];
    bb1__0_2648 -> bb9__0_2648 [label="unwind"];
    bb2__0_2648 -> bb3__0_2648 [label="return"];
    bb3__0_2648 -> bb4__0_2648 [label="0"];
    bb3__0_2648 -> bb6__0_2648 [label="1"];
    bb3__0_2648 -> bb5__0_2648 [label="otherwise"];
    bb4__0_2648 -> bb8__0_2648 [label=""];
    bb6__0_2648 -> bb7__0_2648 [label="return"];
    bb7__0_2648 -> bb8__0_2648 [label=""];
}
