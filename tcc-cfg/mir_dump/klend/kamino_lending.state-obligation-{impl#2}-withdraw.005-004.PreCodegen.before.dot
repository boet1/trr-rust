digraph Mir_0_1662 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn obligation::Obligation::withdraw(_1: &amp;ReErased mut state::obligation::Obligation, _2: u64, _3: usize) -&gt; std::result::Result&lt;state::obligation::WithdrawResult, anchor_lang::error::Error&gt;<br align="left"/>let _4: &amp;ReErased mut state::obligation::ObligationCollateral;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: state::obligation::ObligationCollateral;<br align="left"/>let _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: bool;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: state::obligation::WithdrawResult;<br align="left"/>let _19: ();<br align="left"/>let mut _20: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _21: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _22: &amp;ReErased mut state::obligation::ObligationCollateral;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _28: ();<br align="left"/>let mut _29: state::obligation::WithdrawResult;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug withdraw_amount =&gt; _2;<br align="left"/>debug collateral_index =&gt; _3;<br align="left"/>debug collateral =&gt; _4;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>>;
    bb0__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _3<br/>_6 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]))<br/>_7 = Lt(_5, _6)<br/></td></tr><tr><td align="left">assert(move _7, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _6, _5)</td></tr></table>>];
    bb1__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = &amp;mut ((*_1).4: [state::obligation::ObligationCollateral; 8])[_5]<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _2<br/>StorageLive(_10)<br/>_10 = ((*_4).1: u64)<br/>_8 = Eq(move _9, move _10)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb2__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_11)<br/></td></tr><tr><td align="left">_11 = &lt;obligation::ObligationCollateral as Default&gt;::default()</td></tr></table>>];
    bb3__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = _3<br/>_13 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]))<br/>_14 = Lt(_12, _13)<br/></td></tr><tr><td align="left">assert(move _14, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _13, _12)</td></tr></table>>];
    bb4__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">((*_1).4: [state::obligation::ObligationCollateral; 8])[_12] = move _11<br/>StorageDead(_11)<br/>StorageDead(_12)<br/>StorageLive(_15)<br/>_15 = _3<br/>_16 = Len(((*_1).12: [u8; 8]))<br/>_17 = Lt(_15, _16)<br/></td></tr><tr><td align="left">assert(move _17, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _16, _15)</td></tr></table>>];
    bb5__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">((*_1).12: [u8; 8])[_15] = const _<br/>StorageDead(_15)<br/>StorageLive(_18)<br/>_18 = obligation::WithdrawResult::Full<br/>_0 = std::result::Result::&lt;obligation::WithdrawResult, anchor_lang::error::Error&gt;::Ok(move _18)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = &amp;mut (*_4)<br/>StorageLive(_23)<br/>_23 = _2<br/></td></tr><tr><td align="left">_21 = obligation::ObligationCollateral::withdraw(move _22, move _23)</td></tr></table>>];
    bb7__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _21)</td></tr></table>>];
    bb8__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_24 = discriminant(_20)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb9__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_20 as Continue).0: ())<br/>_19 = _28<br/>StorageDead(_28)<br/>_30 = discriminant(_20)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_29)<br/>_29 = obligation::WithdrawResult::Partial<br/>_0 = std::result::Result::&lt;obligation::WithdrawResult, anchor_lang::error::Error&gt;::Ok(move _29)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = move ((_20 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_27)<br/>_27 = move _25<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;obligation::WithdrawResult, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb12__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>_32 = discriminant(_20)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">return</td></tr></table>>];
    bb15__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb16__0_1662 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left" balign="left">_34 = discriminant(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1662 -> bb1__0_1662 [label="success"];
    bb1__0_1662 -> bb6__0_1662 [label="0"];
    bb1__0_1662 -> bb2__0_1662 [label="otherwise"];
    bb2__0_1662 -> bb3__0_1662 [label="return"];
    bb3__0_1662 -> bb4__0_1662 [label="success"];
    bb4__0_1662 -> bb5__0_1662 [label="success"];
    bb5__0_1662 -> bb13__0_1662 [label=""];
    bb6__0_1662 -> bb7__0_1662 [label="return"];
    bb7__0_1662 -> bb8__0_1662 [label="return"];
    bb7__0_1662 -> bb15__0_1662 [label="unwind"];
    bb8__0_1662 -> bb9__0_1662 [label="0"];
    bb8__0_1662 -> bb11__0_1662 [label="1"];
    bb8__0_1662 -> bb10__0_1662 [label="otherwise"];
    bb9__0_1662 -> bb13__0_1662 [label=""];
    bb11__0_1662 -> bb12__0_1662 [label="return"];
    bb11__0_1662 -> bb16__0_1662 [label="unwind"];
    bb12__0_1662 -> bb14__0_1662 [label=""];
    bb13__0_1662 -> bb14__0_1662 [label=""];
    bb16__0_1662 -> bb15__0_1662 [label=""];
}
