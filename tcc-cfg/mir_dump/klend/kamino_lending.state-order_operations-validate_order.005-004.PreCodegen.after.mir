// MIR for `validate_order` after PreCodegen

fn validate_order(_1: obligation::ObligationOrder) -> std::result::Result<(), anchor_lang::error::Error> {
    debug order => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::result::Result<state::order_operations::ConditionType, num_enum::TryFromPrimitiveError<state::order_operations::ConditionType>>;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: isize;
    let mut _7: bool;
    let mut _8: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let _9: std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _10: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _11: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: &state::obligation::ObligationOrder;
    let mut _14: !;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &std::string::String;
    let _20: std::string::String;
    let _21: std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 4];
    let _25: &[&str; 4];
    let _26: [&str; 4];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let mut _28: &[core::fmt::rt::Argument<'_>; 3];
    let _29: &[core::fmt::rt::Argument<'_>; 3];
    let _30: [core::fmt::rt::Argument<'_>; 3];
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _33: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _34: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _35: &state::obligation::ObligationOrder;
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _38: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _39: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _40: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let _41: std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _44: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _45: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _46: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let _47: std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _48: anchor_lang::error::Error;
    let mut _49: anchor_lang::error::AnchorError;
    let mut _50: std::string::String;
    let mut _51: &LendingError;
    let _52: LendingError;
    let mut _53: u32;
    let mut _54: LendingError;
    let mut _55: std::string::String;
    let mut _56: &LendingError;
    let _57: LendingError;
    let mut _58: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _59: anchor_lang::error::ErrorOrigin;
    let mut _60: anchor_lang::error::Source;
    let mut _61: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _62: bool;
    let mut _63: &std::ops::Range<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let _64: std::ops::Range<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _65: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _66: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _67: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _68: &state::obligation::ObligationOrder;
    let mut _69: !;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: &std::string::String;
    let _74: &std::string::String;
    let _75: std::string::String;
    let _76: std::string::String;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[&str; 4];
    let _80: &[&str; 4];
    let _81: [&str; 4];
    let mut _82: &[core::fmt::rt::Argument<'_>];
    let mut _83: &[core::fmt::rt::Argument<'_>; 3];
    let _84: &[core::fmt::rt::Argument<'_>; 3];
    let _85: [core::fmt::rt::Argument<'_>; 3];
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _88: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _89: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _90: &state::obligation::ObligationOrder;
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _93: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _94: std::ops::Range<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _95: core::fmt::rt::Argument<'_>;
    let mut _96: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _97: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _98: std::ops::Range<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _99: anchor_lang::error::Error;
    let mut _100: anchor_lang::error::AnchorError;
    let mut _101: std::string::String;
    let mut _102: &LendingError;
    let _103: LendingError;
    let mut _104: u32;
    let mut _105: LendingError;
    let mut _106: std::string::String;
    let mut _107: &LendingError;
    let _108: LendingError;
    let mut _109: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _110: anchor_lang::error::ErrorOrigin;
    let mut _111: anchor_lang::error::Source;
    let mut _112: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _113: !;
    let _114: ();
    let mut _115: bool;
    let mut _116: &state::obligation::ObligationOrder;
    let mut _117: &state::obligation::ObligationOrder;
    let _118: state::obligation::ObligationOrder;
    let mut _119: !;
    let _120: ();
    let mut _121: &str;
    let _122: &str;
    let mut _123: &std::string::String;
    let _124: &std::string::String;
    let _125: std::string::String;
    let _126: std::string::String;
    let mut _127: std::fmt::Arguments<'_>;
    let mut _128: &[&str];
    let mut _129: &[&str; 1];
    let _130: &[&str; 1];
    let _131: [&str; 1];
    let mut _132: &[core::fmt::rt::Argument<'_>];
    let mut _133: &[core::fmt::rt::Argument<'_>; 1];
    let _134: &[core::fmt::rt::Argument<'_>; 1];
    let _135: [core::fmt::rt::Argument<'_>; 1];
    let mut _136: core::fmt::rt::Argument<'_>;
    let mut _137: &state::obligation::ObligationOrder;
    let _138: &state::obligation::ObligationOrder;
    let mut _139: anchor_lang::error::Error;
    let mut _140: anchor_lang::error::AnchorError;
    let mut _141: std::string::String;
    let mut _142: &LendingError;
    let _143: LendingError;
    let mut _144: u32;
    let mut _145: LendingError;
    let mut _146: std::string::String;
    let mut _147: &LendingError;
    let _148: LendingError;
    let mut _149: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _150: anchor_lang::error::ErrorOrigin;
    let mut _151: anchor_lang::error::Source;
    let mut _152: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _153: ();
    let _154: num_enum::TryFromPrimitiveError<state::order_operations::ConditionType>;
    let mut _155: !;
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 2];
    let _166: &[&str; 2];
    let _167: [&str; 2];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 2];
    let _170: &[core::fmt::rt::Argument<'_>; 2];
    let _171: [core::fmt::rt::Argument<'_>; 2];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &u8;
    let _174: &u8;
    let mut _175: core::fmt::rt::Argument<'_>;
    let mut _176: &num_enum::TryFromPrimitiveError<state::order_operations::ConditionType>;
    let _177: &num_enum::TryFromPrimitiveError<state::order_operations::ConditionType>;
    let mut _178: anchor_lang::error::Error;
    let mut _179: anchor_lang::error::AnchorError;
    let mut _180: std::string::String;
    let mut _181: &LendingError;
    let _182: LendingError;
    let mut _183: u32;
    let mut _184: LendingError;
    let mut _185: std::string::String;
    let mut _186: &LendingError;
    let _187: LendingError;
    let mut _188: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _189: anchor_lang::error::ErrorOrigin;
    let mut _190: anchor_lang::error::Source;
    let mut _191: std::option::Option<anchor_lang::error::ComparedValues>;
    let _192: ();
    let mut _193: std::result::Result<state::order_operations::OpportunityType, num_enum::TryFromPrimitiveError<state::order_operations::OpportunityType>>;
    let mut _194: u8;
    let mut _195: u8;
    let mut _196: isize;
    let _197: ();
    let mut _198: bool;
    let mut _199: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _200: &state::obligation::ObligationOrder;
    let mut _201: !;
    let _202: ();
    let mut _203: &str;
    let _204: &str;
    let mut _205: anchor_lang::error::Error;
    let mut _206: anchor_lang::error::AnchorError;
    let mut _207: std::string::String;
    let mut _208: &LendingError;
    let _209: LendingError;
    let mut _210: u32;
    let mut _211: LendingError;
    let mut _212: std::string::String;
    let mut _213: &LendingError;
    let _214: LendingError;
    let mut _215: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _216: anchor_lang::error::ErrorOrigin;
    let mut _217: anchor_lang::error::Source;
    let mut _218: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _219: bool;
    let mut _220: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _221: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _222: &state::obligation::ObligationOrder;
    let mut _223: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _224: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _225: !;
    let _226: ();
    let mut _227: &str;
    let _228: &str;
    let mut _229: anchor_lang::error::Error;
    let mut _230: anchor_lang::error::AnchorError;
    let mut _231: std::string::String;
    let mut _232: &LendingError;
    let _233: LendingError;
    let mut _234: u32;
    let mut _235: LendingError;
    let mut _236: std::string::String;
    let mut _237: &LendingError;
    let _238: LendingError;
    let mut _239: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _240: anchor_lang::error::ErrorOrigin;
    let mut _241: anchor_lang::error::Source;
    let mut _242: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _243: bool;
    let mut _244: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _245: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _246: &state::obligation::ObligationOrder;
    let mut _247: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _248: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _249: !;
    let _250: ();
    let mut _251: &str;
    let _252: &str;
    let mut _253: anchor_lang::error::Error;
    let mut _254: anchor_lang::error::AnchorError;
    let mut _255: std::string::String;
    let mut _256: &LendingError;
    let _257: LendingError;
    let mut _258: u32;
    let mut _259: LendingError;
    let mut _260: std::string::String;
    let mut _261: &LendingError;
    let _262: LendingError;
    let mut _263: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _264: anchor_lang::error::ErrorOrigin;
    let mut _265: anchor_lang::error::Source;
    let mut _266: std::option::Option<anchor_lang::error::ComparedValues>;
    let _267: num_enum::TryFromPrimitiveError<state::order_operations::OpportunityType>;
    let mut _268: !;
    let _269: ();
    let mut _270: &str;
    let _271: &str;
    let mut _272: &std::string::String;
    let _273: &std::string::String;
    let _274: std::string::String;
    let mut _276: std::fmt::Arguments<'_>;
    let mut _277: &[&str];
    let mut _278: &[&str; 2];
    let _279: &[&str; 2];
    let _280: [&str; 2];
    let mut _281: &[core::fmt::rt::Argument<'_>];
    let mut _282: &[core::fmt::rt::Argument<'_>; 2];
    let _283: &[core::fmt::rt::Argument<'_>; 2];
    let _284: [core::fmt::rt::Argument<'_>; 2];
    let mut _285: core::fmt::rt::Argument<'_>;
    let mut _286: &u8;
    let _287: &u8;
    let mut _288: core::fmt::rt::Argument<'_>;
    let mut _289: &num_enum::TryFromPrimitiveError<state::order_operations::OpportunityType>;
    let _290: &num_enum::TryFromPrimitiveError<state::order_operations::OpportunityType>;
    let mut _291: anchor_lang::error::Error;
    let mut _292: anchor_lang::error::AnchorError;
    let mut _293: std::string::String;
    let mut _294: &LendingError;
    let _295: LendingError;
    let mut _296: u32;
    let mut _297: LendingError;
    let mut _298: std::string::String;
    let mut _299: &LendingError;
    let _300: LendingError;
    let mut _301: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _302: anchor_lang::error::ErrorOrigin;
    let mut _303: anchor_lang::error::Source;
    let mut _304: std::option::Option<anchor_lang::error::ComparedValues>;
    let _305: std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _306: &state::obligation::ObligationOrder;
    let _307: ();
    let mut _308: bool;
    let mut _309: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _310: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _311: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _312: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _313: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _314: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _315: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _316: !;
    let _317: ();
    let mut _318: &str;
    let _319: &str;
    let mut _320: &std::string::String;
    let _321: &std::string::String;
    let _322: std::string::String;
    let mut _324: std::fmt::Arguments<'_>;
    let mut _325: &[&str];
    let mut _326: &[&str; 2];
    let _327: &[&str; 2];
    let _328: [&str; 2];
    let mut _329: &[core::fmt::rt::Argument<'_>];
    let mut _330: &[core::fmt::rt::Argument<'_>; 2];
    let _331: &[core::fmt::rt::Argument<'_>; 2];
    let _332: [core::fmt::rt::Argument<'_>; 2];
    let mut _333: core::fmt::rt::Argument<'_>;
    let mut _334: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _335: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _336: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _337: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _338: core::fmt::rt::Argument<'_>;
    let mut _339: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _340: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _341: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _342: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _343: anchor_lang::error::Error;
    let mut _344: anchor_lang::error::AnchorError;
    let mut _345: std::string::String;
    let mut _346: &LendingError;
    let _347: LendingError;
    let mut _348: u32;
    let mut _349: LendingError;
    let mut _350: std::string::String;
    let mut _351: &LendingError;
    let _352: LendingError;
    let mut _353: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _354: anchor_lang::error::ErrorOrigin;
    let mut _355: anchor_lang::error::Source;
    let mut _356: std::option::Option<anchor_lang::error::ComparedValues>;
    let _357: ();
    let mut _358: bool;
    let mut _359: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _360: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _361: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _362: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _363: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _364: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _365: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _366: !;
    let _367: ();
    let mut _368: &str;
    let _369: &str;
    let mut _370: &std::string::String;
    let _371: &std::string::String;
    let _372: std::string::String;
    let mut _374: std::fmt::Arguments<'_>;
    let mut _375: &[&str];
    let mut _376: &[&str; 2];
    let _377: &[&str; 2];
    let _378: [&str; 2];
    let mut _379: &[core::fmt::rt::Argument<'_>];
    let mut _380: &[core::fmt::rt::Argument<'_>; 2];
    let _381: &[core::fmt::rt::Argument<'_>; 2];
    let _382: [core::fmt::rt::Argument<'_>; 2];
    let mut _383: core::fmt::rt::Argument<'_>;
    let mut _384: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _385: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _386: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _387: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _388: core::fmt::rt::Argument<'_>;
    let mut _389: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _390: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _391: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _392: anchor_lang::error::Error;
    let mut _393: anchor_lang::error::AnchorError;
    let mut _394: std::string::String;
    let mut _395: &LendingError;
    let _396: LendingError;
    let mut _397: u32;
    let mut _398: LendingError;
    let mut _399: std::string::String;
    let mut _400: &LendingError;
    let _401: LendingError;
    let mut _402: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _403: anchor_lang::error::ErrorOrigin;
    let mut _404: anchor_lang::error::Source;
    let mut _405: std::option::Option<anchor_lang::error::ComparedValues>;
    let _406: ();
    let mut _407: bool;
    let mut _408: &[u8];
    let mut _409: &[u8; 10];
    let _410: &[u8; 10];
    let mut _411: bool;
    let mut _412: &[u128];
    let mut _413: &[u128; 5];
    let _414: &[u128; 5];
    let mut _415: !;
    let _416: ();
    let mut _417: &str;
    let _418: &str;
    let mut _419: anchor_lang::error::Error;
    let mut _420: anchor_lang::error::AnchorError;
    let mut _421: std::string::String;
    let mut _422: &LendingError;
    let _423: LendingError;
    let mut _424: u32;
    let mut _425: LendingError;
    let mut _426: std::string::String;
    let mut _427: &LendingError;
    let _428: LendingError;
    let mut _429: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _430: anchor_lang::error::ErrorOrigin;
    let mut _431: anchor_lang::error::Source;
    let mut _432: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _433: ();
    let mut _437: &LendingError;
    let mut _438: &LendingError;
    let mut _439: &[&str; 1];
    let mut _443: &LendingError;
    let mut _444: &LendingError;
    let mut _455: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _456: &LendingError;
    let mut _457: &LendingError;
    let mut _458: &LendingError;
    let mut _459: &LendingError;
    let mut _460: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _461: &LendingError;
    let mut _462: &LendingError;
    let mut _463: &std::ops::Range<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _464: &std::ops::Range<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _465: &[&str; 4];
    let mut _466: &std::ops::Range<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _467: &LendingError;
    let mut _468: &LendingError;
    let mut _469: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _470: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _471: &[&str; 4];
    let mut _472: &std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    scope 1 {
        debug res => _21;
    }
    scope 2 {
        debug res => _76;
    }
    scope 3 {
        debug res => _126;
    }
    scope 4 {
        debug error => _154;
        let _162: std::string::String;
        let mut _434: &LendingError;
        let mut _435: &LendingError;
        let mut _436: &[&str; 2];
        scope 5 {
            debug res => _162;
        }
    }
    scope 6 {
        debug error => _267;
        let _275: std::string::String;
        let mut _440: &LendingError;
        let mut _441: &LendingError;
        let mut _442: &[&str; 2];
        scope 7 {
            debug res => _275;
        }
    }
    scope 8 {
        debug execution_bonus_rate_range => _305;
        let _323: std::string::String;
        let _373: std::string::String;
        let mut _445: &LendingError;
        let mut _446: &LendingError;
        let mut _447: &[&str; 2];
        let mut _448: &LendingError;
        let mut _449: &LendingError;
        let mut _450: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        let mut _451: &[&str; 2];
        let mut _452: &LendingError;
        let mut _453: &LendingError;
        let mut _454: &&fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 9 {
            debug res => _323;
        }
        scope 10 {
            debug res => _373;
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = (_1.4: u8);
        _3 = <ConditionType as TryFrom<u8>>::try_from(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _5 = discriminant(((_3 as Ok).0: state::order_operations::ConditionType));
        switchInt(move _5) -> [0: bb43, 1: bb25, 2: bb25, 3: bb5, 4: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_154);
        _154 = ((_3 as Err).0: num_enum::TryFromPrimitiveError<state::order_operations::ConditionType>);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _436 = const _;
        _166 = &(*_436);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &(_1.4: u8);
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _173) -> [return: bb58, unwind continue];
    }

    bb5: {
        StorageLive(_7);
        StorageLive(_8);
        _472 = const _;
        _8 = &(*_472);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_1;
        _12 = obligation::ObligationOrder::condition_threshold(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _7 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::contains::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _8, move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _7) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_12);
        StorageDead(_11);
        _2 = const ();
        StorageDead(_7);
        goto -> bb69;
    }

    bb9: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _471 = const _;
        _25 = &(*_471);
        _24 = &(*_25);
        _23 = move _24 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_1;
        _34 = obligation::ObligationOrder::condition_threshold(move _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _470 = const _;
        _40 = &(*_470);
        _39 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::start(move _40) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = core::fmt::rt::Argument::<'_>::new_display::<&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_37);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _469 = const _;
        _46 = &(*_469);
        _45 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::end(move _46) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _43) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_43);
        _30 = [move _31, move _36, move _42];
        StorageDead(_42);
        StorageDead(_36);
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = move _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_28);
        _22 = Arguments::<'_>::new_v1(move _23, move _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_23);
        _21 = format(move _22) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_22);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        _20 = move _21;
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = <std::string::String as Deref>::deref(move _18) -> [return: bb18, unwind: bb181];
    }

    bb18: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb19, unwind: bb181];
    }

    bb19: {
        StorageDead(_16);
        drop(_20) -> [return: bb20, unwind: bb182];
    }

    bb20: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _468 = const _;
        _51 = &(*_468);
        _50 = LendingError::name(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        _54 = LendingError::InvalidOrderConfiguration;
        _53 = <LendingError as Into<u32>>::into(move _54) -> [return: bb22, unwind: bb180];
    }

    bb22: {
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        _467 = const _;
        _56 = &(*_467);
        _55 = <LendingError as ToString>::to_string(move _56) -> [return: bb23, unwind: bb180];
    }

    bb23: {
        StorageDead(_56);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 208_u32 };
        _59 = anchor_lang::error::ErrorOrigin::Source(move _60);
        StorageDead(_60);
        _58 = std::option::Option::<ErrorOrigin>::Some(move _59);
        StorageDead(_59);
        StorageLive(_61);
        _61 = std::option::Option::<ComparedValues>::None;
        _49 = anchor_lang::error::AnchorError { error_name: move _50, error_code_number: move _53, error_msg: move _55, error_origin: move _58, compared_values: move _61 };
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_50);
        _48 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _49) -> [return: bb24, unwind: bb182];
    }

    bb24: {
        StorageDead(_49);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _48);
        StorageDead(_48);
        StorageDead(_7);
        goto -> bb162;
    }

    bb25: {
        StorageLive(_62);
        StorageLive(_63);
        _466 = const _;
        _63 = &(*_466);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_1;
        _67 = obligation::ObligationOrder::condition_threshold(move _68) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        _62 = std::ops::Range::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::contains::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _63, move _65) -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _62) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_67);
        StorageDead(_66);
        _2 = const ();
        StorageDead(_62);
        goto -> bb69;
    }

    bb29: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _465 = const _;
        _80 = &(*_465);
        _79 = &(*_80);
        _78 = move _79 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_79);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_1;
        _89 = obligation::ObligationOrder::condition_threshold(move _90) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _87) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_87);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _464 = const _;
        _93 = &((*_464).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _92) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _463 = const _;
        _97 = &((*_463).1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _96 = &(*_97);
        _95 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _96) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_96);
        _85 = [move _86, move _91, move _95];
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = move _83 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_83);
        _77 = Arguments::<'_>::new_v1(move _78, move _82) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_82);
        StorageDead(_78);
        _76 = format(move _77) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_77);
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_80);
        _75 = move _76;
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = <std::string::String as Deref>::deref(move _73) -> [return: bb36, unwind: bb179];
    }

    bb36: {
        _71 = &(*_72);
        StorageDead(_73);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb37, unwind: bb179];
    }

    bb37: {
        StorageDead(_71);
        drop(_75) -> [return: bb38, unwind: bb182];
    }

    bb38: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _462 = const _;
        _102 = &(*_462);
        _101 = LendingError::name(move _102) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_102);
        StorageLive(_104);
        StorageLive(_105);
        _105 = LendingError::InvalidOrderConfiguration;
        _104 = <LendingError as Into<u32>>::into(move _105) -> [return: bb40, unwind: bb178];
    }

    bb40: {
        StorageDead(_105);
        StorageLive(_106);
        StorageLive(_107);
        _461 = const _;
        _107 = &(*_461);
        _106 = <LendingError as ToString>::to_string(move _107) -> [return: bb41, unwind: bb178];
    }

    bb41: {
        StorageDead(_107);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 219_u32 };
        _110 = anchor_lang::error::ErrorOrigin::Source(move _111);
        StorageDead(_111);
        _109 = std::option::Option::<ErrorOrigin>::Some(move _110);
        StorageDead(_110);
        StorageLive(_112);
        _112 = std::option::Option::<ComparedValues>::None;
        _100 = anchor_lang::error::AnchorError { error_name: move _101, error_code_number: move _104, error_msg: move _106, error_origin: move _109, compared_values: move _112 };
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_101);
        _99 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _100) -> [return: bb42, unwind: bb182];
    }

    bb42: {
        StorageDead(_100);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _99);
        StorageDead(_99);
        StorageDead(_62);
        goto -> bb162;
    }

    bb43: {
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_1;
        StorageLive(_117);
        StorageLive(_118);
        _118 = <obligation::ObligationOrder as Default>::default() -> [return: bb44, unwind continue];
    }

    bb44: {
        _117 = &_118;
        _115 = <obligation::ObligationOrder as PartialEq>::ne(move _116, move _117) -> [return: bb45, unwind continue];
    }

    bb45: {
        switchInt(move _115) -> [0: bb57, otherwise: bb46];
    }

    bb46: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _439 = const _;
        _130 = &(*_439);
        _129 = &(*_130);
        _128 = move _129 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_129);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_1;
        _137 = &(*_138);
        _136 = core::fmt::rt::Argument::<'_>::new_debug::<obligation::ObligationOrder>(move _137) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_137);
        _135 = [move _136];
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = move _133 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_133);
        _127 = Arguments::<'_>::new_v1(move _128, move _132) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_132);
        StorageDead(_128);
        _126 = format(move _127) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_127);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_130);
        _125 = move _126;
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = <std::string::String as Deref>::deref(move _123) -> [return: bb50, unwind: bb177];
    }

    bb50: {
        _121 = &(*_122);
        StorageDead(_123);
        _120 = solana_program::log::sol_log(move _121) -> [return: bb51, unwind: bb177];
    }

    bb51: {
        StorageDead(_121);
        drop(_125) -> [return: bb52, unwind: bb182];
    }

    bb52: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_120);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _438 = const _;
        _142 = &(*_438);
        _141 = LendingError::name(move _142) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_142);
        StorageLive(_144);
        StorageLive(_145);
        _145 = LendingError::InvalidOrderConfiguration;
        _144 = <LendingError as Into<u32>>::into(move _145) -> [return: bb54, unwind: bb176];
    }

    bb54: {
        StorageDead(_145);
        StorageLive(_146);
        StorageLive(_147);
        _437 = const _;
        _147 = &(*_437);
        _146 = <LendingError as ToString>::to_string(move _147) -> [return: bb55, unwind: bb176];
    }

    bb55: {
        StorageDead(_147);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 225_u32 };
        _150 = anchor_lang::error::ErrorOrigin::Source(move _151);
        StorageDead(_151);
        _149 = std::option::Option::<ErrorOrigin>::Some(move _150);
        StorageDead(_150);
        StorageLive(_152);
        _152 = std::option::Option::<ComparedValues>::None;
        _140 = anchor_lang::error::AnchorError { error_name: move _141, error_code_number: move _144, error_msg: move _146, error_origin: move _149, compared_values: move _152 };
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_141);
        _139 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _140) -> [return: bb56, unwind: bb182];
    }

    bb56: {
        StorageDead(_140);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _139);
        StorageDead(_139);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb162;
    }

    bb57: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        _114 = const ();
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_153);
        _153 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _153);
        StorageDead(_153);
        goto -> bb162;
    }

    bb58: {
        StorageDead(_173);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_154;
        _176 = &(*_177);
        _175 = core::fmt::rt::Argument::<'_>::new_debug::<TryFromPrimitiveError<ConditionType>>(move _176) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_176);
        _171 = [move _172, move _175];
        StorageDead(_175);
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_163);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <std::string::String as Deref>::deref(move _159) -> [return: bb62, unwind: bb175];
    }

    bb62: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb63, unwind: bb175];
    }

    bb63: {
        StorageDead(_157);
        drop(_161) -> [return: bb64, unwind: bb182];
    }

    bb64: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _435 = const _;
        _181 = &(*_435);
        _180 = LendingError::name(move _181) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_181);
        StorageLive(_183);
        StorageLive(_184);
        _184 = LendingError::InvalidOrderConfiguration;
        _183 = <LendingError as Into<u32>>::into(move _184) -> [return: bb66, unwind: bb174];
    }

    bb66: {
        StorageDead(_184);
        StorageLive(_185);
        StorageLive(_186);
        _434 = const _;
        _186 = &(*_434);
        _185 = <LendingError as ToString>::to_string(move _186) -> [return: bb67, unwind: bb174];
    }

    bb67: {
        StorageDead(_186);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 236_u32 };
        _189 = anchor_lang::error::ErrorOrigin::Source(move _190);
        StorageDead(_190);
        _188 = std::option::Option::<ErrorOrigin>::Some(move _189);
        StorageDead(_189);
        StorageLive(_191);
        _191 = std::option::Option::<ComparedValues>::None;
        _179 = anchor_lang::error::AnchorError { error_name: move _180, error_code_number: move _183, error_msg: move _185, error_origin: move _188, compared_values: move _191 };
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_180);
        _178 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _179) -> [return: bb68, unwind: bb182];
    }

    bb68: {
        StorageDead(_179);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _178);
        StorageDead(_178);
        StorageDead(_154);
        goto -> bb162;
    }

    bb69: {
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = (_1.5: u8);
        _193 = <OpportunityType as TryFrom<u8>>::try_from(move _194) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_194);
        _196 = discriminant(_193);
        switchInt(move _196) -> [0: bb71, 1: bb72, otherwise: bb3];
    }

    bb71: {
        _195 = discriminant(((_193 as Ok).0: state::order_operations::OpportunityType));
        switchInt(move _195) -> [0: bb73, 1: bb92, otherwise: bb3];
    }

    bb72: {
        StorageLive(_267);
        _267 = ((_193 as Err).0: num_enum::TryFromPrimitiveError<state::order_operations::OpportunityType>);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _442 = const _;
        _279 = &(*_442);
        _278 = &(*_279);
        _277 = move _278 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_278);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &(_1.5: u8);
        _286 = &(*_287);
        _285 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _286) -> [return: bb102, unwind continue];
    }

    bb73: {
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &_1;
        _199 = obligation::ObligationOrder::opportunity_parameter(move _200) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_200);
        _198 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::is_zero(move _199) -> [return: bb75, unwind continue];
    }

    bb75: {
        switchInt(move _198) -> [0: bb82, otherwise: bb76];
    }

    bb76: {
        StorageDead(_199);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = const "Single debt deleveraging opportunity amount cannot be 0";
        _203 = &(*_204);
        _202 = solana_program::log::sol_log(move _203) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_203);
        StorageDead(_204);
        StorageDead(_202);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _457 = const _;
        _208 = &(*_457);
        _207 = LendingError::name(move _208) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_208);
        StorageLive(_210);
        StorageLive(_211);
        _211 = LendingError::InvalidOrderConfiguration;
        _210 = <LendingError as Into<u32>>::into(move _211) -> [return: bb79, unwind: bb173];
    }

    bb79: {
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        _456 = const _;
        _213 = &(*_456);
        _212 = <LendingError as ToString>::to_string(move _213) -> [return: bb80, unwind: bb173];
    }

    bb80: {
        StorageDead(_213);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 243_u32 };
        _216 = anchor_lang::error::ErrorOrigin::Source(move _217);
        StorageDead(_217);
        _215 = std::option::Option::<ErrorOrigin>::Some(move _216);
        StorageDead(_216);
        StorageLive(_218);
        _218 = std::option::Option::<ComparedValues>::None;
        _206 = anchor_lang::error::AnchorError { error_name: move _207, error_code_number: move _210, error_msg: move _212, error_origin: move _215, compared_values: move _218 };
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        _205 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _206) -> [return: bb81, unwind: bb182];
    }

    bb81: {
        StorageDead(_206);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _205);
        StorageDead(_205);
        StorageDead(_198);
        StorageDead(_197);
        goto -> bb161;
    }

    bb82: {
        StorageDead(_199);
        _197 = const ();
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &_1;
        _221 = obligation::ObligationOrder::opportunity_parameter(move _222) -> [return: bb83, unwind continue];
    }

    bb83: {
        _220 = &_221;
        StorageDead(_222);
        StorageLive(_223);
        _460 = const _;
        _223 = &(*_460);
        _219 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _220, move _223) -> [return: bb84, unwind continue];
    }

    bb84: {
        switchInt(move _219) -> [0: bb91, otherwise: bb85];
    }

    bb85: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = const "Single debt deleveraging opportunity amount must be finite (use DeleverageAllDebt for repaying all debt)";
        _227 = &(*_228);
        _226 = solana_program::log::sol_log(move _227) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_227);
        StorageDead(_228);
        StorageDead(_226);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _459 = const _;
        _232 = &(*_459);
        _231 = LendingError::name(move _232) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_232);
        StorageLive(_234);
        StorageLive(_235);
        _235 = LendingError::InvalidOrderConfiguration;
        _234 = <LendingError as Into<u32>>::into(move _235) -> [return: bb88, unwind: bb172];
    }

    bb88: {
        StorageDead(_235);
        StorageLive(_236);
        StorageLive(_237);
        _458 = const _;
        _237 = &(*_458);
        _236 = <LendingError as ToString>::to_string(move _237) -> [return: bb89, unwind: bb172];
    }

    bb89: {
        StorageDead(_237);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 247_u32 };
        _240 = anchor_lang::error::ErrorOrigin::Source(move _241);
        StorageDead(_241);
        _239 = std::option::Option::<ErrorOrigin>::Some(move _240);
        StorageDead(_240);
        StorageLive(_242);
        _242 = std::option::Option::<ComparedValues>::None;
        _230 = anchor_lang::error::AnchorError { error_name: move _231, error_code_number: move _234, error_msg: move _236, error_origin: move _239, compared_values: move _242 };
        StorageDead(_242);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_231);
        _229 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _230) -> [return: bb90, unwind: bb182];
    }

    bb90: {
        StorageDead(_230);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _229);
        StorageDead(_229);
        StorageDead(_219);
        goto -> bb161;
    }

    bb91: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_220);
        _192 = const ();
        StorageDead(_219);
        goto -> bb113;
    }

    bb92: {
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_1;
        _245 = obligation::ObligationOrder::opportunity_parameter(move _246) -> [return: bb93, unwind continue];
    }

    bb93: {
        _244 = &_245;
        StorageDead(_246);
        StorageLive(_247);
        _455 = const _;
        _247 = &(*_455);
        _243 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::ne(move _244, move _247) -> [return: bb94, unwind continue];
    }

    bb94: {
        switchInt(move _243) -> [0: bb101, otherwise: bb95];
    }

    bb95: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = const "Deleveraging all debt opportunity must allow repaying the entire amount (Fraction::MAX)";
        _251 = &(*_252);
        _250 = solana_program::log::sol_log(move _251) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_251);
        StorageDead(_252);
        StorageDead(_250);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _444 = const _;
        _256 = &(*_444);
        _255 = LendingError::name(move _256) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_256);
        StorageLive(_258);
        StorageLive(_259);
        _259 = LendingError::InvalidOrderConfiguration;
        _258 = <LendingError as Into<u32>>::into(move _259) -> [return: bb98, unwind: bb171];
    }

    bb98: {
        StorageDead(_259);
        StorageLive(_260);
        StorageLive(_261);
        _443 = const _;
        _261 = &(*_443);
        _260 = <LendingError as ToString>::to_string(move _261) -> [return: bb99, unwind: bb171];
    }

    bb99: {
        StorageDead(_261);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 253_u32 };
        _264 = anchor_lang::error::ErrorOrigin::Source(move _265);
        StorageDead(_265);
        _263 = std::option::Option::<ErrorOrigin>::Some(move _264);
        StorageDead(_264);
        StorageLive(_266);
        _266 = std::option::Option::<ComparedValues>::None;
        _254 = anchor_lang::error::AnchorError { error_name: move _255, error_code_number: move _258, error_msg: move _260, error_origin: move _263, compared_values: move _266 };
        StorageDead(_266);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_255);
        _253 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _254) -> [return: bb100, unwind: bb182];
    }

    bb100: {
        StorageDead(_254);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _253);
        StorageDead(_253);
        StorageDead(_243);
        goto -> bb161;
    }

    bb101: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_244);
        _192 = const ();
        StorageDead(_243);
        goto -> bb113;
    }

    bb102: {
        StorageDead(_286);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = &_267;
        _289 = &(*_290);
        _288 = core::fmt::rt::Argument::<'_>::new_debug::<TryFromPrimitiveError<OpportunityType>>(move _289) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_289);
        _284 = [move _285, move _288];
        StorageDead(_288);
        StorageDead(_285);
        _283 = &_284;
        _282 = &(*_283);
        _281 = move _282 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_282);
        _276 = Arguments::<'_>::new_v1(move _277, move _281) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_281);
        StorageDead(_277);
        _275 = format(move _276) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_276);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_279);
        _274 = move _275;
        StorageDead(_275);
        _273 = &_274;
        _272 = &(*_273);
        _271 = <std::string::String as Deref>::deref(move _272) -> [return: bb106, unwind: bb170];
    }

    bb106: {
        _270 = &(*_271);
        StorageDead(_272);
        _269 = solana_program::log::sol_log(move _270) -> [return: bb107, unwind: bb170];
    }

    bb107: {
        StorageDead(_270);
        drop(_274) -> [return: bb108, unwind: bb182];
    }

    bb108: {
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _441 = const _;
        _294 = &(*_441);
        _293 = LendingError::name(move _294) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_294);
        StorageLive(_296);
        StorageLive(_297);
        _297 = LendingError::InvalidOrderConfiguration;
        _296 = <LendingError as Into<u32>>::into(move _297) -> [return: bb110, unwind: bb169];
    }

    bb110: {
        StorageDead(_297);
        StorageLive(_298);
        StorageLive(_299);
        _440 = const _;
        _299 = &(*_440);
        _298 = <LendingError as ToString>::to_string(move _299) -> [return: bb111, unwind: bb169];
    }

    bb111: {
        StorageDead(_299);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 262_u32 };
        _302 = anchor_lang::error::ErrorOrigin::Source(move _303);
        StorageDead(_303);
        _301 = std::option::Option::<ErrorOrigin>::Some(move _302);
        StorageDead(_302);
        StorageLive(_304);
        _304 = std::option::Option::<ComparedValues>::None;
        _292 = anchor_lang::error::AnchorError { error_name: move _293, error_code_number: move _296, error_msg: move _298, error_origin: move _301, compared_values: move _304 };
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_293);
        _291 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _292) -> [return: bb112, unwind: bb182];
    }

    bb112: {
        StorageDead(_292);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _291);
        StorageDead(_291);
        StorageDead(_267);
        goto -> bb161;
    }

    bb113: {
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &_1;
        _305 = obligation::ObligationOrder::execution_bonus_rate_range(move _306) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &_305;
        _310 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::start(move _311) -> [return: bb115, unwind continue];
    }

    bb115: {
        _309 = &_310;
        StorageDead(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_305;
        _314 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::end(move _315) -> [return: bb116, unwind continue];
    }

    bb116: {
        _313 = &(*_314);
        _312 = &_313;
        StorageDead(_315);
        _308 = <&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _309, move _312) -> [return: bb117, unwind continue];
    }

    bb117: {
        switchInt(move _308) -> [0: bb132, otherwise: bb118];
    }

    bb118: {
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_309);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _447 = const _;
        _327 = &(*_447);
        _326 = &(*_327);
        _325 = move _326 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_326);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &_305;
        _336 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::start(move _337) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_337);
        _335 = &_336;
        _334 = &(*_335);
        _333 = core::fmt::rt::Argument::<'_>::new_display::<&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _334) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_334);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &_305;
        _341 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::end(move _342) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_342);
        _340 = &_341;
        _339 = &(*_340);
        _338 = core::fmt::rt::Argument::<'_>::new_display::<&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _339) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_339);
        _332 = [move _333, move _338];
        StorageDead(_338);
        StorageDead(_333);
        _331 = &_332;
        _330 = &(*_331);
        _329 = move _330 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_330);
        _324 = Arguments::<'_>::new_v1(move _325, move _329) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_329);
        StorageDead(_325);
        _323 = format(move _324) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_324);
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_327);
        _322 = move _323;
        StorageDead(_323);
        _321 = &_322;
        _320 = &(*_321);
        _319 = <std::string::String as Deref>::deref(move _320) -> [return: bb125, unwind: bb168];
    }

    bb125: {
        _318 = &(*_319);
        StorageDead(_320);
        _317 = solana_program::log::sol_log(move _318) -> [return: bb126, unwind: bb168];
    }

    bb126: {
        StorageDead(_318);
        drop(_322) -> [return: bb127, unwind: bb182];
    }

    bb127: {
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_317);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _446 = const _;
        _346 = &(*_446);
        _345 = LendingError::name(move _346) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_346);
        StorageLive(_348);
        StorageLive(_349);
        _349 = LendingError::InvalidOrderConfiguration;
        _348 = <LendingError as Into<u32>>::into(move _349) -> [return: bb129, unwind: bb167];
    }

    bb129: {
        StorageDead(_349);
        StorageLive(_350);
        StorageLive(_351);
        _445 = const _;
        _351 = &(*_445);
        _350 = <LendingError as ToString>::to_string(move _351) -> [return: bb130, unwind: bb167];
    }

    bb130: {
        StorageDead(_351);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 272_u32 };
        _354 = anchor_lang::error::ErrorOrigin::Source(move _355);
        StorageDead(_355);
        _353 = std::option::Option::<ErrorOrigin>::Some(move _354);
        StorageDead(_354);
        StorageLive(_356);
        _356 = std::option::Option::<ComparedValues>::None;
        _344 = anchor_lang::error::AnchorError { error_name: move _345, error_code_number: move _348, error_msg: move _350, error_origin: move _353, compared_values: move _356 };
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_350);
        StorageDead(_348);
        StorageDead(_345);
        _343 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _344) -> [return: bb131, unwind: bb182];
    }

    bb131: {
        StorageDead(_344);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _343);
        StorageDead(_343);
        StorageDead(_308);
        StorageDead(_307);
        goto -> bb160;
    }

    bb132: {
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_309);
        _307 = const ();
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &_305;
        _360 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::end(move _361) -> [return: bb133, unwind continue];
    }

    bb133: {
        _359 = &_360;
        StorageDead(_361);
        StorageLive(_362);
        _454 = const _;
        _362 = &(*_454);
        _358 = <&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _359, move _362) -> [return: bb134, unwind continue];
    }

    bb134: {
        switchInt(move _358) -> [0: bb148, otherwise: bb135];
    }

    bb135: {
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_359);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _451 = const _;
        _377 = &(*_451);
        _376 = &(*_377);
        _375 = move _376 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_376);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_305;
        _386 = RangeInclusive::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::end(move _387) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_387);
        _385 = &_386;
        _384 = &(*_385);
        _383 = core::fmt::rt::Argument::<'_>::new_display::<&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _384) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_384);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _450 = const _;
        _390 = &(*_450);
        _389 = &(*_390);
        _388 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _389) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_389);
        _382 = [move _383, move _388];
        StorageDead(_388);
        StorageDead(_383);
        _381 = &_382;
        _380 = &(*_381);
        _379 = move _380 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_380);
        _374 = Arguments::<'_>::new_v1(move _375, move _379) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_379);
        StorageDead(_375);
        _373 = format(move _374) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_374);
        StorageDead(_390);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_377);
        _372 = move _373;
        StorageDead(_373);
        _371 = &_372;
        _370 = &(*_371);
        _369 = <std::string::String as Deref>::deref(move _370) -> [return: bb141, unwind: bb166];
    }

    bb141: {
        _368 = &(*_369);
        StorageDead(_370);
        _367 = solana_program::log::sol_log(move _368) -> [return: bb142, unwind: bb166];
    }

    bb142: {
        StorageDead(_368);
        drop(_372) -> [return: bb143, unwind: bb182];
    }

    bb143: {
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_367);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _449 = const _;
        _395 = &(*_449);
        _394 = LendingError::name(move _395) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_395);
        StorageLive(_397);
        StorageLive(_398);
        _398 = LendingError::InvalidOrderConfiguration;
        _397 = <LendingError as Into<u32>>::into(move _398) -> [return: bb145, unwind: bb165];
    }

    bb145: {
        StorageDead(_398);
        StorageLive(_399);
        StorageLive(_400);
        _448 = const _;
        _400 = &(*_448);
        _399 = <LendingError as ToString>::to_string(move _400) -> [return: bb146, unwind: bb165];
    }

    bb146: {
        StorageDead(_400);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 280_u32 };
        _403 = anchor_lang::error::ErrorOrigin::Source(move _404);
        StorageDead(_404);
        _402 = std::option::Option::<ErrorOrigin>::Some(move _403);
        StorageDead(_403);
        StorageLive(_405);
        _405 = std::option::Option::<ComparedValues>::None;
        _393 = anchor_lang::error::AnchorError { error_name: move _394, error_code_number: move _397, error_msg: move _399, error_origin: move _402, compared_values: move _405 };
        StorageDead(_405);
        StorageDead(_402);
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_394);
        _392 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _393) -> [return: bb147, unwind: bb182];
    }

    bb147: {
        StorageDead(_393);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _392);
        StorageDead(_392);
        StorageDead(_358);
        StorageDead(_357);
        goto -> bb160;
    }

    bb148: {
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_359);
        _357 = const ();
        StorageDead(_358);
        StorageDead(_357);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &(_1.6: [u8; 10]);
        _409 = &(*_410);
        _408 = move _409 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_409);
        _407 = is_default_array::<u8>(move _408) -> [return: bb149, unwind continue];
    }

    bb149: {
        switchInt(move _407) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        StorageDead(_408);
        StorageDead(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &(_1.7: [u128; 5]);
        _413 = &(*_414);
        _412 = move _413 as &[u128] (PointerCoercion(Unsize));
        StorageDead(_413);
        _411 = is_default_array::<u128>(move _412) -> [return: bb152, unwind continue];
    }

    bb151: {
        StorageDead(_408);
        StorageDead(_410);
        goto -> bb154;
    }

    bb152: {
        switchInt(move _411) -> [0: bb154, otherwise: bb153];
    }

    bb153: {
        StorageDead(_412);
        StorageDead(_414);
        _406 = const ();
        StorageDead(_411);
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_433);
        _433 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _433);
        StorageDead(_433);
        StorageDead(_305);
        goto -> bb163;
    }

    bb154: {
        StorageDead(_412);
        StorageDead(_414);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = const "Padding fields must be zeroed";
        _417 = &(*_418);
        _416 = solana_program::log::sol_log(move _417) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_417);
        StorageDead(_418);
        StorageDead(_416);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _453 = const _;
        _422 = &(*_453);
        _421 = LendingError::name(move _422) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_422);
        StorageLive(_424);
        StorageLive(_425);
        _425 = LendingError::InvalidOrderConfiguration;
        _424 = <LendingError as Into<u32>>::into(move _425) -> [return: bb157, unwind: bb164];
    }

    bb157: {
        StorageDead(_425);
        StorageLive(_426);
        StorageLive(_427);
        _452 = const _;
        _427 = &(*_452);
        _426 = <LendingError as ToString>::to_string(move _427) -> [return: bb158, unwind: bb164];
    }

    bb158: {
        StorageDead(_427);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 284_u32 };
        _430 = anchor_lang::error::ErrorOrigin::Source(move _431);
        StorageDead(_431);
        _429 = std::option::Option::<ErrorOrigin>::Some(move _430);
        StorageDead(_430);
        StorageLive(_432);
        _432 = std::option::Option::<ComparedValues>::None;
        _420 = anchor_lang::error::AnchorError { error_name: move _421, error_code_number: move _424, error_msg: move _426, error_origin: move _429, compared_values: move _432 };
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_421);
        _419 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _420) -> [return: bb159, unwind: bb182];
    }

    bb159: {
        StorageDead(_420);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _419);
        StorageDead(_419);
        StorageDead(_411);
        StorageDead(_407);
        StorageDead(_406);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_305);
        goto -> bb163;
    }

    bb161: {
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb163;
    }

    bb162: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb163;
    }

    bb163: {
        return;
    }

    bb164 (cleanup): {
        drop(_421) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_394) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_372) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_345) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        drop(_322) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_293) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_274) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_255) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_231) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_207) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_180) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_161) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_141) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_125) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_101) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_75) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_50) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_20) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        resume;
    }
}
