// MIR for `get_scope_price_and_twap` before PreCodegen

fn get_scope_price_and_twap(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: &token_info::ScopeConfiguration) -> std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> {
    debug scope_price_account => _1;
    debug conf => _2;
    let mut _0: std::result::Result<utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error>;
    let _3: std::cell::Ref<'_, scope_types::OraclePrices>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, scope_types::OraclePrices>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::Ref<'_, scope_types::OraclePrices>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, utils::prices::types::TimestampedPrice>;
    let mut _14: std::result::Result<utils::prices::types::TimestampedPrice, anchor_lang::error::Error>;
    let mut _15: &scope_types::OraclePrices;
    let _16: &scope_types::OraclePrices;
    let mut _17: &std::cell::Ref<'_, scope_types::OraclePrices>;
    let _18: &std::cell::Ref<'_, scope_types::OraclePrices>;
    let mut _19: [u16; 4];
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _26: bool;
    let mut _27: &state::token_info::ScopeConfiguration;
    let mut _28: std::result::Result<utils::prices::types::TimestampedPrice, ()>;
    let mut _29: std::result::Result<utils::prices::types::TimestampedPrice, anchor_lang::error::Error>;
    let mut _30: &scope_types::OraclePrices;
    let _31: &scope_types::OraclePrices;
    let mut _32: &std::cell::Ref<'_, scope_types::OraclePrices>;
    let _33: &std::cell::Ref<'_, scope_types::OraclePrices>;
    let mut _34: [u16; 4];
    let mut _35: {closure@programs\klend\src\utils\prices\scope.rs:24:22: 24:25};
    let mut _36: utils::prices::types::TimestampedPriceWithTwap;
    let mut _37: utils::prices::types::TimestampedPrice;
    let mut _38: std::option::Option<utils::prices::types::TimestampedPrice>;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    scope 1 {
        debug scope_prices => _3;
        let _12: utils::prices::types::TimestampedPrice;
        let _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _24: utils::prices::types::TimestampedPrice;
        scope 6 {
            debug price => _12;
            let _25: std::option::Option<utils::prices::types::TimestampedPrice>;
            scope 11 {
                debug twap => _25;
            }
        }
        scope 7 {
            debug residual => _21;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _24;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = get_price_account(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, scope_types::OraclePrices>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::Ref<'_, scope_types::OraclePrices>);
        _3 = move _11;
        StorageDead(_11);
        _39 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_3;
        _17 = &(*_18);
        _16 = <Ref<'_, scope_types::OraclePrices> as Deref>::deref(move _17) -> [return: bb7, unwind: bb25];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb28];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _45 = discriminant(_4);
        StorageDead(_4);
        goto -> bb22;
    }

    bb7: {
        _15 = &(*_16);
        StorageDead(_17);
        StorageLive(_19);
        _19 = ((*_2).1: [u16; 4]);
        _14 = get_price_usd(move _15, move _19) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_15);
        _13 = <std::result::Result<TimestampedPrice, anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb9, unwind: bb25];
    }

    bb9: {
        StorageDead(_14);
        _20 = discriminant(_13);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_13 as Continue).0: utils::prices::types::TimestampedPrice);
        _12 = move _24;
        StorageDead(_24);
        _41 = discriminant(_13);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_2);
        _26 = token_info::ScopeConfiguration::has_twap(move _27) -> [return: bb13, unwind: bb24];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _23) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _43 = discriminant(_13);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        drop(_3) -> [return: bb22, unwind: bb26];
    }

    bb13: {
        switchInt(move _26) -> [0: bb19, otherwise: bb14];
    }

    bb14: {
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_3;
        _32 = &(*_33);
        _31 = <Ref<'_, scope_types::OraclePrices> as Deref>::deref(move _32) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _30 = &(*_31);
        StorageDead(_32);
        StorageLive(_34);
        _34 = ((*_2).2: [u16; 4]);
        _29 = get_price_usd(move _30, move _34) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_30);
        StorageLive(_35);
        _35 = {closure@programs\klend\src\utils\prices\scope.rs:24:22: 24:25};
        _28 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::map_err::<(), {closure@programs\klend\src\utils\prices\scope.rs:24:22: 24:25}>(move _29, move _35) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_29);
        _25 = std::result::Result::<TimestampedPrice, ()>::ok(move _28) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        StorageDead(_28);
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_27);
        _25 = std::option::Option::<TimestampedPrice>::None;
        goto -> bb20;
    }

    bb20: {
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        _37 = move _12;
        StorageLive(_38);
        _38 = move _25;
        _36 = TimestampedPriceWithTwap { price: move _37, twap: move _38 };
        StorageDead(_38);
        StorageDead(_37);
        _0 = std::result::Result::<TimestampedPriceWithTwap, anchor_lang::error::Error>::Ok(move _36);
        StorageDead(_36);
        StorageDead(_25);
        StorageDead(_12);
        drop(_3) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        StorageDead(_3);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_3);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _47 = discriminant(_13);
        goto -> bb25;
    }

    bb28 (cleanup): {
        _48 = discriminant(_4);
        goto -> bb26;
    }
}
