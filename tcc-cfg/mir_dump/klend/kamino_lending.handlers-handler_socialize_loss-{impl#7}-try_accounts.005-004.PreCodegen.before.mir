// MIR for `handlers::handler_socialize_loss::<impl at programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18>::try_accounts` before PreCodegen

fn handlers::handler_socialize_loss::<impl at programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut SocializeLossV2Bumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error>;
    let _6: handlers::handler_socialize_loss::SocializeLoss<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_socialize_loss::SocializeLoss<'_>>;
    let mut _8: std::result::Result<handlers::handler_socialize_loss::SocializeLoss<'_>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: &[u8];
    let mut _12: &mut handlers::handler_socialize_loss::SocializeLossBumps;
    let mut _13: &mut handlers::handler_socialize_loss::SocializeLossBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: handlers::handler_socialize_loss::SocializeLoss<'_>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>>;
    let mut _22: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _25: &[u8];
    let mut _26: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _27: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _36: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::Pubkey;
    let mut _39: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _40: &[u8];
    let mut _41: &mut handlers::handler_socialize_loss::SocializeLossV2Bumps;
    let mut _42: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _43: {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18};
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, farms::program::Farms>>;
    let mut _51: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _52: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _53: &anchor_lang::prelude::Pubkey;
    let mut _54: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _55: &[u8];
    let mut _56: &mut handlers::handler_socialize_loss::SocializeLossV2Bumps;
    let mut _57: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _58: {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18};
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _66: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _67: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _68: &[&[u8]];
    let mut _69: &[&[u8]; 3];
    let _70: &[&[u8]; 3];
    let _71: [&[u8]; 3];
    let mut _72: &[u8];
    let _73: &[u8];
    let mut _74: &[u8];
    let _75: &[u8];
    let mut _76: &anchor_lang::prelude::Pubkey;
    let _77: anchor_lang::prelude::Pubkey;
    let mut _78: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _79: &[u8];
    let _80: &[u8];
    let _81: &[u8];
    let mut _82: &[u8; 1];
    let _83: [u8; 1];
    let mut _84: u8;
    let mut _85: u64;
    let mut _86: &state::lending_market::LendingMarket;
    let mut _87: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _88: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _90: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::RangeFull;
    let mut _98: &anchor_lang::prelude::Pubkey;
    let _99: &&anchor_lang::prelude::Pubkey;
    let mut _100: {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18};
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _106: ();
    let mut _107: bool;
    let mut _108: &anchor_lang::prelude::Pubkey;
    let _109: anchor_lang::prelude::Pubkey;
    let mut _110: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _111: &anchor_lang::prelude::Pubkey;
    let mut _112: !;
    let mut _113: anchor_lang::error::Error;
    let mut _114: anchor_lang::error::Error;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::ErrorCode;
    let mut _117: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _118: anchor_lang::prelude::Pubkey;
    let mut _119: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: anchor_lang::prelude::Pubkey;
    let mut _121: handlers::handler_socialize_loss::SocializeLossV2<'_>;
    let mut _122: handlers::handler_socialize_loss::SocializeLoss<'_>;
    let mut _123: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _124: anchor_lang::prelude::AccountInfo<'_>;
    let mut _125: anchor_lang::prelude::Program<'_, farms::program::Farms>;
    let mut _126: &anchor_lang::prelude::Pubkey;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    scope 1 {
        debug socialize_loss_accounts => _6;
        let _20: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
        let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _33: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
        scope 6 {
            debug farms_accounts => _20;
            let _34: anchor_lang::prelude::AccountInfo<'_>;
            let _45: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _48: anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug lending_market_authority => _34;
                let _49: anchor_lang::prelude::Program<'_, farms::program::Farms>;
                let _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _63: anchor_lang::prelude::Program<'_, farms::program::Farms>;
                scope 16 {
                    debug farms_program => _49;
                    let _64: anchor_lang::prelude::Pubkey;
                    let _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _96: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                    let _102: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _105: anchor_lang::prelude::Pubkey;
                    scope 21 {
                        debug __pda_address => _64;
                    }
                    scope 22 {
                        debug residual => _93;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _96;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug residual => _102;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _105;
                        scope 29 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _60;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _63;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _45;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _48;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _30;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _33;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }

    bb0: {
        _129 = const false;
        _128 = const false;
        _127 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = &mut (*_2);
        StorageLive(_11);
        _11 = &(*_3);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut ((*_4).0: handlers::handler_socialize_loss::SocializeLossBumps);
        _12 = &mut (*_13);
        StorageLive(_14);
        _14 = &mut (*_5);
        _8 = <handlers::handler_socialize_loss::SocializeLoss<'_> as anchor_lang::Accounts<'_, SocializeLossBumps>>::try_accounts(move _9, move _10, move _11, move _12, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<handlers::handler_socialize_loss::SocializeLoss<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        StorageDead(_8);
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = move ((_7 as Continue).0: handlers::handler_socialize_loss::SocializeLoss<'_>);
        _6 = move _19;
        StorageDead(_19);
        _130 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &mut (*_2);
        StorageLive(_25);
        _25 = &(*_3);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut ((*_4).1: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps);
        _26 = &mut (*_27);
        StorageLive(_28);
        _28 = &mut (*_5);
        _22 = <handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_> as anchor_lang::Accounts<'_, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps>>::try_accounts(move _23, move _24, move _25, move _26, move _28) -> [return: bb7, unwind: bb56];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb6, unwind: bb67];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        _152 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb51;
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb8, unwind: bb56];
    }

    bb8: {
        StorageDead(_22);
        _29 = discriminant(_21);
        switchInt(move _29) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_33);
        _33 = move ((_21 as Continue).0: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _20 = move _33;
        StorageDead(_33);
        _132 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_1);
        StorageLive(_39);
        _39 = &mut (*_2);
        StorageLive(_40);
        _40 = &(*_3);
        StorageLive(_41);
        _41 = &mut (*_4);
        StorageLive(_42);
        _42 = &mut (*_5);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, SocializeLossV2Bumps>>::try_accounts(move _38, move _39, move _40, move _41, move _42) -> [return: bb12, unwind: bb55];
    }

    bb10: {
        StorageLive(_30);
        _30 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb11, unwind: bb66];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        _150 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        goto -> bb50;
    }

    bb12: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_43);
        _43 = {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18};
        _36 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18}>(move _37, move _43) -> [return: bb13, unwind: bb55];
    }

    bb13: {
        StorageDead(_43);
        StorageDead(_37);
        _35 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb14, unwind: bb55];
    }

    bb14: {
        StorageDead(_36);
        _44 = discriminant(_35);
        switchInt(move _44) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_48);
        _48 = move ((_35 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _34 = move _48;
        StorageDead(_48);
        _134 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_1);
        StorageLive(_54);
        _54 = &mut (*_2);
        StorageLive(_55);
        _55 = &(*_3);
        StorageLive(_56);
        _56 = &mut (*_4);
        StorageLive(_57);
        _57 = &mut (*_5);
        _52 = <anchor_lang::prelude::Program<'_, Farms> as anchor_lang::Accounts<'_, SocializeLossV2Bumps>>::try_accounts(move _53, move _54, move _55, move _56, move _57) -> [return: bb18, unwind: bb54];
    }

    bb16: {
        StorageLive(_45);
        _45 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_47);
        _47 = move _45;
        _0 = <std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _47) -> [return: bb17, unwind: bb65];
    }

    bb17: {
        StorageDead(_47);
        StorageDead(_45);
        _148 = discriminant(_35);
        StorageDead(_35);
        goto -> bb49;
    }

    bb18: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_58);
        _58 = {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18};
        _51 = std::result::Result::<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18}>(move _52, move _58) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        StorageDead(_58);
        StorageDead(_52);
        _50 = <std::result::Result<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error> as Try>::branch(move _51) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        StorageDead(_51);
        _59 = discriminant(_50);
        switchInt(move _59) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_63);
        _63 = move ((_50 as Continue).0: anchor_lang::prelude::Program<'_, farms::program::Farms>);
        _49 = move _63;
        StorageDead(_63);
        _136 = discriminant(_50);
        StorageDead(_50);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const _;
        _72 = &(*_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(_6.2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _77 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _78) -> [return: bb24, unwind: bb54];
    }

    bb22: {
        StorageLive(_60);
        _60 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _62) -> [return: bb23, unwind: bb64];
    }

    bb23: {
        StorageDead(_62);
        StorageDead(_60);
        _146 = discriminant(_50);
        StorageDead(_50);
        goto -> bb48;
    }

    bb24: {
        _76 = &_77;
        StorageDead(_78);
        _75 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _76) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _74 = &(*_75);
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(_6.2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _90 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _91) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        StorageDead(_91);
        _89 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _90) -> [return: bb27, unwind: bb54];
    }

    bb27: {
        _127 = const true;
        _128 = const true;
        StorageDead(_90);
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_96);
        _96 = move ((_89 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _88 = move _96;
        StorageDead(_96);
        _87 = &_88;
        _86 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _87) -> [return: bb31, unwind: bb53];
    }

    bb29: {
        StorageLive(_93);
        _93 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _95) -> [return: bb30, unwind: bb63];
    }

    bb30: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb59;
    }

    bb31: {
        StorageDead(_87);
        _85 = ((*_86).1: u64);
        _84 = move _85 as u8 (IntToInt);
        StorageDead(_85);
        _83 = [move _84];
        _82 = &_83;
        StorageDead(_84);
        StorageLive(_97);
        _97 = RangeFull;
        _81 = <[u8; 1] as Index<RangeFull>>::index(move _82, move _97) -> [return: bb32, unwind: bb53];
    }

    bb32: {
        StorageDead(_97);
        StorageDead(_82);
        _80 = &(*_81);
        _79 = &(*_80);
        _71 = [move _72, move _74, move _79];
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = move _69 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_69);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_1;
        _126 = deref_copy (*_99);
        _98 = &(*_126);
        _67 = anchor_lang::prelude::Pubkey::create_program_address(move _68, move _98) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        StorageDead(_98);
        StorageDead(_68);
        StorageLive(_100);
        _100 = {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18};
        _66 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_socialize_loss.rs:87:10: 87:18}>(move _67, move _100) -> [return: bb34, unwind: bb53];
    }

    bb34: {
        StorageDead(_100);
        StorageDead(_67);
        _65 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _66) -> [return: bb35, unwind: bb53];
    }

    bb35: {
        StorageDead(_66);
        _101 = discriminant(_65);
        switchInt(move _101) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_105);
        _105 = ((_65 as Continue).0: anchor_lang::prelude::Pubkey);
        _64 = _105;
        StorageDead(_105);
        _138 = discriminant(_65);
        StorageDead(_99);
        drop(_88) -> [return: bb58, unwind: bb63];
    }

    bb37: {
        StorageLive(_102);
        _102 = move ((_65 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_104);
        _104 = move _102;
        _0 = <std::result::Result<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _104) -> [return: bb38, unwind: bb62];
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_102);
        _142 = discriminant(_65);
        StorageDead(_99);
        drop(_88) -> [return: bb59, unwind: bb63];
    }

    bb39: {
        _108 = &_109;
        StorageDead(_110);
        StorageLive(_111);
        _111 = &_64;
        _107 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _108, move _111) -> [return: bb40, unwind: bb54];
    }

    bb40: {
        switchInt(move _107) -> [0: bb46, otherwise: bb41];
    }

    bb41: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = ConstraintSeeds;
        _115 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _116) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        StorageDead(_116);
        _114 = anchor_lang::error::Error::with_account_name::<&str>(move _115, const "lending_market_authority") -> [return: bb43, unwind: bb54];
    }

    bb43: {
        _129 = const true;
        StorageDead(_115);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_34;
        _118 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _119) -> [return: bb44, unwind: bb61];
    }

    bb44: {
        StorageDead(_119);
        StorageLive(_120);
        _120 = _64;
        _117 = (move _118, move _120);
        StorageDead(_120);
        StorageDead(_118);
        _129 = const false;
        _113 = anchor_lang::error::Error::with_pubkeys(move _114, move _117) -> [return: bb45, unwind: bb61];
    }

    bb45: {
        StorageDead(_117);
        _129 = const false;
        StorageDead(_114);
        _0 = std::result::Result::<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error>::Err(move _113);
        StorageDead(_113);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        _106 = const ();
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_121);
        StorageLive(_122);
        _122 = move _6;
        StorageLive(_123);
        _123 = move _20;
        StorageLive(_124);
        _124 = move _34;
        StorageLive(_125);
        _125 = move _49;
        _121 = handlers::handler_socialize_loss::SocializeLossV2::<'_> { socialize_loss_accounts: move _122, farms_accounts: move _123, lending_market_authority: move _124, farms_program: move _125 };
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_122);
        _0 = std::result::Result::<handlers::handler_socialize_loss::SocializeLossV2<'_>, anchor_lang::error::Error>::Ok(move _121);
        StorageDead(_121);
        StorageDead(_64);
        StorageDead(_49);
        StorageDead(_34);
        StorageDead(_20);
        StorageDead(_6);
        goto -> bb52;
    }

    bb47: {
        StorageDead(_64);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_49);
        drop(_34) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        StorageDead(_34);
        drop(_20) -> [return: bb50, unwind: bb56];
    }

    bb50: {
        StorageDead(_20);
        drop(_6) -> [return: bb51, unwind: bb57];
    }

    bb51: {
        StorageDead(_6);
        goto -> bb52;
    }

    bb52: {
        return;
    }

    bb53 (cleanup): {
        drop(_88) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_34) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_20) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_6) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58: {
        _140 = discriminant(_89);
        _127 = const false;
        _128 = const false;
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_65);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_34;
        _109 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _110) -> [return: bb39, unwind: bb54];
    }

    bb59: {
        _144 = discriminant(_89);
        _127 = const false;
        _128 = const false;
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_65);
        goto -> bb47;
    }

    bb60 (cleanup): {
        drop(_114) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_129) -> [0: bb54, otherwise: bb60];
    }

    bb62 (cleanup): {
        _154 = discriminant(_65);
        goto -> bb53;
    }

    bb63 (cleanup): {
        _155 = discriminant(_89);
        goto -> bb54;
    }

    bb64 (cleanup): {
        _156 = discriminant(_50);
        goto -> bb54;
    }

    bb65 (cleanup): {
        _157 = discriminant(_35);
        goto -> bb55;
    }

    bb66 (cleanup): {
        _158 = discriminant(_21);
        goto -> bb56;
    }

    bb67 (cleanup): {
        _159 = discriminant(_7);
        goto -> bb57;
    }
}
