// MIR for `deposit_reserve_liquidity_transfer` after PreCodegen

fn deposit_reserve_liquidity_transfer(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: anchor_lang::prelude::AccountInfo<'_>, _6: anchor_lang::prelude::AccountInfo<'_>, _7: anchor_lang::prelude::AccountInfo<'_>, _8: anchor_lang::prelude::AccountInfo<'_>, _9: anchor_lang::prelude::AccountInfo<'_>, _10: &[&[u8]], _11: u64, _12: u8, _13: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug source_liquidity_deposit => _1;
    debug destination_liquidity_deposit => _2;
    debug user_authority => _3;
    debug liquidity_mint => _4;
    debug liquidity_token_program => _5;
    debug collateral_mint => _6;
    debug collateral_token_program => _7;
    debug destination_collateral => _8;
    debug mint_authority => _9;
    debug authority_signer_seeds => _10;
    debug liquidity_deposit_amount => _11;
    debug liquidity_decimals => _12;
    debug collateral_mint_amount => _13;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _16: std::result::Result<(), anchor_lang::error::Error>;
    let mut _17: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _18: anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _21: anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: anchor_lang::prelude::AccountInfo<'_>;
    let mut _24: anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: u64;
    let mut _26: u8;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _31: ();
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _34: std::result::Result<(), anchor_lang::error::Error>;
    let mut _35: anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: anchor_lang::prelude::AccountInfo<'_>;
    let mut _37: anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: anchor_lang::prelude::AccountInfo<'_>;
    let mut _39: &[&[u8]];
    let mut _40: u64;
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _45: ();
    let mut _46: ();
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    scope 1 {
        debug residual => _28;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _31;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _42;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _45;
        scope 8 {
        }
    }

    bb0: {
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _54 = const true;
        _53 = const true;
        _52 = const true;
        _51 = const true;
        _50 = const true;
        _49 = const true;
        _48 = const true;
        _47 = const true;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_5;
        _18 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _19) -> [return: bb1, unwind: bb35];
    }

    bb1: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _54 = const false;
        _21 = move _1;
        StorageLive(_22);
        _53 = const false;
        _22 = move _2;
        StorageLive(_23);
        _52 = const false;
        _23 = move _3;
        StorageLive(_24);
        _51 = const false;
        _24 = move _4;
        _20 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _21, mint: move _24, to: move _22, authority: move _23 };
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        _17 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new(move _18, move _20) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_25);
        _25 = _11;
        StorageLive(_26);
        _26 = _12;
        _16 = anchor_spl::token_2022::transfer_checked(move _17, move _25, move _26) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_17);
        _15 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        StorageDead(_16);
        _27 = discriminant(_15);
        switchInt(move _27) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_31);
        _31 = ((_15 as Continue).0: ());
        _14 = _31;
        StorageDead(_31);
        _55 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _49 = const false;
        _35 = move _7;
        StorageLive(_36);
        _50 = const false;
        _36 = move _6;
        StorageLive(_37);
        _47 = const false;
        _37 = move _9;
        StorageLive(_38);
        _48 = const false;
        _38 = move _8;
        StorageLive(_39);
        _39 = &(*_10);
        StorageLive(_40);
        _40 = _13;
        _34 = spltoken::mint(move _35, move _36, move _37, move _38, move _39, move _40) -> [return: bb9, unwind: bb35];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_28);
        _28 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_28);
        _61 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb28;
    }

    bb9: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _34) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        StorageDead(_34);
        _41 = discriminant(_33);
        switchInt(move _41) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_45);
        _45 = ((_33 as Continue).0: ());
        _32 = _45;
        StorageDead(_45);
        _57 = discriminant(_33);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_46);
        _46 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _46);
        StorageDead(_46);
        drop(_5) -> [return: bb18, unwind: bb40];
    }

    bb12: {
        StorageLive(_42);
        _42 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_44);
        _44 = move _42;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _44) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        StorageDead(_44);
        StorageDead(_42);
        _59 = discriminant(_33);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb28;
    }

    bb14: {
        switchInt(_48) -> [0: bb15, otherwise: bb29];
    }

    bb15: {
        switchInt(_49) -> [0: bb16, otherwise: bb30];
    }

    bb16: {
        switchInt(_50) -> [0: bb17, otherwise: bb31];
    }

    bb17: {
        drop(_5) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        switchInt(_48) -> [0: bb20, otherwise: bb36];
    }

    bb20 (cleanup): {
        switchInt(_49) -> [0: bb21, otherwise: bb37];
    }

    bb21 (cleanup): {
        switchInt(_50) -> [0: bb22, otherwise: bb38];
    }

    bb22 (cleanup): {
        drop(_5) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_52) -> [0: bb24, otherwise: bb41];
    }

    bb24 (cleanup): {
        switchInt(_53) -> [0: bb25, otherwise: bb42];
    }

    bb25 (cleanup): {
        switchInt(_54) -> [0: bb26, otherwise: bb43];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27: {
        drop(_9) -> [return: bb14, unwind: bb19];
    }

    bb28: {
        switchInt(_47) -> [0: bb14, otherwise: bb27];
    }

    bb29: {
        drop(_8) -> [return: bb15, unwind: bb20];
    }

    bb30: {
        drop(_7) -> [return: bb16, unwind: bb21];
    }

    bb31: {
        drop(_6) -> [return: bb17, unwind: bb22];
    }

    bb32 (cleanup): {
        _63 = discriminant(_33);
        goto -> bb35;
    }

    bb33 (cleanup): {
        _64 = discriminant(_15);
        goto -> bb35;
    }

    bb34 (cleanup): {
        drop(_9) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_47) -> [0: bb19, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_8) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_7) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_4) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_51) -> [0: bb23, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_3) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_1) -> [return: bb26, unwind terminate(cleanup)];
    }
}
