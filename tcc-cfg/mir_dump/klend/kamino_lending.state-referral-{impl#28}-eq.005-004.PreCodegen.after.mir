// MIR for `referral::<impl at programs\klend\src\state\referral.rs:114:10: 114:19>::eq` after PreCodegen

fn referral::<impl at programs\klend\src\state\referral.rs:114:10: 114:19>::eq(_1: &referral::ReferrerState, _2: &referral::ReferrerState) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let mut _7: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        _5 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        _6 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_7);
        _7 = &((*_2).1: anchor_lang::prelude::Pubkey);
        _0 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = const false;
        goto -> bb5;
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_3);
        return;
    }
}
