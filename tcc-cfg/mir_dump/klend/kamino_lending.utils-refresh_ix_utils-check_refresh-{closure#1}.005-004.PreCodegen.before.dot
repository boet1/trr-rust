digraph Mir_0_2721 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn refresh_ix_utils::check_refresh::{closure#1}(_1: &amp;ReErased mut Closure(DefId(0:2721 ~ kamino_lending[6389]::utils::refresh_ix_utils::check_refresh::{closure#1}), [i16, Binder(extern &quot;RustCall&quot; fn(((&amp;ReErased (anchor_lang::prelude::Pubkey, &amp;ReErased state::reserve::Reserve), &amp;ReErased state::reserve::ReserveFarmKind),)), []), (&amp;ReErased anchor_lang::prelude::Pubkey, &amp;ReErased mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx, std::alloc::Global&gt;, &amp;ReErased mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx, std::alloc::Global&gt;)]), _2: (&amp;ReErased (anchor_lang::prelude::Pubkey, &amp;ReErased state::reserve::Reserve), &amp;ReErased state::reserve::ReserveFarmKind)) -&gt; ()<br align="left"/>let _3: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _4: &amp;ReErased &amp;ReErased state::reserve::Reserve;<br align="left"/>let _5: &amp;ReErased state::reserve::ReserveFarmKind;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _8: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _9: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _10: state::reserve::ReserveFarmKind;<br align="left"/>let mut _11: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _12: anchor_lang::prelude::Pubkey;<br align="left"/>let _13: utils::refresh_ix_utils::RequiredIx;<br align="left"/>let mut _14: utils::refresh_ix_utils::RequiredIxType;<br align="left"/>let mut _15: std::vec::Vec&lt;(anchor_lang::prelude::Pubkey, usize), std::alloc::Global&gt;;<br align="left"/>let mut _16: std::boxed::Box&lt;[(anchor_lang::prelude::Pubkey, usize)], std::alloc::Global&gt;;<br align="left"/>let mut _17: std::boxed::Box&lt;[(anchor_lang::prelude::Pubkey, usize); 3_usize], std::alloc::Global&gt;;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: *mut u8;<br align="left"/>let mut _21: std::boxed::Box&lt;[(anchor_lang::prelude::Pubkey, usize); 3_usize], std::alloc::Global&gt;;<br align="left"/>let mut _22: (anchor_lang::prelude::Pubkey, usize);<br align="left"/>let mut _23: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _24: (anchor_lang::prelude::Pubkey, usize);<br align="left"/>let mut _25: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _26: (anchor_lang::prelude::Pubkey, usize);<br align="left"/>let mut _27: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _28: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _29: state::reserve::ReserveFarmKind;<br align="left"/>let _30: ();<br align="left"/>let mut _31: &amp;ReErased mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx, std::alloc::Global&gt;;<br align="left"/>let mut _32: utils::refresh_ix_utils::RequiredIx;<br align="left"/>let mut _33: &amp;ReErased utils::refresh_ix_utils::RequiredIx;<br align="left"/>let _34: ();<br align="left"/>let mut _35: &amp;ReErased mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx, std::alloc::Global&gt;;<br align="left"/>let mut _36: utils::refresh_ix_utils::RequiredIx;<br align="left"/>let mut _37: &amp;ReErased (anchor_lang::prelude::Pubkey, &amp;ReErased state::reserve::Reserve);<br align="left"/>let mut _38: &amp;ReErased (anchor_lang::prelude::Pubkey, &amp;ReErased state::reserve::Reserve);<br align="left"/>let mut _39: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _40: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _41: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _42: &amp;ReErased mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx, std::alloc::Global&gt;;<br align="left"/>let mut _43: &amp;ReErased mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx, std::alloc::Global&gt;;<br align="left"/>let mut _44: bool;<br align="left"/>let mut _45: *const [(anchor_lang::prelude::Pubkey, usize); 3_usize];<br align="left"/>let mut _46: *const ();<br align="left"/>let mut _47: usize;<br align="left"/>let mut _48: usize;<br align="left"/>let mut _49: usize;<br align="left"/>let mut _50: usize;<br align="left"/>let mut _51: bool;<br align="left"/>debug obligation_address =&gt; (*((*_1).0: &amp;anchor_lang::prelude::Pubkey));<br align="left"/>debug required_pre_ixs =&gt; (*((*_1).1: &amp;mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx&gt;));<br align="left"/>debug required_post_ixs =&gt; (*((*_1).2: &amp;mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx&gt;));<br align="left"/>debug reserve_address =&gt; _3;<br align="left"/>debug reserve =&gt; _4;<br align="left"/>debug farm_type =&gt; _5;<br align="left"/>debug required_ix =&gt; _13;<br align="left"/>>;
    bb0__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_44 = const false<br/>StorageLive(_3)<br/>_37 = deref_copy (_2.0: &amp;(anchor_lang::prelude::Pubkey, &amp;state::reserve::Reserve))<br/>_3 = &amp;((*_37).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_4)<br/>_38 = deref_copy (_2.0: &amp;(anchor_lang::prelude::Pubkey, &amp;state::reserve::Reserve))<br/>_4 = &amp;((*_38).1: &amp;state::reserve::Reserve)<br/>StorageLive(_5)<br/>_5 = (_2.1: &amp;state::reserve::ReserveFarmKind)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_39 = deref_copy (*_4)<br/>_9 = &amp;(*_39)<br/>StorageLive(_10)<br/>_10 = (*_5)<br/></td></tr><tr><td align="left">_8 = reserve::Reserve::get_farm(move _9, move _10)</td></tr></table>>];
    bb1__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;_8<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/></td></tr><tr><td align="left">_12 = &lt;anchor_lang::prelude::Pubkey as Default&gt;::default()</td></tr></table>>];
    bb2__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_11 = &amp;_12<br/></td></tr><tr><td align="left">_6 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _7, move _11)</td></tr></table>>];
    bb3__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb4__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = RequiredIxType::RefreshFarmsForObligationForReserve<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_18 = SizeOf([(anchor_lang::prelude::Pubkey, usize); 3])<br/>_19 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 3])<br/></td></tr><tr><td align="left">_20 = alloc::alloc::exchange_malloc(move _18, move _19)</td></tr></table>>];
    bb5__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ShallowInitBox(move _20, [(anchor_lang::prelude::Pubkey, usize); 3])<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = (*_3)<br/>_22 = (move _23, const 3_usize)<br/>StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_40 = deref_copy ((*_1).0: &amp;anchor_lang::prelude::Pubkey)<br/>_25 = (*_40)<br/>_24 = (move _25, const 1_usize)<br/>StorageDead(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_41 = deref_copy (*_4)<br/>_28 = &amp;(*_41)<br/>StorageLive(_29)<br/>_29 = (*_5)<br/></td></tr><tr><td align="left">_27 = reserve::Reserve::get_farm(move _28, move _29)</td></tr></table>>];
    bb6__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>_26 = (move _27, const 4_usize)<br/>StorageDead(_27)<br/>_45 = (((_21.0: std::ptr::Unique&lt;[(anchor_lang::prelude::Pubkey, usize); 3]&gt;).0: std::ptr::NonNull&lt;[(anchor_lang::prelude::Pubkey, usize); 3]&gt;).0: *const [(anchor_lang::prelude::Pubkey, usize); 3])<br/>_46 = _45 as *const () (PtrToPtr)<br/>_47 = _46 as usize (Transmute)<br/>_48 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 3])<br/>_49 = Sub(_48, const 1_usize)<br/>_50 = BitAnd(_47, _49)<br/>_51 = Eq(_50, const 0_usize)<br/></td></tr><tr><td align="left">assert(_51, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _48, _47)</td></tr></table>>];
    bb7__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_44 = const true<br/>_13 = RequiredIx { kind: move _14, accounts: move _15 }<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_42 = deref_copy ((*_1).1: &amp;mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx&gt;)<br/>_31 = &amp;mut (*_42)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = &amp;_13<br/></td></tr><tr><td align="left">_32 = &lt;RequiredIx as Clone&gt;::clone(move _33)</td></tr></table>>];
    bb8__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">_30 = Vec::&lt;RequiredIx&gt;::push(move _31, move _32)</td></tr></table>>];
    bb9__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_43 = deref_copy ((*_1).2: &amp;mut std::vec::Vec&lt;utils::refresh_ix_utils::RequiredIx&gt;)<br/>_35 = &amp;mut (*_43)<br/>StorageLive(_36)<br/>_44 = const false<br/>_36 = move _13<br/></td></tr><tr><td align="left">_34 = Vec::&lt;RequiredIx&gt;::push(move _35, move _36)</td></tr></table>>];
    bb10__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>_0 = const ()<br/>_44 = const false<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>_0 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb13__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">drop(_21)</td></tr></table>>];
    bb14__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb15__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">drop(_13)</td></tr></table>>];
    bb16__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">switchInt(_44)</td></tr></table>>];
    bb17__0_2721 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">(*_45) = [move _22, move _24, move _26]<br/>StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>_17 = move _21<br/>_16 = move _17 as std::boxed::Box&lt;[(anchor_lang::prelude::Pubkey, usize)]&gt; (PointerCoercion(Unsize))<br/>StorageDead(_21)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = std::slice::&lt;impl [(anchor_lang::prelude::Pubkey, usize)]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _16)</td></tr></table>>];
    bb0__0_2721 -> bb1__0_2721 [label="return"];
    bb1__0_2721 -> bb2__0_2721 [label="return"];
    bb2__0_2721 -> bb3__0_2721 [label="return"];
    bb3__0_2721 -> bb11__0_2721 [label="0"];
    bb3__0_2721 -> bb4__0_2721 [label="otherwise"];
    bb4__0_2721 -> bb5__0_2721 [label="return"];
    bb5__0_2721 -> bb6__0_2721 [label="return"];
    bb5__0_2721 -> bb13__0_2721 [label="unwind"];
    bb6__0_2721 -> bb17__0_2721 [label="success"];
    bb7__0_2721 -> bb8__0_2721 [label="return"];
    bb7__0_2721 -> bb16__0_2721 [label="unwind"];
    bb8__0_2721 -> bb9__0_2721 [label="return"];
    bb8__0_2721 -> bb16__0_2721 [label="unwind"];
    bb9__0_2721 -> bb10__0_2721 [label="return"];
    bb9__0_2721 -> bb16__0_2721 [label="unwind"];
    bb10__0_2721 -> bb12__0_2721 [label=""];
    bb11__0_2721 -> bb12__0_2721 [label=""];
    bb13__0_2721 -> bb14__0_2721 [label="return"];
    bb15__0_2721 -> bb14__0_2721 [label="return"];
    bb16__0_2721 -> bb14__0_2721 [label="0"];
    bb16__0_2721 -> bb15__0_2721 [label="otherwise"];
    bb17__0_2721 -> bb7__0_2721 [label="return"];
    bb17__0_2721 -> bb14__0_2721 [label="unwind"];
}
