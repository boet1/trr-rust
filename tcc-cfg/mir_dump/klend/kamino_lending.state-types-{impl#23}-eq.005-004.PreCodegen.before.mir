// MIR for `state::types::<impl at programs\klend\src\state\types.rs:52:30: 52:39>::eq` before PreCodegen

fn state::types::<impl at programs\klend\src\state\types.rs:52:30: 52:39>::eq(_1: &state::types::LiquidationReason, _2: &state::types::LiquidationReason) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _4: &state::types::LiquidationReason;
    let mut _6: &state::types::LiquidationReason;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: (&state::types::LiquidationReason, &state::types::LiquidationReason);
    let mut _11: &state::types::LiquidationReason;
    let mut _12: &state::types::LiquidationReason;
    let mut _13: isize;
    let mut _14: isize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: &state::types::LiquidationReason;
    let mut _20: &state::types::LiquidationReason;
    let mut _21: &state::types::LiquidationReason;
    let mut _22: &state::types::LiquidationReason;
    scope 1 {
        debug __self_tag => _3;
        let _5: isize;
        scope 2 {
            debug __arg1_tag => _5;
            let _15: &usize;
            let _16: &usize;
            scope 3 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = discriminant((*_4));
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_2);
        _5 = discriminant((*_6));
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        _9 = _5;
        _7 = Eq(move _8, move _9);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        StorageLive(_12);
        _12 = _2;
        _10 = (move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        _19 = deref_copy (_10.0: &state::types::LiquidationReason);
        _14 = discriminant((*_19));
        switchInt(move _14) -> [3: bb4, otherwise: bb3];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _0 = const false;
        goto -> bb7;
    }

    bb3: {
        _0 = const true;
        goto -> bb6;
    }

    bb4: {
        _20 = deref_copy (_10.1: &state::types::LiquidationReason);
        _13 = discriminant((*_20));
        switchInt(move _13) -> [3: bb5, otherwise: bb3];
    }

    bb5: {
        StorageLive(_15);
        _21 = deref_copy (_10.0: &state::types::LiquidationReason);
        _15 = &(((*_21) as ObligationOrder).0: usize);
        StorageLive(_16);
        _22 = deref_copy (_10.1: &state::types::LiquidationReason);
        _16 = &(((*_22) as ObligationOrder).0: usize);
        StorageLive(_17);
        _17 = (*_15);
        StorageLive(_18);
        _18 = (*_16);
        _0 = Eq(move _17, move _18);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_10);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }
}
