// MIR for `handlers::handler_flash_borrow_reserve_liquidity::__client_accounts_flash_borrow_reserve_liquidity::<impl at programs\klend\src\handlers\handler_flash_borrow_reserve_liquidity.rs:60:10: 60:18>::to_account_metas` before PreCodegen

fn handlers::handler_flash_borrow_reserve_liquidity::__client_accounts_flash_borrow_reserve_liquidity::<impl at programs\klend\src\handlers\handler_flash_borrow_reserve_liquidity.rs:60:10: 60:18>::to_account_metas(_1: &handlers::handler_flash_borrow_reserve_liquidity::__client_accounts_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let _8: ();
    let mut _9: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _10: anchor_lang::prelude::AccountMeta;
    let mut _11: anchor_lang::prelude::Pubkey;
    let _12: ();
    let mut _13: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _14: anchor_lang::prelude::AccountMeta;
    let mut _15: anchor_lang::prelude::Pubkey;
    let _16: ();
    let mut _17: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _18: anchor_lang::prelude::AccountMeta;
    let mut _19: anchor_lang::prelude::Pubkey;
    let _20: ();
    let mut _21: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let _24: ();
    let mut _25: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _26: anchor_lang::prelude::AccountMeta;
    let mut _27: anchor_lang::prelude::Pubkey;
    let _28: ();
    let mut _29: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _30: anchor_lang::prelude::AccountMeta;
    let mut _31: anchor_lang::prelude::Pubkey;
    let _32: ();
    let mut _33: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _34: anchor_lang::prelude::AccountMeta;
    let mut _35: anchor_lang::prelude::Pubkey;
    let _36: ();
    let mut _37: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _38: isize;
    let _40: ();
    let mut _41: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _42: anchor_lang::prelude::AccountMeta;
    let mut _43: anchor_lang::prelude::Pubkey;
    let _44: ();
    let mut _45: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _46: anchor_lang::prelude::AccountMeta;
    let mut _47: anchor_lang::prelude::Pubkey;
    let mut _48: &anchor_lang::prelude::Pubkey;
    let _49: ();
    let mut _50: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _51: isize;
    let _53: ();
    let mut _54: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _55: anchor_lang::prelude::AccountMeta;
    let mut _56: anchor_lang::prelude::Pubkey;
    let _57: ();
    let mut _58: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _59: anchor_lang::prelude::AccountMeta;
    let mut _60: anchor_lang::prelude::Pubkey;
    let mut _61: &anchor_lang::prelude::Pubkey;
    let _62: ();
    let mut _63: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _64: anchor_lang::prelude::AccountMeta;
    let mut _65: anchor_lang::prelude::Pubkey;
    let _66: ();
    let mut _67: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _68: anchor_lang::prelude::AccountMeta;
    let mut _69: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
        scope 2 {
            debug referrer_token_state => _39;
            let _39: &anchor_lang::prelude::Pubkey;
        }
        scope 3 {
            debug referrer_account => _52;
            let _52: &anchor_lang::prelude::Pubkey;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = anchor_lang::prelude::AccountMeta::new_readonly(move _7, const true) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _3;
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).1: anchor_lang::prelude::Pubkey);
        _10 = anchor_lang::prelude::AccountMeta::new_readonly(move _11, const false) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        StorageDead(_11);
        _8 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _9, move _10) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _3;
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).2: anchor_lang::prelude::Pubkey);
        _14 = anchor_lang::prelude::AccountMeta::new_readonly(move _15, const false) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        StorageDead(_15);
        _12 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _13, move _14) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _3;
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).3: anchor_lang::prelude::Pubkey);
        _18 = anchor_lang::prelude::AccountMeta::new(move _19, const false) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_19);
        _16 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _17, move _18) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _3;
        StorageLive(_22);
        StorageLive(_23);
        _23 = ((*_1).4: anchor_lang::prelude::Pubkey);
        _22 = anchor_lang::prelude::AccountMeta::new_readonly(move _23, const false) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        StorageDead(_23);
        _20 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _21, move _22) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut _3;
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_1).5: anchor_lang::prelude::Pubkey);
        _26 = anchor_lang::prelude::AccountMeta::new(move _27, const false) -> [return: bb12, unwind: bb36];
    }

    bb12: {
        StorageDead(_27);
        _24 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _25, move _26) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _3;
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_1).6: anchor_lang::prelude::Pubkey);
        _30 = anchor_lang::prelude::AccountMeta::new(move _31, const false) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        StorageDead(_31);
        _28 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _29, move _30) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _3;
        StorageLive(_34);
        StorageLive(_35);
        _35 = ((*_1).7: anchor_lang::prelude::Pubkey);
        _34 = anchor_lang::prelude::AccountMeta::new(move _35, const false) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        StorageDead(_35);
        _32 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _33, move _34) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).8: std::option::Option<anchor_lang::prelude::Pubkey>);
        _38 = discriminant((*_37));
        switchInt(move _38) -> [1: bb18, otherwise: bb21];
    }

    bb18: {
        StorageLive(_39);
        _39 = &(((*_37) as Some).0: anchor_lang::prelude::Pubkey);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _3;
        StorageLive(_42);
        StorageLive(_43);
        _43 = (*_39);
        _42 = anchor_lang::prelude::AccountMeta::new(move _43, const false) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        StorageDead(_43);
        _40 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _41, move _42) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        _36 = const ();
        StorageDead(_39);
        goto -> bb24;
    }

    bb21: {
        StorageLive(_44);
        StorageLive(_45);
        _45 = &mut _3;
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _47 = (*_48);
        _46 = anchor_lang::prelude::AccountMeta::new_readonly(move _47, const false) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        StorageDead(_47);
        _44 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _45, move _46) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_48);
        StorageDead(_44);
        _36 = const ();
        goto -> bb24;
    }

    bb24: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &((*_1).9: std::option::Option<anchor_lang::prelude::Pubkey>);
        _51 = discriminant((*_50));
        switchInt(move _51) -> [1: bb25, otherwise: bb28];
    }

    bb25: {
        StorageLive(_52);
        _52 = &(((*_50) as Some).0: anchor_lang::prelude::Pubkey);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut _3;
        StorageLive(_55);
        StorageLive(_56);
        _56 = (*_52);
        _55 = anchor_lang::prelude::AccountMeta::new(move _56, const false) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_56);
        _53 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _54, move _55) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        _49 = const ();
        StorageDead(_52);
        goto -> bb31;
    }

    bb28: {
        StorageLive(_57);
        StorageLive(_58);
        _58 = &mut _3;
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _60 = (*_61);
        _59 = anchor_lang::prelude::AccountMeta::new_readonly(move _60, const false) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        StorageDead(_60);
        _57 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _58, move _59) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_61);
        StorageDead(_57);
        _49 = const ();
        goto -> bb31;
    }

    bb31: {
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &mut _3;
        StorageLive(_64);
        StorageLive(_65);
        _65 = ((*_1).10: anchor_lang::prelude::Pubkey);
        _64 = anchor_lang::prelude::AccountMeta::new_readonly(move _65, const false) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        StorageDead(_65);
        _62 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _63, move _64) -> [return: bb33, unwind: bb36];
    }

    bb33: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &mut _3;
        StorageLive(_68);
        StorageLive(_69);
        _69 = ((*_1).11: anchor_lang::prelude::Pubkey);
        _68 = anchor_lang::prelude::AccountMeta::new_readonly(move _69, const false) -> [return: bb34, unwind: bb36];
    }

    bb34: {
        StorageDead(_69);
        _66 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _67, move _68) -> [return: bb35, unwind: bb36];
    }

    bb35: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb36 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
