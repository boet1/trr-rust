// MIR for `token_info::<impl at programs\klend\src\state\token_info.rs:281:1: 281:23>::is_enabled` before PreCodegen

fn token_info::<impl at programs\klend\src\state\token_info.rs:281:1: 281:23>::is_enabled(_1: &PythConfiguration) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: &anchor_lang::prelude::Pubkey;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let _5: anchor_lang::prelude::Pubkey;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: anchor_lang::prelude::Pubkey;
    let mut _9: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        StorageLive(_5);
        _5 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _2 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_6);
        _6 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_7);
        _9 = const _;
        _7 = &(*_9);
        _0 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _6, move _7) -> [return: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        _0 = const false;
        goto -> bb6;
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_2);
        return;
    }
}
