// MIR for `handlers::handler_init_obligation_farms_for_reserve::process` after PreCodegen

fn handlers::handler_init_obligation_farms_for_reserve::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug mode => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _4: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _6: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::Ref<'_, state::reserve::Reserve>;
    let _14: anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _16: ();
    let mut _17: bool;
    let mut _18: &state::reserve::ReserveStatus;
    let _19: state::reserve::ReserveStatus;
    let mut _20: &state::reserve::ReserveConfig;
    let _21: &state::reserve::Reserve;
    let mut _22: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _23: &state::reserve::ReserveStatus;
    let _24: state::reserve::ReserveStatus;
    let mut _25: !;
    let mut _26: anchor_lang::error::Error;
    let mut _27: anchor_lang::error::AnchorError;
    let mut _28: std::string::String;
    let mut _29: &LendingError;
    let _30: LendingError;
    let mut _31: u32;
    let mut _32: LendingError;
    let mut _33: std::string::String;
    let mut _34: &LendingError;
    let _35: LendingError;
    let mut _36: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _37: anchor_lang::error::ErrorOrigin;
    let mut _38: anchor_lang::error::Source;
    let mut _39: std::option::Option<anchor_lang::error::ComparedValues>;
    let _40: ();
    let mut _41: bool;
    let mut _42: u64;
    let mut _43: &state::reserve::Reserve;
    let mut _44: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _45: u64;
    let mut _46: !;
    let mut _47: anchor_lang::error::Error;
    let mut _48: anchor_lang::error::AnchorError;
    let mut _49: std::string::String;
    let mut _50: &LendingError;
    let _51: LendingError;
    let mut _52: u32;
    let mut _53: LendingError;
    let mut _54: std::string::String;
    let mut _55: &LendingError;
    let _56: LendingError;
    let mut _57: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _58: anchor_lang::error::ErrorOrigin;
    let mut _59: anchor_lang::error::Source;
    let mut _60: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _62: &state::reserve::Reserve;
    let _63: &state::reserve::Reserve;
    let mut _64: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _65: state::reserve::ReserveFarmKind;
    let mut _66: std::result::Result<state::reserve::ReserveFarmKind, num_enum::TryFromPrimitiveError<state::reserve::ReserveFarmKind>>;
    let mut _67: u8;
    let _68: ();
    let mut _69: bool;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &anchor_lang::prelude::Pubkey;
    let _72: anchor_lang::prelude::Pubkey;
    let mut _73: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _74: !;
    let mut _75: anchor_lang::error::Error;
    let mut _76: anchor_lang::error::AnchorError;
    let mut _77: std::string::String;
    let mut _78: &LendingError;
    let _79: LendingError;
    let mut _80: u32;
    let mut _81: LendingError;
    let mut _82: std::string::String;
    let mut _83: &LendingError;
    let _84: LendingError;
    let mut _85: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _86: anchor_lang::error::ErrorOrigin;
    let mut _87: anchor_lang::error::Source;
    let mut _88: std::option::Option<anchor_lang::error::ComparedValues>;
    let _89: ();
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _91: std::result::Result<(), anchor_lang::error::Error>;
    let mut _92: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>>;
    let _93: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>>;
    let mut _94: &anchor_lang::prelude::Pubkey;
    let mut _95: anchor_lang::prelude::Pubkey;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _101: ();
    let mut _109: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _110: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _111: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _112: &anchor_lang::prelude::Pubkey;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    scope 1 {
        debug reserve => _3;
        let _13: &&anchor_lang::prelude::Pubkey;
        scope 6 {
            debug obligation => _13;
            let _61: anchor_lang::prelude::Pubkey;
            let mut _104: &LendingError;
            let mut _105: &LendingError;
            let mut _106: &LendingError;
            let mut _107: &LendingError;
            let mut _108: &state::reserve::ReserveStatus;
            scope 7 {
                debug farm => _61;
                let _97: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _100: ();
                let mut _102: &LendingError;
                let mut _103: &LendingError;
                scope 8 {
                    debug residual => _97;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _100;
                    scope 11 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _109 = deref_copy (_1.1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _7 = &((*_109).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb53];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _4 = move _12;
        StorageDead(_12);
        _3 = &_4;
        _113 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _110 = deref_copy (_1.1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _15 = &((*_110).2: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _14 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _15) -> [return: bb7, unwind: bb52];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb55];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _119 = discriminant(_5);
        StorageDead(_5);
        goto -> bb46;
    }

    bb7: {
        StorageDead(_15);
        _13 = &(_14.0: &anchor_lang::prelude::Pubkey);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_3);
        _21 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _22) -> [return: bb8, unwind: bb51];
    }

    bb8: {
        StorageDead(_22);
        _20 = &((*_21).9: state::reserve::ReserveConfig);
        _19 = reserve::ReserveConfig::status(move _20) -> [return: bb9, unwind: bb51];
    }

    bb9: {
        _18 = &_19;
        StorageDead(_20);
        StorageLive(_23);
        _108 = const _;
        _23 = &(*_108);
        _17 = <reserve::ReserveStatus as PartialEq>::ne(move _18, move _23) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        switchInt(move _17) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_21);
        StorageDead(_19);
        _16 = const ();
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_3);
        _43 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _44) -> [return: bb17, unwind: bb51];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _107 = const _;
        _29 = &(*_107);
        _28 = LendingError::name(move _29) -> [return: bb13, unwind: bb51];
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        _32 = LendingError::ReserveObsolete;
        _31 = <LendingError as Into<u32>>::into(move _32) -> [return: bb14, unwind: bb50];
    }

    bb14: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        _106 = const _;
        _34 = &(*_106);
        _33 = <LendingError as ToString>::to_string(move _34) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_obligation_farms_for_reserve.rs", line: const 15_u32 };
        _37 = anchor_lang::error::ErrorOrigin::Source(move _38);
        StorageDead(_38);
        _36 = std::option::Option::<ErrorOrigin>::Some(move _37);
        StorageDead(_37);
        StorageLive(_39);
        _39 = std::option::Option::<ComparedValues>::None;
        _27 = anchor_lang::error::AnchorError { error_name: move _28, error_code_number: move _31, error_msg: move _33, error_origin: move _36, compared_values: move _39 };
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_28);
        _26 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _27) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        StorageDead(_27);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _26);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb44;
    }

    bb17: {
        StorageDead(_44);
        _42 = ((*_43).0: u64);
        StorageLive(_45);
        _45 = const _ as u64 (IntToInt);
        _41 = Eq(move _42, move _45);
        switchInt(move _41) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_43);
        _40 = const ();
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_3);
        _63 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _64) -> [return: bb24, unwind: bb51];
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_43);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _105 = const _;
        _50 = &(*_105);
        _49 = LendingError::name(move _50) -> [return: bb20, unwind: bb51];
    }

    bb20: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        _53 = LendingError::ReserveDeprecated;
        _52 = <LendingError as Into<u32>>::into(move _53) -> [return: bb21, unwind: bb49];
    }

    bb21: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _104 = const _;
        _55 = &(*_104);
        _54 = <LendingError as ToString>::to_string(move _55) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_obligation_farms_for_reserve.rs", line: const 20_u32 };
        _58 = anchor_lang::error::ErrorOrigin::Source(move _59);
        StorageDead(_59);
        _57 = std::option::Option::<ErrorOrigin>::Some(move _58);
        StorageDead(_58);
        StorageLive(_60);
        _60 = std::option::Option::<ComparedValues>::None;
        _48 = anchor_lang::error::AnchorError { error_name: move _49, error_code_number: move _52, error_msg: move _54, error_origin: move _57, compared_values: move _60 };
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_49);
        _47 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _48) -> [return: bb23, unwind: bb51];
    }

    bb23: {
        StorageDead(_48);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _47);
        StorageDead(_47);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb44;
    }

    bb24: {
        _62 = &(*_63);
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _2;
        _66 = <u8 as TryInto<reserve::ReserveFarmKind>>::try_into(move _67) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        StorageDead(_67);
        _65 = std::result::Result::<reserve::ReserveFarmKind, TryFromPrimitiveError<reserve::ReserveFarmKind>>::unwrap(move _66) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        StorageDead(_66);
        _61 = reserve::Reserve::get_farm(move _62, move _65) -> [return: bb27, unwind: bb51];
    }

    bb27: {
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_63);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_61;
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _111 = deref_copy (_1.1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _73 = &((*_111).5: anchor_lang::prelude::AccountInfo<'_>);
        _72 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _73) -> [return: bb28, unwind: bb51];
    }

    bb28: {
        _71 = &_72;
        StorageDead(_73);
        _69 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _70, move _71) -> [return: bb29, unwind: bb51];
    }

    bb29: {
        switchInt(move _69) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_72);
        _68 = const ();
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_1;
        _92 = &(*_93);
        StorageLive(_94);
        _112 = deref_copy (*_13);
        _94 = &(*_112);
        StorageLive(_95);
        _95 = _61;
        _91 = cpi_initialize_farmer_delegated(move _92, move _94, move _95) -> [return: bb36, unwind: bb51];
    }

    bb31: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _103 = const _;
        _78 = &(*_103);
        _77 = LendingError::name(move _78) -> [return: bb32, unwind: bb51];
    }

    bb32: {
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        _81 = LendingError::InvalidAccountInput;
        _80 = <LendingError as Into<u32>>::into(move _81) -> [return: bb33, unwind: bb48];
    }

    bb33: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        _102 = const _;
        _83 = &(*_102);
        _82 = <LendingError as ToString>::to_string(move _83) -> [return: bb34, unwind: bb48];
    }

    bb34: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_obligation_farms_for_reserve.rs", line: const 26_u32 };
        _86 = anchor_lang::error::ErrorOrigin::Source(move _87);
        StorageDead(_87);
        _85 = std::option::Option::<ErrorOrigin>::Some(move _86);
        StorageDead(_86);
        StorageLive(_88);
        _88 = std::option::Option::<ComparedValues>::None;
        _76 = anchor_lang::error::AnchorError { error_name: move _77, error_code_number: move _80, error_msg: move _82, error_origin: move _85, compared_values: move _88 };
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_77);
        _75 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _76) -> [return: bb35, unwind: bb51];
    }

    bb35: {
        StorageDead(_76);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _75);
        StorageDead(_75);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb43;
    }

    bb36: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        _90 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _91) -> [return: bb37, unwind: bb51];
    }

    bb37: {
        StorageDead(_91);
        _96 = discriminant(_90);
        switchInt(move _96) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_100);
        _100 = ((_90 as Continue).0: ());
        _89 = _100;
        StorageDead(_100);
        _115 = discriminant(_90);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_101);
        _101 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _101);
        StorageDead(_101);
        StorageDead(_61);
        drop(_14) -> [return: bb41, unwind: bb52];
    }

    bb39: {
        StorageLive(_97);
        _97 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_99);
        _99 = move _97;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _99) -> [return: bb40, unwind: bb54];
    }

    bb40: {
        StorageDead(_99);
        StorageDead(_97);
        _117 = discriminant(_90);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb43;
    }

    bb41: {
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb42, unwind: bb53];
    }

    bb42: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb47;
    }

    bb43: {
        StorageDead(_61);
        goto -> bb44;
    }

    bb44: {
        drop(_14) -> [return: bb45, unwind: bb52];
    }

    bb45: {
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb47;
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        drop(_77) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_49) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_28) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_14) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_4) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54 (cleanup): {
        _121 = discriminant(_90);
        goto -> bb51;
    }

    bb55 (cleanup): {
        _122 = discriminant(_5);
        goto -> bb53;
    }
}
