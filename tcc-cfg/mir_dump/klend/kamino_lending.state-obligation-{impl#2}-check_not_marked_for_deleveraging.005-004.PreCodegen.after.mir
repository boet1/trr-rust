// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::check_not_marked_for_deleveraging` after PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::check_not_marked_for_deleveraging(_1: &obligation::Obligation) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &state::obligation::Obligation;
    let mut _5: !;
    let _6: ();
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[&str; 2];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let mut _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let mut _18: &u64;
    let _19: &u64;
    let mut _20: anchor_lang::error::Error;
    let mut _21: anchor_lang::error::AnchorError;
    let mut _22: std::string::String;
    let mut _23: &LendingError;
    let _24: LendingError;
    let mut _25: u32;
    let mut _26: LendingError;
    let mut _27: std::string::String;
    let mut _28: &LendingError;
    let _29: LendingError;
    let mut _30: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _31: anchor_lang::error::ErrorOrigin;
    let mut _32: anchor_lang::error::Source;
    let mut _33: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _34: ();
    let mut _35: &LendingError;
    let mut _36: &LendingError;
    let mut _37: &[&str; 2];

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = obligation::Obligation::is_marked_for_deleveraging(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb10, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _37 = const _;
        _11 = &(*_37);
        _10 = &(*_11);
        _9 = move _10 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).24: u64);
        _18 = &(*_19);
        _17 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        _16 = [move _17];
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = move _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_14);
        _8 = Arguments::<'_>::new_v1(move _9, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_9);
        _7 = _print(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_7);
        _6 = const ();
        StorageDead(_6);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _36 = const _;
        _23 = &(*_36);
        _22 = LendingError::name(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = LendingError::ObligationCurrentlyMarkedForDeleveraging;
        _25 = <LendingError as Into<u32>>::into(move _26) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _35 = const _;
        _28 = &(*_35);
        _27 = <LendingError as ToString>::to_string(move _28) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\obligation.rs", line: const 546_u32 };
        _31 = anchor_lang::error::ErrorOrigin::Source(move _32);
        StorageDead(_32);
        _30 = std::option::Option::<ErrorOrigin>::Some(move _31);
        StorageDead(_31);
        StorageLive(_33);
        _33 = std::option::Option::<ComparedValues>::None;
        _21 = anchor_lang::error::AnchorError { error_name: move _22, error_code_number: move _25, error_msg: move _27, error_origin: move _30, compared_values: move _33 };
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_22);
        _20 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _21) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        StorageDead(_21);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _20);
        StorageDead(_20);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_34);
        _34 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _34);
        StorageDead(_34);
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_22) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}
