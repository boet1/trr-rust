digraph Mir_0_2596 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_price_usd(_1: &amp;ReErased scope_types::OraclePrices, _2: [u16; 4_usize]) -&gt; std::result::Result&lt;utils::prices::types::TimestampedPrice, anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased [u16; 4_usize];<br align="left"/>let mut _6: &amp;ReErased [u16; 4_usize];<br align="left"/>let _7: [u16; 4_usize];<br align="left"/>let mut _8: !;<br align="left"/>let _9: ();<br align="left"/>let mut _10: &amp;ReErased str;<br align="left"/>let _11: &amp;ReErased str;<br align="left"/>let mut _12: anchor_lang::error::Error;<br align="left"/>let mut _13: anchor_lang::error::AnchorError;<br align="left"/>let mut _14: std::string::String;<br align="left"/>let mut _15: &amp;ReErased LendingError;<br align="left"/>let _16: LendingError;<br align="left"/>let mut _17: u32;<br align="left"/>let mut _18: LendingError;<br align="left"/>let mut _19: std::string::String;<br align="left"/>let mut _20: &amp;ReErased LendingError;<br align="left"/>let _21: LendingError;<br align="left"/>let mut _22: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _23: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _24: anchor_lang::error::Source;<br align="left"/>let mut _25: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let _26: [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize];<br align="left"/>let mut _27: [u16; 4_usize];<br align="left"/>let mut _28: Closure(DefId(0:2597 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((u16,)) -&gt; std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;, []), (&amp;ReErased scope_types::OraclePrices,)]);<br align="left"/>let mut _29: &amp;ReErased scope_types::OraclePrices;<br align="left"/>let _30: usize;<br align="left"/>let mut _31: std::iter::TakeWhile&lt;std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;, Closure(DefId(0:2598 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#1}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;,)) -&gt; bool, [Region(BrAnon)]), ()])&gt;;<br align="left"/>let mut _32: std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;;<br align="left"/>let mut _33: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;];<br align="left"/>let mut _34: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize];<br align="left"/>let mut _35: Closure(DefId(0:2598 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#1}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;,)) -&gt; bool, [Region(BrAnon)]), ()]);<br align="left"/>let _36: ();<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: usize;<br align="left"/>let mut _39: !;<br align="left"/>let _40: ();<br align="left"/>let mut _41: &amp;ReErased str;<br align="left"/>let _42: &amp;ReErased str;<br align="left"/>let mut _43: anchor_lang::error::Error;<br align="left"/>let mut _44: anchor_lang::error::AnchorError;<br align="left"/>let mut _45: std::string::String;<br align="left"/>let mut _46: &amp;ReErased LendingError;<br align="left"/>let _47: LendingError;<br align="left"/>let mut _48: u32;<br align="left"/>let mut _49: LendingError;<br align="left"/>let mut _50: std::string::String;<br align="left"/>let mut _51: &amp;ReErased LendingError;<br align="left"/>let _52: LendingError;<br align="left"/>let mut _53: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _54: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _55: anchor_lang::error::Source;<br align="left"/>let mut _56: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let _57: ();<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: usize;<br align="left"/>let mut _60: !;<br align="left"/>let _61: (utils::prices::types::Price&lt;u64&gt;, u64);<br align="left"/>let mut _62: std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;;<br align="left"/>let _63: usize;<br align="left"/>let mut _64: usize;<br align="left"/>let mut _65: bool;<br align="left"/>let _66: std::boxed::Box&lt;Closure(DefId(0:2599 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#2}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), (utils::prices::types::Price&lt;u64&gt;,)]), std::alloc::Global&gt;;<br align="left"/>let mut _67: Closure(DefId(0:2599 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#2}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), (utils::prices::types::Price&lt;u64&gt;,)]);<br align="left"/>let mut _68: utils::prices::types::TimestampedPrice;<br align="left"/>let mut _69: std::boxed::Box&lt;dyn [Binder(Trait(std::ops::FnOnce&lt;()&gt;), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:3085 ~ core[c321]::ops::function::FnOnce::Output), args: [()], term: Term::Ty(std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;) }), [])] + ReErased, std::alloc::Global&gt;;<br align="left"/>let mut _70: std::boxed::Box&lt;Closure(DefId(0:2599 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#2}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), (utils::prices::types::Price&lt;u64&gt;,)]), std::alloc::Global&gt;;<br align="left"/>let mut _71: u64;<br align="left"/>let _72: u64;<br align="left"/>let mut _73: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _74: std::iter::Map&lt;std::iter::Flatten&lt;std::iter::Take&lt;std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;&gt;, Closure(DefId(0:2600 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#3}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased (utils::prices::types::Price&lt;u64&gt;, u64),)) -&gt; u64, []), ()])&gt;;<br align="left"/>let mut _75: std::iter::Flatten&lt;std::iter::Take&lt;std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;&gt;;<br align="left"/>let mut _76: std::iter::Take&lt;std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;;<br align="left"/>let mut _77: std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;;<br align="left"/>let mut _78: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;];<br align="left"/>let mut _79: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize];<br align="left"/>let mut _80: usize;<br align="left"/>let mut _81: Closure(DefId(0:2600 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#3}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased (utils::prices::types::Price&lt;u64&gt;, u64),)) -&gt; u64, []), ()]);<br align="left"/>let _82: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _83: utils::fraction::uint_types::U256;<br align="left"/>let _84: std::boxed::Box&lt;Closure(DefId(0:2601 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), ([std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize], usize, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)]), std::alloc::Global&gt;;<br align="left"/>let mut _85: Closure(DefId(0:2601 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), ([std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize], usize, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)]);<br align="left"/>let mut _86: utils::prices::types::TimestampedPrice;<br align="left"/>let mut _87: std::boxed::Box&lt;dyn [Binder(Trait(std::ops::FnOnce&lt;()&gt;), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:3085 ~ core[c321]::ops::function::FnOnce::Output), args: [()], term: Term::Ty(std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;) }), [])] + ReErased, std::alloc::Global&gt;;<br align="left"/>let mut _88: std::boxed::Box&lt;Closure(DefId(0:2601 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), ([std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize], usize, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)]), std::alloc::Global&gt;;<br align="left"/>let mut _89: u64;<br align="left"/>let mut _90: &amp;ReErased LendingError;<br align="left"/>let mut _91: &amp;ReErased LendingError;<br align="left"/>let mut _92: &amp;ReErased LendingError;<br align="left"/>let mut _93: &amp;ReErased LendingError;<br align="left"/>let mut _94: &amp;ReErased [u16; 4_usize];<br align="left"/>debug scope_prices =&gt; _1;<br align="left"/>debug tokens_chain =&gt; _2;<br align="left"/>debug price_chain_raw =&gt; _26;<br align="left"/>debug chain_len =&gt; _30;<br align="left"/>debug price =&gt; _61;<br align="left"/>debug price_load =&gt; _66;<br align="left"/>debug oldest_timestamp =&gt; _72;<br align="left"/>debug init_price =&gt; _82;<br align="left"/>debug price_load =&gt; _84;<br align="left"/>>;
    bb0__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;_2<br/>StorageLive(_6)<br/>_94 = const _<br/>_6 = &amp;(*_94)<br/></td></tr><tr><td align="left">_4 = &lt;[u16; 4] as PartialEq&gt;::eq(move _5, move _6)</td></tr></table>>];
    bb1__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = const &quot;Scope chain is not initialized properly&quot;<br/>_10 = &amp;(*_11)<br/></td></tr><tr><td align="left">_9 = solana_program::log::sol_log(move _10)</td></tr></table>>];
    bb3__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_91 = const _<br/>_15 = &amp;(*_91)<br/></td></tr><tr><td align="left">_14 = LendingError::name(move _15)</td></tr></table>>];
    bb4__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = LendingError::PriceNotValid<br/></td></tr><tr><td align="left">_17 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _18)</td></tr></table>>];
    bb5__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_90 = const _<br/>_20 = &amp;(*_90)<br/></td></tr><tr><td align="left">_19 = &lt;LendingError as ToString&gt;::to_string(move _20)</td></tr></table>>];
    bb6__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\utils\\prices\\scope.rs&quot;, line: const 84_u32 }<br/>_23 = anchor_lang::error::ErrorOrigin::Source(move _24)<br/>StorageDead(_24)<br/>_22 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _23)<br/>StorageDead(_23)<br/>StorageLive(_25)<br/>_25 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_13 = anchor_lang::error::AnchorError { error_name: move _14, error_code_number: move _17, error_msg: move _19, error_origin: move _22, compared_values: move _25 }<br/>StorageDead(_25)<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _13)</td></tr></table>>];
    bb7__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_0 = std::result::Result::&lt;TimestampedPrice, anchor_lang::error::Error&gt;::Err(move _12)<br/>StorageDead(_12)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _2<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;(*_1)<br/>_28 = {closure@programs\klend\src\utils\prices\scope.rs:87:44: 87:54} { scope_prices: move _29 }<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_26 = array::&lt;impl [u16; 4]&gt;::map::&lt;{closure@programs\klend\src\utils\prices\scope.rs:87:44: 87:54}, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt;(move _27, move _28)</td></tr></table>>];
    bb9__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = &amp;_26<br/>_33 = move _34 as &amp;[std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = core::slice::&lt;impl [std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;]&gt;::iter(move _33)</td></tr></table>>];
    bb10__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageLive(_35)<br/>_35 = {closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58}<br/></td></tr><tr><td align="left">_31 = &lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt; as Iterator&gt;::take_while::&lt;{closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58}&gt;(move _32, move _35)</td></tr></table>>];
    bb11__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;TakeWhile&lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt;, {closure@programs\klend\src\utils\prices\scope.rs:89:55: 89:58}&gt; as Iterator&gt;::count(move _31)</td></tr></table>>];
    bb12__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = _30<br/>_37 = Eq(move _38, const 0_usize)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb13__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = const &quot;Scope chain is empty&quot;<br/>_41 = &amp;(*_42)<br/></td></tr><tr><td align="left">_40 = solana_program::log::sol_log(move _41)</td></tr></table>>];
    bb14__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_42)<br/>StorageDead(_40)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_93 = const _<br/>_46 = &amp;(*_93)<br/></td></tr><tr><td align="left">_45 = LendingError::name(move _46)</td></tr></table>>];
    bb15__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = LendingError::NoPriceFound<br/></td></tr><tr><td align="left">_48 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _49)</td></tr></table>>];
    bb16__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_92 = const _<br/>_51 = &amp;(*_92)<br/></td></tr><tr><td align="left">_50 = &lt;LendingError as ToString&gt;::to_string(move _51)</td></tr></table>>];
    bb17__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\utils\\prices\\scope.rs&quot;, line: const 93_u32 }<br/>_54 = anchor_lang::error::ErrorOrigin::Source(move _55)<br/>StorageDead(_55)<br/>_53 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _54)<br/>StorageDead(_54)<br/>StorageLive(_56)<br/>_56 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_44 = anchor_lang::error::AnchorError { error_name: move _45, error_code_number: move _48, error_msg: move _50, error_origin: move _53, compared_values: move _56 }<br/>StorageDead(_56)<br/>StorageDead(_53)<br/>StorageDead(_50)<br/>StorageDead(_48)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _44)</td></tr></table>>];
    bb18__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_0 = std::result::Result::&lt;TimestampedPrice, anchor_lang::error::Error&gt;::Err(move _43)<br/>StorageDead(_43)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_36 = const ()<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = _30<br/>_58 = Eq(move _59, const 1_usize)<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb20__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = const 0_usize<br/>_64 = Len(_26)<br/>_65 = Lt(_63, _64)<br/></td></tr><tr><td align="left">assert(move _65, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _64, _63)</td></tr></table>>];
    bb21__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>_57 = const ()<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = &amp;_26<br/>_78 = move _79 as &amp;[std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">_77 = core::slice::&lt;impl [std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;]&gt;::iter(move _78)</td></tr></table>>];
    bb22__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_62 = _26[_63]<br/></td></tr><tr><td align="left">_61 = std::option::Option::&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;::unwrap(move _62)</td></tr></table>>];
    bb23__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_63)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>_67 = {closure@programs\klend\src\utils\prices\scope.rs:99:35: 99:42} { price: (_61.0: utils::prices::types::Price&lt;u64&gt;) }<br/></td></tr><tr><td align="left">_66 = Box::&lt;{closure@programs\klend\src\utils\prices\scope.rs:99:35: 99:42}&gt;::new(move _67)</td></tr></table>>];
    bb24__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = move _66<br/>_69 = move _70 as std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;&gt; (PointerCoercion(Unsize))<br/>StorageDead(_70)<br/>StorageLive(_71)<br/>_71 = (_61.1: u64)<br/>_68 = TimestampedPrice { price_load: move _69, timestamp: move _71 }<br/>StorageDead(_71)<br/>StorageDead(_69)<br/>_0 = std::result::Result::&lt;TimestampedPrice, anchor_lang::error::Error&gt;::Ok(move _68)<br/>StorageDead(_68)<br/>StorageDead(_66)<br/>StorageDead(_61)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageLive(_80)<br/>_80 = _30<br/></td></tr><tr><td align="left">_76 = &lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt; as Iterator&gt;::take(move _77, move _80)</td></tr></table>>];
    bb26__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_77)<br/></td></tr><tr><td align="left">_75 = &lt;std::iter::Take&lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt; as Iterator&gt;::flatten(move _76)</td></tr></table>>];
    bb27__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageLive(_81)<br/>_81 = {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17}<br/></td></tr><tr><td align="left">_74 = &lt;Flatten&lt;std::iter::Take&lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;&gt; as Iterator&gt;::map::&lt;u64, {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17}&gt;(move _75, move _81)</td></tr></table>>];
    bb28__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">_73 = &lt;std::iter::Map&lt;Flatten&lt;std::iter::Take&lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;&gt;, {closure@programs\klend\src\utils\prices\scope.rs:110:14: 110:17}&gt; as Iterator&gt;::min(move _74)</td></tr></table>>];
    bb29__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/></td></tr><tr><td align="left">_72 = std::option::Option::&lt;u64&gt;::unwrap(move _73)</td></tr></table>>];
    bb30__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/></td></tr><tr><td align="left">_83 = &lt;uint_types::U256 as From&lt;u64&gt;&gt;::from(const 1_u64)</td></tr></table>>];
    bb31__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_82 = prices::types::Price::&lt;uint_types::U256&gt; { value: move _83, exp: const 0_u32 }<br/>StorageDead(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_85 = {closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38} { price_chain_raw: _26, chain_len: _30, init_price: _82 }<br/></td></tr><tr><td align="left">_84 = Box::&lt;{closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38}&gt;::new(move _85)</td></tr></table>>];
    bb32__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>_88 = move _84<br/>_87 = move _88 as std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;&gt; (PointerCoercion(Unsize))<br/>StorageDead(_88)<br/>StorageLive(_89)<br/>_89 = _72<br/>_86 = TimestampedPrice { price_load: move _87, timestamp: move _89 }<br/>StorageDead(_89)<br/>StorageDead(_87)<br/>_0 = std::result::Result::&lt;TimestampedPrice, anchor_lang::error::Error&gt;::Ok(move _86)<br/>StorageDead(_86)<br/>StorageDead(_84)<br/>StorageDead(_82)<br/>StorageDead(_72)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left">return</td></tr></table>>];
    bb35__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">35 (cleanup)</td></tr><tr><td align="left">drop(_45)</td></tr></table>>];
    bb36__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">36 (cleanup)</td></tr><tr><td align="left">drop(_14)</td></tr></table>>];
    bb37__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">37 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_2596 -> bb1__0_2596 [label="return"];
    bb1__0_2596 -> bb8__0_2596 [label="0"];
    bb1__0_2596 -> bb2__0_2596 [label="otherwise"];
    bb2__0_2596 -> bb3__0_2596 [label="return"];
    bb3__0_2596 -> bb4__0_2596 [label="return"];
    bb4__0_2596 -> bb5__0_2596 [label="return"];
    bb4__0_2596 -> bb36__0_2596 [label="unwind"];
    bb5__0_2596 -> bb6__0_2596 [label="return"];
    bb5__0_2596 -> bb36__0_2596 [label="unwind"];
    bb6__0_2596 -> bb7__0_2596 [label="return"];
    bb6__0_2596 -> bb37__0_2596 [label="unwind"];
    bb7__0_2596 -> bb34__0_2596 [label=""];
    bb8__0_2596 -> bb9__0_2596 [label="return"];
    bb9__0_2596 -> bb10__0_2596 [label="return"];
    bb10__0_2596 -> bb11__0_2596 [label="return"];
    bb11__0_2596 -> bb12__0_2596 [label="return"];
    bb12__0_2596 -> bb19__0_2596 [label="0"];
    bb12__0_2596 -> bb13__0_2596 [label="otherwise"];
    bb13__0_2596 -> bb14__0_2596 [label="return"];
    bb14__0_2596 -> bb15__0_2596 [label="return"];
    bb15__0_2596 -> bb16__0_2596 [label="return"];
    bb15__0_2596 -> bb35__0_2596 [label="unwind"];
    bb16__0_2596 -> bb17__0_2596 [label="return"];
    bb16__0_2596 -> bb35__0_2596 [label="unwind"];
    bb17__0_2596 -> bb18__0_2596 [label="return"];
    bb17__0_2596 -> bb37__0_2596 [label="unwind"];
    bb18__0_2596 -> bb33__0_2596 [label=""];
    bb19__0_2596 -> bb21__0_2596 [label="0"];
    bb19__0_2596 -> bb20__0_2596 [label="otherwise"];
    bb20__0_2596 -> bb22__0_2596 [label="success"];
    bb21__0_2596 -> bb25__0_2596 [label="return"];
    bb22__0_2596 -> bb23__0_2596 [label="return"];
    bb23__0_2596 -> bb24__0_2596 [label="return"];
    bb24__0_2596 -> bb33__0_2596 [label=""];
    bb25__0_2596 -> bb26__0_2596 [label="return"];
    bb26__0_2596 -> bb27__0_2596 [label="return"];
    bb27__0_2596 -> bb28__0_2596 [label="return"];
    bb28__0_2596 -> bb29__0_2596 [label="return"];
    bb29__0_2596 -> bb30__0_2596 [label="return"];
    bb30__0_2596 -> bb31__0_2596 [label="return"];
    bb31__0_2596 -> bb32__0_2596 [label="return"];
    bb32__0_2596 -> bb34__0_2596 [label=""];
    bb33__0_2596 -> bb34__0_2596 [label=""];
    bb35__0_2596 -> bb37__0_2596 [label="return"];
    bb36__0_2596 -> bb37__0_2596 [label="return"];
}
