digraph Mir_0_2557 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn pyth::&lt;impl From&lt;pyth_solana_receiver_sdk::price_update::Price&gt; for TimestampedPrice&gt;::from(_1: pyth_solana_receiver_sdk::price_update::Price) -&gt; utils::prices::types::TimestampedPrice<br align="left"/>let _2: u64;<br align="left"/>let mut _3: std::result::Result&lt;u64, std::num::TryFromIntError&gt;;<br align="left"/>let mut _4: i64;<br align="left"/>let _5: u32;<br align="left"/>let mut _6: i32;<br align="left"/>let mut _7: std::option::Option&lt;i32&gt;;<br align="left"/>let mut _8: i32;<br align="left"/>let _9: utils::prices::types::Price&lt;u64&gt;;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: u32;<br align="left"/>let _12: u64;<br align="left"/>let mut _13: std::result::Result&lt;u64, std::num::TryFromIntError&gt;;<br align="left"/>let mut _14: i64;<br align="left"/>let _15: std::boxed::Box&lt;Closure(DefId(0:2558 ~ kamino_lending[6389]::utils::prices::pyth::{impl#0}::from::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), (utils::prices::types::Price&lt;u64&gt;,)]), std::alloc::Global&gt;;<br align="left"/>let mut _16: Closure(DefId(0:2558 ~ kamino_lending[6389]::utils::prices::pyth::{impl#0}::from::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), (utils::prices::types::Price&lt;u64&gt;,)]);<br align="left"/>let mut _17: std::boxed::Box&lt;dyn [Binder(Trait(std::ops::FnOnce&lt;()&gt;), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:3085 ~ core[c321]::ops::function::FnOnce::Output), args: [()], term: Term::Ty(std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;) }), [])] + ReErased, std::alloc::Global&gt;;<br align="left"/>let mut _18: std::boxed::Box&lt;Closure(DefId(0:2558 ~ kamino_lending[6389]::utils::prices::pyth::{impl#0}::from::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), (utils::prices::types::Price&lt;u64&gt;,)]), std::alloc::Global&gt;;<br align="left"/>let mut _19: u64;<br align="left"/>debug pyth_price =&gt; _1;<br align="left"/>debug value =&gt; _2;<br align="left"/>debug exp =&gt; _5;<br align="left"/>debug price =&gt; _9;<br align="left"/>debug timestamp =&gt; _12;<br align="left"/>debug price_load =&gt; _15;<br align="left"/>>;
    bb0__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = (_1.0: i64)<br/></td></tr><tr><td align="left">_3 = &lt;u64 as TryFrom&lt;i64&gt;&gt;::try_from(move _4)</td></tr></table>>];
    bb1__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">_2 = std::result::Result::&lt;u64, TryFromIntError&gt;::unwrap(move _3)</td></tr></table>>];
    bb2__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = (_1.2: i32)<br/></td></tr><tr><td align="left">_7 = core::num::&lt;impl i32&gt;::checked_abs(move _8)</td></tr></table>>];
    bb3__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = std::option::Option::&lt;i32&gt;::unwrap(move _7)</td></tr></table>>];
    bb4__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_5 = move _6 as u32 (IntToInt)<br/>StorageDead(_6)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _2<br/>StorageLive(_11)<br/>_11 = _5<br/>_9 = prices::types::Price::&lt;u64&gt; { value: move _10, exp: move _11 }<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = (_1.3: i64)<br/></td></tr><tr><td align="left">_13 = &lt;i64 as TryInto&lt;u64&gt;&gt;::try_into(move _14)</td></tr></table>>];
    bb5__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = std::result::Result::&lt;u64, TryFromIntError&gt;::unwrap(move _13)</td></tr></table>>];
    bb6__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = {closure@programs\klend\src\utils\prices\pyth.rs:102:35: 102:42} { price: _9 }<br/></td></tr><tr><td align="left">_15 = Box::&lt;{closure@programs\klend\src\utils\prices\pyth.rs:102:35: 102:42}&gt;::new(move _16)</td></tr></table>>];
    bb7__0_2557 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = move _15<br/>_17 = move _18 as std::boxed::Box&lt;dyn std::ops::FnOnce() -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;&gt; (PointerCoercion(Unsize))<br/>StorageDead(_18)<br/>StorageLive(_19)<br/>_19 = _12<br/>_0 = TimestampedPrice { price_load: move _17, timestamp: move _19 }<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2557 -> bb1__0_2557 [label="return"];
    bb1__0_2557 -> bb2__0_2557 [label="return"];
    bb2__0_2557 -> bb3__0_2557 [label="return"];
    bb3__0_2557 -> bb4__0_2557 [label="return"];
    bb4__0_2557 -> bb5__0_2557 [label="return"];
    bb5__0_2557 -> bb6__0_2557 [label="return"];
    bb6__0_2557 -> bb7__0_2557 [label="return"];
}
