// MIR for `cpi_initialize_farmer_delegated` after PreCodegen

fn cpi_initialize_farmer_delegated(_1: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>>, _2: &anchor_lang::prelude::Pubkey, _3: anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug obligation => _2;
    debug farm => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _6: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _14: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let _17: anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: &farms::accounts::InitializeUser;
    let _21: farms::accounts::InitializeUser;
    let mut _22: anchor_lang::prelude::Pubkey;
    let mut _23: &anchor_lang::prelude::AccountInfo<'_>;
    let _24: anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _26: anchor_lang::prelude::Pubkey;
    let mut _27: &anchor_lang::prelude::Signer<'_>;
    let mut _28: anchor_lang::prelude::Pubkey;
    let mut _29: anchor_lang::prelude::Pubkey;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: anchor_lang::prelude::Pubkey;
    let mut _34: &anchor_lang::prelude::AccountInfo<'_>;
    let _35: anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let _39: anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _41: std::option::Option<bool>;
    let mut _43: &farms::instruction::InitializeUser;
    let _44: farms::instruction::InitializeUser;
    let mut _46: anchor_lang::prelude::Pubkey;
    let mut _47: &anchor_lang::prelude::AccountInfo<'_>;
    let _48: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _49: &anchor_lang::prelude::Program<'_, farms::program::Farms>;
    let mut _50: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _51: std::vec::Vec<u8>;
    let _53: [&[u8]; 3];
    let mut _54: &[u8];
    let mut _55: &[u8];
    let _56: &[u8];
    let mut _57: &[u8];
    let _58: &[u8];
    let mut _59: &[u8];
    let _60: &[u8];
    let mut _61: &anchor_lang::prelude::Pubkey;
    let mut _62: &[u8];
    let mut _63: &[u8; 1];
    let _64: &[u8; 1];
    let _65: [u8; 1];
    let mut _66: u8;
    let mut _67: u64;
    let mut _68: &state::lending_market::LendingMarket;
    let mut _69: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _71: &handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _72: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _73: &solana_program::instruction::Instruction;
    let _74: &solana_program::instruction::Instruction;
    let mut _75: &[anchor_lang::prelude::AccountInfo<'_>];
    let _76: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _77: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _78: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _79: &[&[&[u8]]];
    let mut _80: &[&[&[u8]]; 1];
    let _81: &[&[&[u8]]; 1];
    let _82: [&[&[u8]]; 1];
    let mut _83: &[&[u8]];
    let mut _84: &[&[u8]; 3];
    let mut _86: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _87: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _88: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _89: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _90: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _91: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _92: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _93: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _94: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _95: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    scope 1 {
        debug lending_market => _4;
        let _13: anchor_lang::prelude::Pubkey;
        scope 6 {
            debug lending_market_key => _13;
            let _15: anchor_lang::prelude::Pubkey;
            scope 7 {
                debug farmer => _15;
                let _19: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
                scope 8 {
                    debug accounts => _19;
                    let _42: std::vec::Vec<u8>;
                    let mut _85: &farms::instruction::InitializeUser;
                    scope 9 {
                        debug data => _42;
                        let _45: solana_program::instruction::Instruction;
                        scope 10 {
                            debug instruction => _45;
                            let _52: &[&[u8]; 3];
                            scope 11 {
                                debug lending_market_authority_signer_seeds => _52;
                                let _70: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
                                scope 12 {
                                    debug account_infos => _70;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        _97 = const false;
        _96 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _86 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _7 = &((*_86).7: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _4 = move _12;
        StorageDead(_12);
        _98 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        _87 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _14 = &((*_87).7: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _13 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _14) -> [return: bb7, unwind: bb45];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb51];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _100 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb36;
    }

    bb7: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _88 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _18 = &((*_88).6: anchor_lang::prelude::AccountInfo<'_>);
        _17 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _18) -> [return: bb8, unwind: bb45];
    }

    bb8: {
        _16 = &_17;
        StorageDead(_18);
        _15 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _16) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        StorageDead(_16);
        drop(_17) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _89 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _25 = &((*_89).3: anchor_lang::prelude::AccountInfo<'_>);
        _24 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _25) -> [return: bb11, unwind: bb45];
    }

    bb11: {
        _23 = &_24;
        StorageDead(_25);
        _22 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _23) -> [return: bb12, unwind: bb43];
    }

    bb12: {
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        _90 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _27 = &((*_90).0: anchor_lang::prelude::Signer<'_>);
        _26 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _27) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        StorageDead(_27);
        StorageLive(_28);
        _28 = _15;
        StorageLive(_29);
        _29 = _3;
        StorageLive(_30);
        StorageLive(_31);
        _91 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _31 = &((*_91).1: anchor_lang::prelude::AccountInfo<'_>);
        _30 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _31) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_32);
        _32 = (*_2);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _92 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _36 = &((*_92).10: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _35 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _36) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        _34 = &_35;
        StorageDead(_36);
        _33 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _34) -> [return: bb16, unwind: bb42];
    }

    bb16: {
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _93 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _40 = &((*_93).9: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _39 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _40) -> [return: bb17, unwind: bb42];
    }

    bb17: {
        _38 = &_39;
        StorageDead(_40);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _38) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        StorageDead(_38);
        _21 = farms::accounts::InitializeUser { authority: move _22, payer: move _26, owner: move _30, delegatee: move _32, user_state: move _28, farm_state: move _29, system_program: move _33, rent: move _37 };
        _20 = &_21;
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_22);
        StorageLive(_41);
        _41 = std::option::Option::<bool>::None;
        _19 = <farms::accounts::InitializeUser as anchor_lang::ToAccountMetas>::to_account_metas(move _20, move _41) -> [return: bb19, unwind: bb41];
    }

    bb19: {
        _97 = const true;
        StorageDead(_41);
        StorageDead(_20);
        drop(_39) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        StorageDead(_39);
        drop(_35) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        StorageDead(_35);
        drop(_24) -> [return: bb22, unwind: bb50];
    }

    bb22: {
        StorageDead(_24);
        StorageDead(_21);
        StorageLive(_42);
        StorageLive(_43);
        _85 = const _;
        _43 = &(*_85);
        _42 = <farms::instruction::InitializeUser as InstructionData>::data(move _43) -> [return: bb23, unwind: bb50];
    }

    bb23: {
        _96 = const true;
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _94 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _49 = &((*_94).8: anchor_lang::prelude::Program<'_, farms::program::Farms>);
        _48 = <anchor_lang::prelude::Program<'_, Farms> as Deref>::deref(move _49) -> [return: bb24, unwind: bb48];
    }

    bb24: {
        _47 = &(*_48);
        StorageDead(_49);
        _46 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _47) -> [return: bb25, unwind: bb48];
    }

    bb25: {
        StorageDead(_47);
        StorageLive(_50);
        _97 = const false;
        _50 = move _19;
        StorageLive(_51);
        _96 = const false;
        _51 = move _42;
        _45 = Instruction { program_id: move _46, accounts: move _50, data: move _51 };
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_48);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = const _;
        _55 = &(*_56);
        _54 = _55;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_13;
        _60 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _61) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = <[u8] as AsRef<[u8]>>::as_ref(move _59) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _57 = &(*_58);
        StorageDead(_59);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_4;
        _68 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _69) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        StorageDead(_69);
        _67 = ((*_68).1: u64);
        _66 = move _67 as u8 (IntToInt);
        StorageDead(_67);
        _65 = [move _66];
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = move _63 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_63);
        _53 = [move _54, move _57, move _62];
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_54);
        _52 = &_53;
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_70);
        StorageLive(_71);
        _95 = deref_copy ((*_1).1: &mut handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_>);
        _71 = &(*_95);
        _70 = <handlers::handler_init_obligation_farms_for_reserve::InitObligationFarmsForReserve<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _71) -> [return: bb29, unwind: bb38];
    }

    bb29: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_45;
        _73 = &(*_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_70;
        _77 = &(*_78);
        _76 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _77) -> [return: bb30, unwind: bb37];
    }

    bb30: {
        _75 = &(*_76);
        StorageDead(_77);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_52);
        _83 = move _84 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_84);
        _82 = [move _83];
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_80);
        _72 = invoke_signed(move _73, move _75, move _79) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_75);
        StorageDead(_73);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into}>(move _72, <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into) -> [return: bb32, unwind: bb37];
    }

    bb32: {
        StorageDead(_72);
        drop(_70) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_53);
        StorageDead(_52);
        drop(_45) -> [return: bb34, unwind: bb48];
    }

    bb34: {
        StorageDead(_45);
        _96 = const false;
        StorageDead(_42);
        _97 = const false;
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_13);
        drop(_4) -> [return: bb35, unwind: bb46];
    }

    bb35: {
        StorageDead(_4);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_70) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_45) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_35) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_24) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_39) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_35) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_24) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_17) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_4) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47 (cleanup): {
        drop(_42) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_96) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_19) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_97) -> [0: bb45, otherwise: bb49];
    }

    bb51 (cleanup): {
        _102 = discriminant(_5);
        goto -> bb46;
    }
}
