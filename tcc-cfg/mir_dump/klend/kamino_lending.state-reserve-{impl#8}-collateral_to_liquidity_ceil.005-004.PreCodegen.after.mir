// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:874:1: 874:28>::collateral_to_liquidity_ceil` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:874:1: 874:28>::collateral_to_liquidity_ceil(_1: &reserve::CollateralExchangeRate, _2: u64) -> u64 {
    debug self => _1;
    debug collateral_amount => _2;
    let mut _0: u64;
    let _3: utils::fraction::uint_types::U256;
    let mut _4: u64;
    let mut _6: utils::fraction::BigFraction;
    let mut _7: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: u128;
    let mut _11: std::option::Option<utils::fraction::uint_types::U256>;
    let mut _12: std::option::Option<utils::fraction::uint_types::U256>;
    let mut _13: std::option::Option<utils::fraction::uint_types::U256>;
    let mut _14: utils::fraction::uint_types::U256;
    let mut _15: utils::fraction::uint_types::U256;
    let mut _16: {closure@programs\klend\src\state\reserve.rs:902:23: 902:28};
    let mut _17: &utils::fraction::uint_types::U256;
    let mut _18: {closure@programs\klend\src\state\reserve.rs:903:23: 903:28};
    let mut _19: &utils::fraction::uint_types::U256;
    let mut _20: &str;
    let _21: &str;
    let mut _23: utils::fraction::uint_types::U256;
    let mut _25: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, LendingError>;
    let mut _26: utils::fraction::BigFraction;
    let mut _27: &str;
    let _28: &str;
    let mut _29: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug collateral_amount_u256 => _3;
        let _5: utils::fraction::uint_types::U256;
        scope 2 {
            debug liquidity_sbf => _5;
            let _8: utils::fraction::uint_types::U256;
            scope 3 {
                debug collateral_supply_u256 => _8;
                let _10: utils::fraction::uint_types::U256;
                scope 4 {
                    debug liquidity_ceil_sbf => _10;
                    let _22: utils::fraction::BigFraction;
                    scope 5 {
                        debug liquidity_ceil_bf => _22;
                        let _24: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        scope 6 {
                            debug liquidity_ceil_f => _24;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _2;
        _3 = <uint_types::U256 as From<u64>>::from(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _6 = <utils::fraction::BigFraction as From<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::from(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _5 = (_6.0: utils::fraction::uint_types::U256);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).0: u128);
        _8 = <uint_types::U256 as From<u128>>::from(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _5;
        _13 = uint_types::U256::checked_mul(move _14, move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_8;
        _16 = {closure@programs\klend\src\state\reserve.rs:902:23: 902:28} { collateral_supply_u256: move _17 };
        StorageDead(_17);
        _12 = std::option::Option::<uint_types::U256>::and_then::<uint_types::U256, {closure@programs\klend\src\state\reserve.rs:902:23: 902:28}>(move _13, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_13);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_8;
        _18 = {closure@programs\klend\src\state\reserve.rs:903:23: 903:28} { collateral_supply_u256: move _19 };
        StorageDead(_19);
        _11 = std::option::Option::<uint_types::U256>::and_then::<uint_types::U256, {closure@programs\klend\src\state\reserve.rs:903:23: 903:28}>(move _12, move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_12);
        StorageLive(_20);
        StorageLive(_21);
        _21 = const "collateral_to_liquidity_ceil: liquidity_amount overflow on calculation";
        _20 = &(*_21);
        _10 = std::option::Option::<uint_types::U256>::expect(move _11, move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _10;
        _22 = utils::fraction::BigFraction(move _23);
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _22;
        _25 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as TryFrom<utils::fraction::BigFraction>>::try_from(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const "collateral_to_liquidity_ceil: liquidity_amount overflow on fraction conversion";
        _27 = &(*_28);
        _24 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, LendingError>::expect(move _25, move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_28);
        StorageLive(_29);
        _29 = &_24;
        _0 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_ceil::<u64>(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }
}
