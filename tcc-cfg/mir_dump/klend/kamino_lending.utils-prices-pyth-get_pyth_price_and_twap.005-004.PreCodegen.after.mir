// MIR for `get_pyth_price_and_twap` after PreCodegen

fn get_pyth_price_and_twap(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> {
    debug pyth_price_info => _1;
    let mut _0: std::result::Result<utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error>;
    let _2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, pyth_solana_receiver_sdk::price_update::PriceFeedMessage>;
    let mut _4: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceFeedMessage, anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _10: pyth_solana_receiver_sdk::price_update::PriceFeedMessage;
    let mut _13: (pyth_solana_receiver_sdk::price_update::Price, pyth_solana_receiver_sdk::price_update::Price);
    let mut _14: pyth_solana_receiver_sdk::price_update::PriceFeedMessage;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _17: std::result::Result<(), anchor_lang::error::Error>;
    let mut _18: &pyth_solana_receiver_sdk::price_update::Price;
    let _19: &pyth_solana_receiver_sdk::price_update::Price;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _27: std::result::Result<(), anchor_lang::error::Error>;
    let mut _28: &pyth_solana_receiver_sdk::price_update::Price;
    let _29: &pyth_solana_receiver_sdk::price_update::Price;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _35: utils::prices::types::TimestampedPriceWithTwap;
    let mut _36: utils::prices::types::TimestampedPrice;
    let mut _37: pyth_solana_receiver_sdk::price_update::Price;
    let mut _38: std::option::Option<utils::prices::types::TimestampedPrice>;
    let mut _39: utils::prices::types::TimestampedPrice;
    let mut _40: pyth_solana_receiver_sdk::price_update::Price;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    scope 1 {
        debug price_feed => _2;
        let _11: pyth_solana_receiver_sdk::price_update::Price;
        let _12: pyth_solana_receiver_sdk::price_update::Price;
        scope 6 {
            debug price => _11;
            debug twap => _12;
            let _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _24: ();
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: ();
            scope 7 {
                debug residual => _21;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _24;
                scope 10 {
                }
            }
            scope 11 {
                debug residual => _31;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _34;
                scope 14 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = load_price_feed_from_account_info(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<PriceFeedMessage, anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: pyth_solana_receiver_sdk::price_update::PriceFeedMessage);
        _2 = _10;
        StorageDead(_10);
        _41 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _2;
        _13 = into_pyth_price_and_twap(move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _9) -> [return: bb6, unwind: bb27];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _51 = discriminant(_3);
        StorageDead(_3);
        goto -> bb21;
    }

    bb7: {
        StorageDead(_14);
        StorageLive(_11);
        _11 = (_13.0: pyth_solana_receiver_sdk::price_update::Price);
        StorageLive(_12);
        _12 = (_13.1: pyth_solana_receiver_sdk::price_update::Price);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_11;
        _18 = &(*_19);
        _17 = validate_pyth_confidence(move _18, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _16 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        StorageDead(_17);
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_16 as Continue).0: ());
        _15 = _24;
        StorageDead(_24);
        _43 = discriminant(_16);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_12;
        _28 = &(*_29);
        _27 = validate_pyth_confidence(move _28, const _) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _23) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _49 = discriminant(_16);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb20;
    }

    bb13: {
        StorageDead(_28);
        _26 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _27) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        StorageDead(_27);
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_26 as Continue).0: ());
        _25 = _34;
        StorageDead(_34);
        _45 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _11;
        _36 = <pyth_solana_receiver_sdk::price_update::Price as Into<TimestampedPrice>>::into(move _37) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_31);
        _31 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        _47 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb20;
    }

    bb18: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _12;
        _39 = <pyth_solana_receiver_sdk::price_update::Price as Into<TimestampedPrice>>::into(move _40) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        StorageDead(_40);
        _38 = std::option::Option::<TimestampedPrice>::Some(move _39);
        StorageDead(_39);
        _35 = TimestampedPriceWithTwap { price: move _36, twap: move _38 };
        StorageDead(_38);
        StorageDead(_36);
        _0 = std::result::Result::<TimestampedPriceWithTwap, anchor_lang::error::Error>::Ok(move _35);
        StorageDead(_35);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_2);
        goto -> bb22;
    }

    bb20: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_2);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_36) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        _53 = discriminant(_26);
        goto -> bb24;
    }

    bb26 (cleanup): {
        _54 = discriminant(_16);
        goto -> bb24;
    }

    bb27 (cleanup): {
        _55 = discriminant(_3);
        goto -> bb24;
    }
}
