digraph Mir_0_1333 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn add_referrer_fee(_1: &amp;ReErased mut state::reserve::Reserve, _2: &amp;ReErased mut state::referral::ReferrerTokenState, _3: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _4: u128;<br align="left"/>let mut _5: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: (u128, bool);<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: (u128, bool);<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: (u128, bool);<br align="left"/>let mut _12: ();<br align="left"/>debug borrow_reserve =&gt; _1;<br align="left"/>debug referrer_token_state =&gt; _2;<br align="left"/>debug referrer_fee =&gt; _3;<br align="left"/>debug referrer_fee_sf =&gt; _4;<br align="left"/>>;
    bb0__0_1333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;_3<br/></td></tr><tr><td align="left">_4 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as utils::fraction::FractionExtra&gt;::to_sf(move _5)</td></tr></table>>];
    bb1__0_1333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>_6 = _4<br/>_7 = CheckedAdd(((*_2).3: u128), _6)<br/></td></tr><tr><td align="left">assert(!move (_7.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, ((*_2).3: u128), move _6)</td></tr></table>>];
    bb2__0_1333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">((*_2).3: u128) = move (_7.0: u128)<br/>StorageDead(_6)<br/>StorageLive(_8)<br/>_8 = _4<br/>_9 = CheckedAdd(((*_2).2: u128), _8)<br/></td></tr><tr><td align="left">assert(!move (_9.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, ((*_2).2: u128), move _8)</td></tr></table>>];
    bb3__0_1333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">((*_2).2: u128) = move (_9.0: u128)<br/>StorageDead(_8)<br/>StorageLive(_10)<br/>_10 = _4<br/>_11 = CheckedAdd((((*_1).5: state::reserve::ReserveLiquidity).12: u128), _10)<br/></td></tr><tr><td align="left">assert(!move (_11.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, (((*_1).5: state::reserve::ReserveLiquidity).12: u128), move _10)</td></tr></table>>];
    bb4__0_1333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">(((*_1).5: state::reserve::ReserveLiquidity).12: u128) = move (_11.0: u128)<br/>StorageDead(_10)<br/>StorageLive(_12)<br/>_12 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _12)<br/>StorageDead(_12)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1333 -> bb1__0_1333 [label="return"];
    bb1__0_1333 -> bb2__0_1333 [label="success"];
    bb2__0_1333 -> bb3__0_1333 [label="success"];
    bb3__0_1333 -> bb4__0_1333 [label="success"];
}
