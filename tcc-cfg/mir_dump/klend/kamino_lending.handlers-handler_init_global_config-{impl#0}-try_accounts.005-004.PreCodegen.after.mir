// MIR for `handlers::handler_init_global_config::<impl at programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18>::try_accounts` after PreCodegen

fn handlers::handler_init_global_config::<impl at programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitGlobalConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_init_global_config::InitGlobalConfigBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let _21: ();
    let mut _22: bool;
    let mut _23: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _24: !;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::ErrorCode;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: std::ops::RangeFrom<usize>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>>;
    let mut _38: std::result::Result<anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_init_global_config::InitGlobalConfigBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_init_global_config::InitGlobalConfigBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_init_global_config::InitGlobalConfigBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _83: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _91: (anchor_lang::prelude::Pubkey, u8);
    let mut _92: &[&[u8]];
    let mut _93: &[&[u8]; 1];
    let _94: &[&[u8]; 1];
    let _95: [&[u8]; 1];
    let mut _96: &[u8];
    let _97: &[u8];
    let mut _98: &anchor_lang::prelude::Pubkey;
    let mut _99: u8;
    let _100: ();
    let mut _101: bool;
    let mut _102: &anchor_lang::prelude::Pubkey;
    let _103: anchor_lang::prelude::Pubkey;
    let mut _104: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _105: &anchor_lang::prelude::Pubkey;
    let mut _106: !;
    let mut _107: anchor_lang::error::Error;
    let mut _108: anchor_lang::error::Error;
    let mut _109: anchor_lang::error::Error;
    let mut _110: anchor_lang::error::ErrorCode;
    let mut _111: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _112: anchor_lang::prelude::Pubkey;
    let mut _113: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _114: anchor_lang::prelude::Pubkey;
    let mut _117: &&anchor_lang::prelude::AccountInfo<'_>;
    let _118: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _121: (usize, bool);
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: &&anchor_lang::prelude::Pubkey;
    let mut _126: &&anchor_lang::prelude::Pubkey;
    let _127: &anchor_lang::prelude::Pubkey;
    let _128: anchor_lang::prelude::Pubkey;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let _131: ();
    let mut _132: bool;
    let mut _133: u64;
    let mut _136: &anchor_lang::prelude::Rent;
    let mut _137: usize;
    let mut _139: anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: &anchor_lang::prelude::Signer<'_>;
    let mut _141: anchor_lang::prelude::AccountInfo<'_>;
    let mut _142: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _144: anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _146: anchor_lang::system_program::CreateAccount<'_>;
    let _147: ();
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _149: std::result::Result<(), anchor_lang::error::Error>;
    let mut _150: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _151: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _152: &[&[&[u8]]];
    let mut _153: &[&[&[u8]]; 1];
    let _154: &[&[&[u8]]; 1];
    let _155: [&[&[u8]]; 1];
    let mut _156: &[&[u8]];
    let _157: &[&[u8]];
    let _158: &[&[u8]];
    let mut _159: &[&[u8]; 2];
    let _160: [&[u8]; 2];
    let mut _161: &[u8];
    let _162: &[u8];
    let _163: &[u8];
    let mut _164: &[u8; 1];
    let _165: [u8; 1];
    let mut _166: u8;
    let mut _167: std::ops::RangeFull;
    let mut _168: std::ops::RangeFull;
    let mut _169: u64;
    let mut _170: u64;
    let mut _171: usize;
    let mut _172: &anchor_lang::prelude::Pubkey;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _178: ();
    let mut _179: bool;
    let mut _180: &anchor_lang::prelude::Pubkey;
    let _181: anchor_lang::prelude::Pubkey;
    let mut _182: &anchor_lang::prelude::Signer<'_>;
    let mut _183: &anchor_lang::prelude::Pubkey;
    let _184: anchor_lang::prelude::Pubkey;
    let mut _185: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _186: !;
    let mut _187: anchor_lang::error::Error;
    let mut _188: anchor_lang::error::Error;
    let mut _189: anchor_lang::error::AnchorError;
    let mut _190: std::string::String;
    let mut _191: &anchor_lang::error::ErrorCode;
    let _192: anchor_lang::error::ErrorCode;
    let mut _193: u32;
    let mut _194: anchor_lang::error::ErrorCode;
    let mut _195: std::string::String;
    let mut _196: &anchor_lang::error::ErrorCode;
    let _197: anchor_lang::error::ErrorCode;
    let mut _198: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _199: anchor_lang::error::ErrorOrigin;
    let mut _200: anchor_lang::error::Source;
    let mut _201: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _202: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _203: anchor_lang::prelude::Pubkey;
    let mut _204: &anchor_lang::prelude::Signer<'_>;
    let mut _205: anchor_lang::prelude::Pubkey;
    let mut _206: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _208: u64;
    let mut _209: u64;
    let mut _210: &anchor_lang::prelude::Rent;
    let mut _211: usize;
    let mut _212: u64;
    let _213: ();
    let mut _214: bool;
    let mut _215: u64;
    let mut _217: anchor_lang::prelude::AccountInfo<'_>;
    let mut _218: &anchor_lang::prelude::Signer<'_>;
    let mut _219: anchor_lang::prelude::AccountInfo<'_>;
    let mut _220: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _222: anchor_lang::prelude::AccountInfo<'_>;
    let mut _223: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _224: anchor_lang::system_program::Transfer<'_>;
    let _225: ();
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _227: std::result::Result<(), anchor_lang::error::Error>;
    let mut _228: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _229: u64;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _236: anchor_lang::prelude::AccountInfo<'_>;
    let mut _237: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _239: anchor_lang::prelude::AccountInfo<'_>;
    let mut _240: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _241: anchor_lang::system_program::Allocate<'_>;
    let _242: ();
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _244: std::result::Result<(), anchor_lang::error::Error>;
    let mut _245: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _246: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _247: &[&[&[u8]]];
    let mut _248: &[&[&[u8]]; 1];
    let _249: &[&[&[u8]]; 1];
    let _250: [&[&[u8]]; 1];
    let mut _251: &[&[u8]];
    let _252: &[&[u8]];
    let _253: &[&[u8]];
    let mut _254: &[&[u8]; 2];
    let _255: [&[u8]; 2];
    let mut _256: &[u8];
    let _257: &[u8];
    let _258: &[u8];
    let mut _259: &[u8; 1];
    let _260: [u8; 1];
    let mut _261: u8;
    let mut _262: std::ops::RangeFull;
    let mut _263: std::ops::RangeFull;
    let mut _264: u64;
    let mut _265: usize;
    let mut _266: isize;
    let mut _268: !;
    let mut _269: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _272: anchor_lang::prelude::AccountInfo<'_>;
    let mut _273: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _275: anchor_lang::prelude::AccountInfo<'_>;
    let mut _276: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _277: anchor_lang::system_program::Assign<'_>;
    let _278: ();
    let mut _279: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _280: std::result::Result<(), anchor_lang::error::Error>;
    let mut _281: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _282: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _283: &[&[&[u8]]];
    let mut _284: &[&[&[u8]]; 1];
    let _285: &[&[&[u8]]; 1];
    let _286: [&[&[u8]]; 1];
    let mut _287: &[&[u8]];
    let _288: &[&[u8]];
    let _289: &[&[u8]];
    let mut _290: &[&[u8]; 2];
    let _291: [&[u8]; 2];
    let mut _292: &[u8];
    let _293: &[u8];
    let _294: &[u8];
    let mut _295: &[u8; 1];
    let _296: [u8; 1];
    let mut _297: u8;
    let mut _298: std::ops::RangeFull;
    let mut _299: std::ops::RangeFull;
    let mut _300: &anchor_lang::prelude::Pubkey;
    let mut _301: isize;
    let mut _303: !;
    let mut _304: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _306: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _307: &anchor_lang::prelude::Pubkey;
    let mut _308: &anchor_lang::prelude::AccountInfo<'_>;
    let _309: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _310: isize;
    let mut _313: !;
    let mut _314: anchor_lang::error::Error;
    let mut _315: anchor_lang::error::Error;
    let mut _316: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _317: &anchor_lang::prelude::AccountInfo<'_>;
    let _318: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _319: isize;
    let mut _322: !;
    let mut _323: anchor_lang::error::Error;
    let mut _324: anchor_lang::error::Error;
    let _325: ();
    let mut _326: bool;
    let _327: ();
    let mut _328: bool;
    let mut _329: usize;
    let mut _330: usize;
    let mut _331: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _332: !;
    let mut _333: anchor_lang::error::Error;
    let mut _334: anchor_lang::error::Error;
    let mut _335: anchor_lang::error::Error;
    let mut _336: anchor_lang::error::ErrorCode;
    let mut _337: (usize, usize);
    let mut _338: usize;
    let mut _339: usize;
    let mut _340: &anchor_lang::prelude::AccountInfo<'_>;
    let _341: ();
    let mut _342: bool;
    let mut _343: &&anchor_lang::prelude::Pubkey;
    let mut _344: &&anchor_lang::prelude::Pubkey;
    let mut _345: !;
    let mut _346: anchor_lang::error::Error;
    let mut _347: anchor_lang::error::Error;
    let mut _348: anchor_lang::error::Error;
    let mut _349: anchor_lang::error::ErrorCode;
    let mut _350: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _351: anchor_lang::prelude::Pubkey;
    let mut _352: anchor_lang::prelude::Pubkey;
    let mut _354: &anchor_lang::prelude::Rent;
    let mut _355: usize;
    let mut _356: bool;
    let mut _357: u64;
    let mut _358: &anchor_lang::prelude::AccountInfo<'_>;
    let _359: anchor_lang::prelude::AccountInfo<'_>;
    let mut _360: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _361: u64;
    let mut _362: !;
    let mut _363: anchor_lang::error::Error;
    let mut _364: anchor_lang::error::Error;
    let mut _365: anchor_lang::error::ErrorCode;
    let _366: ();
    let mut _367: bool;
    let mut _368: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _369: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let _370: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _371: !;
    let mut _372: anchor_lang::error::Error;
    let mut _373: anchor_lang::error::Error;
    let mut _374: anchor_lang::error::ErrorCode;
    let _375: ();
    let mut _376: bool;
    let mut _377: &anchor_lang::prelude::Rent;
    let mut _378: u64;
    let mut _379: &anchor_lang::prelude::AccountInfo<'_>;
    let _380: anchor_lang::prelude::AccountInfo<'_>;
    let mut _381: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _382: usize;
    let mut _383: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _384: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _385: &anchor_lang::prelude::AccountInfo<'_>;
    let _386: anchor_lang::prelude::AccountInfo<'_>;
    let mut _387: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _388: isize;
    let mut _390: !;
    let mut _391: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _393: !;
    let mut _394: anchor_lang::error::Error;
    let mut _395: anchor_lang::error::Error;
    let mut _396: anchor_lang::error::ErrorCode;
    let _397: ();
    let mut _398: bool;
    let mut _399: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _400: &anchor_lang::prelude::Signer<'_>;
    let _401: &anchor_lang::prelude::Signer<'_>;
    let mut _402: !;
    let mut _403: anchor_lang::error::Error;
    let mut _404: anchor_lang::error::Error;
    let mut _405: anchor_lang::error::ErrorCode;
    let _406: ();
    let mut _408: &anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>;
    let mut _410: bool;
    let mut _411: &anchor_lang::prelude::Pubkey;
    let mut _412: &anchor_lang::prelude::Pubkey;
    let mut _413: !;
    let mut _414: anchor_lang::error::Error;
    let mut _415: anchor_lang::error::Error;
    let mut _416: anchor_lang::error::Error;
    let mut _417: anchor_lang::error::ErrorCode;
    let mut _418: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _419: anchor_lang::prelude::Pubkey;
    let mut _420: anchor_lang::prelude::Pubkey;
    let mut _421: handlers::handler_init_global_config::InitGlobalConfig<'_>;
    let mut _422: anchor_lang::prelude::Signer<'_>;
    let mut _423: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _424: anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>;
    let mut _425: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _426: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _431: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _432: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _433: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _434: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _435: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _436: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _437: bool;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: bool;
    let mut _441: bool;
    let mut _442: bool;
    let mut _443: bool;
    let mut _444: bool;
    let mut _445: bool;
    let mut _446: bool;
    let mut _447: bool;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    scope 1 {
        debug payer => _6;
        let _27: &anchor_lang::prelude::AccountInfo<'_>;
        scope 6 {
            debug global_config => _27;
            let _36: anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>;
            scope 7 {
                debug program_data => _36;
                let _51: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                scope 12 {
                    debug system_program => _51;
                    let _66: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    scope 17 {
                        debug rent => _66;
                        let _81: anchor_lang::prelude::Rent;
                        let _85: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _88: anchor_lang::prelude::Rent;
                        scope 22 {
                            debug __anchor_rent => _81;
                            let _89: anchor_lang::prelude::Pubkey;
                            let _90: u8;
                            let mut _430: &[&[u8]; 1];
                            scope 27 {
                                debug __pda_address => _89;
                                debug __bump => _90;
                                let _115: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
                                let _116: &anchor_lang::prelude::AccountInfo<'_>;
                                scope 28 {
                                    debug global_config => _115;
                                    let _389: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                    let _392: usize;
                                    let _407: anchor_lang::prelude::Pubkey;
                                    scope 66 {
                                        debug residual => _389;
                                        scope 67 {
                                        }
                                    }
                                    scope 68 {
                                        debug val => _392;
                                        scope 69 {
                                        }
                                    }
                                    scope 70 {
                                        debug actual => _407;
                                        let _409: anchor_lang::prelude::Pubkey;
                                        scope 71 {
                                            debug expected => _409;
                                        }
                                    }
                                }
                                scope 29 {
                                    debug actual_field => _116;
                                    let _119: &anchor_lang::prelude::Pubkey;
                                    scope 30 {
                                        debug actual_owner => _119;
                                        let _120: usize;
                                        scope 31 {
                                            debug space => _120;
                                            let _122: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
                                            let _129: u64;
                                            let _320: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
                                            let _321: anchor_lang::error::Error;
                                            let mut _429: &&anchor_lang::prelude::Pubkey;
                                            scope 32 {
                                                debug pa => _122;
                                                let _353: u64;
                                                scope 65 {
                                                    debug required_lamports => _353;
                                                }
                                            }
                                            scope 33 {
                                                debug __current_lamports => _129;
                                                let _134: usize;
                                                let _207: u64;
                                                let _311: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
                                                let _312: anchor_lang::error::Error;
                                                let mut _427: &anchor_lang::error::ErrorCode;
                                                let mut _428: &anchor_lang::error::ErrorCode;
                                                scope 34 {
                                                    debug space => _134;
                                                    let _135: u64;
                                                    scope 35 {
                                                        debug lamports => _135;
                                                        let _138: anchor_lang::system_program::CreateAccount<'_>;
                                                        scope 36 {
                                                            debug cpi_accounts => _138;
                                                            let _143: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                            scope 37 {
                                                                debug cpi_context => _143;
                                                                let _174: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _177: ();
                                                                scope 38 {
                                                                    debug residual => _174;
                                                                    scope 39 {
                                                                    }
                                                                }
                                                                scope 40 {
                                                                    debug val => _177;
                                                                    scope 41 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 42 {
                                                    debug required_lamports => _207;
                                                    let _216: anchor_lang::system_program::Transfer<'_>;
                                                    let _235: anchor_lang::system_program::Allocate<'_>;
                                                    scope 43 {
                                                        debug cpi_accounts => _216;
                                                        let _221: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                        scope 44 {
                                                            debug cpi_context => _221;
                                                            let _231: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _234: ();
                                                            scope 45 {
                                                                debug residual => _231;
                                                                scope 46 {
                                                                }
                                                            }
                                                            scope 47 {
                                                                debug val => _234;
                                                                scope 48 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug cpi_accounts => _235;
                                                        let _238: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                        scope 50 {
                                                            debug cpi_context => _238;
                                                            let _267: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _270: ();
                                                            let _271: anchor_lang::system_program::Assign<'_>;
                                                            scope 51 {
                                                                debug residual => _267;
                                                                scope 52 {
                                                                }
                                                            }
                                                            scope 53 {
                                                                debug val => _270;
                                                                scope 54 {
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug cpi_accounts => _271;
                                                                let _274: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                scope 56 {
                                                                    debug cpi_context => _274;
                                                                    let _302: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _305: ();
                                                                    scope 57 {
                                                                        debug residual => _302;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug val => _305;
                                                                        scope 60 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 61 {
                                                    debug val => _311;
                                                }
                                                scope 62 {
                                                    debug e => _312;
                                                }
                                            }
                                            scope 63 {
                                                debug val => _320;
                                            }
                                            scope 64 {
                                                debug e => _321;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _85;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _88;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _62;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _65;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _47;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _50;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _447 = const false;
        _446 = const false;
        _445 = const false;
        _444 = const false;
        _443 = const false;
        _442 = const false;
        _441 = const false;
        _440 = const false;
        _439 = const false;
        _438 = const false;
        _437 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitGlobalConfigBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18}>(move _9, move _15) -> [return: bb2, unwind: bb210];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb210];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _448 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _431 = deref_copy (*_2);
        _23 = &(*_431);
        _22 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _23) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb242];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _496 = discriminant(_7);
        StorageDead(_7);
        goto -> bb202;
    }

    bb8: {
        switchInt(move _22) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = AccountNotEnoughKeys;
        _25 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _25);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb202;
    }

    bb11: {
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const 0_usize;
        _432 = deref_copy (*_2);
        _29 = Len((*_432));
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb12, unwind continue];
    }

    bb12: {
        _433 = deref_copy (*_2);
        _27 = &(*_433)[_28];
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _434 = deref_copy (*_2);
        _34 = &(*_434);
        StorageLive(_35);
        _35 = RangeFrom::<usize> { start: const 1_usize };
        _33 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _34, move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = &(*_33);
        _31 = &(*_32);
        (*_2) = move _31;
        StorageDead(_31);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::Account<'_, anchor_lang::ProgramData> as anchor_lang::Accounts<'_, InitGlobalConfigBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
        _38 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18}>(move _39, move _45) -> [return: bb15, unwind: bb210];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb210];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>);
        _36 = move _50;
        StorageDead(_50);
        _450 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitGlobalConfigBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb241];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _494 = discriminant(_37);
        StorageDead(_37);
        goto -> bb201;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
        _53 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18}>(move _54, move _60) -> [return: bb21, unwind: bb210];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb210];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _51 = move _65;
        StorageDead(_65);
        _452 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitGlobalConfigBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb240];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _492 = discriminant(_52);
        StorageDead(_52);
        goto -> bb200;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18};
        _68 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_global_config.rs:30:10: 30:18}>(move _69, move _75) -> [return: bb27, unwind: bb210];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb210];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _66 = move _80;
        StorageDead(_80);
        _454 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb239];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _490 = discriminant(_67);
        StorageDead(_67);
        goto -> bb199;
    }

    bb32: {
        _82 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _83) -> [return: bb33, unwind: bb210];
    }

    bb33: {
        StorageDead(_83);
        _84 = discriminant(_82);
        switchInt(move _84) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_88);
        _88 = ((_82 as Continue).0: anchor_lang::prelude::Rent);
        _81 = _88;
        StorageDead(_88);
        _456 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _430 = const _;
        _94 = &(*_430);
        _93 = &(*_94);
        _92 = move _93 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_98);
        _98 = &(*_1);
        _91 = anchor_lang::prelude::Pubkey::find_program_address(move _92, move _98) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_85);
        _85 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _87) -> [return: bb36, unwind: bb238];
    }

    bb36: {
        StorageDead(_87);
        StorageDead(_85);
        _488 = discriminant(_82);
        StorageDead(_82);
        goto -> bb198;
    }

    bb37: {
        StorageDead(_98);
        StorageDead(_92);
        StorageLive(_89);
        _89 = (_91.0: anchor_lang::prelude::Pubkey);
        StorageLive(_90);
        _90 = (_91.1: u8);
        StorageDead(_94);
        StorageDead(_91);
        StorageLive(_99);
        _99 = _90;
        ((*_4).0: u8) = move _99;
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &(*_27);
        _103 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _104) -> [return: bb38, unwind continue];
    }

    bb38: {
        _102 = &_103;
        StorageDead(_104);
        StorageLive(_105);
        _105 = &_89;
        _101 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _102, move _105) -> [return: bb39, unwind continue];
    }

    bb39: {
        switchInt(move _101) -> [0: bb45, otherwise: bb40];
    }

    bb40: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = ConstraintSeeds;
        _109 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _110) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_110);
        _108 = anchor_lang::error::Error::with_account_name::<&str>(move _109, const "global_config") -> [return: bb42, unwind: bb210];
    }

    bb42: {
        _447 = const true;
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_27);
        _112 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _113) -> [return: bb43, unwind: bb237];
    }

    bb43: {
        StorageDead(_113);
        StorageLive(_114);
        _114 = _89;
        _111 = (move _112, move _114);
        StorageDead(_114);
        StorageDead(_112);
        _447 = const false;
        _107 = anchor_lang::error::Error::with_pubkeys(move _108, move _111) -> [return: bb44, unwind: bb237];
    }

    bb44: {
        StorageDead(_111);
        _447 = const false;
        StorageDead(_108);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _107);
        StorageDead(_107);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb197;
    }

    bb45: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_102);
        _100 = const ();
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_27;
        _117 = &(*_118);
        _116 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _117) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_117);
        StorageDead(_118);
        StorageLive(_119);
        _119 = ((*_116).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_120);
        _121 = CheckedAdd(const 8_usize, const _);
        assert(!move (_121.1: bool), "attempt to compute `{} + {}`, which would overflow", const 8_usize, const _) -> [success: bb47, unwind continue];
    }

    bb47: {
        _120 = move (_121.0: usize);
        StorageLive(_122);
        StorageLive(_123);
        _123 = const false;
        switchInt(move _123) -> [0: bb50, otherwise: bb48];
    }

    bb48: {
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_119;
        StorageLive(_126);
        _429 = const _;
        _126 = &(*_429);
        _124 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _125, move _126) -> [return: bb49, unwind continue];
    }

    bb49: {
        switchInt(move _124) -> [0: bb121, otherwise: bb50];
    }

    bb50: {
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_27);
        _129 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _130) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = _129;
        _132 = Eq(move _133, const 0_u64);
        switchInt(move _132) -> [0: bb66, otherwise: bb52];
    }

    bb52: {
        StorageDead(_133);
        StorageLive(_134);
        _134 = _120;
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_81;
        StorageLive(_137);
        _137 = _134;
        _135 = anchor_lang::prelude::Rent::minimum_balance(move _136, move _137) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_6;
        _139 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _140) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &(*_27);
        _141 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _142) -> [return: bb55, unwind: bb209];
    }

    bb55: {
        StorageDead(_142);
        _446 = const true;
        _138 = anchor_lang::system_program::CreateAccount::<'_> { from: move _139, to: move _141 };
        StorageDead(_141);
        StorageDead(_139);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_51;
        _144 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _145) -> [return: bb56, unwind: bb235];
    }

    bb56: {
        StorageDead(_145);
        StorageLive(_146);
        _446 = const false;
        _146 = move _138;
        _143 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _144, move _146) -> [return: bb57, unwind: bb235];
    }

    bb57: {
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _445 = const true;
        _151 = move _143;
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = _90;
        _165 = [move _166];
        _164 = &_165;
        StorageDead(_166);
        StorageLive(_167);
        _167 = RangeFull;
        _163 = <[u8; 1] as Index<RangeFull>>::index(move _164, move _167) -> [return: bb58, unwind: bb233];
    }

    bb58: {
        StorageDead(_167);
        StorageDead(_164);
        _162 = &(*_163);
        _161 = &(*_162);
        _160 = [const _, move _161];
        _159 = &_160;
        StorageDead(_161);
        StorageLive(_168);
        _168 = RangeFull;
        _158 = <[&[u8]; 2] as Index<RangeFull>>::index(move _159, move _168) -> [return: bb59, unwind: bb233];
    }

    bb59: {
        StorageDead(_168);
        StorageDead(_159);
        _157 = &(*_158);
        _156 = &(*_157);
        _155 = [move _156];
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_153);
        _445 = const false;
        _150 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _151, move _152) -> [return: bb60, unwind: bb233];
    }

    bb60: {
        StorageDead(_152);
        _445 = const false;
        StorageDead(_151);
        StorageLive(_169);
        _169 = _135;
        StorageLive(_170);
        StorageLive(_171);
        _171 = _134;
        _170 = move _171 as u64 (IntToInt);
        StorageDead(_171);
        StorageLive(_172);
        _172 = &(*_1);
        _149 = anchor_lang::system_program::create_account(move _150, move _169, move _170, move _172) -> [return: bb61, unwind: bb235];
    }

    bb61: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_150);
        _148 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _149) -> [return: bb62, unwind: bb235];
    }

    bb62: {
        StorageDead(_149);
        _173 = discriminant(_148);
        switchInt(move _173) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        StorageLive(_177);
        _177 = ((_148 as Continue).0: ());
        _147 = _177;
        StorageDead(_177);
        _458 = discriminant(_148);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_148);
        StorageDead(_147);
        _131 = const ();
        StorageDead(_143);
        _446 = const false;
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb116;
    }

    bb64: {
        StorageLive(_174);
        _174 = move ((_148 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_176);
        _176 = move _174;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _176) -> [return: bb65, unwind: bb231];
    }

    bb65: {
        StorageDead(_176);
        StorageDead(_174);
        _486 = discriminant(_148);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        _446 = const false;
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb193;
    }

    bb66: {
        StorageDead(_133);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_6;
        _181 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _182) -> [return: bb67, unwind continue];
    }

    bb67: {
        _180 = &_181;
        StorageDead(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &(*_27);
        _184 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _185) -> [return: bb68, unwind continue];
    }

    bb68: {
        _183 = &_184;
        StorageDead(_185);
        _179 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _180, move _183) -> [return: bb69, unwind continue];
    }

    bb69: {
        switchInt(move _179) -> [0: bb78, otherwise: bb70];
    }

    bb70: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _428 = const _;
        _191 = &(*_428);
        _190 = anchor_lang::error::ErrorCode::name(move _191) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_191);
        StorageLive(_193);
        StorageLive(_194);
        _194 = TryingToInitPayerAsProgramAccount;
        _193 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _194) -> [return: bb72, unwind: bb208];
    }

    bb72: {
        StorageDead(_194);
        StorageLive(_195);
        StorageLive(_196);
        _427 = const _;
        _196 = &(*_427);
        _195 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _196) -> [return: bb73, unwind: bb208];
    }

    bb73: {
        StorageDead(_196);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_global_config.rs", line: const 30_u32 };
        _199 = anchor_lang::error::ErrorOrigin::Source(move _200);
        StorageDead(_200);
        _198 = std::option::Option::<ErrorOrigin>::Some(move _199);
        StorageDead(_199);
        StorageLive(_201);
        _201 = std::option::Option::<ComparedValues>::None;
        _189 = anchor_lang::error::AnchorError { error_name: move _190, error_code_number: move _193, error_msg: move _195, error_origin: move _198, compared_values: move _201 };
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_190);
        _188 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _189) -> [return: bb74, unwind: bb210];
    }

    bb74: {
        _444 = const true;
        StorageDead(_189);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_6;
        _203 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _204) -> [return: bb75, unwind: bb230];
    }

    bb75: {
        StorageDead(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &(*_27);
        _205 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _206) -> [return: bb76, unwind: bb230];
    }

    bb76: {
        StorageDead(_206);
        _202 = (move _203, move _205);
        StorageDead(_205);
        StorageDead(_203);
        _444 = const false;
        _187 = anchor_lang::error::Error::with_pubkeys(move _188, move _202) -> [return: bb77, unwind: bb230];
    }

    bb77: {
        StorageDead(_202);
        _444 = const false;
        StorageDead(_188);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _187);
        StorageDead(_187);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb193;
    }

    bb78: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_180);
        _178 = const ();
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_81;
        StorageLive(_211);
        _211 = _120;
        _209 = anchor_lang::prelude::Rent::minimum_balance(move _210, move _211) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_211);
        StorageDead(_210);
        _208 = <u64 as Ord>::max(move _209, const 1_u64) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_209);
        StorageLive(_212);
        _212 = _129;
        _207 = core::num::<impl u64>::saturating_sub(move _208, move _212) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_212);
        StorageDead(_208);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = _207;
        _214 = Gt(move _215, const 0_u64);
        switchInt(move _214) -> [0: bb92, otherwise: bb82];
    }

    bb82: {
        StorageDead(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = &_6;
        _217 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _218) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &(*_27);
        _219 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _220) -> [return: bb84, unwind: bb207];
    }

    bb84: {
        StorageDead(_220);
        _443 = const true;
        _216 = anchor_lang::system_program::Transfer::<'_> { from: move _217, to: move _219 };
        StorageDead(_219);
        StorageDead(_217);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_51;
        _222 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _223) -> [return: bb85, unwind: bb228];
    }

    bb85: {
        StorageDead(_223);
        StorageLive(_224);
        _443 = const false;
        _224 = move _216;
        _221 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _222, move _224) -> [return: bb86, unwind: bb228];
    }

    bb86: {
        StorageDead(_224);
        StorageDead(_222);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = move _221;
        StorageLive(_229);
        _229 = _207;
        _227 = anchor_lang::system_program::transfer(move _228, move _229) -> [return: bb87, unwind: bb228];
    }

    bb87: {
        StorageDead(_229);
        StorageDead(_228);
        _226 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _227) -> [return: bb88, unwind: bb228];
    }

    bb88: {
        StorageDead(_227);
        _230 = discriminant(_226);
        switchInt(move _230) -> [0: bb89, 1: bb90, otherwise: bb5];
    }

    bb89: {
        StorageLive(_234);
        _234 = ((_226 as Continue).0: ());
        _225 = _234;
        StorageDead(_234);
        _460 = discriminant(_226);
        StorageDead(_226);
        StorageDead(_225);
        _213 = const ();
        StorageDead(_221);
        _443 = const false;
        StorageDead(_216);
        goto -> bb93;
    }

    bb90: {
        StorageLive(_231);
        _231 = move ((_226 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_233);
        _233 = move _231;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _233) -> [return: bb91, unwind: bb226];
    }

    bb91: {
        StorageDead(_233);
        StorageDead(_231);
        _484 = discriminant(_226);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_221);
        _443 = const false;
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_213);
        goto -> bb192;
    }

    bb92: {
        StorageDead(_215);
        _213 = const ();
        goto -> bb93;
    }

    bb93: {
        StorageDead(_214);
        StorageDead(_213);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &(*_27);
        _236 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _237) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_237);
        _442 = const true;
        _235 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _236 };
        StorageDead(_236);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_51;
        _239 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _240) -> [return: bb95, unwind: bb225];
    }

    bb95: {
        StorageDead(_240);
        StorageLive(_241);
        _442 = const false;
        _241 = move _235;
        _238 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _239, move _241) -> [return: bb96, unwind: bb225];
    }

    bb96: {
        StorageDead(_241);
        StorageDead(_239);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _441 = const true;
        _246 = move _238;
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = _90;
        _260 = [move _261];
        _259 = &_260;
        StorageDead(_261);
        StorageLive(_262);
        _262 = RangeFull;
        _258 = <[u8; 1] as Index<RangeFull>>::index(move _259, move _262) -> [return: bb97, unwind: bb223];
    }

    bb97: {
        StorageDead(_262);
        StorageDead(_259);
        _257 = &(*_258);
        _256 = &(*_257);
        _255 = [const _, move _256];
        _254 = &_255;
        StorageDead(_256);
        StorageLive(_263);
        _263 = RangeFull;
        _253 = <[&[u8]; 2] as Index<RangeFull>>::index(move _254, move _263) -> [return: bb98, unwind: bb223];
    }

    bb98: {
        StorageDead(_263);
        StorageDead(_254);
        _252 = &(*_253);
        _251 = &(*_252);
        _250 = [move _251];
        StorageDead(_251);
        _249 = &_250;
        _248 = &(*_249);
        _247 = move _248 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_248);
        _441 = const false;
        _245 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _246, move _247) -> [return: bb99, unwind: bb223];
    }

    bb99: {
        StorageDead(_247);
        _441 = const false;
        StorageDead(_246);
        StorageLive(_264);
        StorageLive(_265);
        _265 = _120;
        _264 = move _265 as u64 (IntToInt);
        StorageDead(_265);
        _244 = anchor_lang::system_program::allocate(move _245, move _264) -> [return: bb100, unwind: bb225];
    }

    bb100: {
        StorageDead(_264);
        StorageDead(_245);
        _243 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _244) -> [return: bb101, unwind: bb225];
    }

    bb101: {
        StorageDead(_244);
        _266 = discriminant(_243);
        switchInt(move _266) -> [0: bb102, 1: bb103, otherwise: bb5];
    }

    bb102: {
        StorageLive(_270);
        _270 = ((_243 as Continue).0: ());
        _242 = _270;
        StorageDead(_270);
        _462 = discriminant(_243);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_243);
        StorageDead(_242);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &(*_27);
        _272 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _273) -> [return: bb105, unwind: bb225];
    }

    bb103: {
        StorageLive(_267);
        _267 = move ((_243 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_269);
        _269 = move _267;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _269) -> [return: bb104, unwind: bb221];
    }

    bb104: {
        StorageDead(_269);
        StorageDead(_267);
        _482 = discriminant(_243);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb191;
    }

    bb105: {
        StorageDead(_273);
        _440 = const true;
        _271 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _272 };
        StorageDead(_272);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_51;
        _275 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _276) -> [return: bb106, unwind: bb220];
    }

    bb106: {
        StorageDead(_276);
        StorageLive(_277);
        _440 = const false;
        _277 = move _271;
        _274 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _275, move _277) -> [return: bb107, unwind: bb220];
    }

    bb107: {
        StorageDead(_277);
        StorageDead(_275);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _439 = const true;
        _282 = move _274;
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = _90;
        _296 = [move _297];
        _295 = &_296;
        StorageDead(_297);
        StorageLive(_298);
        _298 = RangeFull;
        _294 = <[u8; 1] as Index<RangeFull>>::index(move _295, move _298) -> [return: bb108, unwind: bb218];
    }

    bb108: {
        StorageDead(_298);
        StorageDead(_295);
        _293 = &(*_294);
        _292 = &(*_293);
        _291 = [const _, move _292];
        _290 = &_291;
        StorageDead(_292);
        StorageLive(_299);
        _299 = RangeFull;
        _289 = <[&[u8]; 2] as Index<RangeFull>>::index(move _290, move _299) -> [return: bb109, unwind: bb218];
    }

    bb109: {
        StorageDead(_299);
        StorageDead(_290);
        _288 = &(*_289);
        _287 = &(*_288);
        _286 = [move _287];
        StorageDead(_287);
        _285 = &_286;
        _284 = &(*_285);
        _283 = move _284 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_284);
        _439 = const false;
        _281 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _282, move _283) -> [return: bb110, unwind: bb218];
    }

    bb110: {
        StorageDead(_283);
        _439 = const false;
        StorageDead(_282);
        StorageLive(_300);
        _300 = &(*_1);
        _280 = anchor_lang::system_program::assign(move _281, move _300) -> [return: bb111, unwind: bb220];
    }

    bb111: {
        StorageDead(_300);
        StorageDead(_281);
        _279 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _280) -> [return: bb112, unwind: bb220];
    }

    bb112: {
        StorageDead(_280);
        _301 = discriminant(_279);
        switchInt(move _301) -> [0: bb113, 1: bb114, otherwise: bb5];
    }

    bb113: {
        StorageLive(_305);
        _305 = ((_279 as Continue).0: ());
        _278 = _305;
        StorageDead(_305);
        _464 = discriminant(_279);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_279);
        StorageDead(_278);
        _131 = const ();
        StorageDead(_274);
        _440 = const false;
        StorageDead(_271);
        StorageDead(_238);
        _442 = const false;
        StorageDead(_235);
        StorageDead(_207);
        goto -> bb116;
    }

    bb114: {
        StorageLive(_302);
        _302 = move ((_279 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_304);
        _304 = move _302;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _304) -> [return: bb115, unwind: bb216];
    }

    bb115: {
        StorageDead(_304);
        StorageDead(_302);
        _480 = discriminant(_279);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_274);
        _440 = const false;
        StorageDead(_271);
        goto -> bb191;
    }

    bb116: {
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &(*_1);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &_27;
        _435 = deref_copy (*_309);
        _308 = &(*_435);
        _306 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::try_from_unchecked(move _307, move _308) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_308);
        StorageDead(_307);
        _310 = discriminant(_306);
        switchInt(move _310) -> [0: bb119, 1: bb118, otherwise: bb5];
    }

    bb118: {
        StorageLive(_312);
        _312 = move ((_306 as Err).0: anchor_lang::error::Error);
        StorageLive(_314);
        StorageLive(_315);
        _315 = move _312;
        _314 = anchor_lang::error::Error::with_account_name::<&str>(move _315, const "global_config") -> [return: bb120, unwind: bb215];
    }

    bb119: {
        StorageLive(_311);
        _311 = move ((_306 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _122 = move _311;
        StorageDead(_311);
        StorageDead(_129);
        _466 = discriminant(_306);
        StorageDead(_309);
        StorageDead(_306);
        goto -> bb126;
    }

    bb120: {
        StorageDead(_315);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _314);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_129);
        _478 = discriminant(_306);
        StorageDead(_309);
        StorageDead(_306);
        goto -> bb194;
    }

    bb121: {
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &_27;
        _436 = deref_copy (*_318);
        _317 = &(*_436);
        _316 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::try_from(move _317) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_317);
        _319 = discriminant(_316);
        switchInt(move _319) -> [0: bb124, 1: bb123, otherwise: bb5];
    }

    bb123: {
        StorageLive(_321);
        _321 = move ((_316 as Err).0: anchor_lang::error::Error);
        StorageLive(_323);
        StorageLive(_324);
        _324 = move _321;
        _323 = anchor_lang::error::Error::with_account_name::<&str>(move _324, const "global_config") -> [return: bb125, unwind: bb214];
    }

    bb124: {
        StorageLive(_320);
        _320 = move ((_316 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _122 = move _320;
        StorageDead(_320);
        _468 = discriminant(_316);
        StorageDead(_318);
        StorageDead(_316);
        goto -> bb126;
    }

    bb125: {
        StorageDead(_324);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _323);
        StorageDead(_323);
        StorageDead(_321);
        _476 = discriminant(_316);
        StorageDead(_318);
        StorageDead(_316);
        goto -> bb194;
    }

    bb126: {
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_325);
        StorageLive(_326);
        _326 = const false;
        switchInt(move _326) -> [0: bb150, otherwise: bb127];
    }

    bb127: {
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = _120;
        StorageLive(_330);
        StorageLive(_331);
        _331 = &(*_116);
        _330 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _331) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_331);
        _328 = Ne(move _329, move _330);
        switchInt(move _328) -> [0: bb134, otherwise: bb129];
    }

    bb129: {
        StorageDead(_330);
        StorageDead(_329);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = ConstraintSpace;
        _335 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _336) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_336);
        _334 = anchor_lang::error::Error::with_account_name::<&str>(move _335, const "global_config") -> [return: bb131, unwind: bb210];
    }

    bb131: {
        _438 = const true;
        StorageDead(_335);
        StorageLive(_337);
        StorageLive(_338);
        _338 = _120;
        StorageLive(_339);
        StorageLive(_340);
        _340 = &(*_116);
        _339 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _340) -> [return: bb132, unwind: bb213];
    }

    bb132: {
        StorageDead(_340);
        _337 = (move _338, move _339);
        StorageDead(_339);
        StorageDead(_338);
        _438 = const false;
        _333 = anchor_lang::error::Error::with_values::<usize, usize>(move _334, move _337) -> [return: bb133, unwind: bb213];
    }

    bb133: {
        StorageDead(_337);
        _438 = const false;
        StorageDead(_334);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _333);
        StorageDead(_333);
        StorageDead(_328);
        StorageDead(_327);
        goto -> bb190;
    }

    bb134: {
        StorageDead(_330);
        StorageDead(_329);
        _327 = const ();
        StorageDead(_328);
        StorageDead(_327);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &_119;
        StorageLive(_344);
        _344 = &_1;
        _342 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _343, move _344) -> [return: bb135, unwind continue];
    }

    bb135: {
        switchInt(move _342) -> [0: bb140, otherwise: bb136];
    }

    bb136: {
        StorageDead(_344);
        StorageDead(_343);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = ConstraintOwner;
        _348 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _349) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_349);
        _347 = anchor_lang::error::Error::with_account_name::<&str>(move _348, const "global_config") -> [return: bb138, unwind: bb210];
    }

    bb138: {
        StorageDead(_348);
        StorageLive(_350);
        StorageLive(_351);
        _351 = (*_119);
        StorageLive(_352);
        _352 = (*_1);
        _350 = (move _351, move _352);
        StorageDead(_352);
        StorageDead(_351);
        _346 = anchor_lang::error::Error::with_pubkeys(move _347, move _350) -> [return: bb139, unwind: bb210];
    }

    bb139: {
        StorageDead(_350);
        StorageDead(_347);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _346);
        StorageDead(_346);
        StorageDead(_342);
        StorageDead(_341);
        goto -> bb190;
    }

    bb140: {
        StorageDead(_344);
        StorageDead(_343);
        _341 = const ();
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &_81;
        StorageLive(_355);
        _355 = _120;
        _353 = anchor_lang::prelude::Rent::minimum_balance(move _354, move _355) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_355);
        StorageDead(_354);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _360 = &_122;
        _359 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _360) -> [return: bb142, unwind continue];
    }

    bb142: {
        _358 = &_359;
        StorageDead(_360);
        _357 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _358) -> [return: bb143, unwind: bb206];
    }

    bb143: {
        StorageDead(_358);
        StorageLive(_361);
        _361 = _353;
        _356 = Lt(move _357, move _361);
        switchInt(move _356) -> [0: bb148, otherwise: bb144];
    }

    bb144: {
        StorageDead(_361);
        drop(_359) -> [return: bb145, unwind: bb210];
    }

    bb145: {
        StorageDead(_359);
        StorageDead(_357);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = ConstraintRentExempt;
        _364 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _365) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_365);
        _363 = anchor_lang::error::Error::with_account_name::<&str>(move _364, const "global_config") -> [return: bb147, unwind: bb210];
    }

    bb147: {
        StorageDead(_364);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _363);
        StorageDead(_363);
        StorageDead(_356);
        StorageDead(_353);
        goto -> bb190;
    }

    bb148: {
        StorageDead(_361);
        drop(_359) -> [return: bb149, unwind: bb210];
    }

    bb149: {
        StorageDead(_359);
        StorageDead(_357);
        _325 = const ();
        StorageDead(_356);
        StorageDead(_353);
        goto -> bb151;
    }

    bb150: {
        _325 = const ();
        goto -> bb151;
    }

    bb151: {
        StorageDead(_326);
        StorageDead(_325);
        _115 = move _122;
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_116);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &_115;
        _369 = &(*_370);
        _368 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _369) -> [return: bb152, unwind continue];
    }

    bb152: {
        StorageDead(_369);
        _367 = ((*_368).6: bool);
        switchInt(move _367) -> [0: bb153, otherwise: bb156];
    }

    bb153: {
        StorageDead(_370);
        StorageDead(_368);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        _374 = ConstraintMut;
        _373 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _374) -> [return: bb154, unwind continue];
    }

    bb154: {
        StorageDead(_374);
        _372 = anchor_lang::error::Error::with_account_name::<&str>(move _373, const "global_config") -> [return: bb155, unwind: bb210];
    }

    bb155: {
        StorageDead(_373);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _372);
        StorageDead(_372);
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb196;
    }

    bb156: {
        StorageDead(_370);
        StorageDead(_368);
        _366 = const ();
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &_81;
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &_115;
        _380 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _381) -> [return: bb157, unwind continue];
    }

    bb157: {
        _379 = &_380;
        StorageDead(_381);
        _378 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _379) -> [return: bb158, unwind: bb205];
    }

    bb158: {
        StorageDead(_379);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_115;
        _386 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _387) -> [return: bb159, unwind: bb205];
    }

    bb159: {
        _385 = &_386;
        StorageDead(_387);
        _384 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _385) -> [return: bb160, unwind: bb204];
    }

    bb160: {
        StorageDead(_385);
        _383 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _384) -> [return: bb161, unwind: bb204];
    }

    bb161: {
        _437 = const true;
        StorageDead(_384);
        _388 = discriminant(_383);
        switchInt(move _388) -> [0: bb162, 1: bb163, otherwise: bb5];
    }

    bb162: {
        StorageLive(_392);
        _392 = ((_383 as Continue).0: usize);
        _382 = _392;
        StorageDead(_392);
        _376 = anchor_lang::prelude::Rent::is_exempt(move _377, move _378, move _382) -> [return: bb165, unwind: bb211];
    }

    bb163: {
        StorageLive(_389);
        _389 = move ((_383 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_391);
        _391 = move _389;
        _0 = <std::result::Result<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _391) -> [return: bb164, unwind: bb211];
    }

    bb164: {
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_382);
        StorageDead(_378);
        StorageDead(_377);
        _474 = discriminant(_383);
        drop(_386) -> [return: bb187, unwind: bb205];
    }

    bb165: {
        switchInt(move _376) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        StorageDead(_382);
        StorageDead(_378);
        StorageDead(_377);
        _470 = discriminant(_383);
        drop(_386) -> [return: bb172, unwind: bb205];
    }

    bb167: {
        StorageDead(_382);
        StorageDead(_378);
        StorageDead(_377);
        _472 = discriminant(_383);
        drop(_386) -> [return: bb168, unwind: bb205];
    }

    bb168: {
        StorageDead(_386);
        _437 = const false;
        StorageDead(_383);
        drop(_380) -> [return: bb169, unwind: bb210];
    }

    bb169: {
        StorageDead(_380);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = ConstraintRentExempt;
        _395 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _396) -> [return: bb170, unwind continue];
    }

    bb170: {
        StorageDead(_396);
        _394 = anchor_lang::error::Error::with_account_name::<&str>(move _395, const "global_config") -> [return: bb171, unwind: bb210];
    }

    bb171: {
        StorageDead(_395);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _394);
        StorageDead(_394);
        goto -> bb189;
    }

    bb172: {
        StorageDead(_386);
        _437 = const false;
        StorageDead(_383);
        drop(_380) -> [return: bb173, unwind: bb210];
    }

    bb173: {
        StorageDead(_380);
        _375 = const ();
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        _401 = &_6;
        _400 = &(*_401);
        _399 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _400) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_400);
        _398 = ((*_399).6: bool);
        switchInt(move _398) -> [0: bb175, otherwise: bb178];
    }

    bb175: {
        StorageDead(_401);
        StorageDead(_399);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = ConstraintMut;
        _404 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _405) -> [return: bb176, unwind continue];
    }

    bb176: {
        StorageDead(_405);
        _403 = anchor_lang::error::Error::with_account_name::<&str>(move _404, const "payer") -> [return: bb177, unwind: bb210];
    }

    bb177: {
        StorageDead(_404);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _403);
        StorageDead(_403);
        StorageDead(_398);
        StorageDead(_397);
        goto -> bb196;
    }

    bb178: {
        StorageDead(_401);
        StorageDead(_399);
        _397 = const ();
        StorageDead(_398);
        StorageDead(_397);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &_36;
        _407 = <anchor_lang::prelude::Account<'_, anchor_lang::ProgramData> as anchor_lang::Key>::key(move _408) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_408);
        StorageLive(_409);
        _409 = program_data() -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageLive(_410);
        StorageLive(_411);
        _411 = &_407;
        StorageLive(_412);
        _412 = &_409;
        _410 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _411, move _412) -> [return: bb181, unwind continue];
    }

    bb181: {
        switchInt(move _410) -> [0: bb186, otherwise: bb182];
    }

    bb182: {
        StorageDead(_412);
        StorageDead(_411);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = ConstraintAddress;
        _416 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _417) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_417);
        _415 = anchor_lang::error::Error::with_account_name::<&str>(move _416, const "program_data") -> [return: bb184, unwind: bb210];
    }

    bb184: {
        StorageDead(_416);
        StorageLive(_418);
        StorageLive(_419);
        _419 = _407;
        StorageLive(_420);
        _420 = _409;
        _418 = (move _419, move _420);
        StorageDead(_420);
        StorageDead(_419);
        _414 = anchor_lang::error::Error::with_pubkeys(move _415, move _418) -> [return: bb185, unwind: bb210];
    }

    bb185: {
        StorageDead(_418);
        StorageDead(_415);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _414);
        StorageDead(_414);
        StorageDead(_410);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_406);
        goto -> bb196;
    }

    bb186: {
        StorageDead(_412);
        StorageDead(_411);
        _406 = const ();
        StorageDead(_410);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_421);
        StorageLive(_422);
        _422 = move _6;
        StorageLive(_423);
        _423 = move _115;
        StorageLive(_424);
        _424 = move _36;
        StorageLive(_425);
        _425 = move _51;
        StorageLive(_426);
        _426 = move _66;
        _421 = handlers::handler_init_global_config::InitGlobalConfig::<'_> { payer: move _422, global_config: move _423, program_data: move _424, system_program: move _425, rent: move _426 };
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_424);
        StorageDead(_423);
        StorageDead(_422);
        _0 = std::result::Result::<handlers::handler_init_global_config::InitGlobalConfig<'_>, anchor_lang::error::Error>::Ok(move _421);
        StorageDead(_421);
        StorageDead(_115);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_6);
        goto -> bb203;
    }

    bb187: {
        StorageDead(_386);
        _437 = const false;
        StorageDead(_383);
        drop(_380) -> [return: bb188, unwind: bb210];
    }

    bb188: {
        StorageDead(_380);
        goto -> bb189;
    }

    bb189: {
        StorageDead(_376);
        StorageDead(_375);
        goto -> bb196;
    }

    bb190: {
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb195;
    }

    bb191: {
        StorageDead(_238);
        _442 = const false;
        StorageDead(_235);
        goto -> bb192;
    }

    bb192: {
        StorageDead(_207);
        goto -> bb193;
    }

    bb193: {
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_129);
        goto -> bb194;
    }

    bb194: {
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_116);
        goto -> bb196;
    }

    bb196: {
        StorageDead(_115);
        goto -> bb197;
    }

    bb197: {
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_81);
        goto -> bb199;
    }

    bb199: {
        StorageDead(_66);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_51);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb202;
    }

    bb202: {
        StorageDead(_6);
        goto -> bb203;
    }

    bb203: {
        return;
    }

    bb204 (cleanup): {
        drop(_386) -> [return: bb205, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        drop(_380) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        drop(_359) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        drop(_217) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        drop(_190) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        drop(_139) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        resume;
    }

    bb211 (cleanup): {
        _498 = discriminant(_383);
        goto -> bb204;
    }

    bb212 (cleanup): {
        drop(_334) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        switchInt(_438) -> [0: bb210, otherwise: bb212];
    }

    bb214 (cleanup): {
        _499 = discriminant(_316);
        goto -> bb210;
    }

    bb215 (cleanup): {
        _500 = discriminant(_306);
        goto -> bb210;
    }

    bb216 (cleanup): {
        _501 = discriminant(_279);
        goto -> bb220;
    }

    bb217 (cleanup): {
        drop(_282) -> [return: bb220, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        switchInt(_439) -> [0: bb220, otherwise: bb217];
    }

    bb219 (cleanup): {
        drop(_271) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        switchInt(_440) -> [0: bb225, otherwise: bb219];
    }

    bb221 (cleanup): {
        _502 = discriminant(_243);
        goto -> bb225;
    }

    bb222 (cleanup): {
        drop(_246) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        switchInt(_441) -> [0: bb225, otherwise: bb222];
    }

    bb224 (cleanup): {
        drop(_235) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        switchInt(_442) -> [0: bb210, otherwise: bb224];
    }

    bb226 (cleanup): {
        _503 = discriminant(_226);
        goto -> bb228;
    }

    bb227 (cleanup): {
        drop(_216) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        switchInt(_443) -> [0: bb210, otherwise: bb227];
    }

    bb229 (cleanup): {
        drop(_188) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        switchInt(_444) -> [0: bb210, otherwise: bb229];
    }

    bb231 (cleanup): {
        _504 = discriminant(_148);
        goto -> bb235;
    }

    bb232 (cleanup): {
        drop(_151) -> [return: bb235, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        switchInt(_445) -> [0: bb235, otherwise: bb232];
    }

    bb234 (cleanup): {
        drop(_138) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        switchInt(_446) -> [0: bb210, otherwise: bb234];
    }

    bb236 (cleanup): {
        drop(_108) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        switchInt(_447) -> [0: bb210, otherwise: bb236];
    }

    bb238 (cleanup): {
        _505 = discriminant(_82);
        goto -> bb210;
    }

    bb239 (cleanup): {
        _506 = discriminant(_67);
        goto -> bb210;
    }

    bb240 (cleanup): {
        _507 = discriminant(_52);
        goto -> bb210;
    }

    bb241 (cleanup): {
        _508 = discriminant(_37);
        goto -> bb210;
    }

    bb242 (cleanup): {
        _509 = discriminant(_7);
        goto -> bb210;
    }
}
