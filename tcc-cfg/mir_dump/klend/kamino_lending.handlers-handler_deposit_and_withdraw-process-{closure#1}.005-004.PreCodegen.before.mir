// MIR for `handlers::handler_deposit_and_withdraw::process::{closure#1}` before PreCodegen

fn handlers::handler_deposit_and_withdraw::process::{closure#1}(_1: &mut {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:99:29: 99:38}, _2: &anchor_lang::prelude::AccountInfo<'_>) -> std::option::Option<anchor_lang::prelude::AccountInfo<'_>> {
    debug account => _2;
    debug ctx__accounts__withdraw_accounts__withdraw_reserve => (*((*_1).0: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>));
    debug withdraw_reserve_found => (*((*_1).1: &mut bool));
    let mut _0: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let _5: anchor_lang::prelude::Pubkey;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: anchor_lang::prelude::Pubkey;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _10: bool;
    let mut _11: anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _14: &mut bool;
    let mut _15: &mut bool;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_2);
        _5 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _13 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _9 = &(*_13);
        _8 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_8;
        StorageDead(_9);
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _3) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_10);
        _14 = deref_copy ((*_1).1: &mut bool);
        _10 = (*_14);
        switchInt(move _10) -> [0: bb5, otherwise: bb7];
    }

    bb5: {
        _15 = deref_copy ((*_1).1: &mut bool);
        (*_15) = const true;
        _0 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::None;
        goto -> bb9;
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_2);
        _11 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_12);
        _0 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::Some(move _11);
        StorageDead(_11);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_10);
        StorageDead(_3);
        return;
    }
}
