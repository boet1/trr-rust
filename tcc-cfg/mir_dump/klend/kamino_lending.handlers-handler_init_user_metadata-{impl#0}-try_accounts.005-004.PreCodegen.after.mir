// MIR for `handlers::handler_init_user_metadata::<impl at programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18>::try_accounts` after PreCodegen

fn handlers::handler_init_user_metadata::<impl at programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitUserMetadataBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_init_user_metadata::InitUserMetadataBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_init_user_metadata::InitUserMetadataBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _36: ();
    let mut _37: bool;
    let mut _38: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _39: !;
    let mut _40: anchor_lang::error::Error;
    let mut _41: anchor_lang::error::ErrorCode;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _50: std::ops::RangeFrom<usize>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>>;
    let mut _53: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_init_user_metadata::InitUserMetadataBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_init_user_metadata::InitUserMetadataBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_init_user_metadata::InitUserMetadataBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _98: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _106: (anchor_lang::prelude::Pubkey, u8);
    let mut _107: &[&[u8]];
    let mut _108: &[&[u8]; 2];
    let _109: &[&[u8]; 2];
    let _110: [&[u8]; 2];
    let mut _111: &[u8];
    let _112: &[u8];
    let mut _113: &[u8];
    let _114: &[u8];
    let mut _115: &anchor_lang::prelude::Pubkey;
    let _116: anchor_lang::prelude::Pubkey;
    let mut _117: &anchor_lang::prelude::Signer<'_>;
    let mut _118: &anchor_lang::prelude::Pubkey;
    let mut _119: u8;
    let _120: ();
    let mut _121: bool;
    let mut _122: &anchor_lang::prelude::Pubkey;
    let _123: anchor_lang::prelude::Pubkey;
    let mut _124: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _125: &anchor_lang::prelude::Pubkey;
    let mut _126: !;
    let mut _127: anchor_lang::error::Error;
    let mut _128: anchor_lang::error::Error;
    let mut _129: anchor_lang::error::Error;
    let mut _130: anchor_lang::error::ErrorCode;
    let mut _131: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _132: anchor_lang::prelude::Pubkey;
    let mut _133: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _134: anchor_lang::prelude::Pubkey;
    let mut _137: &&anchor_lang::prelude::AccountInfo<'_>;
    let _138: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _141: (usize, bool);
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: &&anchor_lang::prelude::Pubkey;
    let mut _146: &&anchor_lang::prelude::Pubkey;
    let _147: &anchor_lang::prelude::Pubkey;
    let _148: anchor_lang::prelude::Pubkey;
    let mut _150: &anchor_lang::prelude::AccountInfo<'_>;
    let _151: ();
    let mut _152: bool;
    let mut _153: u64;
    let mut _156: &anchor_lang::prelude::Rent;
    let mut _157: usize;
    let mut _159: anchor_lang::prelude::AccountInfo<'_>;
    let mut _160: &anchor_lang::prelude::Signer<'_>;
    let mut _161: anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _164: anchor_lang::prelude::AccountInfo<'_>;
    let mut _165: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _166: anchor_lang::system_program::CreateAccount<'_>;
    let _167: ();
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _169: std::result::Result<(), anchor_lang::error::Error>;
    let mut _170: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _171: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _172: &[&[&[u8]]];
    let mut _173: &[&[&[u8]]; 1];
    let _174: &[&[&[u8]]; 1];
    let _175: [&[&[u8]]; 1];
    let mut _176: &[&[u8]];
    let _177: &[&[u8]];
    let _178: &[&[u8]];
    let mut _179: &[&[u8]; 3];
    let _180: [&[u8]; 3];
    let mut _181: &[u8];
    let _182: &[u8];
    let mut _183: &anchor_lang::prelude::Pubkey;
    let _184: anchor_lang::prelude::Pubkey;
    let mut _185: &anchor_lang::prelude::Signer<'_>;
    let mut _186: &[u8];
    let _187: &[u8];
    let _188: &[u8];
    let mut _189: &[u8; 1];
    let _190: [u8; 1];
    let mut _191: u8;
    let mut _192: std::ops::RangeFull;
    let mut _193: std::ops::RangeFull;
    let mut _194: u64;
    let mut _195: u64;
    let mut _196: usize;
    let mut _197: &anchor_lang::prelude::Pubkey;
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _203: ();
    let mut _204: bool;
    let mut _205: &anchor_lang::prelude::Pubkey;
    let _206: anchor_lang::prelude::Pubkey;
    let mut _207: &anchor_lang::prelude::Signer<'_>;
    let mut _208: &anchor_lang::prelude::Pubkey;
    let _209: anchor_lang::prelude::Pubkey;
    let mut _210: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _211: !;
    let mut _212: anchor_lang::error::Error;
    let mut _213: anchor_lang::error::Error;
    let mut _214: anchor_lang::error::AnchorError;
    let mut _215: std::string::String;
    let mut _216: &anchor_lang::error::ErrorCode;
    let _217: anchor_lang::error::ErrorCode;
    let mut _218: u32;
    let mut _219: anchor_lang::error::ErrorCode;
    let mut _220: std::string::String;
    let mut _221: &anchor_lang::error::ErrorCode;
    let _222: anchor_lang::error::ErrorCode;
    let mut _223: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _224: anchor_lang::error::ErrorOrigin;
    let mut _225: anchor_lang::error::Source;
    let mut _226: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _227: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _228: anchor_lang::prelude::Pubkey;
    let mut _229: &anchor_lang::prelude::Signer<'_>;
    let mut _230: anchor_lang::prelude::Pubkey;
    let mut _231: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _233: u64;
    let mut _234: u64;
    let mut _235: &anchor_lang::prelude::Rent;
    let mut _236: usize;
    let mut _237: u64;
    let _238: ();
    let mut _239: bool;
    let mut _240: u64;
    let mut _242: anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: &anchor_lang::prelude::Signer<'_>;
    let mut _244: anchor_lang::prelude::AccountInfo<'_>;
    let mut _245: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _247: anchor_lang::prelude::AccountInfo<'_>;
    let mut _248: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _249: anchor_lang::system_program::Transfer<'_>;
    let _250: ();
    let mut _251: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _252: std::result::Result<(), anchor_lang::error::Error>;
    let mut _253: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _254: u64;
    let mut _255: isize;
    let mut _257: !;
    let mut _258: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _261: anchor_lang::prelude::AccountInfo<'_>;
    let mut _262: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _264: anchor_lang::prelude::AccountInfo<'_>;
    let mut _265: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _266: anchor_lang::system_program::Allocate<'_>;
    let _267: ();
    let mut _268: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _269: std::result::Result<(), anchor_lang::error::Error>;
    let mut _270: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _271: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _272: &[&[&[u8]]];
    let mut _273: &[&[&[u8]]; 1];
    let _274: &[&[&[u8]]; 1];
    let _275: [&[&[u8]]; 1];
    let mut _276: &[&[u8]];
    let _277: &[&[u8]];
    let _278: &[&[u8]];
    let mut _279: &[&[u8]; 3];
    let _280: [&[u8]; 3];
    let mut _281: &[u8];
    let _282: &[u8];
    let mut _283: &anchor_lang::prelude::Pubkey;
    let _284: anchor_lang::prelude::Pubkey;
    let mut _285: &anchor_lang::prelude::Signer<'_>;
    let mut _286: &[u8];
    let _287: &[u8];
    let _288: &[u8];
    let mut _289: &[u8; 1];
    let _290: [u8; 1];
    let mut _291: u8;
    let mut _292: std::ops::RangeFull;
    let mut _293: std::ops::RangeFull;
    let mut _294: u64;
    let mut _295: usize;
    let mut _296: isize;
    let mut _298: !;
    let mut _299: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _302: anchor_lang::prelude::AccountInfo<'_>;
    let mut _303: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _305: anchor_lang::prelude::AccountInfo<'_>;
    let mut _306: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _307: anchor_lang::system_program::Assign<'_>;
    let _308: ();
    let mut _309: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _310: std::result::Result<(), anchor_lang::error::Error>;
    let mut _311: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _312: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _313: &[&[&[u8]]];
    let mut _314: &[&[&[u8]]; 1];
    let _315: &[&[&[u8]]; 1];
    let _316: [&[&[u8]]; 1];
    let mut _317: &[&[u8]];
    let _318: &[&[u8]];
    let _319: &[&[u8]];
    let mut _320: &[&[u8]; 3];
    let _321: [&[u8]; 3];
    let mut _322: &[u8];
    let _323: &[u8];
    let mut _324: &anchor_lang::prelude::Pubkey;
    let _325: anchor_lang::prelude::Pubkey;
    let mut _326: &anchor_lang::prelude::Signer<'_>;
    let mut _327: &[u8];
    let _328: &[u8];
    let _329: &[u8];
    let mut _330: &[u8; 1];
    let _331: [u8; 1];
    let mut _332: u8;
    let mut _333: std::ops::RangeFull;
    let mut _334: std::ops::RangeFull;
    let mut _335: &anchor_lang::prelude::Pubkey;
    let mut _336: isize;
    let mut _338: !;
    let mut _339: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _341: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _342: &anchor_lang::prelude::Pubkey;
    let mut _343: &anchor_lang::prelude::AccountInfo<'_>;
    let _344: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _345: isize;
    let mut _348: !;
    let mut _349: anchor_lang::error::Error;
    let mut _350: anchor_lang::error::Error;
    let mut _351: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _352: &anchor_lang::prelude::AccountInfo<'_>;
    let _353: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: isize;
    let mut _357: !;
    let mut _358: anchor_lang::error::Error;
    let mut _359: anchor_lang::error::Error;
    let _360: ();
    let mut _361: bool;
    let _362: ();
    let mut _363: bool;
    let mut _364: usize;
    let mut _365: usize;
    let mut _366: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _367: !;
    let mut _368: anchor_lang::error::Error;
    let mut _369: anchor_lang::error::Error;
    let mut _370: anchor_lang::error::Error;
    let mut _371: anchor_lang::error::ErrorCode;
    let mut _372: (usize, usize);
    let mut _373: usize;
    let mut _374: usize;
    let mut _375: &anchor_lang::prelude::AccountInfo<'_>;
    let _376: ();
    let mut _377: bool;
    let mut _378: &&anchor_lang::prelude::Pubkey;
    let mut _379: &&anchor_lang::prelude::Pubkey;
    let mut _380: !;
    let mut _381: anchor_lang::error::Error;
    let mut _382: anchor_lang::error::Error;
    let mut _383: anchor_lang::error::Error;
    let mut _384: anchor_lang::error::ErrorCode;
    let mut _385: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _386: anchor_lang::prelude::Pubkey;
    let mut _387: anchor_lang::prelude::Pubkey;
    let mut _389: &anchor_lang::prelude::Rent;
    let mut _390: usize;
    let mut _391: bool;
    let mut _392: u64;
    let mut _393: &anchor_lang::prelude::AccountInfo<'_>;
    let _394: anchor_lang::prelude::AccountInfo<'_>;
    let mut _395: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _396: u64;
    let mut _397: !;
    let mut _398: anchor_lang::error::Error;
    let mut _399: anchor_lang::error::Error;
    let mut _400: anchor_lang::error::ErrorCode;
    let _401: ();
    let mut _402: bool;
    let mut _403: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _404: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let _405: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _406: !;
    let mut _407: anchor_lang::error::Error;
    let mut _408: anchor_lang::error::Error;
    let mut _409: anchor_lang::error::ErrorCode;
    let _410: ();
    let mut _411: bool;
    let mut _412: &anchor_lang::prelude::Rent;
    let mut _413: u64;
    let mut _414: &anchor_lang::prelude::AccountInfo<'_>;
    let _415: anchor_lang::prelude::AccountInfo<'_>;
    let mut _416: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _417: usize;
    let mut _418: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _419: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _420: &anchor_lang::prelude::AccountInfo<'_>;
    let _421: anchor_lang::prelude::AccountInfo<'_>;
    let mut _422: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _423: isize;
    let mut _425: !;
    let mut _426: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _428: !;
    let mut _429: anchor_lang::error::Error;
    let mut _430: anchor_lang::error::Error;
    let mut _431: anchor_lang::error::ErrorCode;
    let _432: ();
    let mut _433: bool;
    let mut _434: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _435: &anchor_lang::prelude::Signer<'_>;
    let _436: &anchor_lang::prelude::Signer<'_>;
    let mut _437: !;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::Error;
    let mut _440: anchor_lang::error::ErrorCode;
    let mut _441: handlers::handler_init_user_metadata::InitUserMetadata<'_>;
    let mut _442: anchor_lang::prelude::Signer<'_>;
    let mut _443: anchor_lang::prelude::Signer<'_>;
    let mut _444: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _445: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>;
    let mut _446: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _447: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _451: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _452: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _453: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _454: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _455: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _456: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _457: bool;
    let mut _458: bool;
    let mut _459: bool;
    let mut _460: bool;
    let mut _461: bool;
    let mut _462: bool;
    let mut _463: bool;
    let mut _464: bool;
    let mut _465: bool;
    let mut _466: bool;
    let mut _467: bool;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    scope 1 {
        debug owner => _6;
        let _21: anchor_lang::prelude::Signer<'_>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::Signer<'_>;
        scope 6 {
            debug fee_payer => _21;
            let _42: &anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug user_metadata => _42;
                let _51: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>;
                scope 12 {
                    debug referrer_user_metadata => _51;
                    let _66: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    scope 17 {
                        debug rent => _66;
                        let _81: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        scope 22 {
                            debug system_program => _81;
                            let _96: anchor_lang::prelude::Rent;
                            let _100: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _103: anchor_lang::prelude::Rent;
                            scope 27 {
                                debug __anchor_rent => _96;
                                let _104: anchor_lang::prelude::Pubkey;
                                let _105: u8;
                                scope 32 {
                                    debug __pda_address => _104;
                                    debug __bump => _105;
                                    let _135: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                                    let _136: &anchor_lang::prelude::AccountInfo<'_>;
                                    scope 33 {
                                        debug user_metadata => _135;
                                        let _424: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _427: usize;
                                        scope 71 {
                                            debug residual => _424;
                                            scope 72 {
                                            }
                                        }
                                        scope 73 {
                                            debug val => _427;
                                            scope 74 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug actual_field => _136;
                                        let _139: &anchor_lang::prelude::Pubkey;
                                        scope 35 {
                                            debug actual_owner => _139;
                                            let _140: usize;
                                            scope 36 {
                                                debug space => _140;
                                                let _142: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                                                let _149: u64;
                                                let _355: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                                                let _356: anchor_lang::error::Error;
                                                let mut _450: &&anchor_lang::prelude::Pubkey;
                                                scope 37 {
                                                    debug pa => _142;
                                                    let _388: u64;
                                                    scope 70 {
                                                        debug required_lamports => _388;
                                                    }
                                                }
                                                scope 38 {
                                                    debug __current_lamports => _149;
                                                    let _154: usize;
                                                    let _232: u64;
                                                    let _346: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                                                    let _347: anchor_lang::error::Error;
                                                    let mut _448: &anchor_lang::error::ErrorCode;
                                                    let mut _449: &anchor_lang::error::ErrorCode;
                                                    scope 39 {
                                                        debug space => _154;
                                                        let _155: u64;
                                                        scope 40 {
                                                            debug lamports => _155;
                                                            let _158: anchor_lang::system_program::CreateAccount<'_>;
                                                            scope 41 {
                                                                debug cpi_accounts => _158;
                                                                let _163: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                scope 42 {
                                                                    debug cpi_context => _163;
                                                                    let _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _202: ();
                                                                    scope 43 {
                                                                        debug residual => _199;
                                                                        scope 44 {
                                                                        }
                                                                    }
                                                                    scope 45 {
                                                                        debug val => _202;
                                                                        scope 46 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug required_lamports => _232;
                                                        let _241: anchor_lang::system_program::Transfer<'_>;
                                                        let _260: anchor_lang::system_program::Allocate<'_>;
                                                        scope 48 {
                                                            debug cpi_accounts => _241;
                                                            let _246: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                            scope 49 {
                                                                debug cpi_context => _246;
                                                                let _256: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _259: ();
                                                                scope 50 {
                                                                    debug residual => _256;
                                                                    scope 51 {
                                                                    }
                                                                }
                                                                scope 52 {
                                                                    debug val => _259;
                                                                    scope 53 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 54 {
                                                            debug cpi_accounts => _260;
                                                            let _263: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                            scope 55 {
                                                                debug cpi_context => _263;
                                                                let _297: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _300: ();
                                                                let _301: anchor_lang::system_program::Assign<'_>;
                                                                scope 56 {
                                                                    debug residual => _297;
                                                                    scope 57 {
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug val => _300;
                                                                    scope 59 {
                                                                    }
                                                                }
                                                                scope 60 {
                                                                    debug cpi_accounts => _301;
                                                                    let _304: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                    scope 61 {
                                                                        debug cpi_context => _304;
                                                                        let _337: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _340: ();
                                                                        scope 62 {
                                                                            debug residual => _337;
                                                                            scope 63 {
                                                                            }
                                                                        }
                                                                        scope 64 {
                                                                            debug val => _340;
                                                                            scope 65 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 66 {
                                                        debug val => _346;
                                                    }
                                                    scope 67 {
                                                        debug e => _347;
                                                    }
                                                }
                                                scope 68 {
                                                    debug val => _355;
                                                }
                                                scope 69 {
                                                    debug e => _356;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _100;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _103;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _92;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _95;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _62;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _65;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _467 = const false;
        _466 = const false;
        _465 = const false;
        _464 = const false;
        _463 = const false;
        _462 = const false;
        _461 = const false;
        _460 = const false;
        _459 = const false;
        _458 = const false;
        _457 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitUserMetadataBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18}>(move _9, move _15) -> [return: bb2, unwind: bb217];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb217];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _468 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitUserMetadataBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb250];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _520 = discriminant(_7);
        StorageDead(_7);
        goto -> bb209;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
        _23 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18}>(move _24, move _30) -> [return: bb9, unwind: bb217];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb217];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _21 = move _35;
        StorageDead(_35);
        _470 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _451 = deref_copy (*_2);
        _38 = &(*_451);
        _37 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _38) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb249];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _518 = discriminant(_22);
        StorageDead(_22);
        goto -> bb208;
    }

    bb14: {
        switchInt(move _37) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        _41 = AccountNotEnoughKeys;
        _40 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _41) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_41);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _40);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb208;
    }

    bb17: {
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const 0_usize;
        _452 = deref_copy (*_2);
        _44 = Len((*_452));
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> [success: bb18, unwind continue];
    }

    bb18: {
        _453 = deref_copy (*_2);
        _42 = &(*_453)[_43];
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _454 = deref_copy (*_2);
        _49 = &(*_454);
        StorageLive(_50);
        _50 = RangeFrom::<usize> { start: const 1_usize };
        _48 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _49, move _50) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = &(*_48);
        _46 = &(*_47);
        (*_2) = move _46;
        StorageDead(_46);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <std::option::Option<anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata>> as anchor_lang::Accounts<'_, InitUserMetadataBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
        _53 = std::result::Result::<std::option::Option<anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18}>(move _54, move _60) -> [return: bb21, unwind: bb217];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata>>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb217];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>);
        _51 = move _65;
        StorageDead(_65);
        _472 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitUserMetadataBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb248];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _516 = discriminant(_52);
        StorageDead(_52);
        goto -> bb207;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
        _68 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18}>(move _69, move _75) -> [return: bb27, unwind: bb217];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb217];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _66 = move _80;
        StorageDead(_80);
        _474 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitUserMetadataBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb247];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _514 = discriminant(_67);
        StorageDead(_67);
        goto -> bb206;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18};
        _83 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18}>(move _84, move _90) -> [return: bb33, unwind: bb217];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb217];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _81 = move _95;
        StorageDead(_95);
        _476 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb246];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _512 = discriminant(_82);
        StorageDead(_82);
        goto -> bb205;
    }

    bb38: {
        _97 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _98) -> [return: bb39, unwind: bb217];
    }

    bb39: {
        StorageDead(_98);
        _99 = discriminant(_97);
        switchInt(move _99) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_103);
        _103 = ((_97 as Continue).0: anchor_lang::prelude::Rent);
        _96 = _103;
        StorageDead(_103);
        _478 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = const _;
        _111 = &(*_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_6;
        _116 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _117) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_100);
        _100 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _102) -> [return: bb42, unwind: bb245];
    }

    bb42: {
        StorageDead(_102);
        StorageDead(_100);
        _510 = discriminant(_97);
        StorageDead(_97);
        goto -> bb204;
    }

    bb43: {
        _115 = &_116;
        StorageDead(_117);
        _114 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _115) -> [return: bb44, unwind continue];
    }

    bb44: {
        _113 = &(*_114);
        StorageDead(_115);
        _110 = [move _111, move _113];
        StorageDead(_113);
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_108);
        StorageLive(_118);
        _118 = &(*_1);
        _106 = anchor_lang::prelude::Pubkey::find_program_address(move _107, move _118) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_118);
        StorageDead(_107);
        StorageLive(_104);
        _104 = (_106.0: anchor_lang::prelude::Pubkey);
        StorageLive(_105);
        _105 = (_106.1: u8);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageLive(_119);
        _119 = _105;
        ((*_4).0: u8) = move _119;
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &(*_42);
        _123 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _124) -> [return: bb46, unwind continue];
    }

    bb46: {
        _122 = &_123;
        StorageDead(_124);
        StorageLive(_125);
        _125 = &_104;
        _121 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _122, move _125) -> [return: bb47, unwind continue];
    }

    bb47: {
        switchInt(move _121) -> [0: bb53, otherwise: bb48];
    }

    bb48: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = ConstraintSeeds;
        _129 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _130) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_130);
        _128 = anchor_lang::error::Error::with_account_name::<&str>(move _129, const "user_metadata") -> [return: bb50, unwind: bb217];
    }

    bb50: {
        _467 = const true;
        StorageDead(_129);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &(*_42);
        _132 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _133) -> [return: bb51, unwind: bb244];
    }

    bb51: {
        StorageDead(_133);
        StorageLive(_134);
        _134 = _104;
        _131 = (move _132, move _134);
        StorageDead(_134);
        StorageDead(_132);
        _467 = const false;
        _127 = anchor_lang::error::Error::with_pubkeys(move _128, move _131) -> [return: bb52, unwind: bb244];
    }

    bb52: {
        StorageDead(_131);
        _467 = const false;
        StorageDead(_128);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _127);
        StorageDead(_127);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb203;
    }

    bb53: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_122);
        _120 = const ();
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_42;
        _137 = &(*_138);
        _136 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _137) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_137);
        StorageDead(_138);
        StorageLive(_139);
        _139 = ((*_136).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_140);
        _141 = CheckedAdd(const _, const 8_usize);
        assert(!move (_141.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 8_usize) -> [success: bb55, unwind continue];
    }

    bb55: {
        _140 = move (_141.0: usize);
        StorageLive(_142);
        StorageLive(_143);
        _143 = const false;
        switchInt(move _143) -> [0: bb58, otherwise: bb56];
    }

    bb56: {
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_139;
        StorageLive(_146);
        _450 = const _;
        _146 = &(*_450);
        _144 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _145, move _146) -> [return: bb57, unwind continue];
    }

    bb57: {
        switchInt(move _144) -> [0: bb135, otherwise: bb58];
    }

    bb58: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(*_42);
        _149 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _150) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _149;
        _152 = Eq(move _153, const 0_u64);
        switchInt(move _152) -> [0: bb76, otherwise: bb60];
    }

    bb60: {
        StorageDead(_153);
        StorageLive(_154);
        _154 = _140;
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_96;
        StorageLive(_157);
        _157 = _154;
        _155 = anchor_lang::prelude::Rent::minimum_balance(move _156, move _157) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_21;
        _159 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _160) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_42);
        _161 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _162) -> [return: bb63, unwind: bb216];
    }

    bb63: {
        StorageDead(_162);
        _466 = const true;
        _158 = anchor_lang::system_program::CreateAccount::<'_> { from: move _159, to: move _161 };
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_81;
        _164 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _165) -> [return: bb64, unwind: bb242];
    }

    bb64: {
        StorageDead(_165);
        StorageLive(_166);
        _466 = const false;
        _166 = move _158;
        _163 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _164, move _166) -> [return: bb65, unwind: bb242];
    }

    bb65: {
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _465 = const true;
        _171 = move _163;
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_6;
        _184 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _185) -> [return: bb66, unwind: bb240];
    }

    bb66: {
        _183 = &_184;
        StorageDead(_185);
        _182 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _183) -> [return: bb67, unwind: bb240];
    }

    bb67: {
        _181 = &(*_182);
        StorageDead(_183);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = _105;
        _190 = [move _191];
        _189 = &_190;
        StorageDead(_191);
        StorageLive(_192);
        _192 = RangeFull;
        _188 = <[u8; 1] as Index<RangeFull>>::index(move _189, move _192) -> [return: bb68, unwind: bb240];
    }

    bb68: {
        StorageDead(_192);
        StorageDead(_189);
        _187 = &(*_188);
        _186 = &(*_187);
        _180 = [const _, move _181, move _186];
        _179 = &_180;
        StorageDead(_186);
        StorageDead(_181);
        StorageLive(_193);
        _193 = RangeFull;
        _178 = <[&[u8]; 3] as Index<RangeFull>>::index(move _179, move _193) -> [return: bb69, unwind: bb240];
    }

    bb69: {
        StorageDead(_193);
        StorageDead(_179);
        _177 = &(*_178);
        _176 = &(*_177);
        _175 = [move _176];
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = move _173 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_173);
        _465 = const false;
        _170 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _171, move _172) -> [return: bb70, unwind: bb240];
    }

    bb70: {
        StorageDead(_172);
        _465 = const false;
        StorageDead(_171);
        StorageLive(_194);
        _194 = _155;
        StorageLive(_195);
        StorageLive(_196);
        _196 = _154;
        _195 = move _196 as u64 (IntToInt);
        StorageDead(_196);
        StorageLive(_197);
        _197 = &(*_1);
        _169 = anchor_lang::system_program::create_account(move _170, move _194, move _195, move _197) -> [return: bb71, unwind: bb242];
    }

    bb71: {
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_170);
        _168 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _169) -> [return: bb72, unwind: bb242];
    }

    bb72: {
        StorageDead(_169);
        _198 = discriminant(_168);
        switchInt(move _198) -> [0: bb73, 1: bb74, otherwise: bb5];
    }

    bb73: {
        StorageLive(_202);
        _202 = ((_168 as Continue).0: ());
        _167 = _202;
        StorageDead(_202);
        _480 = discriminant(_168);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_168);
        StorageDead(_167);
        _151 = const ();
        StorageDead(_163);
        _466 = const false;
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb130;
    }

    bb74: {
        StorageLive(_199);
        _199 = move ((_168 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_201);
        _201 = move _199;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _201) -> [return: bb75, unwind: bb238];
    }

    bb75: {
        StorageDead(_201);
        StorageDead(_199);
        _508 = discriminant(_168);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_163);
        _466 = const false;
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb199;
    }

    bb76: {
        StorageDead(_153);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &_21;
        _206 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _207) -> [return: bb77, unwind continue];
    }

    bb77: {
        _205 = &_206;
        StorageDead(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &(*_42);
        _209 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _210) -> [return: bb78, unwind continue];
    }

    bb78: {
        _208 = &_209;
        StorageDead(_210);
        _204 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _205, move _208) -> [return: bb79, unwind continue];
    }

    bb79: {
        switchInt(move _204) -> [0: bb88, otherwise: bb80];
    }

    bb80: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _449 = const _;
        _216 = &(*_449);
        _215 = anchor_lang::error::ErrorCode::name(move _216) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_216);
        StorageLive(_218);
        StorageLive(_219);
        _219 = TryingToInitPayerAsProgramAccount;
        _218 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _219) -> [return: bb82, unwind: bb215];
    }

    bb82: {
        StorageDead(_219);
        StorageLive(_220);
        StorageLive(_221);
        _448 = const _;
        _221 = &(*_448);
        _220 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _221) -> [return: bb83, unwind: bb215];
    }

    bb83: {
        StorageDead(_221);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_user_metadata.rs", line: const 32_u32 };
        _224 = anchor_lang::error::ErrorOrigin::Source(move _225);
        StorageDead(_225);
        _223 = std::option::Option::<ErrorOrigin>::Some(move _224);
        StorageDead(_224);
        StorageLive(_226);
        _226 = std::option::Option::<ComparedValues>::None;
        _214 = anchor_lang::error::AnchorError { error_name: move _215, error_code_number: move _218, error_msg: move _220, error_origin: move _223, compared_values: move _226 };
        StorageDead(_226);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_215);
        _213 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _214) -> [return: bb84, unwind: bb217];
    }

    bb84: {
        _464 = const true;
        StorageDead(_214);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_21;
        _228 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _229) -> [return: bb85, unwind: bb237];
    }

    bb85: {
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &(*_42);
        _230 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _231) -> [return: bb86, unwind: bb237];
    }

    bb86: {
        StorageDead(_231);
        _227 = (move _228, move _230);
        StorageDead(_230);
        StorageDead(_228);
        _464 = const false;
        _212 = anchor_lang::error::Error::with_pubkeys(move _213, move _227) -> [return: bb87, unwind: bb237];
    }

    bb87: {
        StorageDead(_227);
        _464 = const false;
        StorageDead(_213);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _212);
        StorageDead(_212);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb199;
    }

    bb88: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_205);
        _203 = const ();
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_96;
        StorageLive(_236);
        _236 = _140;
        _234 = anchor_lang::prelude::Rent::minimum_balance(move _235, move _236) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_236);
        StorageDead(_235);
        _233 = <u64 as Ord>::max(move _234, const 1_u64) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_234);
        StorageLive(_237);
        _237 = _149;
        _232 = core::num::<impl u64>::saturating_sub(move _233, move _237) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_237);
        StorageDead(_233);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = _232;
        _239 = Gt(move _240, const 0_u64);
        switchInt(move _239) -> [0: bb102, otherwise: bb92];
    }

    bb92: {
        StorageDead(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &_21;
        _242 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _243) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &(*_42);
        _244 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _245) -> [return: bb94, unwind: bb214];
    }

    bb94: {
        StorageDead(_245);
        _463 = const true;
        _241 = anchor_lang::system_program::Transfer::<'_> { from: move _242, to: move _244 };
        StorageDead(_244);
        StorageDead(_242);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_81;
        _247 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _248) -> [return: bb95, unwind: bb235];
    }

    bb95: {
        StorageDead(_248);
        StorageLive(_249);
        _463 = const false;
        _249 = move _241;
        _246 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _247, move _249) -> [return: bb96, unwind: bb235];
    }

    bb96: {
        StorageDead(_249);
        StorageDead(_247);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = move _246;
        StorageLive(_254);
        _254 = _232;
        _252 = anchor_lang::system_program::transfer(move _253, move _254) -> [return: bb97, unwind: bb235];
    }

    bb97: {
        StorageDead(_254);
        StorageDead(_253);
        _251 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _252) -> [return: bb98, unwind: bb235];
    }

    bb98: {
        StorageDead(_252);
        _255 = discriminant(_251);
        switchInt(move _255) -> [0: bb99, 1: bb100, otherwise: bb5];
    }

    bb99: {
        StorageLive(_259);
        _259 = ((_251 as Continue).0: ());
        _250 = _259;
        StorageDead(_259);
        _482 = discriminant(_251);
        StorageDead(_251);
        StorageDead(_250);
        _238 = const ();
        StorageDead(_246);
        _463 = const false;
        StorageDead(_241);
        goto -> bb103;
    }

    bb100: {
        StorageLive(_256);
        _256 = move ((_251 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_258);
        _258 = move _256;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _258) -> [return: bb101, unwind: bb233];
    }

    bb101: {
        StorageDead(_258);
        StorageDead(_256);
        _506 = discriminant(_251);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_246);
        _463 = const false;
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb198;
    }

    bb102: {
        StorageDead(_240);
        _238 = const ();
        goto -> bb103;
    }

    bb103: {
        StorageDead(_239);
        StorageDead(_238);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &(*_42);
        _261 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _262) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_262);
        _462 = const true;
        _260 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _261 };
        StorageDead(_261);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &_81;
        _264 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _265) -> [return: bb105, unwind: bb232];
    }

    bb105: {
        StorageDead(_265);
        StorageLive(_266);
        _462 = const false;
        _266 = move _260;
        _263 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _264, move _266) -> [return: bb106, unwind: bb232];
    }

    bb106: {
        StorageDead(_266);
        StorageDead(_264);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _461 = const true;
        _271 = move _263;
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &_6;
        _284 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _285) -> [return: bb107, unwind: bb230];
    }

    bb107: {
        _283 = &_284;
        StorageDead(_285);
        _282 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _283) -> [return: bb108, unwind: bb230];
    }

    bb108: {
        _281 = &(*_282);
        StorageDead(_283);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = _105;
        _290 = [move _291];
        _289 = &_290;
        StorageDead(_291);
        StorageLive(_292);
        _292 = RangeFull;
        _288 = <[u8; 1] as Index<RangeFull>>::index(move _289, move _292) -> [return: bb109, unwind: bb230];
    }

    bb109: {
        StorageDead(_292);
        StorageDead(_289);
        _287 = &(*_288);
        _286 = &(*_287);
        _280 = [const _, move _281, move _286];
        _279 = &_280;
        StorageDead(_286);
        StorageDead(_281);
        StorageLive(_293);
        _293 = RangeFull;
        _278 = <[&[u8]; 3] as Index<RangeFull>>::index(move _279, move _293) -> [return: bb110, unwind: bb230];
    }

    bb110: {
        StorageDead(_293);
        StorageDead(_279);
        _277 = &(*_278);
        _276 = &(*_277);
        _275 = [move _276];
        StorageDead(_276);
        _274 = &_275;
        _273 = &(*_274);
        _272 = move _273 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_273);
        _461 = const false;
        _270 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _271, move _272) -> [return: bb111, unwind: bb230];
    }

    bb111: {
        StorageDead(_272);
        _461 = const false;
        StorageDead(_271);
        StorageLive(_294);
        StorageLive(_295);
        _295 = _140;
        _294 = move _295 as u64 (IntToInt);
        StorageDead(_295);
        _269 = anchor_lang::system_program::allocate(move _270, move _294) -> [return: bb112, unwind: bb232];
    }

    bb112: {
        StorageDead(_294);
        StorageDead(_270);
        _268 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _269) -> [return: bb113, unwind: bb232];
    }

    bb113: {
        StorageDead(_269);
        _296 = discriminant(_268);
        switchInt(move _296) -> [0: bb114, 1: bb115, otherwise: bb5];
    }

    bb114: {
        StorageLive(_300);
        _300 = ((_268 as Continue).0: ());
        _267 = _300;
        StorageDead(_300);
        _484 = discriminant(_268);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_268);
        StorageDead(_267);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &(*_42);
        _302 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _303) -> [return: bb117, unwind: bb232];
    }

    bb115: {
        StorageLive(_297);
        _297 = move ((_268 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_299);
        _299 = move _297;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _299) -> [return: bb116, unwind: bb228];
    }

    bb116: {
        StorageDead(_299);
        StorageDead(_297);
        _504 = discriminant(_268);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_268);
        StorageDead(_267);
        goto -> bb197;
    }

    bb117: {
        StorageDead(_303);
        _460 = const true;
        _301 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _302 };
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &_81;
        _305 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _306) -> [return: bb118, unwind: bb227];
    }

    bb118: {
        StorageDead(_306);
        StorageLive(_307);
        _460 = const false;
        _307 = move _301;
        _304 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _305, move _307) -> [return: bb119, unwind: bb227];
    }

    bb119: {
        StorageDead(_307);
        StorageDead(_305);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _459 = const true;
        _312 = move _304;
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _326 = &_6;
        _325 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _326) -> [return: bb120, unwind: bb225];
    }

    bb120: {
        _324 = &_325;
        StorageDead(_326);
        _323 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _324) -> [return: bb121, unwind: bb225];
    }

    bb121: {
        _322 = &(*_323);
        StorageDead(_324);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = _105;
        _331 = [move _332];
        _330 = &_331;
        StorageDead(_332);
        StorageLive(_333);
        _333 = RangeFull;
        _329 = <[u8; 1] as Index<RangeFull>>::index(move _330, move _333) -> [return: bb122, unwind: bb225];
    }

    bb122: {
        StorageDead(_333);
        StorageDead(_330);
        _328 = &(*_329);
        _327 = &(*_328);
        _321 = [const _, move _322, move _327];
        _320 = &_321;
        StorageDead(_327);
        StorageDead(_322);
        StorageLive(_334);
        _334 = RangeFull;
        _319 = <[&[u8]; 3] as Index<RangeFull>>::index(move _320, move _334) -> [return: bb123, unwind: bb225];
    }

    bb123: {
        StorageDead(_334);
        StorageDead(_320);
        _318 = &(*_319);
        _317 = &(*_318);
        _316 = [move _317];
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = move _314 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_314);
        _459 = const false;
        _311 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _312, move _313) -> [return: bb124, unwind: bb225];
    }

    bb124: {
        StorageDead(_313);
        _459 = const false;
        StorageDead(_312);
        StorageLive(_335);
        _335 = &(*_1);
        _310 = anchor_lang::system_program::assign(move _311, move _335) -> [return: bb125, unwind: bb227];
    }

    bb125: {
        StorageDead(_335);
        StorageDead(_311);
        _309 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _310) -> [return: bb126, unwind: bb227];
    }

    bb126: {
        StorageDead(_310);
        _336 = discriminant(_309);
        switchInt(move _336) -> [0: bb127, 1: bb128, otherwise: bb5];
    }

    bb127: {
        StorageLive(_340);
        _340 = ((_309 as Continue).0: ());
        _308 = _340;
        StorageDead(_340);
        _486 = discriminant(_309);
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_309);
        StorageDead(_308);
        _151 = const ();
        StorageDead(_304);
        _460 = const false;
        StorageDead(_301);
        StorageDead(_263);
        _462 = const false;
        StorageDead(_260);
        StorageDead(_232);
        goto -> bb130;
    }

    bb128: {
        StorageLive(_337);
        _337 = move ((_309 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_339);
        _339 = move _337;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _339) -> [return: bb129, unwind: bb223];
    }

    bb129: {
        StorageDead(_339);
        StorageDead(_337);
        _502 = discriminant(_309);
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_304);
        _460 = const false;
        StorageDead(_301);
        goto -> bb197;
    }

    bb130: {
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &(*_1);
        StorageLive(_343);
        StorageLive(_344);
        _344 = &_42;
        _455 = deref_copy (*_344);
        _343 = &(*_455);
        _341 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::try_from_unchecked(move _342, move _343) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_343);
        StorageDead(_342);
        _345 = discriminant(_341);
        switchInt(move _345) -> [0: bb133, 1: bb132, otherwise: bb5];
    }

    bb132: {
        StorageLive(_347);
        _347 = move ((_341 as Err).0: anchor_lang::error::Error);
        StorageLive(_349);
        StorageLive(_350);
        _350 = move _347;
        _349 = anchor_lang::error::Error::with_account_name::<&str>(move _350, const "user_metadata") -> [return: bb134, unwind: bb222];
    }

    bb133: {
        StorageLive(_346);
        _346 = move ((_341 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        _142 = move _346;
        StorageDead(_346);
        StorageDead(_149);
        _488 = discriminant(_341);
        StorageDead(_344);
        StorageDead(_341);
        goto -> bb140;
    }

    bb134: {
        StorageDead(_350);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _349);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_149);
        _500 = discriminant(_341);
        StorageDead(_344);
        StorageDead(_341);
        goto -> bb200;
    }

    bb135: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_42;
        _456 = deref_copy (*_353);
        _352 = &(*_456);
        _351 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::try_from(move _352) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_352);
        _354 = discriminant(_351);
        switchInt(move _354) -> [0: bb138, 1: bb137, otherwise: bb5];
    }

    bb137: {
        StorageLive(_356);
        _356 = move ((_351 as Err).0: anchor_lang::error::Error);
        StorageLive(_358);
        StorageLive(_359);
        _359 = move _356;
        _358 = anchor_lang::error::Error::with_account_name::<&str>(move _359, const "user_metadata") -> [return: bb139, unwind: bb221];
    }

    bb138: {
        StorageLive(_355);
        _355 = move ((_351 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        _142 = move _355;
        StorageDead(_355);
        _490 = discriminant(_351);
        StorageDead(_353);
        StorageDead(_351);
        goto -> bb140;
    }

    bb139: {
        StorageDead(_359);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _358);
        StorageDead(_358);
        StorageDead(_356);
        _498 = discriminant(_351);
        StorageDead(_353);
        StorageDead(_351);
        goto -> bb200;
    }

    bb140: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_360);
        StorageLive(_361);
        _361 = const false;
        switchInt(move _361) -> [0: bb164, otherwise: bb141];
    }

    bb141: {
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = _140;
        StorageLive(_365);
        StorageLive(_366);
        _366 = &(*_136);
        _365 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _366) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_366);
        _363 = Ne(move _364, move _365);
        switchInt(move _363) -> [0: bb148, otherwise: bb143];
    }

    bb143: {
        StorageDead(_365);
        StorageDead(_364);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = ConstraintSpace;
        _370 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _371) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_371);
        _369 = anchor_lang::error::Error::with_account_name::<&str>(move _370, const "user_metadata") -> [return: bb145, unwind: bb217];
    }

    bb145: {
        _458 = const true;
        StorageDead(_370);
        StorageLive(_372);
        StorageLive(_373);
        _373 = _140;
        StorageLive(_374);
        StorageLive(_375);
        _375 = &(*_136);
        _374 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _375) -> [return: bb146, unwind: bb220];
    }

    bb146: {
        StorageDead(_375);
        _372 = (move _373, move _374);
        StorageDead(_374);
        StorageDead(_373);
        _458 = const false;
        _368 = anchor_lang::error::Error::with_values::<usize, usize>(move _369, move _372) -> [return: bb147, unwind: bb220];
    }

    bb147: {
        StorageDead(_372);
        _458 = const false;
        StorageDead(_369);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _368);
        StorageDead(_368);
        StorageDead(_363);
        StorageDead(_362);
        goto -> bb196;
    }

    bb148: {
        StorageDead(_365);
        StorageDead(_364);
        _362 = const ();
        StorageDead(_363);
        StorageDead(_362);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &_139;
        StorageLive(_379);
        _379 = &_1;
        _377 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _378, move _379) -> [return: bb149, unwind continue];
    }

    bb149: {
        switchInt(move _377) -> [0: bb154, otherwise: bb150];
    }

    bb150: {
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = ConstraintOwner;
        _383 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _384) -> [return: bb151, unwind continue];
    }

    bb151: {
        StorageDead(_384);
        _382 = anchor_lang::error::Error::with_account_name::<&str>(move _383, const "user_metadata") -> [return: bb152, unwind: bb217];
    }

    bb152: {
        StorageDead(_383);
        StorageLive(_385);
        StorageLive(_386);
        _386 = (*_139);
        StorageLive(_387);
        _387 = (*_1);
        _385 = (move _386, move _387);
        StorageDead(_387);
        StorageDead(_386);
        _381 = anchor_lang::error::Error::with_pubkeys(move _382, move _385) -> [return: bb153, unwind: bb217];
    }

    bb153: {
        StorageDead(_385);
        StorageDead(_382);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _381);
        StorageDead(_381);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb196;
    }

    bb154: {
        StorageDead(_379);
        StorageDead(_378);
        _376 = const ();
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_388);
        StorageLive(_389);
        _389 = &_96;
        StorageLive(_390);
        _390 = _140;
        _388 = anchor_lang::prelude::Rent::minimum_balance(move _389, move _390) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = &_142;
        _394 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _395) -> [return: bb156, unwind continue];
    }

    bb156: {
        _393 = &_394;
        StorageDead(_395);
        _392 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _393) -> [return: bb157, unwind: bb213];
    }

    bb157: {
        StorageDead(_393);
        StorageLive(_396);
        _396 = _388;
        _391 = Lt(move _392, move _396);
        switchInt(move _391) -> [0: bb162, otherwise: bb158];
    }

    bb158: {
        StorageDead(_396);
        drop(_394) -> [return: bb159, unwind: bb217];
    }

    bb159: {
        StorageDead(_394);
        StorageDead(_392);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = ConstraintRentExempt;
        _399 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _400) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_400);
        _398 = anchor_lang::error::Error::with_account_name::<&str>(move _399, const "user_metadata") -> [return: bb161, unwind: bb217];
    }

    bb161: {
        StorageDead(_399);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _398);
        StorageDead(_398);
        StorageDead(_391);
        StorageDead(_388);
        goto -> bb196;
    }

    bb162: {
        StorageDead(_396);
        drop(_394) -> [return: bb163, unwind: bb217];
    }

    bb163: {
        StorageDead(_394);
        StorageDead(_392);
        _360 = const ();
        StorageDead(_391);
        StorageDead(_388);
        goto -> bb165;
    }

    bb164: {
        _360 = const ();
        goto -> bb165;
    }

    bb165: {
        StorageDead(_361);
        StorageDead(_360);
        _135 = move _142;
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_136);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_135;
        _404 = &(*_405);
        _403 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _404) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_404);
        _402 = ((*_403).6: bool);
        switchInt(move _402) -> [0: bb167, otherwise: bb170];
    }

    bb167: {
        StorageDead(_405);
        StorageDead(_403);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = ConstraintMut;
        _408 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _409) -> [return: bb168, unwind continue];
    }

    bb168: {
        StorageDead(_409);
        _407 = anchor_lang::error::Error::with_account_name::<&str>(move _408, const "user_metadata") -> [return: bb169, unwind: bb217];
    }

    bb169: {
        StorageDead(_408);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _407);
        StorageDead(_407);
        StorageDead(_402);
        StorageDead(_401);
        goto -> bb202;
    }

    bb170: {
        StorageDead(_405);
        StorageDead(_403);
        _401 = const ();
        StorageDead(_402);
        StorageDead(_401);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = &_96;
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = &_135;
        _415 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _416) -> [return: bb171, unwind continue];
    }

    bb171: {
        _414 = &_415;
        StorageDead(_416);
        _413 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _414) -> [return: bb172, unwind: bb212];
    }

    bb172: {
        StorageDead(_414);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = &_135;
        _421 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _422) -> [return: bb173, unwind: bb212];
    }

    bb173: {
        _420 = &_421;
        StorageDead(_422);
        _419 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _420) -> [return: bb174, unwind: bb211];
    }

    bb174: {
        StorageDead(_420);
        _418 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _419) -> [return: bb175, unwind: bb211];
    }

    bb175: {
        _457 = const true;
        StorageDead(_419);
        _423 = discriminant(_418);
        switchInt(move _423) -> [0: bb176, 1: bb177, otherwise: bb5];
    }

    bb176: {
        StorageLive(_427);
        _427 = ((_418 as Continue).0: usize);
        _417 = _427;
        StorageDead(_427);
        _411 = anchor_lang::prelude::Rent::is_exempt(move _412, move _413, move _417) -> [return: bb179, unwind: bb218];
    }

    bb177: {
        StorageLive(_424);
        _424 = move ((_418 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_426);
        _426 = move _424;
        _0 = <std::result::Result<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _426) -> [return: bb178, unwind: bb218];
    }

    bb178: {
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_417);
        StorageDead(_413);
        StorageDead(_412);
        _496 = discriminant(_418);
        drop(_421) -> [return: bb193, unwind: bb212];
    }

    bb179: {
        switchInt(move _411) -> [0: bb181, otherwise: bb180];
    }

    bb180: {
        StorageDead(_417);
        StorageDead(_413);
        StorageDead(_412);
        _492 = discriminant(_418);
        drop(_421) -> [return: bb186, unwind: bb212];
    }

    bb181: {
        StorageDead(_417);
        StorageDead(_413);
        StorageDead(_412);
        _494 = discriminant(_418);
        drop(_421) -> [return: bb182, unwind: bb212];
    }

    bb182: {
        StorageDead(_421);
        _457 = const false;
        StorageDead(_418);
        drop(_415) -> [return: bb183, unwind: bb217];
    }

    bb183: {
        StorageDead(_415);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = ConstraintRentExempt;
        _430 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _431) -> [return: bb184, unwind continue];
    }

    bb184: {
        StorageDead(_431);
        _429 = anchor_lang::error::Error::with_account_name::<&str>(move _430, const "user_metadata") -> [return: bb185, unwind: bb217];
    }

    bb185: {
        StorageDead(_430);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _429);
        StorageDead(_429);
        goto -> bb195;
    }

    bb186: {
        StorageDead(_421);
        _457 = const false;
        StorageDead(_418);
        drop(_415) -> [return: bb187, unwind: bb217];
    }

    bb187: {
        StorageDead(_415);
        _410 = const ();
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &_21;
        _435 = &(*_436);
        _434 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _435) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_435);
        _433 = ((*_434).6: bool);
        switchInt(move _433) -> [0: bb189, otherwise: bb192];
    }

    bb189: {
        StorageDead(_436);
        StorageDead(_434);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = ConstraintMut;
        _439 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _440) -> [return: bb190, unwind continue];
    }

    bb190: {
        StorageDead(_440);
        _438 = anchor_lang::error::Error::with_account_name::<&str>(move _439, const "fee_payer") -> [return: bb191, unwind: bb217];
    }

    bb191: {
        StorageDead(_439);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Err(move _438);
        StorageDead(_438);
        StorageDead(_433);
        StorageDead(_432);
        goto -> bb202;
    }

    bb192: {
        StorageDead(_436);
        StorageDead(_434);
        _432 = const ();
        StorageDead(_433);
        StorageDead(_432);
        StorageLive(_441);
        StorageLive(_442);
        _442 = move _6;
        StorageLive(_443);
        _443 = move _21;
        StorageLive(_444);
        _444 = move _135;
        StorageLive(_445);
        _445 = move _51;
        StorageLive(_446);
        _446 = move _66;
        StorageLive(_447);
        _447 = move _81;
        _441 = handlers::handler_init_user_metadata::InitUserMetadata::<'_> { owner: move _442, fee_payer: move _443, user_metadata: move _444, referrer_user_metadata: move _445, rent: move _446, system_program: move _447 };
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_442);
        _0 = std::result::Result::<handlers::handler_init_user_metadata::InitUserMetadata<'_>, anchor_lang::error::Error>::Ok(move _441);
        StorageDead(_441);
        StorageDead(_135);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb210;
    }

    bb193: {
        StorageDead(_421);
        _457 = const false;
        StorageDead(_418);
        drop(_415) -> [return: bb194, unwind: bb217];
    }

    bb194: {
        StorageDead(_415);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb202;
    }

    bb196: {
        StorageDead(_361);
        StorageDead(_360);
        goto -> bb201;
    }

    bb197: {
        StorageDead(_263);
        _462 = const false;
        StorageDead(_260);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_232);
        goto -> bb199;
    }

    bb199: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_136);
        goto -> bb202;
    }

    bb202: {
        StorageDead(_135);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_96);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_81);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_66);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_51);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_21);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_6);
        goto -> bb210;
    }

    bb210: {
        return;
    }

    bb211 (cleanup): {
        drop(_421) -> [return: bb212, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_415) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_394) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_242) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        drop(_215) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        drop(_159) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        resume;
    }

    bb218 (cleanup): {
        _522 = discriminant(_418);
        goto -> bb211;
    }

    bb219 (cleanup): {
        drop(_369) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        switchInt(_458) -> [0: bb217, otherwise: bb219];
    }

    bb221 (cleanup): {
        _523 = discriminant(_351);
        goto -> bb217;
    }

    bb222 (cleanup): {
        _524 = discriminant(_341);
        goto -> bb217;
    }

    bb223 (cleanup): {
        _525 = discriminant(_309);
        goto -> bb227;
    }

    bb224 (cleanup): {
        drop(_312) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        switchInt(_459) -> [0: bb227, otherwise: bb224];
    }

    bb226 (cleanup): {
        drop(_301) -> [return: bb232, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        switchInt(_460) -> [0: bb232, otherwise: bb226];
    }

    bb228 (cleanup): {
        _526 = discriminant(_268);
        goto -> bb232;
    }

    bb229 (cleanup): {
        drop(_271) -> [return: bb232, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        switchInt(_461) -> [0: bb232, otherwise: bb229];
    }

    bb231 (cleanup): {
        drop(_260) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        switchInt(_462) -> [0: bb217, otherwise: bb231];
    }

    bb233 (cleanup): {
        _527 = discriminant(_251);
        goto -> bb235;
    }

    bb234 (cleanup): {
        drop(_241) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        switchInt(_463) -> [0: bb217, otherwise: bb234];
    }

    bb236 (cleanup): {
        drop(_213) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        switchInt(_464) -> [0: bb217, otherwise: bb236];
    }

    bb238 (cleanup): {
        _528 = discriminant(_168);
        goto -> bb242;
    }

    bb239 (cleanup): {
        drop(_171) -> [return: bb242, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        switchInt(_465) -> [0: bb242, otherwise: bb239];
    }

    bb241 (cleanup): {
        drop(_158) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        switchInt(_466) -> [0: bb217, otherwise: bb241];
    }

    bb243 (cleanup): {
        drop(_128) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        switchInt(_467) -> [0: bb217, otherwise: bb243];
    }

    bb245 (cleanup): {
        _529 = discriminant(_97);
        goto -> bb217;
    }

    bb246 (cleanup): {
        _530 = discriminant(_82);
        goto -> bb217;
    }

    bb247 (cleanup): {
        _531 = discriminant(_67);
        goto -> bb217;
    }

    bb248 (cleanup): {
        _532 = discriminant(_52);
        goto -> bb217;
    }

    bb249 (cleanup): {
        _533 = discriminant(_22);
        goto -> bb217;
    }

    bb250 (cleanup): {
        _534 = discriminant(_7);
        goto -> bb217;
    }
}
