// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:686:1: 686:25>::new` before PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:686:1: 686:25>::new(_1: anchor_lang::prelude::Pubkey, _2: utils::fraction::BigFraction) -> obligation::ObligationLiquidity {
    debug borrow_reserve => _1;
    debug cumulative_borrow_rate_bf => _2;
    let mut _0: state::obligation::ObligationLiquidity;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: state::reserve::BigFractionBytes;
    let mut _5: utils::fraction::BigFraction;
    let mut _6: [u64; 7];

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        _4 = <utils::fraction::BigFraction as Into<reserve::BigFractionBytes>>::into(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        _6 = [const 0_u64; 7];
        _0 = obligation::ObligationLiquidity { borrow_reserve: move _3, cumulative_borrow_rate_bsf: move _4, padding: const 0_u64, borrowed_amount_sf: const 0_u128, market_value_sf: const 0_u128, borrow_factor_adjusted_market_value_sf: const 0_u128, borrowed_amount_outside_elevation_groups: const 0_u64, padding2: move _6 };
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
