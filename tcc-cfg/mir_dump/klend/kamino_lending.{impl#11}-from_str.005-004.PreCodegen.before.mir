// MIR for `<impl at programs\klend\src\lib.rs:441:25: 441:42>::from_str` before PreCodegen

fn <impl at programs\klend\src\lib.rs:441:25: 441:42>::from_str(_1: &str) -> std::result::Result<LendingError, strum::ParseError> {
    debug s => _1;
    let mut _0: std::result::Result<LendingError, strum::ParseError>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: LendingError;
    let mut _133: LendingError;
    let mut _134: LendingError;
    let mut _135: LendingError;
    let mut _136: LendingError;
    let mut _137: LendingError;
    let mut _138: LendingError;
    let mut _139: LendingError;
    let mut _140: LendingError;
    let mut _141: LendingError;
    let mut _142: LendingError;
    let mut _143: LendingError;
    let mut _144: LendingError;
    let mut _145: LendingError;
    let mut _146: LendingError;
    let mut _147: LendingError;
    let mut _148: LendingError;
    let mut _149: LendingError;
    let mut _150: LendingError;
    let mut _151: LendingError;
    let mut _152: LendingError;
    let mut _153: LendingError;
    let mut _154: LendingError;
    let mut _155: LendingError;
    let mut _156: LendingError;
    let mut _157: LendingError;
    let mut _158: LendingError;
    let mut _159: LendingError;
    let mut _160: LendingError;
    let mut _161: LendingError;
    let mut _162: LendingError;
    let mut _163: LendingError;
    let mut _164: LendingError;
    let mut _165: LendingError;
    let mut _166: LendingError;
    let mut _167: LendingError;
    let mut _168: LendingError;
    let mut _169: LendingError;
    let mut _170: LendingError;
    let mut _171: LendingError;
    let mut _172: LendingError;
    let mut _173: LendingError;
    let mut _174: LendingError;
    let mut _175: LendingError;
    let mut _176: LendingError;
    let mut _177: LendingError;
    let mut _178: LendingError;
    let mut _179: LendingError;
    let mut _180: LendingError;
    let mut _181: LendingError;
    let mut _182: LendingError;
    let mut _183: LendingError;
    let mut _184: LendingError;
    let mut _185: LendingError;
    let mut _186: LendingError;
    let mut _187: LendingError;
    let mut _188: LendingError;
    let mut _189: LendingError;
    let mut _190: LendingError;
    let mut _191: LendingError;
    let mut _192: LendingError;
    let mut _193: LendingError;
    let mut _194: LendingError;
    let mut _195: LendingError;
    let mut _196: LendingError;
    let mut _197: LendingError;
    let mut _198: LendingError;
    let mut _199: LendingError;
    let mut _200: LendingError;
    let mut _201: LendingError;
    let mut _202: LendingError;
    let mut _203: LendingError;
    let mut _204: LendingError;
    let mut _205: LendingError;
    let mut _206: LendingError;
    let mut _207: LendingError;
    let mut _208: LendingError;
    let mut _209: LendingError;
    let mut _210: LendingError;
    let mut _211: LendingError;
    let mut _212: LendingError;
    let mut _213: LendingError;
    let mut _214: LendingError;
    let mut _215: LendingError;
    let mut _216: LendingError;
    let mut _217: LendingError;
    let mut _218: LendingError;
    let mut _219: LendingError;
    let mut _220: LendingError;
    let mut _221: LendingError;
    let mut _222: LendingError;
    let mut _223: LendingError;
    let mut _224: LendingError;
    let mut _225: LendingError;
    let mut _226: LendingError;
    let mut _227: LendingError;
    let mut _228: LendingError;
    let mut _229: LendingError;
    let mut _230: LendingError;
    let mut _231: LendingError;
    let mut _232: LendingError;
    let mut _233: LendingError;
    let mut _234: LendingError;
    let mut _235: LendingError;
    let mut _236: LendingError;
    let mut _237: LendingError;
    let mut _238: LendingError;
    let mut _239: LendingError;
    let mut _240: LendingError;
    let mut _241: LendingError;
    let mut _242: LendingError;
    let mut _243: LendingError;
    let mut _244: LendingError;
    let mut _245: LendingError;
    let mut _246: LendingError;
    let mut _247: LendingError;
    let mut _248: LendingError;
    let mut _249: LendingError;
    let mut _250: LendingError;
    let mut _251: LendingError;
    let mut _252: LendingError;
    let mut _253: LendingError;
    let mut _254: LendingError;
    let mut _255: LendingError;
    let mut _256: LendingError;
    let mut _257: LendingError;
    let mut _258: LendingError;
    let mut _259: LendingError;
    let mut _260: LendingError;
    let mut _261: LendingError;
    let mut _262: strum::ParseError;

    bb0: {
        _2 = <str as PartialEq>::eq(_1, const "InvalidMarketAuthority") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb261];
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "InvalidMarketOwner") -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb262];
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_1, const "InvalidAccountOwner") -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _4) -> [0: bb6, otherwise: bb263];
    }

    bb6: {
        _5 = <str as PartialEq>::eq(_1, const "InvalidAmount") -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _5) -> [0: bb8, otherwise: bb264];
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_1, const "InvalidConfig") -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _6) -> [0: bb10, otherwise: bb265];
    }

    bb10: {
        _7 = <str as PartialEq>::eq(_1, const "InvalidSigner") -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _7) -> [0: bb12, otherwise: bb266];
    }

    bb12: {
        _8 = <str as PartialEq>::eq(_1, const "InvalidAccountInput") -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _8) -> [0: bb14, otherwise: bb267];
    }

    bb14: {
        _9 = <str as PartialEq>::eq(_1, const "MathOverflow") -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _9) -> [0: bb16, otherwise: bb268];
    }

    bb16: {
        _10 = <str as PartialEq>::eq(_1, const "InsufficientLiquidity") -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _10) -> [0: bb18, otherwise: bb269];
    }

    bb18: {
        _11 = <str as PartialEq>::eq(_1, const "ReserveStale") -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _11) -> [0: bb20, otherwise: bb270];
    }

    bb20: {
        _12 = <str as PartialEq>::eq(_1, const "WithdrawTooSmall") -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _12) -> [0: bb22, otherwise: bb271];
    }

    bb22: {
        _13 = <str as PartialEq>::eq(_1, const "WithdrawTooLarge") -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _13) -> [0: bb24, otherwise: bb272];
    }

    bb24: {
        _14 = <str as PartialEq>::eq(_1, const "BorrowTooSmall") -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _14) -> [0: bb26, otherwise: bb273];
    }

    bb26: {
        _15 = <str as PartialEq>::eq(_1, const "BorrowTooLarge") -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _15) -> [0: bb28, otherwise: bb274];
    }

    bb28: {
        _16 = <str as PartialEq>::eq(_1, const "RepayTooSmall") -> [return: bb29, unwind continue];
    }

    bb29: {
        switchInt(move _16) -> [0: bb30, otherwise: bb275];
    }

    bb30: {
        _17 = <str as PartialEq>::eq(_1, const "LiquidationTooSmall") -> [return: bb31, unwind continue];
    }

    bb31: {
        switchInt(move _17) -> [0: bb32, otherwise: bb276];
    }

    bb32: {
        _18 = <str as PartialEq>::eq(_1, const "ObligationHealthy") -> [return: bb33, unwind continue];
    }

    bb33: {
        switchInt(move _18) -> [0: bb34, otherwise: bb277];
    }

    bb34: {
        _19 = <str as PartialEq>::eq(_1, const "ObligationStale") -> [return: bb35, unwind continue];
    }

    bb35: {
        switchInt(move _19) -> [0: bb36, otherwise: bb278];
    }

    bb36: {
        _20 = <str as PartialEq>::eq(_1, const "ObligationReserveLimit") -> [return: bb37, unwind continue];
    }

    bb37: {
        switchInt(move _20) -> [0: bb38, otherwise: bb279];
    }

    bb38: {
        _21 = <str as PartialEq>::eq(_1, const "InvalidObligationOwner") -> [return: bb39, unwind continue];
    }

    bb39: {
        switchInt(move _21) -> [0: bb40, otherwise: bb280];
    }

    bb40: {
        _22 = <str as PartialEq>::eq(_1, const "ObligationDepositsEmpty") -> [return: bb41, unwind continue];
    }

    bb41: {
        switchInt(move _22) -> [0: bb42, otherwise: bb281];
    }

    bb42: {
        _23 = <str as PartialEq>::eq(_1, const "ObligationBorrowsEmpty") -> [return: bb43, unwind continue];
    }

    bb43: {
        switchInt(move _23) -> [0: bb44, otherwise: bb282];
    }

    bb44: {
        _24 = <str as PartialEq>::eq(_1, const "ObligationDepositsZero") -> [return: bb45, unwind continue];
    }

    bb45: {
        switchInt(move _24) -> [0: bb46, otherwise: bb283];
    }

    bb46: {
        _25 = <str as PartialEq>::eq(_1, const "ObligationBorrowsZero") -> [return: bb47, unwind continue];
    }

    bb47: {
        switchInt(move _25) -> [0: bb48, otherwise: bb284];
    }

    bb48: {
        _26 = <str as PartialEq>::eq(_1, const "InvalidObligationCollateral") -> [return: bb49, unwind continue];
    }

    bb49: {
        switchInt(move _26) -> [0: bb50, otherwise: bb285];
    }

    bb50: {
        _27 = <str as PartialEq>::eq(_1, const "InvalidObligationLiquidity") -> [return: bb51, unwind continue];
    }

    bb51: {
        switchInt(move _27) -> [0: bb52, otherwise: bb286];
    }

    bb52: {
        _28 = <str as PartialEq>::eq(_1, const "ObligationCollateralEmpty") -> [return: bb53, unwind continue];
    }

    bb53: {
        switchInt(move _28) -> [0: bb54, otherwise: bb287];
    }

    bb54: {
        _29 = <str as PartialEq>::eq(_1, const "ObligationLiquidityEmpty") -> [return: bb55, unwind continue];
    }

    bb55: {
        switchInt(move _29) -> [0: bb56, otherwise: bb288];
    }

    bb56: {
        _30 = <str as PartialEq>::eq(_1, const "NegativeInterestRate") -> [return: bb57, unwind continue];
    }

    bb57: {
        switchInt(move _30) -> [0: bb58, otherwise: bb289];
    }

    bb58: {
        _31 = <str as PartialEq>::eq(_1, const "InvalidOracleConfig") -> [return: bb59, unwind continue];
    }

    bb59: {
        switchInt(move _31) -> [0: bb60, otherwise: bb290];
    }

    bb60: {
        _32 = <str as PartialEq>::eq(_1, const "InsufficientProtocolFeesToRedeem") -> [return: bb61, unwind continue];
    }

    bb61: {
        switchInt(move _32) -> [0: bb62, otherwise: bb291];
    }

    bb62: {
        _33 = <str as PartialEq>::eq(_1, const "FlashBorrowCpi") -> [return: bb63, unwind continue];
    }

    bb63: {
        switchInt(move _33) -> [0: bb64, otherwise: bb292];
    }

    bb64: {
        _34 = <str as PartialEq>::eq(_1, const "NoFlashRepayFound") -> [return: bb65, unwind continue];
    }

    bb65: {
        switchInt(move _34) -> [0: bb66, otherwise: bb293];
    }

    bb66: {
        _35 = <str as PartialEq>::eq(_1, const "InvalidFlashRepay") -> [return: bb67, unwind continue];
    }

    bb67: {
        switchInt(move _35) -> [0: bb68, otherwise: bb294];
    }

    bb68: {
        _36 = <str as PartialEq>::eq(_1, const "FlashRepayCpi") -> [return: bb69, unwind continue];
    }

    bb69: {
        switchInt(move _36) -> [0: bb70, otherwise: bb295];
    }

    bb70: {
        _37 = <str as PartialEq>::eq(_1, const "MultipleFlashBorrows") -> [return: bb71, unwind continue];
    }

    bb71: {
        switchInt(move _37) -> [0: bb72, otherwise: bb296];
    }

    bb72: {
        _38 = <str as PartialEq>::eq(_1, const "FlashLoansDisabled") -> [return: bb73, unwind continue];
    }

    bb73: {
        switchInt(move _38) -> [0: bb74, otherwise: bb297];
    }

    bb74: {
        _39 = <str as PartialEq>::eq(_1, const "SwitchboardV2Error") -> [return: bb75, unwind continue];
    }

    bb75: {
        switchInt(move _39) -> [0: bb76, otherwise: bb298];
    }

    bb76: {
        _40 = <str as PartialEq>::eq(_1, const "CouldNotDeserializeScope") -> [return: bb77, unwind continue];
    }

    bb77: {
        switchInt(move _40) -> [0: bb78, otherwise: bb299];
    }

    bb78: {
        _41 = <str as PartialEq>::eq(_1, const "PriceTooOld") -> [return: bb79, unwind continue];
    }

    bb79: {
        switchInt(move _41) -> [0: bb80, otherwise: bb300];
    }

    bb80: {
        _42 = <str as PartialEq>::eq(_1, const "PriceTooDivergentFromTwap") -> [return: bb81, unwind continue];
    }

    bb81: {
        switchInt(move _42) -> [0: bb82, otherwise: bb301];
    }

    bb82: {
        _43 = <str as PartialEq>::eq(_1, const "InvalidTwapPrice") -> [return: bb83, unwind continue];
    }

    bb83: {
        switchInt(move _43) -> [0: bb84, otherwise: bb302];
    }

    bb84: {
        _44 = <str as PartialEq>::eq(_1, const "GlobalEmergencyMode") -> [return: bb85, unwind continue];
    }

    bb85: {
        switchInt(move _44) -> [0: bb86, otherwise: bb303];
    }

    bb86: {
        _45 = <str as PartialEq>::eq(_1, const "InvalidFlag") -> [return: bb87, unwind continue];
    }

    bb87: {
        switchInt(move _45) -> [0: bb88, otherwise: bb304];
    }

    bb88: {
        _46 = <str as PartialEq>::eq(_1, const "PriceNotValid") -> [return: bb89, unwind continue];
    }

    bb89: {
        switchInt(move _46) -> [0: bb90, otherwise: bb305];
    }

    bb90: {
        _47 = <str as PartialEq>::eq(_1, const "PriceIsBiggerThanHeuristic") -> [return: bb91, unwind continue];
    }

    bb91: {
        switchInt(move _47) -> [0: bb92, otherwise: bb306];
    }

    bb92: {
        _48 = <str as PartialEq>::eq(_1, const "PriceIsLowerThanHeuristic") -> [return: bb93, unwind continue];
    }

    bb93: {
        switchInt(move _48) -> [0: bb94, otherwise: bb307];
    }

    bb94: {
        _49 = <str as PartialEq>::eq(_1, const "PriceIsZero") -> [return: bb95, unwind continue];
    }

    bb95: {
        switchInt(move _49) -> [0: bb96, otherwise: bb308];
    }

    bb96: {
        _50 = <str as PartialEq>::eq(_1, const "PriceConfidenceTooWide") -> [return: bb97, unwind continue];
    }

    bb97: {
        switchInt(move _50) -> [0: bb98, otherwise: bb309];
    }

    bb98: {
        _51 = <str as PartialEq>::eq(_1, const "IntegerOverflow") -> [return: bb99, unwind continue];
    }

    bb99: {
        switchInt(move _51) -> [0: bb100, otherwise: bb310];
    }

    bb100: {
        _52 = <str as PartialEq>::eq(_1, const "NoFarmForReserve") -> [return: bb101, unwind continue];
    }

    bb101: {
        switchInt(move _52) -> [0: bb102, otherwise: bb311];
    }

    bb102: {
        _53 = <str as PartialEq>::eq(_1, const "IncorrectInstructionInPosition") -> [return: bb103, unwind continue];
    }

    bb103: {
        switchInt(move _53) -> [0: bb104, otherwise: bb312];
    }

    bb104: {
        _54 = <str as PartialEq>::eq(_1, const "NoPriceFound") -> [return: bb105, unwind continue];
    }

    bb105: {
        switchInt(move _54) -> [0: bb106, otherwise: bb313];
    }

    bb106: {
        _55 = <str as PartialEq>::eq(_1, const "InvalidTwapConfig") -> [return: bb107, unwind continue];
    }

    bb107: {
        switchInt(move _55) -> [0: bb108, otherwise: bb314];
    }

    bb108: {
        _56 = <str as PartialEq>::eq(_1, const "InvalidPythPriceAccount") -> [return: bb109, unwind continue];
    }

    bb109: {
        switchInt(move _56) -> [0: bb110, otherwise: bb315];
    }

    bb110: {
        _57 = <str as PartialEq>::eq(_1, const "InvalidSwitchboardAccount") -> [return: bb111, unwind continue];
    }

    bb111: {
        switchInt(move _57) -> [0: bb112, otherwise: bb316];
    }

    bb112: {
        _58 = <str as PartialEq>::eq(_1, const "InvalidScopePriceAccount") -> [return: bb113, unwind continue];
    }

    bb113: {
        switchInt(move _58) -> [0: bb114, otherwise: bb317];
    }

    bb114: {
        _59 = <str as PartialEq>::eq(_1, const "ObligationCollateralLtvZero") -> [return: bb115, unwind continue];
    }

    bb115: {
        switchInt(move _59) -> [0: bb116, otherwise: bb318];
    }

    bb116: {
        _60 = <str as PartialEq>::eq(_1, const "InvalidObligationSeedsValue") -> [return: bb117, unwind continue];
    }

    bb117: {
        switchInt(move _60) -> [0: bb118, otherwise: bb319];
    }

    bb118: {
        _61 = <str as PartialEq>::eq(_1, const "DeprecatedInvalidObligationId") -> [return: bb119, unwind continue];
    }

    bb119: {
        switchInt(move _61) -> [0: bb120, otherwise: bb320];
    }

    bb120: {
        _62 = <str as PartialEq>::eq(_1, const "InvalidBorrowRateCurvePoint") -> [return: bb121, unwind continue];
    }

    bb121: {
        switchInt(move _62) -> [0: bb122, otherwise: bb321];
    }

    bb122: {
        _63 = <str as PartialEq>::eq(_1, const "InvalidUtilizationRate") -> [return: bb123, unwind continue];
    }

    bb123: {
        switchInt(move _63) -> [0: bb124, otherwise: bb322];
    }

    bb124: {
        _64 = <str as PartialEq>::eq(_1, const "CannotSocializeObligationWithCollateral") -> [return: bb125, unwind continue];
    }

    bb125: {
        switchInt(move _64) -> [0: bb126, otherwise: bb323];
    }

    bb126: {
        _65 = <str as PartialEq>::eq(_1, const "ObligationEmpty") -> [return: bb127, unwind continue];
    }

    bb127: {
        switchInt(move _65) -> [0: bb128, otherwise: bb324];
    }

    bb128: {
        _66 = <str as PartialEq>::eq(_1, const "WithdrawalCapReached") -> [return: bb129, unwind continue];
    }

    bb129: {
        switchInt(move _66) -> [0: bb130, otherwise: bb325];
    }

    bb130: {
        _67 = <str as PartialEq>::eq(_1, const "LastTimestampGreaterThanCurrent") -> [return: bb131, unwind continue];
    }

    bb131: {
        switchInt(move _67) -> [0: bb132, otherwise: bb326];
    }

    bb132: {
        _68 = <str as PartialEq>::eq(_1, const "LiquidationRewardTooSmall") -> [return: bb133, unwind continue];
    }

    bb133: {
        switchInt(move _68) -> [0: bb134, otherwise: bb327];
    }

    bb134: {
        _69 = <str as PartialEq>::eq(_1, const "IsolatedAssetTierViolation") -> [return: bb135, unwind continue];
    }

    bb135: {
        switchInt(move _69) -> [0: bb136, otherwise: bb328];
    }

    bb136: {
        _70 = <str as PartialEq>::eq(_1, const "InconsistentElevationGroup") -> [return: bb137, unwind continue];
    }

    bb137: {
        switchInt(move _70) -> [0: bb138, otherwise: bb329];
    }

    bb138: {
        _71 = <str as PartialEq>::eq(_1, const "InvalidElevationGroup") -> [return: bb139, unwind continue];
    }

    bb139: {
        switchInt(move _71) -> [0: bb140, otherwise: bb330];
    }

    bb140: {
        _72 = <str as PartialEq>::eq(_1, const "InvalidElevationGroupConfig") -> [return: bb141, unwind continue];
    }

    bb141: {
        switchInt(move _72) -> [0: bb142, otherwise: bb331];
    }

    bb142: {
        _73 = <str as PartialEq>::eq(_1, const "UnhealthyElevationGroupLtv") -> [return: bb143, unwind continue];
    }

    bb143: {
        switchInt(move _73) -> [0: bb144, otherwise: bb332];
    }

    bb144: {
        _74 = <str as PartialEq>::eq(_1, const "ElevationGroupNewLoansDisabled") -> [return: bb145, unwind continue];
    }

    bb145: {
        switchInt(move _74) -> [0: bb146, otherwise: bb333];
    }

    bb146: {
        _75 = <str as PartialEq>::eq(_1, const "ReserveDeprecated") -> [return: bb147, unwind continue];
    }

    bb147: {
        switchInt(move _75) -> [0: bb148, otherwise: bb334];
    }

    bb148: {
        _76 = <str as PartialEq>::eq(_1, const "ReferrerAccountNotInitialized") -> [return: bb149, unwind continue];
    }

    bb149: {
        switchInt(move _76) -> [0: bb150, otherwise: bb335];
    }

    bb150: {
        _77 = <str as PartialEq>::eq(_1, const "ReferrerAccountMintMissmatch") -> [return: bb151, unwind continue];
    }

    bb151: {
        switchInt(move _77) -> [0: bb152, otherwise: bb336];
    }

    bb152: {
        _78 = <str as PartialEq>::eq(_1, const "ReferrerAccountWrongAddress") -> [return: bb153, unwind continue];
    }

    bb153: {
        switchInt(move _78) -> [0: bb154, otherwise: bb337];
    }

    bb154: {
        _79 = <str as PartialEq>::eq(_1, const "ReferrerAccountReferrerMissmatch") -> [return: bb155, unwind continue];
    }

    bb155: {
        switchInt(move _79) -> [0: bb156, otherwise: bb338];
    }

    bb156: {
        _80 = <str as PartialEq>::eq(_1, const "ReferrerAccountMissing") -> [return: bb157, unwind continue];
    }

    bb157: {
        switchInt(move _80) -> [0: bb158, otherwise: bb339];
    }

    bb158: {
        _81 = <str as PartialEq>::eq(_1, const "InsufficientReferralFeesToRedeem") -> [return: bb159, unwind continue];
    }

    bb159: {
        switchInt(move _81) -> [0: bb160, otherwise: bb340];
    }

    bb160: {
        _82 = <str as PartialEq>::eq(_1, const "CpiDisabled") -> [return: bb161, unwind continue];
    }

    bb161: {
        switchInt(move _82) -> [0: bb162, otherwise: bb341];
    }

    bb162: {
        _83 = <str as PartialEq>::eq(_1, const "ShortUrlNotAsciiAlphanumeric") -> [return: bb163, unwind continue];
    }

    bb163: {
        switchInt(move _83) -> [0: bb164, otherwise: bb342];
    }

    bb164: {
        _84 = <str as PartialEq>::eq(_1, const "ReserveObsolete") -> [return: bb165, unwind continue];
    }

    bb165: {
        switchInt(move _84) -> [0: bb166, otherwise: bb343];
    }

    bb166: {
        _85 = <str as PartialEq>::eq(_1, const "ElevationGroupAlreadyActivated") -> [return: bb167, unwind continue];
    }

    bb167: {
        switchInt(move _85) -> [0: bb168, otherwise: bb344];
    }

    bb168: {
        _86 = <str as PartialEq>::eq(_1, const "ObligationInObsoleteReserve") -> [return: bb169, unwind continue];
    }

    bb169: {
        switchInt(move _86) -> [0: bb170, otherwise: bb345];
    }

    bb170: {
        _87 = <str as PartialEq>::eq(_1, const "ReferrerStateOwnerMismatch") -> [return: bb171, unwind continue];
    }

    bb171: {
        switchInt(move _87) -> [0: bb172, otherwise: bb346];
    }

    bb172: {
        _88 = <str as PartialEq>::eq(_1, const "UserMetadataOwnerAlreadySet") -> [return: bb173, unwind continue];
    }

    bb173: {
        switchInt(move _88) -> [0: bb174, otherwise: bb347];
    }

    bb174: {
        _89 = <str as PartialEq>::eq(_1, const "CollateralNonLiquidatable") -> [return: bb175, unwind continue];
    }

    bb175: {
        switchInt(move _89) -> [0: bb176, otherwise: bb348];
    }

    bb176: {
        _90 = <str as PartialEq>::eq(_1, const "BorrowingDisabled") -> [return: bb177, unwind continue];
    }

    bb177: {
        switchInt(move _90) -> [0: bb178, otherwise: bb349];
    }

    bb178: {
        _91 = <str as PartialEq>::eq(_1, const "BorrowLimitExceeded") -> [return: bb179, unwind continue];
    }

    bb179: {
        switchInt(move _91) -> [0: bb180, otherwise: bb350];
    }

    bb180: {
        _92 = <str as PartialEq>::eq(_1, const "DepositLimitExceeded") -> [return: bb181, unwind continue];
    }

    bb181: {
        switchInt(move _92) -> [0: bb182, otherwise: bb351];
    }

    bb182: {
        _93 = <str as PartialEq>::eq(_1, const "BorrowingDisabledOutsideElevationGroup") -> [return: bb183, unwind continue];
    }

    bb183: {
        switchInt(move _93) -> [0: bb184, otherwise: bb352];
    }

    bb184: {
        _94 = <str as PartialEq>::eq(_1, const "NetValueRemainingTooSmall") -> [return: bb185, unwind continue];
    }

    bb185: {
        switchInt(move _94) -> [0: bb186, otherwise: bb353];
    }

    bb186: {
        _95 = <str as PartialEq>::eq(_1, const "WorseLtvBlocked") -> [return: bb187, unwind continue];
    }

    bb187: {
        switchInt(move _95) -> [0: bb188, otherwise: bb354];
    }

    bb188: {
        _96 = <str as PartialEq>::eq(_1, const "LiabilitiesBiggerThanAssets") -> [return: bb189, unwind continue];
    }

    bb189: {
        switchInt(move _96) -> [0: bb190, otherwise: bb355];
    }

    bb190: {
        _97 = <str as PartialEq>::eq(_1, const "ReserveTokenBalanceMismatch") -> [return: bb191, unwind continue];
    }

    bb191: {
        switchInt(move _97) -> [0: bb192, otherwise: bb356];
    }

    bb192: {
        _98 = <str as PartialEq>::eq(_1, const "ReserveVaultBalanceMismatch") -> [return: bb193, unwind continue];
    }

    bb193: {
        switchInt(move _98) -> [0: bb194, otherwise: bb357];
    }

    bb194: {
        _99 = <str as PartialEq>::eq(_1, const "ReserveAccountingMismatch") -> [return: bb195, unwind continue];
    }

    bb195: {
        switchInt(move _99) -> [0: bb196, otherwise: bb358];
    }

    bb196: {
        _100 = <str as PartialEq>::eq(_1, const "BorrowingAboveUtilizationRateDisabled") -> [return: bb197, unwind continue];
    }

    bb197: {
        switchInt(move _100) -> [0: bb198, otherwise: bb359];
    }

    bb198: {
        _101 = <str as PartialEq>::eq(_1, const "LiquidationBorrowFactorPriority") -> [return: bb199, unwind continue];
    }

    bb199: {
        switchInt(move _101) -> [0: bb200, otherwise: bb360];
    }

    bb200: {
        _102 = <str as PartialEq>::eq(_1, const "LiquidationLowestLiquidationLtvPriority") -> [return: bb201, unwind continue];
    }

    bb201: {
        switchInt(move _102) -> [0: bb202, otherwise: bb361];
    }

    bb202: {
        _103 = <str as PartialEq>::eq(_1, const "ElevationGroupBorrowLimitExceeded") -> [return: bb203, unwind continue];
    }

    bb203: {
        switchInt(move _103) -> [0: bb204, otherwise: bb362];
    }

    bb204: {
        _104 = <str as PartialEq>::eq(_1, const "ElevationGroupWithoutDebtReserve") -> [return: bb205, unwind continue];
    }

    bb205: {
        switchInt(move _104) -> [0: bb206, otherwise: bb363];
    }

    bb206: {
        _105 = <str as PartialEq>::eq(_1, const "ElevationGroupMaxCollateralReserveZero") -> [return: bb207, unwind continue];
    }

    bb207: {
        switchInt(move _105) -> [0: bb208, otherwise: bb364];
    }

    bb208: {
        _106 = <str as PartialEq>::eq(_1, const "ElevationGroupHasAnotherDebtReserve") -> [return: bb209, unwind continue];
    }

    bb209: {
        switchInt(move _106) -> [0: bb210, otherwise: bb365];
    }

    bb210: {
        _107 = <str as PartialEq>::eq(_1, const "ElevationGroupDebtReserveAsCollateral") -> [return: bb211, unwind continue];
    }

    bb211: {
        switchInt(move _107) -> [0: bb212, otherwise: bb366];
    }

    bb212: {
        _108 = <str as PartialEq>::eq(_1, const "ObligationCollateralExceedsElevationGroupLimit") -> [return: bb213, unwind continue];
    }

    bb213: {
        switchInt(move _108) -> [0: bb214, otherwise: bb367];
    }

    bb214: {
        _109 = <str as PartialEq>::eq(_1, const "ObligationElevationGroupMultipleDebtReserve") -> [return: bb215, unwind continue];
    }

    bb215: {
        switchInt(move _109) -> [0: bb216, otherwise: bb368];
    }

    bb216: {
        _110 = <str as PartialEq>::eq(_1, const "UnsupportedTokenExtension") -> [return: bb217, unwind continue];
    }

    bb217: {
        switchInt(move _110) -> [0: bb218, otherwise: bb369];
    }

    bb218: {
        _111 = <str as PartialEq>::eq(_1, const "InvalidTokenAccount") -> [return: bb219, unwind continue];
    }

    bb219: {
        switchInt(move _111) -> [0: bb220, otherwise: bb370];
    }

    bb220: {
        _112 = <str as PartialEq>::eq(_1, const "DepositDisabledOutsideElevationGroup") -> [return: bb221, unwind continue];
    }

    bb221: {
        switchInt(move _112) -> [0: bb222, otherwise: bb371];
    }

    bb222: {
        _113 = <str as PartialEq>::eq(_1, const "CannotCalculateReferralAmountDueToSlotsMismatch") -> [return: bb223, unwind continue];
    }

    bb223: {
        switchInt(move _113) -> [0: bb224, otherwise: bb372];
    }

    bb224: {
        _114 = <str as PartialEq>::eq(_1, const "ObligationOwnersMustMatch") -> [return: bb225, unwind continue];
    }

    bb225: {
        switchInt(move _114) -> [0: bb226, otherwise: bb373];
    }

    bb226: {
        _115 = <str as PartialEq>::eq(_1, const "ObligationsMustMatch") -> [return: bb227, unwind continue];
    }

    bb227: {
        switchInt(move _115) -> [0: bb228, otherwise: bb374];
    }

    bb228: {
        _116 = <str as PartialEq>::eq(_1, const "LendingMarketsMustMatch") -> [return: bb229, unwind continue];
    }

    bb229: {
        switchInt(move _116) -> [0: bb230, otherwise: bb375];
    }

    bb230: {
        _117 = <str as PartialEq>::eq(_1, const "ObligationCurrentlyMarkedForDeleveraging") -> [return: bb231, unwind continue];
    }

    bb231: {
        switchInt(move _117) -> [0: bb232, otherwise: bb376];
    }

    bb232: {
        _118 = <str as PartialEq>::eq(_1, const "MaximumWithdrawValueZero") -> [return: bb233, unwind continue];
    }

    bb233: {
        switchInt(move _118) -> [0: bb234, otherwise: bb377];
    }

    bb234: {
        _119 = <str as PartialEq>::eq(_1, const "ZeroMaxLtvAssetsInDeposits") -> [return: bb235, unwind continue];
    }

    bb235: {
        switchInt(move _119) -> [0: bb236, otherwise: bb378];
    }

    bb236: {
        _120 = <str as PartialEq>::eq(_1, const "LowestLtvAssetsPriority") -> [return: bb237, unwind continue];
    }

    bb237: {
        switchInt(move _120) -> [0: bb238, otherwise: bb379];
    }

    bb238: {
        _121 = <str as PartialEq>::eq(_1, const "WorseLtvThanUnhealthyLtv") -> [return: bb239, unwind continue];
    }

    bb239: {
        switchInt(move _121) -> [0: bb240, otherwise: bb380];
    }

    bb240: {
        _122 = <str as PartialEq>::eq(_1, const "FarmAccountsMissing") -> [return: bb241, unwind continue];
    }

    bb241: {
        switchInt(move _122) -> [0: bb242, otherwise: bb381];
    }

    bb242: {
        _123 = <str as PartialEq>::eq(_1, const "RepayTooSmallForFullLiquidation") -> [return: bb243, unwind continue];
    }

    bb243: {
        switchInt(move _123) -> [0: bb244, otherwise: bb382];
    }

    bb244: {
        _124 = <str as PartialEq>::eq(_1, const "InsufficientRepayAmount") -> [return: bb245, unwind continue];
    }

    bb245: {
        switchInt(move _124) -> [0: bb246, otherwise: bb383];
    }

    bb246: {
        _125 = <str as PartialEq>::eq(_1, const "OrderIndexOutOfBounds") -> [return: bb247, unwind continue];
    }

    bb247: {
        switchInt(move _125) -> [0: bb248, otherwise: bb384];
    }

    bb248: {
        _126 = <str as PartialEq>::eq(_1, const "InvalidOrderConfiguration") -> [return: bb249, unwind continue];
    }

    bb249: {
        switchInt(move _126) -> [0: bb250, otherwise: bb385];
    }

    bb250: {
        _127 = <str as PartialEq>::eq(_1, const "OrderConfigurationNotSupportedByObligation") -> [return: bb251, unwind continue];
    }

    bb251: {
        switchInt(move _127) -> [0: bb252, otherwise: bb386];
    }

    bb252: {
        _128 = <str as PartialEq>::eq(_1, const "OperationNotPermittedWithCurrentObligationOrders") -> [return: bb253, unwind continue];
    }

    bb253: {
        switchInt(move _128) -> [0: bb254, otherwise: bb387];
    }

    bb254: {
        _129 = <str as PartialEq>::eq(_1, const "OperationNotPermittedMarketImmutable") -> [return: bb255, unwind continue];
    }

    bb255: {
        switchInt(move _129) -> [0: bb256, otherwise: bb388];
    }

    bb256: {
        _130 = <str as PartialEq>::eq(_1, const "OrderCreationDisabled") -> [return: bb257, unwind continue];
    }

    bb257: {
        switchInt(move _130) -> [0: bb258, otherwise: bb389];
    }

    bb258: {
        _131 = <str as PartialEq>::eq(_1, const "NoUpgradeAuthority") -> [return: bb259, unwind continue];
    }

    bb259: {
        switchInt(move _131) -> [0: bb260, otherwise: bb390];
    }

    bb260: {
        StorageLive(_262);
        _262 = VariantNotFound;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Err(move _262);
        StorageDead(_262);
        goto -> bb391;
    }

    bb261: {
        StorageLive(_132);
        _132 = LendingError::InvalidMarketAuthority;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _132);
        StorageDead(_132);
        goto -> bb391;
    }

    bb262: {
        StorageLive(_133);
        _133 = LendingError::InvalidMarketOwner;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _133);
        StorageDead(_133);
        goto -> bb391;
    }

    bb263: {
        StorageLive(_134);
        _134 = LendingError::InvalidAccountOwner;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _134);
        StorageDead(_134);
        goto -> bb391;
    }

    bb264: {
        StorageLive(_135);
        _135 = LendingError::InvalidAmount;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _135);
        StorageDead(_135);
        goto -> bb391;
    }

    bb265: {
        StorageLive(_136);
        _136 = LendingError::InvalidConfig;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _136);
        StorageDead(_136);
        goto -> bb391;
    }

    bb266: {
        StorageLive(_137);
        _137 = LendingError::InvalidSigner;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _137);
        StorageDead(_137);
        goto -> bb391;
    }

    bb267: {
        StorageLive(_138);
        _138 = LendingError::InvalidAccountInput;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _138);
        StorageDead(_138);
        goto -> bb391;
    }

    bb268: {
        StorageLive(_139);
        _139 = LendingError::MathOverflow;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _139);
        StorageDead(_139);
        goto -> bb391;
    }

    bb269: {
        StorageLive(_140);
        _140 = LendingError::InsufficientLiquidity;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _140);
        StorageDead(_140);
        goto -> bb391;
    }

    bb270: {
        StorageLive(_141);
        _141 = LendingError::ReserveStale;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _141);
        StorageDead(_141);
        goto -> bb391;
    }

    bb271: {
        StorageLive(_142);
        _142 = LendingError::WithdrawTooSmall;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _142);
        StorageDead(_142);
        goto -> bb391;
    }

    bb272: {
        StorageLive(_143);
        _143 = LendingError::WithdrawTooLarge;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _143);
        StorageDead(_143);
        goto -> bb391;
    }

    bb273: {
        StorageLive(_144);
        _144 = LendingError::BorrowTooSmall;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _144);
        StorageDead(_144);
        goto -> bb391;
    }

    bb274: {
        StorageLive(_145);
        _145 = LendingError::BorrowTooLarge;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _145);
        StorageDead(_145);
        goto -> bb391;
    }

    bb275: {
        StorageLive(_146);
        _146 = LendingError::RepayTooSmall;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _146);
        StorageDead(_146);
        goto -> bb391;
    }

    bb276: {
        StorageLive(_147);
        _147 = LendingError::LiquidationTooSmall;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _147);
        StorageDead(_147);
        goto -> bb391;
    }

    bb277: {
        StorageLive(_148);
        _148 = LendingError::ObligationHealthy;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _148);
        StorageDead(_148);
        goto -> bb391;
    }

    bb278: {
        StorageLive(_149);
        _149 = LendingError::ObligationStale;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _149);
        StorageDead(_149);
        goto -> bb391;
    }

    bb279: {
        StorageLive(_150);
        _150 = LendingError::ObligationReserveLimit;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _150);
        StorageDead(_150);
        goto -> bb391;
    }

    bb280: {
        StorageLive(_151);
        _151 = LendingError::InvalidObligationOwner;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _151);
        StorageDead(_151);
        goto -> bb391;
    }

    bb281: {
        StorageLive(_152);
        _152 = LendingError::ObligationDepositsEmpty;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _152);
        StorageDead(_152);
        goto -> bb391;
    }

    bb282: {
        StorageLive(_153);
        _153 = LendingError::ObligationBorrowsEmpty;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _153);
        StorageDead(_153);
        goto -> bb391;
    }

    bb283: {
        StorageLive(_154);
        _154 = LendingError::ObligationDepositsZero;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _154);
        StorageDead(_154);
        goto -> bb391;
    }

    bb284: {
        StorageLive(_155);
        _155 = LendingError::ObligationBorrowsZero;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _155);
        StorageDead(_155);
        goto -> bb391;
    }

    bb285: {
        StorageLive(_156);
        _156 = LendingError::InvalidObligationCollateral;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _156);
        StorageDead(_156);
        goto -> bb391;
    }

    bb286: {
        StorageLive(_157);
        _157 = LendingError::InvalidObligationLiquidity;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _157);
        StorageDead(_157);
        goto -> bb391;
    }

    bb287: {
        StorageLive(_158);
        _158 = LendingError::ObligationCollateralEmpty;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _158);
        StorageDead(_158);
        goto -> bb391;
    }

    bb288: {
        StorageLive(_159);
        _159 = LendingError::ObligationLiquidityEmpty;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _159);
        StorageDead(_159);
        goto -> bb391;
    }

    bb289: {
        StorageLive(_160);
        _160 = LendingError::NegativeInterestRate;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _160);
        StorageDead(_160);
        goto -> bb391;
    }

    bb290: {
        StorageLive(_161);
        _161 = LendingError::InvalidOracleConfig;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _161);
        StorageDead(_161);
        goto -> bb391;
    }

    bb291: {
        StorageLive(_162);
        _162 = LendingError::InsufficientProtocolFeesToRedeem;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _162);
        StorageDead(_162);
        goto -> bb391;
    }

    bb292: {
        StorageLive(_163);
        _163 = LendingError::FlashBorrowCpi;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _163);
        StorageDead(_163);
        goto -> bb391;
    }

    bb293: {
        StorageLive(_164);
        _164 = LendingError::NoFlashRepayFound;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _164);
        StorageDead(_164);
        goto -> bb391;
    }

    bb294: {
        StorageLive(_165);
        _165 = LendingError::InvalidFlashRepay;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _165);
        StorageDead(_165);
        goto -> bb391;
    }

    bb295: {
        StorageLive(_166);
        _166 = LendingError::FlashRepayCpi;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _166);
        StorageDead(_166);
        goto -> bb391;
    }

    bb296: {
        StorageLive(_167);
        _167 = LendingError::MultipleFlashBorrows;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _167);
        StorageDead(_167);
        goto -> bb391;
    }

    bb297: {
        StorageLive(_168);
        _168 = LendingError::FlashLoansDisabled;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _168);
        StorageDead(_168);
        goto -> bb391;
    }

    bb298: {
        StorageLive(_169);
        _169 = LendingError::SwitchboardV2Error;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _169);
        StorageDead(_169);
        goto -> bb391;
    }

    bb299: {
        StorageLive(_170);
        _170 = LendingError::CouldNotDeserializeScope;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _170);
        StorageDead(_170);
        goto -> bb391;
    }

    bb300: {
        StorageLive(_171);
        _171 = LendingError::PriceTooOld;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _171);
        StorageDead(_171);
        goto -> bb391;
    }

    bb301: {
        StorageLive(_172);
        _172 = LendingError::PriceTooDivergentFromTwap;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _172);
        StorageDead(_172);
        goto -> bb391;
    }

    bb302: {
        StorageLive(_173);
        _173 = LendingError::InvalidTwapPrice;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _173);
        StorageDead(_173);
        goto -> bb391;
    }

    bb303: {
        StorageLive(_174);
        _174 = LendingError::GlobalEmergencyMode;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _174);
        StorageDead(_174);
        goto -> bb391;
    }

    bb304: {
        StorageLive(_175);
        _175 = LendingError::InvalidFlag;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _175);
        StorageDead(_175);
        goto -> bb391;
    }

    bb305: {
        StorageLive(_176);
        _176 = LendingError::PriceNotValid;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _176);
        StorageDead(_176);
        goto -> bb391;
    }

    bb306: {
        StorageLive(_177);
        _177 = LendingError::PriceIsBiggerThanHeuristic;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _177);
        StorageDead(_177);
        goto -> bb391;
    }

    bb307: {
        StorageLive(_178);
        _178 = LendingError::PriceIsLowerThanHeuristic;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _178);
        StorageDead(_178);
        goto -> bb391;
    }

    bb308: {
        StorageLive(_179);
        _179 = LendingError::PriceIsZero;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _179);
        StorageDead(_179);
        goto -> bb391;
    }

    bb309: {
        StorageLive(_180);
        _180 = LendingError::PriceConfidenceTooWide;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _180);
        StorageDead(_180);
        goto -> bb391;
    }

    bb310: {
        StorageLive(_181);
        _181 = LendingError::IntegerOverflow;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _181);
        StorageDead(_181);
        goto -> bb391;
    }

    bb311: {
        StorageLive(_182);
        _182 = LendingError::NoFarmForReserve;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _182);
        StorageDead(_182);
        goto -> bb391;
    }

    bb312: {
        StorageLive(_183);
        _183 = LendingError::IncorrectInstructionInPosition;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _183);
        StorageDead(_183);
        goto -> bb391;
    }

    bb313: {
        StorageLive(_184);
        _184 = LendingError::NoPriceFound;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _184);
        StorageDead(_184);
        goto -> bb391;
    }

    bb314: {
        StorageLive(_185);
        _185 = LendingError::InvalidTwapConfig;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _185);
        StorageDead(_185);
        goto -> bb391;
    }

    bb315: {
        StorageLive(_186);
        _186 = LendingError::InvalidPythPriceAccount;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _186);
        StorageDead(_186);
        goto -> bb391;
    }

    bb316: {
        StorageLive(_187);
        _187 = LendingError::InvalidSwitchboardAccount;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _187);
        StorageDead(_187);
        goto -> bb391;
    }

    bb317: {
        StorageLive(_188);
        _188 = LendingError::InvalidScopePriceAccount;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _188);
        StorageDead(_188);
        goto -> bb391;
    }

    bb318: {
        StorageLive(_189);
        _189 = LendingError::ObligationCollateralLtvZero;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _189);
        StorageDead(_189);
        goto -> bb391;
    }

    bb319: {
        StorageLive(_190);
        _190 = LendingError::InvalidObligationSeedsValue;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _190);
        StorageDead(_190);
        goto -> bb391;
    }

    bb320: {
        StorageLive(_191);
        _191 = LendingError::DeprecatedInvalidObligationId;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _191);
        StorageDead(_191);
        goto -> bb391;
    }

    bb321: {
        StorageLive(_192);
        _192 = LendingError::InvalidBorrowRateCurvePoint;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _192);
        StorageDead(_192);
        goto -> bb391;
    }

    bb322: {
        StorageLive(_193);
        _193 = LendingError::InvalidUtilizationRate;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _193);
        StorageDead(_193);
        goto -> bb391;
    }

    bb323: {
        StorageLive(_194);
        _194 = LendingError::CannotSocializeObligationWithCollateral;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _194);
        StorageDead(_194);
        goto -> bb391;
    }

    bb324: {
        StorageLive(_195);
        _195 = LendingError::ObligationEmpty;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _195);
        StorageDead(_195);
        goto -> bb391;
    }

    bb325: {
        StorageLive(_196);
        _196 = LendingError::WithdrawalCapReached;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _196);
        StorageDead(_196);
        goto -> bb391;
    }

    bb326: {
        StorageLive(_197);
        _197 = LendingError::LastTimestampGreaterThanCurrent;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _197);
        StorageDead(_197);
        goto -> bb391;
    }

    bb327: {
        StorageLive(_198);
        _198 = LendingError::LiquidationRewardTooSmall;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _198);
        StorageDead(_198);
        goto -> bb391;
    }

    bb328: {
        StorageLive(_199);
        _199 = LendingError::IsolatedAssetTierViolation;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _199);
        StorageDead(_199);
        goto -> bb391;
    }

    bb329: {
        StorageLive(_200);
        _200 = LendingError::InconsistentElevationGroup;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _200);
        StorageDead(_200);
        goto -> bb391;
    }

    bb330: {
        StorageLive(_201);
        _201 = LendingError::InvalidElevationGroup;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _201);
        StorageDead(_201);
        goto -> bb391;
    }

    bb331: {
        StorageLive(_202);
        _202 = LendingError::InvalidElevationGroupConfig;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _202);
        StorageDead(_202);
        goto -> bb391;
    }

    bb332: {
        StorageLive(_203);
        _203 = LendingError::UnhealthyElevationGroupLtv;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _203);
        StorageDead(_203);
        goto -> bb391;
    }

    bb333: {
        StorageLive(_204);
        _204 = LendingError::ElevationGroupNewLoansDisabled;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _204);
        StorageDead(_204);
        goto -> bb391;
    }

    bb334: {
        StorageLive(_205);
        _205 = LendingError::ReserveDeprecated;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _205);
        StorageDead(_205);
        goto -> bb391;
    }

    bb335: {
        StorageLive(_206);
        _206 = LendingError::ReferrerAccountNotInitialized;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _206);
        StorageDead(_206);
        goto -> bb391;
    }

    bb336: {
        StorageLive(_207);
        _207 = LendingError::ReferrerAccountMintMissmatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _207);
        StorageDead(_207);
        goto -> bb391;
    }

    bb337: {
        StorageLive(_208);
        _208 = LendingError::ReferrerAccountWrongAddress;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _208);
        StorageDead(_208);
        goto -> bb391;
    }

    bb338: {
        StorageLive(_209);
        _209 = LendingError::ReferrerAccountReferrerMissmatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _209);
        StorageDead(_209);
        goto -> bb391;
    }

    bb339: {
        StorageLive(_210);
        _210 = LendingError::ReferrerAccountMissing;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _210);
        StorageDead(_210);
        goto -> bb391;
    }

    bb340: {
        StorageLive(_211);
        _211 = LendingError::InsufficientReferralFeesToRedeem;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _211);
        StorageDead(_211);
        goto -> bb391;
    }

    bb341: {
        StorageLive(_212);
        _212 = LendingError::CpiDisabled;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _212);
        StorageDead(_212);
        goto -> bb391;
    }

    bb342: {
        StorageLive(_213);
        _213 = LendingError::ShortUrlNotAsciiAlphanumeric;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _213);
        StorageDead(_213);
        goto -> bb391;
    }

    bb343: {
        StorageLive(_214);
        _214 = LendingError::ReserveObsolete;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _214);
        StorageDead(_214);
        goto -> bb391;
    }

    bb344: {
        StorageLive(_215);
        _215 = LendingError::ElevationGroupAlreadyActivated;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _215);
        StorageDead(_215);
        goto -> bb391;
    }

    bb345: {
        StorageLive(_216);
        _216 = LendingError::ObligationInObsoleteReserve;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _216);
        StorageDead(_216);
        goto -> bb391;
    }

    bb346: {
        StorageLive(_217);
        _217 = LendingError::ReferrerStateOwnerMismatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _217);
        StorageDead(_217);
        goto -> bb391;
    }

    bb347: {
        StorageLive(_218);
        _218 = LendingError::UserMetadataOwnerAlreadySet;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _218);
        StorageDead(_218);
        goto -> bb391;
    }

    bb348: {
        StorageLive(_219);
        _219 = LendingError::CollateralNonLiquidatable;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _219);
        StorageDead(_219);
        goto -> bb391;
    }

    bb349: {
        StorageLive(_220);
        _220 = LendingError::BorrowingDisabled;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _220);
        StorageDead(_220);
        goto -> bb391;
    }

    bb350: {
        StorageLive(_221);
        _221 = LendingError::BorrowLimitExceeded;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _221);
        StorageDead(_221);
        goto -> bb391;
    }

    bb351: {
        StorageLive(_222);
        _222 = LendingError::DepositLimitExceeded;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _222);
        StorageDead(_222);
        goto -> bb391;
    }

    bb352: {
        StorageLive(_223);
        _223 = LendingError::BorrowingDisabledOutsideElevationGroup;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _223);
        StorageDead(_223);
        goto -> bb391;
    }

    bb353: {
        StorageLive(_224);
        _224 = LendingError::NetValueRemainingTooSmall;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _224);
        StorageDead(_224);
        goto -> bb391;
    }

    bb354: {
        StorageLive(_225);
        _225 = LendingError::WorseLtvBlocked;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _225);
        StorageDead(_225);
        goto -> bb391;
    }

    bb355: {
        StorageLive(_226);
        _226 = LendingError::LiabilitiesBiggerThanAssets;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _226);
        StorageDead(_226);
        goto -> bb391;
    }

    bb356: {
        StorageLive(_227);
        _227 = LendingError::ReserveTokenBalanceMismatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _227);
        StorageDead(_227);
        goto -> bb391;
    }

    bb357: {
        StorageLive(_228);
        _228 = LendingError::ReserveVaultBalanceMismatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _228);
        StorageDead(_228);
        goto -> bb391;
    }

    bb358: {
        StorageLive(_229);
        _229 = LendingError::ReserveAccountingMismatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _229);
        StorageDead(_229);
        goto -> bb391;
    }

    bb359: {
        StorageLive(_230);
        _230 = LendingError::BorrowingAboveUtilizationRateDisabled;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _230);
        StorageDead(_230);
        goto -> bb391;
    }

    bb360: {
        StorageLive(_231);
        _231 = LendingError::LiquidationBorrowFactorPriority;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _231);
        StorageDead(_231);
        goto -> bb391;
    }

    bb361: {
        StorageLive(_232);
        _232 = LendingError::LiquidationLowestLiquidationLtvPriority;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _232);
        StorageDead(_232);
        goto -> bb391;
    }

    bb362: {
        StorageLive(_233);
        _233 = LendingError::ElevationGroupBorrowLimitExceeded;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _233);
        StorageDead(_233);
        goto -> bb391;
    }

    bb363: {
        StorageLive(_234);
        _234 = LendingError::ElevationGroupWithoutDebtReserve;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _234);
        StorageDead(_234);
        goto -> bb391;
    }

    bb364: {
        StorageLive(_235);
        _235 = LendingError::ElevationGroupMaxCollateralReserveZero;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _235);
        StorageDead(_235);
        goto -> bb391;
    }

    bb365: {
        StorageLive(_236);
        _236 = LendingError::ElevationGroupHasAnotherDebtReserve;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _236);
        StorageDead(_236);
        goto -> bb391;
    }

    bb366: {
        StorageLive(_237);
        _237 = LendingError::ElevationGroupDebtReserveAsCollateral;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _237);
        StorageDead(_237);
        goto -> bb391;
    }

    bb367: {
        StorageLive(_238);
        _238 = LendingError::ObligationCollateralExceedsElevationGroupLimit;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _238);
        StorageDead(_238);
        goto -> bb391;
    }

    bb368: {
        StorageLive(_239);
        _239 = LendingError::ObligationElevationGroupMultipleDebtReserve;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _239);
        StorageDead(_239);
        goto -> bb391;
    }

    bb369: {
        StorageLive(_240);
        _240 = LendingError::UnsupportedTokenExtension;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _240);
        StorageDead(_240);
        goto -> bb391;
    }

    bb370: {
        StorageLive(_241);
        _241 = LendingError::InvalidTokenAccount;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _241);
        StorageDead(_241);
        goto -> bb391;
    }

    bb371: {
        StorageLive(_242);
        _242 = LendingError::DepositDisabledOutsideElevationGroup;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _242);
        StorageDead(_242);
        goto -> bb391;
    }

    bb372: {
        StorageLive(_243);
        _243 = LendingError::CannotCalculateReferralAmountDueToSlotsMismatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _243);
        StorageDead(_243);
        goto -> bb391;
    }

    bb373: {
        StorageLive(_244);
        _244 = LendingError::ObligationOwnersMustMatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _244);
        StorageDead(_244);
        goto -> bb391;
    }

    bb374: {
        StorageLive(_245);
        _245 = LendingError::ObligationsMustMatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _245);
        StorageDead(_245);
        goto -> bb391;
    }

    bb375: {
        StorageLive(_246);
        _246 = LendingError::LendingMarketsMustMatch;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _246);
        StorageDead(_246);
        goto -> bb391;
    }

    bb376: {
        StorageLive(_247);
        _247 = LendingError::ObligationCurrentlyMarkedForDeleveraging;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _247);
        StorageDead(_247);
        goto -> bb391;
    }

    bb377: {
        StorageLive(_248);
        _248 = LendingError::MaximumWithdrawValueZero;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _248);
        StorageDead(_248);
        goto -> bb391;
    }

    bb378: {
        StorageLive(_249);
        _249 = LendingError::ZeroMaxLtvAssetsInDeposits;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _249);
        StorageDead(_249);
        goto -> bb391;
    }

    bb379: {
        StorageLive(_250);
        _250 = LendingError::LowestLtvAssetsPriority;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _250);
        StorageDead(_250);
        goto -> bb391;
    }

    bb380: {
        StorageLive(_251);
        _251 = LendingError::WorseLtvThanUnhealthyLtv;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _251);
        StorageDead(_251);
        goto -> bb391;
    }

    bb381: {
        StorageLive(_252);
        _252 = LendingError::FarmAccountsMissing;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _252);
        StorageDead(_252);
        goto -> bb391;
    }

    bb382: {
        StorageLive(_253);
        _253 = LendingError::RepayTooSmallForFullLiquidation;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _253);
        StorageDead(_253);
        goto -> bb391;
    }

    bb383: {
        StorageLive(_254);
        _254 = LendingError::InsufficientRepayAmount;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _254);
        StorageDead(_254);
        goto -> bb391;
    }

    bb384: {
        StorageLive(_255);
        _255 = LendingError::OrderIndexOutOfBounds;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _255);
        StorageDead(_255);
        goto -> bb391;
    }

    bb385: {
        StorageLive(_256);
        _256 = LendingError::InvalidOrderConfiguration;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _256);
        StorageDead(_256);
        goto -> bb391;
    }

    bb386: {
        StorageLive(_257);
        _257 = LendingError::OrderConfigurationNotSupportedByObligation;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _257);
        StorageDead(_257);
        goto -> bb391;
    }

    bb387: {
        StorageLive(_258);
        _258 = LendingError::OperationNotPermittedWithCurrentObligationOrders;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _258);
        StorageDead(_258);
        goto -> bb391;
    }

    bb388: {
        StorageLive(_259);
        _259 = LendingError::OperationNotPermittedMarketImmutable;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _259);
        StorageDead(_259);
        goto -> bb391;
    }

    bb389: {
        StorageLive(_260);
        _260 = LendingError::OrderCreationDisabled;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _260);
        StorageDead(_260);
        goto -> bb391;
    }

    bb390: {
        StorageLive(_261);
        _261 = LendingError::NoUpgradeAuthority;
        _0 = std::result::Result::<LendingError, strum::ParseError>::Ok(move _261);
        StorageDead(_261);
        goto -> bb391;
    }

    bb391: {
        return;
    }
}
