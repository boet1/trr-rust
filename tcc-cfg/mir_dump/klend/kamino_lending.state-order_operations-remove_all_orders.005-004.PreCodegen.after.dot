digraph Mir_0_1783 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn remove_all_orders(_1: &amp;ReErased mut state::obligation::Obligation) -&gt; bool<br align="left"/>let mut _2: bool;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::slice::IterMut&lt;ReErased, state::obligation::ObligationOrder&gt;;<br align="left"/>let mut _5: std::slice::IterMut&lt;ReErased, state::obligation::ObligationOrder&gt;;<br align="left"/>let mut _6: &amp;ReErased mut [state::obligation::ObligationOrder];<br align="left"/>let mut _7: &amp;ReErased mut [state::obligation::ObligationOrder; 2_usize];<br align="left"/>let mut _8: std::slice::IterMut&lt;ReErased, state::obligation::ObligationOrder&gt;;<br align="left"/>let mut _9: ();<br align="left"/>let _10: ();<br align="left"/>let mut _11: std::option::Option&lt;&amp;ReErased mut state::obligation::ObligationOrder&gt;;<br align="left"/>let mut _12: &amp;ReErased mut std::slice::IterMut&lt;ReErased, state::obligation::ObligationOrder&gt;;<br align="left"/>let mut _13: &amp;ReErased mut std::slice::IterMut&lt;ReErased, state::obligation::ObligationOrder&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let mut _15: !;<br align="left"/>let _16: &amp;ReErased mut state::obligation::ObligationOrder;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: &amp;ReErased &amp;ReErased mut state::obligation::ObligationOrder;<br align="left"/>let mut _19: &amp;ReErased &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let _20: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let _21: state::obligation::ObligationOrder;<br align="left"/>let mut _22: state::obligation::ObligationOrder;<br align="left"/>debug obligation =&gt; _1;<br align="left"/>debug had_orders =&gt; _2;<br align="left"/>debug iter =&gt; _8;<br align="left"/>debug order =&gt; _16;<br align="left"/>>;
    bb0__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;mut ((*_1).25: [state::obligation::ObligationOrder; 2])<br/>_6 = move _7 as &amp;mut [state::obligation::ObligationOrder] (PointerCoercion(Unsize))<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = core::slice::&lt;impl [obligation::ObligationOrder]&gt;::iter_mut(move _6)</td></tr></table>>];
    bb1__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::slice::IterMut&lt;'_, obligation::ObligationOrder&gt; as IntoIterator&gt;::into_iter(move _5)</td></tr></table>>];
    bb2__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_8)<br/>_8 = move _4<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;mut _8<br/>_12 = &amp;mut (*_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::slice::IterMut&lt;'_, obligation::ObligationOrder&gt; as Iterator&gt;::next(move _12)</td></tr></table>>];
    bb4__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb5__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = move ((_11 as Some).0: &amp;mut state::obligation::ObligationOrder)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;_16<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/></td></tr><tr><td align="left">_21 = &lt;obligation::ObligationOrder as Default&gt;::default()</td></tr></table>>];
    bb6__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_3 = const ()<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>_0 = _2<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb8__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_20 = &amp;_21<br/>_19 = &amp;_20<br/></td></tr><tr><td align="left">_17 = &lt;&amp;mut obligation::ObligationOrder as PartialEq&lt;&amp;obligation::ObligationOrder&gt;&gt;::ne(move _18, move _19)</td></tr></table>>];
    bb9__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb10__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageLive(_22)<br/></td></tr><tr><td align="left">_22 = &lt;obligation::ObligationOrder as Default&gt;::default()</td></tr></table>>];
    bb11__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">(*_16) = move _22<br/>StorageDead(_22)<br/>_2 = const true<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1783 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>_9 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1783 -> bb1__0_1783 [label="return"];
    bb1__0_1783 -> bb2__0_1783 [label="return"];
    bb2__0_1783 -> bb3__0_1783 [label=""];
    bb3__0_1783 -> bb4__0_1783 [label="return"];
    bb4__0_1783 -> bb7__0_1783 [label="0"];
    bb4__0_1783 -> bb5__0_1783 [label="1"];
    bb4__0_1783 -> bb6__0_1783 [label="otherwise"];
    bb5__0_1783 -> bb8__0_1783 [label="return"];
    bb8__0_1783 -> bb9__0_1783 [label="return"];
    bb9__0_1783 -> bb12__0_1783 [label="0"];
    bb9__0_1783 -> bb10__0_1783 [label="otherwise"];
    bb10__0_1783 -> bb11__0_1783 [label="return"];
    bb11__0_1783 -> bb13__0_1783 [label=""];
    bb12__0_1783 -> bb13__0_1783 [label=""];
    bb13__0_1783 -> bb3__0_1783 [label=""];
}
