// MIR for `__idl::<impl at programs\klend\src\lib.rs:33:1: 33:11>::exit` after PreCodegen

fn __idl::<impl at programs\klend\src\lib.rs:33:1: 33:11>::exit(_1: &__idl::IdlCloseAccount<'_>, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug program_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let _4: &anchor_lang::prelude::AccountInfo<'_>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let _10: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _11: anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: {closure@programs\klend\src\lib.rs:33:1: 33:11};
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: ();
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _21: std::result::Result<(), anchor_lang::error::Error>;
    let mut _22: std::result::Result<(), anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::AccountInfo<'_>;
    let _24: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: {closure@programs\klend\src\lib.rs:33:1: 33:11};
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _31: ();
    let mut _32: ();
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    scope 1 {
        debug sol_destination => _4;
        let _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _18: ();
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _18;
            scope 5 {
            }
        }
    }
    scope 6 {
        debug residual => _28;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _31;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).2: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _9 = &(*_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_4);
        _11 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        _8 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as AccountsClose<'_>>::close(move _9, move _11) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_13);
        _13 = {closure@programs\klend\src\lib.rs:33:1: 33:11};
        _7 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lib.rs:33:1: 33:11}>(move _8, move _13) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        StorageDead(_7);
        _14 = discriminant(_6);
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_6 as Continue).0: ());
        _5 = _18;
        StorageDead(_18);
        _33 = discriminant(_6);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).2: anchor_lang::prelude::AccountInfo<'_>);
        _23 = &(*_24);
        StorageLive(_25);
        _25 = &(*_2);
        _22 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::AccountsExit<'_>>::exit(move _23, move _25) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_15);
        _15 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _17) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _39 = discriminant(_6);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb15;
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_26);
        _26 = {closure@programs\klend\src\lib.rs:33:1: 33:11};
        _21 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lib.rs:33:1: 33:11}>(move _22, move _26) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _21) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageDead(_21);
        _27 = discriminant(_20);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_20 as Continue).0: ());
        _19 = _31;
        StorageDead(_31);
        _35 = discriminant(_20);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_32);
        _32 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _32);
        StorageDead(_32);
        goto -> bb15;
    }

    bb13: {
        StorageLive(_28);
        _28 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        _37 = discriminant(_20);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        _41 = discriminant(_20);
        goto -> bb16;
    }

    bb18 (cleanup): {
        _42 = discriminant(_6);
        goto -> bb16;
    }
}
