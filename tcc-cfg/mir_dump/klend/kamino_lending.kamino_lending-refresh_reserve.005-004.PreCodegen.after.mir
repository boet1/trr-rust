// MIR for `kamino_lending::refresh_reserve` after PreCodegen

fn kamino_lending::refresh_reserve(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_reserve::RefreshReserve<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _6: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let mut _12: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_reserve::RefreshReserve<'_>>;
    let mut _13: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: isize;
    let mut _18: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _13 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _6 = &((*_13).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _5 = &(*_6);
        _4 = utils::constraints::emergency_mode_disabled(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _14 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        _12 = move _1;
        _0 = handlers::handler_refresh_reserve::process(move _12) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _16 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_12);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _18 = discriminant(_3);
        goto -> bb9;
    }
}
