digraph Mir_0_6671 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::all() -&gt; state::last_update::PriceStatusFlags<br align="left"/>let mut _1: u8;<br align="left"/>let mut _2: usize;<br align="left"/>let _3: ();<br align="left"/>let _4: u8;<br align="left"/>let mut _5: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let _6: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _7: &amp;ReErased bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;;<br align="left"/>let _8: &amp;ReErased [bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;];<br align="left"/>let _9: usize;<br align="left"/>let mut _10: usize;<br align="left"/>let mut _11: bool;<br align="left"/>let mut _12: u8;<br align="left"/>let mut _13: u8;<br align="left"/>let mut _14: (usize, bool);<br align="left"/>let _15: ();<br align="left"/>let _16: u8;<br align="left"/>let mut _17: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let _18: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _19: &amp;ReErased bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;;<br align="left"/>let _20: &amp;ReErased [bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;];<br align="left"/>let _21: usize;<br align="left"/>let mut _22: usize;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: u8;<br align="left"/>let mut _25: u8;<br align="left"/>let mut _26: (usize, bool);<br align="left"/>let _27: ();<br align="left"/>let _28: u8;<br align="left"/>let mut _29: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let _30: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _31: &amp;ReErased bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;;<br align="left"/>let _32: &amp;ReErased [bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;];<br align="left"/>let _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: bool;<br align="left"/>let mut _36: u8;<br align="left"/>let mut _37: u8;<br align="left"/>let mut _38: (usize, bool);<br align="left"/>let _39: ();<br align="left"/>let _40: u8;<br align="left"/>let mut _41: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let _42: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _43: &amp;ReErased bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;;<br align="left"/>let _44: &amp;ReErased [bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;];<br align="left"/>let _45: usize;<br align="left"/>let mut _46: usize;<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: u8;<br align="left"/>let mut _49: u8;<br align="left"/>let mut _50: (usize, bool);<br align="left"/>let _51: ();<br align="left"/>let _52: u8;<br align="left"/>let mut _53: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let _54: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _55: &amp;ReErased bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;;<br align="left"/>let _56: &amp;ReErased [bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;];<br align="left"/>let _57: usize;<br align="left"/>let mut _58: usize;<br align="left"/>let mut _59: bool;<br align="left"/>let mut _60: u8;<br align="left"/>let mut _61: u8;<br align="left"/>let mut _62: (usize, bool);<br align="left"/>let _63: ();<br align="left"/>let _64: u8;<br align="left"/>let mut _65: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let _66: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _67: &amp;ReErased bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;;<br align="left"/>let _68: &amp;ReErased [bitflags::Flag&lt;state::last_update::PriceStatusFlags&gt;];<br align="left"/>let _69: usize;<br align="left"/>let mut _70: usize;<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: u8;<br align="left"/>let mut _73: u8;<br align="left"/>let mut _74: (usize, bool);<br align="left"/>let mut _75: u8;<br align="left"/>debug truncated =&gt; _1;<br align="left"/>debug i =&gt; _2;<br align="left"/>debug flag =&gt; _4;<br align="left"/>debug flag =&gt; _16;<br align="left"/>debug flag =&gt; _28;<br align="left"/>debug flag =&gt; _40;<br align="left"/>debug flag =&gt; _52;<br align="left"/>debug flag =&gt; _64;<br align="left"/>>;
    bb0__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_1)<br/>_1 = const _<br/>StorageLive(_2)<br/>_2 = const 0_usize<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = const _<br/>StorageLive(_9)<br/>_9 = _2<br/>_10 = Len((*_8))<br/>_11 = Lt(_9, _10)<br/></td></tr><tr><td align="left">assert(move _11, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _10, _9)</td></tr></table>>];
    bb1__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;(*_8)[_9]<br/></td></tr><tr><td align="left">_6 = Flag::&lt;last_update::PriceStatusFlags&gt;::value(move _7)</td></tr></table>>];
    bb2__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = &amp;(*_6)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_4 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _5)</td></tr></table>>];
    bb3__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_12)<br/>_12 = _1<br/>StorageLive(_13)<br/>_13 = _4<br/>_1 = BitOr(move _12, move _13)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>_14 = CheckedAdd(_2, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_14.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 1_usize)</td></tr></table>>];
    bb4__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_2 = move (_14.0: usize)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = const _<br/>StorageLive(_21)<br/>_21 = _2<br/>_22 = Len((*_20))<br/>_23 = Lt(_21, _22)<br/></td></tr><tr><td align="left">assert(move _23, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _22, _21)</td></tr></table>>];
    bb5__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_19 = &amp;(*_20)[_21]<br/></td></tr><tr><td align="left">_18 = Flag::&lt;last_update::PriceStatusFlags&gt;::value(move _19)</td></tr></table>>];
    bb6__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_17 = &amp;(*_18)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_16 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _17)</td></tr></table>>];
    bb7__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_18)<br/>StorageLive(_24)<br/>_24 = _1<br/>StorageLive(_25)<br/>_25 = _16<br/>_1 = BitOr(move _24, move _25)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>_26 = CheckedAdd(_2, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_26.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 1_usize)</td></tr></table>>];
    bb8__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_2 = move (_26.0: usize)<br/>_15 = const ()<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = const _<br/>StorageLive(_33)<br/>_33 = _2<br/>_34 = Len((*_32))<br/>_35 = Lt(_33, _34)<br/></td></tr><tr><td align="left">assert(move _35, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _34, _33)</td></tr></table>>];
    bb9__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_31 = &amp;(*_32)[_33]<br/></td></tr><tr><td align="left">_30 = Flag::&lt;last_update::PriceStatusFlags&gt;::value(move _31)</td></tr></table>>];
    bb10__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_29 = &amp;(*_30)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">_28 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _29)</td></tr></table>>];
    bb11__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_30)<br/>StorageLive(_36)<br/>_36 = _1<br/>StorageLive(_37)<br/>_37 = _28<br/>_1 = BitOr(move _36, move _37)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>_38 = CheckedAdd(_2, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_38.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 1_usize)</td></tr></table>>];
    bb12__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_2 = move (_38.0: usize)<br/>_27 = const ()<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = const _<br/>StorageLive(_45)<br/>_45 = _2<br/>_46 = Len((*_44))<br/>_47 = Lt(_45, _46)<br/></td></tr><tr><td align="left">assert(move _47, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _46, _45)</td></tr></table>>];
    bb13__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_43 = &amp;(*_44)[_45]<br/></td></tr><tr><td align="left">_42 = Flag::&lt;last_update::PriceStatusFlags&gt;::value(move _43)</td></tr></table>>];
    bb14__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_41 = &amp;(*_42)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">_40 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _41)</td></tr></table>>];
    bb15__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_42)<br/>StorageLive(_48)<br/>_48 = _1<br/>StorageLive(_49)<br/>_49 = _40<br/>_1 = BitOr(move _48, move _49)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>_50 = CheckedAdd(_2, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_50.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 1_usize)</td></tr></table>>];
    bb16__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_2 = move (_50.0: usize)<br/>_39 = const ()<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = const _<br/>StorageLive(_57)<br/>_57 = _2<br/>_58 = Len((*_56))<br/>_59 = Lt(_57, _58)<br/></td></tr><tr><td align="left">assert(move _59, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _58, _57)</td></tr></table>>];
    bb17__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_55 = &amp;(*_56)[_57]<br/></td></tr><tr><td align="left">_54 = Flag::&lt;last_update::PriceStatusFlags&gt;::value(move _55)</td></tr></table>>];
    bb18__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_53 = &amp;(*_54)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_52 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _53)</td></tr></table>>];
    bb19__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_54)<br/>StorageLive(_60)<br/>_60 = _1<br/>StorageLive(_61)<br/>_61 = _52<br/>_1 = BitOr(move _60, move _61)<br/>StorageDead(_61)<br/>StorageDead(_60)<br/>_62 = CheckedAdd(_2, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_62.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 1_usize)</td></tr></table>>];
    bb20__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_2 = move (_62.0: usize)<br/>_51 = const ()<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = const _<br/>StorageLive(_69)<br/>_69 = _2<br/>_70 = Len((*_68))<br/>_71 = Lt(_69, _70)<br/></td></tr><tr><td align="left">assert(move _71, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _70, _69)</td></tr></table>>];
    bb21__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_67 = &amp;(*_68)[_69]<br/></td></tr><tr><td align="left">_66 = Flag::&lt;last_update::PriceStatusFlags&gt;::value(move _67)</td></tr></table>>];
    bb22__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_65 = &amp;(*_66)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">_64 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _65)</td></tr></table>>];
    bb23__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_66)<br/>StorageLive(_72)<br/>_72 = _1<br/>StorageLive(_73)<br/>_73 = _64<br/>_1 = BitOr(move _72, move _73)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/>_74 = CheckedAdd(_2, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_74.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 1_usize)</td></tr></table>>];
    bb24__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_2 = move (_74.0: usize)<br/>_63 = const ()<br/>StorageDead(_64)<br/>StorageDead(_63)<br/>StorageLive(_75)<br/>_75 = _1<br/></td></tr><tr><td align="left">_0 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::from_bits_retain(move _75)</td></tr></table>>];
    bb25__0_6671 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_2)<br/>StorageDead(_1)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_6671 -> bb1__0_6671 [label="success"];
    bb1__0_6671 -> bb2__0_6671 [label="return"];
    bb2__0_6671 -> bb3__0_6671 [label="return"];
    bb3__0_6671 -> bb4__0_6671 [label="success"];
    bb4__0_6671 -> bb5__0_6671 [label="success"];
    bb5__0_6671 -> bb6__0_6671 [label="return"];
    bb6__0_6671 -> bb7__0_6671 [label="return"];
    bb7__0_6671 -> bb8__0_6671 [label="success"];
    bb8__0_6671 -> bb9__0_6671 [label="success"];
    bb9__0_6671 -> bb10__0_6671 [label="return"];
    bb10__0_6671 -> bb11__0_6671 [label="return"];
    bb11__0_6671 -> bb12__0_6671 [label="success"];
    bb12__0_6671 -> bb13__0_6671 [label="success"];
    bb13__0_6671 -> bb14__0_6671 [label="return"];
    bb14__0_6671 -> bb15__0_6671 [label="return"];
    bb15__0_6671 -> bb16__0_6671 [label="success"];
    bb16__0_6671 -> bb17__0_6671 [label="success"];
    bb17__0_6671 -> bb18__0_6671 [label="return"];
    bb18__0_6671 -> bb19__0_6671 [label="return"];
    bb19__0_6671 -> bb20__0_6671 [label="success"];
    bb20__0_6671 -> bb21__0_6671 [label="success"];
    bb21__0_6671 -> bb22__0_6671 [label="return"];
    bb22__0_6671 -> bb23__0_6671 [label="return"];
    bb23__0_6671 -> bb24__0_6671 [label="success"];
    bb24__0_6671 -> bb25__0_6671 [label="return"];
}
