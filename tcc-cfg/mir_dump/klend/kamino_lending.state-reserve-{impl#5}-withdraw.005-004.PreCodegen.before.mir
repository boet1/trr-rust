// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::withdraw` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::withdraw(_1: &mut ReserveLiquidity, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: !;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: anchor_lang::error::Error;
    let mut _12: anchor_lang::error::AnchorError;
    let mut _13: std::string::String;
    let mut _14: &LendingError;
    let _15: LendingError;
    let mut _16: u32;
    let mut _17: LendingError;
    let mut _18: std::string::String;
    let mut _19: &LendingError;
    let _20: LendingError;
    let mut _21: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _22: anchor_lang::error::ErrorOrigin;
    let mut _23: anchor_lang::error::Source;
    let mut _24: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _25: u64;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, u64>;
    let mut _27: std::result::Result<u64, LendingError>;
    let mut _28: std::option::Option<u64>;
    let mut _29: u64;
    let mut _30: u64;
    let mut _31: LendingError;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, LendingError>;
    let _36: u64;
    let mut _37: ();
    let mut _38: &LendingError;
    let mut _39: &LendingError;
    scope 1 {
        debug residual => _33;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _36;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        _6 = ((*_1).3: u64);
        _4 = Gt(move _5, move _6);
        switchInt(move _4) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const "Withdraw amount cannot exceed available amount";
        _9 = &(*_10);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _39 = const _;
        _14 = &(*_39);
        _13 = LendingError::name(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _17 = LendingError::InsufficientLiquidity;
        _16 = <LendingError as Into<u32>>::into(move _17) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _38 = const _;
        _19 = &(*_38);
        _18 = <LendingError as ToString>::to_string(move _19) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\reserve.rs", line: const 552_u32 };
        _22 = anchor_lang::error::ErrorOrigin::Source(move _23);
        StorageDead(_23);
        _21 = std::option::Option::<ErrorOrigin>::Some(move _22);
        StorageDead(_22);
        StorageLive(_24);
        _24 = std::option::Option::<ComparedValues>::None;
        _12 = anchor_lang::error::AnchorError { error_name: move _13, error_code_number: move _16, error_msg: move _18, error_origin: move _21, compared_values: move _24 };
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        _11 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _12) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        StorageDead(_12);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _11);
        StorageDead(_11);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb15;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).3: u64);
        StorageLive(_30);
        _30 = _2;
        _28 = core::num::<impl u64>::checked_sub(move _29, move _30) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_31);
        _31 = LendingError::MathOverflow;
        _27 = std::option::Option::<u64>::ok_or::<LendingError>(move _28, move _31) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_28);
        _26 = <std::result::Result<u64, LendingError> as Try>::branch(move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_27);
        _32 = discriminant(_26);
        switchInt(move _32) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_36);
        _36 = ((_26 as Continue).0: u64);
        _25 = _36;
        StorageDead(_36);
        ((*_1).3: u64) = move _25;
        StorageDead(_25);
        StorageDead(_26);
        StorageLive(_37);
        _37 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _37);
        StorageDead(_37);
        goto -> bb15;
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_33);
        _33 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_25);
        StorageDead(_26);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_13) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}
