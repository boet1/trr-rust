// MIR for `utils::fraction::<impl at programs\klend\src\utils\fraction.rs:382:1: 382:28>::try_from` after PreCodegen

fn utils::fraction::<impl at programs\klend\src\utils\fraction.rs:382:1: 382:28>::try_from(_1: uint_types::U256) -> std::result::Result<uint_types::U128, LendingError> {
    debug value => _1;
    let mut _0: std::result::Result<utils::fraction::uint_types::U128, LendingError>;
    let _2: ();
    let mut _3: bool;
    let mut _4: u64;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u64;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: !;
    let mut _14: LendingError;
    let mut _15: utils::fraction::uint_types::U128;
    let mut _16: [u64; 2];
    let mut _17: u64;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: u64;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const 2_usize;
        _6 = Len((_1.0: [u64; 4]));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = (_1.0: [u64; 4])[_5];
        _3 = Ne(move _4, const 0_u64);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb5;
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const 3_usize;
        _11 = Len((_1.0: [u64; 4]));
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb4, unwind continue];
    }

    bb4: {
        _9 = (_1.0: [u64; 4])[_10];
        _8 = Ne(move _9, const 0_u64);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_14);
        _14 = LendingError::IntegerOverflow;
        _0 = std::result::Result::<uint_types::U128, LendingError>::Err(move _14);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb9;
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        _2 = const ();
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = const 0_usize;
        _19 = Len((_1.0: [u64; 4]));
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb7, unwind continue];
    }

    bb7: {
        _17 = (_1.0: [u64; 4])[_18];
        StorageLive(_21);
        StorageLive(_22);
        _22 = const 1_usize;
        _23 = Len((_1.0: [u64; 4]));
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb8, unwind continue];
    }

    bb8: {
        _21 = (_1.0: [u64; 4])[_22];
        _16 = [move _17, move _21];
        StorageDead(_21);
        StorageDead(_17);
        _15 = uint_types::U128(move _16);
        StorageDead(_16);
        _0 = std::result::Result::<uint_types::U128, LendingError>::Ok(move _15);
        StorageDead(_15);
        StorageDead(_22);
        StorageDead(_18);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}
