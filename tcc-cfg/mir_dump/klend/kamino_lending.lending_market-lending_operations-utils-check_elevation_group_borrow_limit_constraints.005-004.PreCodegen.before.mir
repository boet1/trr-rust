// MIR for `check_elevation_group_borrow_limit_constraints` before PreCodegen

fn check_elevation_group_borrow_limit_constraints(_1: &obligation::Obligation, _2: std::option::Option<&state::lending_market::ElevationGroup>, _3: impl Iterator<Item = T>, _4: impl Iterator<Item = T>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug obligation => _1;
    debug elevation_group => _2;
    debug deposit_reserves_iter => _3;
    debug borrow_reserves_iter => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let _6: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>>;
    let mut _7: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>;
    let mut _8: &state::obligation::Obligation;
    let mut _9: impl Iterator<Item = T>;
    let mut _10: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>>;
    let mut _11: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>>;
    let mut _13: ();
    let _14: ();
    let mut _15: std::option::Option<std::result::Result<(&state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>>;
    let mut _16: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>>;
    let mut _17: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>>;
    let mut _18: isize;
    let mut _19: !;
    let mut _23: (&state::obligation::ObligationLiquidity, T);
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&state::obligation::ObligationLiquidity, T)>;
    let mut _25: std::result::Result<(&state::obligation::ObligationLiquidity, T), anchor_lang::error::Error>;
    let mut _26: std::result::Result<(&state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>;
    let mut _27: {closure@programs\klend\src\lending_market\lending_operations.rs:2457:48: 2457:51};
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _34: &T;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _37: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _38: &T;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _44: ();
    let mut _45: bool;
    let mut _46: &anchor_lang::prelude::Pubkey;
    let mut _47: &anchor_lang::prelude::Pubkey;
    let mut _48: !;
    let mut _49: anchor_lang::error::Error;
    let mut _50: anchor_lang::error::Error;
    let mut _51: anchor_lang::error::AnchorError;
    let mut _52: std::string::String;
    let mut _53: &LendingError;
    let _54: LendingError;
    let mut _55: u32;
    let mut _56: LendingError;
    let mut _57: std::string::String;
    let mut _58: &LendingError;
    let _59: LendingError;
    let mut _60: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _61: anchor_lang::error::ErrorOrigin;
    let mut _62: anchor_lang::error::Source;
    let mut _63: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _64: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _65: anchor_lang::prelude::Pubkey;
    let mut _66: anchor_lang::prelude::Pubkey;
    let mut _67: isize;
    let _69: ();
    let mut _70: bool;
    let mut _71: &[u8];
    let mut _72: &[u8; 20];
    let _73: &state::reserve::Reserve;
    let mut _74: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _75: &u8;
    let _76: &u8;
    let mut _77: !;
    let mut _78: anchor_lang::error::Error;
    let mut _79: anchor_lang::error::AnchorError;
    let mut _80: std::string::String;
    let mut _81: &LendingError;
    let _82: LendingError;
    let mut _83: u32;
    let mut _84: LendingError;
    let mut _85: std::string::String;
    let mut _86: &LendingError;
    let _87: LendingError;
    let mut _88: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _89: anchor_lang::error::ErrorOrigin;
    let mut _90: anchor_lang::error::Source;
    let mut _91: std::option::Option<anchor_lang::error::ComparedValues>;
    let _92: ();
    let mut _93: bool;
    let mut _94: &anchor_lang::prelude::Pubkey;
    let mut _95: &anchor_lang::prelude::Pubkey;
    let mut _96: !;
    let mut _97: anchor_lang::error::Error;
    let mut _98: anchor_lang::error::Error;
    let mut _99: anchor_lang::error::AnchorError;
    let mut _100: std::string::String;
    let mut _101: &LendingError;
    let _102: LendingError;
    let mut _103: u32;
    let mut _104: LendingError;
    let mut _105: std::string::String;
    let mut _106: &LendingError;
    let _107: LendingError;
    let mut _108: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _109: anchor_lang::error::ErrorOrigin;
    let mut _110: anchor_lang::error::Source;
    let mut _111: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _112: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _113: anchor_lang::prelude::Pubkey;
    let mut _114: anchor_lang::prelude::Pubkey;
    let _115: ();
    let mut _116: bool;
    let mut _117: u64;
    let mut _118: &state::reserve::Reserve;
    let mut _119: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _120: u64;
    let mut _121: &state::reserve::Reserve;
    let mut _122: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _123: !;
    let mut _124: anchor_lang::error::Error;
    let mut _125: anchor_lang::error::Error;
    let mut _126: anchor_lang::error::AnchorError;
    let mut _127: std::string::String;
    let mut _128: &LendingError;
    let _129: LendingError;
    let mut _130: u32;
    let mut _131: LendingError;
    let mut _132: std::string::String;
    let mut _133: &LendingError;
    let _134: LendingError;
    let mut _135: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _136: anchor_lang::error::ErrorOrigin;
    let mut _137: anchor_lang::error::Source;
    let mut _138: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _139: (u64, u64);
    let mut _140: u64;
    let mut _141: &state::reserve::Reserve;
    let mut _142: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _143: u64;
    let mut _144: &state::reserve::Reserve;
    let mut _145: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _146: ();
    let _147: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>>;
    let mut _148: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>;
    let mut _149: &state::obligation::Obligation;
    let mut _150: impl Iterator<Item = T>;
    let _151: ();
    let mut _152: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>>;
    let mut _153: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>>;
    let _155: ();
    let mut _156: std::option::Option<std::result::Result<(&state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>>;
    let mut _157: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>>;
    let mut _158: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>>;
    let mut _159: isize;
    let mut _160: !;
    let mut _164: (&state::obligation::ObligationCollateral, T);
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&state::obligation::ObligationCollateral, T)>;
    let mut _166: std::result::Result<(&state::obligation::ObligationCollateral, T), anchor_lang::error::Error>;
    let mut _167: std::result::Result<(&state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>;
    let mut _168: {closure@programs\klend\src\lending_market\lending_operations.rs:2498:49: 2498:52};
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _175: &T;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _178: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _179: &T;
    let mut _180: isize;
    let mut _182: !;
    let mut _183: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _185: ();
    let mut _186: bool;
    let mut _187: &anchor_lang::prelude::Pubkey;
    let mut _188: &anchor_lang::prelude::Pubkey;
    let mut _189: !;
    let mut _190: anchor_lang::error::Error;
    let mut _191: anchor_lang::error::Error;
    let mut _192: anchor_lang::error::AnchorError;
    let mut _193: std::string::String;
    let mut _194: &LendingError;
    let _195: LendingError;
    let mut _196: u32;
    let mut _197: LendingError;
    let mut _198: std::string::String;
    let mut _199: &LendingError;
    let _200: LendingError;
    let mut _201: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _202: anchor_lang::error::ErrorOrigin;
    let mut _203: anchor_lang::error::Source;
    let mut _204: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _205: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _206: anchor_lang::prelude::Pubkey;
    let mut _207: anchor_lang::prelude::Pubkey;
    let mut _208: isize;
    let mut _211: &state::lending_market::ElevationGroup;
    let _212: ();
    let mut _213: bool;
    let mut _214: &[u8];
    let mut _215: &[u8; 20];
    let _216: &state::reserve::Reserve;
    let mut _217: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _218: &u8;
    let _219: &u8;
    let mut _220: !;
    let mut _221: anchor_lang::error::Error;
    let mut _222: anchor_lang::error::AnchorError;
    let mut _223: std::string::String;
    let mut _224: &LendingError;
    let _225: LendingError;
    let mut _226: u32;
    let mut _227: LendingError;
    let mut _228: std::string::String;
    let mut _229: &LendingError;
    let _230: LendingError;
    let mut _231: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _232: anchor_lang::error::ErrorOrigin;
    let mut _233: anchor_lang::error::Source;
    let mut _234: std::option::Option<anchor_lang::error::ComparedValues>;
    let _235: ();
    let mut _236: bool;
    let mut _237: &anchor_lang::prelude::Pubkey;
    let mut _238: &anchor_lang::prelude::Pubkey;
    let mut _239: !;
    let mut _240: anchor_lang::error::Error;
    let mut _241: anchor_lang::error::Error;
    let mut _242: anchor_lang::error::AnchorError;
    let mut _243: std::string::String;
    let mut _244: &LendingError;
    let _245: LendingError;
    let mut _246: u32;
    let mut _247: LendingError;
    let mut _248: std::string::String;
    let mut _249: &LendingError;
    let _250: LendingError;
    let mut _251: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _252: anchor_lang::error::ErrorOrigin;
    let mut _253: anchor_lang::error::Source;
    let mut _254: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _255: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _256: anchor_lang::prelude::Pubkey;
    let mut _257: anchor_lang::prelude::Pubkey;
    let _258: ();
    let mut _259: bool;
    let mut _260: u64;
    let mut _261: &state::reserve::Reserve;
    let mut _262: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _263: usize;
    let mut _264: usize;
    let mut _265: bool;
    let mut _266: u64;
    let mut _267: &state::reserve::Reserve;
    let mut _268: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _269: usize;
    let mut _270: usize;
    let mut _271: bool;
    let mut _272: !;
    let mut _273: anchor_lang::error::Error;
    let mut _274: anchor_lang::error::Error;
    let mut _275: anchor_lang::error::AnchorError;
    let mut _276: std::string::String;
    let mut _277: &LendingError;
    let _278: LendingError;
    let mut _279: u32;
    let mut _280: LendingError;
    let mut _281: std::string::String;
    let mut _282: &LendingError;
    let _283: LendingError;
    let mut _284: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _285: anchor_lang::error::ErrorOrigin;
    let mut _286: anchor_lang::error::Source;
    let mut _287: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _288: (u64, u64);
    let mut _289: u64;
    let mut _290: &state::reserve::Reserve;
    let mut _291: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _292: usize;
    let mut _293: usize;
    let mut _294: bool;
    let mut _295: u64;
    let mut _296: &state::reserve::Reserve;
    let mut _297: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _298: usize;
    let mut _299: usize;
    let mut _300: bool;
    let mut _301: bool;
    let mut _302: &state::obligation::Obligation;
    let _303: ();
    let mut _304: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _305: std::result::Result<(), anchor_lang::error::Error>;
    let mut _306: &state::obligation::Obligation;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _312: ();
    let mut _329: bool;
    let mut _330: bool;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    scope 1 {
        debug borrows_and_reserves => _6;
        let mut _12: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>>;
        scope 2 {
            debug iter => _12;
            let _20: std::result::Result<(&state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>;
            scope 3 {
                debug borrow_and_reserve => _20;
                let _21: &state::obligation::ObligationLiquidity;
                let _22: T;
                let _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _32: (&state::obligation::ObligationLiquidity, T);
                scope 4 {
                    debug borrow => _21;
                    debug reserve_acc => _22;
                    let _33: anchor_lang::prelude::Pubkey;
                    scope 9 {
                        debug reserve_pk => _33;
                        let _35: std::cell::Ref<'_, state::reserve::Reserve>;
                        let _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _43: std::cell::Ref<'_, state::reserve::Reserve>;
                        scope 10 {
                            debug borrow_reserve => _35;
                            let mut _313: &LendingError;
                            let mut _314: &LendingError;
                            let mut _315: &LendingError;
                            let mut _316: &LendingError;
                            scope 15 {
                                debug elevation_group => _68;
                                let _68: &state::lending_market::ElevationGroup;
                                let mut _317: &LendingError;
                                let mut _318: &LendingError;
                                let mut _319: &LendingError;
                                let mut _320: &LendingError;
                            }
                        }
                        scope 11 {
                            debug residual => _40;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _43;
                            scope 14 {
                            }
                        }
                    }
                }
                scope 5 {
                    debug residual => _29;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _32;
                    scope 8 {
                    }
                }
            }
        }
    }
    scope 16 {
        debug deposits_and_reserves => _147;
        let mut _154: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>>;
        let _308: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _311: ();
        scope 17 {
            debug iter => _154;
            let _161: std::result::Result<(&state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>;
            scope 18 {
                debug deposit_and_reserve => _161;
                let _162: &state::obligation::ObligationCollateral;
                let _163: T;
                let _170: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _173: (&state::obligation::ObligationCollateral, T);
                scope 19 {
                    debug deposit => _162;
                    debug reserve_acc => _163;
                    let _174: anchor_lang::prelude::Pubkey;
                    scope 24 {
                        debug reserve_pk => _174;
                        let _176: std::cell::Ref<'_, state::reserve::Reserve>;
                        let _181: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _184: std::cell::Ref<'_, state::reserve::Reserve>;
                        scope 25 {
                            debug deposit_reserve => _176;
                            let mut _321: &LendingError;
                            let mut _322: &LendingError;
                            scope 30 {
                                debug elevation_group => _209;
                                let _209: &state::lending_market::ElevationGroup;
                                let _210: usize;
                                scope 31 {
                                    debug elevation_group_index => _210;
                                    let mut _323: &LendingError;
                                    let mut _324: &LendingError;
                                    let mut _325: &LendingError;
                                    let mut _326: &LendingError;
                                    let mut _327: &LendingError;
                                    let mut _328: &LendingError;
                                }
                            }
                        }
                        scope 26 {
                            debug residual => _181;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _184;
                            scope 29 {
                            }
                        }
                    }
                }
                scope 20 {
                    debug residual => _170;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _173;
                    scope 23 {
                    }
                }
            }
        }
        scope 32 {
            debug residual => _308;
            scope 33 {
            }
        }
        scope 34 {
            debug val => _311;
            scope 35 {
            }
        }
    }

    bb0: {
        _329 = const false;
        _332 = const false;
        _331 = const false;
        _330 = const false;
        _329 = const true;
        _332 = const true;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        _7 = obligation::Obligation::active_borrows(move _8) -> [return: bb1, unwind: bb178];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _332 = const false;
        _9 = move _4;
        _6 = <Filter<std::slice::Iter<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}> as validation::IterExt>::zip_exact::<impl Iterator<Item = T>, impl Iterator<Item = T>>(move _7, move _9) -> [return: bb2, unwind: bb178];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _11 = move _6;
        _10 = <LengthCheckingZipIterator<Filter<std::slice::Iter<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>> as IntoIterator>::into_iter(move _11) -> [return: bb3, unwind: bb178];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        _12 = move _10;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _12;
        _16 = &mut (*_17);
        _15 = <LengthCheckingZipIterator<Filter<std::slice::Iter<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>, impl Iterator<Item = T>> as Iterator>::next(move _16) -> [return: bb5, unwind: bb161];
    }

    bb5: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        StorageLive(_20);
        _20 = move ((_15 as Some).0: std::result::Result<(&state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = move _20;
        StorageLive(_27);
        _27 = {closure@programs\klend\src\lending_market\lending_operations.rs:2457:48: 2457:51};
        _25 = std::result::Result::<(&obligation::ObligationLiquidity, T), LengthMismatchError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:2457:48: 2457:51}>(move _26, move _27) -> [return: bb9, unwind: bb176];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _5 = const ();
        _333 = discriminant(_15);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        drop(_12) -> [return: bb60, unwind: bb178];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<(&obligation::ObligationLiquidity, T), anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb10, unwind: bb176];
    }

    bb10: {
        StorageDead(_25);
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb11, 1: bb12, otherwise: bb7];
    }

    bb11: {
        StorageLive(_32);
        _32 = move ((_24 as Continue).0: (&state::obligation::ObligationLiquidity, T));
        _23 = move _32;
        StorageDead(_32);
        StorageLive(_21);
        _21 = (_23.0: &state::obligation::ObligationLiquidity);
        StorageLive(_22);
        _22 = move (_23.1: T);
        _335 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_22;
        _33 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _34) -> [return: bb14, unwind: bb160];
    }

    bb12: {
        StorageLive(_29);
        _29 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _31) -> [return: bb13, unwind: bb175];
    }

    bb13: {
        StorageDead(_31);
        StorageDead(_29);
        _361 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb145;
    }

    bb14: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_22;
        _37 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get(move _38) -> [return: bb15, unwind: bb160];
    }

    bb15: {
        StorageDead(_38);
        _36 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb160];
    }

    bb16: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb17, 1: bb18, otherwise: bb7];
    }

    bb17: {
        StorageLive(_43);
        _43 = move ((_36 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _35 = move _43;
        StorageDead(_43);
        _337 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &((*_21).0: anchor_lang::prelude::Pubkey);
        StorageLive(_47);
        _47 = &_33;
        _45 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _46, move _47) -> [return: bb20, unwind: bb159];
    }

    bb18: {
        StorageLive(_40);
        _40 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _42) -> [return: bb19, unwind: bb174];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_40);
        _359 = discriminant(_36);
        StorageDead(_36);
        goto -> bb143;
    }

    bb20: {
        switchInt(move _45) -> [0: bb27, otherwise: bb21];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _314 = const _;
        _53 = &(*_314);
        _52 = LendingError::name(move _53) -> [return: bb22, unwind: bb159];
    }

    bb22: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = LendingError::InvalidAccountInput;
        _55 = <LendingError as Into<u32>>::into(move _56) -> [return: bb23, unwind: bb158];
    }

    bb23: {
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _313 = const _;
        _58 = &(*_313);
        _57 = <LendingError as ToString>::to_string(move _58) -> [return: bb24, unwind: bb158];
    }

    bb24: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2460_u32 };
        _61 = anchor_lang::error::ErrorOrigin::Source(move _62);
        StorageDead(_62);
        _60 = std::option::Option::<ErrorOrigin>::Some(move _61);
        StorageDead(_61);
        StorageLive(_63);
        _63 = std::option::Option::<ComparedValues>::None;
        _51 = anchor_lang::error::AnchorError { error_name: move _52, error_code_number: move _55, error_msg: move _57, error_origin: move _60, compared_values: move _63 };
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        _50 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _51) -> [return: bb25, unwind: bb159];
    }

    bb25: {
        StorageDead(_51);
        StorageLive(_64);
        StorageLive(_65);
        _65 = ((*_21).0: anchor_lang::prelude::Pubkey);
        StorageLive(_66);
        _66 = _33;
        _64 = (move _65, move _66);
        StorageDead(_66);
        StorageDead(_65);
        _49 = anchor_lang::error::Error::with_pubkeys(move _50, move _64) -> [return: bb26, unwind: bb159];
    }

    bb26: {
        StorageDead(_64);
        StorageDead(_50);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _49);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb142;
    }

    bb27: {
        StorageDead(_47);
        StorageDead(_46);
        _44 = const ();
        StorageDead(_45);
        StorageDead(_44);
        _67 = discriminant(_2);
        switchInt(move _67) -> [1: bb29, otherwise: bb28];
    }

    bb28: {
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_35;
        _118 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _119) -> [return: bb46, unwind: bb159];
    }

    bb29: {
        StorageLive(_68);
        _68 = ((_2 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_35;
        _73 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _74) -> [return: bb30, unwind: bb159];
    }

    bb30: {
        StorageDead(_74);
        _72 = &(((*_73).9: state::reserve::ReserveConfig).22: [u8; 20]);
        _71 = move _72 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &((*_68).1: u8);
        _75 = &(*_76);
        _70 = core::slice::<impl [u8]>::contains(move _71, move _75) -> [return: bb31, unwind: bb159];
    }

    bb31: {
        switchInt(move _70) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_76);
        StorageDead(_73);
        _69 = const ();
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_33;
        StorageLive(_95);
        _95 = &((*_68).7: anchor_lang::prelude::Pubkey);
        _93 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _94, move _95) -> [return: bb38, unwind: bb159];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_76);
        StorageDead(_73);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _320 = const _;
        _81 = &(*_320);
        _80 = LendingError::name(move _81) -> [return: bb34, unwind: bb159];
    }

    bb34: {
        StorageDead(_81);
        StorageLive(_83);
        StorageLive(_84);
        _84 = LendingError::InconsistentElevationGroup;
        _83 = <LendingError as Into<u32>>::into(move _84) -> [return: bb35, unwind: bb157];
    }

    bb35: {
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        _319 = const _;
        _86 = &(*_319);
        _85 = <LendingError as ToString>::to_string(move _86) -> [return: bb36, unwind: bb157];
    }

    bb36: {
        StorageDead(_86);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2467_u32 };
        _89 = anchor_lang::error::ErrorOrigin::Source(move _90);
        StorageDead(_90);
        _88 = std::option::Option::<ErrorOrigin>::Some(move _89);
        StorageDead(_89);
        StorageLive(_91);
        _91 = std::option::Option::<ComparedValues>::None;
        _79 = anchor_lang::error::AnchorError { error_name: move _80, error_code_number: move _83, error_msg: move _85, error_origin: move _88, compared_values: move _91 };
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_80);
        _78 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _79) -> [return: bb37, unwind: bb159];
    }

    bb37: {
        StorageDead(_79);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _78);
        StorageDead(_78);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb141;
    }

    bb38: {
        switchInt(move _93) -> [0: bb45, otherwise: bb39];
    }

    bb39: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _318 = const _;
        _101 = &(*_318);
        _100 = LendingError::name(move _101) -> [return: bb40, unwind: bb159];
    }

    bb40: {
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        _104 = LendingError::ElevationGroupHasAnotherDebtReserve;
        _103 = <LendingError as Into<u32>>::into(move _104) -> [return: bb41, unwind: bb156];
    }

    bb41: {
        StorageDead(_104);
        StorageLive(_105);
        StorageLive(_106);
        _317 = const _;
        _106 = &(*_317);
        _105 = <LendingError as ToString>::to_string(move _106) -> [return: bb42, unwind: bb156];
    }

    bb42: {
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2474_u32 };
        _109 = anchor_lang::error::ErrorOrigin::Source(move _110);
        StorageDead(_110);
        _108 = std::option::Option::<ErrorOrigin>::Some(move _109);
        StorageDead(_109);
        StorageLive(_111);
        _111 = std::option::Option::<ComparedValues>::None;
        _99 = anchor_lang::error::AnchorError { error_name: move _100, error_code_number: move _103, error_msg: move _105, error_origin: move _108, compared_values: move _111 };
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_100);
        _98 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _99) -> [return: bb43, unwind: bb159];
    }

    bb43: {
        StorageDead(_99);
        StorageLive(_112);
        StorageLive(_113);
        _113 = _33;
        StorageLive(_114);
        _114 = ((*_68).7: anchor_lang::prelude::Pubkey);
        _112 = (move _113, move _114);
        StorageDead(_114);
        StorageDead(_113);
        _97 = anchor_lang::error::Error::with_pubkeys(move _98, move _112) -> [return: bb44, unwind: bb159];
    }

    bb44: {
        StorageDead(_112);
        StorageDead(_98);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _97);
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb141;
    }

    bb45: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = const ();
        StorageDead(_93);
        StorageDead(_92);
        _14 = const ();
        StorageDead(_68);
        goto -> bb57;
    }

    bb46: {
        StorageDead(_119);
        _117 = (((*_118).9: state::reserve::ReserveConfig).27: u64);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_35;
        _121 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _122) -> [return: bb47, unwind: bb159];
    }

    bb47: {
        StorageDead(_122);
        _120 = ((*_121).11: u64);
        _116 = Lt(move _117, move _120);
        switchInt(move _116) -> [0: bb56, otherwise: bb48];
    }

    bb48: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _316 = const _;
        _128 = &(*_316);
        _127 = LendingError::name(move _128) -> [return: bb49, unwind: bb159];
    }

    bb49: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        _131 = LendingError::ElevationGroupBorrowLimitExceeded;
        _130 = <LendingError as Into<u32>>::into(move _131) -> [return: bb50, unwind: bb155];
    }

    bb50: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        _315 = const _;
        _133 = &(*_315);
        _132 = <LendingError as ToString>::to_string(move _133) -> [return: bb51, unwind: bb155];
    }

    bb51: {
        StorageDead(_133);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2482_u32 };
        _136 = anchor_lang::error::ErrorOrigin::Source(move _137);
        StorageDead(_137);
        _135 = std::option::Option::<ErrorOrigin>::Some(move _136);
        StorageDead(_136);
        StorageLive(_138);
        _138 = std::option::Option::<ComparedValues>::None;
        _126 = anchor_lang::error::AnchorError { error_name: move _127, error_code_number: move _130, error_msg: move _132, error_origin: move _135, compared_values: move _138 };
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        _125 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _126) -> [return: bb52, unwind: bb159];
    }

    bb52: {
        _331 = const true;
        StorageDead(_126);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &_35;
        _141 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _142) -> [return: bb53, unwind: bb173];
    }

    bb53: {
        StorageDead(_142);
        _140 = (((*_141).9: state::reserve::ReserveConfig).27: u64);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_35;
        _144 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _145) -> [return: bb54, unwind: bb173];
    }

    bb54: {
        StorageDead(_145);
        _143 = ((*_144).11: u64);
        _139 = (move _140, move _143);
        StorageDead(_143);
        StorageDead(_140);
        _331 = const false;
        _124 = anchor_lang::error::Error::with_values::<u64, u64>(move _125, move _139) -> [return: bb55, unwind: bb173];
    }

    bb55: {
        StorageDead(_139);
        _331 = const false;
        StorageDead(_125);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _124);
        StorageDead(_124);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb142;
    }

    bb56: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        _115 = const ();
        StorageDead(_116);
        StorageDead(_115);
        _14 = const ();
        goto -> bb57;
    }

    bb57: {
        drop(_35) -> [return: bb58, unwind: bb160];
    }

    bb58: {
        StorageDead(_35);
        StorageDead(_33);
        drop(_22) -> [return: bb59, unwind: bb176];
    }

    bb59: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _339 = discriminant(_15);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        _13 = const ();
        goto -> bb4;
    }

    bb60: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &(*_1);
        _148 = obligation::Obligation::active_deposits(move _149) -> [return: bb61, unwind: bb178];
    }

    bb61: {
        StorageDead(_149);
        StorageLive(_150);
        _329 = const false;
        _150 = move _3;
        _147 = <Filter<std::slice::Iter<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}> as validation::IterExt>::zip_exact::<impl Iterator<Item = T>, impl Iterator<Item = T>>(move _148, move _150) -> [return: bb62, unwind: bb178];
    }

    bb62: {
        StorageDead(_150);
        StorageDead(_148);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = move _147;
        _152 = <LengthCheckingZipIterator<Filter<std::slice::Iter<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>> as IntoIterator>::into_iter(move _153) -> [return: bb63, unwind: bb178];
    }

    bb63: {
        StorageDead(_153);
        StorageLive(_154);
        _154 = move _152;
        goto -> bb64;
    }

    bb64: {
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &mut _154;
        _157 = &mut (*_158);
        _156 = <LengthCheckingZipIterator<Filter<std::slice::Iter<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>, impl Iterator<Item = T>> as Iterator>::next(move _157) -> [return: bb65, unwind: bb154];
    }

    bb65: {
        StorageDead(_157);
        _159 = discriminant(_156);
        switchInt(move _159) -> [0: bb67, 1: bb66, otherwise: bb7];
    }

    bb66: {
        StorageLive(_161);
        _161 = move ((_156 as Some).0: std::result::Result<(&state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = move _161;
        StorageLive(_168);
        _168 = {closure@programs\klend\src\lending_market\lending_operations.rs:2498:49: 2498:52};
        _166 = std::result::Result::<(&obligation::ObligationCollateral, T), LengthMismatchError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:2498:49: 2498:52}>(move _167, move _168) -> [return: bb68, unwind: bb171];
    }

    bb67: {
        _151 = const ();
        _341 = discriminant(_156);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_155);
        drop(_154) -> [return: bb124, unwind: bb178];
    }

    bb68: {
        StorageDead(_168);
        StorageDead(_167);
        _165 = <std::result::Result<(&obligation::ObligationCollateral, T), anchor_lang::error::Error> as Try>::branch(move _166) -> [return: bb69, unwind: bb171];
    }

    bb69: {
        StorageDead(_166);
        _169 = discriminant(_165);
        switchInt(move _169) -> [0: bb70, 1: bb71, otherwise: bb7];
    }

    bb70: {
        StorageLive(_173);
        _173 = move ((_165 as Continue).0: (&state::obligation::ObligationCollateral, T));
        _164 = move _173;
        StorageDead(_173);
        StorageLive(_162);
        _162 = (_164.0: &state::obligation::ObligationCollateral);
        StorageLive(_163);
        _163 = move (_164.1: T);
        _343 = discriminant(_165);
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &_163;
        _174 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _175) -> [return: bb73, unwind: bb153];
    }

    bb71: {
        StorageLive(_170);
        _170 = move ((_165 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_172);
        _172 = move _170;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _172) -> [return: bb72, unwind: bb170];
    }

    bb72: {
        StorageDead(_172);
        StorageDead(_170);
        _355 = discriminant(_165);
        StorageDead(_165);
        StorageDead(_164);
        goto -> bb138;
    }

    bb73: {
        StorageDead(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_163;
        _178 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get(move _179) -> [return: bb74, unwind: bb153];
    }

    bb74: {
        StorageDead(_179);
        _177 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _178) -> [return: bb75, unwind: bb153];
    }

    bb75: {
        StorageDead(_178);
        _180 = discriminant(_177);
        switchInt(move _180) -> [0: bb76, 1: bb77, otherwise: bb7];
    }

    bb76: {
        StorageLive(_184);
        _184 = move ((_177 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _176 = move _184;
        StorageDead(_184);
        _345 = discriminant(_177);
        StorageDead(_177);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &((*_162).0: anchor_lang::prelude::Pubkey);
        StorageLive(_188);
        _188 = &_174;
        _186 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _187, move _188) -> [return: bb79, unwind: bb152];
    }

    bb77: {
        StorageLive(_181);
        _181 = move ((_177 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_183);
        _183 = move _181;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _183) -> [return: bb78, unwind: bb169];
    }

    bb78: {
        StorageDead(_183);
        StorageDead(_181);
        _353 = discriminant(_177);
        StorageDead(_177);
        goto -> bb136;
    }

    bb79: {
        switchInt(move _186) -> [0: bb86, otherwise: bb80];
    }

    bb80: {
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _322 = const _;
        _194 = &(*_322);
        _193 = LendingError::name(move _194) -> [return: bb81, unwind: bb152];
    }

    bb81: {
        StorageDead(_194);
        StorageLive(_196);
        StorageLive(_197);
        _197 = LendingError::InvalidAccountInput;
        _196 = <LendingError as Into<u32>>::into(move _197) -> [return: bb82, unwind: bb151];
    }

    bb82: {
        StorageDead(_197);
        StorageLive(_198);
        StorageLive(_199);
        _321 = const _;
        _199 = &(*_321);
        _198 = <LendingError as ToString>::to_string(move _199) -> [return: bb83, unwind: bb151];
    }

    bb83: {
        StorageDead(_199);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2501_u32 };
        _202 = anchor_lang::error::ErrorOrigin::Source(move _203);
        StorageDead(_203);
        _201 = std::option::Option::<ErrorOrigin>::Some(move _202);
        StorageDead(_202);
        StorageLive(_204);
        _204 = std::option::Option::<ComparedValues>::None;
        _192 = anchor_lang::error::AnchorError { error_name: move _193, error_code_number: move _196, error_msg: move _198, error_origin: move _201, compared_values: move _204 };
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_193);
        _191 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _192) -> [return: bb84, unwind: bb152];
    }

    bb84: {
        StorageDead(_192);
        StorageLive(_205);
        StorageLive(_206);
        _206 = ((*_162).0: anchor_lang::prelude::Pubkey);
        StorageLive(_207);
        _207 = _174;
        _205 = (move _206, move _207);
        StorageDead(_207);
        StorageDead(_206);
        _190 = anchor_lang::error::Error::with_pubkeys(move _191, move _205) -> [return: bb85, unwind: bb152];
    }

    bb85: {
        StorageDead(_205);
        StorageDead(_191);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _190);
        StorageDead(_190);
        StorageDead(_186);
        StorageDead(_185);
        goto -> bb135;
    }

    bb86: {
        StorageDead(_188);
        StorageDead(_187);
        _185 = const ();
        StorageDead(_186);
        StorageDead(_185);
        _208 = discriminant(_2);
        switchInt(move _208) -> [1: bb88, otherwise: bb87];
    }

    bb87: {
        _155 = const ();
        goto -> bb121;
    }

    bb88: {
        StorageLive(_209);
        _209 = ((_2 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &(*_209);
        _210 = state::lending_market::ElevationGroup::get_index(move _211) -> [return: bb89, unwind: bb152];
    }

    bb89: {
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &_176;
        _216 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _217) -> [return: bb90, unwind: bb152];
    }

    bb90: {
        StorageDead(_217);
        _215 = &(((*_216).9: state::reserve::ReserveConfig).22: [u8; 20]);
        _214 = move _215 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_215);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &((*_209).1: u8);
        _218 = &(*_219);
        _213 = core::slice::<impl [u8]>::contains(move _214, move _218) -> [return: bb91, unwind: bb152];
    }

    bb91: {
        switchInt(move _213) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        StorageDead(_218);
        StorageDead(_214);
        StorageDead(_219);
        StorageDead(_216);
        _212 = const ();
        StorageDead(_213);
        StorageDead(_212);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_174;
        StorageLive(_238);
        _238 = &((*_209).7: anchor_lang::prelude::Pubkey);
        _236 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _237, move _238) -> [return: bb98, unwind: bb152];
    }

    bb93: {
        StorageDead(_218);
        StorageDead(_214);
        StorageDead(_219);
        StorageDead(_216);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _328 = const _;
        _224 = &(*_328);
        _223 = LendingError::name(move _224) -> [return: bb94, unwind: bb152];
    }

    bb94: {
        StorageDead(_224);
        StorageLive(_226);
        StorageLive(_227);
        _227 = LendingError::InconsistentElevationGroup;
        _226 = <LendingError as Into<u32>>::into(move _227) -> [return: bb95, unwind: bb150];
    }

    bb95: {
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        _327 = const _;
        _229 = &(*_327);
        _228 = <LendingError as ToString>::to_string(move _229) -> [return: bb96, unwind: bb150];
    }

    bb96: {
        StorageDead(_229);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2509_u32 };
        _232 = anchor_lang::error::ErrorOrigin::Source(move _233);
        StorageDead(_233);
        _231 = std::option::Option::<ErrorOrigin>::Some(move _232);
        StorageDead(_232);
        StorageLive(_234);
        _234 = std::option::Option::<ComparedValues>::None;
        _222 = anchor_lang::error::AnchorError { error_name: move _223, error_code_number: move _226, error_msg: move _228, error_origin: move _231, compared_values: move _234 };
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_223);
        _221 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _222) -> [return: bb97, unwind: bb152];
    }

    bb97: {
        StorageDead(_222);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _221);
        StorageDead(_221);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb134;
    }

    bb98: {
        switchInt(move _236) -> [0: bb105, otherwise: bb99];
    }

    bb99: {
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _324 = const _;
        _244 = &(*_324);
        _243 = LendingError::name(move _244) -> [return: bb100, unwind: bb152];
    }

    bb100: {
        StorageDead(_244);
        StorageLive(_246);
        StorageLive(_247);
        _247 = LendingError::ElevationGroupDebtReserveAsCollateral;
        _246 = <LendingError as Into<u32>>::into(move _247) -> [return: bb101, unwind: bb149];
    }

    bb101: {
        StorageDead(_247);
        StorageLive(_248);
        StorageLive(_249);
        _323 = const _;
        _249 = &(*_323);
        _248 = <LendingError as ToString>::to_string(move _249) -> [return: bb102, unwind: bb149];
    }

    bb102: {
        StorageDead(_249);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2516_u32 };
        _252 = anchor_lang::error::ErrorOrigin::Source(move _253);
        StorageDead(_253);
        _251 = std::option::Option::<ErrorOrigin>::Some(move _252);
        StorageDead(_252);
        StorageLive(_254);
        _254 = std::option::Option::<ComparedValues>::None;
        _242 = anchor_lang::error::AnchorError { error_name: move _243, error_code_number: move _246, error_msg: move _248, error_origin: move _251, compared_values: move _254 };
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_243);
        _241 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _242) -> [return: bb103, unwind: bb152];
    }

    bb103: {
        StorageDead(_242);
        StorageLive(_255);
        StorageLive(_256);
        _256 = _174;
        StorageLive(_257);
        _257 = ((*_209).7: anchor_lang::prelude::Pubkey);
        _255 = (move _256, move _257);
        StorageDead(_257);
        StorageDead(_256);
        _240 = anchor_lang::error::Error::with_pubkeys(move _241, move _255) -> [return: bb104, unwind: bb152];
    }

    bb104: {
        StorageDead(_255);
        StorageDead(_241);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _240);
        StorageDead(_240);
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb134;
    }

    bb105: {
        StorageDead(_238);
        StorageDead(_237);
        _235 = const ();
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_176;
        _261 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _262) -> [return: bb106, unwind: bb152];
    }

    bb106: {
        StorageDead(_262);
        StorageLive(_263);
        _263 = _210;
        _264 = Len((((*_261).9: state::reserve::ReserveConfig).28: [u64; 32]));
        _265 = Lt(_263, _264);
        assert(move _265, "index out of bounds: the length is {} but the index is {}", move _264, _263) -> [success: bb107, unwind: bb152];
    }

    bb107: {
        _260 = (((*_261).9: state::reserve::ReserveConfig).28: [u64; 32])[_263];
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_176;
        _267 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _268) -> [return: bb108, unwind: bb152];
    }

    bb108: {
        StorageDead(_268);
        StorageLive(_269);
        _269 = _210;
        _270 = Len(((*_267).12: [u64; 32]));
        _271 = Lt(_269, _270);
        assert(move _271, "index out of bounds: the length is {} but the index is {}", move _270, _269) -> [success: bb109, unwind: bb152];
    }

    bb109: {
        _266 = ((*_267).12: [u64; 32])[_269];
        _259 = Lt(move _260, move _266);
        switchInt(move _259) -> [0: bb120, otherwise: bb110];
    }

    bb110: {
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_260);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _326 = const _;
        _277 = &(*_326);
        _276 = LendingError::name(move _277) -> [return: bb111, unwind: bb152];
    }

    bb111: {
        StorageDead(_277);
        StorageLive(_279);
        StorageLive(_280);
        _280 = LendingError::ElevationGroupBorrowLimitExceeded;
        _279 = <LendingError as Into<u32>>::into(move _280) -> [return: bb112, unwind: bb148];
    }

    bb112: {
        StorageDead(_280);
        StorageLive(_281);
        StorageLive(_282);
        _325 = const _;
        _282 = &(*_325);
        _281 = <LendingError as ToString>::to_string(move _282) -> [return: bb113, unwind: bb148];
    }

    bb113: {
        StorageDead(_282);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2523_u32 };
        _285 = anchor_lang::error::ErrorOrigin::Source(move _286);
        StorageDead(_286);
        _284 = std::option::Option::<ErrorOrigin>::Some(move _285);
        StorageDead(_285);
        StorageLive(_287);
        _287 = std::option::Option::<ComparedValues>::None;
        _275 = anchor_lang::error::AnchorError { error_name: move _276, error_code_number: move _279, error_msg: move _281, error_origin: move _284, compared_values: move _287 };
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_276);
        _274 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _275) -> [return: bb114, unwind: bb152];
    }

    bb114: {
        _330 = const true;
        StorageDead(_275);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_176;
        _290 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _291) -> [return: bb115, unwind: bb168];
    }

    bb115: {
        StorageDead(_291);
        StorageLive(_292);
        _292 = _210;
        _293 = Len((((*_290).9: state::reserve::ReserveConfig).28: [u64; 32]));
        _294 = Lt(_292, _293);
        assert(move _294, "index out of bounds: the length is {} but the index is {}", move _293, _292) -> [success: bb116, unwind: bb168];
    }

    bb116: {
        _289 = (((*_290).9: state::reserve::ReserveConfig).28: [u64; 32])[_292];
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &_176;
        _296 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _297) -> [return: bb117, unwind: bb168];
    }

    bb117: {
        StorageDead(_297);
        StorageLive(_298);
        _298 = _210;
        _299 = Len(((*_296).12: [u64; 32]));
        _300 = Lt(_298, _299);
        assert(move _300, "index out of bounds: the length is {} but the index is {}", move _299, _298) -> [success: bb118, unwind: bb168];
    }

    bb118: {
        _295 = ((*_296).12: [u64; 32])[_298];
        _288 = (move _289, move _295);
        StorageDead(_295);
        StorageDead(_289);
        _330 = const false;
        _273 = anchor_lang::error::Error::with_values::<u64, u64>(move _274, move _288) -> [return: bb119, unwind: bb168];
    }

    bb119: {
        StorageDead(_288);
        _330 = const false;
        StorageDead(_274);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _273);
        StorageDead(_273);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_259);
        StorageDead(_258);
        goto -> bb134;
    }

    bb120: {
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_260);
        _258 = const ();
        StorageDead(_259);
        StorageDead(_258);
        _155 = const ();
        StorageDead(_210);
        StorageDead(_209);
        goto -> bb121;
    }

    bb121: {
        drop(_176) -> [return: bb122, unwind: bb153];
    }

    bb122: {
        StorageDead(_176);
        StorageDead(_174);
        drop(_163) -> [return: bb123, unwind: bb171];
    }

    bb123: {
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        _347 = discriminant(_156);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_155);
        _13 = const ();
        goto -> bb64;
    }

    bb124: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &(*_1);
        _301 = obligation::Obligation::active_borrows_empty(move _302) -> [return: bb125, unwind: bb178];
    }

    bb125: {
        switchInt(move _301) -> [0: bb127, otherwise: bb126];
    }

    bb126: {
        StorageDead(_302);
        _146 = const ();
        goto -> bb133;
    }

    bb127: {
        StorageDead(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &(*_1);
        _305 = check_non_elevation_group_borrowing_enabled(move _306) -> [return: bb128, unwind: bb178];
    }

    bb128: {
        StorageDead(_306);
        _304 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _305) -> [return: bb129, unwind: bb178];
    }

    bb129: {
        StorageDead(_305);
        _307 = discriminant(_304);
        switchInt(move _307) -> [0: bb130, 1: bb131, otherwise: bb7];
    }

    bb130: {
        StorageLive(_311);
        _311 = ((_304 as Continue).0: ());
        _303 = _311;
        StorageDead(_311);
        _349 = discriminant(_304);
        StorageDead(_304);
        StorageDead(_303);
        _146 = const ();
        goto -> bb133;
    }

    bb131: {
        StorageLive(_308);
        _308 = move ((_304 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_310);
        _310 = move _308;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _310) -> [return: bb132, unwind: bb166];
    }

    bb132: {
        StorageDead(_310);
        StorageDead(_308);
        _351 = discriminant(_304);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_301);
        goto -> bb140;
    }

    bb133: {
        StorageDead(_301);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_312);
        _312 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _312);
        StorageDead(_312);
        goto -> bb147;
    }

    bb134: {
        StorageDead(_210);
        StorageDead(_209);
        goto -> bb135;
    }

    bb135: {
        drop(_176) -> [return: bb136, unwind: bb153];
    }

    bb136: {
        StorageDead(_176);
        StorageDead(_174);
        drop(_163) -> [return: bb137, unwind: bb171];
    }

    bb137: {
        StorageDead(_163);
        StorageDead(_162);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_161);
        _357 = discriminant(_156);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_155);
        drop(_154) -> [return: bb139, unwind: bb178];
    }

    bb139: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb165;
    }

    bb141: {
        StorageDead(_68);
        goto -> bb142;
    }

    bb142: {
        drop(_35) -> [return: bb143, unwind: bb160];
    }

    bb143: {
        StorageDead(_35);
        StorageDead(_33);
        drop(_22) -> [return: bb144, unwind: bb176];
    }

    bb144: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_20);
        _363 = discriminant(_15);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        drop(_12) -> [return: bb146, unwind: bb178];
    }

    bb146: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb165;
    }

    bb147: {
        return;
    }

    bb148 (cleanup): {
        drop(_276) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_243) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_223) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_193) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_176) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_163) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_154) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_127) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_100) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_80) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_52) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_35) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_22) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_12) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        switchInt(_329) -> [0: bb163, otherwise: bb179];
    }

    bb163 (cleanup): {
        resume;
    }

    bb164: {
        drop(_3) -> [return: bb147, unwind: bb163];
    }

    bb165: {
        switchInt(_329) -> [0: bb147, otherwise: bb164];
    }

    bb166 (cleanup): {
        _365 = discriminant(_304);
        goto -> bb178;
    }

    bb167 (cleanup): {
        drop(_274) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        switchInt(_330) -> [0: bb152, otherwise: bb167];
    }

    bb169 (cleanup): {
        _366 = discriminant(_177);
        goto -> bb153;
    }

    bb170 (cleanup): {
        _368 = discriminant(_165);
        goto -> bb171;
    }

    bb171 (cleanup): {
        _369 = discriminant(_156);
        goto -> bb154;
    }

    bb172 (cleanup): {
        drop(_125) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        switchInt(_331) -> [0: bb159, otherwise: bb172];
    }

    bb174 (cleanup): {
        _370 = discriminant(_36);
        goto -> bb160;
    }

    bb175 (cleanup): {
        _372 = discriminant(_24);
        goto -> bb176;
    }

    bb176 (cleanup): {
        _373 = discriminant(_15);
        goto -> bb161;
    }

    bb177 (cleanup): {
        drop(_4) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        switchInt(_332) -> [0: bb162, otherwise: bb177];
    }

    bb179 (cleanup): {
        drop(_3) -> [return: bb163, unwind terminate(cleanup)];
    }
}
