digraph Mir_0_1909 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn ReserveLiquidity::borrow(_1: &amp;ReErased mut state::reserve::ReserveLiquidity, _2: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: u64;<br align="left"/>let mut _4: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: !;<br align="left"/>let _10: ();<br align="left"/>let mut _11: &amp;ReErased str;<br align="left"/>let _12: &amp;ReErased str;<br align="left"/>let mut _13: &amp;ReErased std::string::String;<br align="left"/>let _14: &amp;ReErased std::string::String;<br align="left"/>let _15: std::string::String;<br align="left"/>let _16: std::string::String;<br align="left"/>let mut _17: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _18: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _19: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _20: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _21: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _22: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _23: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _24: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _25: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _26: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _27: &amp;ReErased u64;<br align="left"/>let _28: &amp;ReErased u64;<br align="left"/>let mut _29: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _30: &amp;ReErased u64;<br align="left"/>let _31: &amp;ReErased u64;<br align="left"/>let mut _32: anchor_lang::error::Error;<br align="left"/>let mut _33: anchor_lang::error::AnchorError;<br align="left"/>let mut _34: std::string::String;<br align="left"/>let mut _35: &amp;ReErased LendingError;<br align="left"/>let _36: LendingError;<br align="left"/>let mut _37: u32;<br align="left"/>let mut _38: LendingError;<br align="left"/>let mut _39: std::string::String;<br align="left"/>let mut _40: &amp;ReErased LendingError;<br align="left"/>let _41: LendingError;<br align="left"/>let mut _42: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _43: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _44: anchor_lang::error::Source;<br align="left"/>let mut _45: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let _46: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _47: u128;<br align="left"/>let mut _48: u64;<br align="left"/>let mut _49: (u64, bool);<br align="left"/>let mut _50: u128;<br align="left"/>let mut _51: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _52: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _53: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _54: ();<br align="left"/>let mut _55: &amp;ReErased LendingError;<br align="left"/>let mut _56: &amp;ReErased LendingError;<br align="left"/>let mut _57: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug borrow_f =&gt; _2;<br align="left"/>debug borrow_amount =&gt; _3;<br align="left"/>debug res =&gt; _16;<br align="left"/>debug borrowed_amount_f =&gt; _46;<br align="left"/>>;
    bb0__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = &amp;_2<br/></td></tr><tr><td align="left">_3 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as utils::fraction::FractionExtra&gt;::to_floor::&lt;u64&gt;(move _4)</td></tr></table>>];
    bb1__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _3<br/>StorageLive(_8)<br/>_8 = ((*_1).3: u64)<br/>_6 = Gt(move _7, move _8)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb2__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_57 = const _<br/>_20 = &amp;(*_57)<br/>_19 = &amp;(*_20)<br/>_18 = move _19 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_19)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;_3<br/>_27 = &amp;(*_28)<br/></td></tr><tr><td align="left">_26 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _27)</td></tr></table>>];
    bb3__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = &amp;((*_1).3: u64)<br/>_30 = &amp;(*_31)<br/></td></tr><tr><td align="left">_29 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _30)</td></tr></table>>];
    bb4__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_25 = [move _26, move _29]<br/>StorageDead(_29)<br/>StorageDead(_26)<br/>_24 = &amp;_25<br/>_23 = &amp;(*_24)<br/>_22 = move _23 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_17 = Arguments::&lt;'_&gt;::new_v1(move _18, move _22)</td></tr></table>>];
    bb5__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = format(move _17)</td></tr></table>>];
    bb6__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_20)<br/>_15 = move _16<br/>StorageDead(_16)<br/>_14 = &amp;_15<br/>_13 = &amp;(*_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::string::String as Deref&gt;::deref(move _13)</td></tr></table>>];
    bb7__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_11 = &amp;(*_12)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_10 = solana_program::log::sol_log(move _11)</td></tr></table>>];
    bb8__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">drop(_15)</td></tr></table>>];
    bb9__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_56 = const _<br/>_35 = &amp;(*_56)<br/></td></tr><tr><td align="left">_34 = LendingError::name(move _35)</td></tr></table>>];
    bb10__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = LendingError::InsufficientLiquidity<br/></td></tr><tr><td align="left">_37 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _38)</td></tr></table>>];
    bb11__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_55 = const _<br/>_40 = &amp;(*_55)<br/></td></tr><tr><td align="left">_39 = &lt;LendingError as ToString&gt;::to_string(move _40)</td></tr></table>>];
    bb12__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\state\\reserve.rs&quot;, line: const 567_u32 }<br/>_43 = anchor_lang::error::ErrorOrigin::Source(move _44)<br/>StorageDead(_44)<br/>_42 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _43)<br/>StorageDead(_43)<br/>StorageLive(_45)<br/>_45 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_33 = anchor_lang::error::AnchorError { error_name: move _34, error_code_number: move _37, error_msg: move _39, error_origin: move _42, compared_values: move _45 }<br/>StorageDead(_45)<br/>StorageDead(_42)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _33)</td></tr></table>>];
    bb13__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _32)<br/>StorageDead(_32)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>_5 = const ()<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = ((*_1).4: u128)<br/></td></tr><tr><td align="left">_46 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::from_bits(move _47)</td></tr></table>>];
    bb15__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageLive(_48)<br/>_48 = _3<br/>_49 = CheckedSub(((*_1).3: u64), _48)<br/></td></tr><tr><td align="left">assert(!move (_49.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, ((*_1).3: u64), move _48)</td></tr></table>>];
    bb16__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">((*_1).3: u64) = move (_49.0: u64)<br/>StorageDead(_48)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_52 = _46<br/>StorageLive(_53)<br/>_53 = _2<br/></td></tr><tr><td align="left">_51 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as Add&gt;::add(move _52, move _53)</td></tr></table>>];
    bb17__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">_50 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _51)</td></tr></table>>];
    bb18__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>((*_1).4: u128) = move _50<br/>StorageDead(_50)<br/>StorageLive(_54)<br/>_54 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _54)<br/>StorageDead(_54)<br/>StorageDead(_46)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">return</td></tr></table>>];
    bb20__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_34)</td></tr></table>>];
    bb21__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">drop(_15)</td></tr></table>>];
    bb22__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1909 -> bb1__0_1909 [label="return"];
    bb1__0_1909 -> bb14__0_1909 [label="0"];
    bb1__0_1909 -> bb2__0_1909 [label="otherwise"];
    bb2__0_1909 -> bb3__0_1909 [label="return"];
    bb3__0_1909 -> bb4__0_1909 [label="return"];
    bb4__0_1909 -> bb5__0_1909 [label="return"];
    bb5__0_1909 -> bb6__0_1909 [label="return"];
    bb6__0_1909 -> bb7__0_1909 [label="return"];
    bb6__0_1909 -> bb21__0_1909 [label="unwind"];
    bb7__0_1909 -> bb8__0_1909 [label="return"];
    bb7__0_1909 -> bb21__0_1909 [label="unwind"];
    bb8__0_1909 -> bb9__0_1909 [label="return"];
    bb8__0_1909 -> bb22__0_1909 [label="unwind"];
    bb9__0_1909 -> bb10__0_1909 [label="return"];
    bb10__0_1909 -> bb11__0_1909 [label="return"];
    bb10__0_1909 -> bb20__0_1909 [label="unwind"];
    bb11__0_1909 -> bb12__0_1909 [label="return"];
    bb11__0_1909 -> bb20__0_1909 [label="unwind"];
    bb12__0_1909 -> bb13__0_1909 [label="return"];
    bb12__0_1909 -> bb22__0_1909 [label="unwind"];
    bb13__0_1909 -> bb19__0_1909 [label=""];
    bb14__0_1909 -> bb15__0_1909 [label="return"];
    bb15__0_1909 -> bb16__0_1909 [label="success"];
    bb16__0_1909 -> bb17__0_1909 [label="return"];
    bb17__0_1909 -> bb18__0_1909 [label="return"];
    bb18__0_1909 -> bb19__0_1909 [label=""];
    bb20__0_1909 -> bb22__0_1909 [label="return"];
    bb21__0_1909 -> bb22__0_1909 [label="return"];
}
