// MIR for `handlers::handler_withdraw_referrer_fees::process` after PreCodegen

fn handlers::handler_withdraw_referrer_fees::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let _6: &anchor_lang::prelude::AccountInfo<'_>;
    let _7: anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _9: &anchor_lang::prelude::AccountInfo<'_>;
    let _10: &anchor_lang::prelude::AccountInfo<'_>;
    let _11: anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _17: ();
    let _18: &anchor_lang::prelude::Clock;
    let _19: anchor_lang::prelude::Clock;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _21: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _26: anchor_lang::prelude::Clock;
    let mut _28: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _30: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _31: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _38: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::referral::ReferrerTokenState>>;
    let mut _40: std::result::Result<std::cell::RefMut<'_, state::referral::ReferrerTokenState>, anchor_lang::error::Error>;
    let mut _41: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _48: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _50: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _51: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _58: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _60: [&[u8]; 3];
    let mut _61: &[u8];
    let mut _62: &[u8];
    let _63: &[u8];
    let mut _64: &[u8];
    let _65: &[u8];
    let mut _66: &anchor_lang::prelude::Pubkey;
    let mut _67: &[u8];
    let mut _68: &[u8; 1];
    let _69: &[u8; 1];
    let _70: [u8; 1];
    let mut _71: u8;
    let mut _72: u64;
    let mut _73: &state::lending_market::LendingMarket;
    let mut _74: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _77: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _78: &mut state::reserve::Reserve;
    let mut _79: &mut state::reserve::Reserve;
    let mut _80: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _81: u64;
    let mut _82: &mut state::referral::ReferrerTokenState;
    let mut _83: &mut state::referral::ReferrerTokenState;
    let mut _84: &mut std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: &std::string::String;
    let _94: &std::string::String;
    let _95: std::string::String;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[&str; 1];
    let _100: &[&str; 1];
    let _101: [&str; 1];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let mut _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: &[core::fmt::rt::Argument<'_>; 1];
    let _105: [core::fmt::rt::Argument<'_>; 1];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &u64;
    let _108: &u64;
    let _109: ();
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _111: std::result::Result<(), anchor_lang::error::Error>;
    let mut _112: anchor_lang::prelude::AccountInfo<'_>;
    let mut _113: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _114: anchor_lang::prelude::AccountInfo<'_>;
    let mut _115: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _116: anchor_lang::prelude::AccountInfo<'_>;
    let mut _117: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _118: anchor_lang::prelude::AccountInfo<'_>;
    let mut _119: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _120: anchor_lang::prelude::AccountInfo<'_>;
    let mut _121: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _122: &[&[u8]];
    let mut _123: &[&[u8]; 3];
    let mut _124: u64;
    let mut _125: u8;
    let mut _126: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _127: &anchor_spl::token_interface::Mint;
    let _128: &anchor_spl::token_interface::Mint;
    let mut _129: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _135: ();
    let mut _137: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _138: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _139: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _140: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _141: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _142: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _143: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _144: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _145: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _146: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _147: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _148: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _149: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _150: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _151: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _152: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _153: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>;
    let mut _154: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _196: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _197: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _198: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _199: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _200: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug residual => _14;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _17;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _18;
        let _27: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
        let _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _36: std::cell::RefMut<'_, state::reserve::Reserve>;
        scope 10 {
            debug reserve => _27;
            let _37: &mut std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
            let _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _46: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
            scope 15 {
                debug referrer_token_state => _37;
                let _47: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
                let _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _56: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                scope 20 {
                    debug lending_market => _47;
                    let _57: anchor_lang::prelude::Pubkey;
                    scope 25 {
                        debug lending_market_key => _57;
                        let _59: &[&[u8]; 3];
                        scope 26 {
                            debug authority_signer_seeds => _59;
                            let _75: u64;
                            let _86: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _89: u64;
                            scope 27 {
                                debug withdraw_amount => _75;
                                let _96: std::string::String;
                                let _131: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _134: ();
                                let mut _136: &[&str; 1];
                                scope 32 {
                                    debug res => _96;
                                }
                                scope 33 {
                                    debug residual => _131;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _134;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _86;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _89;
                                scope 31 {
                                }
                            }
                        }
                    }
                }
                scope 21 {
                    debug residual => _53;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _56;
                    scope 24 {
                    }
                }
            }
            scope 16 {
                debug residual => _43;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _46;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _33;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _36;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        _159 = const false;
        _158 = const false;
        _157 = const false;
        _156 = const false;
        _155 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _137 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _138 = deref_copy ((*_137).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _195 = (((_138.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _8 = &(*_195);
        _7 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = &_7;
        _5 = &(*_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _139 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _140 = deref_copy ((*_139).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _196 = (((_140.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _12 = &(*_196);
        _11 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _12) -> [return: bb2, unwind: bb75];
    }

    bb2: {
        StorageDead(_12);
        _10 = &_11;
        _9 = &(*_10);
        _4 = validate_liquidity_token_extensions(move _5, move _9) -> [return: bb3, unwind: bb74];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb4, unwind: bb74];
    }

    bb4: {
        StorageDead(_4);
        _13 = discriminant(_3);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_3 as Continue).0: ());
        _2 = _17;
        StorageDead(_17);
        _160 = discriminant(_3);
        drop(_11) -> [return: bb9, unwind: bb75];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _16) -> [return: bb8, unwind: bb93];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        _186 = discriminant(_3);
        drop(_11) -> [return: bb67, unwind: bb75];
    }

    bb9: {
        StorageDead(_11);
        StorageDead(_10);
        drop(_7) -> [return: bb10, unwind: bb76];
    }

    bb10: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb11, unwind continue];
    }

    bb11: {
        _20 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _21) -> [return: bb12, unwind: bb76];
    }

    bb12: {
        StorageDead(_21);
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb13, 1: bb14, otherwise: bb6];
    }

    bb13: {
        StorageLive(_26);
        _26 = move ((_20 as Continue).0: anchor_lang::prelude::Clock);
        _19 = move _26;
        StorageDead(_26);
        _18 = &_19;
        _162 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _141 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _31 = &((*_141).2: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _30 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _31) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_23);
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _25) -> [return: bb15, unwind: bb92];
    }

    bb15: {
        StorageDead(_25);
        StorageDead(_23);
        _184 = discriminant(_20);
        StorageDead(_20);
        goto -> bb66;
    }

    bb16: {
        StorageDead(_31);
        _29 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _30) -> [return: bb17, unwind: bb76];
    }

    bb17: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb18, 1: bb19, otherwise: bb6];
    }

    bb18: {
        StorageLive(_36);
        _36 = move ((_29 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _28 = move _36;
        StorageDead(_36);
        _27 = &mut _28;
        _164 = discriminant(_29);
        StorageDead(_29);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _142 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _41 = &((*_142).1: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>);
        _40 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerTokenState>::load_mut(move _41) -> [return: bb21, unwind: bb73];
    }

    bb19: {
        StorageLive(_33);
        _33 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _35) -> [return: bb20, unwind: bb91];
    }

    bb20: {
        StorageDead(_35);
        StorageDead(_33);
        _182 = discriminant(_29);
        StorageDead(_29);
        goto -> bb65;
    }

    bb21: {
        StorageDead(_41);
        _39 = <std::result::Result<RefMut<'_, referral::ReferrerTokenState>, anchor_lang::error::Error> as Try>::branch(move _40) -> [return: bb22, unwind: bb73];
    }

    bb22: {
        StorageDead(_40);
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        StorageLive(_46);
        _46 = move ((_39 as Continue).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>);
        _38 = move _46;
        StorageDead(_46);
        _37 = &mut _38;
        _166 = discriminant(_39);
        StorageDead(_39);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _143 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _51 = &((*_143).6: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _50 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _51) -> [return: bb26, unwind: bb72];
    }

    bb24: {
        StorageLive(_43);
        _43 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _45) -> [return: bb25, unwind: bb90];
    }

    bb25: {
        StorageDead(_45);
        StorageDead(_43);
        _180 = discriminant(_39);
        StorageDead(_39);
        goto -> bb64;
    }

    bb26: {
        StorageDead(_51);
        _49 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _50) -> [return: bb27, unwind: bb72];
    }

    bb27: {
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb28, 1: bb29, otherwise: bb6];
    }

    bb28: {
        StorageLive(_56);
        _56 = move ((_49 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _48 = move _56;
        StorageDead(_56);
        _47 = &_48;
        _168 = discriminant(_49);
        StorageDead(_49);
        StorageLive(_57);
        StorageLive(_58);
        _144 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _58 = &((*_144).6: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _57 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _58) -> [return: bb31, unwind: bb71];
    }

    bb29: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _55) -> [return: bb30, unwind: bb89];
    }

    bb30: {
        StorageDead(_55);
        StorageDead(_53);
        _178 = discriminant(_49);
        StorageDead(_49);
        goto -> bb63;
    }

    bb31: {
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = const _;
        _62 = &(*_63);
        _61 = _62;
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_57;
        _65 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _66) -> [return: bb32, unwind: bb71];
    }

    bb32: {
        _64 = &(*_65);
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &(*_47);
        _73 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _74) -> [return: bb33, unwind: bb71];
    }

    bb33: {
        StorageDead(_74);
        _72 = ((*_73).1: u64);
        _71 = move _72 as u8 (IntToInt);
        StorageDead(_72);
        _70 = [move _71];
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = move _68 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_68);
        _60 = [move _61, move _64, move _67];
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        _59 = &_60;
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut (*_27);
        _79 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _80) -> [return: bb34, unwind: bb71];
    }

    bb34: {
        _78 = &mut (*_79);
        StorageDead(_80);
        StorageLive(_81);
        _81 = ((*_18).0: u64);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &mut (*_37);
        _83 = <RefMut<'_, referral::ReferrerTokenState> as DerefMut>::deref_mut(move _84) -> [return: bb35, unwind: bb71];
    }

    bb35: {
        _82 = &mut (*_83);
        StorageDead(_84);
        _77 = lending_operations::withdraw_referrer_fees(move _78, move _81, move _82) -> [return: bb36, unwind: bb71];
    }

    bb36: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_78);
        _76 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _77) -> [return: bb37, unwind: bb71];
    }

    bb37: {
        StorageDead(_77);
        _85 = discriminant(_76);
        switchInt(move _85) -> [0: bb38, 1: bb39, otherwise: bb6];
    }

    bb38: {
        StorageLive(_89);
        _89 = ((_76 as Continue).0: u64);
        _75 = _89;
        StorageDead(_89);
        _170 = discriminant(_76);
        StorageDead(_83);
        StorageDead(_79);
        StorageDead(_76);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _136 = const _;
        _100 = &(*_136);
        _99 = &(*_100);
        _98 = move _99 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_75;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _107) -> [return: bb41, unwind: bb71];
    }

    bb39: {
        StorageLive(_86);
        _86 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_88);
        _88 = move _86;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _88) -> [return: bb40, unwind: bb88];
    }

    bb40: {
        StorageDead(_88);
        StorageDead(_86);
        _176 = discriminant(_76);
        StorageDead(_83);
        StorageDead(_79);
        StorageDead(_76);
        goto -> bb62;
    }

    bb41: {
        StorageDead(_107);
        _105 = [move _106];
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_103);
        _97 = Arguments::<'_>::new_v1(move _98, move _102) -> [return: bb42, unwind: bb71];
    }

    bb42: {
        StorageDead(_102);
        StorageDead(_98);
        _96 = format(move _97) -> [return: bb43, unwind: bb71];
    }

    bb43: {
        StorageDead(_97);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        _95 = move _96;
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <std::string::String as Deref>::deref(move _93) -> [return: bb44, unwind: bb70];
    }

    bb44: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb45, unwind: bb70];
    }

    bb45: {
        StorageDead(_91);
        drop(_95) -> [return: bb46, unwind: bb71];
    }

    bb46: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _145 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _113 = &((*_145).8: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _112 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _113) -> [return: bb47, unwind: bb71];
    }

    bb47: {
        _159 = const true;
        StorageDead(_113);
        StorageLive(_114);
        StorageLive(_115);
        _146 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _147 = deref_copy ((*_146).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _197 = (((_147.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _115 = &(*_197);
        _114 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _115) -> [return: bb48, unwind: bb87];
    }

    bb48: {
        _158 = const true;
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        _148 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _149 = deref_copy ((*_148).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _198 = (((_149.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _117 = &(*_198);
        _116 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _117) -> [return: bb49, unwind: bb85];
    }

    bb49: {
        _157 = const true;
        StorageDead(_117);
        StorageLive(_118);
        StorageLive(_119);
        _150 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _151 = deref_copy ((*_150).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _199 = (((_151.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _119 = &(*_199);
        _118 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _119) -> [return: bb50, unwind: bb83];
    }

    bb50: {
        _156 = const true;
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        _152 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _121 = &((*_152).7: anchor_lang::prelude::AccountInfo<'_>);
        _120 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _121) -> [return: bb51, unwind: bb81];
    }

    bb51: {
        _155 = const true;
        StorageDead(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_59);
        _122 = move _123 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_123);
        StorageLive(_124);
        _124 = _75;
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _153 = deref_copy (_1.1: &mut handlers::handler_withdraw_referrer_fees::WithdrawReferrerFees<'_>);
        _154 = deref_copy ((*_153).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _200 = (((_154.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _129 = &(*_200);
        _128 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _129) -> [return: bb52, unwind: bb79];
    }

    bb52: {
        _127 = &(*_128);
        _126 = <anchor_spl::token_interface::Mint as Deref>::deref(move _127) -> [return: bb53, unwind: bb79];
    }

    bb53: {
        StorageDead(_129);
        StorageDead(_127);
        _125 = ((*_126).2: u8);
        _159 = const false;
        _158 = const false;
        _157 = const false;
        _156 = const false;
        _155 = const false;
        _111 = withdraw_fees_from_reserve(move _112, move _114, move _116, move _118, move _120, move _122, move _124, move _125) -> [return: bb54, unwind: bb79];
    }

    bb54: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        _155 = const false;
        StorageDead(_120);
        _156 = const false;
        StorageDead(_118);
        _157 = const false;
        StorageDead(_116);
        _158 = const false;
        StorageDead(_114);
        _159 = const false;
        StorageDead(_112);
        _110 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _111) -> [return: bb55, unwind: bb71];
    }

    bb55: {
        StorageDead(_111);
        _130 = discriminant(_110);
        switchInt(move _130) -> [0: bb56, 1: bb57, otherwise: bb6];
    }

    bb56: {
        StorageLive(_134);
        _134 = ((_110 as Continue).0: ());
        _109 = _134;
        StorageDead(_134);
        _172 = discriminant(_110);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_135);
        _135 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _135);
        StorageDead(_135);
        StorageDead(_75);
        StorageDead(_70);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        drop(_48) -> [return: bb59, unwind: bb72];
    }

    bb57: {
        StorageLive(_131);
        _131 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_133);
        _133 = move _131;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _133) -> [return: bb58, unwind: bb77];
    }

    bb58: {
        StorageDead(_133);
        StorageDead(_131);
        _174 = discriminant(_110);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb62;
    }

    bb59: {
        StorageDead(_48);
        StorageDead(_47);
        drop(_38) -> [return: bb60, unwind: bb73];
    }

    bb60: {
        StorageDead(_38);
        StorageDead(_37);
        drop(_28) -> [return: bb61, unwind: bb76];
    }

    bb61: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb69;
    }

    bb62: {
        StorageDead(_75);
        StorageDead(_70);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        drop(_48) -> [return: bb63, unwind: bb72];
    }

    bb63: {
        StorageDead(_48);
        StorageDead(_47);
        drop(_38) -> [return: bb64, unwind: bb73];
    }

    bb64: {
        StorageDead(_38);
        StorageDead(_37);
        drop(_28) -> [return: bb65, unwind: bb76];
    }

    bb65: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb69;
    }

    bb67: {
        StorageDead(_11);
        StorageDead(_10);
        drop(_7) -> [return: bb68, unwind: bb76];
    }

    bb68: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb69;
    }

    bb69: {
        return;
    }

    bb70 (cleanup): {
        drop(_95) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_48) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_38) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_28) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_11) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_7) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        resume;
    }

    bb77 (cleanup): {
        _188 = discriminant(_110);
        goto -> bb71;
    }

    bb78 (cleanup): {
        drop(_120) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_155) -> [0: bb81, otherwise: bb78];
    }

    bb80 (cleanup): {
        drop(_118) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_156) -> [0: bb83, otherwise: bb80];
    }

    bb82 (cleanup): {
        drop(_116) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_157) -> [0: bb85, otherwise: bb82];
    }

    bb84 (cleanup): {
        drop(_114) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_158) -> [0: bb87, otherwise: bb84];
    }

    bb86 (cleanup): {
        drop(_112) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_159) -> [0: bb71, otherwise: bb86];
    }

    bb88 (cleanup): {
        _189 = discriminant(_76);
        goto -> bb71;
    }

    bb89 (cleanup): {
        _190 = discriminant(_49);
        goto -> bb72;
    }

    bb90 (cleanup): {
        _191 = discriminant(_39);
        goto -> bb73;
    }

    bb91 (cleanup): {
        _192 = discriminant(_29);
        goto -> bb76;
    }

    bb92 (cleanup): {
        _193 = discriminant(_20);
        goto -> bb76;
    }

    bb93 (cleanup): {
        _194 = discriminant(_3);
        goto -> bb74;
    }
}
