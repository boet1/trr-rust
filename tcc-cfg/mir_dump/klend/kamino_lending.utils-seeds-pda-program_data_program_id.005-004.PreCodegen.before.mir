// MIR for `program_data_program_id` before PreCodegen

fn program_data_program_id(_1: &anchor_lang::prelude::Pubkey) -> anchor_lang::prelude::Pubkey {
    debug program_id => _1;
    let mut _0: anchor_lang::prelude::Pubkey;
    let mut _2: (anchor_lang::prelude::Pubkey, u8);
    let mut _3: &[&[u8]];
    let mut _4: &[&[u8]; 1];
    let _5: &[&[u8]; 1];
    let _6: [&[u8]; 1];
    let mut _7: &[u8];
    let _8: &[u8];
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: &anchor_lang::prelude::Pubkey;
    let _12: anchor_lang::prelude::Pubkey;
    let mut _13: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        _8 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = [move _7];
        StorageDead(_7);
        _5 = &_6;
        _4 = &(*_5);
        _3 = move _4 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_4);
        StorageLive(_10);
        StorageLive(_11);
        _13 = const _;
        _11 = &(*_13);
        _10 = &(*_11);
        _2 = anchor_lang::prelude::Pubkey::find_program_address(move _3, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_3);
        _0 = (_2.0: anchor_lang::prelude::Pubkey);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}
