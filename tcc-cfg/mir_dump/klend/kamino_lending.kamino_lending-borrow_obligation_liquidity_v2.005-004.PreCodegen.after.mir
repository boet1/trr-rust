// MIR for `kamino_lending::borrow_obligation_liquidity_v2` after PreCodegen

fn kamino_lending::borrow_obligation_liquidity_v2(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityV2<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let mut _13: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityV2<'_>>;
    let mut _14: u64;
    let mut _15: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityV2<'_>;
    let mut _16: isize;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _15 = deref_copy (_1.1: &mut handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidityV2<'_>);
        _7 = &(((*_15).0: handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _6 = &(*_7);
        _5 = utils::constraints::emergency_mode_disabled(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _16 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        _13 = move _1;
        StorageLive(_14);
        _14 = _2;
        _0 = handlers::handler_borrow_obligation_liquidity::process_v2(move _13, move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _18 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _20 = discriminant(_4);
        goto -> bb9;
    }
}
