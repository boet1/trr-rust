// MIR for `is_default_array` before PreCodegen

fn is_default_array(_1: &[T]) -> bool {
    debug array => _1;
    let mut _0: bool;
    let _2: T;
    let mut _3: &mut std::slice::Iter<'_, T>;
    let mut _4: std::slice::Iter<'_, T>;
    let mut _5: &[T];
    let mut _6: {closure@programs\klend\src\utils\accounts.rs:30:22: 30:31};
    let mut _7: &T;
    scope 1 {
        debug default_value => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = <T as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = core::slice::<impl [T]>::iter(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = &mut _4;
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_2;
        _6 = {closure@programs\klend\src\utils\accounts.rs:30:22: 30:31} { default_value: move _7 };
        StorageDead(_7);
        _0 = <std::slice::Iter<'_, T> as Iterator>::all::<{closure@programs\klend\src\utils\accounts.rs:30:22: 30:31}>(move _3, move _6) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_3);
        drop(_2) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_2);
        StorageDead(_4);
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}
