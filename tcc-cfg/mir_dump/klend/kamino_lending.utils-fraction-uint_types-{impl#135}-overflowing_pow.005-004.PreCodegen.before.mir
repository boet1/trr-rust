// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_pow` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_pow(_1: uint_types::U128, _2: uint_types::U128) -> (uint_types::U128, bool) {
    debug self => _1;
    debug expon => _2;
    let mut _0: (utils::fraction::uint_types::U128, bool);
    let _3: ();
    let mut _4: bool;
    let mut _5: &utils::fraction::uint_types::U128;
    let mut _6: !;
    let mut _7: utils::fraction::uint_types::U128;
    let _8: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1020:19: 1020:30};
    let _14: ();
    let mut _15: ();
    let mut _16: bool;
    let mut _17: &utils::fraction::uint_types::U128;
    let mut _18: &utils::fraction::uint_types::U128;
    let mut _19: bool;
    let mut _20: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1020:19: 1020:30};
    let mut _21: (&utils::fraction::uint_types::U128,);
    let mut _22: &utils::fraction::uint_types::U128;
    let _23: &utils::fraction::uint_types::U128;
    let mut _24: utils::fraction::uint_types::U128;
    let mut _27: (utils::fraction::uint_types::U128, bool);
    let mut _28: utils::fraction::uint_types::U128;
    let mut _29: utils::fraction::uint_types::U128;
    let mut _30: bool;
    let mut _31: utils::fraction::uint_types::U128;
    let mut _32: utils::fraction::uint_types::U128;
    let mut _33: utils::fraction::uint_types::U128;
    let mut _36: (utils::fraction::uint_types::U128, bool);
    let mut _37: utils::fraction::uint_types::U128;
    let mut _38: utils::fraction::uint_types::U128;
    let mut _39: bool;
    let mut _40: utils::fraction::uint_types::U128;
    let mut _43: (utils::fraction::uint_types::U128, bool);
    let mut _44: utils::fraction::uint_types::U128;
    let mut _45: utils::fraction::uint_types::U128;
    let mut _46: bool;
    let mut _47: utils::fraction::uint_types::U128;
    let mut _48: utils::fraction::uint_types::U128;
    let mut _49: utils::fraction::uint_types::U128;
    let mut _50: utils::fraction::uint_types::U128;
    let mut _51: !;
    let _52: ();
    let mut _53: !;
    let mut _57: (utils::fraction::uint_types::U128, bool);
    let mut _58: utils::fraction::uint_types::U128;
    let mut _59: utils::fraction::uint_types::U128;
    let mut _60: bool;
    let mut _61: utils::fraction::uint_types::U128;
    let mut _62: bool;
    scope 1 {
        debug is_even => _8;
        let _9: utils::fraction::uint_types::U128;
        scope 2 {
            debug u_one => _9;
            let mut _10: utils::fraction::uint_types::U128;
            scope 3 {
                debug y => _10;
                let mut _11: utils::fraction::uint_types::U128;
                scope 4 {
                    debug n => _11;
                    let mut _12: utils::fraction::uint_types::U128;
                    scope 5 {
                        debug x => _12;
                        let mut _13: bool;
                        scope 6 {
                            debug overflow => _13;
                            let _25: utils::fraction::uint_types::U128;
                            let _26: bool;
                            let _34: utils::fraction::uint_types::U128;
                            let _35: bool;
                            let _41: utils::fraction::uint_types::U128;
                            let _42: bool;
                            let _54: utils::fraction::uint_types::U128;
                            let _55: utils::fraction::uint_types::U128;
                            let _56: bool;
                            scope 7 {
                                debug overflow_x => _25;
                                debug overflow_overflow => _26;
                            }
                            scope 8 {
                                debug overflow_x => _34;
                                debug overflow_overflow => _35;
                            }
                            scope 9 {
                                debug overflow_x => _41;
                                debug overflow_overflow => _42;
                            }
                            scope 10 {
                                debug res => _54;
                            }
                            scope 11 {
                                debug overflow_x => _55;
                                debug overflow_overflow => _56;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_2;
        _4 = uint_types::U128::is_zero(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        _7 = uint_types::U128::one() -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = (move _7, const false);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb21;
    }

    bb4: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_8);
        _8 = {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1020:19: 1020:30};
        StorageLive(_9);
        _9 = uint_types::U128::one() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_10);
        _10 = _9;
        StorageLive(_11);
        _11 = _2;
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        _13 = const false;
        StorageLive(_14);
        goto -> bb6;
    }

    bb6: {
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_11;
        StorageLive(_18);
        _18 = &_9;
        _16 = <uint_types::U128 as PartialOrd>::gt(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _16) -> [0: bb19, otherwise: bb8];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_8;
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_11;
        _22 = &(*_23);
        _21 = (move _22,);
        _19 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1020:19: 1020:30} as Fn<(&uint_types::U128,)>>::call(move _20, move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _19) -> [0: bb13, otherwise: bb10];
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_24);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _12;
        StorageLive(_29);
        _29 = _12;
        _27 = uint_types::U128::overflowing_mul(move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_25);
        _25 = (_27.0: utils::fraction::uint_types::U128);
        StorageLive(_26);
        _26 = (_27.1: bool);
        StorageDead(_27);
        StorageLive(_30);
        _30 = _26;
        _13 = BitOr(_13, move _30);
        StorageDead(_30);
        _24 = _25;
        StorageDead(_26);
        StorageDead(_25);
        _12 = move _24;
        StorageDead(_24);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _11;
        _31 = <uint_types::U128 as Shr<usize>>::shr(move _32, const 1_usize) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_32);
        _11 = move _31;
        StorageDead(_31);
        _15 = const ();
        goto -> bb18;
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_33);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _12;
        StorageLive(_38);
        _38 = _10;
        _36 = uint_types::U128::overflowing_mul(move _37, move _38) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_34);
        _34 = (_36.0: utils::fraction::uint_types::U128);
        StorageLive(_35);
        _35 = (_36.1: bool);
        StorageDead(_36);
        StorageLive(_39);
        _39 = _35;
        _13 = BitOr(_13, move _39);
        StorageDead(_39);
        _33 = _34;
        StorageDead(_35);
        StorageDead(_34);
        _10 = move _33;
        StorageDead(_33);
        StorageLive(_40);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _12;
        StorageLive(_45);
        _45 = _12;
        _43 = uint_types::U128::overflowing_mul(move _44, move _45) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_41);
        _41 = (_43.0: utils::fraction::uint_types::U128);
        StorageLive(_42);
        _42 = (_43.1: bool);
        StorageDead(_43);
        StorageLive(_46);
        _46 = _42;
        _13 = BitOr(_13, move _46);
        StorageDead(_46);
        _40 = _41;
        StorageDead(_42);
        StorageDead(_41);
        _12 = move _40;
        StorageDead(_40);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _11;
        StorageLive(_50);
        _50 = _9;
        _48 = <uint_types::U128 as Sub>::sub(move _49, move _50) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = <uint_types::U128 as Shr<usize>>::shr(move _48, const 1_usize) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_48);
        _11 = move _47;
        StorageDead(_47);
        _15 = const ();
        goto -> bb18;
    }

    bb18: {
        StorageDead(_19);
        StorageDead(_16);
        goto -> bb6;
    }

    bb19: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_52);
        _14 = const ();
        StorageDead(_52);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_54);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _12;
        StorageLive(_59);
        _59 = _10;
        _57 = uint_types::U128::overflowing_mul(move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_55);
        _55 = (_57.0: utils::fraction::uint_types::U128);
        StorageLive(_56);
        _56 = (_57.1: bool);
        StorageDead(_57);
        StorageLive(_60);
        _60 = _56;
        _13 = BitOr(_13, move _60);
        StorageDead(_60);
        _54 = _55;
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_61);
        _61 = _54;
        StorageLive(_62);
        _62 = _13;
        _0 = (move _61, move _62);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_54);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
