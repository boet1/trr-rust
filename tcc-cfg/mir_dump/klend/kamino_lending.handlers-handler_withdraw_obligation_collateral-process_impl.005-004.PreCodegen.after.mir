// MIR for `handlers::handler_withdraw_obligation_collateral::process_impl` after PreCodegen

fn handlers::handler_withdraw_obligation_collateral::process_impl(_1: &handlers::handler_withdraw_obligation_collateral::WithdrawObligationCollateral<'_>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug collateral_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: bool;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &state::nested_accounts::WithdrawObligationCollateralAccounts<'_>;
    let _8: &state::nested_accounts::WithdrawObligationCollateralAccounts<'_>;
    let _9: state::nested_accounts::WithdrawObligationCollateralAccounts<'_>;
    let mut _10: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _11: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _12: anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _16: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _18: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _19: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _20: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _21: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _22: anchor_lang::prelude::Signer<'_>;
    let mut _23: &anchor_lang::prelude::Signer<'_>;
    let mut _24: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _25: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _30: ();
    let _31: &anchor_lang::prelude::Clock;
    let _32: anchor_lang::prelude::Clock;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _34: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _39: anchor_lang::prelude::Clock;
    let mut _41: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _43: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _44: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _53: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _61: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _63: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _64: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _71: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _74: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _75: &state::lending_market::LendingMarket;
    let _76: &state::lending_market::LendingMarket;
    let mut _77: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _78: &mut state::reserve::Reserve;
    let mut _79: &mut state::reserve::Reserve;
    let mut _80: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _81: &mut state::obligation::Obligation;
    let mut _82: &mut state::obligation::Obligation;
    let mut _83: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _84: u64;
    let mut _85: u64;
    let mut _86: anchor_lang::prelude::Pubkey;
    let mut _87: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _88: state::types::LtvMaxWithdrawalCheck;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _95: [&[u8]; 3];
    let mut _96: &[u8];
    let mut _97: &[u8];
    let _98: &[u8];
    let mut _99: &[u8];
    let _100: &[u8];
    let mut _101: &anchor_lang::prelude::Pubkey;
    let mut _102: &[u8];
    let mut _103: &[u8; 1];
    let _104: &[u8; 1];
    let _105: [u8; 1];
    let mut _106: u8;
    let mut _107: u64;
    let mut _108: &state::lending_market::LendingMarket;
    let mut _109: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _110: ();
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _112: std::result::Result<(), anchor_lang::error::Error>;
    let mut _113: anchor_lang::prelude::AccountInfo<'_>;
    let mut _114: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _115: anchor_lang::prelude::AccountInfo<'_>;
    let mut _116: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _117: anchor_lang::prelude::AccountInfo<'_>;
    let mut _118: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _119: anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _121: &[&[u8]];
    let mut _122: &[&[u8]; 3];
    let mut _123: u64;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _129: ();
    let mut _130: &str;
    let _131: &str;
    let mut _132: &std::string::String;
    let _133: &std::string::String;
    let _134: std::string::String;
    let mut _136: std::fmt::Arguments<'_>;
    let mut _137: &[&str];
    let mut _138: &[&str; 1];
    let _139: &[&str; 1];
    let _140: [&str; 1];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let mut _142: &[core::fmt::rt::Argument<'_>; 1];
    let _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: [core::fmt::rt::Argument<'_>; 1];
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &u64;
    let _147: &u64;
    let mut _148: bool;
    let mut _149: &state::obligation::Obligation;
    let _150: &state::obligation::Obligation;
    let mut _151: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _152: &state::obligation::Obligation;
    let _153: &state::obligation::Obligation;
    let mut _154: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let _155: ();
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _157: std::result::Result<(), anchor_lang::error::Error>;
    let mut _158: bool;
    let mut _159: &anchor_lang::prelude::Signer<'_>;
    let _160: &anchor_lang::prelude::Signer<'_>;
    let mut _161: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _162: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _168: ();
    let mut _170: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _171: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _216: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug close_obligation => _3;
        let _164: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _167: ();
        scope 38 {
            debug residual => _164;
            scope 39 {
            }
        }
        scope 40 {
            debug val => _167;
            scope 41 {
            }
        }
    }
    scope 2 {
        debug residual => _27;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _30;
        scope 5 {
        }
    }
    scope 6 {
        debug clock => _31;
        let _40: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
        let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _49: std::cell::RefMut<'_, state::reserve::Reserve>;
        scope 11 {
            debug withdraw_reserve => _40;
            let _50: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
            let _56: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _59: std::cell::RefMut<'_, state::obligation::Obligation>;
            scope 16 {
                debug obligation => _50;
                let _60: &mut std::cell::Ref<'_, state::lending_market::LendingMarket>;
                let _66: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _69: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                scope 21 {
                    debug lending_market => _60;
                    let _70: anchor_lang::prelude::Pubkey;
                    scope 26 {
                        debug lending_market_key => _70;
                        let _72: u64;
                        let _90: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _93: u64;
                        scope 27 {
                            debug withdraw_amount => _72;
                            let _94: &[&[u8]; 3];
                            scope 32 {
                                debug authority_signer_seeds => _94;
                                let _125: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _128: ();
                                let _135: std::string::String;
                                let mut _169: &[&str; 1];
                                scope 33 {
                                    debug residual => _125;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _128;
                                    scope 36 {
                                    }
                                }
                                scope 37 {
                                    debug res => _135;
                                }
                            }
                        }
                        scope 28 {
                            debug residual => _90;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _93;
                            scope 31 {
                            }
                        }
                    }
                }
                scope 22 {
                    debug residual => _66;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _69;
                    scope 25 {
                    }
                }
            }
            scope 17 {
                debug residual => _56;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _59;
                scope 20 {
                }
            }
        }
        scope 12 {
            debug residual => _46;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _49;
            scope 15 {
            }
        }
    }
    scope 7 {
        debug residual => _36;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _39;
        scope 10 {
        }
    }

    bb0: {
        _174 = const false;
        _173 = const false;
        _172 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _10 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as Clone>::clone(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _12 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _14 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as Clone>::clone(move _15) -> [return: bb3, unwind: bb93];
    }

    bb3: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _16 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as Clone>::clone(move _17) -> [return: bb4, unwind: bb93];
    }

    bb4: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _18 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _19) -> [return: bb5, unwind: bb93];
    }

    bb5: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _20 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _21) -> [return: bb6, unwind: bb92];
    }

    bb6: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _22 = <anchor_lang::prelude::Signer<'_> as Clone>::clone(move _23) -> [return: bb7, unwind: bb91];
    }

    bb7: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).7: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _24 = <anchor_lang::prelude::Program<'_, Token> as Clone>::clone(move _25) -> [return: bb8, unwind: bb91];
    }

    bb8: {
        StorageDead(_25);
        _9 = nested_accounts::WithdrawObligationCollateralAccounts::<'_> { reserve_source_collateral: move _18, user_destination_collateral: move _20, withdraw_reserve: move _14, obligation: move _16, lending_market: move _10, lending_market_authority: move _12, obligation_owner: move _22, token_program: move _24 };
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        _8 = &_9;
        _7 = &(*_8);
        _6 = withdraw_obligation_collateral_checks(move _7) -> [return: bb9, unwind: bb90];
    }

    bb9: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb10, unwind: bb90];
    }

    bb10: {
        StorageDead(_6);
        _26 = discriminant(_5);
        switchInt(move _26) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_30);
        _30 = ((_5 as Continue).0: ());
        _4 = _30;
        StorageDead(_30);
        _175 = discriminant(_5);
        drop(_9) -> [return: bb15, unwind: bb94];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_27);
        _27 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _29) -> [return: bb14, unwind: bb108];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_27);
        _205 = discriminant(_5);
        drop(_9) -> [return: bb83, unwind: bb94];
    }

    bb15: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb16, unwind continue];
    }

    bb16: {
        _33 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _34) -> [return: bb17, unwind: bb94];
    }

    bb17: {
        StorageDead(_34);
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb18, 1: bb19, otherwise: bb12];
    }

    bb18: {
        StorageLive(_39);
        _39 = move ((_33 as Continue).0: anchor_lang::prelude::Clock);
        _32 = move _39;
        StorageDead(_39);
        _31 = &_32;
        _177 = discriminant(_33);
        StorageDead(_33);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _43 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _44) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_36);
        _36 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _38) -> [return: bb20, unwind: bb107];
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_36);
        _203 = discriminant(_33);
        StorageDead(_33);
        goto -> bb82;
    }

    bb21: {
        StorageDead(_44);
        _42 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _43) -> [return: bb22, unwind: bb94];
    }

    bb22: {
        StorageDead(_43);
        _45 = discriminant(_42);
        switchInt(move _45) -> [0: bb23, 1: bb24, otherwise: bb12];
    }

    bb23: {
        StorageLive(_49);
        _49 = move ((_42 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _41 = move _49;
        StorageDead(_49);
        _40 = &mut _41;
        _179 = discriminant(_42);
        StorageDead(_42);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _53 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _54) -> [return: bb26, unwind: bb89];
    }

    bb24: {
        StorageLive(_46);
        _46 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb25, unwind: bb106];
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_46);
        _201 = discriminant(_42);
        StorageDead(_42);
        goto -> bb81;
    }

    bb26: {
        StorageDead(_54);
        _52 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb27, unwind: bb89];
    }

    bb27: {
        StorageDead(_53);
        _55 = discriminant(_52);
        switchInt(move _55) -> [0: bb28, 1: bb29, otherwise: bb12];
    }

    bb28: {
        StorageLive(_59);
        _59 = move ((_52 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _51 = move _59;
        StorageDead(_59);
        _50 = &mut _51;
        _181 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _63 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _64) -> [return: bb31, unwind: bb88];
    }

    bb29: {
        StorageLive(_56);
        _56 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _58) -> [return: bb30, unwind: bb105];
    }

    bb30: {
        StorageDead(_58);
        StorageDead(_56);
        _199 = discriminant(_52);
        StorageDead(_52);
        goto -> bb80;
    }

    bb31: {
        StorageDead(_64);
        _62 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _63) -> [return: bb32, unwind: bb88];
    }

    bb32: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb33, 1: bb34, otherwise: bb12];
    }

    bb33: {
        StorageLive(_69);
        _69 = move ((_62 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _61 = move _69;
        StorageDead(_69);
        _60 = &mut _61;
        _183 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _70 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _71) -> [return: bb36, unwind: bb87];
    }

    bb34: {
        StorageLive(_66);
        _66 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_68);
        _68 = move _66;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _68) -> [return: bb35, unwind: bb104];
    }

    bb35: {
        StorageDead(_68);
        StorageDead(_66);
        _197 = discriminant(_62);
        StorageDead(_62);
        goto -> bb79;
    }

    bb36: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_60);
        _76 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _77) -> [return: bb37, unwind: bb87];
    }

    bb37: {
        _75 = &(*_76);
        StorageDead(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut (*_40);
        _79 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _80) -> [return: bb38, unwind: bb87];
    }

    bb38: {
        _78 = &mut (*_79);
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &mut (*_50);
        _82 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _83) -> [return: bb39, unwind: bb87];
    }

    bb39: {
        _81 = &mut (*_82);
        StorageDead(_83);
        StorageLive(_84);
        _84 = _2;
        StorageLive(_85);
        _85 = ((*_31).0: u64);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _86 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _87) -> [return: bb40, unwind: bb87];
    }

    bb40: {
        StorageDead(_87);
        StorageLive(_88);
        _88 = state::types::LtvMaxWithdrawalCheck::MaxLtv;
        _74 = lending_operations::withdraw_obligation_collateral(move _75, move _78, move _81, move _84, move _85, move _86, move _88) -> [return: bb41, unwind: bb87];
    }

    bb41: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        _73 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _74) -> [return: bb42, unwind: bb87];
    }

    bb42: {
        StorageDead(_74);
        _89 = discriminant(_73);
        switchInt(move _89) -> [0: bb43, 1: bb44, otherwise: bb12];
    }

    bb43: {
        StorageLive(_93);
        _93 = ((_73 as Continue).0: u64);
        _72 = _93;
        StorageDead(_93);
        _185 = discriminant(_73);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = const _;
        _97 = &(*_98);
        _96 = _97;
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_70;
        _100 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _101) -> [return: bb46, unwind: bb87];
    }

    bb44: {
        StorageLive(_90);
        _90 = move ((_73 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_92);
        _92 = move _90;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _92) -> [return: bb45, unwind: bb103];
    }

    bb45: {
        StorageDead(_92);
        StorageDead(_90);
        _195 = discriminant(_73);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        goto -> bb78;
    }

    bb46: {
        _99 = &(*_100);
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_60);
        _108 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _109) -> [return: bb47, unwind: bb87];
    }

    bb47: {
        StorageDead(_109);
        _107 = ((*_108).1: u64);
        _106 = move _107 as u8 (IntToInt);
        StorageDead(_107);
        _105 = [move _106];
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_103);
        _95 = [move _96, move _99, move _102];
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        _94 = &_95;
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &((*_1).7: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _113 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _114) -> [return: bb48, unwind: bb87];
    }

    bb48: {
        _174 = const true;
        StorageDead(_114);
        StorageLive(_115);
        StorageLive(_116);
        _170 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _215 = (((_170.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _116 = &(*_215);
        _115 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _116) -> [return: bb49, unwind: bb102];
    }

    bb49: {
        _173 = const true;
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        _171 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _216 = (((_171.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _118 = &(*_216);
        _117 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _118) -> [return: bb50, unwind: bb100];
    }

    bb50: {
        _172 = const true;
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _119 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _120) -> [return: bb51, unwind: bb98];
    }

    bb51: {
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_94);
        _121 = move _122 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_122);
        StorageLive(_123);
        _123 = _72;
        _174 = const false;
        _173 = const false;
        _172 = const false;
        _112 = withdraw_obligation_collateral_transfer(move _113, move _115, move _117, move _119, move _121, move _123) -> [return: bb52, unwind: bb98];
    }

    bb52: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        _172 = const false;
        StorageDead(_117);
        _173 = const false;
        StorageDead(_115);
        _174 = const false;
        StorageDead(_113);
        _111 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb53, unwind: bb87];
    }

    bb53: {
        StorageDead(_112);
        _124 = discriminant(_111);
        switchInt(move _124) -> [0: bb54, 1: bb55, otherwise: bb12];
    }

    bb54: {
        StorageLive(_128);
        _128 = ((_111 as Continue).0: ());
        _110 = _128;
        StorageDead(_128);
        _187 = discriminant(_111);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _169 = const _;
        _139 = &(*_169);
        _138 = &(*_139);
        _137 = move _138 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_72;
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _146) -> [return: bb57, unwind: bb87];
    }

    bb55: {
        StorageLive(_125);
        _125 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _127) -> [return: bb56, unwind: bb96];
    }

    bb56: {
        StorageDead(_127);
        StorageDead(_125);
        _193 = discriminant(_111);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb78;
    }

    bb57: {
        StorageDead(_146);
        _144 = [move _145];
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = move _142 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_142);
        _136 = Arguments::<'_>::new_v1(move _137, move _141) -> [return: bb58, unwind: bb87];
    }

    bb58: {
        StorageDead(_141);
        StorageDead(_137);
        _135 = format(move _136) -> [return: bb59, unwind: bb87];
    }

    bb59: {
        StorageDead(_136);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_139);
        _134 = move _135;
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = <std::string::String as Deref>::deref(move _132) -> [return: bb60, unwind: bb86];
    }

    bb60: {
        _130 = &(*_131);
        StorageDead(_132);
        _129 = solana_program::log::sol_log(move _130) -> [return: bb61, unwind: bb86];
    }

    bb61: {
        StorageDead(_130);
        drop(_134) -> [return: bb62, unwind: bb87];
    }

    bb62: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &(*_50);
        _150 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _151) -> [return: bb63, unwind: bb87];
    }

    bb63: {
        _149 = &(*_150);
        StorageDead(_151);
        _148 = obligation::Obligation::active_deposits_empty(move _149) -> [return: bb64, unwind: bb87];
    }

    bb64: {
        switchInt(move _148) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &(*_50);
        _153 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _154) -> [return: bb67, unwind: bb87];
    }

    bb66: {
        StorageDead(_150);
        StorageDead(_149);
        _3 = const false;
        goto -> bb69;
    }

    bb67: {
        _152 = &(*_153);
        StorageDead(_154);
        _3 = obligation::Obligation::active_borrows_empty(move _152) -> [return: bb68, unwind: bb87];
    }

    bb68: {
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_148);
        StorageDead(_105);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_72);
        StorageDead(_70);
        drop(_61) -> [return: bb70, unwind: bb88];
    }

    bb70: {
        StorageDead(_61);
        StorageDead(_60);
        drop(_51) -> [return: bb71, unwind: bb89];
    }

    bb71: {
        StorageDead(_51);
        StorageDead(_50);
        drop(_41) -> [return: bb72, unwind: bb94];
    }

    bb72: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = _3;
        StorageLive(_159);
        StorageLive(_160);
        _160 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _159 = &(*_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _161 = &(*_162);
        _157 = account_ops::close_account_loader::<obligation::Obligation>(move _158, move _159, move _161) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        _156 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _157) -> [return: bb74, unwind: bb94];
    }

    bb74: {
        StorageDead(_157);
        _163 = discriminant(_156);
        switchInt(move _163) -> [0: bb75, 1: bb76, otherwise: bb12];
    }

    bb75: {
        StorageLive(_167);
        _167 = ((_156 as Continue).0: ());
        _155 = _167;
        StorageDead(_167);
        _189 = discriminant(_156);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_168);
        _168 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _168);
        StorageDead(_168);
        StorageDead(_3);
        goto -> bb85;
    }

    bb76: {
        StorageLive(_164);
        _164 = move ((_156 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_166);
        _166 = move _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _166) -> [return: bb77, unwind: bb95];
    }

    bb77: {
        StorageDead(_166);
        StorageDead(_164);
        _191 = discriminant(_156);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_155);
        goto -> bb84;
    }

    bb78: {
        StorageDead(_72);
        StorageDead(_70);
        drop(_61) -> [return: bb79, unwind: bb88];
    }

    bb79: {
        StorageDead(_61);
        StorageDead(_60);
        drop(_51) -> [return: bb80, unwind: bb89];
    }

    bb80: {
        StorageDead(_51);
        StorageDead(_50);
        drop(_41) -> [return: bb81, unwind: bb94];
    }

    bb81: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb84;
    }

    bb83: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_3);
        goto -> bb85;
    }

    bb85: {
        return;
    }

    bb86 (cleanup): {
        drop(_134) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_61) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_51) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_41) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_9) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_20) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_18) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_12) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        resume;
    }

    bb95 (cleanup): {
        _207 = discriminant(_156);
        goto -> bb94;
    }

    bb96 (cleanup): {
        _208 = discriminant(_111);
        goto -> bb87;
    }

    bb97 (cleanup): {
        drop(_117) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_172) -> [0: bb100, otherwise: bb97];
    }

    bb99 (cleanup): {
        drop(_115) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_173) -> [0: bb102, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_113) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_174) -> [0: bb87, otherwise: bb101];
    }

    bb103 (cleanup): {
        _209 = discriminant(_73);
        goto -> bb87;
    }

    bb104 (cleanup): {
        _210 = discriminant(_62);
        goto -> bb88;
    }

    bb105 (cleanup): {
        _211 = discriminant(_52);
        goto -> bb89;
    }

    bb106 (cleanup): {
        _212 = discriminant(_42);
        goto -> bb94;
    }

    bb107 (cleanup): {
        _213 = discriminant(_33);
        goto -> bb94;
    }

    bb108 (cleanup): {
        _214 = discriminant(_5);
        goto -> bb90;
    }
}
