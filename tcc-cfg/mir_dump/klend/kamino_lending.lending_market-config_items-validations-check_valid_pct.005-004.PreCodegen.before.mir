// MIR for `check_valid_pct` before PreCodegen

fn check_valid_pct(_1: &T) -> std::result::Result<(), anchor_lang::error::Error> {
    debug value => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: &{closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21};
    let _3: {closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21};
    let mut _4: std::ops::RangeInclusive<u128>;
    let mut _5: (&T,);
    let mut _6: &T;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = RangeInclusive::<u128>::new(const 0_u128, const 100_u128) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = check_in_range::<T>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = (move _6,);
        _0 = <{closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21} as Fn<(&T,)>>::call(move _2, move _5) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_3);
        return;
    }

    bb4 (cleanup): {
        resume;
    }
}
