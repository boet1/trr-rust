// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:135:1: 135:28>::fmt` before PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:135:1: 135:28>::fmt(_1: &obligation::Obligation, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _5: std::result::Result<(), std::fmt::Error>;
    let mut _6: &mut std::fmt::Formatter<'_>;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[&str; 5];
    let _10: &[&str; 5];
    let _11: [&str; 5];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let mut _13: &[core::fmt::rt::Argument<'_>; 4];
    let _14: &[core::fmt::rt::Argument<'_>; 4];
    let _15: [core::fmt::rt::Argument<'_>; 4];
    let mut _16: core::fmt::rt::Argument<'_>;
    let mut _17: &utils::fraction::FractionDisplay<'_>;
    let _18: &utils::fraction::FractionDisplay<'_>;
    let _19: utils::fraction::FractionDisplay<'_>;
    let mut _20: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _21: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _22: u128;
    let mut _23: core::fmt::rt::Argument<'_>;
    let mut _24: &utils::fraction::FractionDisplay<'_>;
    let _25: &utils::fraction::FractionDisplay<'_>;
    let _26: utils::fraction::FractionDisplay<'_>;
    let mut _27: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _28: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _29: u128;
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &utils::fraction::FractionDisplay<'_>;
    let _32: &utils::fraction::FractionDisplay<'_>;
    let _33: utils::fraction::FractionDisplay<'_>;
    let mut _34: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _35: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _36: u128;
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: &u16;
    let _39: &u16;
    let _40: u16;
    let mut _41: bool;
    let mut _42: u128;
    let mut _43: std::option::Option<u16>;
    let mut _44: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _45: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _46: &state::obligation::Obligation;
    let mut _47: isize;
    let _48: std::result::Result<std::convert::Infallible, std::fmt::Error>;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, std::fmt::Error>;
    let _51: ();
    let _52: ();
    let mut _53: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>;
    let mut _54: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>;
    let mut _55: &state::obligation::Obligation;
    let mut _56: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>;
    let mut _57: ();
    let _58: ();
    let mut _59: std::option::Option<&state::obligation::ObligationCollateral>;
    let mut _60: &mut std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>;
    let mut _61: &mut std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}>;
    let mut _62: isize;
    let mut _63: !;
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _67: std::result::Result<(), std::fmt::Error>;
    let mut _68: &mut std::fmt::Formatter<'_>;
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let mut _71: &[&str; 3];
    let _72: &[&str; 3];
    let _73: [&str; 3];
    let mut _74: &[core::fmt::rt::Argument<'_>];
    let mut _75: &[core::fmt::rt::Argument<'_>; 3];
    let _76: &[core::fmt::rt::Argument<'_>; 3];
    let _77: [core::fmt::rt::Argument<'_>; 3];
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &anchor_lang::prelude::Pubkey;
    let _80: &anchor_lang::prelude::Pubkey;
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &utils::fraction::FractionDisplay<'_>;
    let _83: &utils::fraction::FractionDisplay<'_>;
    let _84: utils::fraction::FractionDisplay<'_>;
    let mut _85: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _86: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _87: u128;
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &u64;
    let _90: &u64;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, std::fmt::Error>;
    let _96: ();
    let mut _97: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>;
    let mut _98: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>;
    let mut _99: &state::obligation::Obligation;
    let mut _100: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>;
    let _101: ();
    let mut _102: std::option::Option<&state::obligation::ObligationLiquidity>;
    let mut _103: &mut std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>;
    let mut _104: &mut std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}>;
    let mut _105: isize;
    let mut _106: !;
    let _108: ();
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _110: std::result::Result<(), std::fmt::Error>;
    let mut _111: &mut std::fmt::Formatter<'_>;
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let mut _114: &[&str; 3];
    let _115: &[&str; 3];
    let _116: [&str; 3];
    let mut _117: &[core::fmt::rt::Argument<'_>];
    let mut _118: &[core::fmt::rt::Argument<'_>; 3];
    let _119: &[core::fmt::rt::Argument<'_>; 3];
    let _120: [core::fmt::rt::Argument<'_>; 3];
    let mut _121: core::fmt::rt::Argument<'_>;
    let mut _122: &anchor_lang::prelude::Pubkey;
    let _123: &anchor_lang::prelude::Pubkey;
    let mut _124: core::fmt::rt::Argument<'_>;
    let mut _125: &utils::fraction::FractionDisplay<'_>;
    let _126: &utils::fraction::FractionDisplay<'_>;
    let _127: utils::fraction::FractionDisplay<'_>;
    let mut _128: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _129: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _130: &state::obligation::ObligationLiquidity;
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: &u128;
    let _133: &u128;
    let _134: u128;
    let mut _135: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _136: &state::obligation::ObligationLiquidity;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, std::fmt::Error>;
    let mut _142: ();
    let mut _145: &[&str; 5];
    scope 1 {
        debug residual => _48;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _51;
        scope 4 {
        }
    }
    scope 5 {
        debug iter => _56;
        let _64: &state::obligation::ObligationCollateral;
        scope 6 {
            debug collateral => _64;
            let _92: std::result::Result<std::convert::Infallible, std::fmt::Error>;
            let _95: ();
            let mut _143: &[&str; 3];
            scope 7 {
                debug residual => _92;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _95;
                scope 10 {
                }
            }
        }
    }
    scope 11 {
        debug iter => _100;
        let _107: &state::obligation::ObligationLiquidity;
        scope 12 {
            debug liquidity => _107;
            let _138: std::result::Result<std::convert::Infallible, std::fmt::Error>;
            let _141: ();
            let mut _144: &[&str; 3];
            scope 13 {
                debug residual => _138;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _141;
                scope 16 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_2);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _145 = const _;
        _10 = &(*_145);
        _9 = &(*_10);
        _8 = move _9 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_1).6: u128);
        _21 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _22) -> [return: bb1, unwind continue];
    }

    bb1: {
        _20 = &_21;
        StorageDead(_22);
        _19 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_17);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).8: u128);
        _28 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _29) -> [return: bb4, unwind continue];
    }

    bb4: {
        _27 = &_28;
        StorageDead(_29);
        _26 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _27) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_24);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_1).9: u128);
        _35 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _36) -> [return: bb7, unwind continue];
    }

    bb7: {
        _34 = &_35;
        StorageDead(_36);
        _33 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _34) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _31) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_31);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_1).6: u128);
        _41 = Gt(move _42, const 0_u128);
        switchInt(move _41) -> [0: bb14, otherwise: bb10];
    }

    bb10: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_1);
        _45 = obligation::Obligation::loan_to_value(move _46) -> [return: bb11, unwind continue];
    }

    bb11: {
        _44 = &_45;
        StorageDead(_46);
        _43 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_percent::<u16>(move _44) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_44);
        _40 = std::option::Option::<u16>::unwrap(move _43) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_43);
        StorageDead(_45);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_42);
        _40 = const 0_u16;
        goto -> bb15;
    }

    bb15: {
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        _15 = [move _16, move _23, move _30, move _37];
        StorageDead(_37);
        StorageDead(_30);
        StorageDead(_23);
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = move _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_13);
        _7 = Arguments::<'_>::new_v1(move _8, move _12) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_12);
        StorageDead(_8);
        _5 = Formatter::<'_>::write_fmt(move _6, move _7) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<(), std::fmt::Error> as Try>::branch(move _5) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_5);
        _47 = discriminant(_4);
        switchInt(move _47) -> [0: bb20, 1: bb22, otherwise: bb21];
    }

    bb20: {
        StorageLive(_51);
        _51 = ((_4 as Continue).0: ());
        _3 = _51;
        StorageDead(_51);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        _54 = obligation::Obligation::active_deposits(move _55) -> [return: bb24, unwind continue];
    }

    bb21: {
        unreachable;
    }

    bb22: {
        StorageLive(_48);
        _48 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(), std::fmt::Error> as FromResidual<std::result::Result<Infallible, std::fmt::Error>>>::from_residual(move _50) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb60;
    }

    bb24: {
        StorageDead(_55);
        _53 = <Filter<std::slice::Iter<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}> as IntoIterator>::into_iter(move _54) -> [return: bb25, unwind: bb61];
    }

    bb25: {
        StorageDead(_54);
        StorageLive(_56);
        _56 = move _53;
        goto -> bb26;
    }

    bb26: {
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _56;
        _60 = &mut (*_61);
        _59 = <Filter<std::slice::Iter<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:425:37: 425:40}> as Iterator>::next(move _60) -> [return: bb27, unwind: bb61];
    }

    bb27: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb29, 1: bb28, otherwise: bb21];
    }

    bb28: {
        StorageLive(_64);
        _64 = ((_59 as Some).0: &state::obligation::ObligationCollateral);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut (*_2);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _143 = const _;
        _72 = &(*_143);
        _71 = &(*_72);
        _70 = move _71 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((*_64).0: anchor_lang::prelude::Pubkey);
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _79) -> [return: bb30, unwind: bb61];
    }

    bb29: {
        _52 = const ();
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        _98 = obligation::Obligation::active_borrows(move _99) -> [return: bb41, unwind continue];
    }

    bb30: {
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = ((*_64).2: u128);
        _86 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _87) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        _85 = &_86;
        StorageDead(_87);
        _84 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _85) -> [return: bb32, unwind: bb61];
    }

    bb32: {
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _82) -> [return: bb33, unwind: bb61];
    }

    bb33: {
        StorageDead(_82);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &((*_64).1: u64);
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _89) -> [return: bb34, unwind: bb61];
    }

    bb34: {
        StorageDead(_89);
        _77 = [move _78, move _81, move _88];
        StorageDead(_88);
        StorageDead(_81);
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = move _75 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_75);
        _69 = Arguments::<'_>::new_v1(move _70, move _74) -> [return: bb35, unwind: bb61];
    }

    bb35: {
        StorageDead(_74);
        StorageDead(_70);
        _67 = Formatter::<'_>::write_fmt(move _68, move _69) -> [return: bb36, unwind: bb61];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_68);
        _66 = <std::result::Result<(), std::fmt::Error> as Try>::branch(move _67) -> [return: bb37, unwind: bb61];
    }

    bb37: {
        StorageDead(_67);
        _91 = discriminant(_66);
        switchInt(move _91) -> [0: bb38, 1: bb39, otherwise: bb21];
    }

    bb38: {
        StorageLive(_95);
        _95 = ((_66 as Continue).0: ());
        _65 = _95;
        StorageDead(_95);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_66);
        StorageDead(_65);
        _58 = const ();
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        _57 = const ();
        goto -> bb26;
    }

    bb39: {
        StorageLive(_92);
        _92 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), std::fmt::Error> as FromResidual<std::result::Result<Infallible, std::fmt::Error>>>::from_residual(move _94) -> [return: bb40, unwind: bb61];
    }

    bb40: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb60;
    }

    bb41: {
        StorageDead(_99);
        _97 = <Filter<std::slice::Iter<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}> as IntoIterator>::into_iter(move _98) -> [return: bb42, unwind: bb61];
    }

    bb42: {
        StorageDead(_98);
        StorageLive(_100);
        _100 = move _97;
        goto -> bb43;
    }

    bb43: {
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &mut _100;
        _103 = &mut (*_104);
        _102 = <Filter<std::slice::Iter<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:429:36: 429:39}> as Iterator>::next(move _103) -> [return: bb44, unwind: bb61];
    }

    bb44: {
        StorageDead(_103);
        _105 = discriminant(_102);
        switchInt(move _105) -> [0: bb46, 1: bb45, otherwise: bb21];
    }

    bb45: {
        StorageLive(_107);
        _107 = ((_102 as Some).0: &state::obligation::ObligationLiquidity);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &mut (*_2);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _144 = const _;
        _115 = &(*_144);
        _114 = &(*_115);
        _113 = move _114 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_114);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &((*_107).0: anchor_lang::prelude::Pubkey);
        _122 = &(*_123);
        _121 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _122) -> [return: bb47, unwind: bb61];
    }

    bb46: {
        _96 = const ();
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_142);
        _142 = ();
        _0 = std::result::Result::<(), std::fmt::Error>::Ok(move _142);
        StorageDead(_142);
        goto -> bb60;
    }

    bb47: {
        StorageDead(_122);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_107);
        _129 = obligation::ObligationLiquidity::market_value(move _130) -> [return: bb48, unwind: bb61];
    }

    bb48: {
        _128 = &_129;
        StorageDead(_130);
        _127 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _128) -> [return: bb49, unwind: bb61];
    }

    bb49: {
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _125) -> [return: bb50, unwind: bb61];
    }

    bb50: {
        StorageDead(_125);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &(*_107);
        _135 = obligation::ObligationLiquidity::borrowed_amount(move _136) -> [return: bb51, unwind: bb61];
    }

    bb51: {
        StorageDead(_136);
        _134 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_num::<u128>(move _135) -> [return: bb52, unwind: bb61];
    }

    bb52: {
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _132) -> [return: bb53, unwind: bb61];
    }

    bb53: {
        StorageDead(_132);
        _120 = [move _121, move _124, move _131];
        StorageDead(_131);
        StorageDead(_124);
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = move _118 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_118);
        _112 = Arguments::<'_>::new_v1(move _113, move _117) -> [return: bb54, unwind: bb61];
    }

    bb54: {
        StorageDead(_117);
        StorageDead(_113);
        _110 = Formatter::<'_>::write_fmt(move _111, move _112) -> [return: bb55, unwind: bb61];
    }

    bb55: {
        StorageDead(_112);
        StorageDead(_111);
        _109 = <std::result::Result<(), std::fmt::Error> as Try>::branch(move _110) -> [return: bb56, unwind: bb61];
    }

    bb56: {
        StorageDead(_110);
        _137 = discriminant(_109);
        switchInt(move _137) -> [0: bb57, 1: bb58, otherwise: bb21];
    }

    bb57: {
        StorageLive(_141);
        _141 = ((_109 as Continue).0: ());
        _108 = _141;
        StorageDead(_141);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_108);
        _101 = const ();
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        _57 = const ();
        goto -> bb43;
    }

    bb58: {
        StorageLive(_138);
        _138 = ((_109 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(), std::fmt::Error> as FromResidual<std::result::Result<Infallible, std::fmt::Error>>>::from_residual(move _140) -> [return: bb59, unwind: bb61];
    }

    bb59: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb60;
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        resume;
    }
}
