digraph Mir_0_11405 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U256::div_mod_word(_1: u64, _2: u64, _3: u64) -&gt; (u64, u64)<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let _6: ();<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: !;<br align="left"/>let _11: u128;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: u128;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: u32;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: (u128, bool);<br align="left"/>let _20: u128;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: u128;<br align="left"/>let mut _24: u128;<br align="left"/>let mut _25: u128;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: u64;<br align="left"/>let mut _28: u128;<br align="left"/>let mut _29: u128;<br align="left"/>let mut _30: u128;<br align="left"/>let mut _31: bool;<br align="left"/>debug hi =&gt; _1;<br align="left"/>debug lo =&gt; _2;<br align="left"/>debug y =&gt; _3;<br align="left"/>debug x =&gt; _11;<br align="left"/>debug y =&gt; _20;<br align="left"/>>;
    bb0__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = const true<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _1<br/>StorageLive(_9)<br/>_9 = _3<br/>_7 = Lt(move _8, move _9)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb2__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>_6 = const ()<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_10)<br/></td></tr><tr><td align="left">_10 = panic(const &quot;assertion failed: hi &lt; y&quot;)</td></tr></table>>];
    bb4__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _1<br/></td></tr><tr><td align="left">_13 = &lt;u128 as From&lt;u64&gt;&gt;::from(move _14)</td></tr></table>>];
    bb6__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_15 = const 64_i32 as u32 (IntToInt)<br/>_16 = Lt(move _15, const 128_u32)<br/></td></tr><tr><td align="left">assert(move _16, &quot;attempt to shift left by `{}`, which would overflow&quot;, const 64_i32)</td></tr></table>>];
    bb7__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_12 = Shl(move _13, const 64_i32)<br/>StorageDead(_13)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _2<br/></td></tr><tr><td align="left">_17 = &lt;u128 as From&lt;u64&gt;&gt;::from(move _18)</td></tr></table>>];
    bb8__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_19 = CheckedAdd(_12, _17)<br/></td></tr><tr><td align="left">assert(!move (_19.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _12, move _17)</td></tr></table>>];
    bb9__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_11 = move (_19.0: u128)<br/>StorageDead(_17)<br/>StorageDead(_12)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _3<br/></td></tr><tr><td align="left">_20 = &lt;u128 as From&lt;u64&gt;&gt;::from(move _21)</td></tr></table>>];
    bb10__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _11<br/>StorageLive(_25)<br/>_25 = _20<br/>_26 = Eq(_25, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _26, &quot;attempt to divide `{}` by zero&quot;, _24)</td></tr></table>>];
    bb11__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_23 = Div(move _24, move _25)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>_22 = move _23 as u64 (IntToInt)<br/>StorageDead(_23)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _11<br/>StorageLive(_30)<br/>_30 = _20<br/>_31 = Eq(_30, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _31, &quot;attempt to calculate the remainder of `{}` with a divisor of zero&quot;, _29)</td></tr></table>>];
    bb12__0_11405 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_28 = Rem(move _29, move _30)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>_27 = move _28 as u64 (IntToInt)<br/>StorageDead(_28)<br/>_0 = (move _22, move _27)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11405 -> bb4__0_11405 [label="0"];
    bb0__0_11405 -> bb1__0_11405 [label="otherwise"];
    bb1__0_11405 -> bb3__0_11405 [label="0"];
    bb1__0_11405 -> bb2__0_11405 [label="otherwise"];
    bb2__0_11405 -> bb5__0_11405 [label=""];
    bb4__0_11405 -> bb5__0_11405 [label=""];
    bb5__0_11405 -> bb6__0_11405 [label="return"];
    bb6__0_11405 -> bb7__0_11405 [label="success"];
    bb7__0_11405 -> bb8__0_11405 [label="return"];
    bb8__0_11405 -> bb9__0_11405 [label="success"];
    bb9__0_11405 -> bb10__0_11405 [label="return"];
    bb10__0_11405 -> bb11__0_11405 [label="success"];
    bb11__0_11405 -> bb12__0_11405 [label="success"];
}
