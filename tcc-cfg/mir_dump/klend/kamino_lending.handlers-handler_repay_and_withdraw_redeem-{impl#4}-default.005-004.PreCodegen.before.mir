// MIR for `handlers::handler_repay_and_withdraw_redeem::<impl at programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:243:10: 243:18>::default` before PreCodegen

fn handlers::handler_repay_and_withdraw_redeem::<impl at programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:243:10: 243:18>::default() -> RepayAndWithdrawBumps {
    let mut _0: handlers::handler_repay_and_withdraw_redeem::RepayAndWithdrawBumps;
    let mut _1: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityBumps;
    let mut _2: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateralBumps;
    let mut _3: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _4: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;

    bb0: {
        StorageLive(_1);
        _1 = <handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityBumps as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateralBumps as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = RepayAndWithdrawBumps { repay_accounts: move _1, withdraw_accounts: move _2, collateral_farms_accounts: move _3, debt_farms_accounts: move _4 };
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
