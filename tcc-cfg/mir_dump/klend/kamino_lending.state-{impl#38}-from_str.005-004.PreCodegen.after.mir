// MIR for `state::<impl at programs\klend\src\state\mod.rs:199:5: 199:15>::from_str` after PreCodegen

fn state::<impl at programs\klend\src\state\mod.rs:199:5: 199:15>::from_str(_1: &str) -> std::result::Result<state::UpdateLendingMarketMode, strum::ParseError> {
    debug s => _1;
    let mut _0: std::result::Result<state::UpdateLendingMarketMode, strum::ParseError>;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: state::UpdateLendingMarketMode;
    let mut _28: state::UpdateLendingMarketMode;
    let mut _29: state::UpdateLendingMarketMode;
    let mut _30: state::UpdateLendingMarketMode;
    let mut _31: state::UpdateLendingMarketMode;
    let mut _32: state::UpdateLendingMarketMode;
    let mut _33: state::UpdateLendingMarketMode;
    let mut _34: state::UpdateLendingMarketMode;
    let mut _35: state::UpdateLendingMarketMode;
    let mut _36: state::UpdateLendingMarketMode;
    let mut _37: state::UpdateLendingMarketMode;
    let mut _38: state::UpdateLendingMarketMode;
    let mut _39: state::UpdateLendingMarketMode;
    let mut _40: state::UpdateLendingMarketMode;
    let mut _41: state::UpdateLendingMarketMode;
    let mut _42: state::UpdateLendingMarketMode;
    let mut _43: state::UpdateLendingMarketMode;
    let mut _44: state::UpdateLendingMarketMode;
    let mut _45: state::UpdateLendingMarketMode;
    let mut _46: state::UpdateLendingMarketMode;
    let mut _47: state::UpdateLendingMarketMode;
    let mut _48: state::UpdateLendingMarketMode;
    let mut _49: state::UpdateLendingMarketMode;
    let mut _50: state::UpdateLendingMarketMode;
    let mut _51: state::UpdateLendingMarketMode;
    let mut _52: strum::ParseError;

    bb0: {
        _2 = <str as PartialEq>::eq(_1, const "UpdateOwner") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb51];
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "UpdateEmergencyMode") -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb52];
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_1, const "UpdateLiquidationCloseFactor") -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _4) -> [0: bb6, otherwise: bb53];
    }

    bb6: {
        _5 = <str as PartialEq>::eq(_1, const "UpdateLiquidationMaxValue") -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _5) -> [0: bb8, otherwise: bb54];
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_1, const "DeprecatedUpdateGlobalUnhealthyBorrow") -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _6) -> [0: bb10, otherwise: bb55];
    }

    bb10: {
        _7 = <str as PartialEq>::eq(_1, const "UpdateGlobalAllowedBorrow") -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _7) -> [0: bb12, otherwise: bb56];
    }

    bb12: {
        _8 = <str as PartialEq>::eq(_1, const "UpdateRiskCouncil") -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _8) -> [0: bb14, otherwise: bb57];
    }

    bb14: {
        _9 = <str as PartialEq>::eq(_1, const "UpdateMinFullLiquidationThreshold") -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _9) -> [0: bb16, otherwise: bb58];
    }

    bb16: {
        _10 = <str as PartialEq>::eq(_1, const "UpdateInsolvencyRiskLtv") -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _10) -> [0: bb18, otherwise: bb59];
    }

    bb18: {
        _11 = <str as PartialEq>::eq(_1, const "UpdateElevationGroup") -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _11) -> [0: bb20, otherwise: bb60];
    }

    bb20: {
        _12 = <str as PartialEq>::eq(_1, const "UpdateReferralFeeBps") -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _12) -> [0: bb22, otherwise: bb61];
    }

    bb22: {
        _13 = <str as PartialEq>::eq(_1, const "DeprecatedUpdateMultiplierPoints") -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _13) -> [0: bb24, otherwise: bb62];
    }

    bb24: {
        _14 = <str as PartialEq>::eq(_1, const "UpdatePriceRefreshTriggerToMaxAgePct") -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _14) -> [0: bb26, otherwise: bb63];
    }

    bb26: {
        _15 = <str as PartialEq>::eq(_1, const "UpdateAutodeleverageEnabled") -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _15) -> [0: bb28, otherwise: bb64];
    }

    bb28: {
        _16 = <str as PartialEq>::eq(_1, const "UpdateBorrowingDisabled") -> [return: bb29, unwind continue];
    }

    bb29: {
        switchInt(move _16) -> [0: bb30, otherwise: bb65];
    }

    bb30: {
        _17 = <str as PartialEq>::eq(_1, const "UpdateMinNetValueObligationPostAction") -> [return: bb31, unwind continue];
    }

    bb31: {
        switchInt(move _17) -> [0: bb32, otherwise: bb66];
    }

    bb32: {
        _18 = <str as PartialEq>::eq(_1, const "UpdateMinValueLtvSkipPriorityLiqCheck") -> [return: bb33, unwind continue];
    }

    bb33: {
        switchInt(move _18) -> [0: bb34, otherwise: bb67];
    }

    bb34: {
        _19 = <str as PartialEq>::eq(_1, const "UpdateMinValueBfSkipPriorityLiqCheck") -> [return: bb35, unwind continue];
    }

    bb35: {
        switchInt(move _19) -> [0: bb36, otherwise: bb68];
    }

    bb36: {
        _20 = <str as PartialEq>::eq(_1, const "UpdatePaddingFields") -> [return: bb37, unwind continue];
    }

    bb37: {
        switchInt(move _20) -> [0: bb38, otherwise: bb69];
    }

    bb38: {
        _21 = <str as PartialEq>::eq(_1, const "UpdateName") -> [return: bb39, unwind continue];
    }

    bb39: {
        switchInt(move _21) -> [0: bb40, otherwise: bb70];
    }

    bb40: {
        _22 = <str as PartialEq>::eq(_1, const "UpdateIndividualAutodeleverageMarginCallPeriodSecs") -> [return: bb41, unwind continue];
    }

    bb41: {
        switchInt(move _22) -> [0: bb42, otherwise: bb71];
    }

    bb42: {
        _23 = <str as PartialEq>::eq(_1, const "UpdateInitialDepositAmount") -> [return: bb43, unwind continue];
    }

    bb43: {
        switchInt(move _23) -> [0: bb44, otherwise: bb72];
    }

    bb44: {
        _24 = <str as PartialEq>::eq(_1, const "UpdateObligationOrderExecutionEnabled") -> [return: bb45, unwind continue];
    }

    bb45: {
        switchInt(move _24) -> [0: bb46, otherwise: bb73];
    }

    bb46: {
        _25 = <str as PartialEq>::eq(_1, const "UpdateImmutableFlag") -> [return: bb47, unwind continue];
    }

    bb47: {
        switchInt(move _25) -> [0: bb48, otherwise: bb74];
    }

    bb48: {
        _26 = <str as PartialEq>::eq(_1, const "UpdateObligationOrderCreationEnabled") -> [return: bb49, unwind continue];
    }

    bb49: {
        switchInt(move _26) -> [0: bb50, otherwise: bb75];
    }

    bb50: {
        StorageLive(_52);
        _52 = VariantNotFound;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Err(move _52);
        StorageDead(_52);
        goto -> bb76;
    }

    bb51: {
        StorageLive(_27);
        _27 = state::UpdateLendingMarketMode::UpdateOwner;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _27);
        StorageDead(_27);
        goto -> bb76;
    }

    bb52: {
        StorageLive(_28);
        _28 = state::UpdateLendingMarketMode::UpdateEmergencyMode;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _28);
        StorageDead(_28);
        goto -> bb76;
    }

    bb53: {
        StorageLive(_29);
        _29 = state::UpdateLendingMarketMode::UpdateLiquidationCloseFactor;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _29);
        StorageDead(_29);
        goto -> bb76;
    }

    bb54: {
        StorageLive(_30);
        _30 = state::UpdateLendingMarketMode::UpdateLiquidationMaxValue;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _30);
        StorageDead(_30);
        goto -> bb76;
    }

    bb55: {
        StorageLive(_31);
        _31 = state::UpdateLendingMarketMode::DeprecatedUpdateGlobalUnhealthyBorrow;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _31);
        StorageDead(_31);
        goto -> bb76;
    }

    bb56: {
        StorageLive(_32);
        _32 = state::UpdateLendingMarketMode::UpdateGlobalAllowedBorrow;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _32);
        StorageDead(_32);
        goto -> bb76;
    }

    bb57: {
        StorageLive(_33);
        _33 = state::UpdateLendingMarketMode::UpdateRiskCouncil;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _33);
        StorageDead(_33);
        goto -> bb76;
    }

    bb58: {
        StorageLive(_34);
        _34 = state::UpdateLendingMarketMode::UpdateMinFullLiquidationThreshold;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _34);
        StorageDead(_34);
        goto -> bb76;
    }

    bb59: {
        StorageLive(_35);
        _35 = state::UpdateLendingMarketMode::UpdateInsolvencyRiskLtv;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _35);
        StorageDead(_35);
        goto -> bb76;
    }

    bb60: {
        StorageLive(_36);
        _36 = state::UpdateLendingMarketMode::UpdateElevationGroup;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _36);
        StorageDead(_36);
        goto -> bb76;
    }

    bb61: {
        StorageLive(_37);
        _37 = state::UpdateLendingMarketMode::UpdateReferralFeeBps;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _37);
        StorageDead(_37);
        goto -> bb76;
    }

    bb62: {
        StorageLive(_38);
        _38 = state::UpdateLendingMarketMode::DeprecatedUpdateMultiplierPoints;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _38);
        StorageDead(_38);
        goto -> bb76;
    }

    bb63: {
        StorageLive(_39);
        _39 = state::UpdateLendingMarketMode::UpdatePriceRefreshTriggerToMaxAgePct;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _39);
        StorageDead(_39);
        goto -> bb76;
    }

    bb64: {
        StorageLive(_40);
        _40 = state::UpdateLendingMarketMode::UpdateAutodeleverageEnabled;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _40);
        StorageDead(_40);
        goto -> bb76;
    }

    bb65: {
        StorageLive(_41);
        _41 = state::UpdateLendingMarketMode::UpdateBorrowingDisabled;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _41);
        StorageDead(_41);
        goto -> bb76;
    }

    bb66: {
        StorageLive(_42);
        _42 = state::UpdateLendingMarketMode::UpdateMinNetValueObligationPostAction;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _42);
        StorageDead(_42);
        goto -> bb76;
    }

    bb67: {
        StorageLive(_43);
        _43 = state::UpdateLendingMarketMode::UpdateMinValueLtvSkipPriorityLiqCheck;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _43);
        StorageDead(_43);
        goto -> bb76;
    }

    bb68: {
        StorageLive(_44);
        _44 = state::UpdateLendingMarketMode::UpdateMinValueBfSkipPriorityLiqCheck;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _44);
        StorageDead(_44);
        goto -> bb76;
    }

    bb69: {
        StorageLive(_45);
        _45 = state::UpdateLendingMarketMode::UpdatePaddingFields;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _45);
        StorageDead(_45);
        goto -> bb76;
    }

    bb70: {
        StorageLive(_46);
        _46 = state::UpdateLendingMarketMode::UpdateName;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _46);
        StorageDead(_46);
        goto -> bb76;
    }

    bb71: {
        StorageLive(_47);
        _47 = state::UpdateLendingMarketMode::UpdateIndividualAutodeleverageMarginCallPeriodSecs;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _47);
        StorageDead(_47);
        goto -> bb76;
    }

    bb72: {
        StorageLive(_48);
        _48 = state::UpdateLendingMarketMode::UpdateInitialDepositAmount;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _48);
        StorageDead(_48);
        goto -> bb76;
    }

    bb73: {
        StorageLive(_49);
        _49 = state::UpdateLendingMarketMode::UpdateObligationOrderExecutionEnabled;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _49);
        StorageDead(_49);
        goto -> bb76;
    }

    bb74: {
        StorageLive(_50);
        _50 = state::UpdateLendingMarketMode::UpdateImmutableFlag;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _50);
        StorageDead(_50);
        goto -> bb76;
    }

    bb75: {
        StorageLive(_51);
        _51 = state::UpdateLendingMarketMode::UpdateObligationOrderCreationEnabled;
        _0 = std::result::Result::<state::UpdateLendingMarketMode, strum::ParseError>::Ok(move _51);
        StorageDead(_51);
        goto -> bb76;
    }

    bb76: {
        return;
    }
}
