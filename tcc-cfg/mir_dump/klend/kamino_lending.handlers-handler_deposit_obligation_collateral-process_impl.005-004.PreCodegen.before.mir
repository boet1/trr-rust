// MIR for `handlers::handler_deposit_obligation_collateral::process_impl` before PreCodegen

fn handlers::handler_deposit_obligation_collateral::process_impl(_1: &handlers::handler_deposit_obligation_collateral::DepositObligationCollateral<'_>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug collateral_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &state::nested_accounts::DepositObligationCollateralAccounts<'_>;
    let _7: &state::nested_accounts::DepositObligationCollateralAccounts<'_>;
    let _8: state::nested_accounts::DepositObligationCollateralAccounts<'_>;
    let mut _9: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _11: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _12: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _13: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _14: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _15: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _16: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _17: anchor_lang::prelude::Signer<'_>;
    let mut _18: &anchor_lang::prelude::Signer<'_>;
    let mut _19: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _20: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _25: ();
    let _26: anchor_lang::prelude::Clock;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _28: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _33: anchor_lang::prelude::Clock;
    let _35: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _37: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _45: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _47: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _48: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _55: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _57: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _58: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _64: ();
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _66: std::result::Result<(), anchor_lang::error::Error>;
    let mut _67: &mut state::reserve::Reserve;
    let mut _68: &mut state::reserve::Reserve;
    let mut _69: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _70: &anchor_lang::prelude::Clock;
    let _71: &anchor_lang::prelude::Clock;
    let mut _72: std::option::Option<utils::prices::GetPriceResult>;
    let mut _73: u16;
    let mut _74: &state::lending_market::LendingMarket;
    let mut _75: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _83: std::result::Result<(), anchor_lang::error::Error>;
    let mut _84: &state::lending_market::LendingMarket;
    let _85: &state::lending_market::LendingMarket;
    let mut _86: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _87: &mut state::reserve::Reserve;
    let mut _88: &mut state::reserve::Reserve;
    let mut _89: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _90: &mut state::obligation::Obligation;
    let mut _91: &mut state::obligation::Obligation;
    let mut _92: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _93: u64;
    let mut _94: u64;
    let mut _95: anchor_lang::prelude::Pubkey;
    let mut _96: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _97: state::types::MaxReservesAsCollateralCheck;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: &std::string::String;
    let _107: &std::string::String;
    let _108: std::string::String;
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[&str; 1];
    let _113: &[&str; 1];
    let _114: [&str; 1];
    let mut _115: &[core::fmt::rt::Argument<'_>];
    let mut _116: &[core::fmt::rt::Argument<'_>; 1];
    let _117: &[core::fmt::rt::Argument<'_>; 1];
    let _118: [core::fmt::rt::Argument<'_>; 1];
    let mut _119: core::fmt::rt::Argument<'_>;
    let mut _120: &u64;
    let _121: &u64;
    let _122: ();
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _124: std::result::Result<(), anchor_lang::error::Error>;
    let mut _125: anchor_lang::prelude::AccountInfo<'_>;
    let mut _126: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _127: anchor_lang::prelude::AccountInfo<'_>;
    let mut _128: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _129: anchor_lang::prelude::AccountInfo<'_>;
    let mut _130: &anchor_lang::prelude::Signer<'_>;
    let mut _131: anchor_lang::prelude::AccountInfo<'_>;
    let mut _132: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _133: u64;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _139: ();
    let mut _141: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _142: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _187: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _22;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _25;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _26;
        let _34: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
        let _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _43: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        scope 10 {
            debug lending_market => _34;
            let _44: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
            let _50: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _53: std::cell::RefMut<'_, state::reserve::Reserve>;
            scope 15 {
                debug deposit_reserve => _44;
                let _54: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
                let _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _63: std::cell::RefMut<'_, state::obligation::Obligation>;
                scope 20 {
                    debug obligation => _54;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: ();
                    let _99: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _102: ();
                    let _109: std::string::String;
                    let _135: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _138: ();
                    let mut _140: &[&str; 1];
                    scope 25 {
                        debug residual => _77;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _80;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug residual => _99;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _102;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug res => _109;
                    }
                    scope 34 {
                        debug residual => _135;
                        scope 35 {
                        }
                    }
                    scope 36 {
                        debug val => _138;
                        scope 37 {
                        }
                    }
                }
                scope 21 {
                    debug residual => _60;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _63;
                    scope 24 {
                    }
                }
            }
            scope 16 {
                debug residual => _50;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _53;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _40;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _43;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _30;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _33;
        scope 9 {
        }
    }

    bb0: {
        _145 = const false;
        _144 = const false;
        _143 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _9 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as Clone>::clone(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _11 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as Clone>::clone(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &((*_1).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _13 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _15 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _16) -> [return: bb4, unwind: bb81];
    }

    bb4: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _17 = <anchor_lang::prelude::Signer<'_> as Clone>::clone(move _18) -> [return: bb5, unwind: bb80];
    }

    bb5: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).6: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _19 = <anchor_lang::prelude::Program<'_, Token> as Clone>::clone(move _20) -> [return: bb6, unwind: bb80];
    }

    bb6: {
        StorageDead(_20);
        _8 = nested_accounts::DepositObligationCollateralAccounts::<'_> { user_source_collateral: move _15, reserve_destination_collateral: move _13, deposit_reserve: move _11, obligation: move _9, obligation_owner: move _17, token_program: move _19 };
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        _7 = &_8;
        _6 = &(*_7);
        _5 = deposit_obligation_collateral_checks(move _6) -> [return: bb7, unwind: bb79];
    }

    bb7: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb8, unwind: bb79];
    }

    bb8: {
        StorageDead(_5);
        _21 = discriminant(_4);
        switchInt(move _21) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_4 as Continue).0: ());
        _3 = _25;
        StorageDead(_25);
        _146 = discriminant(_4);
        drop(_8) -> [return: bb13, unwind: bb82];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_22);
        _22 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_24);
        _24 = move _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _24) -> [return: bb12, unwind: bb96];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _176 = discriminant(_4);
        drop(_8) -> [return: bb73, unwind: bb82];
    }

    bb13: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb14, unwind continue];
    }

    bb14: {
        _27 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _28) -> [return: bb15, unwind: bb82];
    }

    bb15: {
        StorageDead(_28);
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb16, 1: bb17, otherwise: bb10];
    }

    bb16: {
        StorageLive(_33);
        _33 = move ((_27 as Continue).0: anchor_lang::prelude::Clock);
        _26 = move _33;
        StorageDead(_33);
        _148 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _37 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _38) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_30);
        _30 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _32) -> [return: bb18, unwind: bb95];
    }

    bb18: {
        StorageDead(_32);
        StorageDead(_30);
        _174 = discriminant(_27);
        StorageDead(_27);
        goto -> bb72;
    }

    bb19: {
        StorageDead(_38);
        _36 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb20, unwind: bb82];
    }

    bb20: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb21, 1: bb22, otherwise: bb10];
    }

    bb21: {
        StorageLive(_43);
        _43 = move ((_36 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _35 = move _43;
        StorageDead(_43);
        _34 = &_35;
        _150 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _47 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _48) -> [return: bb24, unwind: bb78];
    }

    bb22: {
        StorageLive(_40);
        _40 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _42) -> [return: bb23, unwind: bb94];
    }

    bb23: {
        StorageDead(_42);
        StorageDead(_40);
        _172 = discriminant(_36);
        StorageDead(_36);
        goto -> bb71;
    }

    bb24: {
        StorageDead(_48);
        _46 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _47) -> [return: bb25, unwind: bb78];
    }

    bb25: {
        StorageDead(_47);
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb26, 1: bb27, otherwise: bb10];
    }

    bb26: {
        StorageLive(_53);
        _53 = move ((_46 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _45 = move _53;
        StorageDead(_53);
        _44 = &mut _45;
        _152 = discriminant(_46);
        StorageDead(_46);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _57 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _58) -> [return: bb29, unwind: bb77];
    }

    bb27: {
        StorageLive(_50);
        _50 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _52) -> [return: bb28, unwind: bb93];
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_50);
        _170 = discriminant(_46);
        StorageDead(_46);
        goto -> bb70;
    }

    bb29: {
        StorageDead(_58);
        _56 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _57) -> [return: bb30, unwind: bb77];
    }

    bb30: {
        StorageDead(_57);
        _59 = discriminant(_56);
        switchInt(move _59) -> [0: bb31, 1: bb32, otherwise: bb10];
    }

    bb31: {
        StorageLive(_63);
        _63 = move ((_56 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _55 = move _63;
        StorageDead(_63);
        _54 = &mut _55;
        _154 = discriminant(_56);
        StorageDead(_56);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_44);
        _68 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _69) -> [return: bb34, unwind: bb76];
    }

    bb32: {
        StorageLive(_60);
        _60 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _62) -> [return: bb33, unwind: bb92];
    }

    bb33: {
        StorageDead(_62);
        StorageDead(_60);
        _168 = discriminant(_56);
        StorageDead(_56);
        goto -> bb69;
    }

    bb34: {
        _67 = &mut (*_68);
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_26;
        _70 = &(*_71);
        StorageLive(_72);
        _72 = std::option::Option::<prices::GetPriceResult>::None;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_34);
        _74 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _75) -> [return: bb35, unwind: bb76];
    }

    bb35: {
        StorageDead(_75);
        _73 = ((*_74).5: u16);
        _66 = lending_operations::refresh_reserve(move _67, move _70, move _72, move _73) -> [return: bb36, unwind: bb76];
    }

    bb36: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_67);
        _65 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _66) -> [return: bb37, unwind: bb76];
    }

    bb37: {
        StorageDead(_66);
        _76 = discriminant(_65);
        switchInt(move _76) -> [0: bb38, 1: bb39, otherwise: bb10];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_65 as Continue).0: ());
        _64 = _80;
        StorageDead(_80);
        _156 = discriminant(_65);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_34);
        _85 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _86) -> [return: bb41, unwind: bb76];
    }

    bb39: {
        StorageLive(_77);
        _77 = move ((_65 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb40, unwind: bb91];
    }

    bb40: {
        StorageDead(_79);
        StorageDead(_77);
        _166 = discriminant(_65);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb68;
    }

    bb41: {
        _84 = &(*_85);
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &mut (*_44);
        _88 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _89) -> [return: bb42, unwind: bb76];
    }

    bb42: {
        _87 = &mut (*_88);
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &mut (*_54);
        _91 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _92) -> [return: bb43, unwind: bb76];
    }

    bb43: {
        _90 = &mut (*_91);
        StorageDead(_92);
        StorageLive(_93);
        _93 = (_26.0: u64);
        StorageLive(_94);
        _94 = _2;
        StorageLive(_95);
        StorageLive(_96);
        _96 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _95 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _96) -> [return: bb44, unwind: bb76];
    }

    bb44: {
        StorageDead(_96);
        StorageLive(_97);
        _97 = state::types::MaxReservesAsCollateralCheck::Perform;
        _83 = lending_operations::deposit_obligation_collateral(move _84, move _87, move _90, move _93, move _94, move _95, move _97) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        _82 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb46, unwind: bb76];
    }

    bb46: {
        StorageDead(_83);
        _98 = discriminant(_82);
        switchInt(move _98) -> [0: bb47, 1: bb48, otherwise: bb10];
    }

    bb47: {
        StorageLive(_102);
        _102 = ((_82 as Continue).0: ());
        _81 = _102;
        StorageDead(_102);
        _158 = discriminant(_82);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _140 = const _;
        _113 = &(*_140);
        _112 = &(*_113);
        _111 = move _112 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_2;
        _120 = &(*_121);
        _119 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _120) -> [return: bb50, unwind: bb76];
    }

    bb48: {
        StorageLive(_99);
        _99 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _101) -> [return: bb49, unwind: bb90];
    }

    bb49: {
        StorageDead(_101);
        StorageDead(_99);
        _164 = discriminant(_82);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb68;
    }

    bb50: {
        StorageDead(_120);
        _118 = [move _119];
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = move _116 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_116);
        _110 = Arguments::<'_>::new_v1(move _111, move _115) -> [return: bb51, unwind: bb76];
    }

    bb51: {
        StorageDead(_115);
        StorageDead(_111);
        _109 = format(move _110) -> [return: bb52, unwind: bb76];
    }

    bb52: {
        StorageDead(_110);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_113);
        _108 = move _109;
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = <std::string::String as Deref>::deref(move _106) -> [return: bb53, unwind: bb75];
    }

    bb53: {
        _104 = &(*_105);
        StorageDead(_106);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb54, unwind: bb75];
    }

    bb54: {
        StorageDead(_104);
        drop(_108) -> [return: bb55, unwind: bb76];
    }

    bb55: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _141 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _186 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _126 = &(*_186);
        _125 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _126) -> [return: bb56, unwind: bb76];
    }

    bb56: {
        _145 = const true;
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _142 = deref_copy ((*_1).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _187 = (((_142.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _128 = &(*_187);
        _127 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _128) -> [return: bb57, unwind: bb89];
    }

    bb57: {
        _144 = const true;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _129 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _130) -> [return: bb58, unwind: bb87];
    }

    bb58: {
        _143 = const true;
        StorageDead(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &((*_1).6: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _131 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _132) -> [return: bb59, unwind: bb85];
    }

    bb59: {
        StorageDead(_132);
        StorageLive(_133);
        _133 = _2;
        _145 = const false;
        _144 = const false;
        _143 = const false;
        _124 = deposit_obligation_collateral_transfer(move _125, move _127, move _129, move _131, move _133) -> [return: bb60, unwind: bb85];
    }

    bb60: {
        StorageDead(_133);
        StorageDead(_131);
        _143 = const false;
        StorageDead(_129);
        _144 = const false;
        StorageDead(_127);
        _145 = const false;
        StorageDead(_125);
        _123 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _124) -> [return: bb61, unwind: bb76];
    }

    bb61: {
        StorageDead(_124);
        _134 = discriminant(_123);
        switchInt(move _134) -> [0: bb62, 1: bb63, otherwise: bb10];
    }

    bb62: {
        StorageLive(_138);
        _138 = ((_123 as Continue).0: ());
        _122 = _138;
        StorageDead(_138);
        _160 = discriminant(_123);
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_139);
        _139 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _139);
        StorageDead(_139);
        drop(_55) -> [return: bb65, unwind: bb77];
    }

    bb63: {
        StorageLive(_135);
        _135 = move ((_123 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_137);
        _137 = move _135;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _137) -> [return: bb64, unwind: bb83];
    }

    bb64: {
        StorageDead(_137);
        StorageDead(_135);
        _162 = discriminant(_123);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb68;
    }

    bb65: {
        StorageDead(_55);
        StorageDead(_54);
        drop(_45) -> [return: bb66, unwind: bb78];
    }

    bb66: {
        StorageDead(_45);
        StorageDead(_44);
        drop(_35) -> [return: bb67, unwind: bb82];
    }

    bb67: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_26);
        goto -> bb74;
    }

    bb68: {
        drop(_55) -> [return: bb69, unwind: bb77];
    }

    bb69: {
        StorageDead(_55);
        StorageDead(_54);
        drop(_45) -> [return: bb70, unwind: bb78];
    }

    bb70: {
        StorageDead(_45);
        StorageDead(_44);
        drop(_35) -> [return: bb71, unwind: bb82];
    }

    bb71: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_26);
        goto -> bb74;
    }

    bb73: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb74;
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        drop(_108) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_55) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_45) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_35) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_8) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_15) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_13) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        resume;
    }

    bb83 (cleanup): {
        _178 = discriminant(_123);
        goto -> bb76;
    }

    bb84 (cleanup): {
        drop(_129) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_143) -> [0: bb87, otherwise: bb84];
    }

    bb86 (cleanup): {
        drop(_127) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_144) -> [0: bb89, otherwise: bb86];
    }

    bb88 (cleanup): {
        drop(_125) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_145) -> [0: bb76, otherwise: bb88];
    }

    bb90 (cleanup): {
        _179 = discriminant(_82);
        goto -> bb76;
    }

    bb91 (cleanup): {
        _180 = discriminant(_65);
        goto -> bb76;
    }

    bb92 (cleanup): {
        _181 = discriminant(_56);
        goto -> bb77;
    }

    bb93 (cleanup): {
        _182 = discriminant(_46);
        goto -> bb78;
    }

    bb94 (cleanup): {
        _183 = discriminant(_36);
        goto -> bb82;
    }

    bb95 (cleanup): {
        _184 = discriminant(_27);
        goto -> bb82;
    }

    bb96 (cleanup): {
        _185 = discriminant(_4);
        goto -> bb79;
    }
}
