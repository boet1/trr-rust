// MIR for `handlers::handler_delete_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18>::exit` after PreCodegen

fn handlers::handler_delete_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18>::exit(_1: &handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug program_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Signer<'_>;
    let _8: &anchor_lang::prelude::Signer<'_>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let _16: ();
    let _17: &anchor_lang::prelude::Signer<'_>;
    let _18: ();
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _20: std::result::Result<(), anchor_lang::error::Error>;
    let mut _21: std::result::Result<(), anchor_lang::error::Error>;
    let mut _22: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let _23: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _24: anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: &anchor_lang::prelude::Signer<'_>;
    let mut _26: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _32: ();
    let _33: &anchor_lang::prelude::Signer<'_>;
    let _34: ();
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _36: std::result::Result<(), anchor_lang::error::Error>;
    let mut _37: std::result::Result<(), anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let _39: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _40: anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: &anchor_lang::prelude::Signer<'_>;
    let mut _42: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _48: ();
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug referrer => _17;
        let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _31: ();
        scope 6 {
            debug residual => _28;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _31;
            scope 9 {
            }
        }
    }
    scope 10 {
        debug referrer => _33;
        let _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _47: ();
        scope 11 {
            debug residual => _44;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _47;
            scope 14 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _7 = &(*_8);
        StorageLive(_9);
        _9 = &(*_2);
        _6 = <anchor_lang::prelude::Signer<'_> as anchor_lang::AccountsExit<'_>>::exit(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        _10 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _5 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _6, move _10) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        StorageDead(_5);
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_4 as Continue).0: ());
        _3 = _15;
        StorageDead(_15);
        _49 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>);
        _22 = &(*_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_17);
        _24 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _25) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _59 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb22;
    }

    bb8: {
        StorageDead(_25);
        _21 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as AccountsClose<'_>>::close(move _22, move _24) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_26);
        _26 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _20 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _21, move _26) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_21);
        _19 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _20) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        StorageDead(_20);
        _27 = discriminant(_19);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_19 as Continue).0: ());
        _18 = _31;
        StorageDead(_31);
        _51 = discriminant(_19);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_18);
        _16 = const ();
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_1).2: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>);
        _38 = &(*_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_33);
        _40 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _41) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_28);
        _28 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        _57 = discriminant(_19);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb22;
    }

    bb15: {
        StorageDead(_41);
        _37 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as AccountsClose<'_>>::close(move _38, move _40) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_42);
        _42 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _36 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _37, move _42) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_37);
        _35 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        StorageDead(_36);
        _43 = discriminant(_35);
        switchInt(move _43) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_47);
        _47 = ((_35 as Continue).0: ());
        _34 = _47;
        StorageDead(_47);
        _53 = discriminant(_35);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        _32 = const ();
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_48);
        _48 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _48);
        StorageDead(_48);
        goto -> bb22;
    }

    bb20: {
        StorageLive(_44);
        _44 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _46) -> [return: bb21, unwind: bb24];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        _55 = discriminant(_35);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        _61 = discriminant(_35);
        goto -> bb23;
    }

    bb25 (cleanup): {
        _62 = discriminant(_19);
        goto -> bb23;
    }

    bb26 (cleanup): {
        _63 = discriminant(_4);
        goto -> bb23;
    }
}
