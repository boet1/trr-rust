digraph Mir_0_1380 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn check_same_elevation_group(_1: &amp;ReErased state::obligation::Obligation, _2: &amp;ReErased state::reserve::Reserve) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u8;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased [u8];<br align="left"/>let mut _8: &amp;ReErased [u8; 20_usize];<br align="left"/>let mut _9: &amp;ReErased u8;<br align="left"/>let _10: &amp;ReErased u8;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: anchor_lang::error::Error;<br align="left"/>let mut _13: anchor_lang::error::AnchorError;<br align="left"/>let mut _14: std::string::String;<br align="left"/>let mut _15: &amp;ReErased LendingError;<br align="left"/>let _16: LendingError;<br align="left"/>let mut _17: u32;<br align="left"/>let mut _18: LendingError;<br align="left"/>let mut _19: std::string::String;<br align="left"/>let mut _20: &amp;ReErased LendingError;<br align="left"/>let _21: LendingError;<br align="left"/>let mut _22: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _23: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _24: anchor_lang::error::Source;<br align="left"/>let mut _25: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _26: ();<br align="left"/>let mut _27: &amp;ReErased LendingError;<br align="left"/>let mut _28: &amp;ReErased LendingError;<br align="left"/>debug obligation =&gt; _1;<br align="left"/>debug reserve =&gt; _2;<br align="left"/>>;
    bb0__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = ((*_1).14: u8)<br/>_4 = Ne(move _5, const _)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(((*_2).9: state::reserve::ReserveConfig).22: [u8; 20])<br/>_7 = move _8 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;((*_1).14: u8)<br/>_9 = &amp;(*_10)<br/></td></tr><tr><td align="left">_6 = core::slice::&lt;impl [u8]&gt;::contains(move _7, move _9)</td></tr></table>>];
    bb2__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_10)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_28 = const _<br/>_15 = &amp;(*_28)<br/></td></tr><tr><td align="left">_14 = LendingError::name(move _15)</td></tr></table>>];
    bb5__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = LendingError::InconsistentElevationGroup<br/></td></tr><tr><td align="left">_17 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _18)</td></tr></table>>];
    bb6__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_27 = const _<br/>_20 = &amp;(*_27)<br/></td></tr><tr><td align="left">_19 = &lt;LendingError as ToString&gt;::to_string(move _20)</td></tr></table>>];
    bb7__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\lending_market\\lending_operations.rs&quot;, line: const 2757_u32 }<br/>_23 = anchor_lang::error::ErrorOrigin::Source(move _24)<br/>StorageDead(_24)<br/>_22 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _23)<br/>StorageDead(_23)<br/>StorageLive(_25)<br/>_25 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_13 = anchor_lang::error::AnchorError { error_name: move _14, error_code_number: move _17, error_msg: move _19, error_origin: move _22, compared_values: move _25 }<br/>StorageDead(_25)<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _13)</td></tr></table>>];
    bb8__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _12)<br/>StorageDead(_12)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_3 = const ()<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_26)<br/>_26 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _26)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb12__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">drop(_14)</td></tr></table>>];
    bb13__0_1380 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1380 -> bb9__0_1380 [label="0"];
    bb0__0_1380 -> bb1__0_1380 [label="otherwise"];
    bb1__0_1380 -> bb2__0_1380 [label="return"];
    bb2__0_1380 -> bb4__0_1380 [label="0"];
    bb2__0_1380 -> bb3__0_1380 [label="otherwise"];
    bb3__0_1380 -> bb10__0_1380 [label=""];
    bb4__0_1380 -> bb5__0_1380 [label="return"];
    bb5__0_1380 -> bb6__0_1380 [label="return"];
    bb5__0_1380 -> bb12__0_1380 [label="unwind"];
    bb6__0_1380 -> bb7__0_1380 [label="return"];
    bb6__0_1380 -> bb12__0_1380 [label="unwind"];
    bb7__0_1380 -> bb8__0_1380 [label="return"];
    bb7__0_1380 -> bb13__0_1380 [label="unwind"];
    bb8__0_1380 -> bb11__0_1380 [label=""];
    bb9__0_1380 -> bb10__0_1380 [label=""];
    bb10__0_1380 -> bb11__0_1380 [label=""];
    bb12__0_1380 -> bb13__0_1380 [label="return"];
}
