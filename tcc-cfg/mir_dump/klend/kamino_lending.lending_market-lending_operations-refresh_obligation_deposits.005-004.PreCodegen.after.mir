// MIR for `refresh_obligation_deposits` after PreCodegen

fn refresh_obligation_deposits(_1: &mut obligation::Obligation, _2: &state::lending_market::LendingMarket, _3: u64, _4: state::types::MaxReservesAsCollateralCheck, _5: std::option::Option<&state::lending_market::ElevationGroup>, _6: impl Iterator<Item = T>, _7: std::option::Option<u64>) -> std::result::Result<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error> {
    debug obligation => _1;
    debug lending_market => _2;
    debug slot => _3;
    debug max_reserves_as_collateral_check => _4;
    debug elevation_group => _5;
    debug reserves_iter => _6;
    debug borrowed_amount_in_elevation_group => _7;
    let mut _0: std::result::Result<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error>;
    let mut _8: u8;
    let mut _18: (std::option::Option<&state::lending_market::ElevationGroup>, std::option::Option<u64>);
    let mut _19: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _20: std::option::Option<u64>;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let mut _26: (&state::lending_market::ElevationGroup, u64);
    let mut _27: &state::lending_market::ElevationGroup;
    let mut _28: u64;
    let mut _29: !;
    let _30: !;
    let _31: !;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 1];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let _37: ();
    let mut _38: std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationCollateral>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}>;
    let mut _39: std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationCollateral>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}>;
    let mut _40: std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationCollateral>>;
    let mut _41: std::slice::IterMut<'_, state::obligation::ObligationCollateral>;
    let mut _42: &mut [state::obligation::ObligationCollateral];
    let mut _43: &mut [state::obligation::ObligationCollateral; 8];
    let mut _44: {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31};
    let mut _46: ();
    let _47: ();
    let mut _48: std::option::Option<(usize, &mut state::obligation::ObligationCollateral)>;
    let mut _49: &mut std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationCollateral>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}>;
    let mut _50: &mut std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationCollateral>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}>;
    let mut _51: isize;
    let mut _52: !;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, T>;
    let mut _57: std::result::Result<T, anchor_lang::error::Error>;
    let mut _58: std::option::Option<T>;
    let mut _59: &mut impl Iterator<Item = T>;
    let mut _60: anchor_lang::error::Error;
    let mut _61: anchor_lang::error::AnchorError;
    let mut _62: std::string::String;
    let mut _63: &LendingError;
    let _64: LendingError;
    let mut _65: u32;
    let mut _66: LendingError;
    let mut _67: std::string::String;
    let mut _68: &LendingError;
    let _69: LendingError;
    let mut _70: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _71: anchor_lang::error::ErrorOrigin;
    let mut _72: anchor_lang::error::Source;
    let mut _73: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _80: &T;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _83: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _85: &T;
    let mut _86: {closure@programs\klend\src\lending_market\lending_operations.rs:1015:22: 1015:25};
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _92: ();
    let mut _93: bool;
    let mut _94: &std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _95: bool;
    let mut _96: u8;
    let mut _97: &state::reserve::Reserve;
    let mut _98: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _99: ();
    let mut _100: bool;
    let mut _101: &state::reserve::ReserveStatus;
    let _102: state::reserve::ReserveStatus;
    let mut _103: &state::reserve::ReserveConfig;
    let _104: &state::reserve::Reserve;
    let mut _105: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _106: &state::reserve::ReserveStatus;
    let _107: state::reserve::ReserveStatus;
    let mut _108: (u8, bool);
    let _109: ();
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _111: std::result::Result<(), anchor_lang::error::Error>;
    let mut _112: &state::obligation::ObligationCollateral;
    let mut _113: &state::reserve::Reserve;
    let _114: &state::reserve::Reserve;
    let mut _115: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _116: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _117: anchor_lang::prelude::Pubkey;
    let mut _118: usize;
    let mut _119: u64;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _125: ();
    let mut _126: bool;
    let mut _127: u64;
    let mut _128: (u8, bool);
    let _129: ();
    let mut _130: isize;
    let mut _134: &state::lending_market::ElevationGroup;
    let _135: ();
    let mut _136: bool;
    let mut _137: &[u8];
    let mut _138: &[u8; 20];
    let _139: &state::reserve::Reserve;
    let mut _140: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _141: &u8;
    let _142: &u8;
    let mut _143: !;
    let mut _144: anchor_lang::error::Error;
    let mut _145: anchor_lang::error::AnchorError;
    let mut _146: std::string::String;
    let mut _147: &LendingError;
    let _148: LendingError;
    let mut _149: u32;
    let mut _150: LendingError;
    let mut _151: std::string::String;
    let mut _152: &LendingError;
    let _153: LendingError;
    let mut _154: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _155: anchor_lang::error::ErrorOrigin;
    let mut _156: anchor_lang::error::Source;
    let mut _157: std::option::Option<anchor_lang::error::ComparedValues>;
    let _158: ();
    let mut _159: bool;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &anchor_lang::prelude::Pubkey;
    let mut _162: !;
    let mut _163: anchor_lang::error::Error;
    let mut _164: anchor_lang::error::Error;
    let mut _165: anchor_lang::error::AnchorError;
    let mut _166: std::string::String;
    let mut _167: &LendingError;
    let _168: LendingError;
    let mut _169: u32;
    let mut _170: LendingError;
    let mut _171: std::string::String;
    let mut _172: &LendingError;
    let _173: LendingError;
    let mut _174: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _175: anchor_lang::error::ErrorOrigin;
    let mut _176: anchor_lang::error::Source;
    let mut _177: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _178: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _179: anchor_lang::prelude::Pubkey;
    let mut _180: anchor_lang::prelude::Pubkey;
    let mut _181: u64;
    let mut _182: u64;
    let mut _183: &state::reserve::Reserve;
    let mut _184: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _185: usize;
    let mut _186: usize;
    let mut _187: bool;
    let mut _188: u64;
    let mut _189: &mut state::reserve::Reserve;
    let mut _190: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let _191: usize;
    let mut _192: usize;
    let mut _193: bool;
    let mut _194: u64;
    let mut _195: &mut state::reserve::Reserve;
    let mut _196: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let _197: usize;
    let mut _198: usize;
    let mut _199: bool;
    let mut _200: (u64, bool);
    let mut _201: u64;
    let mut _203: &state::reserve::Reserve;
    let _204: &state::reserve::Reserve;
    let mut _205: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _206: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _207: &state::obligation::ObligationCollateral;
    let mut _208: u128;
    let mut _209: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _212: (u8, u8);
    let mut _213: &state::reserve::Reserve;
    let _214: &state::reserve::Reserve;
    let mut _215: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _216: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _217: std::option::Option<&state::lending_market::ElevationGroup>;
    let _218: ();
    let mut _219: bool;
    let mut _220: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _221: &u64;
    let mut _222: bool;
    let mut _223: u8;
    let mut _224: u8;
    let mut _225: u8;
    let mut _226: u8;
    let mut _227: u8;
    let mut _228: u8;
    let mut _229: u8;
    let mut _230: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _231: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _232: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _233: ();
    let mut _234: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _235: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _236: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _237: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _238: u8;
    let _239: ();
    let mut _240: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _241: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _242: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _243: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _244: u8;
    let mut _245: u8;
    let mut _246: &state::reserve::Reserve;
    let mut _247: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _248: usize;
    let mut _249: usize;
    let mut _250: bool;
    let _251: ();
    let mut _252: &mut state::last_update::PriceStatusFlags;
    let mut _253: state::last_update::PriceStatusFlags;
    let mut _254: &state::last_update::LastUpdate;
    let _255: &state::reserve::Reserve;
    let mut _256: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _257: ();
    let _258: ();
    let mut _259: std::fmt::Arguments<'_>;
    let mut _260: &[&str];
    let mut _261: &[&str; 4];
    let _262: &[&str; 4];
    let _263: [&str; 4];
    let mut _264: &[core::fmt::rt::Argument<'_>];
    let mut _265: &[core::fmt::rt::Argument<'_>; 3];
    let _266: &[core::fmt::rt::Argument<'_>; 3];
    let _267: [core::fmt::rt::Argument<'_>; 3];
    let mut _268: core::fmt::rt::Argument<'_>;
    let mut _269: &&&str;
    let _270: &&&str;
    let _271: &&str;
    let _272: &str;
    let mut _273: &state::token_info::TokenInfo;
    let _274: &state::reserve::Reserve;
    let mut _275: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _276: core::fmt::rt::Argument<'_>;
    let mut _277: &utils::fraction::FractionDisplay<'_>;
    let _278: &utils::fraction::FractionDisplay<'_>;
    let _279: utils::fraction::FractionDisplay<'_>;
    let mut _280: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _281: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _282: &state::reserve::CollateralExchangeRate;
    let _283: state::reserve::CollateralExchangeRate;
    let mut _284: &state::reserve::Reserve;
    let _285: &state::reserve::Reserve;
    let mut _286: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _287: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _288: u64;
    let mut _289: core::fmt::rt::Argument<'_>;
    let mut _290: &utils::fraction::FractionDisplay<'_>;
    let _291: &utils::fraction::FractionDisplay<'_>;
    let _292: utils::fraction::FractionDisplay<'_>;
    let mut _293: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _294: ();
    let mut _295: bool;
    let mut _296: &state::types::MaxReservesAsCollateralCheck;
    let mut _297: &state::types::MaxReservesAsCollateralCheck;
    let _298: state::types::MaxReservesAsCollateralCheck;
    let mut _299: isize;
    let _301: ();
    let mut _302: bool;
    let mut _303: u8;
    let mut _304: u8;
    let mut _305: !;
    let mut _306: anchor_lang::error::Error;
    let mut _307: anchor_lang::error::Error;
    let mut _308: anchor_lang::error::AnchorError;
    let mut _309: std::string::String;
    let mut _310: &LendingError;
    let _311: LendingError;
    let mut _312: u32;
    let mut _313: LendingError;
    let mut _314: std::string::String;
    let mut _315: &LendingError;
    let _316: LendingError;
    let mut _317: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _318: anchor_lang::error::ErrorOrigin;
    let mut _319: anchor_lang::error::Source;
    let mut _320: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _321: (u8, u8);
    let mut _322: u8;
    let mut _323: u8;
    let mut _324: state::types::RefreshObligationDepositsResult;
    let mut _325: u8;
    let mut _326: u8;
    let mut _327: u8;
    let mut _328: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _329: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _330: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _331: state::last_update::PriceStatusFlags;
    let mut _332: bool;
    let mut _345: bool;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    scope 1 {
        debug lowest_deposit_liquidation_ltv_threshold_pct => _8;
        let mut _9: u8;
        scope 2 {
            debug lowest_deposit_max_ltv_pct => _9;
            let mut _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug deposited_value => _10;
                let mut _11: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug allowed_borrow_value => _11;
                    let mut _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 5 {
                        debug unhealthy_borrow_value => _12;
                        let mut _13: u8;
                        scope 6 {
                            debug num_of_obsolete_reserves => _13;
                            let mut _14: state::last_update::PriceStatusFlags;
                            scope 7 {
                                debug prices_state => _14;
                                let mut _15: bool;
                                scope 8 {
                                    debug borrowing_disabled => _15;
                                    let mut _16: u8;
                                    scope 9 {
                                        debug collaterals_count => _16;
                                        let _17: std::option::Option<(&state::lending_market::ElevationGroup, u64)>;
                                        let _24: &state::lending_market::ElevationGroup;
                                        let _25: u64;
                                        let mut _333: &[&str; 1];
                                        scope 10 {
                                            debug elevation_group_and_borrowed_amount => _17;
                                            let mut _45: std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationCollateral>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}>;
                                            let mut _344: &state::types::MaxReservesAsCollateralCheck;
                                            scope 12 {
                                                debug iter => _45;
                                                let _53: usize;
                                                let _54: &mut state::obligation::ObligationCollateral;
                                                scope 13 {
                                                    debug index => _53;
                                                    debug deposit => _54;
                                                    let _55: T;
                                                    let _75: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _78: T;
                                                    let mut _340: &LendingError;
                                                    let mut _341: &LendingError;
                                                    scope 14 {
                                                        debug deposit_reserve => _55;
                                                        let _79: anchor_lang::prelude::Pubkey;
                                                        scope 19 {
                                                            debug deposit_reserve_info_key => _79;
                                                            let mut _81: std::cell::RefMut<'_, state::reserve::Reserve>;
                                                            let _88: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _91: std::cell::RefMut<'_, state::reserve::Reserve>;
                                                            scope 20 {
                                                                debug deposit_reserve => _81;
                                                                let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _124: ();
                                                                let _202: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                let mut _339: &state::reserve::ReserveStatus;
                                                                scope 25 {
                                                                    debug residual => _121;
                                                                    scope 26 {
                                                                    }
                                                                }
                                                                scope 27 {
                                                                    debug val => _124;
                                                                    scope 28 {
                                                                    }
                                                                }
                                                                scope 29 {
                                                                    debug elevation_group => _131;
                                                                    debug debt_amount => _132;
                                                                    let _131: &state::lending_market::ElevationGroup;
                                                                    let _132: u64;
                                                                    let _133: usize;
                                                                    scope 30 {
                                                                        debug elevation_group_index => _133;
                                                                        let mut _335: &LendingError;
                                                                        let mut _336: &LendingError;
                                                                        let mut _337: &LendingError;
                                                                        let mut _338: &LendingError;
                                                                    }
                                                                }
                                                                scope 31 {
                                                                    debug market_value_f => _202;
                                                                    let _210: u8;
                                                                    let _211: u8;
                                                                    scope 32 {
                                                                        debug coll_ltv_pct => _210;
                                                                        debug coll_liquidation_threshold_pct => _211;
                                                                        let mut _334: &[&str; 4];
                                                                    }
                                                                }
                                                            }
                                                            scope 21 {
                                                                debug residual => _88;
                                                                scope 22 {
                                                                }
                                                            }
                                                            scope 23 {
                                                                debug val => _91;
                                                                scope 24 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 15 {
                                                        debug residual => _75;
                                                        scope 16 {
                                                        }
                                                    }
                                                    scope 17 {
                                                        debug val => _78;
                                                        scope 18 {
                                                        }
                                                    }
                                                }
                                            }
                                            scope 33 {
                                                debug elevation_group => _300;
                                                let _300: &state::lending_market::ElevationGroup;
                                                let mut _342: &LendingError;
                                                let mut _343: &LendingError;
                                            }
                                        }
                                        scope 11 {
                                            debug elevation_group => _24;
                                            debug borrowed_amount => _25;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _345 = const false;
        StorageLive(_8);
        _8 = const _;
        StorageLive(_9);
        _9 = const _;
        StorageLive(_10);
        _10 = const _;
        StorageLive(_11);
        _11 = const _;
        StorageLive(_12);
        _12 = const _;
        StorageLive(_13);
        _13 = const 0_u8;
        StorageLive(_14);
        _14 = last_update::_::<impl last_update::PriceStatusFlags>::all() -> [return: bb1, unwind: bb154];
    }

    bb1: {
        StorageLive(_15);
        _15 = const false;
        StorageLive(_16);
        _16 = const 0_u8;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _5;
        StorageLive(_20);
        _20 = _7;
        _18 = (move _19, move _20);
        StorageDead(_20);
        StorageDead(_19);
        _23 = discriminant((_18.0: std::option::Option<&state::lending_market::ElevationGroup>));
        switchInt(move _23) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _21 = discriminant((_18.1: std::option::Option<u64>));
        switchInt(move _21) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _333 = const _;
        _35 = &(*_333);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        _32 = Arguments::<'_>::new_const(move _33) -> [return: bb7, unwind: bb154];
    }

    bb4: {
        _22 = discriminant((_18.1: std::option::Option<u64>));
        switchInt(move _22) -> [1: bb5, otherwise: bb3];
    }

    bb5: {
        StorageLive(_24);
        _24 = (((_18.0: std::option::Option<&state::lending_market::ElevationGroup>) as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_25);
        _25 = (((_18.1: std::option::Option<u64>) as Some).0: u64);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_24);
        StorageLive(_28);
        _28 = _25;
        _26 = (move _27, move _28);
        StorageDead(_28);
        StorageDead(_27);
        _17 = std::option::Option::<(&state::lending_market::ElevationGroup, u64)>::Some(move _26);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb8;
    }

    bb6: {
        _17 = std::option::Option::<(&state::lending_market::ElevationGroup, u64)>::None;
        goto -> bb8;
    }

    bb7: {
        StorageDead(_33);
        _31 = panic_fmt(move _32) -> bb154;
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut ((*_1).4: [state::obligation::ObligationCollateral; 8]);
        _42 = move _43 as &mut [state::obligation::ObligationCollateral] (PointerCoercion(Unsize));
        StorageDead(_43);
        _41 = core::slice::<impl [obligation::ObligationCollateral]>::iter_mut(move _42) -> [return: bb9, unwind: bb154];
    }

    bb9: {
        StorageDead(_42);
        _40 = <std::slice::IterMut<'_, obligation::ObligationCollateral> as Iterator>::enumerate(move _41) -> [return: bb10, unwind: bb154];
    }

    bb10: {
        StorageDead(_41);
        StorageLive(_44);
        _44 = {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31};
        _39 = <Enumerate<std::slice::IterMut<'_, obligation::ObligationCollateral>> as Iterator>::filter::<{closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}>(move _40, move _44) -> [return: bb11, unwind: bb154];
    }

    bb11: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = <Filter<Enumerate<std::slice::IterMut<'_, obligation::ObligationCollateral>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}> as IntoIterator>::into_iter(move _39) -> [return: bb12, unwind: bb154];
    }

    bb12: {
        StorageDead(_39);
        StorageLive(_45);
        _45 = move _38;
        goto -> bb13;
    }

    bb13: {
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut _45;
        _49 = &mut (*_50);
        _48 = <Filter<Enumerate<std::slice::IterMut<'_, obligation::ObligationCollateral>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1005:17: 1005:31}> as Iterator>::next(move _49) -> [return: bb14, unwind: bb154];
    }

    bb14: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb17, 1: bb15, otherwise: bb16];
    }

    bb15: {
        StorageLive(_53);
        _53 = (((_48 as Some).0: (usize, &mut state::obligation::ObligationCollateral)).0: usize);
        StorageLive(_54);
        _54 = move (((_48 as Some).0: (usize, &mut state::obligation::ObligationCollateral)).1: &mut state::obligation::ObligationCollateral);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &mut _6;
        _58 = <impl Iterator<Item = T> as Iterator>::next(move _59) -> [return: bb18, unwind: bb154];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _37 = const ();
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = &_4;
        StorageLive(_297);
        _344 = const _;
        _297 = &(*_344);
        _295 = <state::types::MaxReservesAsCollateralCheck as PartialEq>::eq(move _296, move _297) -> [return: bb129, unwind: bb154];
    }

    bb18: {
        _345 = const true;
        StorageDead(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _341 = const _;
        _63 = &(*_341);
        _62 = LendingError::name(move _63) -> [return: bb19, unwind: bb160];
    }

    bb19: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        _66 = LendingError::InvalidAccountInput;
        _65 = <LendingError as Into<u32>>::into(move _66) -> [return: bb20, unwind: bb153];
    }

    bb20: {
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _340 = const _;
        _68 = &(*_340);
        _67 = <LendingError as ToString>::to_string(move _68) -> [return: bb21, unwind: bb153];
    }

    bb21: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1009_u32 };
        _71 = anchor_lang::error::ErrorOrigin::Source(move _72);
        StorageDead(_72);
        _70 = std::option::Option::<ErrorOrigin>::Some(move _71);
        StorageDead(_71);
        StorageLive(_73);
        _73 = std::option::Option::<ComparedValues>::None;
        _61 = anchor_lang::error::AnchorError { error_name: move _62, error_code_number: move _65, error_msg: move _67, error_origin: move _70, compared_values: move _73 };
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_62);
        _60 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _61) -> [return: bb22, unwind: bb160];
    }

    bb22: {
        StorageDead(_61);
        _345 = const false;
        _57 = std::option::Option::<T>::ok_or::<anchor_lang::error::Error>(move _58, move _60) -> [return: bb23, unwind: bb160];
    }

    bb23: {
        StorageDead(_60);
        _345 = const false;
        StorageDead(_58);
        _56 = <std::result::Result<T, anchor_lang::error::Error> as Try>::branch(move _57) -> [return: bb24, unwind: bb154];
    }

    bb24: {
        StorageDead(_57);
        _74 = discriminant(_56);
        switchInt(move _74) -> [0: bb25, 1: bb26, otherwise: bb16];
    }

    bb25: {
        StorageLive(_78);
        _78 = move ((_56 as Continue).0: T);
        _55 = move _78;
        StorageDead(_78);
        _346 = discriminant(_56);
        StorageDead(_56);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_55;
        _79 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _80) -> [return: bb28, unwind: bb152];
    }

    bb26: {
        StorageLive(_75);
        _75 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_77);
        _77 = move _75;
        _0 = <std::result::Result<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _77) -> [return: bb27, unwind: bb158];
    }

    bb27: {
        StorageDead(_77);
        StorageDead(_75);
        _356 = discriminant(_56);
        StorageDead(_56);
        goto -> bb145;
    }

    bb28: {
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_55;
        _84 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_mut(move _85) -> [return: bb29, unwind: bb152];
    }

    bb29: {
        StorageDead(_85);
        StorageLive(_86);
        _86 = {closure@programs\klend\src\lending_market\lending_operations.rs:1015:22: 1015:25};
        _83 = std::result::Result::<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:1015:22: 1015:25}>(move _84, move _86) -> [return: bb30, unwind: bb152];
    }

    bb30: {
        StorageDead(_86);
        StorageDead(_84);
        _82 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb31, unwind: bb152];
    }

    bb31: {
        StorageDead(_83);
        _87 = discriminant(_82);
        switchInt(move _87) -> [0: bb32, 1: bb33, otherwise: bb16];
    }

    bb32: {
        StorageLive(_91);
        _91 = move ((_82 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _81 = move _91;
        StorageDead(_91);
        _348 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_5;
        _93 = std::option::Option::<&state::lending_market::ElevationGroup>::is_none(move _94) -> [return: bb35, unwind: bb151];
    }

    bb33: {
        StorageLive(_88);
        _88 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_90);
        _90 = move _88;
        _0 = <std::result::Result<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _90) -> [return: bb34, unwind: bb157];
    }

    bb34: {
        StorageDead(_90);
        StorageDead(_88);
        _354 = discriminant(_82);
        StorageDead(_82);
        goto -> bb144;
    }

    bb35: {
        switchInt(move _93) -> [0: bb40, otherwise: bb36];
    }

    bb36: {
        StorageDead(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_81;
        _97 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _98) -> [return: bb37, unwind: bb151];
    }

    bb37: {
        StorageDead(_98);
        _96 = (((*_97).9: state::reserve::ReserveConfig).23: u8);
        _95 = Gt(move _96, const 0_u8);
        switchInt(move _95) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        StorageDead(_97);
        StorageDead(_96);
        _15 = const true;
        _92 = const ();
        goto -> bb42;
    }

    bb39: {
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_94);
        goto -> bb41;
    }

    bb41: {
        _92 = const ();
        goto -> bb42;
    }

    bb42: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_81;
        _104 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _105) -> [return: bb43, unwind: bb151];
    }

    bb43: {
        StorageDead(_105);
        _103 = &((*_104).9: state::reserve::ReserveConfig);
        _102 = reserve::ReserveConfig::status(move _103) -> [return: bb44, unwind: bb151];
    }

    bb44: {
        _101 = &_102;
        StorageDead(_103);
        StorageLive(_106);
        _339 = const _;
        _106 = &(*_339);
        _100 = <reserve::ReserveStatus as PartialEq>::eq(move _101, move _106) -> [return: bb45, unwind: bb151];
    }

    bb45: {
        switchInt(move _100) -> [0: bb48, otherwise: bb46];
    }

    bb46: {
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        _108 = CheckedAdd(_13, const 1_u8);
        assert(!move (_108.1: bool), "attempt to compute `{} + {}`, which would overflow", _13, const 1_u8) -> [success: bb47, unwind: bb151];
    }

    bb47: {
        _13 = move (_108.0: u8);
        _99 = const ();
        goto -> bb49;
    }

    bb48: {
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_101);
        _99 = const ();
        goto -> bb49;
    }

    bb49: {
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_54);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_81;
        _115 = &(*_116);
        _114 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _115) -> [return: bb50, unwind: bb151];
    }

    bb50: {
        _113 = &(*_114);
        StorageDead(_115);
        StorageLive(_117);
        _117 = _79;
        StorageLive(_118);
        _118 = _53;
        StorageLive(_119);
        _119 = _3;
        _111 = check_obligation_collateral_deposit_reserve(move _112, move _113, move _117, move _118, move _119) -> [return: bb51, unwind: bb151];
    }

    bb51: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_113);
        StorageDead(_112);
        _110 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _111) -> [return: bb52, unwind: bb151];
    }

    bb52: {
        StorageDead(_111);
        _120 = discriminant(_110);
        switchInt(move _120) -> [0: bb53, 1: bb54, otherwise: bb16];
    }

    bb53: {
        StorageLive(_124);
        _124 = ((_110 as Continue).0: ());
        _109 = _124;
        StorageDead(_124);
        _350 = discriminant(_110);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = ((*_54).1: u64);
        _126 = Gt(move _127, const 0_u64);
        switchInt(move _126) -> [0: bb58, otherwise: bb56];
    }

    bb54: {
        StorageLive(_121);
        _121 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb55, unwind: bb156];
    }

    bb55: {
        StorageDead(_123);
        StorageDead(_121);
        _352 = discriminant(_110);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb143;
    }

    bb56: {
        StorageDead(_127);
        _128 = CheckedAdd(_16, const 1_u8);
        assert(!move (_128.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_u8) -> [success: bb57, unwind: bb151];
    }

    bb57: {
        _16 = move (_128.0: u8);
        _125 = const ();
        goto -> bb59;
    }

    bb58: {
        StorageDead(_127);
        _125 = const ();
        goto -> bb59;
    }

    bb59: {
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_129);
        _130 = discriminant(_17);
        switchInt(move _130) -> [1: bb60, otherwise: bb86];
    }

    bb60: {
        StorageLive(_131);
        _131 = (((_17 as Some).0: (&state::lending_market::ElevationGroup, u64)).0: &state::lending_market::ElevationGroup);
        StorageLive(_132);
        _132 = (((_17 as Some).0: (&state::lending_market::ElevationGroup, u64)).1: u64);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_131);
        _133 = state::lending_market::ElevationGroup::get_index(move _134) -> [return: bb61, unwind: bb151];
    }

    bb61: {
        StorageDead(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_81;
        _139 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _140) -> [return: bb62, unwind: bb151];
    }

    bb62: {
        StorageDead(_140);
        _138 = &(((*_139).9: state::reserve::ReserveConfig).22: [u8; 20]);
        _137 = move _138 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &((*_131).1: u8);
        _141 = &(*_142);
        _136 = core::slice::<impl [u8]>::contains(move _137, move _141) -> [return: bb63, unwind: bb151];
    }

    bb63: {
        switchInt(move _136) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_142);
        StorageDead(_139);
        _135 = const ();
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_79;
        StorageLive(_161);
        _161 = &((*_131).7: anchor_lang::prelude::Pubkey);
        _159 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _160, move _161) -> [return: bb70, unwind: bb151];
    }

    bb65: {
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_142);
        StorageDead(_139);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _338 = const _;
        _147 = &(*_338);
        _146 = LendingError::name(move _147) -> [return: bb66, unwind: bb151];
    }

    bb66: {
        StorageDead(_147);
        StorageLive(_149);
        StorageLive(_150);
        _150 = LendingError::InconsistentElevationGroup;
        _149 = <LendingError as Into<u32>>::into(move _150) -> [return: bb67, unwind: bb150];
    }

    bb67: {
        StorageDead(_150);
        StorageLive(_151);
        StorageLive(_152);
        _337 = const _;
        _152 = &(*_337);
        _151 = <LendingError as ToString>::to_string(move _152) -> [return: bb68, unwind: bb150];
    }

    bb68: {
        StorageDead(_152);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1042_u32 };
        _155 = anchor_lang::error::ErrorOrigin::Source(move _156);
        StorageDead(_156);
        _154 = std::option::Option::<ErrorOrigin>::Some(move _155);
        StorageDead(_155);
        StorageLive(_157);
        _157 = std::option::Option::<ComparedValues>::None;
        _145 = anchor_lang::error::AnchorError { error_name: move _146, error_code_number: move _149, error_msg: move _151, error_origin: move _154, compared_values: move _157 };
        StorageDead(_157);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        _144 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _145) -> [return: bb69, unwind: bb151];
    }

    bb69: {
        StorageDead(_145);
        _0 = std::result::Result::<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error>::Err(move _144);
        StorageDead(_144);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb142;
    }

    bb70: {
        switchInt(move _159) -> [0: bb77, otherwise: bb71];
    }

    bb71: {
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _336 = const _;
        _167 = &(*_336);
        _166 = LendingError::name(move _167) -> [return: bb72, unwind: bb151];
    }

    bb72: {
        StorageDead(_167);
        StorageLive(_169);
        StorageLive(_170);
        _170 = LendingError::ElevationGroupDebtReserveAsCollateral;
        _169 = <LendingError as Into<u32>>::into(move _170) -> [return: bb73, unwind: bb149];
    }

    bb73: {
        StorageDead(_170);
        StorageLive(_171);
        StorageLive(_172);
        _335 = const _;
        _172 = &(*_335);
        _171 = <LendingError as ToString>::to_string(move _172) -> [return: bb74, unwind: bb149];
    }

    bb74: {
        StorageDead(_172);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1050_u32 };
        _175 = anchor_lang::error::ErrorOrigin::Source(move _176);
        StorageDead(_176);
        _174 = std::option::Option::<ErrorOrigin>::Some(move _175);
        StorageDead(_175);
        StorageLive(_177);
        _177 = std::option::Option::<ComparedValues>::None;
        _165 = anchor_lang::error::AnchorError { error_name: move _166, error_code_number: move _169, error_msg: move _171, error_origin: move _174, compared_values: move _177 };
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_166);
        _164 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _165) -> [return: bb75, unwind: bb151];
    }

    bb75: {
        StorageDead(_165);
        StorageLive(_178);
        StorageLive(_179);
        _179 = _79;
        StorageLive(_180);
        _180 = ((*_131).7: anchor_lang::prelude::Pubkey);
        _178 = (move _179, move _180);
        StorageDead(_180);
        StorageDead(_179);
        _163 = anchor_lang::error::Error::with_pubkeys(move _164, move _178) -> [return: bb76, unwind: bb151];
    }

    bb76: {
        StorageDead(_178);
        StorageDead(_164);
        _0 = std::result::Result::<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error>::Err(move _163);
        StorageDead(_163);
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb142;
    }

    bb77: {
        StorageDead(_161);
        StorageDead(_160);
        _158 = const ();
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_81;
        _183 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _184) -> [return: bb78, unwind: bb151];
    }

    bb78: {
        StorageDead(_184);
        StorageLive(_185);
        _185 = _133;
        _186 = Len(((*_183).12: [u64; 32]));
        _187 = Lt(_185, _186);
        assert(move _187, "index out of bounds: the length is {} but the index is {}", move _186, _185) -> [success: bb79, unwind: bb151];
    }

    bb79: {
        _182 = ((*_183).12: [u64; 32])[_185];
        StorageLive(_188);
        _188 = ((*_54).3: u64);
        _181 = core::num::<impl u64>::saturating_sub(move _182, move _188) -> [return: bb80, unwind: bb151];
    }

    bb80: {
        StorageDead(_188);
        StorageDead(_182);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &mut _81;
        _189 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _190) -> [return: bb81, unwind: bb151];
    }

    bb81: {
        StorageDead(_190);
        StorageLive(_191);
        _191 = _133;
        _192 = Len(((*_189).12: [u64; 32]));
        _193 = Lt(_191, _192);
        assert(move _193, "index out of bounds: the length is {} but the index is {}", move _192, _191) -> [success: bb82, unwind: bb151];
    }

    bb82: {
        ((*_189).12: [u64; 32])[_191] = move _181;
        StorageDead(_181);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_185);
        StorageDead(_183);
        StorageLive(_194);
        _194 = _132;
        StorageLive(_195);
        StorageLive(_196);
        _196 = &mut _81;
        _195 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _196) -> [return: bb83, unwind: bb151];
    }

    bb83: {
        StorageDead(_196);
        StorageLive(_197);
        _197 = _133;
        _198 = Len(((*_195).12: [u64; 32]));
        _199 = Lt(_197, _198);
        assert(move _199, "index out of bounds: the length is {} but the index is {}", move _198, _197) -> [success: bb84, unwind: bb151];
    }

    bb84: {
        _200 = CheckedAdd(((*_195).12: [u64; 32])[_197], _194);
        assert(!move (_200.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_195).12: [u64; 32])[_197], move _194) -> [success: bb85, unwind: bb151];
    }

    bb85: {
        ((*_195).12: [u64; 32])[_197] = move (_200.0: u64);
        StorageDead(_194);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_201);
        _201 = _132;
        ((*_54).3: u64) = move _201;
        StorageDead(_201);
        _129 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb87;
    }

    bb86: {
        _129 = const ();
        goto -> bb87;
    }

    bb87: {
        StorageDead(_129);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_81;
        _205 = &(*_206);
        _204 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _205) -> [return: bb88, unwind: bb151];
    }

    bb88: {
        _203 = &(*_204);
        StorageDead(_205);
        StorageLive(_207);
        _207 = &(*_54);
        _202 = calculate_obligation_collateral_market_value(move _203, move _207) -> [return: bb89, unwind: bb151];
    }

    bb89: {
        StorageDead(_207);
        StorageDead(_203);
        StorageDead(_206);
        StorageDead(_204);
        StorageLive(_208);
        StorageLive(_209);
        _209 = _202;
        _208 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _209) -> [return: bb90, unwind: bb151];
    }

    bb90: {
        StorageDead(_209);
        ((*_54).2: u128) = move _208;
        StorageDead(_208);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &_81;
        _215 = &(*_216);
        _214 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _215) -> [return: bb91, unwind: bb151];
    }

    bb91: {
        _213 = &(*_214);
        StorageDead(_215);
        StorageLive(_217);
        _217 = _5;
        _212 = get_max_ltv_and_liquidation_threshold(move _213, move _217) -> [return: bb92, unwind: bb151];
    }

    bb92: {
        StorageDead(_217);
        StorageDead(_213);
        StorageLive(_210);
        _210 = (_212.0: u8);
        StorageLive(_211);
        _211 = (_212.1: u8);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_202;
        StorageLive(_221);
        _221 = &((*_2).21: u64);
        _219 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<u64>>::ge(move _220, move _221) -> [return: bb93, unwind: bb151];
    }

    bb93: {
        switchInt(move _219) -> [0: bb98, otherwise: bb94];
    }

    bb94: {
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_222);
        StorageLive(_223);
        _223 = _211;
        _222 = Gt(move _223, const 0_u8);
        switchInt(move _222) -> [0: bb97, otherwise: bb95];
    }

    bb95: {
        StorageDead(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = _8;
        StorageLive(_226);
        _226 = _211;
        _224 = <u8 as Ord>::min(move _225, move _226) -> [return: bb96, unwind: bb151];
    }

    bb96: {
        StorageDead(_226);
        StorageDead(_225);
        _8 = move _224;
        StorageDead(_224);
        _218 = const ();
        goto -> bb100;
    }

    bb97: {
        StorageDead(_223);
        goto -> bb99;
    }

    bb98: {
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb99;
    }

    bb99: {
        _218 = const ();
        goto -> bb100;
    }

    bb100: {
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_227);
        StorageLive(_228);
        _228 = _9;
        StorageLive(_229);
        _229 = _210;
        _227 = <u8 as Ord>::min(move _228, move _229) -> [return: bb101, unwind: bb151];
    }

    bb101: {
        StorageDead(_229);
        StorageDead(_228);
        _9 = move _227;
        StorageDead(_227);
        StorageLive(_230);
        StorageLive(_231);
        _231 = _10;
        StorageLive(_232);
        _232 = _202;
        _230 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _231, move _232) -> [return: bb102, unwind: bb151];
    }

    bb102: {
        StorageDead(_232);
        StorageDead(_231);
        _10 = move _230;
        StorageDead(_230);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &mut _11;
        StorageLive(_235);
        StorageLive(_236);
        _236 = _202;
        StorageLive(_237);
        StorageLive(_238);
        _238 = _210;
        _237 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u8>(move _238) -> [return: bb103, unwind: bb151];
    }

    bb103: {
        StorageDead(_238);
        _235 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _236, move _237) -> [return: bb104, unwind: bb151];
    }

    bb104: {
        StorageDead(_237);
        StorageDead(_236);
        _233 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as AddAssign>::add_assign(move _234, move _235) -> [return: bb105, unwind: bb151];
    }

    bb105: {
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &mut _12;
        StorageLive(_241);
        StorageLive(_242);
        _242 = _202;
        StorageLive(_243);
        StorageLive(_244);
        _244 = _211;
        _243 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u8>(move _244) -> [return: bb106, unwind: bb151];
    }

    bb106: {
        StorageDead(_244);
        _241 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _242, move _243) -> [return: bb107, unwind: bb151];
    }

    bb107: {
        StorageDead(_243);
        StorageDead(_242);
        _239 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as AddAssign>::add_assign(move _240, move _241) -> [return: bb108, unwind: bb151];
    }

    bb108: {
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_239);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_81;
        _246 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _247) -> [return: bb109, unwind: bb151];
    }

    bb109: {
        StorageDead(_247);
        _245 = (((*_246).9: state::reserve::ReserveConfig).1: u8);
        StorageLive(_248);
        _248 = _53;
        _249 = Len(((*_1).12: [u8; 8]));
        _250 = Lt(_248, _249);
        assert(move _250, "index out of bounds: the length is {} but the index is {}", move _249, _248) -> [success: bb110, unwind: bb151];
    }

    bb110: {
        ((*_1).12: [u8; 8])[_248] = move _245;
        StorageDead(_245);
        StorageDead(_248);
        StorageDead(_246);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &mut _14;
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_81;
        _255 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _256) -> [return: bb111, unwind: bb151];
    }

    bb111: {
        StorageDead(_256);
        _254 = &((*_255).1: state::last_update::LastUpdate);
        _253 = last_update::LastUpdate::get_price_status(move _254) -> [return: bb112, unwind: bb151];
    }

    bb112: {
        StorageDead(_254);
        _251 = <last_update::PriceStatusFlags as BitAndAssign>::bitand_assign(move _252, move _253) -> [return: bb113, unwind: bb151];
    }

    bb113: {
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_255);
        StorageDead(_251);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _334 = const _;
        _262 = &(*_334);
        _261 = &(*_262);
        _260 = move _261 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_81;
        _274 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _275) -> [return: bb114, unwind: bb151];
    }

    bb114: {
        StorageDead(_275);
        _273 = &(((*_274).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        _272 = token_info::TokenInfo::symbol(move _273) -> [return: bb115, unwind: bb151];
    }

    bb115: {
        StorageDead(_273);
        _271 = &_272;
        _270 = &_271;
        _269 = &(*_270);
        _268 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(move _269) -> [return: bb116, unwind: bb151];
    }

    bb116: {
        StorageDead(_269);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_81;
        _285 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _286) -> [return: bb117, unwind: bb151];
    }

    bb117: {
        _284 = &(*_285);
        StorageDead(_286);
        _283 = reserve::Reserve::collateral_exchange_rate(move _284) -> [return: bb118, unwind: bb151];
    }

    bb118: {
        _282 = &_283;
        StorageDead(_284);
        StorageLive(_287);
        StorageLive(_288);
        _288 = ((*_54).1: u64);
        _287 = <u64 as Into<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::into(move _288) -> [return: bb119, unwind: bb151];
    }

    bb119: {
        StorageDead(_288);
        _281 = reserve::CollateralExchangeRate::fraction_collateral_to_liquidity(move _282, move _287) -> [return: bb120, unwind: bb151];
    }

    bb120: {
        _280 = &_281;
        StorageDead(_287);
        StorageDead(_282);
        _279 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _280) -> [return: bb121, unwind: bb151];
    }

    bb121: {
        StorageDead(_280);
        _278 = &_279;
        _277 = &(*_278);
        _276 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _277) -> [return: bb122, unwind: bb151];
    }

    bb122: {
        StorageDead(_277);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_202;
        _292 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _293) -> [return: bb123, unwind: bb151];
    }

    bb123: {
        StorageDead(_293);
        _291 = &_292;
        _290 = &(*_291);
        _289 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _290) -> [return: bb124, unwind: bb151];
    }

    bb124: {
        StorageDead(_290);
        _267 = [move _268, move _276, move _289];
        StorageDead(_289);
        StorageDead(_276);
        StorageDead(_268);
        _266 = &_267;
        _265 = &(*_266);
        _264 = move _265 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_265);
        _259 = Arguments::<'_>::new_v1(move _260, move _264) -> [return: bb125, unwind: bb151];
    }

    bb125: {
        StorageDead(_264);
        StorageDead(_260);
        _258 = _print(move _259) -> [return: bb126, unwind: bb151];
    }

    bb126: {
        StorageDead(_259);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_285);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_262);
        StorageDead(_258);
        _257 = const ();
        StorageDead(_257);
        _47 = const ();
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_202);
        drop(_81) -> [return: bb127, unwind: bb152];
    }

    bb127: {
        StorageDead(_81);
        StorageDead(_79);
        drop(_55) -> [return: bb128, unwind: bb154];
    }

    bb128: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        _46 = const ();
        goto -> bb13;
    }

    bb129: {
        switchInt(move _295) -> [0: bb140, otherwise: bb130];
    }

    bb130: {
        StorageDead(_297);
        StorageDead(_296);
        _299 = discriminant(_5);
        switchInt(move _299) -> [1: bb131, otherwise: bb139];
    }

    bb131: {
        StorageLive(_300);
        _300 = ((_5 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = ((*_300).5: u8);
        StorageLive(_304);
        _304 = _16;
        _302 = Lt(move _303, move _304);
        switchInt(move _302) -> [0: bb138, otherwise: bb132];
    }

    bb132: {
        StorageDead(_304);
        StorageDead(_303);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _343 = const _;
        _310 = &(*_343);
        _309 = LendingError::name(move _310) -> [return: bb133, unwind: bb154];
    }

    bb133: {
        StorageDead(_310);
        StorageLive(_312);
        StorageLive(_313);
        _313 = LendingError::ObligationCollateralExceedsElevationGroupLimit;
        _312 = <LendingError as Into<u32>>::into(move _313) -> [return: bb134, unwind: bb148];
    }

    bb134: {
        StorageDead(_313);
        StorageLive(_314);
        StorageLive(_315);
        _342 = const _;
        _315 = &(*_342);
        _314 = <LendingError as ToString>::to_string(move _315) -> [return: bb135, unwind: bb148];
    }

    bb135: {
        StorageDead(_315);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1105_u32 };
        _318 = anchor_lang::error::ErrorOrigin::Source(move _319);
        StorageDead(_319);
        _317 = std::option::Option::<ErrorOrigin>::Some(move _318);
        StorageDead(_318);
        StorageLive(_320);
        _320 = std::option::Option::<ComparedValues>::None;
        _308 = anchor_lang::error::AnchorError { error_name: move _309, error_code_number: move _312, error_msg: move _314, error_origin: move _317, compared_values: move _320 };
        StorageDead(_320);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_309);
        _307 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _308) -> [return: bb136, unwind: bb154];
    }

    bb136: {
        StorageDead(_308);
        StorageLive(_321);
        StorageLive(_322);
        _322 = ((*_300).5: u8);
        StorageLive(_323);
        _323 = _16;
        _321 = (move _322, move _323);
        StorageDead(_323);
        StorageDead(_322);
        _306 = anchor_lang::error::Error::with_values::<u8, u8>(move _307, move _321) -> [return: bb137, unwind: bb154];
    }

    bb137: {
        StorageDead(_321);
        StorageDead(_307);
        _0 = std::result::Result::<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error>::Err(move _306);
        StorageDead(_306);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_300);
        StorageDead(_295);
        StorageDead(_294);
        goto -> bb146;
    }

    bb138: {
        StorageDead(_304);
        StorageDead(_303);
        _301 = const ();
        StorageDead(_302);
        StorageDead(_301);
        _294 = const ();
        StorageDead(_300);
        goto -> bb141;
    }

    bb139: {
        _294 = const ();
        goto -> bb141;
    }

    bb140: {
        StorageDead(_297);
        StorageDead(_296);
        _294 = const ();
        goto -> bb141;
    }

    bb141: {
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_324);
        StorageLive(_325);
        _325 = _8;
        StorageLive(_326);
        _326 = _9;
        StorageLive(_327);
        _327 = _13;
        StorageLive(_328);
        _328 = _10;
        StorageLive(_329);
        _329 = _11;
        StorageLive(_330);
        _330 = _12;
        StorageLive(_331);
        _331 = _14;
        StorageLive(_332);
        _332 = _15;
        _324 = state::types::RefreshObligationDepositsResult { lowest_deposit_liquidation_ltv_threshold_pct: move _325, lowest_deposit_max_ltv_pct: move _326, num_of_obsolete_reserves: move _327, deposited_value_f: move _328, allowed_borrow_value_f: move _329, unhealthy_borrow_value_f: move _330, prices_state: move _331, borrowing_disabled: move _332 };
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_325);
        _0 = std::result::Result::<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error>::Ok(move _324);
        StorageDead(_324);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        drop(_6) -> [return: bb147, unwind: bb155];
    }

    bb142: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_129);
        goto -> bb143;
    }

    bb143: {
        drop(_81) -> [return: bb144, unwind: bb152];
    }

    bb144: {
        StorageDead(_81);
        StorageDead(_79);
        drop(_55) -> [return: bb145, unwind: bb154];
    }

    bb145: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        drop(_6) -> [return: bb147, unwind: bb155];
    }

    bb147: {
        return;
    }

    bb148 (cleanup): {
        drop(_309) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_166) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_146) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_81) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_55) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_62) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_6) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        resume;
    }

    bb156 (cleanup): {
        _358 = discriminant(_110);
        goto -> bb151;
    }

    bb157 (cleanup): {
        _359 = discriminant(_82);
        goto -> bb152;
    }

    bb158 (cleanup): {
        _360 = discriminant(_56);
        goto -> bb154;
    }

    bb159 (cleanup): {
        drop(_58) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        switchInt(_345) -> [0: bb154, otherwise: bb159];
    }
}
