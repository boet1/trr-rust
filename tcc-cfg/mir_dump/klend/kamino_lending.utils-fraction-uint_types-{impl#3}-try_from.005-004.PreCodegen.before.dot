digraph Mir_0_11328 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::&lt;impl TryFrom&lt;uint_types::U256&gt; for u128&gt;::try_from(_1: utils::fraction::uint_types::U256) -&gt; std::result::Result&lt;u128, &amp;ReErased str&gt;<br align="left"/>let _2: [u64; 4_usize];<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _5: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _6: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _7: ();<br align="left"/>let _8: ();<br align="left"/>let mut _9: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _10: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _11: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: isize;<br align="left"/>let mut _13: !;<br align="left"/>let _14: usize;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: u64;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: &amp;ReErased str;<br align="left"/>let _22: &amp;ReErased str;<br align="left"/>let mut _23: u128;<br align="left"/>let mut _24: u128;<br align="left"/>let mut _25: u128;<br align="left"/>let mut _26: u64;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: u32;<br align="left"/>let mut _31: bool;<br align="left"/>let mut _32: u128;<br align="left"/>let mut _33: u64;<br align="left"/>let _34: usize;<br align="left"/>let mut _35: usize;<br align="left"/>let mut _36: bool;<br align="left"/>let mut _37: (u128, bool);<br align="left"/>debug u =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>debug iter =&gt; _6;<br align="left"/>debug i =&gt; _14;<br align="left"/>>;
    bb0__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = (_1.0: [u64; 4])<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = std::ops::Range::&lt;usize&gt; { start: const 2_usize, end: const 4_usize }<br/></td></tr><tr><td align="left">_4 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _5)</td></tr></table>>];
    bb1__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>_6 = move _4<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;mut _6<br/>_10 = &amp;mut (*_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _10)</td></tr></table>>];
    bb3__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_9 as Some).0: usize)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _14<br/>_18 = Len(_2)<br/>_19 = Lt(_17, _18)<br/></td></tr><tr><td align="left">assert(move _19, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _18, _17)</td></tr></table>>];
    bb5__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_3 = const ()<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = const 1_usize<br/>_28 = Len(_2)<br/>_29 = Lt(_27, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _27)</td></tr></table>>];
    bb7__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_16 = _2[_17]<br/>_15 = Ne(move _16, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb8__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = const &quot;integer overflow when casting to u128&quot;<br/>_21 = &amp;(*_22)<br/>_0 = std::result::Result::&lt;u128, &amp;str&gt;::Err(move _21)<br/>StorageDead(_21)<br/>StorageDead(_22)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>_8 = const ()<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>_7 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_26 = _2[_27]<br/>_25 = move _26 as u128 (IntToInt)<br/>StorageDead(_26)<br/>_30 = const 64_i32 as u32 (IntToInt)<br/>_31 = Lt(move _30, const 128_u32)<br/></td></tr><tr><td align="left">assert(move _31, &quot;attempt to shift left by `{}`, which would overflow&quot;, const 64_i32)</td></tr></table>>];
    bb11__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_24 = Shl(move _25, const 64_i32)<br/>StorageDead(_25)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = const 0_usize<br/>_35 = Len(_2)<br/>_36 = Lt(_34, _35)<br/></td></tr><tr><td align="left">assert(move _36, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _35, _34)</td></tr></table>>];
    bb12__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_33 = _2[_34]<br/>_32 = move _33 as u128 (IntToInt)<br/>StorageDead(_33)<br/>_37 = CheckedAdd(_24, _32)<br/></td></tr><tr><td align="left">assert(!move (_37.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _24, move _32)</td></tr></table>>];
    bb13__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_23 = move (_37.0: u128)<br/>StorageDead(_32)<br/>StorageDead(_24)<br/>_0 = std::result::Result::&lt;u128, &amp;str&gt;::Ok(move _23)<br/>StorageDead(_23)<br/>StorageDead(_2)<br/>StorageDead(_34)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_11328 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11328 -> bb1__0_11328 [label="return"];
    bb1__0_11328 -> bb2__0_11328 [label=""];
    bb2__0_11328 -> bb3__0_11328 [label="return"];
    bb3__0_11328 -> bb6__0_11328 [label="0"];
    bb3__0_11328 -> bb4__0_11328 [label="1"];
    bb3__0_11328 -> bb5__0_11328 [label="otherwise"];
    bb4__0_11328 -> bb7__0_11328 [label="success"];
    bb6__0_11328 -> bb10__0_11328 [label="success"];
    bb7__0_11328 -> bb9__0_11328 [label="0"];
    bb7__0_11328 -> bb8__0_11328 [label="otherwise"];
    bb8__0_11328 -> bb14__0_11328 [label=""];
    bb9__0_11328 -> bb2__0_11328 [label=""];
    bb10__0_11328 -> bb11__0_11328 [label="success"];
    bb11__0_11328 -> bb12__0_11328 [label="success"];
    bb12__0_11328 -> bb13__0_11328 [label="success"];
    bb13__0_11328 -> bb14__0_11328 [label=""];
}
