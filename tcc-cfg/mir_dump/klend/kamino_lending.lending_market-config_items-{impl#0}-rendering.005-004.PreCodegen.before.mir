// MIR for `config_items::<impl at programs\klend\src\lending_market\config_items.rs:94:1: 95:44>::rendering` before PreCodegen

fn config_items::<impl at programs\klend\src\lending_market\config_items.rs:94:1: 95:44>::rendering(_1: ConfigItemUpdater<'_, H, T, S, G, V, R>, _2: NR) -> ConfigItemUpdater<'_, H, T, S, G, V, NR> {
    debug self => _1;
    debug new => _2;
    let mut _0: lending_market::config_items::ConfigItemUpdater<'_, H, T, S, G, V, NR>;
    let _3: &mut H;
    let _4: std::string::String;
    let _5: std::marker::PhantomData<T>;
    let _6: G;
    let _7: S;
    let _8: V;
    let _9: R;
    let mut _10: &mut H;
    let mut _11: std::string::String;
    let mut _12: std::marker::PhantomData<T>;
    let mut _13: G;
    let mut _14: S;
    let mut _15: V;
    let mut _16: NR;
    scope 1 {
        debug target => _3;
        debug name => _4;
        debug value_type_phantom => _5;
        debug getter => _6;
        debug setter => _7;
        debug validator => _8;
        debug _replaced => _9;
    }

    bb0: {
        StorageLive(_3);
        _3 = move (_1.0: &mut H);
        StorageLive(_4);
        _4 = move (_1.1: std::string::String);
        StorageLive(_5);
        _5 = (_1.6: std::marker::PhantomData<T>);
        StorageLive(_6);
        _6 = move (_1.3: G);
        StorageLive(_7);
        _7 = move (_1.2: S);
        StorageLive(_8);
        _8 = move (_1.4: V);
        StorageLive(_9);
        _9 = move (_1.5: R);
        StorageLive(_10);
        _10 = &mut (*_3);
        StorageLive(_11);
        _11 = move _4;
        StorageLive(_12);
        _12 = _5;
        StorageLive(_13);
        _13 = move _6;
        StorageLive(_14);
        _14 = move _7;
        StorageLive(_15);
        _15 = move _8;
        StorageLive(_16);
        _16 = move _2;
        _0 = ConfigItemUpdater::<'_, H, T, S, G, V, NR> { target: move _10, name: move _11, setter: move _14, getter: move _13, validator: move _15, renderer: move _16, value_type_phantom: move _12 };
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        drop(_9) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}
