// MIR for `handlers::handler_repay_and_withdraw_redeem::<impl at programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:243:10: 243:18>::try_accounts` after PreCodegen

fn handlers::handler_repay_and_withdraw_redeem::<impl at programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:243:10: 243:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut RepayAndWithdrawBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error>;
    let _6: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>>;
    let mut _8: std::result::Result<handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: &[u8];
    let mut _12: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityBumps;
    let mut _13: &mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>>;
    let mut _22: std::result::Result<handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _25: &[u8];
    let mut _26: &mut handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateralBumps;
    let mut _27: &mut handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateralBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>>;
    let mut _36: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error>;
    let mut _37: &anchor_lang::prelude::Pubkey;
    let mut _38: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _39: &[u8];
    let mut _40: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _41: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _42: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>>;
    let mut _50: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error>;
    let mut _51: &anchor_lang::prelude::Pubkey;
    let mut _52: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _53: &[u8];
    let mut _54: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _55: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _56: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, farms::program::Farms>>;
    let mut _64: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _65: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _66: &anchor_lang::prelude::Pubkey;
    let mut _67: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _68: &[u8];
    let mut _69: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdrawBumps;
    let mut _70: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _71: {closure@programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:243:10: 243:18};
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _77: ();
    let mut _78: bool;
    let mut _79: &anchor_lang::prelude::Pubkey;
    let _80: anchor_lang::prelude::Pubkey;
    let mut _81: &anchor_lang::prelude::Signer<'_>;
    let mut _82: &anchor_lang::prelude::Pubkey;
    let _83: anchor_lang::prelude::Pubkey;
    let mut _84: &anchor_lang::prelude::Signer<'_>;
    let mut _85: !;
    let mut _86: anchor_lang::error::Error;
    let mut _87: anchor_lang::error::Error;
    let mut _88: LendingError;
    let _89: ();
    let mut _90: bool;
    let mut _91: &anchor_lang::prelude::Pubkey;
    let _92: anchor_lang::prelude::Pubkey;
    let mut _93: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _94: &anchor_lang::prelude::Pubkey;
    let _95: anchor_lang::prelude::Pubkey;
    let mut _96: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _97: !;
    let mut _98: anchor_lang::error::Error;
    let mut _99: anchor_lang::error::Error;
    let mut _100: LendingError;
    let _101: ();
    let mut _102: bool;
    let mut _103: &anchor_lang::prelude::Pubkey;
    let _104: anchor_lang::prelude::Pubkey;
    let mut _105: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _106: &anchor_lang::prelude::Pubkey;
    let _107: anchor_lang::prelude::Pubkey;
    let mut _108: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _109: !;
    let mut _110: anchor_lang::error::Error;
    let mut _111: anchor_lang::error::Error;
    let mut _112: LendingError;
    let mut _113: handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _114: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _115: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>;
    let mut _116: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _117: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _118: anchor_lang::prelude::Program<'_, farms::program::Farms>;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    scope 1 {
        debug repay_accounts => _6;
        let _20: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>;
        let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _33: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>;
        scope 6 {
            debug withdraw_accounts => _20;
            let _34: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
            let _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _47: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
            scope 11 {
                debug collateral_farms_accounts => _34;
                let _48: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
                let _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _61: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
                scope 16 {
                    debug debt_farms_accounts => _48;
                    let _62: anchor_lang::prelude::Program<'_, farms::program::Farms>;
                    let _73: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _76: anchor_lang::prelude::Program<'_, farms::program::Farms>;
                    scope 21 {
                        debug farms_program => _62;
                    }
                    scope 22 {
                        debug residual => _73;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _76;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _58;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _61;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _44;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _47;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _30;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _33;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = &mut (*_2);
        StorageLive(_11);
        _11 = &(*_3);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut ((*_4).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityBumps);
        _12 = &mut (*_13);
        StorageLive(_14);
        _14 = &mut (*_5);
        _8 = <handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_> as anchor_lang::Accounts<'_, handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityBumps>>::try_accounts(move _9, move _10, move _11, move _12, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb59];
    }

    bb2: {
        StorageDead(_8);
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = move ((_7 as Continue).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        _6 = move _19;
        StorageDead(_19);
        _119 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &mut (*_2);
        StorageLive(_25);
        _25 = &(*_3);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut ((*_4).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateralBumps);
        _26 = &mut (*_27);
        StorageLive(_28);
        _28 = &mut (*_5);
        _22 = <handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_> as anchor_lang::Accounts<'_, handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateralBumps>>::try_accounts(move _23, move _24, move _25, move _26, move _28) -> [return: bb7, unwind: bb58];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        _137 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb53;
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb8, unwind: bb58];
    }

    bb8: {
        StorageDead(_22);
        _29 = discriminant(_21);
        switchInt(move _29) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_33);
        _33 = move ((_21 as Continue).0: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>);
        _20 = move _33;
        StorageDead(_33);
        _121 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_1);
        StorageLive(_38);
        _38 = &mut (*_2);
        StorageLive(_39);
        _39 = &(*_3);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut ((*_4).2: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps);
        _40 = &mut (*_41);
        StorageLive(_42);
        _42 = &mut (*_5);
        _36 = <handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_> as anchor_lang::Accounts<'_, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps>>::try_accounts(move _37, move _38, move _39, move _40, move _42) -> [return: bb12, unwind: bb57];
    }

    bb10: {
        StorageLive(_30);
        _30 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb11, unwind: bb63];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        _135 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        goto -> bb52;
    }

    bb12: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        StorageDead(_36);
        _43 = discriminant(_35);
        switchInt(move _43) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_47);
        _47 = move ((_35 as Continue).0: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _34 = move _47;
        StorageDead(_47);
        _123 = discriminant(_35);
        StorageDead(_41);
        StorageDead(_35);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_1);
        StorageLive(_52);
        _52 = &mut (*_2);
        StorageLive(_53);
        _53 = &(*_3);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut ((*_4).3: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps);
        _54 = &mut (*_55);
        StorageLive(_56);
        _56 = &mut (*_5);
        _50 = <handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_> as anchor_lang::Accounts<'_, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps>>::try_accounts(move _51, move _52, move _53, move _54, move _56) -> [return: bb17, unwind: bb56];
    }

    bb15: {
        StorageLive(_44);
        _44 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _46) -> [return: bb16, unwind: bb62];
    }

    bb16: {
        StorageDead(_46);
        StorageDead(_44);
        _133 = discriminant(_35);
        StorageDead(_41);
        StorageDead(_35);
        goto -> bb51;
    }

    bb17: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        _49 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _50) -> [return: bb18, unwind: bb56];
    }

    bb18: {
        StorageDead(_50);
        _57 = discriminant(_49);
        switchInt(move _57) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_61);
        _61 = move ((_49 as Continue).0: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _48 = move _61;
        StorageDead(_61);
        _125 = discriminant(_49);
        StorageDead(_55);
        StorageDead(_49);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_1);
        StorageLive(_67);
        _67 = &mut (*_2);
        StorageLive(_68);
        _68 = &(*_3);
        StorageLive(_69);
        _69 = &mut (*_4);
        StorageLive(_70);
        _70 = &mut (*_5);
        _65 = <anchor_lang::prelude::Program<'_, Farms> as anchor_lang::Accounts<'_, RepayAndWithdrawBumps>>::try_accounts(move _66, move _67, move _68, move _69, move _70) -> [return: bb22, unwind: bb55];
    }

    bb20: {
        StorageLive(_58);
        _58 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <std::result::Result<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _60) -> [return: bb21, unwind: bb61];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_58);
        _131 = discriminant(_49);
        StorageDead(_55);
        StorageDead(_49);
        goto -> bb50;
    }

    bb22: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_71);
        _71 = {closure@programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:243:10: 243:18};
        _64 = std::result::Result::<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:243:10: 243:18}>(move _65, move _71) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        StorageDead(_71);
        StorageDead(_65);
        _63 = <std::result::Result<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error> as Try>::branch(move _64) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        StorageDead(_64);
        _72 = discriminant(_63);
        switchInt(move _72) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_76);
        _76 = move ((_63 as Continue).0: anchor_lang::prelude::Program<'_, farms::program::Farms>);
        _62 = move _76;
        StorageDead(_76);
        _127 = discriminant(_63);
        StorageDead(_63);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(_6.0: anchor_lang::prelude::Signer<'_>);
        _80 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _81) -> [return: bb28, unwind: bb55];
    }

    bb26: {
        StorageLive(_73);
        _73 = move ((_63 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_75);
        _75 = move _73;
        _0 = <std::result::Result<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _75) -> [return: bb27, unwind: bb60];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_73);
        _129 = discriminant(_63);
        StorageDead(_63);
        goto -> bb49;
    }

    bb28: {
        _79 = &_80;
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(_20.0: anchor_lang::prelude::Signer<'_>);
        _83 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _84) -> [return: bb29, unwind: bb55];
    }

    bb29: {
        _82 = &_83;
        StorageDead(_84);
        _78 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _79, move _82) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        switchInt(move _78) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_83);
        StorageDead(_80);
        _77 = const ();
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(_6.1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _92 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::Key>::key(move _93) -> [return: bb35, unwind: bb55];
    }

    bb32: {
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_83);
        StorageDead(_80);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = LendingError::ObligationOwnersMustMatch;
        _87 = <anchor_lang::error::Error as From<LendingError>>::from(move _88) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        StorageDead(_88);
        _86 = anchor_lang::error::Error::with_account_name::<&str>(move _87, const "repay_accounts") -> [return: bb34, unwind: bb55];
    }

    bb34: {
        StorageDead(_87);
        _0 = std::result::Result::<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error>::Err(move _86);
        StorageDead(_86);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb49;
    }

    bb35: {
        _91 = &_92;
        StorageDead(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(_20.1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _95 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::Key>::key(move _96) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _94 = &_95;
        StorageDead(_96);
        _90 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _91, move _94) -> [return: bb37, unwind: bb55];
    }

    bb37: {
        switchInt(move _90) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_95);
        StorageDead(_92);
        _89 = const ();
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &(_6.2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _104 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _105) -> [return: bb42, unwind: bb55];
    }

    bb39: {
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_95);
        StorageDead(_92);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = LendingError::ObligationsMustMatch;
        _99 = <anchor_lang::error::Error as From<LendingError>>::from(move _100) -> [return: bb40, unwind: bb55];
    }

    bb40: {
        StorageDead(_100);
        _98 = anchor_lang::error::Error::with_account_name::<&str>(move _99, const "repay_accounts") -> [return: bb41, unwind: bb55];
    }

    bb41: {
        StorageDead(_99);
        _0 = std::result::Result::<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error>::Err(move _98);
        StorageDead(_98);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb49;
    }

    bb42: {
        _103 = &_104;
        StorageDead(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &(_20.2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _107 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _108) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        _106 = &_107;
        StorageDead(_108);
        _102 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _103, move _106) -> [return: bb44, unwind: bb55];
    }

    bb44: {
        switchInt(move _102) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_107);
        StorageDead(_104);
        _101 = const ();
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_113);
        StorageLive(_114);
        _114 = move _6;
        StorageLive(_115);
        _115 = move _20;
        StorageLive(_116);
        _116 = move _34;
        StorageLive(_117);
        _117 = move _48;
        StorageLive(_118);
        _118 = move _62;
        _113 = handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw::<'_> { repay_accounts: move _114, withdraw_accounts: move _115, collateral_farms_accounts: move _116, debt_farms_accounts: move _117, farms_program: move _118 };
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        _0 = std::result::Result::<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error>::Ok(move _113);
        StorageDead(_113);
        StorageDead(_62);
        StorageDead(_48);
        StorageDead(_34);
        StorageDead(_20);
        StorageDead(_6);
        goto -> bb54;
    }

    bb46: {
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_107);
        StorageDead(_104);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = LendingError::LendingMarketsMustMatch;
        _111 = <anchor_lang::error::Error as From<LendingError>>::from(move _112) -> [return: bb47, unwind: bb55];
    }

    bb47: {
        StorageDead(_112);
        _110 = anchor_lang::error::Error::with_account_name::<&str>(move _111, const "repay_accounts") -> [return: bb48, unwind: bb55];
    }

    bb48: {
        StorageDead(_111);
        _0 = std::result::Result::<handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>, anchor_lang::error::Error>::Err(move _110);
        StorageDead(_110);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_62);
        drop(_48) -> [return: bb50, unwind: bb56];
    }

    bb50: {
        StorageDead(_48);
        drop(_34) -> [return: bb51, unwind: bb57];
    }

    bb51: {
        StorageDead(_34);
        drop(_20) -> [return: bb52, unwind: bb58];
    }

    bb52: {
        StorageDead(_20);
        drop(_6) -> [return: bb53, unwind: bb59];
    }

    bb53: {
        StorageDead(_6);
        goto -> bb54;
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_48) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_34) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_20) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_6) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        resume;
    }

    bb60 (cleanup): {
        _139 = discriminant(_63);
        goto -> bb55;
    }

    bb61 (cleanup): {
        _140 = discriminant(_49);
        goto -> bb56;
    }

    bb62 (cleanup): {
        _141 = discriminant(_35);
        goto -> bb57;
    }

    bb63 (cleanup): {
        _142 = discriminant(_21);
        goto -> bb58;
    }

    bb64 (cleanup): {
        _143 = discriminant(_7);
        goto -> bb59;
    }
}
