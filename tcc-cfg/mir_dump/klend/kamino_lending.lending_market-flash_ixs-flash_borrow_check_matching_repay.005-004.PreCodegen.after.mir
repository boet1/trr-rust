// MIR for `flash_borrow_check_matching_repay` after PreCodegen

fn flash_borrow_check_matching_repay(_1: u64, _2: &Instruction, _3: &Instruction, _4: usize) -> std::result::Result<(), anchor_lang::error::Error> {
    debug liquidity_amount => _1;
    debug borrow_ix => _2;
    debug repay_ix => _3;
    debug borrow_index => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: instruction::FlashRepayReserveLiquidity;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, instruction::FlashRepayReserveLiquidity>;
    let mut _7: std::result::Result<instruction::FlashRepayReserveLiquidity, std::io::Error>;
    let mut _8: &[u8];
    let _9: &[u8];
    let _10: &[u8];
    let mut _11: &std::vec::Vec<u8>;
    let mut _12: std::ops::RangeFrom<usize>;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _17: instruction::FlashRepayReserveLiquidity;
    let _20: ();
    let mut _21: bool;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: !;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: anchor_lang::error::Error;
    let mut _29: anchor_lang::error::AnchorError;
    let mut _30: std::string::String;
    let mut _31: &LendingError;
    let _32: LendingError;
    let mut _33: u32;
    let mut _34: LendingError;
    let mut _35: std::string::String;
    let mut _36: &LendingError;
    let _37: LendingError;
    let mut _38: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _39: anchor_lang::error::ErrorOrigin;
    let mut _40: anchor_lang::error::Source;
    let mut _41: std::option::Option<anchor_lang::error::ComparedValues>;
    let _42: ();
    let mut _43: bool;
    let mut _44: usize;
    let mut _45: u8;
    let mut _46: usize;
    let mut _47: !;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: &std::string::String;
    let _52: &std::string::String;
    let _53: std::string::String;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[&str; 2];
    let _58: &[&str; 2];
    let _59: [&str; 2];
    let mut _60: &[core::fmt::rt::Argument<'_>];
    let mut _61: &[core::fmt::rt::Argument<'_>; 2];
    let _62: &[core::fmt::rt::Argument<'_>; 2];
    let _63: [core::fmt::rt::Argument<'_>; 2];
    let mut _64: core::fmt::rt::Argument<'_>;
    let mut _65: &u8;
    let _66: &u8;
    let mut _67: core::fmt::rt::Argument<'_>;
    let mut _68: &usize;
    let _69: &usize;
    let mut _70: anchor_lang::error::Error;
    let mut _71: anchor_lang::error::AnchorError;
    let mut _72: std::string::String;
    let mut _73: &LendingError;
    let _74: LendingError;
    let mut _75: u32;
    let mut _76: LendingError;
    let mut _77: std::string::String;
    let mut _78: &LendingError;
    let _79: LendingError;
    let mut _80: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _81: anchor_lang::error::ErrorOrigin;
    let mut _82: anchor_lang::error::Source;
    let mut _83: std::option::Option<anchor_lang::error::ComparedValues>;
    let _84: ();
    let mut _85: bool;
    let mut _86: usize;
    let mut _87: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _88: usize;
    let mut _89: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _90: !;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: anchor_lang::error::Error;
    let mut _95: anchor_lang::error::AnchorError;
    let mut _96: std::string::String;
    let mut _97: &LendingError;
    let _98: LendingError;
    let mut _99: u32;
    let mut _100: LendingError;
    let mut _101: std::string::String;
    let mut _102: &LendingError;
    let _103: LendingError;
    let mut _104: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _105: anchor_lang::error::ErrorOrigin;
    let mut _106: anchor_lang::error::Source;
    let mut _107: std::option::Option<anchor_lang::error::ComparedValues>;
    let _108: ();
    let mut _109: std::iter::Enumerate<std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>>;
    let mut _110: std::iter::Enumerate<std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>>;
    let mut _111: std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>;
    let mut _112: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _113: &[anchor_lang::prelude::AccountMeta];
    let _114: &[anchor_lang::prelude::AccountMeta];
    let mut _115: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _116: std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>;
    let mut _117: &[anchor_lang::prelude::AccountMeta];
    let _118: &[anchor_lang::prelude::AccountMeta];
    let mut _119: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _121: ();
    let _122: ();
    let mut _123: std::option::Option<(usize, (&anchor_lang::prelude::AccountMeta, &anchor_lang::prelude::AccountMeta))>;
    let mut _124: &mut std::iter::Enumerate<std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>>;
    let mut _125: &mut std::iter::Enumerate<std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>>;
    let mut _126: isize;
    let mut _127: !;
    let mut _133: bool;
    let mut _134: &&anchor_lang::prelude::Pubkey;
    let mut _135: &&anchor_lang::prelude::Pubkey;
    let mut _136: !;
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 3];
    let _147: &[&str; 3];
    let _148: [&str; 3];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 3];
    let _151: &[core::fmt::rt::Argument<'_>; 3];
    let _152: [core::fmt::rt::Argument<'_>; 3];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &usize;
    let _155: &usize;
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &&anchor_lang::prelude::Pubkey;
    let _158: &&anchor_lang::prelude::Pubkey;
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: &&anchor_lang::prelude::Pubkey;
    let _161: &&anchor_lang::prelude::Pubkey;
    let mut _162: anchor_lang::error::Error;
    let mut _163: anchor_lang::error::AnchorError;
    let mut _164: std::string::String;
    let mut _165: &LendingError;
    let _166: LendingError;
    let mut _167: u32;
    let mut _168: LendingError;
    let mut _169: std::string::String;
    let mut _170: &LendingError;
    let _171: LendingError;
    let mut _172: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _173: anchor_lang::error::ErrorOrigin;
    let mut _174: anchor_lang::error::Source;
    let mut _175: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _176: ();
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    scope 1 {
        debug repay_ix_data => _5;
        let _18: u64;
        scope 6 {
            debug repay_liquidity_amount => _18;
            let _19: u8;
            scope 7 {
                debug borrow_instruction_index => _19;
                let _54: std::string::String;
                let mut _120: std::iter::Enumerate<std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>>;
                let mut _177: &LendingError;
                let mut _178: &LendingError;
                let mut _179: &LendingError;
                let mut _180: &LendingError;
                let mut _181: &[&str; 2];
                let mut _182: &LendingError;
                let mut _183: &LendingError;
                scope 8 {
                    debug res => _54;
                }
                scope 9 {
                    debug iter => _120;
                    let _128: usize;
                    let _129: &anchor_lang::prelude::AccountMeta;
                    let _130: &anchor_lang::prelude::AccountMeta;
                    scope 10 {
                        debug idx => _128;
                        debug account_borrow => _129;
                        debug account_repay => _130;
                        let _131: &anchor_lang::prelude::Pubkey;
                        scope 11 {
                            debug account_borrow_pk => _131;
                            let _132: &anchor_lang::prelude::Pubkey;
                            scope 12 {
                                debug account_repay_pk => _132;
                                let _143: std::string::String;
                                let mut _184: &LendingError;
                                let mut _185: &LendingError;
                                let mut _186: &[&str; 3];
                                scope 13 {
                                    debug res => _143;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_3).2: std::vec::Vec<u8>);
        StorageLive(_12);
        _12 = RangeFrom::<usize> { start: const 8_usize };
        _10 = <Vec<u8> as Index<RangeFrom<usize>>>::index(move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = &(*_10);
        _8 = &(*_9);
        _7 = <instruction::FlashRepayReserveLiquidity as BorshDeserialize>::try_from_slice(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _6 = <std::result::Result<instruction::FlashRepayReserveLiquidity, std::io::Error> as Try>::branch(move _7) -> [return: bb3, unwind: bb73];
    }

    bb3: {
        StorageDead(_7);
        _13 = discriminant(_6);
        switchInt(move _13) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = move ((_6 as Continue).0: instruction::FlashRepayReserveLiquidity);
        _5 = move _17;
        StorageDead(_17);
        _187 = discriminant(_6);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_18);
        _18 = (_5.0: u64);
        StorageLive(_19);
        _19 = (_5.1: u8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _18;
        StorageLive(_23);
        _23 = _1;
        _21 = Ne(move _22, move _23);
        switchInt(move _21) -> [0: bb14, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_14);
        _14 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _16) -> [return: bb7, unwind: bb74];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_14);
        _189 = discriminant(_6);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb65;
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const "Liquidity amount for flash repay doesn't match borrow";
        _26 = &(*_27);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _178 = const _;
        _31 = &(*_178);
        _30 = LendingError::name(move _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = LendingError::InvalidFlashRepay;
        _33 = <LendingError as Into<u32>>::into(move _34) -> [return: bb11, unwind: bb72];
    }

    bb11: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _177 = const _;
        _36 = &(*_177);
        _35 = <LendingError as ToString>::to_string(move _36) -> [return: bb12, unwind: bb72];
    }

    bb12: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 158_u32 };
        _39 = anchor_lang::error::ErrorOrigin::Source(move _40);
        StorageDead(_40);
        _38 = std::option::Option::<ErrorOrigin>::Some(move _39);
        StorageDead(_39);
        StorageLive(_41);
        _41 = std::option::Option::<ComparedValues>::None;
        _29 = anchor_lang::error::AnchorError { error_name: move _30, error_code_number: move _33, error_msg: move _35, error_origin: move _38, compared_values: move _41 };
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        _28 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _29) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        StorageDead(_29);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _28);
        StorageDead(_28);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb64;
    }

    bb14: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _19;
        _44 = <usize as From<u8>>::from(move _45) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_45);
        StorageLive(_46);
        _46 = _4;
        _43 = Ne(move _44, move _46);
        switchInt(move _43) -> [0: bb28, otherwise: bb16];
    }

    bb16: {
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _181 = const _;
        _58 = &(*_181);
        _57 = &(*_58);
        _56 = move _57 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_19;
        _65 = &(*_66);
        _64 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _65) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_4;
        _68 = &(*_69);
        _67 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _68) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_68);
        _63 = [move _64, move _67];
        StorageDead(_67);
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = move _61 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_61);
        _55 = Arguments::<'_>::new_v1(move _56, move _60) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_60);
        StorageDead(_56);
        _54 = format(move _55) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_55);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_58);
        _53 = move _54;
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = <std::string::String as Deref>::deref(move _51) -> [return: bb21, unwind: bb71];
    }

    bb21: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb22, unwind: bb71];
    }

    bb22: {
        StorageDead(_49);
        drop(_53) -> [return: bb23, unwind: bb73];
    }

    bb23: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _180 = const _;
        _73 = &(*_180);
        _72 = LendingError::name(move _73) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        _76 = LendingError::InvalidFlashRepay;
        _75 = <LendingError as Into<u32>>::into(move _76) -> [return: bb25, unwind: bb70];
    }

    bb25: {
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        _179 = const _;
        _78 = &(*_179);
        _77 = <LendingError as ToString>::to_string(move _78) -> [return: bb26, unwind: bb70];
    }

    bb26: {
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 164_u32 };
        _81 = anchor_lang::error::ErrorOrigin::Source(move _82);
        StorageDead(_82);
        _80 = std::option::Option::<ErrorOrigin>::Some(move _81);
        StorageDead(_81);
        StorageLive(_83);
        _83 = std::option::Option::<ComparedValues>::None;
        _71 = anchor_lang::error::AnchorError { error_name: move _72, error_code_number: move _75, error_msg: move _77, error_origin: move _80, compared_values: move _83 };
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_72);
        _70 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _71) -> [return: bb27, unwind: bb73];
    }

    bb27: {
        StorageDead(_71);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _70);
        StorageDead(_70);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb64;
    }

    bb28: {
        StorageDead(_46);
        StorageDead(_44);
        _42 = const ();
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &((*_3).1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _86 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _87) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &((*_2).1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _88 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _89) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_89);
        _85 = Ne(move _86, move _88);
        switchInt(move _85) -> [0: bb37, otherwise: bb31];
    }

    bb31: {
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = const "Number of accounts mismatch between first and second ix of couple";
        _92 = &(*_93);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_92);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _183 = const _;
        _97 = &(*_183);
        _96 = LendingError::name(move _97) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_97);
        StorageLive(_99);
        StorageLive(_100);
        _100 = LendingError::InvalidFlashRepay;
        _99 = <LendingError as Into<u32>>::into(move _100) -> [return: bb34, unwind: bb69];
    }

    bb34: {
        StorageDead(_100);
        StorageLive(_101);
        StorageLive(_102);
        _182 = const _;
        _102 = &(*_182);
        _101 = <LendingError as ToString>::to_string(move _102) -> [return: bb35, unwind: bb69];
    }

    bb35: {
        StorageDead(_102);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 169_u32 };
        _105 = anchor_lang::error::ErrorOrigin::Source(move _106);
        StorageDead(_106);
        _104 = std::option::Option::<ErrorOrigin>::Some(move _105);
        StorageDead(_105);
        StorageLive(_107);
        _107 = std::option::Option::<ComparedValues>::None;
        _95 = anchor_lang::error::AnchorError { error_name: move _96, error_code_number: move _99, error_msg: move _101, error_origin: move _104, compared_values: move _107 };
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_96);
        _94 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _95) -> [return: bb36, unwind: bb73];
    }

    bb36: {
        StorageDead(_95);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _94);
        StorageDead(_94);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb64;
    }

    bb37: {
        StorageDead(_88);
        StorageDead(_86);
        _84 = const ();
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &((*_2).1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _114 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _115) -> [return: bb38, unwind continue];
    }

    bb38: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _113) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_113);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &((*_3).1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _118 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _119) -> [return: bb40, unwind continue];
    }

    bb40: {
        _117 = &(*_118);
        StorageDead(_119);
        _116 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::iter(move _117) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_117);
        _111 = <std::slice::Iter<'_, anchor_lang::prelude::AccountMeta> as Iterator>::zip::<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>(move _112, move _116) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_116);
        StorageDead(_112);
        _110 = <Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>> as Iterator>::enumerate(move _111) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_111);
        _109 = <Enumerate<Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>> as IntoIterator>::into_iter(move _110) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_110);
        StorageLive(_120);
        _120 = move _109;
        goto -> bb45;
    }

    bb45: {
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &mut _120;
        _124 = &mut (*_125);
        _123 = <Enumerate<Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>, std::slice::Iter<'_, anchor_lang::prelude::AccountMeta>>> as Iterator>::next(move _124) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_124);
        _126 = discriminant(_123);
        switchInt(move _126) -> [0: bb48, 1: bb47, otherwise: bb5];
    }

    bb47: {
        StorageLive(_129);
        _129 = ((((_123 as Some).0: (usize, (&anchor_lang::prelude::AccountMeta, &anchor_lang::prelude::AccountMeta))).1: (&anchor_lang::prelude::AccountMeta, &anchor_lang::prelude::AccountMeta)).0: &anchor_lang::prelude::AccountMeta);
        StorageLive(_130);
        _130 = ((((_123 as Some).0: (usize, (&anchor_lang::prelude::AccountMeta, &anchor_lang::prelude::AccountMeta))).1: (&anchor_lang::prelude::AccountMeta, &anchor_lang::prelude::AccountMeta)).1: &anchor_lang::prelude::AccountMeta);
        StorageLive(_128);
        _128 = (((_123 as Some).0: (usize, (&anchor_lang::prelude::AccountMeta, &anchor_lang::prelude::AccountMeta))).0: usize);
        StorageLive(_131);
        _131 = &((*_129).0: anchor_lang::prelude::Pubkey);
        StorageLive(_132);
        _132 = &((*_130).0: anchor_lang::prelude::Pubkey);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_131;
        StorageLive(_135);
        _135 = &_132;
        _133 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _134, move _135) -> [return: bb49, unwind continue];
    }

    bb48: {
        _108 = const ();
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_176);
        _176 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _176);
        StorageDead(_176);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_5);
        goto -> bb66;
    }

    bb49: {
        switchInt(move _133) -> [0: bb63, otherwise: bb50];
    }

    bb50: {
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _186 = const _;
        _147 = &(*_186);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_128;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _154) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_154);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_131;
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _157) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_132;
        _160 = &(*_161);
        _159 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _160) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_160);
        _152 = [move _153, move _156, move _159];
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_144);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <std::string::String as Deref>::deref(move _140) -> [return: bb56, unwind: bb68];
    }

    bb56: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb57, unwind: bb68];
    }

    bb57: {
        StorageDead(_138);
        drop(_142) -> [return: bb58, unwind: bb73];
    }

    bb58: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _185 = const _;
        _165 = &(*_185);
        _164 = LendingError::name(move _165) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_165);
        StorageLive(_167);
        StorageLive(_168);
        _168 = LendingError::InvalidFlashRepay;
        _167 = <LendingError as Into<u32>>::into(move _168) -> [return: bb60, unwind: bb67];
    }

    bb60: {
        StorageDead(_168);
        StorageLive(_169);
        StorageLive(_170);
        _184 = const _;
        _170 = &(*_184);
        _169 = <LendingError as ToString>::to_string(move _170) -> [return: bb61, unwind: bb67];
    }

    bb61: {
        StorageDead(_170);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 182_u32 };
        _173 = anchor_lang::error::ErrorOrigin::Source(move _174);
        StorageDead(_174);
        _172 = std::option::Option::<ErrorOrigin>::Some(move _173);
        StorageDead(_173);
        StorageLive(_175);
        _175 = std::option::Option::<ComparedValues>::None;
        _163 = anchor_lang::error::AnchorError { error_name: move _164, error_code_number: move _167, error_msg: move _169, error_origin: move _172, compared_values: move _175 };
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_164);
        _162 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _163) -> [return: bb62, unwind: bb73];
    }

    bb62: {
        StorageDead(_163);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _162);
        StorageDead(_162);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb64;
    }

    bb63: {
        StorageDead(_135);
        StorageDead(_134);
        _122 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_122);
        _121 = const ();
        goto -> bb45;
    }

    bb64: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_5);
        goto -> bb66;
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_164) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_142) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_96) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_72) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_53) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_30) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        resume;
    }

    bb74 (cleanup): {
        _191 = discriminant(_6);
        goto -> bb73;
    }
}
