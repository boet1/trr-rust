// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::new` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::new(_1: NewReserveLiquidityParams) -> ReserveLiquidity {
    debug params => _1;
    let mut _0: state::reserve::ReserveLiquidity;
    let _2: anchor_lang::prelude::Pubkey;
    let _3: u8;
    let _4: anchor_lang::prelude::Pubkey;
    let _5: anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let _7: u128;
    let _8: u64;
    let mut _9: anchor_lang::prelude::Pubkey;
    let mut _10: u64;
    let mut _11: u8;
    let mut _12: anchor_lang::prelude::Pubkey;
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: u64;
    let mut _15: state::reserve::BigFractionBytes;
    let mut _16: utils::fraction::BigFraction;
    let mut _17: u128;
    let mut _18: anchor_lang::prelude::Pubkey;
    let mut _19: [u64; 51];
    let mut _20: [u128; 32];
    scope 1 {
        debug mint_pubkey => _2;
        debug mint_decimals => _3;
        debug mint_token_program => _4;
        debug supply_vault => _5;
        debug fee_vault => _6;
        debug market_price_sf => _7;
        debug initial_amount_deposited_in_reserve => _8;
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: anchor_lang::prelude::Pubkey);
        StorageLive(_3);
        _3 = (_1.1: u8);
        StorageLive(_4);
        _4 = (_1.2: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        _5 = (_1.3: anchor_lang::prelude::Pubkey);
        StorageLive(_6);
        _6 = (_1.4: anchor_lang::prelude::Pubkey);
        StorageLive(_7);
        _7 = (_1.5: u128);
        StorageLive(_8);
        _8 = (_1.6: u64);
        StorageLive(_9);
        _9 = _2;
        StorageLive(_10);
        StorageLive(_11);
        _11 = _3;
        _10 = <u8 as Into<u64>>::into(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageLive(_12);
        _12 = _5;
        StorageLive(_13);
        _13 = _6;
        StorageLive(_14);
        _14 = _8;
        StorageLive(_15);
        StorageLive(_16);
        _16 = <utils::fraction::BigFraction as From<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::from(const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        _15 = <reserve::BigFractionBytes as From<utils::fraction::BigFraction>>::from(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = _7;
        StorageLive(_18);
        _18 = _4;
        StorageLive(_19);
        _19 = [const 0_u64; 51];
        StorageLive(_20);
        _20 = [const 0_u128; 32];
        _0 = ReserveLiquidity { mint_pubkey: move _9, supply_vault: move _12, fee_vault: move _13, available_amount: move _14, borrowed_amount_sf: const 0_u128, market_price_sf: move _17, market_price_last_updated_ts: const 0_u64, mint_decimals: move _10, deposit_limit_crossed_timestamp: const 0_u64, borrow_limit_crossed_timestamp: const 0_u64, cumulative_borrow_rate_bsf: move _15, accumulated_protocol_fees_sf: const 0_u128, accumulated_referrer_fees_sf: const 0_u128, pending_referrer_fees_sf: const 0_u128, absolute_referral_rate_sf: const 0_u128, token_program: move _18, padding2: move _19, padding3: move _20 };
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
