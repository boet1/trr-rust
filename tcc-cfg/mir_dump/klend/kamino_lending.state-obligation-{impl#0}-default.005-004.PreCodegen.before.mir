// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:101:1: 101:28>::default` before PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:101:1: 101:28>::default() -> obligation::Obligation {
    let mut _0: state::obligation::Obligation;
    let mut _1: state::last_update::LastUpdate;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: [state::obligation::ObligationCollateral; 8];
    let mut _5: state::obligation::ObligationCollateral;
    let mut _6: [state::obligation::ObligationLiquidity; 5];
    let mut _7: state::obligation::ObligationLiquidity;
    let mut _8: [u8; 8];
    let mut _9: [u8; 5];
    let mut _10: [u8; 4];
    let mut _11: [u64; 93];
    let mut _12: anchor_lang::prelude::Pubkey;
    let mut _13: [state::obligation::ObligationOrder; 2];
    let mut _14: state::obligation::ObligationOrder;

    bb0: {
        StorageLive(_1);
        _1 = <last_update::LastUpdate as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = <obligation::ObligationCollateral as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = [move _5; 8];
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = <obligation::ObligationLiquidity as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = [move _7; 5];
        StorageDead(_7);
        StorageLive(_8);
        _8 = [const _; 8];
        StorageLive(_9);
        _9 = [const _; 5];
        StorageLive(_10);
        _10 = [const 0_u8; 4];
        StorageLive(_11);
        _11 = [const 0_u64; 93];
        StorageLive(_12);
        _12 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_13);
        StorageLive(_14);
        _14 = <obligation::ObligationOrder as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        _13 = [move _14; 2];
        StorageDead(_14);
        _0 = obligation::Obligation { tag: const 0_u64, last_update: move _1, lending_market: move _2, owner: move _3, deposits: move _4, lowest_reserve_deposit_liquidation_ltv: const 0_u64, deposited_value_sf: const 0_u128, borrows: move _6, borrow_factor_adjusted_debt_value_sf: const 0_u128, borrowed_assets_market_value_sf: const 0_u128, allowed_borrow_value_sf: const 0_u128, unhealthy_borrow_value_sf: const 0_u128, deposits_asset_tiers: move _8, borrows_asset_tiers: move _9, elevation_group: const _, num_of_obsolete_deposit_reserves: const 0_u8, has_debt: const 0_u8, referrer: move _12, borrowing_disabled: const 0_u8, autodeleverage_target_ltv_pct: const 0_u8, lowest_reserve_deposit_max_ltv_pct: const 0_u8, num_of_obsolete_borrow_reserves: const 0_u8, reserved: move _10, highest_borrow_factor_pct: const 0_u64, autodeleverage_margin_call_started_timestamp: const 0_u64, orders: move _13, padding_3: move _11 };
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
