digraph Mir_0_11852 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::&lt;impl TryFrom&lt;uint_types::U128&gt; for i128&gt;::try_from(_1: utils::fraction::uint_types::U128) -&gt; std::result::Result&lt;i128, &amp;ReErased str&gt;<br align="left"/>let _2: &amp;ReErased str;<br align="left"/>let _3: u128;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, &amp;ReErased str&gt;, u128&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u128, &amp;ReErased str&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u128, &amp;ReErased str&gt;;<br align="left"/>let mut _7: utils::fraction::uint_types::U128;<br align="left"/>let mut _8: Closure(DefId(0:11853 ~ kamino_lending[6389]::utils::fraction::uint_types::{impl#132}::try_from::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased str,)) -&gt; &amp;ReErased str, []), (&amp;ReErased &amp;ReErased str,)]);<br align="left"/>let mut _9: &amp;ReErased &amp;ReErased str;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, &amp;ReErased str&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, &amp;ReErased str&gt;;<br align="left"/>let _14: u128;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: u128;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: i128;<br align="left"/>let mut _19: &amp;ReErased str;<br align="left"/>let mut _20: i128;<br align="left"/>let mut _21: u128;<br align="left"/>debug u =&gt; _1;<br align="left"/>debug err_str =&gt; _2;<br align="left"/>debug i =&gt; _3;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>>;
    bb0__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = const &quot;integer overflow when casting to i128&quot;<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _1<br/></td></tr><tr><td align="left">_6 = &lt;u128 as TryFrom&lt;uint_types::U128&gt;&gt;::try_from(move _7)</td></tr></table>>];
    bb1__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;_2<br/>_8 = {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:543:40: 543:43} { err_str: move _9 }<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_5 = std::result::Result::&lt;u128, &amp;str&gt;::map_err::&lt;&amp;str, {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:543:40: 543:43}&gt;(move _6, move _8)</td></tr></table>>];
    bb2__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u128, &amp;str&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb3__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_10 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb4__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_4 as Continue).0: u128)<br/>_3 = _14<br/>StorageDead(_14)<br/>StorageDead(_4)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _3<br/>StorageLive(_17)<br/>StorageLive(_18)<br/></td></tr><tr><td align="left">_18 = core::num::&lt;impl i128&gt;::max_value()</td></tr></table>>];
    bb5__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, &amp;str&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, &amp;str&gt; as FromResidual&lt;std::result::Result&lt;Infallible, &amp;str&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb7__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_17 = move _18 as u128 (IntToInt)<br/>StorageDead(_18)<br/>_15 = Gt(move _16, move _17)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb9__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_19)<br/>_19 = &amp;(*_2)<br/>_0 = std::result::Result::&lt;i128, &amp;str&gt;::Err(move _19)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _3<br/>_20 = move _21 as i128 (IntToInt)<br/>StorageDead(_21)<br/>_0 = std::result::Result::&lt;i128, &amp;str&gt;::Ok(move _20)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_11852 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11852 -> bb1__0_11852 [label="return"];
    bb1__0_11852 -> bb2__0_11852 [label="return"];
    bb2__0_11852 -> bb3__0_11852 [label="return"];
    bb3__0_11852 -> bb4__0_11852 [label="0"];
    bb3__0_11852 -> bb6__0_11852 [label="1"];
    bb3__0_11852 -> bb5__0_11852 [label="otherwise"];
    bb4__0_11852 -> bb8__0_11852 [label="return"];
    bb6__0_11852 -> bb7__0_11852 [label="return"];
    bb7__0_11852 -> bb12__0_11852 [label=""];
    bb8__0_11852 -> bb10__0_11852 [label="0"];
    bb8__0_11852 -> bb9__0_11852 [label="otherwise"];
    bb9__0_11852 -> bb11__0_11852 [label=""];
    bb10__0_11852 -> bb11__0_11852 [label=""];
    bb11__0_11852 -> bb12__0_11852 [label=""];
}
