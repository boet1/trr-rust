// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:686:1: 686:25>::accrue_interest` before PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:686:1: 686:25>::accrue_interest(_1: &mut obligation::ObligationLiquidity, _2: utils::fraction::BigFraction) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug new_cumulative_borrow_rate => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: utils::fraction::uint_types::U256;
    let mut _4: [u64; 4];
    let _6: ();
    let mut _7: std::cmp::Ordering;
    let mut _8: &utils::fraction::uint_types::U256;
    let mut _9: &utils::fraction::uint_types::U256;
    let _10: &utils::fraction::uint_types::U256;
    let mut _11: i8;
    let mut _12: !;
    let _13: ();
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[&str; 1];
    let _18: &[&str; 1];
    let _19: [&str; 1];
    let mut _20: anchor_lang::error::Error;
    let mut _21: anchor_lang::error::AnchorError;
    let mut _22: std::string::String;
    let mut _23: &LendingError;
    let _24: LendingError;
    let mut _25: u32;
    let mut _26: LendingError;
    let mut _27: std::string::String;
    let mut _28: &LendingError;
    let _29: LendingError;
    let mut _30: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _31: anchor_lang::error::ErrorOrigin;
    let mut _32: anchor_lang::error::Source;
    let mut _33: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _35: utils::fraction::uint_types::U256;
    let mut _36: utils::fraction::uint_types::U256;
    let mut _37: u128;
    let mut _38: utils::fraction::uint_types::U256;
    let mut _39: utils::fraction::uint_types::U256;
    let mut _40: u128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u128>;
    let mut _42: std::result::Result<u128, anchor_lang::error::Error>;
    let mut _43: std::result::Result<u128, &str>;
    let mut _44: utils::fraction::uint_types::U256;
    let mut _45: {closure@programs\klend\src\state\obligation.rs:736:30: 736:33};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: [u64; 4];
    let mut _52: ();
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    scope 1 {
        debug former_cumulative_borrow_rate_bsf => _3;
        let _5: utils::fraction::uint_types::U256;
        scope 2 {
            debug new_cumulative_borrow_rate_bsf => _5;
            let _34: utils::fraction::uint_types::U256;
            let mut _53: &LendingError;
            let mut _54: &LendingError;
            let mut _55: &[&str; 1];
            scope 3 {
                debug borrowed_amount_sf_u256 => _34;
                let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _50: u128;
                scope 4 {
                    debug residual => _47;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => _50;
                    scope 7 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = (((*_1).1: state::reserve::BigFractionBytes).0: [u64; 4]);
        _3 = uint_types::U256(move _4);
        StorageDead(_4);
        StorageLive(_5);
        _5 = (_2.0: utils::fraction::uint_types::U256);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_5;
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_3;
        _9 = &(*_10);
        _7 = <uint_types::U256 as Ord>::cmp(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [255: bb4, 0: bb11, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = ((*_1).3: u128);
        _36 = <uint_types::U256 as From<u128>>::from(move _37) -> [return: bb12, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _55 = const _;
        _18 = &(*_55);
        _17 = &(*_18);
        _16 = move _17 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = Arguments::<'_>::new_const(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        _14 = _print(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_18);
        StorageDead(_14);
        _13 = const ();
        StorageDead(_13);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _54 = const _;
        _23 = &(*_54);
        _22 = LendingError::name(move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = LendingError::NegativeInterestRate;
        _25 = <LendingError as Into<u32>>::into(move _26) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _53 = const _;
        _28 = &(*_53);
        _27 = <LendingError as ToString>::to_string(move _28) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\obligation.rs", line: const 727_u32 };
        _31 = anchor_lang::error::ErrorOrigin::Source(move _32);
        StorageDead(_32);
        _30 = std::option::Option::<ErrorOrigin>::Some(move _31);
        StorageDead(_31);
        StorageLive(_33);
        _33 = std::option::Option::<ComparedValues>::None;
        _21 = anchor_lang::error::AnchorError { error_name: move _22, error_code_number: move _25, error_msg: move _27, error_origin: move _30, compared_values: move _33 };
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_22);
        _20 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _21) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        StorageDead(_21);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _20);
        StorageDead(_20);
        goto -> bb22;
    }

    bb11: {
        _6 = const ();
        goto -> bb21;
    }

    bb12: {
        StorageDead(_37);
        StorageLive(_38);
        _38 = _5;
        _35 = <uint_types::U256 as std::ops::Mul>::mul(move _36, move _38) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_39);
        _39 = _3;
        _34 = <uint_types::U256 as std::ops::Div>::div(move _35, move _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_39);
        StorageDead(_35);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _34;
        _43 = <uint_types::U256 as TryInto<u128>>::try_into(move _44) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_44);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\state\obligation.rs:736:30: 736:33};
        _42 = std::result::Result::<u128, &str>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\state\obligation.rs:736:30: 736:33}>(move _43, move _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_45);
        StorageDead(_43);
        _41 = <std::result::Result<u128, anchor_lang::error::Error> as Try>::branch(move _42) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        StorageDead(_42);
        _46 = discriminant(_41);
        switchInt(move _46) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb18: {
        StorageLive(_50);
        _50 = ((_41 as Continue).0: u128);
        _40 = _50;
        StorageDead(_50);
        ((*_1).3: u128) = move _40;
        StorageDead(_40);
        _56 = discriminant(_41);
        StorageDead(_41);
        StorageLive(_51);
        _51 = (_5.0: [u64; 4]);
        (((*_1).1: state::reserve::BigFractionBytes).0: [u64; 4]) = move _51;
        StorageDead(_51);
        _6 = const ();
        StorageDead(_34);
        goto -> bb21;
    }

    bb19: {
        StorageLive(_47);
        _47 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_40);
        _58 = discriminant(_41);
        StorageDead(_41);
        StorageDead(_34);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_52);
        _52 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _52);
        StorageDead(_52);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_22) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        _60 = discriminant(_41);
        goto -> bb25;
    }
}
