// MIR for `__idl::<impl at programs\klend\src\lib.rs:33:1: 33:11>::try_accounts` before PreCodegen

fn __idl::<impl at programs\klend\src\lib.rs:33:1: 33:11>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut IdlCreateBufferBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<__private::__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _9: !;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::ErrorCode;
    let _12: &anchor_lang::prelude::AccountInfo<'_>;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: &[anchor_lang::prelude::AccountInfo<'_>];
    let _17: &[anchor_lang::prelude::AccountInfo<'_>];
    let _18: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _19: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _20: std::ops::RangeFrom<usize>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut __private::__idl::IdlCreateBufferBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\lib.rs:33:1: 33:11};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _38: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _46: &&mut [u8];
    let mut _47: &std::cell::Ref<'_, &mut [u8]>;
    let _48: &std::cell::Ref<'_, &mut [u8]>;
    let _49: std::cell::Ref<'_, &mut [u8]>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _51: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _59: ();
    let mut _60: &mut [u8];
    let mut _61: &mut [u8; 8];
    let mut _62: &[u8];
    let _63: &[u8];
    let _64: &[u8];
    let mut _65: &[u8];
    let mut _66: std::ops::RangeTo<usize>;
    let mut _68: [u8; 8];
    let _69: ();
    let mut _70: bool;
    let mut _71: u64;
    let mut _72: !;
    let mut _73: anchor_lang::error::Error;
    let mut _74: anchor_lang::error::Error;
    let mut _75: anchor_lang::error::ErrorCode;
    let mut _76: std::result::Result<anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>, anchor_lang::error::Error>;
    let mut _77: &anchor_lang::prelude::AccountInfo<'_>;
    let _78: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _79: isize;
    let mut _82: !;
    let mut _83: anchor_lang::error::Error;
    let mut _84: anchor_lang::error::Error;
    let _85: ();
    let mut _86: bool;
    let mut _87: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _88: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let _89: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _90: !;
    let mut _91: anchor_lang::error::Error;
    let mut _92: anchor_lang::error::Error;
    let mut _93: anchor_lang::error::ErrorCode;
    let _94: ();
    let mut _95: bool;
    let mut _96: &anchor_lang::prelude::Rent;
    let mut _97: u64;
    let mut _98: &anchor_lang::prelude::AccountInfo<'_>;
    let _99: anchor_lang::prelude::AccountInfo<'_>;
    let mut _100: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _101: usize;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _103: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _104: &anchor_lang::prelude::AccountInfo<'_>;
    let _105: anchor_lang::prelude::AccountInfo<'_>;
    let mut _106: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _112: !;
    let mut _113: anchor_lang::error::Error;
    let mut _114: anchor_lang::error::Error;
    let mut _115: anchor_lang::error::ErrorCode;
    let _116: ();
    let mut _117: bool;
    let mut _118: &&anchor_lang::prelude::Pubkey;
    let _119: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: &anchor_lang::prelude::Signer<'_>;
    let mut _121: &&anchor_lang::prelude::Pubkey;
    let _122: &anchor_lang::prelude::Pubkey;
    let _123: anchor_lang::prelude::Pubkey;
    let mut _124: !;
    let mut _125: anchor_lang::error::Error;
    let mut _126: anchor_lang::error::Error;
    let mut _127: anchor_lang::error::ErrorCode;
    let mut _128: __private::__idl::IdlCreateBuffer<'_>;
    let mut _129: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _130: anchor_lang::prelude::Signer<'_>;
    let mut _132: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _133: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _134: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _135: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _136: &mut [u8];
    let mut _137: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    scope 1 {
        debug buffer => _12;
        let _21: anchor_lang::prelude::Signer<'_>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::Signer<'_>;
        scope 2 {
            debug authority => _21;
            let _36: anchor_lang::prelude::Rent;
            let _40: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _43: anchor_lang::prelude::Rent;
            scope 7 {
                debug __anchor_rent => _36;
                let _44: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
                let mut _45: &[u8];
                let _54: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _57: std::cell::Ref<'_, &mut [u8]>;
                scope 12 {
                    debug buffer => _44;
                    let _108: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _111: usize;
                    let mut _131: &&anchor_lang::prelude::Pubkey;
                    scope 22 {
                        debug residual => _108;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _111;
                        scope 25 {
                        }
                    }
                }
                scope 13 {
                    debug __data => _45;
                    let mut _58: [u8; 8];
                    scope 18 {
                        debug __disc_bytes => _58;
                        let _67: u64;
                        scope 19 {
                            debug __discriminator => _67;
                            let _80: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
                            let _81: anchor_lang::error::Error;
                            scope 20 {
                                debug val => _80;
                            }
                            scope 21 {
                                debug e => _81;
                            }
                        }
                    }
                }
                scope 14 {
                    debug residual => _54;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _57;
                    scope 17 {
                    }
                }
            }
            scope 8 {
                debug residual => _40;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _43;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _32;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _35;
            scope 6 {
            }
        }
    }

    bb0: {
        _140 = const false;
        _139 = const false;
        _138 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _132 = deref_copy (*_2);
        _8 = &(*_132);
        _7 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _7) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = AccountNotEnoughKeys;
        _10 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _0 = std::result::Result::<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb73;
    }

    bb4: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const 0_usize;
        _133 = deref_copy (*_2);
        _14 = Len((*_133));
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb5, unwind continue];
    }

    bb5: {
        _134 = deref_copy (*_2);
        _12 = &(*_134)[_13];
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _135 = deref_copy (*_2);
        _19 = &(*_135);
        StorageLive(_20);
        _20 = RangeFrom::<usize> { start: const 1_usize };
        _18 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _19, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = &(*_18);
        _16 = &(*_17);
        (*_2) = move _16;
        StorageDead(_16);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, IdlCreateBufferBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\lib.rs:33:1: 33:11};
        _23 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lib.rs:33:1: 33:11}>(move _24, move _30) -> [return: bb8, unwind: bb79];
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb9, unwind: bb79];
    }

    bb9: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _21 = move _35;
        StorageDead(_35);
        _141 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb84];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _161 = discriminant(_22);
        StorageDead(_22);
        goto -> bb72;
    }

    bb14: {
        _37 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _38) -> [return: bb15, unwind: bb79];
    }

    bb15: {
        StorageDead(_38);
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_43);
        _43 = ((_37 as Continue).0: anchor_lang::prelude::Rent);
        _36 = _43;
        StorageDead(_43);
        _143 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_12);
        _51 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _52) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_40);
        _40 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <std::result::Result<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _42) -> [return: bb18, unwind: bb83];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        _159 = discriminant(_37);
        StorageDead(_37);
        goto -> bb71;
    }

    bb19: {
        StorageDead(_52);
        _50 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _51) -> [return: bb20, unwind: bb79];
    }

    bb20: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_57);
        _57 = move ((_50 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _49 = move _57;
        StorageDead(_57);
        _48 = &_49;
        _47 = &(*_48);
        _46 = <Ref<'_, &mut [u8]> as Deref>::deref(move _47) -> [return: bb24, unwind: bb77];
    }

    bb22: {
        StorageLive(_54);
        _54 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _56) -> [return: bb23, unwind: bb82];
    }

    bb23: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_47);
        _157 = discriminant(_50);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb69;
    }

    bb24: {
        _136 = deref_copy (*_46);
        _45 = &(*_136);
        StorageDead(_47);
        _145 = discriminant(_50);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_58);
        _58 = [const 0_u8; 8];
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _58;
        _60 = move _61 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_45);
        StorageLive(_66);
        _66 = RangeTo::<usize> { end: const 8_usize };
        _64 = <[u8] as Index<RangeTo<usize>>>::index(move _65, move _66) -> [return: bb25, unwind: bb78];
    }

    bb25: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = &(*_64);
        _62 = &(*_63);
        _59 = core::slice::<impl [u8]>::copy_from_slice(move _60, move _62) -> [return: bb26, unwind: bb78];
    }

    bb26: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _58;
        _67 = core::num::<impl u64>::from_le_bytes(move _68) -> [return: bb27, unwind: bb78];
    }

    bb27: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _67;
        _70 = Ne(move _71, const 0_u64);
        switchInt(move _70) -> [0: bb31, otherwise: bb28];
    }

    bb28: {
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = ConstraintZero;
        _74 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _75) -> [return: bb29, unwind: bb78];
    }

    bb29: {
        StorageDead(_75);
        _73 = anchor_lang::error::Error::with_account_name::<&str>(move _74, const "buffer") -> [return: bb30, unwind: bb78];
    }

    bb30: {
        StorageDead(_74);
        _0 = std::result::Result::<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>::Err(move _73);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_58);
        drop(_49) -> [return: bb69, unwind: bb79];
    }

    bb31: {
        StorageDead(_71);
        _69 = const ();
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_12;
        _137 = deref_copy (*_78);
        _77 = &(*_137);
        _76 = anchor_lang::prelude::Account::<'_, __idl::IdlAccount>::try_from_unchecked(move _77) -> [return: bb32, unwind: bb78];
    }

    bb32: {
        _139 = const true;
        _140 = const true;
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb34, 1: bb33, otherwise: bb11];
    }

    bb33: {
        StorageLive(_81);
        _81 = move ((_76 as Err).0: anchor_lang::error::Error);
        StorageLive(_83);
        StorageLive(_84);
        _84 = move _81;
        _83 = anchor_lang::error::Error::with_account_name::<&str>(move _84, const "buffer") -> [return: bb35, unwind: bb76];
    }

    bb34: {
        StorageLive(_80);
        _80 = move ((_76 as Ok).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _44 = move _80;
        StorageDead(_80);
        StorageDead(_67);
        StorageDead(_58);
        drop(_49) -> [return: bb36, unwind: bb81];
    }

    bb35: {
        StorageDead(_84);
        _0 = std::result::Result::<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>::Err(move _83);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_67);
        StorageDead(_58);
        drop(_49) -> [return: bb68, unwind: bb81];
    }

    bb36: {
        StorageDead(_49);
        StorageDead(_45);
        _147 = discriminant(_76);
        StorageDead(_78);
        _139 = const false;
        _140 = const false;
        StorageDead(_76);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_44;
        _88 = &(*_89);
        _87 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _88) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_88);
        _86 = ((*_87).6: bool);
        switchInt(move _86) -> [0: bb38, otherwise: bb41];
    }

    bb38: {
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = ConstraintMut;
        _92 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _93) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_93);
        _91 = anchor_lang::error::Error::with_account_name::<&str>(move _92, const "buffer") -> [return: bb40, unwind: bb79];
    }

    bb40: {
        StorageDead(_92);
        _0 = std::result::Result::<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>::Err(move _91);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb70;
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_87);
        _85 = const ();
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_36;
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_44;
        _99 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _100) -> [return: bb42, unwind continue];
    }

    bb42: {
        _98 = &_99;
        StorageDead(_100);
        _97 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _98) -> [return: bb43, unwind: bb75];
    }

    bb43: {
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_44;
        _105 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _106) -> [return: bb44, unwind: bb75];
    }

    bb44: {
        _104 = &_105;
        StorageDead(_106);
        _103 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _104) -> [return: bb45, unwind: bb74];
    }

    bb45: {
        StorageDead(_104);
        _102 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _103) -> [return: bb46, unwind: bb74];
    }

    bb46: {
        _138 = const true;
        StorageDead(_103);
        _107 = discriminant(_102);
        switchInt(move _107) -> [0: bb47, 1: bb48, otherwise: bb11];
    }

    bb47: {
        StorageLive(_111);
        _111 = ((_102 as Continue).0: usize);
        _101 = _111;
        StorageDead(_111);
        _95 = anchor_lang::prelude::Rent::is_exempt(move _96, move _97, move _101) -> [return: bb50, unwind: bb80];
    }

    bb48: {
        StorageLive(_108);
        _108 = move ((_102 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_110);
        _110 = move _108;
        _0 = <std::result::Result<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _110) -> [return: bb49, unwind: bb80];
    }

    bb49: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        _153 = discriminant(_102);
        drop(_105) -> [return: bb65, unwind: bb75];
    }

    bb50: {
        switchInt(move _95) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        _149 = discriminant(_102);
        drop(_105) -> [return: bb57, unwind: bb75];
    }

    bb52: {
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        _151 = discriminant(_102);
        drop(_105) -> [return: bb53, unwind: bb75];
    }

    bb53: {
        StorageDead(_105);
        _138 = const false;
        StorageDead(_102);
        drop(_99) -> [return: bb54, unwind: bb79];
    }

    bb54: {
        StorageDead(_99);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = ConstraintRentExempt;
        _114 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _115) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_115);
        _113 = anchor_lang::error::Error::with_account_name::<&str>(move _114, const "buffer") -> [return: bb56, unwind: bb79];
    }

    bb56: {
        StorageDead(_114);
        _0 = std::result::Result::<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>::Err(move _113);
        StorageDead(_113);
        goto -> bb67;
    }

    bb57: {
        StorageDead(_105);
        _138 = const false;
        StorageDead(_102);
        drop(_99) -> [return: bb58, unwind: bb79];
    }

    bb58: {
        StorageDead(_99);
        _94 = const ();
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_21;
        _119 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _120) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_120);
        _118 = &((*_119).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_121);
        _131 = const _;
        _121 = &(*_131);
        _117 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _118, move _121) -> [return: bb60, unwind continue];
    }

    bb60: {
        switchInt(move _117) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_119);
        _116 = const ();
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_128);
        StorageLive(_129);
        _129 = move _44;
        StorageLive(_130);
        _130 = move _21;
        _128 = __idl::IdlCreateBuffer::<'_> { buffer: move _129, authority: move _130 };
        StorageDead(_130);
        StorageDead(_129);
        _0 = std::result::Result::<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>::Ok(move _128);
        StorageDead(_128);
        StorageDead(_44);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb73;
    }

    bb62: {
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_119);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = ConstraintRaw;
        _126 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _127) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_127);
        _125 = anchor_lang::error::Error::with_account_name::<&str>(move _126, const "authority") -> [return: bb64, unwind: bb79];
    }

    bb64: {
        StorageDead(_126);
        _0 = std::result::Result::<__idl::IdlCreateBuffer<'_>, anchor_lang::error::Error>::Err(move _125);
        StorageDead(_125);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb70;
    }

    bb65: {
        StorageDead(_105);
        _138 = const false;
        StorageDead(_102);
        drop(_99) -> [return: bb66, unwind: bb79];
    }

    bb66: {
        StorageDead(_99);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb70;
    }

    bb68: {
        StorageDead(_49);
        StorageDead(_45);
        _155 = discriminant(_76);
        StorageDead(_78);
        _139 = const false;
        _140 = const false;
        StorageDead(_76);
        goto -> bb70;
    }

    bb69: {
        StorageDead(_49);
        StorageDead(_45);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_44);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_36);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb73;
    }

    bb73: {
        return;
    }

    bb74 (cleanup): {
        drop(_105) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_99) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_49) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        _165 = discriminant(_50);
        goto -> bb78;
    }

    bb78 (cleanup): {
        drop(_49) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        resume;
    }

    bb80 (cleanup): {
        _163 = discriminant(_102);
        goto -> bb74;
    }

    bb81 (cleanup): {
        _164 = discriminant(_76);
        goto -> bb79;
    }

    bb82 (cleanup): {
        _166 = discriminant(_50);
        goto -> bb79;
    }

    bb83 (cleanup): {
        _167 = discriminant(_37);
        goto -> bb79;
    }

    bb84 (cleanup): {
        _168 = discriminant(_22);
        goto -> bb79;
    }
}
