// MIR for `check_in_range::{closure#0}` before PreCodegen

fn check_in_range::{closure#0}(_1: &{closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21}, _2: &T) -> std::result::Result<(), anchor_lang::error::Error> {
    debug value => _2;
    debug range => ((*_1).0: std::ops::RangeInclusive<u128>);
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: u128;
    let mut _4: T;
    let mut _5: &T;
    let _6: ();
    let mut _7: bool;
    let mut _8: &std::ops::RangeInclusive<u128>;
    let mut _9: &u128;
    let _10: &u128;
    let mut _11: !;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 2];
    let _26: &[core::fmt::rt::Argument<'_>; 2];
    let _27: [core::fmt::rt::Argument<'_>; 2];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &std::ops::RangeInclusive<u128>;
    let _30: &std::ops::RangeInclusive<u128>;
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &u128;
    let _33: &u128;
    let mut _34: anchor_lang::error::Error;
    let mut _35: anchor_lang::error::AnchorError;
    let mut _36: std::string::String;
    let mut _37: &LendingError;
    let _38: LendingError;
    let mut _39: u32;
    let mut _40: LendingError;
    let mut _41: std::string::String;
    let mut _42: &LendingError;
    let _43: LendingError;
    let mut _44: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _45: anchor_lang::error::ErrorOrigin;
    let mut _46: anchor_lang::error::Source;
    let mut _47: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _48: ();
    scope 1 {
        debug value => _3;
        let _18: std::string::String;
        let mut _49: &LendingError;
        let mut _50: &LendingError;
        let mut _51: &[&str; 2];
        scope 2 {
            debug res => _18;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = <T as Clone>::clone(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <T as Into<u128>>::into(move _4) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: std::ops::RangeInclusive<u128>);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_3;
        _9 = &(*_10);
        _7 = RangeInclusive::<u128>::contains::<u128>(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_10);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_48);
        _48 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _48);
        StorageDead(_48);
        StorageDead(_3);
        goto -> bb17;
    }

    bb5: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _51 = const _;
        _22 = &(*_51);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &((*_1).0: std::ops::RangeInclusive<u128>);
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_debug::<RangeInclusive<u128>>(move _29) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_3;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _32) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_32);
        _27 = [move _28, move _31];
        StorageDead(_31);
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <std::string::String as Deref>::deref(move _15) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        StorageDead(_13);
        drop(_17) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _50 = const _;
        _37 = &(*_50);
        _36 = LendingError::name(move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = LendingError::InvalidConfig;
        _39 = <LendingError as Into<u32>>::into(move _40) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        _49 = const _;
        _42 = &(*_49);
        _41 = <LendingError as ToString>::to_string(move _42) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\config_items.rs", line: const 247_u32 };
        _45 = anchor_lang::error::ErrorOrigin::Source(move _46);
        StorageDead(_46);
        _44 = std::option::Option::<ErrorOrigin>::Some(move _45);
        StorageDead(_45);
        StorageLive(_47);
        _47 = std::option::Option::<ComparedValues>::None;
        _35 = anchor_lang::error::AnchorError { error_name: move _36, error_code_number: move _39, error_msg: move _41, error_origin: move _44, compared_values: move _47 };
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_36);
        _34 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _35) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_35);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _34);
        StorageDead(_34);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_36) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_17) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}
