// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::max_withdraw_value` after PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::max_withdraw_value(_1: &obligation::Obligation, _2: &obligation::ObligationCollateral, _3: u8, _4: u8, _5: state::types::LtvMaxWithdrawalCheck) -> FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> {
    debug self => _1;
    debug obligation_collateral => _2;
    debug reserve_max_ltv_pct => _3;
    debug reserve_liq_threshold_pct => _4;
    debug ltv_max_withdrawal_check => _5;
    let mut _0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _6: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _7: u8;
    let mut _8: (fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, u8);
    let mut _9: bool;
    let mut _10: &state::types::LtvMaxWithdrawalCheck;
    let mut _11: &state::types::LtvMaxWithdrawalCheck;
    let _12: state::types::LtvMaxWithdrawalCheck;
    let mut _13: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: u128;
    let mut _15: u128;
    let mut _16: u8;
    let mut _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _18: u128;
    let mut _19: u8;
    let mut _21: u128;
    let _22: ();
    let mut _23: bool;
    let mut _24: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _25: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _26: !;
    let _27: ();
    let mut _28: bool;
    let mut _29: u8;
    let mut _30: !;
    let mut _31: u128;
    let mut _32: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _33: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _34: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _35: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _36: u128;
    let mut _37: u8;
    let mut _38: &state::types::LtvMaxWithdrawalCheck;
    scope 1 {
        debug highest_allowed_borrow_value => _6;
        debug withdraw_collateral_ltv_pct => _7;
        let _20: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug borrow_factor_adjusted_debt_value => _20;
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_5;
        StorageLive(_11);
        _38 = const _;
        _11 = &(*_38);
        _9 = <state::types::LtvMaxWithdrawalCheck as PartialEq>::eq(move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _9) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).11: u128);
        _14 = core::num::<impl u128>::saturating_sub(move _15, const 1_u128) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _13 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageLive(_16);
        _16 = _4;
        _8 = (move _13, move _16);
        StorageDead(_16);
        StorageDead(_13);
        goto -> bb7;
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).10: u128);
        _17 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = _3;
        _8 = (move _17, move _19);
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_9);
        StorageLive(_6);
        _6 = (_8.0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_7);
        _7 = (_8.1: u8);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).8: u128);
        _20 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_6;
        StorageLive(_25);
        _25 = &_20;
        _23 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::le(move _24, move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _23) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        _0 = const _;
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb19;
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = const ();
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _7;
        _28 = Eq(move _29, const 0_u8);
        switchInt(move _28) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_29);
        StorageLive(_31);
        _31 = ((*_2).2: u128);
        _0 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _31) -> [return: bb14, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _6;
        StorageLive(_35);
        _35 = _20;
        _33 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::saturating_sub(move _34, move _35) -> [return: bb15, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb19;
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul<u128>>::mul(move _33, const 100_u128) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _7;
        _36 = <u128 as From<u8>>::from(move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_37);
        _0 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div<u128>>::div(move _32, move _36) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
