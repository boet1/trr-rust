// MIR for `state::lending_market::<impl at programs\klend\src\state\lending_market.rs:159:1: 159:31>::default` before PreCodegen

fn state::lending_market::<impl at programs\klend\src\state\lending_market.rs:159:1: 159:31>::default() -> state::lending_market::LendingMarket {
    let mut _0: state::lending_market::LendingMarket;
    let mut _1: anchor_lang::prelude::Pubkey;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: [u8; 32];
    let mut _4: anchor_lang::prelude::Pubkey;
    let mut _5: [u8; 8];
    let mut _6: [u8; 8];
    let mut _7: [state::lending_market::ElevationGroup; 32];
    let mut _8: state::lending_market::ElevationGroup;
    let mut _9: [u64; 90];
    let mut _10: u128;
    let mut _11: [u8; 32];
    let mut _12: [u8; 5];
    let mut _13: [u64; 169];

    bb0: {
        StorageLive(_1);
        _1 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = [const 0_u8; 32];
        StorageLive(_4);
        _4 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_5);
        _5 = [const 0_u8; 8];
        StorageLive(_6);
        _6 = [const 0_u8; 8];
        StorageLive(_7);
        StorageLive(_8);
        _8 = <state::lending_market::ElevationGroup as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = [move _8; 32];
        StorageDead(_8);
        StorageLive(_9);
        _9 = default_array::<u64, 90>() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_10);
        _10 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(const _) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_11);
        _11 = [const 0_u8; 32];
        StorageLive(_12);
        _12 = default_array::<u8, 5>() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_13);
        _13 = default_array::<u64, 169>() -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = state::lending_market::LendingMarket { version: const 0_u64, bump_seed: const 0_u64, lending_market_owner: move _1, lending_market_owner_cached: move _4, quote_currency: move _3, referral_fee_bps: const 0_u16, emergency_mode: const 0_u8, autodeleverage_enabled: const 0_u8, borrow_disabled: const 0_u8, price_refresh_trigger_to_max_age_pct: const 0_u8, liquidation_max_debt_close_factor_pct: const _, insolvency_risk_unhealthy_ltv_pct: const _, min_full_liquidation_value_threshold: const _, max_liquidatable_debt_market_value_at_once: const _, reserved0: move _5, global_allowed_borrow_value: const _, risk_council: move _2, reserved1: move _6, elevation_groups: move _7, elevation_group_padding: move _9, min_net_value_in_obligation_sf: move _10, min_value_skip_liquidation_ltv_checks: const 0_u64, name: move _11, min_value_skip_liquidation_bf_checks: const 0_u64, individual_autodeleverage_margin_call_period_secs: const 0_u64, min_initial_deposit_amount: const _, obligation_order_execution_enabled: const 0_u8, immutable: const 0_u8, obligation_order_creation_enabled: const 0_u8, padding2: move _12, padding1: move _13 };
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
