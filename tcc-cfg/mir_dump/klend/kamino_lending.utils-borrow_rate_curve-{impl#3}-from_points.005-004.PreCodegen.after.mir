// MIR for `borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:141:1: 141:21>::from_points` after PreCodegen

fn borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:141:1: 141:21>::from_points(_1: &[CurvePoint]) -> std::result::Result<BorrowRateCurve, anchor_lang::error::Error> {
    debug pts => _1;
    let mut _0: std::result::Result<utils::borrow_rate_curve::BorrowRateCurve, anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &[utils::borrow_rate_curve::CurvePoint];
    let mut _6: !;
    let _7: ();
    let mut _8: &str;
    let _9: &str;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::AnchorError;
    let mut _12: std::string::String;
    let mut _13: &LendingError;
    let _14: LendingError;
    let mut _15: u32;
    let mut _16: LendingError;
    let mut _17: std::string::String;
    let mut _18: &LendingError;
    let _19: LendingError;
    let mut _20: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _21: anchor_lang::error::ErrorOrigin;
    let mut _22: anchor_lang::error::Source;
    let mut _23: std::option::Option<anchor_lang::error::ComparedValues>;
    let _24: ();
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: &[utils::borrow_rate_curve::CurvePoint];
    let mut _28: !;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: anchor_lang::error::Error;
    let mut _33: anchor_lang::error::AnchorError;
    let mut _34: std::string::String;
    let mut _35: &LendingError;
    let _36: LendingError;
    let mut _37: u32;
    let mut _38: LendingError;
    let mut _39: std::string::String;
    let mut _40: &LendingError;
    let _41: LendingError;
    let mut _42: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _43: anchor_lang::error::ErrorOrigin;
    let mut _44: anchor_lang::error::Source;
    let mut _45: std::option::Option<anchor_lang::error::ComparedValues>;
    let _46: &utils::borrow_rate_curve::CurvePoint;
    let mut _47: std::option::Option<&utils::borrow_rate_curve::CurvePoint>;
    let mut _48: &[utils::borrow_rate_curve::CurvePoint];
    let _49: ();
    let mut _50: bool;
    let mut _51: u32;
    let mut _52: !;
    let _53: ();
    let mut _54: &str;
    let _55: &str;
    let mut _56: anchor_lang::error::Error;
    let mut _57: anchor_lang::error::AnchorError;
    let mut _58: std::string::String;
    let mut _59: &LendingError;
    let _60: LendingError;
    let mut _61: u32;
    let mut _62: LendingError;
    let mut _63: std::string::String;
    let mut _64: &LendingError;
    let _65: LendingError;
    let mut _66: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _67: anchor_lang::error::ErrorOrigin;
    let mut _68: anchor_lang::error::Source;
    let mut _69: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _71: utils::borrow_rate_curve::CurvePoint;
    let _72: ();
    let mut _73: &mut [utils::borrow_rate_curve::CurvePoint];
    let mut _74: &mut [utils::borrow_rate_curve::CurvePoint];
    let mut _75: &mut [utils::borrow_rate_curve::CurvePoint; 11];
    let mut _76: std::ops::RangeTo<usize>;
    let mut _77: usize;
    let mut _78: &[utils::borrow_rate_curve::CurvePoint];
    let mut _79: &[utils::borrow_rate_curve::CurvePoint];
    let mut _81: [utils::borrow_rate_curve::CurvePoint; 11];
    let _82: ();
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _84: std::result::Result<(), anchor_lang::error::Error>;
    let mut _85: &utils::borrow_rate_curve::BorrowRateCurve;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _91: utils::borrow_rate_curve::BorrowRateCurve;
    let mut _92: &LendingError;
    let mut _93: &LendingError;
    let mut _94: &LendingError;
    let mut _95: &LendingError;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    scope 1 {
        debug last => _46;
        let mut _70: [utils::borrow_rate_curve::CurvePoint; 11];
        let mut _96: &LendingError;
        let mut _97: &LendingError;
        scope 2 {
            debug points => _70;
            let _80: utils::borrow_rate_curve::BorrowRateCurve;
            scope 3 {
                debug curve => _80;
                let _87: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _90: ();
                scope 4 {
                    debug residual => _87;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => _90;
                    scope 7 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = core::slice::<impl [CurvePoint]>::len(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = Lt(move _4, const 2_usize);
        switchInt(move _3) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "Borrowing rate curve must have at least 2 points";
        _8 = &(*_9);
        _7 = solana_program::log::sol_log(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _93 = const _;
        _13 = &(*_93);
        _12 = LendingError::name(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = LendingError::InvalidBorrowRateCurvePoint;
        _15 = <LendingError as Into<u32>>::into(move _16) -> [return: bb5, unwind: bb39];
    }

    bb5: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _92 = const _;
        _18 = &(*_92);
        _17 = <LendingError as ToString>::to_string(move _18) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 185_u32 };
        _21 = anchor_lang::error::ErrorOrigin::Source(move _22);
        StorageDead(_22);
        _20 = std::option::Option::<ErrorOrigin>::Some(move _21);
        StorageDead(_21);
        StorageLive(_23);
        _23 = std::option::Option::<ComparedValues>::None;
        _11 = anchor_lang::error::AnchorError { error_name: move _12, error_code_number: move _15, error_msg: move _17, error_origin: move _20, compared_values: move _23 };
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        _10 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _11) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        StorageDead(_11);
        _0 = std::result::Result::<BorrowRateCurve, anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb36;
    }

    bb8: {
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_1);
        _26 = core::slice::<impl [CurvePoint]>::len(move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        _25 = Gt(move _26, const 11_usize);
        switchInt(move _25) -> [0: bb16, otherwise: bb10];
    }

    bb10: {
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const "Borrowing rate curve must have at most 11 points";
        _30 = &(*_31);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _95 = const _;
        _35 = &(*_95);
        _34 = LendingError::name(move _35) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        _38 = LendingError::InvalidBorrowRateCurvePoint;
        _37 = <LendingError as Into<u32>>::into(move _38) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _94 = const _;
        _40 = &(*_94);
        _39 = <LendingError as ToString>::to_string(move _40) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 189_u32 };
        _43 = anchor_lang::error::ErrorOrigin::Source(move _44);
        StorageDead(_44);
        _42 = std::option::Option::<ErrorOrigin>::Some(move _43);
        StorageDead(_43);
        StorageLive(_45);
        _45 = std::option::Option::<ComparedValues>::None;
        _33 = anchor_lang::error::AnchorError { error_name: move _34, error_code_number: move _37, error_msg: move _39, error_origin: move _42, compared_values: move _45 };
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        _32 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _33) -> [return: bb15, unwind: bb40];
    }

    bb15: {
        StorageDead(_33);
        _0 = std::result::Result::<BorrowRateCurve, anchor_lang::error::Error>::Err(move _32);
        StorageDead(_32);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb36;
    }

    bb16: {
        StorageDead(_26);
        _24 = const ();
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_1);
        _47 = core::slice::<impl [CurvePoint]>::last(move _48) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_48);
        _46 = std::option::Option::<&CurvePoint>::unwrap(move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = ((*_46).0: u32);
        _50 = Ne(move _51, const _);
        switchInt(move _50) -> [0: bb25, otherwise: bb19];
    }

    bb19: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = const "Last point of borrowing rate curve must have an utilization rate of 1";
        _54 = &(*_55);
        _53 = solana_program::log::sol_log(move _54) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_54);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _97 = const _;
        _59 = &(*_97);
        _58 = LendingError::name(move _59) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        _62 = LendingError::InvalidBorrowRateCurvePoint;
        _61 = <LendingError as Into<u32>>::into(move _62) -> [return: bb22, unwind: bb37];
    }

    bb22: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _96 = const _;
        _64 = &(*_96);
        _63 = <LendingError as ToString>::to_string(move _64) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 195_u32 };
        _67 = anchor_lang::error::ErrorOrigin::Source(move _68);
        StorageDead(_68);
        _66 = std::option::Option::<ErrorOrigin>::Some(move _67);
        StorageDead(_67);
        StorageLive(_69);
        _69 = std::option::Option::<ComparedValues>::None;
        _57 = anchor_lang::error::AnchorError { error_name: move _58, error_code_number: move _61, error_msg: move _63, error_origin: move _66, compared_values: move _69 };
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_58);
        _56 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _57) -> [return: bb24, unwind: bb40];
    }

    bb24: {
        StorageDead(_57);
        _0 = std::result::Result::<BorrowRateCurve, anchor_lang::error::Error>::Err(move _56);
        StorageDead(_56);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb35;
    }

    bb25: {
        StorageDead(_51);
        _49 = const ();
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_70);
        StorageLive(_71);
        _71 = (*_46);
        _70 = [move _71; 11];
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &mut _70;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_1);
        _77 = core::slice::<impl [CurvePoint]>::len(move _78) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_78);
        _76 = RangeTo::<usize> { end: move _77 };
        StorageDead(_77);
        _74 = <[CurvePoint; 11] as IndexMut<RangeTo<usize>>>::index_mut(move _75, move _76) -> [return: bb27, unwind continue];
    }

    bb27: {
        _73 = &mut (*_74);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_79);
        _79 = &(*_1);
        _72 = core::slice::<impl [CurvePoint]>::copy_from_slice(move _73, move _79) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _70;
        _80 = BorrowRateCurve { points: move _81 };
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_80;
        _84 = BorrowRateCurve::validate(move _85) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_85);
        _83 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _84) -> [return: bb30, unwind: bb40];
    }

    bb30: {
        StorageDead(_84);
        _86 = discriminant(_83);
        switchInt(move _86) -> [0: bb31, 1: bb33, otherwise: bb32];
    }

    bb31: {
        StorageLive(_90);
        _90 = ((_83 as Continue).0: ());
        _82 = _90;
        StorageDead(_90);
        _98 = discriminant(_83);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_91);
        _91 = _80;
        _0 = std::result::Result::<BorrowRateCurve, anchor_lang::error::Error>::Ok(move _91);
        StorageDead(_91);
        StorageDead(_80);
        StorageDead(_70);
        StorageDead(_46);
        goto -> bb36;
    }

    bb32: {
        unreachable;
    }

    bb33: {
        StorageLive(_87);
        _87 = move ((_83 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_89);
        _89 = move _87;
        _0 = <std::result::Result<BorrowRateCurve, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _89) -> [return: bb34, unwind: bb41];
    }

    bb34: {
        StorageDead(_89);
        StorageDead(_87);
        _100 = discriminant(_83);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_70);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_46);
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_58) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_34) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_12) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        resume;
    }

    bb41 (cleanup): {
        _102 = discriminant(_83);
        goto -> bb40;
    }
}
