// MIR for `handlers::handler_socialize_loss::process_v2` before PreCodegen

fn handlers::handler_socialize_loss::process_v2(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_socialize_loss::SocializeLossV2<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &handlers::handler_socialize_loss::SocializeLoss<'_>;
    let _7: &handlers::handler_socialize_loss::SocializeLoss<'_>;
    let mut _8: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _18: std::result::Result<(), anchor_lang::error::Error>;
    let mut _19: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams<'_, '_>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _21: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _22: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _23: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _24: state::reserve::ReserveFarmKind;
    let mut _25: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _26: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _27: &handlers::handler_socialize_loss::SocializeLoss<'_>;
    let mut _28: &&anchor_lang::prelude::AccountInfo<'_>;
    let _29: &&anchor_lang::prelude::AccountInfo<'_>;
    let _30: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _31: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _32: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _33: &handlers::handler_socialize_loss::SocializeLoss<'_>;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _38: ();
    let mut _39: ();
    let mut _40: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>;
    let mut _41: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>;
    let mut _43: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>;
    let mut _44: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>;
    let mut _45: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>;
    let mut _46: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _35;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _38;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _40 = deref_copy (_1.1: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>);
        _7 = &((*_40).0: handlers::handler_socialize_loss::SocializeLoss<'_>);
        _6 = &(*_7);
        StorageLive(_8);
        _41 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _8 = &(*_41);
        StorageLive(_9);
        _9 = _2;
        _5 = handlers::handler_socialize_loss::process_impl(move _6, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_4 as Continue).0: ());
        _3 = _14;
        StorageDead(_14);
        _47 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _42 = deref_copy (_1.1: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>);
        _21 = &(((*_42).0: handlers::handler_socialize_loss::SocializeLoss<'_>).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _20 = &(*_21);
        StorageLive(_22);
        StorageLive(_23);
        _43 = deref_copy (_1.1: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>);
        _23 = &((*_43).1: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _22 = &(*_23);
        StorageLive(_24);
        _24 = reserve::ReserveFarmKind::Debt;
        _19 = RefreshFarmsParams::<'_, '_> { reserve: move _20, farms_accounts: move _22, farm_kind: move _24 };
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _44 = deref_copy (_1.1: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>);
        _27 = &((*_44).0: handlers::handler_socialize_loss::SocializeLoss<'_>);
        _26 = &((*_27).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _25 = &(*_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _45 = deref_copy (_1.1: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>);
        _30 = &((*_45).2: anchor_lang::prelude::AccountInfo<'_>);
        _29 = &_30;
        _28 = &(*_29);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _46 = deref_copy (_1.1: &mut handlers::handler_socialize_loss::SocializeLossV2<'_>);
        _33 = &((*_46).0: handlers::handler_socialize_loss::SocializeLoss<'_>);
        _32 = &((*_33).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _31 = &(*_32);
        _18 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::<'_, anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, &anchor_lang::prelude::AccountInfo<'_>>(move _19, move _25, move _28, move _31) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _53 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_19);
        _17 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _18) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        StorageDead(_18);
        _34 = discriminant(_17);
        switchInt(move _34) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_38);
        _38 = ((_17 as Continue).0: ());
        _16 = _38;
        StorageDead(_38);
        _49 = discriminant(_17);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        _15 = const ();
        StorageDead(_15);
        StorageLive(_39);
        _39 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _39);
        StorageDead(_39);
        goto -> bb12;
    }

    bb10: {
        StorageLive(_35);
        _35 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _37) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        StorageDead(_37);
        StorageDead(_35);
        _51 = discriminant(_17);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        _55 = discriminant(_17);
        goto -> bb13;
    }

    bb15 (cleanup): {
        _56 = discriminant(_4);
        goto -> bb13;
    }
}
