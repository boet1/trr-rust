// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:763:60: 763:69>::eq` after PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:763:60: 763:69>::eq(_1: &obligation::ObligationOrder, _2: &obligation::ObligationOrder) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u128;
    let mut _5: u128;
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: u128;
    let mut _9: bool;
    let mut _10: u16;
    let mut _11: u16;
    let mut _12: bool;
    let mut _13: u16;
    let mut _14: u16;
    let mut _15: bool;
    let mut _16: u8;
    let mut _17: u8;
    let mut _18: bool;
    let mut _19: u8;
    let mut _20: u8;
    let mut _21: bool;
    let mut _22: &[u8; 10];
    let mut _23: &[u8; 10];
    let mut _24: &[u128; 5];
    let mut _25: &[u128; 5];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u128);
        StorageLive(_5);
        _5 = ((*_2).0: u128);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u128);
        StorageLive(_8);
        _8 = ((*_2).1: u128);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb14, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: u16);
        StorageLive(_11);
        _11 = ((*_2).2: u16);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb13, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).3: u16);
        StorageLive(_14);
        _14 = ((*_2).3: u16);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb12, otherwise: bb4];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).4: u8);
        StorageLive(_17);
        _17 = ((*_2).4: u8);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb11, otherwise: bb5];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).5: u8);
        StorageLive(_20);
        _20 = ((*_2).5: u8);
        _18 = Eq(move _19, move _20);
        switchInt(move _18) -> [0: bb10, otherwise: bb6];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).6: [u8; 10]);
        StorageLive(_23);
        _23 = &((*_2).6: [u8; 10]);
        _21 = <[u8; 10] as PartialEq>::eq(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _21) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        _24 = &((*_1).7: [u128; 5]);
        StorageLive(_25);
        _25 = &((*_2).7: [u128; 5]);
        _0 = <[u128; 5] as PartialEq>::eq(move _24, move _25) -> [return: bb17, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb16;
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb16;
    }

    bb11: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb16;
    }

    bb12: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb16;
    }

    bb13: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb16;
    }

    bb14: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb16;
    }

    bb16: {
        _0 = const false;
        goto -> bb18;
    }

    bb17: {
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
