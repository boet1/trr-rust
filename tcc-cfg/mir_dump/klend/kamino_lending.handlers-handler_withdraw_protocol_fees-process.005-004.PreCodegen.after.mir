// MIR for `handlers::handler_withdraw_protocol_fees::process` after PreCodegen

fn handlers::handler_withdraw_protocol_fees::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let _7: &anchor_lang::prelude::AccountInfo<'_>;
    let _8: anchor_lang::prelude::AccountInfo<'_>;
    let mut _9: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _10: &anchor_lang::prelude::AccountInfo<'_>;
    let _11: &anchor_lang::prelude::AccountInfo<'_>;
    let _12: anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _18: ();
    let _19: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _21: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _22: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _27: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _29: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _34: &anchor_spl::token_interface::TokenAccount;
    let _35: &anchor_spl::token_interface::TokenAccount;
    let mut _36: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _38: [&[u8]; 3];
    let mut _39: &[u8];
    let mut _40: &[u8];
    let _41: &[u8];
    let mut _42: &[u8];
    let _43: &[u8];
    let mut _44: &anchor_lang::prelude::Pubkey;
    let mut _45: &[u8];
    let mut _46: &[u8; 1];
    let _47: &[u8; 1];
    let _48: [u8; 1];
    let mut _49: u8;
    let mut _50: u64;
    let mut _51: &state::lending_market::LendingMarket;
    let mut _52: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _53: ();
    let mut _54: &str;
    let _55: &str;
    let mut _56: &std::string::String;
    let _57: &std::string::String;
    let _58: std::string::String;
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[&str; 1];
    let _63: &[&str; 1];
    let _64: [&str; 1];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let mut _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &u64;
    let _71: &u64;
    let _72: ();
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _74: std::result::Result<(), anchor_lang::error::Error>;
    let mut _75: anchor_lang::prelude::AccountInfo<'_>;
    let mut _76: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _77: anchor_lang::prelude::AccountInfo<'_>;
    let mut _78: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _79: anchor_lang::prelude::AccountInfo<'_>;
    let mut _80: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _81: anchor_lang::prelude::AccountInfo<'_>;
    let mut _82: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _83: anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _85: &[&[u8]];
    let mut _86: &[&[u8]; 3];
    let mut _87: u64;
    let mut _88: u8;
    let mut _89: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _90: &anchor_spl::token_interface::Mint;
    let _91: &anchor_spl::token_interface::Mint;
    let mut _92: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _98: ();
    let mut _100: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _101: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _102: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _103: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _104: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _105: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _106: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _107: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _108: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _109: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _111: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _112: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _113: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _114: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _115: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _116: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _117: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _139: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _140: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _141: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _142: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _143: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _144: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug market => _19;
        let _28: anchor_lang::prelude::Pubkey;
        scope 10 {
            debug lending_market_key => _28;
            let _30: u64;
            scope 11 {
                debug amount => _30;
                let _37: &[&[u8]; 3];
                scope 12 {
                    debug authority_signer_seeds => _37;
                    let _59: std::string::String;
                    let _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _97: ();
                    let mut _99: &[&str; 1];
                    scope 13 {
                        debug res => _59;
                    }
                    scope 14 {
                        debug residual => _94;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _97;
                        scope 17 {
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _24;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _27;
        scope 9 {
        }
    }

    bb0: {
        _122 = const false;
        _121 = const false;
        _120 = const false;
        _119 = const false;
        _118 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _100 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _101 = deref_copy ((*_100).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _138 = (((_101.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _9 = &(*_138);
        _8 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = &_8;
        _6 = &(*_7);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _102 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _103 = deref_copy ((*_102).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _139 = (((_103.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _13 = &(*_139);
        _12 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _13) -> [return: bb2, unwind: bb48];
    }

    bb2: {
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _5 = validate_liquidity_token_extensions(move _6, move _10) -> [return: bb3, unwind: bb47];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb4, unwind: bb47];
    }

    bb4: {
        StorageDead(_5);
        _14 = discriminant(_4);
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_4 as Continue).0: ());
        _3 = _18;
        StorageDead(_18);
        _123 = discriminant(_4);
        drop(_12) -> [return: bb9, unwind: bb48];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_15);
        _15 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _17) -> [return: bb8, unwind: bb62];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _133 = discriminant(_4);
        drop(_12) -> [return: bb42, unwind: bb48];
    }

    bb9: {
        StorageDead(_12);
        StorageDead(_11);
        drop(_8) -> [return: bb10, unwind: bb49];
    }

    bb10: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _104 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _22 = &((*_104).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _21 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        _20 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _21) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb13, 1: bb14, otherwise: bb6];
    }

    bb13: {
        StorageLive(_27);
        _27 = move ((_20 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _19 = move _27;
        StorageDead(_27);
        _125 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_28);
        StorageLive(_29);
        _105 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _29 = &((*_105).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _28 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _29) -> [return: bb16, unwind: bb46];
    }

    bb14: {
        StorageLive(_24);
        _24 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _26) -> [return: bb15, unwind: bb61];
    }

    bb15: {
        StorageDead(_26);
        StorageDead(_24);
        _131 = discriminant(_20);
        StorageDead(_20);
        goto -> bb41;
    }

    bb16: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _2;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _106 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _107 = deref_copy ((*_106).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _140 = (((_107.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _36 = &(*_140);
        _35 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _36) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        _34 = &(*_35);
        _33 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _34) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_34);
        _32 = ((*_33).2: u64);
        _30 = <u64 as Ord>::min(move _31, move _32) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = const _;
        _40 = &(*_41);
        _39 = _40;
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_28;
        _43 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _44) -> [return: bb20, unwind: bb46];
    }

    bb20: {
        _42 = &(*_43);
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_19;
        _51 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _52) -> [return: bb21, unwind: bb46];
    }

    bb21: {
        StorageDead(_52);
        _50 = ((*_51).1: u64);
        _49 = move _50 as u8 (IntToInt);
        StorageDead(_50);
        _48 = [move _49];
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = move _46 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_46);
        _38 = [move _39, move _42, move _45];
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        _37 = &_38;
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _99 = const _;
        _63 = &(*_99);
        _62 = &(*_63);
        _61 = move _62 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_30;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _70) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        StorageDead(_70);
        _68 = [move _69];
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = move _66 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_66);
        _60 = Arguments::<'_>::new_v1(move _61, move _65) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        StorageDead(_65);
        StorageDead(_61);
        _59 = format(move _60) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        StorageDead(_60);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_63);
        _58 = move _59;
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = <std::string::String as Deref>::deref(move _56) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        _54 = &(*_55);
        StorageDead(_56);
        _53 = solana_program::log::sol_log(move _54) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        StorageDead(_54);
        drop(_58) -> [return: bb27, unwind: bb46];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _108 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _76 = &((*_108).7: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _75 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _76) -> [return: bb28, unwind: bb46];
    }

    bb28: {
        _122 = const true;
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        _109 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _110 = deref_copy ((*_109).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _141 = (((_110.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _78 = &(*_141);
        _77 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _78) -> [return: bb29, unwind: bb60];
    }

    bb29: {
        _121 = const true;
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        _111 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _112 = deref_copy ((*_111).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _142 = (((_112.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _80 = &(*_142);
        _79 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _80) -> [return: bb30, unwind: bb58];
    }

    bb30: {
        _120 = const true;
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _113 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _114 = deref_copy ((*_113).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _143 = (((_114.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _82 = &(*_143);
        _81 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _82) -> [return: bb31, unwind: bb56];
    }

    bb31: {
        _119 = const true;
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        _115 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _84 = &((*_115).4: anchor_lang::prelude::AccountInfo<'_>);
        _83 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _84) -> [return: bb32, unwind: bb54];
    }

    bb32: {
        _118 = const true;
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_37);
        _85 = move _86 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_86);
        StorageLive(_87);
        _87 = _30;
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _116 = deref_copy (_1.1: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>);
        _117 = deref_copy ((*_116).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _144 = (((_117.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _92 = &(*_144);
        _91 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _92) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        _90 = &(*_91);
        _89 = <anchor_spl::token_interface::Mint as Deref>::deref(move _90) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        StorageDead(_92);
        StorageDead(_90);
        _88 = ((*_89).2: u8);
        _122 = const false;
        _121 = const false;
        _120 = const false;
        _119 = const false;
        _118 = const false;
        _74 = withdraw_fees_from_reserve(move _75, move _77, move _79, move _81, move _83, move _85, move _87, move _88) -> [return: bb35, unwind: bb52];
    }

    bb35: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        _118 = const false;
        StorageDead(_83);
        _119 = const false;
        StorageDead(_81);
        _120 = const false;
        StorageDead(_79);
        _121 = const false;
        StorageDead(_77);
        _122 = const false;
        StorageDead(_75);
        _73 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _74) -> [return: bb36, unwind: bb46];
    }

    bb36: {
        StorageDead(_74);
        _93 = discriminant(_73);
        switchInt(move _93) -> [0: bb37, 1: bb38, otherwise: bb6];
    }

    bb37: {
        StorageLive(_97);
        _97 = ((_73 as Continue).0: ());
        _72 = _97;
        StorageDead(_97);
        _127 = discriminant(_73);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_98);
        _98 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _98);
        StorageDead(_98);
        StorageDead(_48);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_30);
        StorageDead(_28);
        drop(_19) -> [return: bb40, unwind: bb49];
    }

    bb38: {
        StorageLive(_94);
        _94 = move ((_73 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _96) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        StorageDead(_96);
        StorageDead(_94);
        _129 = discriminant(_73);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_48);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_30);
        StorageDead(_28);
        drop(_19) -> [return: bb41, unwind: bb49];
    }

    bb40: {
        StorageDead(_19);
        goto -> bb44;
    }

    bb41: {
        StorageDead(_19);
        goto -> bb44;
    }

    bb42: {
        StorageDead(_12);
        StorageDead(_11);
        drop(_8) -> [return: bb43, unwind: bb49];
    }

    bb43: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_58) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_19) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_12) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_8) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        resume;
    }

    bb50 (cleanup): {
        _135 = discriminant(_73);
        goto -> bb46;
    }

    bb51 (cleanup): {
        drop(_83) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_118) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_81) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_119) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_79) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_120) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_77) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_121) -> [0: bb60, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_75) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_122) -> [0: bb46, otherwise: bb59];
    }

    bb61 (cleanup): {
        _136 = discriminant(_20);
        goto -> bb49;
    }

    bb62 (cleanup): {
        _137 = discriminant(_4);
        goto -> bb47;
    }
}
