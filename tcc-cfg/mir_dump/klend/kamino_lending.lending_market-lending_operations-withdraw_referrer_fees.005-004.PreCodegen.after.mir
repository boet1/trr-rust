// MIR for `lending_operations::withdraw_referrer_fees` after PreCodegen

fn lending_operations::withdraw_referrer_fees(_1: &mut reserve::Reserve, _2: u64, _3: &mut referral::ReferrerTokenState) -> std::result::Result<u64, anchor_lang::error::Error> {
    debug reserve => _1;
    debug slot => _2;
    debug referrer_token_state => _3;
    let mut _0: std::result::Result<u64, anchor_lang::error::Error>;
    let _4: ();
    let mut _5: bool;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _7: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _8: &state::last_update::LastUpdate;
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: bool;
    let mut _15: !;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let _22: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 1];
    let _26: &[&str; 1];
    let _27: [&str; 1];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &u8;
    let _34: &u8;
    let _35: state::last_update::PriceStatusFlags;
    let mut _36: &state::last_update::LastUpdate;
    let mut _37: &[core::fmt::rt::Placeholder];
    let mut _38: &[core::fmt::rt::Placeholder; 1];
    let _39: &[core::fmt::rt::Placeholder; 1];
    let _40: [core::fmt::rt::Placeholder; 1];
    let mut _41: core::fmt::rt::Placeholder;
    let mut _42: core::fmt::rt::Alignment;
    let mut _43: core::fmt::rt::Count;
    let mut _44: core::fmt::rt::Count;
    let mut _45: core::fmt::rt::UnsafeArg;
    let mut _46: anchor_lang::error::Error;
    let mut _47: anchor_lang::error::AnchorError;
    let mut _48: std::string::String;
    let mut _49: &LendingError;
    let _50: LendingError;
    let mut _51: u32;
    let mut _52: LendingError;
    let mut _53: std::string::String;
    let mut _54: &LendingError;
    let _55: LendingError;
    let mut _56: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _57: anchor_lang::error::ErrorOrigin;
    let mut _58: anchor_lang::error::Source;
    let mut _59: std::option::Option<anchor_lang::error::ComparedValues>;
    let _60: u64;
    let mut _61: &state::reserve::Reserve;
    let mut _62: &state::referral::ReferrerTokenState;
    let _63: ();
    let mut _64: bool;
    let mut _65: u64;
    let mut _66: !;
    let mut _67: anchor_lang::error::Error;
    let mut _68: anchor_lang::error::AnchorError;
    let mut _69: std::string::String;
    let mut _70: &LendingError;
    let _71: LendingError;
    let mut _72: u32;
    let mut _73: LendingError;
    let mut _74: std::string::String;
    let mut _75: &LendingError;
    let _76: LendingError;
    let mut _77: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _78: anchor_lang::error::ErrorOrigin;
    let mut _79: anchor_lang::error::Source;
    let mut _80: std::option::Option<anchor_lang::error::ComparedValues>;
    let _81: ();
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _83: std::result::Result<(), anchor_lang::error::Error>;
    let mut _84: &mut state::reserve::ReserveLiquidity;
    let mut _85: u64;
    let mut _86: &mut state::referral::ReferrerTokenState;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _92: ();
    let mut _93: &mut state::last_update::LastUpdate;
    let mut _94: u64;
    let mut _95: &LendingError;
    let mut _96: &LendingError;
    let mut _97: &[&str; 1];
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug res => _22;
    }
    scope 6 {
    }
    scope 7 {
        debug withdraw_amount => _60;
        let _88: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _91: ();
        let mut _98: &LendingError;
        let mut _99: &LendingError;
        scope 8 {
            debug residual => _88;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _91;
            scope 11 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_9);
        _9 = _2;
        _7 = last_update::LastUpdate::is_stale(move _8, move _9, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: bool);
        _5 = _14;
        StorageDead(_14);
        switchInt(move _5) -> [0: bb41, otherwise: bb40];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _108 = discriminant(_6);
        StorageDead(_6);
        goto -> bb34;
    }

    bb7: {
        StorageDead(_36);
        _34 = &(_35.0: u8);
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _33) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_43);
        _43 = core::fmt::rt::Count::Implied;
        StorageLive(_44);
        _44 = core::fmt::rt::Count::Is(const 8_usize);
        _41 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _42, const 8_u32, move _43, move _44) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_45);
        _45 = core::fmt::rt::UnsafeArg::new() -> [return: bb10, unwind continue];
    }

    bb10: {
        _23 = Arguments::<'_>::new_v1_formatted(move _24, move _28, move _37, move _45) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_45);
        StorageDead(_37);
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <std::string::String as Deref>::deref(move _19) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        StorageDead(_17);
        drop(_21) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _96 = const _;
        _49 = &(*_96);
        _48 = LendingError::name(move _49) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        _52 = LendingError::ReserveStale;
        _51 = <LendingError as Into<u32>>::into(move _52) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        _95 = const _;
        _54 = &(*_95);
        _53 = <LendingError as ToString>::to_string(move _54) -> [return: bb18, unwind: bb37];
    }

    bb18: {
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1968_u32 };
        _57 = anchor_lang::error::ErrorOrigin::Source(move _58);
        StorageDead(_58);
        _56 = std::option::Option::<ErrorOrigin>::Some(move _57);
        StorageDead(_57);
        StorageLive(_59);
        _59 = std::option::Option::<ComparedValues>::None;
        _47 = anchor_lang::error::AnchorError { error_name: move _48, error_code_number: move _51, error_msg: move _53, error_origin: move _56, compared_values: move _59 };
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_48);
        _46 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _47) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        StorageDead(_47);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _46);
        StorageDead(_46);
        goto -> bb34;
    }

    bb20: {
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _60;
        _64 = Eq(move _65, const 0_u64);
        switchInt(move _64) -> [0: bb26, otherwise: bb21];
    }

    bb21: {
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _99 = const _;
        _70 = &(*_99);
        _69 = LendingError::name(move _70) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        _73 = LendingError::InsufficientReferralFeesToRedeem;
        _72 = <LendingError as Into<u32>>::into(move _73) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        _98 = const _;
        _75 = &(*_98);
        _74 = <LendingError as ToString>::to_string(move _75) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1974_u32 };
        _78 = anchor_lang::error::ErrorOrigin::Source(move _79);
        StorageDead(_79);
        _77 = std::option::Option::<ErrorOrigin>::Some(move _78);
        StorageDead(_78);
        StorageLive(_80);
        _80 = std::option::Option::<ComparedValues>::None;
        _68 = anchor_lang::error::AnchorError { error_name: move _69, error_code_number: move _72, error_msg: move _74, error_origin: move _77, compared_values: move _80 };
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        _67 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _68) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        StorageDead(_68);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _67);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb33;
    }

    bb26: {
        StorageDead(_65);
        _63 = const ();
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &mut ((*_1).5: state::reserve::ReserveLiquidity);
        StorageLive(_85);
        _85 = _60;
        StorageLive(_86);
        _86 = &mut (*_3);
        _83 = ReserveLiquidity::withdraw_referrer_fees(move _84, move _85, move _86) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        _82 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb28, unwind: bb39];
    }

    bb28: {
        StorageDead(_83);
        _87 = discriminant(_82);
        switchInt(move _87) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_91);
        _91 = ((_82 as Continue).0: ());
        _81 = _91;
        StorageDead(_91);
        _104 = discriminant(_82);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &mut ((*_1).1: state::last_update::LastUpdate);
        _92 = last_update::LastUpdate::mark_stale(move _93) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_88);
        _88 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_90);
        _90 = move _88;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _90) -> [return: bb31, unwind: bb42];
    }

    bb31: {
        StorageDead(_90);
        StorageDead(_88);
        _106 = discriminant(_82);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_94);
        _94 = _60;
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Ok(move _94);
        StorageDead(_94);
        StorageDead(_60);
        goto -> bb35;
    }

    bb33: {
        StorageDead(_60);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_69) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_48) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_21) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40: {
        _100 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _97 = const _;
        _26 = &(*_97);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_1).1: state::last_update::LastUpdate);
        _35 = last_update::LastUpdate::get_price_status(move _36) -> [return: bb7, unwind continue];
    }

    bb41: {
        _102 = discriminant(_6);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_1);
        StorageLive(_62);
        _62 = &(*_3);
        _60 = reserve::Reserve::get_withdraw_referrer_fees(move _61, move _62) -> [return: bb20, unwind continue];
    }

    bb42 (cleanup): {
        _110 = discriminant(_82);
        goto -> bb39;
    }

    bb43 (cleanup): {
        _111 = discriminant(_6);
        goto -> bb39;
    }
}
