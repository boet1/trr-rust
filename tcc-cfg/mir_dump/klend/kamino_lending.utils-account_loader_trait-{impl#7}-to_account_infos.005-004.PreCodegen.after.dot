digraph Mir_0_2159 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;account_loader_trait::FatAccountLoader&lt;'info, T&gt; as anchor_lang::ToAccountInfos&lt;'info&gt;&gt;::to_account_infos(_1: &amp;ReErased utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#1&gt;) -&gt; std::vec::Vec&lt;anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, std::alloc::Global&gt;<br align="left"/>let mut _2: std::boxed::Box&lt;[anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], std::alloc::Global&gt;;<br align="left"/>let mut _3: std::boxed::Box&lt;[anchor_lang::prelude::AccountInfo&lt;ReErased&gt;; 1_usize], std::alloc::Global&gt;;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: usize;<br align="left"/>let mut _6: *mut u8;<br align="left"/>let mut _7: std::boxed::Box&lt;[anchor_lang::prelude::AccountInfo&lt;ReErased&gt;; 1_usize], std::alloc::Global&gt;;<br align="left"/>let mut _8: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _9: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _10: &amp;ReErased mut std::boxed::Box&lt;[anchor_lang::prelude::AccountInfo&lt;ReErased&gt;; 1_usize], std::alloc::Global&gt;;<br align="left"/>let mut _11: ();<br align="left"/>let mut _12: *const [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _13: *const ();<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_4 = SizeOf([anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1])<br/>_5 = AlignOf([anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1])<br/></td></tr><tr><td align="left">_6 = alloc::alloc::exchange_malloc(move _4, move _5)</td></tr></table>>];
    bb1__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = ShallowInitBox(move _6, [anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1])<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;((*_1).0: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/></td></tr><tr><td align="left">_8 = &lt;anchor_lang::prelude::AccountInfo&lt;'_&gt; as Clone&gt;::clone(move _9)</td></tr></table>>];
    bb2__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_12 = (((_7.0: std::ptr::Unique&lt;[anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1]&gt;).0: std::ptr::NonNull&lt;[anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1]&gt;).0: *const [anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1])<br/>_13 = _12 as *const () (PtrToPtr)<br/>_14 = _13 as usize (Transmute)<br/>_15 = AlignOf([anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1])<br/>_16 = Sub(_15, const 1_usize)<br/>_17 = BitAnd(_14, _16)<br/>_18 = Eq(_17, const 0_usize)<br/></td></tr><tr><td align="left">assert(_18, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _15, _14)</td></tr></table>>];
    bb3__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb4__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">4 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb5__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">5 (cleanup)</td></tr><tr><td align="left" balign="left">_10 = &amp;mut _7<br/></td></tr><tr><td align="left">_11 = &lt;Box&lt;[anchor_lang::prelude::AccountInfo&lt;'_&gt;; 1]&gt; as Drop&gt;::drop(move _10)</td></tr></table>>];
    bb6__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">(*_12) = [move _8]<br/>StorageDead(_8)<br/>_3 = move _7<br/>_2 = move _3 as std::boxed::Box&lt;[anchor_lang::prelude::AccountInfo&lt;'_&gt;]&gt; (PointerCoercion(Unsize))<br/>StorageDead(_7)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">_0 = std::slice::&lt;impl [anchor_lang::prelude::AccountInfo&lt;'_&gt;]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _2)</td></tr></table>>];
    bb7__0_2159 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">7 (cleanup)</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2159 -> bb1__0_2159 [label="return"];
    bb1__0_2159 -> bb2__0_2159 [label="return"];
    bb1__0_2159 -> bb5__0_2159 [label="unwind"];
    bb2__0_2159 -> bb6__0_2159 [label="success"];
    bb5__0_2159 -> bb7__0_2159 [label="return"];
    bb6__0_2159 -> bb3__0_2159 [label="return"];
    bb6__0_2159 -> bb4__0_2159 [label="unwind"];
    bb7__0_2159 -> bb4__0_2159 [label=""];
}
