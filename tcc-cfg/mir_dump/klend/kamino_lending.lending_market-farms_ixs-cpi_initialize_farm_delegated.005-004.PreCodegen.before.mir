// MIR for `cpi_initialize_farm_delegated` before PreCodegen

fn cpi_initialize_farm_delegated(_1: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _4: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _10: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _12: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _15: anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &farms::accounts::InitializeFarmDelegated;
    let _19: farms::accounts::InitializeFarmDelegated;
    let mut _20: anchor_lang::prelude::Pubkey;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let _22: anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: &anchor_lang::prelude::Signer<'_>;
    let mut _24: anchor_lang::prelude::Pubkey;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let _27: anchor_lang::prelude::AccountInfo<'_>;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _29: anchor_lang::prelude::Pubkey;
    let mut _30: &anchor_lang::prelude::AccountInfo<'_>;
    let _31: anchor_lang::prelude::AccountInfo<'_>;
    let mut _32: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _33: anchor_lang::prelude::Pubkey;
    let mut _34: &anchor_lang::prelude::AccountInfo<'_>;
    let _35: anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let _39: anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _41: anchor_lang::prelude::Pubkey;
    let mut _42: &anchor_lang::prelude::AccountInfo<'_>;
    let _43: anchor_lang::prelude::AccountInfo<'_>;
    let mut _44: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _45: std::option::Option<bool>;
    let mut _47: &farms::instruction::InitializeFarmDelegated;
    let _48: farms::instruction::InitializeFarmDelegated;
    let mut _50: anchor_lang::prelude::Pubkey;
    let mut _51: &anchor_lang::prelude::AccountInfo<'_>;
    let _52: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: &anchor_lang::prelude::Program<'_, farms::program::Farms>;
    let mut _54: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _55: std::vec::Vec<u8>;
    let _57: [&[u8]; 3];
    let mut _58: &[u8];
    let mut _59: &[u8];
    let _60: &[u8];
    let mut _61: &[u8];
    let _62: &[u8];
    let mut _63: &[u8];
    let _64: &[u8];
    let mut _65: &anchor_lang::prelude::Pubkey;
    let mut _66: &[u8];
    let mut _67: &[u8; 1];
    let _68: &[u8; 1];
    let _69: [u8; 1];
    let mut _70: u8;
    let mut _71: u64;
    let mut _72: &state::lending_market::LendingMarket;
    let mut _73: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _75: &handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _76: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _77: &solana_program::instruction::Instruction;
    let _78: &solana_program::instruction::Instruction;
    let mut _79: &[anchor_lang::prelude::AccountInfo<'_>];
    let _80: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _81: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _82: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _83: &[&[&[u8]]];
    let mut _84: &[&[&[u8]]; 1];
    let _85: &[&[&[u8]]; 1];
    let _86: [&[&[u8]]; 1];
    let mut _87: &[&[u8]];
    let mut _88: &[&[u8]; 3];
    let mut _90: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _91: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _92: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _93: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _94: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _95: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _96: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _97: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _98: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _99: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _100: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    scope 1 {
        debug lending_market => _2;
        let _11: anchor_lang::prelude::Pubkey;
        scope 6 {
            debug lending_market_key => _11;
            let _13: anchor_lang::prelude::Pubkey;
            scope 7 {
                debug farm_state_key => _13;
                let _17: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
                scope 8 {
                    debug accounts => _17;
                    let _46: std::vec::Vec<u8>;
                    let mut _89: &farms::instruction::InitializeFarmDelegated;
                    scope 9 {
                        debug data => _46;
                        let _49: solana_program::instruction::Instruction;
                        scope 10 {
                            debug instruction => _49;
                            let _56: &[&[u8]; 3];
                            scope 11 {
                                debug lending_market_authority_signer_seeds => _56;
                                let _74: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
                                scope 12 {
                                    debug account_infos => _74;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _102 = const false;
        _101 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _90 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _5 = &((*_90).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _4 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb59];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _2 = move _10;
        StorageDead(_10);
        _103 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        _91 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _12 = &((*_91).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _11 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _12) -> [return: bb7, unwind: bb58];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _9) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _105 = discriminant(_3);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb43;
    }

    bb7: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _92 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _16 = &((*_92).6: anchor_lang::prelude::AccountInfo<'_>);
        _15 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _16) -> [return: bb8, unwind: bb58];
    }

    bb8: {
        _14 = &_15;
        StorageDead(_16);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _14) -> [return: bb9, unwind: bb57];
    }

    bb9: {
        StorageDead(_14);
        drop(_15) -> [return: bb10, unwind: bb58];
    }

    bb10: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _93 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _23 = &((*_93).0: anchor_lang::prelude::Signer<'_>);
        _22 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _23) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        _21 = &_22;
        StorageDead(_23);
        _20 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _21) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        StorageDead(_21);
        StorageLive(_24);
        _24 = _13;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _94 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _28 = &((*_94).2: anchor_lang::prelude::AccountInfo<'_>);
        _27 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _28) -> [return: bb13, unwind: bb56];
    }

    bb13: {
        _26 = &_27;
        StorageDead(_28);
        _25 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _26) -> [return: bb14, unwind: bb55];
    }

    bb14: {
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _95 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _32 = &((*_95).7: anchor_lang::prelude::AccountInfo<'_>);
        _31 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _32) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        _30 = &_31;
        StorageDead(_32);
        _29 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _30) -> [return: bb16, unwind: bb54];
    }

    bb16: {
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _96 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _36 = &((*_96).5: anchor_lang::prelude::AccountInfo<'_>);
        _35 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _36) -> [return: bb17, unwind: bb54];
    }

    bb17: {
        _34 = &_35;
        StorageDead(_36);
        _33 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _34) -> [return: bb18, unwind: bb53];
    }

    bb18: {
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _97 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _40 = &((*_97).9: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _39 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _40) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        _38 = &_39;
        StorageDead(_40);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _38) -> [return: bb20, unwind: bb52];
    }

    bb20: {
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _98 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _44 = &((*_98).8: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _43 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _44) -> [return: bb21, unwind: bb52];
    }

    bb21: {
        _42 = &_43;
        StorageDead(_44);
        _41 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _42) -> [return: bb22, unwind: bb51];
    }

    bb22: {
        StorageDead(_42);
        _19 = farms::accounts::InitializeFarmDelegated { farm_admin: move _20, farm_delegate: move _25, farm_state: move _24, global_config: move _33, farm_vaults_authority: move _29, system_program: move _37, rent: move _41 };
        _18 = &_19;
        StorageDead(_41);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageLive(_45);
        _45 = std::option::Option::<bool>::None;
        _17 = <farms::accounts::InitializeFarmDelegated as anchor_lang::ToAccountMetas>::to_account_metas(move _18, move _45) -> [return: bb23, unwind: bb51];
    }

    bb23: {
        _102 = const true;
        StorageDead(_45);
        StorageDead(_18);
        drop(_43) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        StorageDead(_43);
        drop(_39) -> [return: bb25, unwind: bb47];
    }

    bb25: {
        StorageDead(_39);
        drop(_35) -> [return: bb26, unwind: bb48];
    }

    bb26: {
        StorageDead(_35);
        drop(_31) -> [return: bb27, unwind: bb49];
    }

    bb27: {
        StorageDead(_31);
        drop(_27) -> [return: bb28, unwind: bb50];
    }

    bb28: {
        StorageDead(_27);
        drop(_22) -> [return: bb29, unwind: bb63];
    }

    bb29: {
        StorageDead(_22);
        StorageDead(_19);
        StorageLive(_46);
        StorageLive(_47);
        _89 = const _;
        _47 = &(*_89);
        _46 = <farms::instruction::InitializeFarmDelegated as InstructionData>::data(move _47) -> [return: bb30, unwind: bb63];
    }

    bb30: {
        _101 = const true;
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _99 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _53 = &((*_99).4: anchor_lang::prelude::Program<'_, farms::program::Farms>);
        _52 = <anchor_lang::prelude::Program<'_, Farms> as Deref>::deref(move _53) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        _51 = &(*_52);
        StorageDead(_53);
        _50 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _51) -> [return: bb32, unwind: bb61];
    }

    bb32: {
        StorageDead(_51);
        StorageLive(_54);
        _102 = const false;
        _54 = move _17;
        StorageLive(_55);
        _101 = const false;
        _55 = move _46;
        _49 = Instruction { program_id: move _50, accounts: move _54, data: move _55 };
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_50);
        StorageDead(_52);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = const _;
        _59 = &(*_60);
        _58 = _59;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_11;
        _64 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _65) -> [return: bb33, unwind: bb45];
    }

    bb33: {
        _63 = &(*_64);
        StorageDead(_65);
        _62 = <[u8] as AsRef<[u8]>>::as_ref(move _63) -> [return: bb34, unwind: bb45];
    }

    bb34: {
        _61 = &(*_62);
        StorageDead(_63);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_2;
        _72 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _73) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        StorageDead(_73);
        _71 = ((*_72).1: u64);
        _70 = move _71 as u8 (IntToInt);
        StorageDead(_71);
        _69 = [move _70];
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _66 = move _67 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_67);
        _57 = [move _58, move _61, move _66];
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_58);
        _56 = &_57;
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_74);
        StorageLive(_75);
        _100 = deref_copy ((*_1).1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _75 = &(*_100);
        _74 = <handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _75) -> [return: bb36, unwind: bb45];
    }

    bb36: {
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_49;
        _77 = &(*_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_74;
        _81 = &(*_82);
        _80 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _81) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        _79 = &(*_80);
        StorageDead(_81);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_56);
        _87 = move _88 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_88);
        _86 = [move _87];
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = move _84 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_84);
        _76 = invoke_signed(move _77, move _79, move _83) -> [return: bb38, unwind: bb44];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_79);
        StorageDead(_77);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into}>(move _76, <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into) -> [return: bb39, unwind: bb44];
    }

    bb39: {
        StorageDead(_76);
        drop(_74) -> [return: bb40, unwind: bb45];
    }

    bb40: {
        StorageDead(_74);
        StorageDead(_69);
        StorageDead(_57);
        StorageDead(_56);
        drop(_49) -> [return: bb41, unwind: bb61];
    }

    bb41: {
        StorageDead(_49);
        _101 = const false;
        StorageDead(_46);
        _102 = const false;
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_11);
        drop(_2) -> [return: bb42, unwind: bb59];
    }

    bb42: {
        StorageDead(_2);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_74) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_49) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_39) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_35) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_31) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_27) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_22) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_43) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_39) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_35) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_31) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_27) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_22) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_15) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_2) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        resume;
    }

    bb60 (cleanup): {
        drop(_46) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_101) -> [0: bb63, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_17) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_102) -> [0: bb58, otherwise: bb62];
    }

    bb64 (cleanup): {
        _107 = discriminant(_3);
        goto -> bb59;
    }
}
