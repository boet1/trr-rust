// MIR for `lending_operations::flash_borrow_reserve_liquidity` after PreCodegen

fn lending_operations::flash_borrow_reserve_liquidity(_1: &mut reserve::Reserve, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug reserve => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: !;
    let _7: ();
    let mut _8: &str;
    let _9: &str;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::AnchorError;
    let mut _12: std::string::String;
    let mut _13: &LendingError;
    let _14: LendingError;
    let mut _15: u32;
    let mut _16: LendingError;
    let mut _17: std::string::String;
    let mut _18: &LendingError;
    let _19: LendingError;
    let mut _20: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _21: anchor_lang::error::ErrorOrigin;
    let mut _22: anchor_lang::error::Source;
    let mut _23: std::option::Option<anchor_lang::error::ComparedValues>;
    let _24: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _25: u64;
    let _26: ();
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _28: std::result::Result<(), anchor_lang::error::Error>;
    let mut _29: &mut state::reserve::ReserveLiquidity;
    let mut _30: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _36: ();
    let mut _37: &mut state::last_update::LastUpdate;
    let mut _38: ();
    let mut _39: &LendingError;
    let mut _40: &LendingError;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    scope 1 {
        debug liquidity_amount_f => _24;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: ();
        scope 2 {
            debug residual => _32;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _35;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((((*_1).9: state::reserve::ReserveConfig).14: state::reserve::ReserveFees).1: u64);
        _4 = Eq(move _5, const _);
        switchInt(move _4) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "Flash loans are disabled for this reserve";
        _8 = &(*_9);
        _7 = solana_program::log::sol_log(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _40 = const _;
        _13 = &(*_40);
        _12 = LendingError::name(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = LendingError::FlashLoansDisabled;
        _15 = <LendingError as Into<u32>>::into(move _16) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _39 = const _;
        _18 = &(*_39);
        _17 = <LendingError as ToString>::to_string(move _18) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1650_u32 };
        _21 = anchor_lang::error::ErrorOrigin::Source(move _22);
        StorageDead(_22);
        _20 = std::option::Option::<ErrorOrigin>::Some(move _21);
        StorageDead(_21);
        StorageLive(_23);
        _23 = std::option::Option::<ComparedValues>::None;
        _11 = anchor_lang::error::AnchorError { error_name: move _12, error_code_number: move _15, error_msg: move _17, error_origin: move _20, compared_values: move _23 };
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        _10 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _11) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        StorageDead(_11);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb16;
    }

    bb7: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _2;
        _24 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut ((*_1).5: state::reserve::ReserveLiquidity);
        StorageLive(_30);
        _30 = _24;
        _28 = ReserveLiquidity::borrow(move _29, move _30) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _28) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: ());
        _26 = _35;
        StorageDead(_35);
        _41 = discriminant(_27);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut ((*_1).1: state::last_update::LastUpdate);
        _36 = last_update::LastUpdate::mark_stale(move _37) -> [return: bb15, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_32);
        _32 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_32);
        _43 = discriminant(_27);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_38);
        _38 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_24);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_12) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _45 = discriminant(_27);
        goto -> bb18;
    }
}
