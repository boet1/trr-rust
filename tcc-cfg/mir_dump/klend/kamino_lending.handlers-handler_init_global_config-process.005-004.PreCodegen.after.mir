// MIR for `handlers::handler_init_global_config::process` after PreCodegen

fn handlers::handler_init_global_config::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_global_config::InitGlobalConfig<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &mut std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _3: std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::global_config::GlobalConfig>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let _12: ();
    let mut _13: &mut state::global_config::GlobalConfig;
    let mut _14: &mut state::global_config::GlobalConfig;
    let mut _15: &mut std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _16: anchor_lang::prelude::Pubkey;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, anchor_lang::prelude::Pubkey>;
    let mut _18: std::result::Result<anchor_lang::prelude::Pubkey, LendingError>;
    let mut _19: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _20: &anchor_lang::ProgramData;
    let mut _21: &anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>;
    let mut _22: LendingError;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _28: ();
    let mut _29: &mut handlers::handler_init_global_config::InitGlobalConfig<'_>;
    let mut _30: &mut handlers::handler_init_global_config::InitGlobalConfig<'_>;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    scope 1 {
        debug global_config => _2;
        let _24: std::result::Result<std::convert::Infallible, LendingError>;
        let _27: anchor_lang::prelude::Pubkey;
        scope 6 {
            debug residual => _24;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _27;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _29 = deref_copy (_1.1: &mut handlers::handler_init_global_config::InitGlobalConfig<'_>);
        _6 = &((*_29).1: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::load_init(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::global_config::GlobalConfig>);
        _3 = move _11;
        StorageDead(_11);
        _2 = &mut _3;
        _31 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_2);
        _14 = <RefMut<'_, global_config::GlobalConfig> as DerefMut>::deref_mut(move _15) -> [return: bb7, unwind: bb18];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _33 = discriminant(_4);
        StorageDead(_4);
        goto -> bb16;
    }

    bb7: {
        _13 = &mut (*_14);
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _30 = deref_copy (_1.1: &mut handlers::handler_init_global_config::InitGlobalConfig<'_>);
        _21 = &((*_30).2: anchor_lang::prelude::Account<'_, anchor_lang::ProgramData>);
        _20 = <anchor_lang::prelude::Account<'_, anchor_lang::ProgramData> as Deref>::deref(move _21) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        StorageDead(_21);
        _19 = ((*_20).1: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_22);
        _22 = LendingError::NoUpgradeAuthority;
        _18 = std::option::Option::<anchor_lang::prelude::Pubkey>::ok_or::<LendingError>(move _19, move _22) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_19);
        _17 = <std::result::Result<anchor_lang::prelude::Pubkey, LendingError> as Try>::branch(move _18) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        StorageDead(_18);
        _23 = discriminant(_17);
        switchInt(move _23) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_17 as Continue).0: anchor_lang::prelude::Pubkey);
        _16 = _27;
        StorageDead(_27);
        _12 = global_config::GlobalConfig::init(move _13, move _16) -> [return: bb14, unwind: bb18];
    }

    bb12: {
        StorageLive(_24);
        _24 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _26) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        drop(_3) -> [return: bb16, unwind: bb19];
    }

    bb14: {
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_28);
        _28 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _28);
        StorageDead(_28);
        drop(_3) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb17;
    }

    bb16: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        _35 = discriminant(_4);
        goto -> bb19;
    }
}
