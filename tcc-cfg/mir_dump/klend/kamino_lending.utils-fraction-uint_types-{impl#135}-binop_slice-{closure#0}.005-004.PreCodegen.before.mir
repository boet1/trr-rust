// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::binop_slice::{closure#0}` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::binop_slice::{closure#0}(_1: &mut {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1193:41: 1193:49}, _2: (&mut u64, &u64)) -> () {
    debug c => (*((*_1).0: &mut bool));
    debug binop => (*((*_1).1: &impl Fn(u64, u64) -> (u64, bool) + Copy));
    let mut _0: ();
    let _3: &mut u64;
    let _4: &u64;
    let mut _7: (u64, bool);
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: bool;
    let mut _11: impl Fn(u64, u64) -> (u64, bool) + Copy;
    let mut _12: u64;
    let mut _13: bool;
    let mut _14: &mut bool;
    let mut _15: &impl Fn(u64, u64) -> (u64, bool) + Copy;
    let mut _16: &mut bool;
    scope 1 {
        debug x => _3;
        debug y => _4;
        let _5: u64;
        let _6: bool;
        scope 2 {
            debug res => _5;
            debug carry => _6;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = move (_2.0: &mut u64);
        StorageLive(_4);
        _4 = (_2.1: &u64);
        StorageLive(_7);
        StorageLive(_8);
        _8 = (*_3);
        StorageLive(_9);
        _9 = (*_4);
        StorageLive(_10);
        _14 = deref_copy ((*_1).0: &mut bool);
        _10 = (*_14);
        StorageLive(_11);
        _15 = deref_copy ((*_1).1: &impl Fn(u64, u64) -> (u64, bool) + Copy);
        _11 = (*_15);
        _7 = uint_types::U128::binop_carry::<impl Fn(u64, u64) -> (u64, bool) + Copy>(move _8, move _9, move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_5);
        _5 = (_7.0: u64);
        StorageLive(_6);
        _6 = (_7.1: bool);
        StorageDead(_7);
        StorageLive(_12);
        _12 = _5;
        (*_3) = move _12;
        StorageDead(_12);
        StorageLive(_13);
        _13 = _6;
        _16 = deref_copy ((*_1).0: &mut bool);
        (*_16) = move _13;
        StorageDead(_13);
        _0 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
