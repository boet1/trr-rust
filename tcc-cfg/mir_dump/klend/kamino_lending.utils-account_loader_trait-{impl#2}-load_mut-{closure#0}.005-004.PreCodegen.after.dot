digraph Mir_0_2133 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn account_loader_trait::FatAccountLoader::&lt;'info, T&gt;::load_mut::{closure#0}(_1: Closure(DefId(0:2133 ~ kamino_lending[6389]::utils::account_loader_trait::{impl#2}::load_mut::{closure#0}), [ReErased, T/#1, i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) mut &amp;ReErased mut [u8],)) -&gt; &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) mut T/#1, [Region(BrAnon)]), ()]), _2: &amp;ReErased mut &amp;ReErased mut [u8]) -&gt; &amp;ReErased mut T/#1<br align="left"/>let mut _3: &amp;ReErased mut T/#1;<br align="left"/>let mut _4: &amp;ReErased mut T/#1;<br align="left"/>let mut _5: &amp;ReErased mut [u8];<br align="left"/>let mut _6: &amp;ReErased mut [u8];<br align="left"/>let mut _7: &amp;ReErased mut [u8];<br align="left"/>let mut _8: &amp;ReErased mut [u8];<br align="left"/>let mut _9: &amp;ReErased mut [u8];<br align="left"/>let mut _10: &amp;ReErased mut &amp;ReErased mut [u8];<br align="left"/>let mut _11: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: (usize, bool);<br align="left"/>debug data =&gt; _2;<br align="left"/>>;
    bb0__0_2133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;mut (*_2)<br/></td></tr><tr><td align="left">_9 = &lt;&amp;mut [u8] as DerefMut&gt;::deref_mut(move _10)</td></tr></table>>];
    bb1__0_2133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_8 = &amp;mut (*_9)<br/>StorageDead(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/></td></tr><tr><td align="left">_13 = std::mem::size_of::&lt;T&gt;()</td></tr></table>>];
    bb2__0_2133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_14 = CheckedAdd(_13, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_14.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _13, const 8_usize)</td></tr></table>>];
    bb3__0_2133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_12 = move (_14.0: usize)<br/>StorageDead(_13)<br/>_11 = std::ops::Range::&lt;usize&gt; { start: const 8_usize, end: move _12 }<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_7 = &lt;[u8] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _8, move _11)</td></tr></table>>];
    bb4__0_2133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_8)<br/>_6 = &amp;mut (*_7)<br/>_5 = &amp;mut (*_6)<br/></td></tr><tr><td align="left">_4 = bytemuck::from_bytes_mut::&lt;T&gt;(move _5)</td></tr></table>>];
    bb5__0_2133 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_3 = &amp;mut (*_4)<br/>StorageDead(_5)<br/>_0 = &amp;mut (*_3)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2133 -> bb1__0_2133 [label="return"];
    bb1__0_2133 -> bb2__0_2133 [label="return"];
    bb2__0_2133 -> bb3__0_2133 [label="success"];
    bb3__0_2133 -> bb4__0_2133 [label="return"];
    bb4__0_2133 -> bb5__0_2133 [label="return"];
}
