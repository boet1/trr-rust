// MIR for `get_validated_price` before PreCodegen

fn get_validated_price(_1: TimestampedPriceWithTwap, _2: &token_info::TokenInfo, _3: i64) -> std::option::Option<prices::GetPriceResult> {
    debug price_and_twap => _1;
    debug token_info => _2;
    debug unix_timestamp => _3;
    let mut _0: std::option::Option<utils::prices::GetPriceResult>;
    let _4: u64;
    let mut _5: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _6: i64;
    let mut _11: &state::token_info::TokenInfo;
    let mut _13: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let mut _14: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>;
    let mut _15: ();
    let mut _16: isize;
    let _18: ();
    let mut _19: &mut state::last_update::PriceStatusFlags;
    let mut _21: !;
    let _22: ();
    let mut _23: &str;
    let _24: &str;
    let mut _25: &std::string::String;
    let _26: &std::string::String;
    let _27: std::string::String;
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[&str; 2];
    let _32: &[&str; 2];
    let _33: [&str; 2];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let mut _35: &[core::fmt::rt::Argument<'_>; 2];
    let _36: &[core::fmt::rt::Argument<'_>; 2];
    let _37: [core::fmt::rt::Argument<'_>; 2];
    let mut _38: core::fmt::rt::Argument<'_>;
    let mut _39: &&str;
    let _40: &&str;
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &anchor_lang::error::Error;
    let _43: &anchor_lang::error::Error;
    let _44: ();
    let mut _45: std::result::Result<(), anchor_lang::error::Error>;
    let mut _46: u64;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: isize;
    let mut _50: &mut state::last_update::PriceStatusFlags;
    let _52: ();
    let _53: ();
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 3];
    let _57: &[&str; 3];
    let _58: [&str; 3];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 2];
    let _61: &[core::fmt::rt::Argument<'_>; 2];
    let _62: [core::fmt::rt::Argument<'_>; 2];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &&str;
    let _65: &&str;
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &anchor_lang::error::Error;
    let _68: &anchor_lang::error::Error;
    let _69: ();
    let mut _70: bool;
    let mut _71: &state::token_info::TokenInfo;
    let mut _72: isize;
    let _74: ();
    let mut _75: std::result::Result<(), anchor_lang::error::Error>;
    let mut _76: u64;
    let mut _77: u64;
    let mut _78: u64;
    let mut _79: isize;
    let mut _80: &mut state::last_update::PriceStatusFlags;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: &std::string::String;
    let _86: &std::string::String;
    let _87: std::string::String;
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let mut _91: &[&str; 2];
    let _92: &[&str; 2];
    let _93: [&str; 2];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let mut _95: &[core::fmt::rt::Argument<'_>; 2];
    let _96: &[core::fmt::rt::Argument<'_>; 2];
    let _97: [core::fmt::rt::Argument<'_>; 2];
    let mut _98: core::fmt::rt::Argument<'_>;
    let mut _99: &&str;
    let _100: &&str;
    let mut _101: core::fmt::rt::Argument<'_>;
    let mut _102: &anchor_lang::error::Error;
    let _103: &anchor_lang::error::Error;
    let mut _104: std::result::Result<(), anchor_lang::error::Error>;
    let mut _105: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let mut _106: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>;
    let mut _107: ();
    let mut _108: {closure@programs\klend\src\utils\prices\checks.rs:64:27: 64:37};
    let mut _109: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _110: &state::token_info::TokenInfo;
    let mut _111: isize;
    let _112: ();
    let mut _113: &mut state::last_update::PriceStatusFlags;
    let _115: ();
    let mut _116: &str;
    let _117: &str;
    let mut _118: &std::string::String;
    let _119: &std::string::String;
    let _120: std::string::String;
    let mut _122: std::fmt::Arguments<'_>;
    let mut _123: &[&str];
    let mut _124: &[&str; 2];
    let _125: &[&str; 2];
    let _126: [&str; 2];
    let mut _127: &[core::fmt::rt::Argument<'_>];
    let mut _128: &[core::fmt::rt::Argument<'_>; 2];
    let _129: &[core::fmt::rt::Argument<'_>; 2];
    let _130: [core::fmt::rt::Argument<'_>; 2];
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: &&str;
    let _133: &&str;
    let mut _134: core::fmt::rt::Argument<'_>;
    let mut _135: &anchor_lang::error::Error;
    let _136: &anchor_lang::error::Error;
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 1];
    let _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: [core::fmt::rt::Argument<'_>; 1];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &&str;
    let _155: &&str;
    let _156: ();
    let mut _157: &mut state::last_update::PriceStatusFlags;
    let _158: ();
    let mut _159: &mut state::last_update::PriceStatusFlags;
    let _160: ();
    let mut _161: std::result::Result<(), anchor_lang::error::Error>;
    let mut _162: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _163: &state::token_info::PriceHeuristic;
    let _164: &state::token_info::PriceHeuristic;
    let mut _165: isize;
    let mut _166: &mut state::last_update::PriceStatusFlags;
    let mut _168: &str;
    let _169: &str;
    let mut _170: &std::string::String;
    let _171: &std::string::String;
    let _172: std::string::String;
    let mut _174: std::fmt::Arguments<'_>;
    let mut _175: &[&str];
    let mut _176: &[&str; 2];
    let _177: &[&str; 2];
    let _178: [&str; 2];
    let mut _179: &[core::fmt::rt::Argument<'_>];
    let mut _180: &[core::fmt::rt::Argument<'_>; 2];
    let _181: &[core::fmt::rt::Argument<'_>; 2];
    let _182: [core::fmt::rt::Argument<'_>; 2];
    let mut _183: core::fmt::rt::Argument<'_>;
    let mut _184: &&str;
    let _185: &&str;
    let mut _186: core::fmt::rt::Argument<'_>;
    let mut _187: &anchor_lang::error::Error;
    let _188: &anchor_lang::error::Error;
    let _189: ();
    let mut _190: bool;
    let mut _191: u8;
    let _192: ();
    let mut _193: &mut state::last_update::PriceStatusFlags;
    let mut _194: utils::prices::GetPriceResult;
    let mut _195: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _196: u64;
    let mut _197: state::last_update::PriceStatusFlags;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    scope 1 {
        debug unix_timestamp => _4;
        let _7: utils::prices::types::TimestampedPrice;
        let _8: std::option::Option<utils::prices::types::TimestampedPrice>;
        scope 2 {
            debug price => _7;
            debug twap => _8;
            let mut _9: state::last_update::PriceStatusFlags;
            scope 3 {
                debug price_status => _9;
                let _10: &str;
                scope 4 {
                    debug price_label => _10;
                    let _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    let _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    let _20: anchor_lang::error::Error;
                    scope 5 {
                        debug price_dec => _12;
                        let _51: anchor_lang::error::Error;
                        let _143: std::string::String;
                        let _167: anchor_lang::error::Error;
                        let mut _200: &[&str; 2];
                        scope 9 {
                            debug e => _51;
                            let mut _203: &[&str; 3];
                        }
                        scope 10 {
                            debug twap => _73;
                            let _73: utils::prices::types::TimestampedPrice;
                            let _81: anchor_lang::error::Error;
                            let _114: anchor_lang::error::Error;
                            scope 11 {
                                debug e => _81;
                                let _88: std::string::String;
                                let mut _202: &[&str; 2];
                                scope 12 {
                                    debug res => _88;
                                }
                            }
                            scope 13 {
                                debug e => _114;
                                let _121: std::string::String;
                                let mut _201: &[&str; 2];
                                scope 14 {
                                    debug res => _121;
                                }
                            }
                        }
                        scope 15 {
                            debug res => _143;
                        }
                        scope 16 {
                            debug e => _167;
                            let _173: std::string::String;
                            let mut _199: &[&str; 2];
                            scope 17 {
                                debug res => _173;
                            }
                        }
                    }
                    scope 6 {
                        debug price_dec => _17;
                    }
                    scope 7 {
                        debug e => _20;
                        let _28: std::string::String;
                        let mut _198: &[&str; 2];
                        scope 8 {
                            debug res => _28;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _213 = const false;
        _212 = const false;
        _211 = const false;
        _210 = const false;
        _204 = const false;
        _208 = const false;
        _205 = const false;
        _209 = const false;
        _206 = const false;
        _207 = const false;
        _212 = const true;
        _213 = const true;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = <u64 as TryFrom<i64>>::try_from(move _6) -> [return: bb1, unwind: bb117];
    }

    bb1: {
        StorageDead(_6);
        _4 = std::result::Result::<u64, TryFromIntError>::unwrap(move _5) -> [return: bb2, unwind: bb117];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        _213 = const false;
        _211 = const true;
        _7 = move (_1.0: utils::prices::types::TimestampedPrice);
        StorageLive(_8);
        _212 = const false;
        _208 = const true;
        _8 = move (_1.1: std::option::Option<utils::prices::types::TimestampedPrice>);
        StorageLive(_9);
        _9 = last_update::_::<impl last_update::PriceStatusFlags>::empty() -> [return: bb3, unwind: bb111];
    }

    bb3: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_2);
        _10 = token_info::TokenInfo::symbol(move _11) -> [return: bb4, unwind: bb111];
    }

    bb4: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _211 = const false;
        _14 = move (_7.0: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>);
        StorageLive(_15);
        _15 = ();
        _13 = <Box<dyn FnOnce() -> std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>> as FnOnce<()>>::call_once(move _14, move _15) -> [return: bb5, unwind: bb111];
    }

    bb5: {
        _210 = const true;
        StorageDead(_15);
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        StorageLive(_20);
        _20 = move ((_13 as Err).0: anchor_lang::error::Error);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _198 = const _;
        _32 = &(*_198);
        _31 = &(*_32);
        _30 = move _31 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_10;
        _39 = &(*_40);
        _38 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _39) -> [return: bb10, unwind: bb93];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_17);
        _17 = ((_13 as Ok).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _9;
        _18 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _19, const _, const true) -> [return: bb9, unwind: bb108];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        _12 = _17;
        StorageDead(_17);
        _214 = discriminant(_13);
        _210 = const false;
        StorageDead(_13);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = (_7.1: u64);
        StorageLive(_47);
        _47 = ((*_2).3: u64);
        StorageLive(_48);
        _48 = _4;
        _45 = check_price_age(move _46, move _47, move _48) -> [return: bb17, unwind: bb111];
    }

    bb10: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_20;
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _42) -> [return: bb11, unwind: bb93];
    }

    bb11: {
        StorageDead(_42);
        _37 = [move _38, move _41];
        StorageDead(_41);
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = move _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_35);
        _29 = Arguments::<'_>::new_v1(move _30, move _34) -> [return: bb12, unwind: bb93];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_30);
        _28 = format(move _29) -> [return: bb13, unwind: bb93];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        _27 = move _28;
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = <std::string::String as Deref>::deref(move _25) -> [return: bb14, unwind: bb92];
    }

    bb14: {
        _23 = &(*_24);
        StorageDead(_25);
        _22 = solana_program::log::sol_log(move _23) -> [return: bb15, unwind: bb92];
    }

    bb15: {
        StorageDead(_23);
        drop(_27) -> [return: bb16, unwind: bb93];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        _0 = std::option::Option::<prices::GetPriceResult>::None;
        drop(_20) -> [return: bb81, unwind: bb108];
    }

    bb17: {
        _204 = const true;
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb19, 1: bb18, otherwise: bb7];
    }

    bb18: {
        StorageLive(_51);
        _51 = move ((_45 as Err).0: anchor_lang::error::Error);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _203 = const _;
        _57 = &(*_203);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_10;
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _64) -> [return: bb21, unwind: bb91];
    }

    bb19: {
        StorageLive(_50);
        _50 = &mut _9;
        _44 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _50, const _, const true) -> [return: bb20, unwind: bb107];
    }

    bb20: {
        StorageDead(_50);
        goto -> bb95;
    }

    bb21: {
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_51;
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _67) -> [return: bb22, unwind: bb91];
    }

    bb22: {
        StorageDead(_67);
        _62 = [move _63, move _66];
        StorageDead(_66);
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb23, unwind: bb91];
    }

    bb23: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = _print(move _54) -> [return: bb24, unwind: bb91];
    }

    bb24: {
        StorageDead(_54);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        StorageDead(_53);
        _52 = const ();
        StorageDead(_52);
        _44 = const ();
        drop(_51) -> [return: bb25, unwind: bb107];
    }

    bb25: {
        StorageDead(_51);
        goto -> bb95;
    }

    bb26: {
        switchInt(move _70) -> [0: bb61, otherwise: bb27];
    }

    bb27: {
        StorageDead(_71);
        _72 = discriminant(_8);
        switchInt(move _72) -> [1: bb28, otherwise: bb54];
    }

    bb28: {
        StorageLive(_73);
        _208 = const false;
        _209 = const true;
        _73 = move ((_8 as Some).0: utils::prices::types::TimestampedPrice);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = (_73.1: u64);
        StorageLive(_77);
        _77 = ((*_2).4: u64);
        StorageLive(_78);
        _78 = _4;
        _75 = check_price_age(move _76, move _77, move _78) -> [return: bb29, unwind: bb106];
    }

    bb29: {
        _205 = const true;
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        _79 = discriminant(_75);
        switchInt(move _79) -> [0: bb31, 1: bb30, otherwise: bb7];
    }

    bb30: {
        StorageLive(_81);
        _81 = move ((_75 as Err).0: anchor_lang::error::Error);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _202 = const _;
        _92 = &(*_202);
        _91 = &(*_92);
        _90 = move _91 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_10;
        _99 = &(*_100);
        _98 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _99) -> [return: bb33, unwind: bb90];
    }

    bb31: {
        StorageLive(_80);
        _80 = &mut _9;
        _74 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _80, const _, const true) -> [return: bb32, unwind: bb104];
    }

    bb32: {
        StorageDead(_80);
        goto -> bb96;
    }

    bb33: {
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &_81;
        _102 = &(*_103);
        _101 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _102) -> [return: bb34, unwind: bb90];
    }

    bb34: {
        StorageDead(_102);
        _97 = [move _98, move _101];
        StorageDead(_101);
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = move _95 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_95);
        _89 = Arguments::<'_>::new_v1(move _90, move _94) -> [return: bb35, unwind: bb90];
    }

    bb35: {
        StorageDead(_94);
        StorageDead(_90);
        _88 = format(move _89) -> [return: bb36, unwind: bb90];
    }

    bb36: {
        StorageDead(_89);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        _87 = move _88;
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = <std::string::String as Deref>::deref(move _85) -> [return: bb37, unwind: bb89];
    }

    bb37: {
        _83 = &(*_84);
        StorageDead(_85);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb38, unwind: bb89];
    }

    bb38: {
        StorageDead(_83);
        drop(_87) -> [return: bb39, unwind: bb90];
    }

    bb39: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        _74 = const ();
        drop(_81) -> [return: bb40, unwind: bb104];
    }

    bb40: {
        StorageDead(_81);
        goto -> bb96;
    }

    bb41: {
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_12;
        StorageLive(_110);
        _110 = &(*_2);
        _108 = {closure@programs\klend\src\utils\prices\checks.rs:64:27: 64:37} { price_dec: move _109, token_info: move _110 };
        StorageDead(_110);
        StorageDead(_109);
        _104 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::and_then::<(), {closure@programs\klend\src\utils\prices\checks.rs:64:27: 64:37}>(move _105, move _108) -> [return: bb42, unwind: bb106];
    }

    bb42: {
        _206 = const true;
        StorageDead(_108);
        StorageDead(_105);
        _111 = discriminant(_104);
        switchInt(move _111) -> [0: bb44, 1: bb43, otherwise: bb7];
    }

    bb43: {
        StorageLive(_114);
        _114 = move ((_104 as Err).0: anchor_lang::error::Error);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _201 = const _;
        _125 = &(*_201);
        _124 = &(*_125);
        _123 = move _124 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_10;
        _132 = &(*_133);
        _131 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _132) -> [return: bb46, unwind: bb88];
    }

    bb44: {
        StorageLive(_112);
        StorageLive(_113);
        _113 = &mut _9;
        _112 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _113, const _, const true) -> [return: bb45, unwind: bb103];
    }

    bb45: {
        StorageDead(_113);
        StorageDead(_112);
        _69 = const ();
        goto -> bb97;
    }

    bb46: {
        StorageDead(_132);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_114;
        _135 = &(*_136);
        _134 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _135) -> [return: bb47, unwind: bb88];
    }

    bb47: {
        StorageDead(_135);
        _130 = [move _131, move _134];
        StorageDead(_134);
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = move _128 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_128);
        _122 = Arguments::<'_>::new_v1(move _123, move _127) -> [return: bb48, unwind: bb88];
    }

    bb48: {
        StorageDead(_127);
        StorageDead(_123);
        _121 = format(move _122) -> [return: bb49, unwind: bb88];
    }

    bb49: {
        StorageDead(_122);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        _120 = move _121;
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = <std::string::String as Deref>::deref(move _118) -> [return: bb50, unwind: bb87];
    }

    bb50: {
        _116 = &(*_117);
        StorageDead(_118);
        _115 = solana_program::log::sol_log(move _116) -> [return: bb51, unwind: bb87];
    }

    bb51: {
        StorageDead(_116);
        drop(_120) -> [return: bb52, unwind: bb88];
    }

    bb52: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        _69 = const ();
        drop(_114) -> [return: bb53, unwind: bb103];
    }

    bb53: {
        StorageDead(_114);
        goto -> bb97;
    }

    bb54: {
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _200 = const _;
        _147 = &(*_200);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_10;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _154) -> [return: bb55, unwind: bb111];
    }

    bb55: {
        StorageDead(_154);
        _152 = [move _153];
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb56, unwind: bb111];
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb57, unwind: bb111];
    }

    bb57: {
        StorageDead(_144);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <std::string::String as Deref>::deref(move _140) -> [return: bb58, unwind: bb86];
    }

    bb58: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb59, unwind: bb86];
    }

    bb59: {
        StorageDead(_138);
        drop(_142) -> [return: bb60, unwind: bb111];
    }

    bb60: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        _69 = const ();
        goto -> bb64;
    }

    bb61: {
        StorageDead(_71);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &mut _9;
        _156 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _157, const _, const true) -> [return: bb62, unwind: bb111];
    }

    bb62: {
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &mut _9;
        _158 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _159, const _, const true) -> [return: bb63, unwind: bb111];
    }

    bb63: {
        StorageDead(_159);
        StorageDead(_158);
        _69 = const ();
        goto -> bb64;
    }

    bb64: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = _12;
        StorageLive(_163);
        StorageLive(_164);
        _164 = &((*_2).1: state::token_info::PriceHeuristic);
        _163 = &(*_164);
        _161 = check_price_heuristics(move _162, move _163) -> [return: bb65, unwind: bb111];
    }

    bb65: {
        _207 = const true;
        StorageDead(_163);
        StorageDead(_162);
        _165 = discriminant(_161);
        switchInt(move _165) -> [0: bb67, 1: bb66, otherwise: bb7];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_161 as Err).0: anchor_lang::error::Error);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _199 = const _;
        _177 = &(*_199);
        _176 = &(*_177);
        _175 = move _176 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_176);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_10;
        _184 = &(*_185);
        _183 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _184) -> [return: bb69, unwind: bb85];
    }

    bb67: {
        StorageLive(_166);
        _166 = &mut _9;
        _160 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _166, const _, const true) -> [return: bb68, unwind: bb102];
    }

    bb68: {
        StorageDead(_166);
        goto -> bb98;
    }

    bb69: {
        StorageDead(_184);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_167;
        _187 = &(*_188);
        _186 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _187) -> [return: bb70, unwind: bb85];
    }

    bb70: {
        StorageDead(_187);
        _182 = [move _183, move _186];
        StorageDead(_186);
        StorageDead(_183);
        _181 = &_182;
        _180 = &(*_181);
        _179 = move _180 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_180);
        _174 = Arguments::<'_>::new_v1(move _175, move _179) -> [return: bb71, unwind: bb85];
    }

    bb71: {
        StorageDead(_179);
        StorageDead(_175);
        _173 = format(move _174) -> [return: bb72, unwind: bb85];
    }

    bb72: {
        StorageDead(_174);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_177);
        _172 = move _173;
        StorageDead(_173);
        _171 = &_172;
        _170 = &(*_171);
        _169 = <std::string::String as Deref>::deref(move _170) -> [return: bb73, unwind: bb84];
    }

    bb73: {
        _168 = &(*_169);
        StorageDead(_170);
        _160 = solana_program::log::sol_log(move _168) -> [return: bb74, unwind: bb84];
    }

    bb74: {
        drop(_172) -> [return: bb75, unwind: bb85];
    }

    bb75: {
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_168);
        drop(_167) -> [return: bb76, unwind: bb102];
    }

    bb76: {
        StorageDead(_167);
        goto -> bb98;
    }

    bb77: {
        StorageDead(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &mut _9;
        _192 = last_update::_::<impl last_update::PriceStatusFlags>::set(move _193, const _, const true) -> [return: bb78, unwind: bb111];
    }

    bb78: {
        StorageDead(_193);
        StorageDead(_192);
        _189 = const ();
        goto -> bb80;
    }

    bb79: {
        StorageDead(_191);
        _189 = const ();
        goto -> bb80;
    }

    bb80: {
        StorageDead(_190);
        StorageDead(_189);
        StorageLive(_194);
        StorageLive(_195);
        _195 = _12;
        StorageLive(_196);
        _196 = (_7.1: u64);
        StorageLive(_197);
        _197 = _9;
        _194 = prices::GetPriceResult { price: move _195, timestamp: move _196, status: move _197 };
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_195);
        _0 = std::option::Option::<prices::GetPriceResult>::Some(move _194);
        StorageDead(_194);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _224 = discriminant(_8);
        switchInt(move _224) -> [1: bb100, otherwise: bb99];
    }

    bb81: {
        StorageDead(_20);
        _226 = discriminant(_13);
        _210 = const false;
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        drop(_8) -> [return: bb82, unwind: bb113];
    }

    bb82: {
        _208 = const false;
        StorageDead(_8);
        _211 = const false;
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb83;
    }

    bb83: {
        return;
    }

    bb84 (cleanup): {
        drop(_172) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_167) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_142) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_120) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_114) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_87) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_81) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_51) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_27) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_20) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        resume;
    }

    bb95: {
        _216 = discriminant(_45);
        _204 = const false;
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_2);
        _70 = token_info::TokenInfo::is_twap_enabled(move _71) -> [return: bb26, unwind: bb111];
    }

    bb96: {
        _218 = discriminant(_75);
        _205 = const false;
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _209 = const false;
        _106 = move (_73.0: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>);
        StorageLive(_107);
        _107 = ();
        _105 = <Box<dyn FnOnce() -> std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>> as FnOnce<()>>::call_once(move _106, move _107) -> [return: bb41, unwind: bb106];
    }

    bb97: {
        _220 = discriminant(_104);
        _206 = const false;
        StorageDead(_104);
        _209 = const false;
        StorageDead(_73);
        goto -> bb64;
    }

    bb98: {
        _222 = discriminant(_161);
        StorageDead(_164);
        _207 = const false;
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = ((*_2).8: u8);
        _190 = Eq(move _191, const 0_u8);
        switchInt(move _190) -> [0: bb79, otherwise: bb77];
    }

    bb99: {
        _208 = const false;
        StorageDead(_8);
        _211 = const false;
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb83;
    }

    bb100: {
        switchInt(_208) -> [0: bb99, otherwise: bb101];
    }

    bb101: {
        drop(((_8 as Some).0: utils::prices::types::TimestampedPrice)) -> [return: bb99, unwind: bb113];
    }

    bb102 (cleanup): {
        _228 = discriminant(_161);
        goto -> bb111;
    }

    bb103 (cleanup): {
        _229 = discriminant(_104);
        goto -> bb106;
    }

    bb104 (cleanup): {
        _230 = discriminant(_75);
        goto -> bb106;
    }

    bb105 (cleanup): {
        drop((_73.0: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>)) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_209) -> [0: bb111, otherwise: bb105];
    }

    bb107 (cleanup): {
        _231 = discriminant(_45);
        goto -> bb111;
    }

    bb108 (cleanup): {
        _232 = discriminant(_13);
        goto -> bb111;
    }

    bb109 (cleanup): {
        switchInt(_208) -> [0: bb113, otherwise: bb110];
    }

    bb110 (cleanup): {
        drop(((_8 as Some).0: utils::prices::types::TimestampedPrice)) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        _233 = discriminant(_8);
        switchInt(move _233) -> [1: bb109, otherwise: bb113];
    }

    bb112 (cleanup): {
        drop((_7.0: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>)) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_211) -> [0: bb117, otherwise: bb112];
    }

    bb114 (cleanup): {
        switchInt(_212) -> [0: bb94, otherwise: bb115];
    }

    bb115 (cleanup): {
        drop((_1.1: std::option::Option<utils::prices::types::TimestampedPrice>)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop((_1.0: utils::prices::types::TimestampedPrice)) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        switchInt(_213) -> [0: bb114, otherwise: bb116];
    }
}
