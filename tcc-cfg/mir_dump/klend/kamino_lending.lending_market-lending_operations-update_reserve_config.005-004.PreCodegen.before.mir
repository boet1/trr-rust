// MIR for `lending_operations::update_reserve_config` before PreCodegen

fn lending_operations::update_reserve_config(_1: &mut reserve::Reserve, _2: state::UpdateConfigMode, _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug reserve => _1;
    debug mode => _2;
    debug value => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: u64;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _8: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _10: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _11: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _12: &mut u8;
    let mut _13: &mut u8;
    let mut _14: &[u8];
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: ();
    let _20: ();
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _22: std::result::Result<(), anchor_lang::error::Error>;
    let mut _23: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _24: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _25: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _26: &mut u16;
    let mut _27: &mut u16;
    let mut _28: &[u8];
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _33: ();
    let _34: ();
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _36: std::result::Result<(), anchor_lang::error::Error>;
    let mut _37: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _38: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _39: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _40: &mut u8;
    let mut _41: &mut u8;
    let mut _42: &[u8];
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _47: ();
    let _48: ();
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _50: std::result::Result<(), anchor_lang::error::Error>;
    let mut _51: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _52: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _53: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _54: &mut u8;
    let mut _55: &mut u8;
    let mut _56: &[u8];
    let mut _57: isize;
    let _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _61: ();
    let _62: ();
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _64: std::result::Result<(), anchor_lang::error::Error>;
    let mut _65: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _66: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _67: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _68: &mut u8;
    let mut _69: &mut u8;
    let mut _70: &[u8];
    let mut _71: isize;
    let _72: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _75: ();
    let _76: ();
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _78: std::result::Result<(), anchor_lang::error::Error>;
    let mut _79: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _80: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _81: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _82: &mut u8;
    let mut _83: &mut u8;
    let mut _84: &[u8];
    let mut _85: isize;
    let _86: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _89: ();
    let _90: ();
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _92: std::result::Result<(), anchor_lang::error::Error>;
    let mut _93: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::renderings::as_fraction::<u64>}>;
    let mut _94: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _95: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _96: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _97: &mut u64;
    let mut _98: &mut u64;
    let mut _99: {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21};
    let mut _100: u128;
    let mut _101: &[u8];
    let mut _102: isize;
    let _103: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _106: ();
    let _107: ();
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _109: std::result::Result<(), anchor_lang::error::Error>;
    let mut _110: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::renderings::as_fraction::<u64>}>;
    let mut _111: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _112: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _113: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _114: &mut u64;
    let mut _115: &mut u64;
    let mut _116: {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21};
    let mut _117: u128;
    let mut _118: &[u8];
    let mut _119: isize;
    let _120: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _123: ();
    let _124: ();
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _126: std::result::Result<(), anchor_lang::error::Error>;
    let mut _127: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _128: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _129: &mut u64;
    let mut _130: &mut u64;
    let mut _131: &[u8];
    let mut _132: isize;
    let _133: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _136: ();
    let _137: ();
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _139: std::result::Result<(), anchor_lang::error::Error>;
    let mut _140: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _141: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _142: &mut u64;
    let mut _143: &mut u64;
    let mut _144: &[u8];
    let mut _145: isize;
    let _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _149: ();
    let _150: ();
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _152: std::result::Result<(), anchor_lang::error::Error>;
    let mut _153: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _154: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _155: &mut u64;
    let mut _156: &mut u64;
    let mut _157: &[u8];
    let mut _158: isize;
    let _159: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _162: ();
    let _163: ();
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _165: std::result::Result<(), anchor_lang::error::Error>;
    let mut _166: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _167: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _168: &mut u64;
    let mut _169: &mut u64;
    let mut _170: &[u8];
    let mut _171: isize;
    let _172: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _173: !;
    let mut _174: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _175: ();
    let _176: ();
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _178: std::result::Result<(), anchor_lang::error::Error>;
    let mut _179: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _180: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _181: &mut u64;
    let mut _182: &mut u64;
    let mut _183: &[u8];
    let mut _184: isize;
    let _185: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _188: ();
    let _189: ();
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _191: std::result::Result<(), anchor_lang::error::Error>;
    let mut _192: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_bps::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _193: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _194: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _195: &mut u64;
    let mut _196: &mut u64;
    let mut _197: &[u8];
    let mut _198: isize;
    let _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _202: ();
    let _203: ();
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _205: std::result::Result<(), anchor_lang::error::Error>;
    let mut _206: lending_market::config_items::ConfigItemUpdater<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u16; 4]>}>;
    let mut _207: lending_market::config_items::ConfigItemUpdater<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u16; 4]>}>;
    let mut _208: &mut [u16; 4];
    let mut _209: &mut [u16; 4];
    let mut _210: &[u8];
    let mut _211: isize;
    let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _215: ();
    let _216: ();
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _218: std::result::Result<(), anchor_lang::error::Error>;
    let mut _219: lending_market::config_items::ConfigItemUpdater<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u16; 4]>}>;
    let mut _220: lending_market::config_items::ConfigItemUpdater<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u16; 4]>}>;
    let mut _221: &mut [u16; 4];
    let mut _222: &mut [u16; 4];
    let mut _223: &[u8];
    let mut _224: isize;
    let _225: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _228: ();
    let _229: ();
    let mut _230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _231: std::result::Result<(), anchor_lang::error::Error>;
    let mut _232: lending_market::config_items::ConfigItemUpdater<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::renderings::as_utf8_null_padded_string::<32>}>;
    let mut _233: lending_market::config_items::ConfigItemUpdater<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u8; 32]>}>;
    let mut _234: lending_market::config_items::ConfigItemUpdater<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u8; 32]>}>;
    let mut _235: &mut [u8; 32];
    let mut _236: &mut [u8; 32];
    let mut _237: &[u8];
    let mut _238: isize;
    let _239: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _240: !;
    let mut _241: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _242: ();
    let _243: ();
    let mut _244: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _245: std::result::Result<(), anchor_lang::error::Error>;
    let mut _246: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _247: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _248: &mut u64;
    let mut _249: &mut u64;
    let mut _250: &[u8];
    let mut _251: isize;
    let _252: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _253: !;
    let mut _254: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _255: ();
    let _256: ();
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _258: std::result::Result<(), anchor_lang::error::Error>;
    let mut _259: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _260: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _261: &mut u64;
    let mut _262: &mut u64;
    let mut _263: &[u8];
    let mut _264: isize;
    let _265: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _266: !;
    let mut _267: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _268: ();
    let _269: ();
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _271: std::result::Result<(), anchor_lang::error::Error>;
    let mut _272: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _273: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _274: &mut anchor_lang::prelude::Pubkey;
    let mut _275: &mut anchor_lang::prelude::Pubkey;
    let mut _276: &[u8];
    let mut _277: isize;
    let _278: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _281: ();
    let _282: ();
    let mut _283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _284: std::result::Result<(), anchor_lang::error::Error>;
    let mut _285: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _286: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _287: &mut anchor_lang::prelude::Pubkey;
    let mut _288: &mut anchor_lang::prelude::Pubkey;
    let mut _289: &[u8];
    let mut _290: isize;
    let _291: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _292: !;
    let mut _293: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _294: ();
    let _295: ();
    let mut _296: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _297: std::result::Result<(), anchor_lang::error::Error>;
    let mut _298: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _299: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _300: &mut anchor_lang::prelude::Pubkey;
    let mut _301: &mut anchor_lang::prelude::Pubkey;
    let mut _302: &[u8];
    let mut _303: isize;
    let _304: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _305: !;
    let mut _306: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _307: ();
    let _308: ();
    let mut _309: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _310: std::result::Result<(), anchor_lang::error::Error>;
    let mut _311: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _312: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _313: &mut anchor_lang::prelude::Pubkey;
    let mut _314: &mut anchor_lang::prelude::Pubkey;
    let mut _315: &[u8];
    let mut _316: isize;
    let _317: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _318: !;
    let mut _319: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _320: ();
    let _321: ();
    let mut _322: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _323: std::result::Result<(), anchor_lang::error::Error>;
    let mut _324: lending_market::config_items::ConfigItemUpdater<'_, utils::borrow_rate_curve::BorrowRateCurve, utils::borrow_rate_curve::BorrowRateCurve, for<'a> fn(&'a mut utils::borrow_rate_curve::BorrowRateCurve, utils::borrow_rate_curve::BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<utils::borrow_rate_curve::BorrowRateCurve>}, for<'t, 'a> fn(&'t utils::borrow_rate_curve::BorrowRateCurve, &'a utils::borrow_rate_curve::BorrowRateCurve) -> std::result::Result<std::option::Option<&'t utils::borrow_rate_curve::BorrowRateCurve>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<utils::borrow_rate_curve::BorrowRateCurve>}, for<'a> fn(&'a utils::borrow_rate_curve::BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<utils::borrow_rate_curve::BorrowRateCurve>}, for<'a, 'b, 'c> fn(&'a utils::borrow_rate_curve::BorrowRateCurve, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<utils::borrow_rate_curve::BorrowRateCurve>}>;
    let mut _325: lending_market::config_items::ConfigItemUpdater<'_, utils::borrow_rate_curve::BorrowRateCurve, utils::borrow_rate_curve::BorrowRateCurve, for<'a> fn(&'a mut utils::borrow_rate_curve::BorrowRateCurve, utils::borrow_rate_curve::BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<utils::borrow_rate_curve::BorrowRateCurve>}, for<'t, 'a> fn(&'t utils::borrow_rate_curve::BorrowRateCurve, &'a utils::borrow_rate_curve::BorrowRateCurve) -> std::result::Result<std::option::Option<&'t utils::borrow_rate_curve::BorrowRateCurve>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<utils::borrow_rate_curve::BorrowRateCurve>}, for<'a> fn(&'a utils::borrow_rate_curve::BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<utils::borrow_rate_curve::BorrowRateCurve>}, for<'a, 'b, 'c> fn(&'a utils::borrow_rate_curve::BorrowRateCurve, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<utils::borrow_rate_curve::BorrowRateCurve>}>;
    let mut _326: &mut utils::borrow_rate_curve::BorrowRateCurve;
    let mut _327: &mut utils::borrow_rate_curve::BorrowRateCurve;
    let mut _328: &[u8];
    let mut _329: isize;
    let _330: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _333: ();
    let _334: ();
    let mut _335: &str;
    let _336: &str;
    let _337: u8;
    let _341: ();
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _343: std::result::Result<(), anchor_lang::error::Error>;
    let mut _344: lending_market::config_items::ConfigItemUpdater<'_, state::reserve::ReserveConfig, state::reserve::ReserveConfig, for<'a> fn(&'a mut state::reserve::ReserveConfig, state::reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<state::reserve::ReserveConfig>}, for<'t, 'a> fn(&'t state::reserve::ReserveConfig, &'a state::reserve::ReserveConfig) -> std::result::Result<std::option::Option<&'t state::reserve::ReserveConfig>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<state::reserve::ReserveConfig>}, for<'a> fn(&'a state::reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<state::reserve::ReserveConfig>}, for<'a, 'b, 'c> fn(&'a state::reserve::ReserveConfig, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<state::reserve::ReserveConfig>}>;
    let mut _345: lending_market::config_items::ConfigItemUpdater<'_, state::reserve::ReserveConfig, state::reserve::ReserveConfig, for<'a> fn(&'a mut state::reserve::ReserveConfig, state::reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<state::reserve::ReserveConfig>}, for<'t, 'a> fn(&'t state::reserve::ReserveConfig, &'a state::reserve::ReserveConfig) -> std::result::Result<std::option::Option<&'t state::reserve::ReserveConfig>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<state::reserve::ReserveConfig>}, for<'a> fn(&'a state::reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<state::reserve::ReserveConfig>}, for<'a, 'b, 'c> fn(&'a state::reserve::ReserveConfig, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<state::reserve::ReserveConfig>}>;
    let mut _346: &mut state::reserve::ReserveConfig;
    let mut _347: &mut state::reserve::ReserveConfig;
    let mut _348: &[u8];
    let mut _349: isize;
    let mut _351: !;
    let mut _352: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _354: u8;
    let mut _355: u8;
    let mut _356: u16;
    let mut _357: u8;
    let _358: ();
    let mut _359: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _360: std::result::Result<(), anchor_lang::error::Error>;
    let mut _361: lending_market::config_items::ConfigItemUpdater<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_not_negative::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<i64>}>;
    let mut _362: lending_market::config_items::ConfigItemUpdater<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<i64>}>;
    let mut _363: lending_market::config_items::ConfigItemUpdater<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<i64>}>;
    let mut _364: &mut i64;
    let mut _365: &mut i64;
    let mut _366: &[u8];
    let mut _367: isize;
    let _368: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _369: !;
    let mut _370: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _371: ();
    let _372: ();
    let mut _373: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _374: std::result::Result<(), anchor_lang::error::Error>;
    let mut _375: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _376: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _377: &mut u64;
    let mut _378: &mut u64;
    let mut _379: &[u8];
    let _380: &[u8];
    let _381: &[u8];
    let mut _382: &[u8];
    let mut _383: std::ops::RangeFrom<usize>;
    let mut _384: usize;
    let mut _385: isize;
    let _386: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _389: ();
    let _390: ();
    let mut _391: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _392: std::result::Result<(), anchor_lang::error::Error>;
    let mut _393: lending_market::config_items::ConfigItemUpdater<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_not_negative::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<i64>}>;
    let mut _394: lending_market::config_items::ConfigItemUpdater<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<i64>}>;
    let mut _395: lending_market::config_items::ConfigItemUpdater<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<i64>}>;
    let mut _396: &mut i64;
    let mut _397: &mut i64;
    let mut _398: &[u8];
    let mut _399: isize;
    let _400: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _401: !;
    let mut _402: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _403: ();
    let _404: ();
    let mut _405: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _406: std::result::Result<(), anchor_lang::error::Error>;
    let mut _407: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _408: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _409: &mut u64;
    let mut _410: &mut u64;
    let mut _411: &[u8];
    let _412: &[u8];
    let _413: &[u8];
    let mut _414: &[u8];
    let mut _415: std::ops::RangeFrom<usize>;
    let mut _416: usize;
    let mut _417: isize;
    let _418: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _419: !;
    let mut _420: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _421: ();
    let _422: ();
    let mut _423: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _424: std::result::Result<(), anchor_lang::error::Error>;
    let mut _425: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _426: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _427: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _428: &mut u16;
    let mut _429: &mut u16;
    let mut _430: {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21};
    let mut _431: &[u8];
    let mut _432: isize;
    let _433: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _434: !;
    let mut _435: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _436: ();
    let _437: ();
    let mut _438: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _439: std::result::Result<(), anchor_lang::error::Error>;
    let mut _440: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _441: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _442: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _443: &mut u16;
    let mut _444: &mut u16;
    let mut _445: &[u8];
    let mut _446: isize;
    let _447: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _448: !;
    let mut _449: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _450: ();
    let _451: ();
    let mut _452: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _453: std::result::Result<(), anchor_lang::error::Error>;
    let mut _454: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _455: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _456: &mut u64;
    let mut _457: &mut u64;
    let mut _458: &[u8];
    let mut _459: isize;
    let _460: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _461: !;
    let mut _462: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _463: ();
    let _464: ();
    let mut _465: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _466: std::result::Result<(), anchor_lang::error::Error>;
    let mut _467: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _468: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _469: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _470: &mut u64;
    let mut _471: &mut u64;
    let mut _472: {closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21};
    let mut _473: &[u8];
    let mut _474: isize;
    let _475: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _476: !;
    let mut _477: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _478: ();
    let _479: ();
    let mut _480: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _481: std::result::Result<(), anchor_lang::error::Error>;
    let mut _482: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_u8_enum::<state::reserve::AssetTier>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::renderings::as_u8_enum::<state::reserve::AssetTier>}>;
    let mut _483: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _484: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _485: &mut u8;
    let mut _486: &mut u8;
    let mut _487: &[u8];
    let mut _488: isize;
    let _489: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _490: !;
    let mut _491: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _492: ();
    let _493: ();
    let mut _494: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _495: std::result::Result<(), anchor_lang::error::Error>;
    let mut _496: lending_market::config_items::ConfigItemUpdater<'_, [u8; 20], [u8; 20], for<'a> fn(&'a mut [u8; 20], [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 20]>}, for<'t, 'a> fn(&'t [u8; 20], &'a [u8; 20]) -> std::result::Result<std::option::Option<&'t [u8; 20]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 20]>}, for<'a> fn(&'a [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 20]>}, for<'a, 'b, 'c> fn(&'a [u8; 20], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u8; 20]>}>;
    let mut _497: lending_market::config_items::ConfigItemUpdater<'_, [u8; 20], [u8; 20], for<'a> fn(&'a mut [u8; 20], [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 20]>}, for<'t, 'a> fn(&'t [u8; 20], &'a [u8; 20]) -> std::result::Result<std::option::Option<&'t [u8; 20]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 20]>}, for<'a> fn(&'a [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 20]>}, for<'a, 'b, 'c> fn(&'a [u8; 20], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u8; 20]>}>;
    let mut _498: &mut [u8; 20];
    let mut _499: &mut [u8; 20];
    let mut _500: &[u8];
    let mut _501: isize;
    let _502: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _503: !;
    let mut _504: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _505: ();
    let _506: ();
    let mut _507: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _508: std::result::Result<(), anchor_lang::error::Error>;
    let mut _509: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _510: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _511: &mut u64;
    let mut _512: &mut u64;
    let mut _513: &[u8];
    let mut _514: isize;
    let _515: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _516: !;
    let mut _517: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _518: ();
    let _519: ();
    let mut _520: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _521: std::result::Result<(), anchor_lang::error::Error>;
    let mut _522: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_u8_enum::<state::reserve::ReserveStatus>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::renderings::as_u8_enum::<state::reserve::ReserveStatus>}>;
    let mut _523: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _524: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _525: &mut u8;
    let mut _526: &mut u8;
    let mut _527: &[u8];
    let mut _528: isize;
    let _529: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _530: !;
    let mut _531: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _532: ();
    let _533: ();
    let mut _534: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _535: std::result::Result<(), anchor_lang::error::Error>;
    let mut _536: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _537: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _538: &mut u64;
    let mut _539: &mut u64;
    let mut _540: &[u8];
    let mut _541: isize;
    let _542: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _543: !;
    let mut _544: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _545: ();
    let _546: ();
    let mut _547: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _548: std::result::Result<(), anchor_lang::error::Error>;
    let mut _549: lending_market::config_items::ConfigItemUpdater<'_, [u64; 32], [u64; 32], for<'a> fn(&'a mut [u64; 32], [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u64; 32]>}, for<'t, 'a> fn(&'t [u64; 32], &'a [u64; 32]) -> std::result::Result<std::option::Option<&'t [u64; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u64; 32]>}, for<'a> fn(&'a [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u64; 32]>}, for<'a, 'b, 'c> fn(&'a [u64; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u64; 32]>}>;
    let mut _550: lending_market::config_items::ConfigItemUpdater<'_, [u64; 32], [u64; 32], for<'a> fn(&'a mut [u64; 32], [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u64; 32]>}, for<'t, 'a> fn(&'t [u64; 32], &'a [u64; 32]) -> std::result::Result<std::option::Option<&'t [u64; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u64; 32]>}, for<'a> fn(&'a [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u64; 32]>}, for<'a, 'b, 'c> fn(&'a [u64; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u64; 32]>}>;
    let mut _551: &mut [u64; 32];
    let mut _552: &mut [u64; 32];
    let mut _553: &[u8];
    let mut _554: isize;
    let _555: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _556: !;
    let mut _557: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _558: ();
    let _559: ();
    let mut _560: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _561: std::result::Result<(), anchor_lang::error::Error>;
    let mut _562: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _563: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _564: &mut anchor_lang::prelude::Pubkey;
    let mut _565: &mut anchor_lang::prelude::Pubkey;
    let mut _566: &[u8];
    let mut _567: isize;
    let _568: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _569: !;
    let mut _570: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _571: ();
    let _572: ();
    let mut _573: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _574: std::result::Result<(), anchor_lang::error::Error>;
    let mut _575: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _576: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _577: &mut anchor_lang::prelude::Pubkey;
    let mut _578: &mut anchor_lang::prelude::Pubkey;
    let mut _579: &[u8];
    let mut _580: isize;
    let _581: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _582: !;
    let mut _583: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _584: ();
    let _585: ();
    let mut _586: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _587: std::result::Result<(), anchor_lang::error::Error>;
    let mut _588: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _589: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _590: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _591: &mut u8;
    let mut _592: &mut u8;
    let mut _593: &[u8];
    let mut _594: isize;
    let _595: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _596: !;
    let mut _597: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _598: ();
    let _599: ();
    let mut _600: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _601: std::result::Result<(), anchor_lang::error::Error>;
    let mut _602: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _603: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _604: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _605: &mut u8;
    let mut _606: &mut u8;
    let mut _607: &[u8];
    let mut _608: isize;
    let _609: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _610: !;
    let mut _611: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _612: ();
    let _613: ();
    let mut _614: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _615: std::result::Result<(), anchor_lang::error::Error>;
    let mut _616: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _617: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _618: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _619: &mut u8;
    let mut _620: &mut u8;
    let mut _621: &[u8];
    let mut _622: isize;
    let _623: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _624: !;
    let mut _625: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _626: ();
    let _627: ();
    let mut _628: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _629: std::result::Result<(), anchor_lang::error::Error>;
    let mut _630: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _631: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _632: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _633: &mut u16;
    let mut _634: &mut u16;
    let mut _635: &[u8];
    let mut _636: isize;
    let _637: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _638: !;
    let mut _639: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _640: ();
    let _641: ();
    let mut _642: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _643: std::result::Result<(), anchor_lang::error::Error>;
    let mut _644: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _645: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _646: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _647: &mut u8;
    let mut _648: &mut u8;
    let mut _649: &[u8];
    let mut _650: isize;
    let _651: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _652: !;
    let mut _653: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _654: ();
    let _655: ();
    let mut _656: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _657: std::result::Result<(), anchor_lang::error::Error>;
    let mut _658: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _659: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _660: &mut u64;
    let mut _661: &mut u64;
    let mut _662: &[u8];
    let mut _663: isize;
    let _664: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _665: !;
    let mut _666: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _667: ();
    let mut _668: !;
    let _669: !;
    let mut _670: std::fmt::Arguments<'_>;
    let mut _671: &[&str];
    let mut _672: &[&str; 1];
    let _673: &[&str; 1];
    let _674: [&str; 1];
    let _675: ();
    let mut _676: &mut state::last_update::LastUpdate;
    let mut _677: ();
    let mut _678: &[&str; 1];
    let mut _679: bool;
    let mut _680: bool;
    let mut _681: bool;
    let mut _682: bool;
    let mut _683: bool;
    let mut _684: bool;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: isize;
    let mut _702: isize;
    let mut _703: isize;
    let mut _704: isize;
    let mut _705: isize;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    let mut _726: isize;
    let mut _727: isize;
    let mut _728: isize;
    let mut _729: isize;
    let mut _730: isize;
    let mut _731: isize;
    let mut _732: isize;
    let mut _733: isize;
    let mut _734: isize;
    let mut _735: isize;
    let mut _736: isize;
    let mut _737: isize;
    let mut _738: isize;
    let mut _739: isize;
    let mut _740: isize;
    let mut _741: isize;
    let mut _742: isize;
    let mut _743: isize;
    let mut _744: isize;
    let mut _745: isize;
    let mut _746: isize;
    let mut _747: isize;
    let mut _748: isize;
    let mut _749: isize;
    let mut _750: isize;
    let mut _751: isize;
    let mut _752: isize;
    let mut _753: isize;
    let mut _754: isize;
    let mut _755: isize;
    let mut _756: isize;
    let mut _757: isize;
    let mut _758: isize;
    let mut _759: isize;
    let mut _760: isize;
    let mut _761: isize;
    let mut _762: isize;
    let mut _763: isize;
    let mut _764: isize;
    let mut _765: isize;
    let mut _766: isize;
    let mut _767: isize;
    let mut _768: isize;
    let mut _769: isize;
    let mut _770: isize;
    let mut _771: isize;
    let mut _772: isize;
    let mut _773: isize;
    let mut _774: isize;
    let mut _775: isize;
    let mut _776: isize;
    let mut _777: isize;
    let mut _778: isize;
    let mut _779: isize;
    let mut _780: isize;
    let mut _781: isize;
    let mut _782: isize;
    let mut _783: isize;
    let mut _784: isize;
    let mut _785: isize;
    let mut _786: isize;
    let mut _787: isize;
    let mut _788: isize;
    let mut _789: isize;
    let mut _790: isize;
    let mut _791: isize;
    let mut _792: isize;
    let mut _793: isize;
    let mut _794: isize;
    let mut _795: isize;
    let mut _796: isize;
    let mut _797: isize;
    let mut _798: isize;
    let mut _799: isize;
    let mut _800: isize;
    let mut _801: isize;
    let mut _802: isize;
    let mut _803: isize;
    let mut _804: isize;
    let mut _805: isize;
    let mut _806: isize;
    let mut _807: isize;
    let mut _808: isize;
    let mut _809: isize;
    let mut _810: isize;
    let mut _811: isize;
    let mut _812: isize;
    let mut _813: isize;
    let mut _814: isize;
    let mut _815: isize;
    let mut _816: isize;
    let mut _817: isize;
    let mut _818: isize;
    let mut _819: isize;
    let mut _820: isize;
    let mut _821: isize;
    let mut _822: isize;
    let mut _823: isize;
    let mut _824: isize;
    let mut _825: isize;
    let mut _826: isize;
    let mut _827: isize;
    let mut _828: isize;
    let mut _829: isize;
    let mut _830: isize;
    let mut _831: isize;
    let mut _832: isize;
    let mut _833: isize;
    let mut _834: isize;
    let mut _835: isize;
    let mut _836: isize;
    let mut _837: isize;
    let mut _838: isize;
    let mut _839: isize;
    let mut _840: isize;
    let mut _841: isize;
    let mut _842: isize;
    let mut _843: isize;
    let mut _844: isize;
    let mut _845: isize;
    let mut _846: isize;
    let mut _847: isize;
    let mut _848: isize;
    let mut _849: isize;
    let mut _850: isize;
    let mut _851: isize;
    let mut _852: isize;
    let mut _853: isize;
    let mut _854: isize;
    let mut _855: isize;
    let mut _856: isize;
    let mut _857: isize;
    let mut _858: isize;
    let mut _859: isize;
    let mut _860: isize;
    let mut _861: isize;
    let mut _862: isize;
    let mut _863: isize;
    let mut _864: isize;
    let mut _865: isize;
    let mut _866: isize;
    let mut _867: isize;
    let mut _868: isize;
    let mut _869: isize;
    let mut _870: isize;
    let mut _871: isize;
    let mut _872: isize;
    let mut _873: isize;
    let mut _874: isize;
    let mut _875: isize;
    let mut _876: isize;
    let mut _877: isize;
    let mut _878: isize;
    let mut _879: isize;
    let mut _880: isize;
    let mut _881: isize;
    let mut _882: isize;
    let mut _883: isize;
    let mut _884: isize;
    let mut _885: isize;
    let mut _886: isize;
    let mut _887: isize;
    let mut _888: isize;
    let mut _889: isize;
    let mut _890: isize;
    let mut _891: isize;
    let mut _892: isize;
    let mut _893: isize;
    let mut _894: isize;
    let mut _895: isize;
    let mut _896: isize;
    let mut _897: isize;
    let mut _898: isize;
    let mut _899: isize;
    let mut _900: isize;
    let mut _901: isize;
    let mut _902: isize;
    let mut _903: isize;
    let mut _904: isize;
    let mut _905: isize;
    let mut _906: isize;
    let mut _907: isize;
    let mut _908: isize;
    let mut _909: isize;
    let mut _910: isize;
    let mut _911: isize;
    let mut _912: isize;
    let mut _913: isize;
    let mut _914: isize;
    let mut _915: isize;
    let mut _916: isize;
    let mut _917: isize;
    let mut _918: isize;
    let mut _919: isize;
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _30;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _33;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _44;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _47;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _58;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _61;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _72;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _75;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _86;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _89;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _103;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _106;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _120;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _123;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _133;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _136;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _146;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _149;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _159;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _162;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _172;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _175;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _185;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _188;
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _199;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _202;
        scope 56 {
        }
    }
    scope 57 {
        debug residual => _212;
        scope 58 {
        }
    }
    scope 59 {
        debug val => _215;
        scope 60 {
        }
    }
    scope 61 {
        debug residual => _225;
        scope 62 {
        }
    }
    scope 63 {
        debug val => _228;
        scope 64 {
        }
    }
    scope 65 {
        debug residual => _239;
        scope 66 {
        }
    }
    scope 67 {
        debug val => _242;
        scope 68 {
        }
    }
    scope 69 {
        debug residual => _252;
        scope 70 {
        }
    }
    scope 71 {
        debug val => _255;
        scope 72 {
        }
    }
    scope 73 {
        debug residual => _265;
        scope 74 {
        }
    }
    scope 75 {
        debug val => _268;
        scope 76 {
        }
    }
    scope 77 {
        debug residual => _278;
        scope 78 {
        }
    }
    scope 79 {
        debug val => _281;
        scope 80 {
        }
    }
    scope 81 {
        debug residual => _291;
        scope 82 {
        }
    }
    scope 83 {
        debug val => _294;
        scope 84 {
        }
    }
    scope 85 {
        debug residual => _304;
        scope 86 {
        }
    }
    scope 87 {
        debug val => _307;
        scope 88 {
        }
    }
    scope 89 {
        debug residual => _317;
        scope 90 {
        }
    }
    scope 91 {
        debug val => _320;
        scope 92 {
        }
    }
    scope 93 {
        debug residual => _330;
        scope 94 {
        }
    }
    scope 95 {
        debug val => _333;
        scope 96 {
        }
    }
    scope 97 {
        debug old_protocol_take_rate_pct => _337;
        let _338: u8;
        scope 98 {
            debug old_protocol_liquidation_fee_pct => _338;
            let _339: u16;
            scope 99 {
                debug old_host_fixed_interest_rate_bps => _339;
                let _340: u8;
                scope 100 {
                    debug old_protocol_order_execution_fee_pct => _340;
                    let _350: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _353: ();
                    scope 101 {
                        debug residual => _350;
                        scope 102 {
                        }
                    }
                    scope 103 {
                        debug val => _353;
                        scope 104 {
                        }
                    }
                }
            }
        }
    }
    scope 105 {
        debug residual => _368;
        scope 106 {
        }
    }
    scope 107 {
        debug val => _371;
        scope 108 {
        }
    }
    scope 109 {
        debug residual => _386;
        scope 110 {
        }
    }
    scope 111 {
        debug val => _389;
        scope 112 {
        }
    }
    scope 113 {
        debug residual => _400;
        scope 114 {
        }
    }
    scope 115 {
        debug val => _403;
        scope 116 {
        }
    }
    scope 117 {
        debug residual => _418;
        scope 118 {
        }
    }
    scope 119 {
        debug val => _421;
        scope 120 {
        }
    }
    scope 121 {
        debug residual => _433;
        scope 122 {
        }
    }
    scope 123 {
        debug val => _436;
        scope 124 {
        }
    }
    scope 125 {
        debug residual => _447;
        scope 126 {
        }
    }
    scope 127 {
        debug val => _450;
        scope 128 {
        }
    }
    scope 129 {
        debug residual => _460;
        scope 130 {
        }
    }
    scope 131 {
        debug val => _463;
        scope 132 {
        }
    }
    scope 133 {
        debug residual => _475;
        scope 134 {
        }
    }
    scope 135 {
        debug val => _478;
        scope 136 {
        }
    }
    scope 137 {
        debug residual => _489;
        scope 138 {
        }
    }
    scope 139 {
        debug val => _492;
        scope 140 {
        }
    }
    scope 141 {
        debug residual => _502;
        scope 142 {
        }
    }
    scope 143 {
        debug val => _505;
        scope 144 {
        }
    }
    scope 145 {
        debug residual => _515;
        scope 146 {
        }
    }
    scope 147 {
        debug val => _518;
        scope 148 {
        }
    }
    scope 149 {
        debug residual => _529;
        scope 150 {
        }
    }
    scope 151 {
        debug val => _532;
        scope 152 {
        }
    }
    scope 153 {
        debug residual => _542;
        scope 154 {
        }
    }
    scope 155 {
        debug val => _545;
        scope 156 {
        }
    }
    scope 157 {
        debug residual => _555;
        scope 158 {
        }
    }
    scope 159 {
        debug val => _558;
        scope 160 {
        }
    }
    scope 161 {
        debug residual => _568;
        scope 162 {
        }
    }
    scope 163 {
        debug val => _571;
        scope 164 {
        }
    }
    scope 165 {
        debug residual => _581;
        scope 166 {
        }
    }
    scope 167 {
        debug val => _584;
        scope 168 {
        }
    }
    scope 169 {
        debug residual => _595;
        scope 170 {
        }
    }
    scope 171 {
        debug val => _598;
        scope 172 {
        }
    }
    scope 173 {
        debug residual => _609;
        scope 174 {
        }
    }
    scope 175 {
        debug val => _612;
        scope 176 {
        }
    }
    scope 177 {
        debug residual => _623;
        scope 178 {
        }
    }
    scope 179 {
        debug val => _626;
        scope 180 {
        }
    }
    scope 181 {
        debug residual => _637;
        scope 182 {
        }
    }
    scope 183 {
        debug val => _640;
        scope 184 {
        }
    }
    scope 185 {
        debug residual => _651;
        scope 186 {
        }
    }
    scope 187 {
        debug val => _654;
        scope 188 {
        }
    }
    scope 189 {
        debug residual => _664;
        scope 190 {
        }
    }
    scope 191 {
        debug val => _667;
        scope 192 {
        }
    }

    bb0: {
        _684 = const false;
        _683 = const false;
        _682 = const false;
        _681 = const false;
        _680 = const false;
        _679 = const false;
        StorageLive(_4);
        _5 = discriminant(_2);
        switchInt(move _5) -> [1: bb2, 2: bb11, 3: bb20, 4: bb29, 5: bb47, 6: bb56, 7: bb68, 8: bb411, 9: bb80, 10: bb88, 11: bb96, 12: bb104, 13: bb112, 14: bb120, 15: bb137, 16: bb129, 17: bb145, 18: bb154, 19: bb162, 20: bb170, 21: bb178, 22: bb186, 23: bb194, 24: bb202, 25: bb210, 26: bb219, 27: bb237, 28: bb411, 29: bb411, 30: bb255, 31: bb265, 32: bb274, 33: bb282, 34: bb292, 35: bb301, 36: bb309, 37: bb411, 38: bb411, 39: bb317, 40: bb342, 41: bb350, 42: bb358, 43: bb367, 44: bb376, 45: bb326, 46: bb334, 47: bb385, 48: bb394, 49: bb403, 50: bb38, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut (((*_1).9: state::reserve::ReserveConfig).7: u8);
        _12 = &mut (*_13);
        _11 = for_field::<u8>(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _10 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _11, const "&mut reserve.config.loan_to_value_pct") -> [return: bb4, unwind: bb417];
    }

    bb4: {
        StorageDead(_11);
        _9 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}>(move _10, check_valid_pct::<u8>) -> [return: bb5, unwind: bb417];
    }

    bb5: {
        StorageDead(_10);
        StorageLive(_14);
        _14 = &(*_3);
        _8 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _9, move _14) -> [return: bb6, unwind: bb417];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_9);
        _7 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb7, unwind: bb417];
    }

    bb7: {
        StorageDead(_8);
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb8, 1: bb9, otherwise: bb1];
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_7 as Continue).0: ());
        _6 = _19;
        StorageDead(_19);
        _685 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        goto -> bb413;
    }

    bb9: {
        StorageLive(_16);
        _16 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb10, unwind: bb476];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_16);
        _871 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb415;
    }

    bb11: {
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut (((*_1).9: state::reserve::ReserveConfig).10: u16);
        _26 = &mut (*_27);
        _25 = for_field::<u16>(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        _24 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::named::<&str>(move _25, const "&mut reserve.config.max_liquidation_bonus_bps") -> [return: bb13, unwind: bb417];
    }

    bb13: {
        StorageDead(_25);
        _23 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::validating::<for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}>(move _24, check_valid_bps::<u16>) -> [return: bb14, unwind: bb417];
    }

    bb14: {
        StorageDead(_24);
        StorageLive(_28);
        _28 = &(*_3);
        _22 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::set(move _23, move _28) -> [return: bb15, unwind: bb417];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_23);
        _21 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb16, unwind: bb417];
    }

    bb16: {
        StorageDead(_22);
        _29 = discriminant(_21);
        switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb1];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_21 as Continue).0: ());
        _20 = _33;
        StorageDead(_33);
        _687 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_20);
        _4 = const ();
        goto -> bb413;
    }

    bb18: {
        StorageLive(_30);
        _30 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb19, unwind: bb475];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_30);
        _869 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb415;
    }

    bb20: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut (((*_1).9: state::reserve::ReserveConfig).8: u8);
        _40 = &mut (*_41);
        _39 = for_field::<u8>(move _40) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_40);
        _38 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _39, const "&mut reserve.config.liquidation_threshold_pct") -> [return: bb22, unwind: bb417];
    }

    bb22: {
        StorageDead(_39);
        _37 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}>(move _38, check_valid_pct::<u8>) -> [return: bb23, unwind: bb417];
    }

    bb23: {
        StorageDead(_38);
        StorageLive(_42);
        _42 = &(*_3);
        _36 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _37, move _42) -> [return: bb24, unwind: bb417];
    }

    bb24: {
        StorageDead(_42);
        StorageDead(_37);
        _35 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb25, unwind: bb417];
    }

    bb25: {
        StorageDead(_36);
        _43 = discriminant(_35);
        switchInt(move _43) -> [0: bb26, 1: bb27, otherwise: bb1];
    }

    bb26: {
        StorageLive(_47);
        _47 = ((_35 as Continue).0: ());
        _34 = _47;
        StorageDead(_47);
        _689 = discriminant(_35);
        StorageDead(_41);
        StorageDead(_35);
        StorageDead(_34);
        _4 = const ();
        goto -> bb413;
    }

    bb27: {
        StorageLive(_44);
        _44 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _46) -> [return: bb28, unwind: bb474];
    }

    bb28: {
        StorageDead(_46);
        StorageDead(_44);
        _867 = discriminant(_35);
        StorageDead(_41);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb415;
    }

    bb29: {
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut (((*_1).9: state::reserve::ReserveConfig).6: u8);
        _54 = &mut (*_55);
        _53 = for_field::<u8>(move _54) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_54);
        _52 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _53, const "&mut reserve.config.protocol_liquidation_fee_pct") -> [return: bb31, unwind: bb417];
    }

    bb31: {
        StorageDead(_53);
        _51 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}>(move _52, check_valid_pct::<u8>) -> [return: bb32, unwind: bb417];
    }

    bb32: {
        StorageDead(_52);
        StorageLive(_56);
        _56 = &(*_3);
        _50 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _51, move _56) -> [return: bb33, unwind: bb417];
    }

    bb33: {
        StorageDead(_56);
        StorageDead(_51);
        _49 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _50) -> [return: bb34, unwind: bb417];
    }

    bb34: {
        StorageDead(_50);
        _57 = discriminant(_49);
        switchInt(move _57) -> [0: bb35, 1: bb36, otherwise: bb1];
    }

    bb35: {
        StorageLive(_61);
        _61 = ((_49 as Continue).0: ());
        _48 = _61;
        StorageDead(_61);
        _691 = discriminant(_49);
        StorageDead(_55);
        StorageDead(_49);
        StorageDead(_48);
        _4 = const ();
        goto -> bb413;
    }

    bb36: {
        StorageLive(_58);
        _58 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _60) -> [return: bb37, unwind: bb473];
    }

    bb37: {
        StorageDead(_60);
        StorageDead(_58);
        _865 = discriminant(_49);
        StorageDead(_55);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb415;
    }

    bb38: {
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (((*_1).9: state::reserve::ReserveConfig).4: u8);
        _68 = &mut (*_69);
        _67 = for_field::<u8>(move _68) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_68);
        _66 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _67, const "&mut reserve.config.protocol_order_execution_fee_pct") -> [return: bb40, unwind: bb417];
    }

    bb40: {
        StorageDead(_67);
        _65 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}>(move _66, check_valid_pct::<u8>) -> [return: bb41, unwind: bb417];
    }

    bb41: {
        StorageDead(_66);
        StorageLive(_70);
        _70 = &(*_3);
        _64 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _65, move _70) -> [return: bb42, unwind: bb417];
    }

    bb42: {
        StorageDead(_70);
        StorageDead(_65);
        _63 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _64) -> [return: bb43, unwind: bb417];
    }

    bb43: {
        StorageDead(_64);
        _71 = discriminant(_63);
        switchInt(move _71) -> [0: bb44, 1: bb45, otherwise: bb1];
    }

    bb44: {
        StorageLive(_75);
        _75 = ((_63 as Continue).0: ());
        _62 = _75;
        StorageDead(_75);
        _693 = discriminant(_63);
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_62);
        _4 = const ();
        goto -> bb413;
    }

    bb45: {
        StorageLive(_72);
        _72 = move ((_63 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_74);
        _74 = move _72;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _74) -> [return: bb46, unwind: bb472];
    }

    bb46: {
        StorageDead(_74);
        StorageDead(_72);
        _863 = discriminant(_63);
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb415;
    }

    bb47: {
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &mut (((*_1).9: state::reserve::ReserveConfig).5: u8);
        _82 = &mut (*_83);
        _81 = for_field::<u8>(move _82) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_82);
        _80 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _81, const "&mut reserve.config.protocol_take_rate_pct") -> [return: bb49, unwind: bb417];
    }

    bb49: {
        StorageDead(_81);
        _79 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}>(move _80, check_valid_pct::<u8>) -> [return: bb50, unwind: bb417];
    }

    bb50: {
        StorageDead(_80);
        StorageLive(_84);
        _84 = &(*_3);
        _78 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _79, move _84) -> [return: bb51, unwind: bb417];
    }

    bb51: {
        StorageDead(_84);
        StorageDead(_79);
        _77 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _78) -> [return: bb52, unwind: bb417];
    }

    bb52: {
        StorageDead(_78);
        _85 = discriminant(_77);
        switchInt(move _85) -> [0: bb53, 1: bb54, otherwise: bb1];
    }

    bb53: {
        StorageLive(_89);
        _89 = ((_77 as Continue).0: ());
        _76 = _89;
        StorageDead(_89);
        _695 = discriminant(_77);
        StorageDead(_83);
        StorageDead(_77);
        StorageDead(_76);
        _4 = const ();
        goto -> bb413;
    }

    bb54: {
        StorageLive(_86);
        _86 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_88);
        _88 = move _86;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _88) -> [return: bb55, unwind: bb471];
    }

    bb55: {
        StorageDead(_88);
        StorageDead(_86);
        _861 = discriminant(_77);
        StorageDead(_83);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb415;
    }

    bb56: {
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &mut ((((*_1).9: state::reserve::ReserveConfig).14: state::reserve::ReserveFees).0: u64);
        _97 = &mut (*_98);
        _96 = for_field::<u64>(move _97) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_97);
        _95 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _96, const "&mut reserve.config.fees.borrow_fee_sf") -> [return: bb58, unwind: bb417];
    }

    bb58: {
        _684 = const true;
        StorageDead(_96);
        StorageLive(_99);
        StorageLive(_100);
        _100 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(const _) -> [return: bb59, unwind: bb470];
    }

    bb59: {
        _99 = check_lte::<u128, u64>(move _100) -> [return: bb60, unwind: bb470];
    }

    bb60: {
        StorageDead(_100);
        _684 = const false;
        _94 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<{closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}>(move _95, move _99) -> [return: bb61, unwind: bb470];
    }

    bb61: {
        StorageDead(_99);
        _684 = const false;
        StorageDead(_95);
        _93 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::rendering::<for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_fraction::<u64>}>(move _94, as_fraction::<u64>) -> [return: bb62, unwind: bb417];
    }

    bb62: {
        StorageDead(_94);
        StorageLive(_101);
        _101 = &(*_3);
        _92 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_fraction::<u64>}>::set(move _93, move _101) -> [return: bb63, unwind: bb417];
    }

    bb63: {
        StorageDead(_101);
        StorageDead(_93);
        _91 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _92) -> [return: bb64, unwind: bb417];
    }

    bb64: {
        StorageDead(_92);
        _102 = discriminant(_91);
        switchInt(move _102) -> [0: bb65, 1: bb66, otherwise: bb1];
    }

    bb65: {
        StorageLive(_106);
        _106 = ((_91 as Continue).0: ());
        _90 = _106;
        StorageDead(_106);
        _697 = discriminant(_91);
        StorageDead(_98);
        StorageDead(_91);
        StorageDead(_90);
        _4 = const ();
        goto -> bb413;
    }

    bb66: {
        StorageLive(_103);
        _103 = move ((_91 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_105);
        _105 = move _103;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _105) -> [return: bb67, unwind: bb468];
    }

    bb67: {
        StorageDead(_105);
        StorageDead(_103);
        _859 = discriminant(_91);
        StorageDead(_98);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb415;
    }

    bb68: {
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &mut ((((*_1).9: state::reserve::ReserveConfig).14: state::reserve::ReserveFees).1: u64);
        _114 = &mut (*_115);
        _113 = for_field::<u64>(move _114) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_114);
        _112 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _113, const "&mut reserve.config.fees.flash_loan_fee_sf") -> [return: bb70, unwind: bb417];
    }

    bb70: {
        _683 = const true;
        StorageDead(_113);
        StorageLive(_116);
        StorageLive(_117);
        _117 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(const _) -> [return: bb71, unwind: bb467];
    }

    bb71: {
        _116 = check_lte::<u128, u64>(move _117) -> [return: bb72, unwind: bb467];
    }

    bb72: {
        StorageDead(_117);
        _683 = const false;
        _111 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<{closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}>(move _112, move _116) -> [return: bb73, unwind: bb467];
    }

    bb73: {
        StorageDead(_116);
        _683 = const false;
        StorageDead(_112);
        _110 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::rendering::<for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_fraction::<u64>}>(move _111, as_fraction::<u64>) -> [return: bb74, unwind: bb417];
    }

    bb74: {
        StorageDead(_111);
        StorageLive(_118);
        _118 = &(*_3);
        _109 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_fraction::<u64>}>::set(move _110, move _118) -> [return: bb75, unwind: bb417];
    }

    bb75: {
        StorageDead(_118);
        StorageDead(_110);
        _108 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _109) -> [return: bb76, unwind: bb417];
    }

    bb76: {
        StorageDead(_109);
        _119 = discriminant(_108);
        switchInt(move _119) -> [0: bb77, 1: bb78, otherwise: bb1];
    }

    bb77: {
        StorageLive(_123);
        _123 = ((_108 as Continue).0: ());
        _107 = _123;
        StorageDead(_123);
        _699 = discriminant(_108);
        StorageDead(_115);
        StorageDead(_108);
        StorageDead(_107);
        _4 = const ();
        goto -> bb413;
    }

    bb78: {
        StorageLive(_120);
        _120 = move ((_108 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_122);
        _122 = move _120;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _122) -> [return: bb79, unwind: bb465];
    }

    bb79: {
        StorageDead(_122);
        StorageDead(_120);
        _857 = discriminant(_108);
        StorageDead(_115);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb415;
    }

    bb80: {
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &mut (((*_1).9: state::reserve::ReserveConfig).17: u64);
        _129 = &mut (*_130);
        _128 = for_field::<u64>(move _129) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_129);
        _127 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _128, const "&mut reserve.config.deposit_limit") -> [return: bb82, unwind: bb417];
    }

    bb82: {
        StorageDead(_128);
        StorageLive(_131);
        _131 = &(*_3);
        _126 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _127, move _131) -> [return: bb83, unwind: bb417];
    }

    bb83: {
        StorageDead(_131);
        StorageDead(_127);
        _125 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _126) -> [return: bb84, unwind: bb417];
    }

    bb84: {
        StorageDead(_126);
        _132 = discriminant(_125);
        switchInt(move _132) -> [0: bb85, 1: bb86, otherwise: bb1];
    }

    bb85: {
        StorageLive(_136);
        _136 = ((_125 as Continue).0: ());
        _124 = _136;
        StorageDead(_136);
        _701 = discriminant(_125);
        StorageDead(_130);
        StorageDead(_125);
        StorageDead(_124);
        _4 = const ();
        goto -> bb413;
    }

    bb86: {
        StorageLive(_133);
        _133 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_135);
        _135 = move _133;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _135) -> [return: bb87, unwind: bb464];
    }

    bb87: {
        StorageDead(_135);
        StorageDead(_133);
        _855 = discriminant(_125);
        StorageDead(_130);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb415;
    }

    bb88: {
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &mut (((*_1).9: state::reserve::ReserveConfig).18: u64);
        _142 = &mut (*_143);
        _141 = for_field::<u64>(move _142) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_142);
        _140 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _141, const "&mut reserve.config.borrow_limit") -> [return: bb90, unwind: bb417];
    }

    bb90: {
        StorageDead(_141);
        StorageLive(_144);
        _144 = &(*_3);
        _139 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _140, move _144) -> [return: bb91, unwind: bb417];
    }

    bb91: {
        StorageDead(_144);
        StorageDead(_140);
        _138 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _139) -> [return: bb92, unwind: bb417];
    }

    bb92: {
        StorageDead(_139);
        _145 = discriminant(_138);
        switchInt(move _145) -> [0: bb93, 1: bb94, otherwise: bb1];
    }

    bb93: {
        StorageLive(_149);
        _149 = ((_138 as Continue).0: ());
        _137 = _149;
        StorageDead(_149);
        _703 = discriminant(_138);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_137);
        _4 = const ();
        goto -> bb413;
    }

    bb94: {
        StorageLive(_146);
        _146 = move ((_138 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_148);
        _148 = move _146;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _148) -> [return: bb95, unwind: bb463];
    }

    bb95: {
        StorageDead(_148);
        StorageDead(_146);
        _853 = discriminant(_138);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb415;
    }

    bb96: {
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).1: state::token_info::PriceHeuristic).0: u64);
        _155 = &mut (*_156);
        _154 = for_field::<u64>(move _155) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_155);
        _153 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _154, const "&mut reserve.config.token_info.heuristic.lower") -> [return: bb98, unwind: bb417];
    }

    bb98: {
        StorageDead(_154);
        StorageLive(_157);
        _157 = &(*_3);
        _152 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _153, move _157) -> [return: bb99, unwind: bb417];
    }

    bb99: {
        StorageDead(_157);
        StorageDead(_153);
        _151 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _152) -> [return: bb100, unwind: bb417];
    }

    bb100: {
        StorageDead(_152);
        _158 = discriminant(_151);
        switchInt(move _158) -> [0: bb101, 1: bb102, otherwise: bb1];
    }

    bb101: {
        StorageLive(_162);
        _162 = ((_151 as Continue).0: ());
        _150 = _162;
        StorageDead(_162);
        _705 = discriminant(_151);
        StorageDead(_156);
        StorageDead(_151);
        StorageDead(_150);
        _4 = const ();
        goto -> bb413;
    }

    bb102: {
        StorageLive(_159);
        _159 = move ((_151 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_161);
        _161 = move _159;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _161) -> [return: bb103, unwind: bb462];
    }

    bb103: {
        StorageDead(_161);
        StorageDead(_159);
        _851 = discriminant(_151);
        StorageDead(_156);
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb415;
    }

    bb104: {
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).1: state::token_info::PriceHeuristic).1: u64);
        _168 = &mut (*_169);
        _167 = for_field::<u64>(move _168) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_168);
        _166 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _167, const "&mut reserve.config.token_info.heuristic.upper") -> [return: bb106, unwind: bb417];
    }

    bb106: {
        StorageDead(_167);
        StorageLive(_170);
        _170 = &(*_3);
        _165 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _166, move _170) -> [return: bb107, unwind: bb417];
    }

    bb107: {
        StorageDead(_170);
        StorageDead(_166);
        _164 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _165) -> [return: bb108, unwind: bb417];
    }

    bb108: {
        StorageDead(_165);
        _171 = discriminant(_164);
        switchInt(move _171) -> [0: bb109, 1: bb110, otherwise: bb1];
    }

    bb109: {
        StorageLive(_175);
        _175 = ((_164 as Continue).0: ());
        _163 = _175;
        StorageDead(_175);
        _707 = discriminant(_164);
        StorageDead(_169);
        StorageDead(_164);
        StorageDead(_163);
        _4 = const ();
        goto -> bb413;
    }

    bb110: {
        StorageLive(_172);
        _172 = move ((_164 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_174);
        _174 = move _172;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _174) -> [return: bb111, unwind: bb461];
    }

    bb111: {
        StorageDead(_174);
        StorageDead(_172);
        _849 = discriminant(_164);
        StorageDead(_169);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb415;
    }

    bb112: {
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).1: state::token_info::PriceHeuristic).2: u64);
        _181 = &mut (*_182);
        _180 = for_field::<u64>(move _181) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_181);
        _179 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _180, const "&mut reserve.config.token_info.heuristic.exp") -> [return: bb114, unwind: bb417];
    }

    bb114: {
        StorageDead(_180);
        StorageLive(_183);
        _183 = &(*_3);
        _178 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _179, move _183) -> [return: bb115, unwind: bb417];
    }

    bb115: {
        StorageDead(_183);
        StorageDead(_179);
        _177 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _178) -> [return: bb116, unwind: bb417];
    }

    bb116: {
        StorageDead(_178);
        _184 = discriminant(_177);
        switchInt(move _184) -> [0: bb117, 1: bb118, otherwise: bb1];
    }

    bb117: {
        StorageLive(_188);
        _188 = ((_177 as Continue).0: ());
        _176 = _188;
        StorageDead(_188);
        _709 = discriminant(_177);
        StorageDead(_182);
        StorageDead(_177);
        StorageDead(_176);
        _4 = const ();
        goto -> bb413;
    }

    bb118: {
        StorageLive(_185);
        _185 = move ((_177 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_187);
        _187 = move _185;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _187) -> [return: bb119, unwind: bb460];
    }

    bb119: {
        StorageDead(_187);
        StorageDead(_185);
        _847 = discriminant(_177);
        StorageDead(_182);
        StorageDead(_177);
        StorageDead(_176);
        goto -> bb415;
    }

    bb120: {
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &mut ((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).2: u64);
        _195 = &mut (*_196);
        _194 = for_field::<u64>(move _195) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_195);
        _193 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _194, const "&mut reserve.config.token_info.max_twap_divergence_bps") -> [return: bb122, unwind: bb417];
    }

    bb122: {
        StorageDead(_194);
        _192 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u64>}>(move _193, check_valid_bps::<u64>) -> [return: bb123, unwind: bb417];
    }

    bb123: {
        StorageDead(_193);
        StorageLive(_197);
        _197 = &(*_3);
        _191 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _192, move _197) -> [return: bb124, unwind: bb417];
    }

    bb124: {
        StorageDead(_197);
        StorageDead(_192);
        _190 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _191) -> [return: bb125, unwind: bb417];
    }

    bb125: {
        StorageDead(_191);
        _198 = discriminant(_190);
        switchInt(move _198) -> [0: bb126, 1: bb127, otherwise: bb1];
    }

    bb126: {
        StorageLive(_202);
        _202 = ((_190 as Continue).0: ());
        _189 = _202;
        StorageDead(_202);
        _711 = discriminant(_190);
        StorageDead(_196);
        StorageDead(_190);
        StorageDead(_189);
        _4 = const ();
        goto -> bb413;
    }

    bb127: {
        StorageLive(_199);
        _199 = move ((_190 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_201);
        _201 = move _199;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _201) -> [return: bb128, unwind: bb459];
    }

    bb128: {
        StorageDead(_201);
        StorageDead(_199);
        _845 = discriminant(_190);
        StorageDead(_196);
        StorageDead(_190);
        StorageDead(_189);
        goto -> bb415;
    }

    bb129: {
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).5: state::token_info::ScopeConfiguration).1: [u16; 4]);
        _208 = &mut (*_209);
        _207 = for_field::<[u16; 4]>(move _208) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_208);
        _206 = ConfigItemUpdater::<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u16; 4]>}>::named::<&str>(move _207, const "&mut reserve.config.token_info.scope_configuration.price_chain") -> [return: bb131, unwind: bb417];
    }

    bb131: {
        StorageDead(_207);
        StorageLive(_210);
        _210 = &(*_3);
        _205 = ConfigItemUpdater::<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u16; 4]>}>::set(move _206, move _210) -> [return: bb132, unwind: bb417];
    }

    bb132: {
        StorageDead(_210);
        StorageDead(_206);
        _204 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _205) -> [return: bb133, unwind: bb417];
    }

    bb133: {
        StorageDead(_205);
        _211 = discriminant(_204);
        switchInt(move _211) -> [0: bb134, 1: bb135, otherwise: bb1];
    }

    bb134: {
        StorageLive(_215);
        _215 = ((_204 as Continue).0: ());
        _203 = _215;
        StorageDead(_215);
        _713 = discriminant(_204);
        StorageDead(_209);
        StorageDead(_204);
        StorageDead(_203);
        _4 = const ();
        goto -> bb413;
    }

    bb135: {
        StorageLive(_212);
        _212 = move ((_204 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb136, unwind: bb458];
    }

    bb136: {
        StorageDead(_214);
        StorageDead(_212);
        _843 = discriminant(_204);
        StorageDead(_209);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb415;
    }

    bb137: {
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).5: state::token_info::ScopeConfiguration).2: [u16; 4]);
        _221 = &mut (*_222);
        _220 = for_field::<[u16; 4]>(move _221) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_221);
        _219 = ConfigItemUpdater::<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u16; 4]>}>::named::<&str>(move _220, const "&mut reserve.config.token_info.scope_configuration.twap_chain") -> [return: bb139, unwind: bb417];
    }

    bb139: {
        StorageDead(_220);
        StorageLive(_223);
        _223 = &(*_3);
        _218 = ConfigItemUpdater::<'_, [u16; 4], [u16; 4], for<'a> fn(&'a mut [u16; 4], [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u16; 4]>}, for<'t, 'a> fn(&'t [u16; 4], &'a [u16; 4]) -> std::result::Result<std::option::Option<&'t [u16; 4]>, anchor_lang::error::Error> {get_field_directly::<[u16; 4]>}, for<'a> fn(&'a [u16; 4]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u16; 4]>}, for<'a, 'b, 'c> fn(&'a [u16; 4], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u16; 4]>}>::set(move _219, move _223) -> [return: bb140, unwind: bb417];
    }

    bb140: {
        StorageDead(_223);
        StorageDead(_219);
        _217 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _218) -> [return: bb141, unwind: bb417];
    }

    bb141: {
        StorageDead(_218);
        _224 = discriminant(_217);
        switchInt(move _224) -> [0: bb142, 1: bb143, otherwise: bb1];
    }

    bb142: {
        StorageLive(_228);
        _228 = ((_217 as Continue).0: ());
        _216 = _228;
        StorageDead(_228);
        _715 = discriminant(_217);
        StorageDead(_222);
        StorageDead(_217);
        StorageDead(_216);
        _4 = const ();
        goto -> bb413;
    }

    bb143: {
        StorageLive(_225);
        _225 = move ((_217 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_227);
        _227 = move _225;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _227) -> [return: bb144, unwind: bb457];
    }

    bb144: {
        StorageDead(_227);
        StorageDead(_225);
        _841 = discriminant(_217);
        StorageDead(_222);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb415;
    }

    bb145: {
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &mut ((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).0: [u8; 32]);
        _235 = &mut (*_236);
        _234 = for_field::<[u8; 32]>(move _235) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_235);
        _233 = ConfigItemUpdater::<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u8; 32]>}>::named::<&str>(move _234, const "&mut reserve.config.token_info.name") -> [return: bb147, unwind: bb417];
    }

    bb147: {
        StorageDead(_234);
        _232 = ConfigItemUpdater::<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u8; 32]>}>::rendering::<for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_utf8_null_padded_string::<32>}>(move _233, as_utf8_null_padded_string::<32>) -> [return: bb148, unwind: bb417];
    }

    bb148: {
        StorageDead(_233);
        StorageLive(_237);
        _237 = &(*_3);
        _231 = ConfigItemUpdater::<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_utf8_null_padded_string::<32>}>::set(move _232, move _237) -> [return: bb149, unwind: bb417];
    }

    bb149: {
        StorageDead(_237);
        StorageDead(_232);
        _230 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _231) -> [return: bb150, unwind: bb417];
    }

    bb150: {
        StorageDead(_231);
        _238 = discriminant(_230);
        switchInt(move _238) -> [0: bb151, 1: bb152, otherwise: bb1];
    }

    bb151: {
        StorageLive(_242);
        _242 = ((_230 as Continue).0: ());
        _229 = _242;
        StorageDead(_242);
        _717 = discriminant(_230);
        StorageDead(_236);
        StorageDead(_230);
        StorageDead(_229);
        _4 = const ();
        goto -> bb413;
    }

    bb152: {
        StorageLive(_239);
        _239 = move ((_230 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_241);
        _241 = move _239;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _241) -> [return: bb153, unwind: bb456];
    }

    bb153: {
        StorageDead(_241);
        StorageDead(_239);
        _839 = discriminant(_230);
        StorageDead(_236);
        StorageDead(_230);
        StorageDead(_229);
        goto -> bb415;
    }

    bb154: {
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &mut ((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).3: u64);
        _248 = &mut (*_249);
        _247 = for_field::<u64>(move _248) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_248);
        _246 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _247, const "&mut reserve.config.token_info.max_age_price_seconds") -> [return: bb156, unwind: bb417];
    }

    bb156: {
        StorageDead(_247);
        StorageLive(_250);
        _250 = &(*_3);
        _245 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _246, move _250) -> [return: bb157, unwind: bb417];
    }

    bb157: {
        StorageDead(_250);
        StorageDead(_246);
        _244 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _245) -> [return: bb158, unwind: bb417];
    }

    bb158: {
        StorageDead(_245);
        _251 = discriminant(_244);
        switchInt(move _251) -> [0: bb159, 1: bb160, otherwise: bb1];
    }

    bb159: {
        StorageLive(_255);
        _255 = ((_244 as Continue).0: ());
        _243 = _255;
        StorageDead(_255);
        _719 = discriminant(_244);
        StorageDead(_249);
        StorageDead(_244);
        StorageDead(_243);
        _4 = const ();
        goto -> bb413;
    }

    bb160: {
        StorageLive(_252);
        _252 = move ((_244 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_254);
        _254 = move _252;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _254) -> [return: bb161, unwind: bb455];
    }

    bb161: {
        StorageDead(_254);
        StorageDead(_252);
        _837 = discriminant(_244);
        StorageDead(_249);
        StorageDead(_244);
        StorageDead(_243);
        goto -> bb415;
    }

    bb162: {
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &mut ((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).4: u64);
        _261 = &mut (*_262);
        _260 = for_field::<u64>(move _261) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_261);
        _259 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _260, const "&mut reserve.config.token_info.max_age_twap_seconds") -> [return: bb164, unwind: bb417];
    }

    bb164: {
        StorageDead(_260);
        StorageLive(_263);
        _263 = &(*_3);
        _258 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _259, move _263) -> [return: bb165, unwind: bb417];
    }

    bb165: {
        StorageDead(_263);
        StorageDead(_259);
        _257 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _258) -> [return: bb166, unwind: bb417];
    }

    bb166: {
        StorageDead(_258);
        _264 = discriminant(_257);
        switchInt(move _264) -> [0: bb167, 1: bb168, otherwise: bb1];
    }

    bb167: {
        StorageLive(_268);
        _268 = ((_257 as Continue).0: ());
        _256 = _268;
        StorageDead(_268);
        _721 = discriminant(_257);
        StorageDead(_262);
        StorageDead(_257);
        StorageDead(_256);
        _4 = const ();
        goto -> bb413;
    }

    bb168: {
        StorageLive(_265);
        _265 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_267);
        _267 = move _265;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _267) -> [return: bb169, unwind: bb454];
    }

    bb169: {
        StorageDead(_267);
        StorageDead(_265);
        _835 = discriminant(_257);
        StorageDead(_262);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb415;
    }

    bb170: {
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).5: state::token_info::ScopeConfiguration).0: anchor_lang::prelude::Pubkey);
        _274 = &mut (*_275);
        _273 = for_field::<anchor_lang::prelude::Pubkey>(move _274) -> [return: bb171, unwind continue];
    }

    bb171: {
        StorageDead(_274);
        _272 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _273, const "&mut reserve.config.token_info.scope_configuration.price_feed") -> [return: bb172, unwind: bb417];
    }

    bb172: {
        StorageDead(_273);
        StorageLive(_276);
        _276 = &(*_3);
        _271 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _272, move _276) -> [return: bb173, unwind: bb417];
    }

    bb173: {
        StorageDead(_276);
        StorageDead(_272);
        _270 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _271) -> [return: bb174, unwind: bb417];
    }

    bb174: {
        StorageDead(_271);
        _277 = discriminant(_270);
        switchInt(move _277) -> [0: bb175, 1: bb176, otherwise: bb1];
    }

    bb175: {
        StorageLive(_281);
        _281 = ((_270 as Continue).0: ());
        _269 = _281;
        StorageDead(_281);
        _723 = discriminant(_270);
        StorageDead(_275);
        StorageDead(_270);
        StorageDead(_269);
        _4 = const ();
        goto -> bb413;
    }

    bb176: {
        StorageLive(_278);
        _278 = move ((_270 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_280);
        _280 = move _278;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _280) -> [return: bb177, unwind: bb453];
    }

    bb177: {
        StorageDead(_280);
        StorageDead(_278);
        _833 = discriminant(_270);
        StorageDead(_275);
        StorageDead(_270);
        StorageDead(_269);
        goto -> bb415;
    }

    bb178: {
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).7: state::token_info::PythConfiguration).0: anchor_lang::prelude::Pubkey);
        _287 = &mut (*_288);
        _286 = for_field::<anchor_lang::prelude::Pubkey>(move _287) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_287);
        _285 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _286, const "&mut reserve.config.token_info.pyth_configuration.price") -> [return: bb180, unwind: bb417];
    }

    bb180: {
        StorageDead(_286);
        StorageLive(_289);
        _289 = &(*_3);
        _284 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _285, move _289) -> [return: bb181, unwind: bb417];
    }

    bb181: {
        StorageDead(_289);
        StorageDead(_285);
        _283 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _284) -> [return: bb182, unwind: bb417];
    }

    bb182: {
        StorageDead(_284);
        _290 = discriminant(_283);
        switchInt(move _290) -> [0: bb183, 1: bb184, otherwise: bb1];
    }

    bb183: {
        StorageLive(_294);
        _294 = ((_283 as Continue).0: ());
        _282 = _294;
        StorageDead(_294);
        _725 = discriminant(_283);
        StorageDead(_288);
        StorageDead(_283);
        StorageDead(_282);
        _4 = const ();
        goto -> bb413;
    }

    bb184: {
        StorageLive(_291);
        _291 = move ((_283 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_293);
        _293 = move _291;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _293) -> [return: bb185, unwind: bb452];
    }

    bb185: {
        StorageDead(_293);
        StorageDead(_291);
        _831 = discriminant(_283);
        StorageDead(_288);
        StorageDead(_283);
        StorageDead(_282);
        goto -> bb415;
    }

    bb186: {
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).6: state::token_info::SwitchboardConfiguration).0: anchor_lang::prelude::Pubkey);
        _300 = &mut (*_301);
        _299 = for_field::<anchor_lang::prelude::Pubkey>(move _300) -> [return: bb187, unwind continue];
    }

    bb187: {
        StorageDead(_300);
        _298 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _299, const "&mut reserve.config.token_info.switchboard_configuration.price_aggregator") -> [return: bb188, unwind: bb417];
    }

    bb188: {
        StorageDead(_299);
        StorageLive(_302);
        _302 = &(*_3);
        _297 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _298, move _302) -> [return: bb189, unwind: bb417];
    }

    bb189: {
        StorageDead(_302);
        StorageDead(_298);
        _296 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _297) -> [return: bb190, unwind: bb417];
    }

    bb190: {
        StorageDead(_297);
        _303 = discriminant(_296);
        switchInt(move _303) -> [0: bb191, 1: bb192, otherwise: bb1];
    }

    bb191: {
        StorageLive(_307);
        _307 = ((_296 as Continue).0: ());
        _295 = _307;
        StorageDead(_307);
        _727 = discriminant(_296);
        StorageDead(_301);
        StorageDead(_296);
        StorageDead(_295);
        _4 = const ();
        goto -> bb413;
    }

    bb192: {
        StorageLive(_304);
        _304 = move ((_296 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_306);
        _306 = move _304;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _306) -> [return: bb193, unwind: bb451];
    }

    bb193: {
        StorageDead(_306);
        StorageDead(_304);
        _829 = discriminant(_296);
        StorageDead(_301);
        StorageDead(_296);
        StorageDead(_295);
        goto -> bb415;
    }

    bb194: {
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &mut (((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).6: state::token_info::SwitchboardConfiguration).1: anchor_lang::prelude::Pubkey);
        _313 = &mut (*_314);
        _312 = for_field::<anchor_lang::prelude::Pubkey>(move _313) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_313);
        _311 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _312, const "&mut reserve.config.token_info.switchboard_configuration.twap_aggregator") -> [return: bb196, unwind: bb417];
    }

    bb196: {
        StorageDead(_312);
        StorageLive(_315);
        _315 = &(*_3);
        _310 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _311, move _315) -> [return: bb197, unwind: bb417];
    }

    bb197: {
        StorageDead(_315);
        StorageDead(_311);
        _309 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _310) -> [return: bb198, unwind: bb417];
    }

    bb198: {
        StorageDead(_310);
        _316 = discriminant(_309);
        switchInt(move _316) -> [0: bb199, 1: bb200, otherwise: bb1];
    }

    bb199: {
        StorageLive(_320);
        _320 = ((_309 as Continue).0: ());
        _308 = _320;
        StorageDead(_320);
        _729 = discriminant(_309);
        StorageDead(_314);
        StorageDead(_309);
        StorageDead(_308);
        _4 = const ();
        goto -> bb413;
    }

    bb200: {
        StorageLive(_317);
        _317 = move ((_309 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_319);
        _319 = move _317;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _319) -> [return: bb201, unwind: bb450];
    }

    bb201: {
        StorageDead(_319);
        StorageDead(_317);
        _827 = discriminant(_309);
        StorageDead(_314);
        StorageDead(_309);
        StorageDead(_308);
        goto -> bb415;
    }

    bb202: {
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &mut (((*_1).9: state::reserve::ReserveConfig).15: utils::borrow_rate_curve::BorrowRateCurve);
        _326 = &mut (*_327);
        _325 = for_field::<BorrowRateCurve>(move _326) -> [return: bb203, unwind continue];
    }

    bb203: {
        StorageDead(_326);
        _324 = ConfigItemUpdater::<'_, BorrowRateCurve, BorrowRateCurve, for<'a> fn(&'a mut BorrowRateCurve, BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<BorrowRateCurve>}, for<'t, 'a> fn(&'t BorrowRateCurve, &'a BorrowRateCurve) -> std::result::Result<std::option::Option<&'t BorrowRateCurve>, anchor_lang::error::Error> {get_field_directly::<BorrowRateCurve>}, for<'a> fn(&'a BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<BorrowRateCurve>}, for<'a, 'b, 'c> fn(&'a BorrowRateCurve, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<BorrowRateCurve>}>::named::<&str>(move _325, const "&mut reserve.config.borrow_rate_curve") -> [return: bb204, unwind: bb417];
    }

    bb204: {
        StorageDead(_325);
        StorageLive(_328);
        _328 = &(*_3);
        _323 = ConfigItemUpdater::<'_, BorrowRateCurve, BorrowRateCurve, for<'a> fn(&'a mut BorrowRateCurve, BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<BorrowRateCurve>}, for<'t, 'a> fn(&'t BorrowRateCurve, &'a BorrowRateCurve) -> std::result::Result<std::option::Option<&'t BorrowRateCurve>, anchor_lang::error::Error> {get_field_directly::<BorrowRateCurve>}, for<'a> fn(&'a BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<BorrowRateCurve>}, for<'a, 'b, 'c> fn(&'a BorrowRateCurve, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<BorrowRateCurve>}>::set(move _324, move _328) -> [return: bb205, unwind: bb417];
    }

    bb205: {
        StorageDead(_328);
        StorageDead(_324);
        _322 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _323) -> [return: bb206, unwind: bb417];
    }

    bb206: {
        StorageDead(_323);
        _329 = discriminant(_322);
        switchInt(move _329) -> [0: bb207, 1: bb208, otherwise: bb1];
    }

    bb207: {
        StorageLive(_333);
        _333 = ((_322 as Continue).0: ());
        _321 = _333;
        StorageDead(_333);
        _731 = discriminant(_322);
        StorageDead(_327);
        StorageDead(_322);
        StorageDead(_321);
        _4 = const ();
        goto -> bb413;
    }

    bb208: {
        StorageLive(_330);
        _330 = move ((_322 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_332);
        _332 = move _330;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _332) -> [return: bb209, unwind: bb449];
    }

    bb209: {
        StorageDead(_332);
        StorageDead(_330);
        _825 = discriminant(_322);
        StorageDead(_327);
        StorageDead(_322);
        StorageDead(_321);
        goto -> bb415;
    }

    bb210: {
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = const "Updating entire reserve config, fields `protocol_take_rate_pct`, \n                `protocol_liquidation_fee_pct`, `protocol_order_execution_fee_pct` and \n                `host_fixed_interest_rate_bps` will remain unchanged";
        _335 = &(*_336);
        _334 = solana_program::log::sol_log(move _335) -> [return: bb211, unwind continue];
    }

    bb211: {
        StorageDead(_335);
        StorageDead(_336);
        StorageDead(_334);
        StorageLive(_337);
        _337 = (((*_1).9: state::reserve::ReserveConfig).5: u8);
        StorageLive(_338);
        _338 = (((*_1).9: state::reserve::ReserveConfig).6: u8);
        StorageLive(_339);
        _339 = (((*_1).9: state::reserve::ReserveConfig).2: u16);
        StorageLive(_340);
        _340 = (((*_1).9: state::reserve::ReserveConfig).4: u8);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &mut ((*_1).9: state::reserve::ReserveConfig);
        _346 = &mut (*_347);
        _345 = for_field::<reserve::ReserveConfig>(move _346) -> [return: bb212, unwind continue];
    }

    bb212: {
        StorageDead(_346);
        _344 = ConfigItemUpdater::<'_, reserve::ReserveConfig, reserve::ReserveConfig, for<'a> fn(&'a mut reserve::ReserveConfig, reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<reserve::ReserveConfig>}, for<'t, 'a> fn(&'t reserve::ReserveConfig, &'a reserve::ReserveConfig) -> std::result::Result<std::option::Option<&'t reserve::ReserveConfig>, anchor_lang::error::Error> {get_field_directly::<reserve::ReserveConfig>}, for<'a> fn(&'a reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<reserve::ReserveConfig>}, for<'a, 'b, 'c> fn(&'a reserve::ReserveConfig, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<reserve::ReserveConfig>}>::named::<&str>(move _345, const "&mut reserve.config") -> [return: bb213, unwind: bb417];
    }

    bb213: {
        StorageDead(_345);
        StorageLive(_348);
        _348 = &(*_3);
        _343 = ConfigItemUpdater::<'_, reserve::ReserveConfig, reserve::ReserveConfig, for<'a> fn(&'a mut reserve::ReserveConfig, reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<reserve::ReserveConfig>}, for<'t, 'a> fn(&'t reserve::ReserveConfig, &'a reserve::ReserveConfig) -> std::result::Result<std::option::Option<&'t reserve::ReserveConfig>, anchor_lang::error::Error> {get_field_directly::<reserve::ReserveConfig>}, for<'a> fn(&'a reserve::ReserveConfig) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<reserve::ReserveConfig>}, for<'a, 'b, 'c> fn(&'a reserve::ReserveConfig, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<reserve::ReserveConfig>}>::set(move _344, move _348) -> [return: bb214, unwind: bb417];
    }

    bb214: {
        StorageDead(_348);
        StorageDead(_344);
        _342 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _343) -> [return: bb215, unwind: bb417];
    }

    bb215: {
        StorageDead(_343);
        _349 = discriminant(_342);
        switchInt(move _349) -> [0: bb216, 1: bb217, otherwise: bb1];
    }

    bb216: {
        StorageLive(_353);
        _353 = ((_342 as Continue).0: ());
        _341 = _353;
        StorageDead(_353);
        _733 = discriminant(_342);
        StorageDead(_347);
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_354);
        _354 = _337;
        (((*_1).9: state::reserve::ReserveConfig).5: u8) = move _354;
        StorageDead(_354);
        StorageLive(_355);
        _355 = _338;
        (((*_1).9: state::reserve::ReserveConfig).6: u8) = move _355;
        StorageDead(_355);
        StorageLive(_356);
        _356 = _339;
        (((*_1).9: state::reserve::ReserveConfig).2: u16) = move _356;
        StorageDead(_356);
        StorageLive(_357);
        _357 = _340;
        (((*_1).9: state::reserve::ReserveConfig).4: u8) = move _357;
        StorageDead(_357);
        _4 = const ();
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb413;
    }

    bb217: {
        StorageLive(_350);
        _350 = move ((_342 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_352);
        _352 = move _350;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _352) -> [return: bb218, unwind: bb448];
    }

    bb218: {
        StorageDead(_352);
        StorageDead(_350);
        _823 = discriminant(_342);
        StorageDead(_347);
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb415;
    }

    bb219: {
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &mut ((((*_1).9: state::reserve::ReserveConfig).21: state::reserve::WithdrawalCaps).0: i64);
        _364 = &mut (*_365);
        _363 = for_field::<i64>(move _364) -> [return: bb220, unwind continue];
    }

    bb220: {
        StorageDead(_364);
        _362 = ConfigItemUpdater::<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<i64>}>::named::<&str>(move _363, const "&mut reserve.config.debt_withdrawal_cap.config_capacity") -> [return: bb221, unwind: bb417];
    }

    bb221: {
        StorageDead(_363);
        _361 = ConfigItemUpdater::<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<i64>}>::validating::<for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_negative::<i64>}>(move _362, check_not_negative::<i64>) -> [return: bb222, unwind: bb417];
    }

    bb222: {
        StorageDead(_362);
        StorageLive(_366);
        _366 = &(*_3);
        _360 = ConfigItemUpdater::<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_negative::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<i64>}>::set(move _361, move _366) -> [return: bb223, unwind: bb417];
    }

    bb223: {
        StorageDead(_366);
        StorageDead(_361);
        _359 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _360) -> [return: bb224, unwind: bb417];
    }

    bb224: {
        StorageDead(_360);
        _367 = discriminant(_359);
        switchInt(move _367) -> [0: bb225, 1: bb226, otherwise: bb1];
    }

    bb225: {
        StorageLive(_371);
        _371 = ((_359 as Continue).0: ());
        _358 = _371;
        StorageDead(_371);
        _735 = discriminant(_359);
        StorageDead(_365);
        StorageDead(_359);
        StorageDead(_358);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &mut ((((*_1).9: state::reserve::ReserveConfig).21: state::reserve::WithdrawalCaps).3: u64);
        _377 = &mut (*_378);
        _376 = for_field::<u64>(move _377) -> [return: bb228, unwind continue];
    }

    bb226: {
        StorageLive(_368);
        _368 = move ((_359 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_370);
        _370 = move _368;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _370) -> [return: bb227, unwind: bb447];
    }

    bb227: {
        StorageDead(_370);
        StorageDead(_368);
        _821 = discriminant(_359);
        StorageDead(_365);
        StorageDead(_359);
        StorageDead(_358);
        goto -> bb415;
    }

    bb228: {
        StorageDead(_377);
        _375 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _376, const "&mut reserve.config.debt_withdrawal_cap.config_interval_length_seconds") -> [return: bb229, unwind: bb417];
    }

    bb229: {
        _682 = const true;
        StorageDead(_376);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _382 = &(*_3);
        StorageLive(_383);
        StorageLive(_384);
        _384 = std::mem::size_of::<u64>() -> [return: bb230, unwind: bb446];
    }

    bb230: {
        _383 = RangeFrom::<usize> { start: move _384 };
        StorageDead(_384);
        _381 = <[u8] as Index<RangeFrom<usize>>>::index(move _382, move _383) -> [return: bb231, unwind: bb446];
    }

    bb231: {
        StorageDead(_383);
        StorageDead(_382);
        _380 = &(*_381);
        _379 = &(*_380);
        _682 = const false;
        _374 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _375, move _379) -> [return: bb232, unwind: bb446];
    }

    bb232: {
        StorageDead(_379);
        _682 = const false;
        StorageDead(_375);
        _373 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _374) -> [return: bb233, unwind: bb417];
    }

    bb233: {
        StorageDead(_374);
        _385 = discriminant(_373);
        switchInt(move _385) -> [0: bb234, 1: bb235, otherwise: bb1];
    }

    bb234: {
        StorageLive(_389);
        _389 = ((_373 as Continue).0: ());
        _372 = _389;
        StorageDead(_389);
        _737 = discriminant(_373);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_373);
        StorageDead(_372);
        _4 = const ();
        goto -> bb413;
    }

    bb235: {
        StorageLive(_386);
        _386 = move ((_373 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_388);
        _388 = move _386;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _388) -> [return: bb236, unwind: bb444];
    }

    bb236: {
        StorageDead(_388);
        StorageDead(_386);
        _819 = discriminant(_373);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_373);
        StorageDead(_372);
        goto -> bb415;
    }

    bb237: {
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _397 = &mut ((((*_1).9: state::reserve::ReserveConfig).20: state::reserve::WithdrawalCaps).0: i64);
        _396 = &mut (*_397);
        _395 = for_field::<i64>(move _396) -> [return: bb238, unwind continue];
    }

    bb238: {
        StorageDead(_396);
        _394 = ConfigItemUpdater::<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<i64>}>::named::<&str>(move _395, const "&mut reserve.config.deposit_withdrawal_cap.config_capacity") -> [return: bb239, unwind: bb417];
    }

    bb239: {
        StorageDead(_395);
        _393 = ConfigItemUpdater::<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<i64>}>::validating::<for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_negative::<i64>}>(move _394, check_not_negative::<i64>) -> [return: bb240, unwind: bb417];
    }

    bb240: {
        StorageDead(_394);
        StorageLive(_398);
        _398 = &(*_3);
        _392 = ConfigItemUpdater::<'_, i64, i64, for<'a> fn(&'a mut i64, i64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<i64>}, for<'t, 'a> fn(&'t i64, &'a i64) -> std::result::Result<std::option::Option<&'t i64>, anchor_lang::error::Error> {get_field_directly::<i64>}, for<'a> fn(&'a i64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_negative::<i64>}, for<'a, 'b, 'c> fn(&'a i64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<i64>}>::set(move _393, move _398) -> [return: bb241, unwind: bb417];
    }

    bb241: {
        StorageDead(_398);
        StorageDead(_393);
        _391 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _392) -> [return: bb242, unwind: bb417];
    }

    bb242: {
        StorageDead(_392);
        _399 = discriminant(_391);
        switchInt(move _399) -> [0: bb243, 1: bb244, otherwise: bb1];
    }

    bb243: {
        StorageLive(_403);
        _403 = ((_391 as Continue).0: ());
        _390 = _403;
        StorageDead(_403);
        _739 = discriminant(_391);
        StorageDead(_397);
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &mut ((((*_1).9: state::reserve::ReserveConfig).20: state::reserve::WithdrawalCaps).3: u64);
        _409 = &mut (*_410);
        _408 = for_field::<u64>(move _409) -> [return: bb246, unwind continue];
    }

    bb244: {
        StorageLive(_400);
        _400 = move ((_391 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_402);
        _402 = move _400;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _402) -> [return: bb245, unwind: bb443];
    }

    bb245: {
        StorageDead(_402);
        StorageDead(_400);
        _817 = discriminant(_391);
        StorageDead(_397);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb415;
    }

    bb246: {
        StorageDead(_409);
        _407 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _408, const "&mut reserve.config.deposit_withdrawal_cap.config_interval_length_seconds") -> [return: bb247, unwind: bb417];
    }

    bb247: {
        _681 = const true;
        StorageDead(_408);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &(*_3);
        StorageLive(_415);
        StorageLive(_416);
        _416 = std::mem::size_of::<u64>() -> [return: bb248, unwind: bb442];
    }

    bb248: {
        _415 = RangeFrom::<usize> { start: move _416 };
        StorageDead(_416);
        _413 = <[u8] as Index<RangeFrom<usize>>>::index(move _414, move _415) -> [return: bb249, unwind: bb442];
    }

    bb249: {
        StorageDead(_415);
        StorageDead(_414);
        _412 = &(*_413);
        _411 = &(*_412);
        _681 = const false;
        _406 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _407, move _411) -> [return: bb250, unwind: bb442];
    }

    bb250: {
        StorageDead(_411);
        _681 = const false;
        StorageDead(_407);
        _405 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _406) -> [return: bb251, unwind: bb417];
    }

    bb251: {
        StorageDead(_406);
        _417 = discriminant(_405);
        switchInt(move _417) -> [0: bb252, 1: bb253, otherwise: bb1];
    }

    bb252: {
        StorageLive(_421);
        _421 = ((_405 as Continue).0: ());
        _404 = _421;
        StorageDead(_421);
        _741 = discriminant(_405);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_405);
        StorageDead(_404);
        _4 = const ();
        goto -> bb413;
    }

    bb253: {
        StorageLive(_418);
        _418 = move ((_405 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_420);
        _420 = move _418;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _420) -> [return: bb254, unwind: bb440];
    }

    bb254: {
        StorageDead(_420);
        StorageDead(_418);
        _815 = discriminant(_405);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_405);
        StorageDead(_404);
        goto -> bb415;
    }

    bb255: {
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &mut (((*_1).9: state::reserve::ReserveConfig).11: u16);
        _428 = &mut (*_429);
        _427 = for_field::<u16>(move _428) -> [return: bb256, unwind continue];
    }

    bb256: {
        StorageDead(_428);
        _426 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::named::<&str>(move _427, const "&mut reserve.config.bad_debt_liquidation_bonus_bps") -> [return: bb257, unwind: bb417];
    }

    bb257: {
        _680 = const true;
        StorageDead(_427);
        StorageLive(_430);
        _430 = check_lte::<u64, u16>(const 100_u64) -> [return: bb258, unwind: bb439];
    }

    bb258: {
        _680 = const false;
        _425 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::validating::<{closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}>(move _426, move _430) -> [return: bb259, unwind: bb439];
    }

    bb259: {
        StorageDead(_430);
        _680 = const false;
        StorageDead(_426);
        StorageLive(_431);
        _431 = &(*_3);
        _424 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, {closure@programs\klend\src\lending_market\config_items.rs:277:9: 277:21}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::set(move _425, move _431) -> [return: bb260, unwind: bb417];
    }

    bb260: {
        StorageDead(_431);
        StorageDead(_425);
        _423 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _424) -> [return: bb261, unwind: bb417];
    }

    bb261: {
        StorageDead(_424);
        _432 = discriminant(_423);
        switchInt(move _432) -> [0: bb262, 1: bb263, otherwise: bb1];
    }

    bb262: {
        StorageLive(_436);
        _436 = ((_423 as Continue).0: ());
        _422 = _436;
        StorageDead(_436);
        _743 = discriminant(_423);
        StorageDead(_429);
        StorageDead(_423);
        StorageDead(_422);
        _4 = const ();
        goto -> bb413;
    }

    bb263: {
        StorageLive(_433);
        _433 = move ((_423 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_435);
        _435 = move _433;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _435) -> [return: bb264, unwind: bb437];
    }

    bb264: {
        StorageDead(_435);
        StorageDead(_433);
        _813 = discriminant(_423);
        StorageDead(_429);
        StorageDead(_423);
        StorageDead(_422);
        goto -> bb415;
    }

    bb265: {
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &mut (((*_1).9: state::reserve::ReserveConfig).9: u16);
        _443 = &mut (*_444);
        _442 = for_field::<u16>(move _443) -> [return: bb266, unwind continue];
    }

    bb266: {
        StorageDead(_443);
        _441 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::named::<&str>(move _442, const "&mut reserve.config.min_liquidation_bonus_bps") -> [return: bb267, unwind: bb417];
    }

    bb267: {
        StorageDead(_442);
        _440 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::validating::<for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}>(move _441, check_valid_bps::<u16>) -> [return: bb268, unwind: bb417];
    }

    bb268: {
        StorageDead(_441);
        StorageLive(_445);
        _445 = &(*_3);
        _439 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::set(move _440, move _445) -> [return: bb269, unwind: bb417];
    }

    bb269: {
        StorageDead(_445);
        StorageDead(_440);
        _438 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _439) -> [return: bb270, unwind: bb417];
    }

    bb270: {
        StorageDead(_439);
        _446 = discriminant(_438);
        switchInt(move _446) -> [0: bb271, 1: bb272, otherwise: bb1];
    }

    bb271: {
        StorageLive(_450);
        _450 = ((_438 as Continue).0: ());
        _437 = _450;
        StorageDead(_450);
        _745 = discriminant(_438);
        StorageDead(_444);
        StorageDead(_438);
        StorageDead(_437);
        _4 = const ();
        goto -> bb413;
    }

    bb272: {
        StorageLive(_447);
        _447 = move ((_438 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_449);
        _449 = move _447;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _449) -> [return: bb273, unwind: bb436];
    }

    bb273: {
        StorageDead(_449);
        StorageDead(_447);
        _811 = discriminant(_438);
        StorageDead(_444);
        StorageDead(_438);
        StorageDead(_437);
        goto -> bb415;
    }

    bb274: {
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        _457 = &mut (((*_1).9: state::reserve::ReserveConfig).12: u64);
        _456 = &mut (*_457);
        _455 = for_field::<u64>(move _456) -> [return: bb275, unwind continue];
    }

    bb275: {
        StorageDead(_456);
        _454 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _455, const "&mut reserve.config.deleveraging_margin_call_period_secs") -> [return: bb276, unwind: bb417];
    }

    bb276: {
        StorageDead(_455);
        StorageLive(_458);
        _458 = &(*_3);
        _453 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _454, move _458) -> [return: bb277, unwind: bb417];
    }

    bb277: {
        StorageDead(_458);
        StorageDead(_454);
        _452 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _453) -> [return: bb278, unwind: bb417];
    }

    bb278: {
        StorageDead(_453);
        _459 = discriminant(_452);
        switchInt(move _459) -> [0: bb279, 1: bb280, otherwise: bb1];
    }

    bb279: {
        StorageLive(_463);
        _463 = ((_452 as Continue).0: ());
        _451 = _463;
        StorageDead(_463);
        _747 = discriminant(_452);
        StorageDead(_457);
        StorageDead(_452);
        StorageDead(_451);
        _4 = const ();
        goto -> bb413;
    }

    bb280: {
        StorageLive(_460);
        _460 = move ((_452 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_462);
        _462 = move _460;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _462) -> [return: bb281, unwind: bb435];
    }

    bb281: {
        StorageDead(_462);
        StorageDead(_460);
        _809 = discriminant(_452);
        StorageDead(_457);
        StorageDead(_452);
        StorageDead(_451);
        goto -> bb415;
    }

    bb282: {
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &mut (((*_1).9: state::reserve::ReserveConfig).16: u64);
        _470 = &mut (*_471);
        _469 = for_field::<u64>(move _470) -> [return: bb283, unwind continue];
    }

    bb283: {
        StorageDead(_470);
        _468 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _469, const "&mut reserve.config.borrow_factor_pct") -> [return: bb284, unwind: bb417];
    }

    bb284: {
        _679 = const true;
        StorageDead(_469);
        StorageLive(_472);
        _472 = check_gte::<u64, u64>(const 100_u64) -> [return: bb285, unwind: bb434];
    }

    bb285: {
        _679 = const false;
        _467 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<{closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21}>(move _468, move _472) -> [return: bb286, unwind: bb434];
    }

    bb286: {
        StorageDead(_472);
        _679 = const false;
        StorageDead(_468);
        StorageLive(_473);
        _473 = &(*_3);
        _466 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _467, move _473) -> [return: bb287, unwind: bb417];
    }

    bb287: {
        StorageDead(_473);
        StorageDead(_467);
        _465 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _466) -> [return: bb288, unwind: bb417];
    }

    bb288: {
        StorageDead(_466);
        _474 = discriminant(_465);
        switchInt(move _474) -> [0: bb289, 1: bb290, otherwise: bb1];
    }

    bb289: {
        StorageLive(_478);
        _478 = ((_465 as Continue).0: ());
        _464 = _478;
        StorageDead(_478);
        _749 = discriminant(_465);
        StorageDead(_471);
        StorageDead(_465);
        StorageDead(_464);
        _4 = const ();
        goto -> bb413;
    }

    bb290: {
        StorageLive(_475);
        _475 = move ((_465 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_477);
        _477 = move _475;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _477) -> [return: bb291, unwind: bb432];
    }

    bb291: {
        StorageDead(_477);
        StorageDead(_475);
        _807 = discriminant(_465);
        StorageDead(_471);
        StorageDead(_465);
        StorageDead(_464);
        goto -> bb415;
    }

    bb292: {
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &mut (((*_1).9: state::reserve::ReserveConfig).1: u8);
        _485 = &mut (*_486);
        _484 = for_field::<u8>(move _485) -> [return: bb293, unwind continue];
    }

    bb293: {
        StorageDead(_485);
        _483 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _484, const "&mut reserve.config.asset_tier") -> [return: bb294, unwind: bb417];
    }

    bb294: {
        StorageDead(_484);
        _482 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::representing_u8_enum::<reserve::AssetTier>(move _483) -> [return: bb295, unwind: bb417];
    }

    bb295: {
        StorageDead(_483);
        StorageLive(_487);
        _487 = &(*_3);
        _481 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_u8_enum::<reserve::AssetTier>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_u8_enum::<reserve::AssetTier>}>::set(move _482, move _487) -> [return: bb296, unwind: bb417];
    }

    bb296: {
        StorageDead(_487);
        StorageDead(_482);
        _480 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _481) -> [return: bb297, unwind: bb417];
    }

    bb297: {
        StorageDead(_481);
        _488 = discriminant(_480);
        switchInt(move _488) -> [0: bb298, 1: bb299, otherwise: bb1];
    }

    bb298: {
        StorageLive(_492);
        _492 = ((_480 as Continue).0: ());
        _479 = _492;
        StorageDead(_492);
        _751 = discriminant(_480);
        StorageDead(_486);
        StorageDead(_480);
        StorageDead(_479);
        _4 = const ();
        goto -> bb413;
    }

    bb299: {
        StorageLive(_489);
        _489 = move ((_480 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_491);
        _491 = move _489;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _491) -> [return: bb300, unwind: bb431];
    }

    bb300: {
        StorageDead(_491);
        StorageDead(_489);
        _805 = discriminant(_480);
        StorageDead(_486);
        StorageDead(_480);
        StorageDead(_479);
        goto -> bb415;
    }

    bb301: {
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &mut (((*_1).9: state::reserve::ReserveConfig).22: [u8; 20]);
        _498 = &mut (*_499);
        _497 = for_field::<[u8; 20]>(move _498) -> [return: bb302, unwind continue];
    }

    bb302: {
        StorageDead(_498);
        _496 = ConfigItemUpdater::<'_, [u8; 20], [u8; 20], for<'a> fn(&'a mut [u8; 20], [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 20]>}, for<'t, 'a> fn(&'t [u8; 20], &'a [u8; 20]) -> std::result::Result<std::option::Option<&'t [u8; 20]>, anchor_lang::error::Error> {get_field_directly::<[u8; 20]>}, for<'a> fn(&'a [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 20]>}, for<'a, 'b, 'c> fn(&'a [u8; 20], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u8; 20]>}>::named::<&str>(move _497, const "&mut reserve.config.elevation_groups") -> [return: bb303, unwind: bb417];
    }

    bb303: {
        StorageDead(_497);
        StorageLive(_500);
        _500 = &(*_3);
        _495 = ConfigItemUpdater::<'_, [u8; 20], [u8; 20], for<'a> fn(&'a mut [u8; 20], [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 20]>}, for<'t, 'a> fn(&'t [u8; 20], &'a [u8; 20]) -> std::result::Result<std::option::Option<&'t [u8; 20]>, anchor_lang::error::Error> {get_field_directly::<[u8; 20]>}, for<'a> fn(&'a [u8; 20]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 20]>}, for<'a, 'b, 'c> fn(&'a [u8; 20], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u8; 20]>}>::set(move _496, move _500) -> [return: bb304, unwind: bb417];
    }

    bb304: {
        StorageDead(_500);
        StorageDead(_496);
        _494 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _495) -> [return: bb305, unwind: bb417];
    }

    bb305: {
        StorageDead(_495);
        _501 = discriminant(_494);
        switchInt(move _501) -> [0: bb306, 1: bb307, otherwise: bb1];
    }

    bb306: {
        StorageLive(_505);
        _505 = ((_494 as Continue).0: ());
        _493 = _505;
        StorageDead(_505);
        _753 = discriminant(_494);
        StorageDead(_499);
        StorageDead(_494);
        StorageDead(_493);
        _4 = const ();
        goto -> bb413;
    }

    bb307: {
        StorageLive(_502);
        _502 = move ((_494 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_504);
        _504 = move _502;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _504) -> [return: bb308, unwind: bb430];
    }

    bb308: {
        StorageDead(_504);
        StorageDead(_502);
        _803 = discriminant(_494);
        StorageDead(_499);
        StorageDead(_494);
        StorageDead(_493);
        goto -> bb415;
    }

    bb309: {
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        _512 = &mut (((*_1).9: state::reserve::ReserveConfig).13: u64);
        _511 = &mut (*_512);
        _510 = for_field::<u64>(move _511) -> [return: bb310, unwind continue];
    }

    bb310: {
        StorageDead(_511);
        _509 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _510, const "&mut reserve.config.deleveraging_threshold_decrease_bps_per_day") -> [return: bb311, unwind: bb417];
    }

    bb311: {
        StorageDead(_510);
        StorageLive(_513);
        _513 = &(*_3);
        _508 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _509, move _513) -> [return: bb312, unwind: bb417];
    }

    bb312: {
        StorageDead(_513);
        StorageDead(_509);
        _507 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _508) -> [return: bb313, unwind: bb417];
    }

    bb313: {
        StorageDead(_508);
        _514 = discriminant(_507);
        switchInt(move _514) -> [0: bb314, 1: bb315, otherwise: bb1];
    }

    bb314: {
        StorageLive(_518);
        _518 = ((_507 as Continue).0: ());
        _506 = _518;
        StorageDead(_518);
        _755 = discriminant(_507);
        StorageDead(_512);
        StorageDead(_507);
        StorageDead(_506);
        _4 = const ();
        goto -> bb413;
    }

    bb315: {
        StorageLive(_515);
        _515 = move ((_507 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_517);
        _517 = move _515;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _517) -> [return: bb316, unwind: bb429];
    }

    bb316: {
        StorageDead(_517);
        StorageDead(_515);
        _801 = discriminant(_507);
        StorageDead(_512);
        StorageDead(_507);
        StorageDead(_506);
        goto -> bb415;
    }

    bb317: {
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        _526 = &mut (((*_1).9: state::reserve::ReserveConfig).0: u8);
        _525 = &mut (*_526);
        _524 = for_field::<u8>(move _525) -> [return: bb318, unwind continue];
    }

    bb318: {
        StorageDead(_525);
        _523 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _524, const "&mut reserve.config.status") -> [return: bb319, unwind: bb417];
    }

    bb319: {
        StorageDead(_524);
        _522 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::representing_u8_enum::<reserve::ReserveStatus>(move _523) -> [return: bb320, unwind: bb417];
    }

    bb320: {
        StorageDead(_523);
        StorageLive(_527);
        _527 = &(*_3);
        _521 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_u8_enum::<reserve::ReserveStatus>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_u8_enum::<reserve::ReserveStatus>}>::set(move _522, move _527) -> [return: bb321, unwind: bb417];
    }

    bb321: {
        StorageDead(_527);
        StorageDead(_522);
        _520 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _521) -> [return: bb322, unwind: bb417];
    }

    bb322: {
        StorageDead(_521);
        _528 = discriminant(_520);
        switchInt(move _528) -> [0: bb323, 1: bb324, otherwise: bb1];
    }

    bb323: {
        StorageLive(_532);
        _532 = ((_520 as Continue).0: ());
        _519 = _532;
        StorageDead(_532);
        _757 = discriminant(_520);
        StorageDead(_526);
        StorageDead(_520);
        StorageDead(_519);
        _4 = const ();
        goto -> bb413;
    }

    bb324: {
        StorageLive(_529);
        _529 = move ((_520 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_531);
        _531 = move _529;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _531) -> [return: bb325, unwind: bb428];
    }

    bb325: {
        StorageDead(_531);
        StorageDead(_529);
        _799 = discriminant(_520);
        StorageDead(_526);
        StorageDead(_520);
        StorageDead(_519);
        goto -> bb415;
    }

    bb326: {
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        _539 = &mut (((*_1).9: state::reserve::ReserveConfig).27: u64);
        _538 = &mut (*_539);
        _537 = for_field::<u64>(move _538) -> [return: bb327, unwind continue];
    }

    bb327: {
        StorageDead(_538);
        _536 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _537, const "&mut reserve.config.borrow_limit_outside_elevation_group") -> [return: bb328, unwind: bb417];
    }

    bb328: {
        StorageDead(_537);
        StorageLive(_540);
        _540 = &(*_3);
        _535 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _536, move _540) -> [return: bb329, unwind: bb417];
    }

    bb329: {
        StorageDead(_540);
        StorageDead(_536);
        _534 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _535) -> [return: bb330, unwind: bb417];
    }

    bb330: {
        StorageDead(_535);
        _541 = discriminant(_534);
        switchInt(move _541) -> [0: bb331, 1: bb332, otherwise: bb1];
    }

    bb331: {
        StorageLive(_545);
        _545 = ((_534 as Continue).0: ());
        _533 = _545;
        StorageDead(_545);
        _759 = discriminant(_534);
        StorageDead(_539);
        StorageDead(_534);
        StorageDead(_533);
        _4 = const ();
        goto -> bb413;
    }

    bb332: {
        StorageLive(_542);
        _542 = move ((_534 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_544);
        _544 = move _542;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _544) -> [return: bb333, unwind: bb427];
    }

    bb333: {
        StorageDead(_544);
        StorageDead(_542);
        _797 = discriminant(_534);
        StorageDead(_539);
        StorageDead(_534);
        StorageDead(_533);
        goto -> bb415;
    }

    bb334: {
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        _552 = &mut (((*_1).9: state::reserve::ReserveConfig).28: [u64; 32]);
        _551 = &mut (*_552);
        _550 = for_field::<[u64; 32]>(move _551) -> [return: bb335, unwind continue];
    }

    bb335: {
        StorageDead(_551);
        _549 = ConfigItemUpdater::<'_, [u64; 32], [u64; 32], for<'a> fn(&'a mut [u64; 32], [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u64; 32]>}, for<'t, 'a> fn(&'t [u64; 32], &'a [u64; 32]) -> std::result::Result<std::option::Option<&'t [u64; 32]>, anchor_lang::error::Error> {get_field_directly::<[u64; 32]>}, for<'a> fn(&'a [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u64; 32]>}, for<'a, 'b, 'c> fn(&'a [u64; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u64; 32]>}>::named::<&str>(move _550, const "&mut reserve.config.borrow_limit_against_this_collateral_in_elevation_group") -> [return: bb336, unwind: bb417];
    }

    bb336: {
        StorageDead(_550);
        StorageLive(_553);
        _553 = &(*_3);
        _548 = ConfigItemUpdater::<'_, [u64; 32], [u64; 32], for<'a> fn(&'a mut [u64; 32], [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u64; 32]>}, for<'t, 'a> fn(&'t [u64; 32], &'a [u64; 32]) -> std::result::Result<std::option::Option<&'t [u64; 32]>, anchor_lang::error::Error> {get_field_directly::<[u64; 32]>}, for<'a> fn(&'a [u64; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u64; 32]>}, for<'a, 'b, 'c> fn(&'a [u64; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u64; 32]>}>::set(move _549, move _553) -> [return: bb337, unwind: bb417];
    }

    bb337: {
        StorageDead(_553);
        StorageDead(_549);
        _547 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _548) -> [return: bb338, unwind: bb417];
    }

    bb338: {
        StorageDead(_548);
        _554 = discriminant(_547);
        switchInt(move _554) -> [0: bb339, 1: bb340, otherwise: bb1];
    }

    bb339: {
        StorageLive(_558);
        _558 = ((_547 as Continue).0: ());
        _546 = _558;
        StorageDead(_558);
        _761 = discriminant(_547);
        StorageDead(_552);
        StorageDead(_547);
        StorageDead(_546);
        _4 = const ();
        goto -> bb413;
    }

    bb340: {
        StorageLive(_555);
        _555 = move ((_547 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_557);
        _557 = move _555;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _557) -> [return: bb341, unwind: bb426];
    }

    bb341: {
        StorageDead(_557);
        StorageDead(_555);
        _795 = discriminant(_547);
        StorageDead(_552);
        StorageDead(_547);
        StorageDead(_546);
        goto -> bb415;
    }

    bb342: {
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        _565 = &mut ((*_1).3: anchor_lang::prelude::Pubkey);
        _564 = &mut (*_565);
        _563 = for_field::<anchor_lang::prelude::Pubkey>(move _564) -> [return: bb343, unwind continue];
    }

    bb343: {
        StorageDead(_564);
        _562 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _563, const "&mut reserve.farm_collateral") -> [return: bb344, unwind: bb417];
    }

    bb344: {
        StorageDead(_563);
        StorageLive(_566);
        _566 = &(*_3);
        _561 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _562, move _566) -> [return: bb345, unwind: bb417];
    }

    bb345: {
        StorageDead(_566);
        StorageDead(_562);
        _560 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _561) -> [return: bb346, unwind: bb417];
    }

    bb346: {
        StorageDead(_561);
        _567 = discriminant(_560);
        switchInt(move _567) -> [0: bb347, 1: bb348, otherwise: bb1];
    }

    bb347: {
        StorageLive(_571);
        _571 = ((_560 as Continue).0: ());
        _559 = _571;
        StorageDead(_571);
        _763 = discriminant(_560);
        StorageDead(_565);
        StorageDead(_560);
        StorageDead(_559);
        _4 = const ();
        goto -> bb413;
    }

    bb348: {
        StorageLive(_568);
        _568 = move ((_560 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_570);
        _570 = move _568;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _570) -> [return: bb349, unwind: bb425];
    }

    bb349: {
        StorageDead(_570);
        StorageDead(_568);
        _793 = discriminant(_560);
        StorageDead(_565);
        StorageDead(_560);
        StorageDead(_559);
        goto -> bb415;
    }

    bb350: {
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = &mut ((*_1).4: anchor_lang::prelude::Pubkey);
        _577 = &mut (*_578);
        _576 = for_field::<anchor_lang::prelude::Pubkey>(move _577) -> [return: bb351, unwind continue];
    }

    bb351: {
        StorageDead(_577);
        _575 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _576, const "&mut reserve.farm_debt") -> [return: bb352, unwind: bb417];
    }

    bb352: {
        StorageDead(_576);
        StorageLive(_579);
        _579 = &(*_3);
        _574 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _575, move _579) -> [return: bb353, unwind: bb417];
    }

    bb353: {
        StorageDead(_579);
        StorageDead(_575);
        _573 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _574) -> [return: bb354, unwind: bb417];
    }

    bb354: {
        StorageDead(_574);
        _580 = discriminant(_573);
        switchInt(move _580) -> [0: bb355, 1: bb356, otherwise: bb1];
    }

    bb355: {
        StorageLive(_584);
        _584 = ((_573 as Continue).0: ());
        _572 = _584;
        StorageDead(_584);
        _765 = discriminant(_573);
        StorageDead(_578);
        StorageDead(_573);
        StorageDead(_572);
        _4 = const ();
        goto -> bb413;
    }

    bb356: {
        StorageLive(_581);
        _581 = move ((_573 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_583);
        _583 = move _581;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _583) -> [return: bb357, unwind: bb424];
    }

    bb357: {
        StorageDead(_583);
        StorageDead(_581);
        _791 = discriminant(_573);
        StorageDead(_578);
        StorageDead(_573);
        StorageDead(_572);
        goto -> bb415;
    }

    bb358: {
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        _592 = &mut (((*_1).9: state::reserve::ReserveConfig).23: u8);
        _591 = &mut (*_592);
        _590 = for_field::<u8>(move _591) -> [return: bb359, unwind continue];
    }

    bb359: {
        StorageDead(_591);
        _589 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _590, const "&mut reserve.config.disable_usage_as_coll_outside_emode") -> [return: bb360, unwind: bb417];
    }

    bb360: {
        StorageDead(_590);
        _588 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _589, check_bool::<u8>) -> [return: bb361, unwind: bb417];
    }

    bb361: {
        StorageDead(_589);
        StorageLive(_593);
        _593 = &(*_3);
        _587 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _588, move _593) -> [return: bb362, unwind: bb417];
    }

    bb362: {
        StorageDead(_593);
        StorageDead(_588);
        _586 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _587) -> [return: bb363, unwind: bb417];
    }

    bb363: {
        StorageDead(_587);
        _594 = discriminant(_586);
        switchInt(move _594) -> [0: bb364, 1: bb365, otherwise: bb1];
    }

    bb364: {
        StorageLive(_598);
        _598 = ((_586 as Continue).0: ());
        _585 = _598;
        StorageDead(_598);
        _767 = discriminant(_586);
        StorageDead(_592);
        StorageDead(_586);
        StorageDead(_585);
        _4 = const ();
        goto -> bb413;
    }

    bb365: {
        StorageLive(_595);
        _595 = move ((_586 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_597);
        _597 = move _595;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _597) -> [return: bb366, unwind: bb423];
    }

    bb366: {
        StorageDead(_597);
        StorageDead(_595);
        _789 = discriminant(_586);
        StorageDead(_592);
        StorageDead(_586);
        StorageDead(_585);
        goto -> bb415;
    }

    bb367: {
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        _606 = &mut (((*_1).9: state::reserve::ReserveConfig).24: u8);
        _605 = &mut (*_606);
        _604 = for_field::<u8>(move _605) -> [return: bb368, unwind continue];
    }

    bb368: {
        StorageDead(_605);
        _603 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _604, const "&mut reserve.config.utilization_limit_block_borrowing_above_pct") -> [return: bb369, unwind: bb417];
    }

    bb369: {
        StorageDead(_604);
        _602 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}>(move _603, check_valid_pct::<u8>) -> [return: bb370, unwind: bb417];
    }

    bb370: {
        StorageDead(_603);
        StorageLive(_607);
        _607 = &(*_3);
        _601 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _602, move _607) -> [return: bb371, unwind: bb417];
    }

    bb371: {
        StorageDead(_607);
        StorageDead(_602);
        _600 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _601) -> [return: bb372, unwind: bb417];
    }

    bb372: {
        StorageDead(_601);
        _608 = discriminant(_600);
        switchInt(move _608) -> [0: bb373, 1: bb374, otherwise: bb1];
    }

    bb373: {
        StorageLive(_612);
        _612 = ((_600 as Continue).0: ());
        _599 = _612;
        StorageDead(_612);
        _769 = discriminant(_600);
        StorageDead(_606);
        StorageDead(_600);
        StorageDead(_599);
        _4 = const ();
        goto -> bb413;
    }

    bb374: {
        StorageLive(_609);
        _609 = move ((_600 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_611);
        _611 = move _609;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _611) -> [return: bb375, unwind: bb422];
    }

    bb375: {
        StorageDead(_611);
        StorageDead(_609);
        _787 = discriminant(_600);
        StorageDead(_606);
        StorageDead(_600);
        StorageDead(_599);
        goto -> bb415;
    }

    bb376: {
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        _620 = &mut ((((*_1).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo).8: u8);
        _619 = &mut (*_620);
        _618 = for_field::<u8>(move _619) -> [return: bb377, unwind continue];
    }

    bb377: {
        StorageDead(_619);
        _617 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _618, const "&mut reserve.config.token_info.block_price_usage") -> [return: bb378, unwind: bb417];
    }

    bb378: {
        StorageDead(_618);
        _616 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _617, check_bool::<u8>) -> [return: bb379, unwind: bb417];
    }

    bb379: {
        StorageDead(_617);
        StorageLive(_621);
        _621 = &(*_3);
        _615 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _616, move _621) -> [return: bb380, unwind: bb417];
    }

    bb380: {
        StorageDead(_621);
        StorageDead(_616);
        _614 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _615) -> [return: bb381, unwind: bb417];
    }

    bb381: {
        StorageDead(_615);
        _622 = discriminant(_614);
        switchInt(move _622) -> [0: bb382, 1: bb383, otherwise: bb1];
    }

    bb382: {
        StorageLive(_626);
        _626 = ((_614 as Continue).0: ());
        _613 = _626;
        StorageDead(_626);
        _771 = discriminant(_614);
        StorageDead(_620);
        StorageDead(_614);
        StorageDead(_613);
        _4 = const ();
        goto -> bb413;
    }

    bb383: {
        StorageLive(_623);
        _623 = move ((_614 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_625);
        _625 = move _623;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _625) -> [return: bb384, unwind: bb421];
    }

    bb384: {
        StorageDead(_625);
        StorageDead(_623);
        _785 = discriminant(_614);
        StorageDead(_620);
        StorageDead(_614);
        StorageDead(_613);
        goto -> bb415;
    }

    bb385: {
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        _634 = &mut (((*_1).9: state::reserve::ReserveConfig).2: u16);
        _633 = &mut (*_634);
        _632 = for_field::<u16>(move _633) -> [return: bb386, unwind continue];
    }

    bb386: {
        StorageDead(_633);
        _631 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::named::<&str>(move _632, const "&mut reserve.config.host_fixed_interest_rate_bps") -> [return: bb387, unwind: bb417];
    }

    bb387: {
        StorageDead(_632);
        _630 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::validating::<for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}>(move _631, check_valid_bps::<u16>) -> [return: bb388, unwind: bb417];
    }

    bb388: {
        StorageDead(_631);
        StorageLive(_635);
        _635 = &(*_3);
        _629 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::set(move _630, move _635) -> [return: bb389, unwind: bb417];
    }

    bb389: {
        StorageDead(_635);
        StorageDead(_630);
        _628 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _629) -> [return: bb390, unwind: bb417];
    }

    bb390: {
        StorageDead(_629);
        _636 = discriminant(_628);
        switchInt(move _636) -> [0: bb391, 1: bb392, otherwise: bb1];
    }

    bb391: {
        StorageLive(_640);
        _640 = ((_628 as Continue).0: ());
        _627 = _640;
        StorageDead(_640);
        _773 = discriminant(_628);
        StorageDead(_634);
        StorageDead(_628);
        StorageDead(_627);
        _4 = const ();
        goto -> bb413;
    }

    bb392: {
        StorageLive(_637);
        _637 = move ((_628 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_639);
        _639 = move _637;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _639) -> [return: bb393, unwind: bb420];
    }

    bb393: {
        StorageDead(_639);
        StorageDead(_637);
        _783 = discriminant(_628);
        StorageDead(_634);
        StorageDead(_628);
        StorageDead(_627);
        goto -> bb415;
    }

    bb394: {
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        _648 = &mut (((*_1).9: state::reserve::ReserveConfig).25: u8);
        _647 = &mut (*_648);
        _646 = for_field::<u8>(move _647) -> [return: bb395, unwind continue];
    }

    bb395: {
        StorageDead(_647);
        _645 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _646, const "&mut reserve.config.autodeleverage_enabled") -> [return: bb396, unwind: bb417];
    }

    bb396: {
        StorageDead(_646);
        _644 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _645, check_bool::<u8>) -> [return: bb397, unwind: bb417];
    }

    bb397: {
        StorageDead(_645);
        StorageLive(_649);
        _649 = &(*_3);
        _643 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _644, move _649) -> [return: bb398, unwind: bb417];
    }

    bb398: {
        StorageDead(_649);
        StorageDead(_644);
        _642 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _643) -> [return: bb399, unwind: bb417];
    }

    bb399: {
        StorageDead(_643);
        _650 = discriminant(_642);
        switchInt(move _650) -> [0: bb400, 1: bb401, otherwise: bb1];
    }

    bb400: {
        StorageLive(_654);
        _654 = ((_642 as Continue).0: ());
        _641 = _654;
        StorageDead(_654);
        _775 = discriminant(_642);
        StorageDead(_648);
        StorageDead(_642);
        StorageDead(_641);
        _4 = const ();
        goto -> bb413;
    }

    bb401: {
        StorageLive(_651);
        _651 = move ((_642 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_653);
        _653 = move _651;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _653) -> [return: bb402, unwind: bb419];
    }

    bb402: {
        StorageDead(_653);
        StorageDead(_651);
        _781 = discriminant(_642);
        StorageDead(_648);
        StorageDead(_642);
        StorageDead(_641);
        goto -> bb415;
    }

    bb403: {
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        _661 = &mut (((*_1).9: state::reserve::ReserveConfig).29: u64);
        _660 = &mut (*_661);
        _659 = for_field::<u64>(move _660) -> [return: bb404, unwind continue];
    }

    bb404: {
        StorageDead(_660);
        _658 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _659, const "&mut reserve.config.deleveraging_bonus_increase_bps_per_day") -> [return: bb405, unwind: bb417];
    }

    bb405: {
        StorageDead(_659);
        StorageLive(_662);
        _662 = &(*_3);
        _657 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _658, move _662) -> [return: bb406, unwind: bb417];
    }

    bb406: {
        StorageDead(_662);
        StorageDead(_658);
        _656 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _657) -> [return: bb407, unwind: bb417];
    }

    bb407: {
        StorageDead(_657);
        _663 = discriminant(_656);
        switchInt(move _663) -> [0: bb408, 1: bb409, otherwise: bb1];
    }

    bb408: {
        StorageLive(_667);
        _667 = ((_656 as Continue).0: ());
        _655 = _667;
        StorageDead(_667);
        _777 = discriminant(_656);
        StorageDead(_661);
        StorageDead(_656);
        StorageDead(_655);
        _4 = const ();
        goto -> bb413;
    }

    bb409: {
        StorageLive(_664);
        _664 = move ((_656 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_666);
        _666 = move _664;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _666) -> [return: bb410, unwind: bb418];
    }

    bb410: {
        StorageDead(_666);
        StorageDead(_664);
        _779 = discriminant(_656);
        StorageDead(_661);
        StorageDead(_656);
        StorageDead(_655);
        goto -> bb415;
    }

    bb411: {
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        _678 = const _;
        _673 = &(*_678);
        _672 = &(*_673);
        _671 = move _672 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_672);
        _670 = Arguments::<'_>::new_const(move _671) -> [return: bb412, unwind continue];
    }

    bb412: {
        StorageDead(_671);
        _669 = panic_fmt(move _670) -> unwind continue;
    }

    bb413: {
        StorageDead(_4);
        StorageLive(_675);
        StorageLive(_676);
        _676 = &mut ((*_1).1: state::last_update::LastUpdate);
        _675 = last_update::LastUpdate::mark_stale(move _676) -> [return: bb414, unwind continue];
    }

    bb414: {
        StorageDead(_676);
        StorageDead(_675);
        StorageLive(_677);
        _677 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _677);
        StorageDead(_677);
        goto -> bb416;
    }

    bb415: {
        StorageDead(_4);
        goto -> bb416;
    }

    bb416: {
        return;
    }

    bb417 (cleanup): {
        resume;
    }

    bb418 (cleanup): {
        _873 = discriminant(_656);
        goto -> bb417;
    }

    bb419 (cleanup): {
        _874 = discriminant(_642);
        goto -> bb417;
    }

    bb420 (cleanup): {
        _875 = discriminant(_628);
        goto -> bb417;
    }

    bb421 (cleanup): {
        _876 = discriminant(_614);
        goto -> bb417;
    }

    bb422 (cleanup): {
        _877 = discriminant(_600);
        goto -> bb417;
    }

    bb423 (cleanup): {
        _878 = discriminant(_586);
        goto -> bb417;
    }

    bb424 (cleanup): {
        _879 = discriminant(_573);
        goto -> bb417;
    }

    bb425 (cleanup): {
        _880 = discriminant(_560);
        goto -> bb417;
    }

    bb426 (cleanup): {
        _881 = discriminant(_547);
        goto -> bb417;
    }

    bb427 (cleanup): {
        _882 = discriminant(_534);
        goto -> bb417;
    }

    bb428 (cleanup): {
        _883 = discriminant(_520);
        goto -> bb417;
    }

    bb429 (cleanup): {
        _884 = discriminant(_507);
        goto -> bb417;
    }

    bb430 (cleanup): {
        _885 = discriminant(_494);
        goto -> bb417;
    }

    bb431 (cleanup): {
        _886 = discriminant(_480);
        goto -> bb417;
    }

    bb432 (cleanup): {
        _887 = discriminant(_465);
        goto -> bb417;
    }

    bb433 (cleanup): {
        drop(_468) -> [return: bb417, unwind terminate(cleanup)];
    }

    bb434 (cleanup): {
        switchInt(_679) -> [0: bb417, otherwise: bb433];
    }

    bb435 (cleanup): {
        _888 = discriminant(_452);
        goto -> bb417;
    }

    bb436 (cleanup): {
        _889 = discriminant(_438);
        goto -> bb417;
    }

    bb437 (cleanup): {
        _890 = discriminant(_423);
        goto -> bb417;
    }

    bb438 (cleanup): {
        drop(_426) -> [return: bb417, unwind terminate(cleanup)];
    }

    bb439 (cleanup): {
        switchInt(_680) -> [0: bb417, otherwise: bb438];
    }

    bb440 (cleanup): {
        _891 = discriminant(_405);
        goto -> bb417;
    }

    bb441 (cleanup): {
        drop(_407) -> [return: bb417, unwind terminate(cleanup)];
    }

    bb442 (cleanup): {
        switchInt(_681) -> [0: bb417, otherwise: bb441];
    }

    bb443 (cleanup): {
        _892 = discriminant(_391);
        goto -> bb417;
    }

    bb444 (cleanup): {
        _893 = discriminant(_373);
        goto -> bb417;
    }

    bb445 (cleanup): {
        drop(_375) -> [return: bb417, unwind terminate(cleanup)];
    }

    bb446 (cleanup): {
        switchInt(_682) -> [0: bb417, otherwise: bb445];
    }

    bb447 (cleanup): {
        _894 = discriminant(_359);
        goto -> bb417;
    }

    bb448 (cleanup): {
        _895 = discriminant(_342);
        goto -> bb417;
    }

    bb449 (cleanup): {
        _896 = discriminant(_322);
        goto -> bb417;
    }

    bb450 (cleanup): {
        _897 = discriminant(_309);
        goto -> bb417;
    }

    bb451 (cleanup): {
        _898 = discriminant(_296);
        goto -> bb417;
    }

    bb452 (cleanup): {
        _899 = discriminant(_283);
        goto -> bb417;
    }

    bb453 (cleanup): {
        _900 = discriminant(_270);
        goto -> bb417;
    }

    bb454 (cleanup): {
        _901 = discriminant(_257);
        goto -> bb417;
    }

    bb455 (cleanup): {
        _902 = discriminant(_244);
        goto -> bb417;
    }

    bb456 (cleanup): {
        _903 = discriminant(_230);
        goto -> bb417;
    }

    bb457 (cleanup): {
        _904 = discriminant(_217);
        goto -> bb417;
    }

    bb458 (cleanup): {
        _905 = discriminant(_204);
        goto -> bb417;
    }

    bb459 (cleanup): {
        _906 = discriminant(_190);
        goto -> bb417;
    }

    bb460 (cleanup): {
        _907 = discriminant(_177);
        goto -> bb417;
    }

    bb461 (cleanup): {
        _908 = discriminant(_164);
        goto -> bb417;
    }

    bb462 (cleanup): {
        _909 = discriminant(_151);
        goto -> bb417;
    }

    bb463 (cleanup): {
        _910 = discriminant(_138);
        goto -> bb417;
    }

    bb464 (cleanup): {
        _911 = discriminant(_125);
        goto -> bb417;
    }

    bb465 (cleanup): {
        _912 = discriminant(_108);
        goto -> bb417;
    }

    bb466 (cleanup): {
        drop(_112) -> [return: bb417, unwind terminate(cleanup)];
    }

    bb467 (cleanup): {
        switchInt(_683) -> [0: bb417, otherwise: bb466];
    }

    bb468 (cleanup): {
        _913 = discriminant(_91);
        goto -> bb417;
    }

    bb469 (cleanup): {
        drop(_95) -> [return: bb417, unwind terminate(cleanup)];
    }

    bb470 (cleanup): {
        switchInt(_684) -> [0: bb417, otherwise: bb469];
    }

    bb471 (cleanup): {
        _914 = discriminant(_77);
        goto -> bb417;
    }

    bb472 (cleanup): {
        _915 = discriminant(_63);
        goto -> bb417;
    }

    bb473 (cleanup): {
        _916 = discriminant(_49);
        goto -> bb417;
    }

    bb474 (cleanup): {
        _917 = discriminant(_35);
        goto -> bb417;
    }

    bb475 (cleanup): {
        _918 = discriminant(_21);
        goto -> bb417;
    }

    bb476 (cleanup): {
        _919 = discriminant(_7);
        goto -> bb417;
    }
}
