// MIR for `lending_operations::borrow_obligation_liquidity` after PreCodegen

fn lending_operations::borrow_obligation_liquidity(_1: &state::lending_market::LendingMarket, _2: &mut reserve::Reserve, _3: &mut obligation::Obligation, _4: u64, _5: &anchor_lang::prelude::Clock, _6: anchor_lang::prelude::Pubkey, _7: std::option::Option<RefMut<'_, referral::ReferrerTokenState>>, _8: impl Iterator<Item = T>) -> std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> {
    debug lending_market => _1;
    debug borrow_reserve => _2;
    debug obligation => _3;
    debug liquidity_amount => _4;
    debug clock => _5;
    debug borrow_reserve_pk => _6;
    debug referrer_token_state => _7;
    debug deposit_reserves_iter => _8;
    let mut _0: std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error>;
    let _9: ();
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: !;
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: anchor_lang::error::Error;
    let mut _17: anchor_lang::error::AnchorError;
    let mut _18: std::string::String;
    let mut _19: &LendingError;
    let _20: LendingError;
    let mut _21: u32;
    let mut _22: LendingError;
    let mut _23: std::string::String;
    let mut _24: &LendingError;
    let _25: LendingError;
    let mut _26: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _27: anchor_lang::error::ErrorOrigin;
    let mut _28: anchor_lang::error::Source;
    let mut _29: std::option::Option<anchor_lang::error::ComparedValues>;
    let _30: ();
    let mut _31: bool;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _33: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _34: &state::last_update::LastUpdate;
    let mut _35: u64;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _40: bool;
    let mut _41: !;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: &std::string::String;
    let _46: &std::string::String;
    let _47: std::string::String;
    let _48: std::string::String;
    let mut _49: std::fmt::Arguments<'_>;
    let mut _50: &[&str];
    let mut _51: &[&str; 1];
    let _52: &[&str; 1];
    let _53: [&str; 1];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let mut _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: [core::fmt::rt::Argument<'_>; 1];
    let mut _58: core::fmt::rt::Argument<'_>;
    let mut _59: &u8;
    let _60: &u8;
    let _61: state::last_update::PriceStatusFlags;
    let mut _62: &state::last_update::LastUpdate;
    let mut _63: &[core::fmt::rt::Placeholder];
    let mut _64: &[core::fmt::rt::Placeholder; 1];
    let _65: &[core::fmt::rt::Placeholder; 1];
    let _66: [core::fmt::rt::Placeholder; 1];
    let mut _67: core::fmt::rt::Placeholder;
    let mut _68: core::fmt::rt::Alignment;
    let mut _69: core::fmt::rt::Count;
    let mut _70: core::fmt::rt::Count;
    let mut _71: core::fmt::rt::UnsafeArg;
    let mut _72: anchor_lang::error::Error;
    let mut _73: anchor_lang::error::AnchorError;
    let mut _74: std::string::String;
    let mut _75: &LendingError;
    let _76: LendingError;
    let mut _77: u32;
    let mut _78: LendingError;
    let mut _79: std::string::String;
    let mut _80: &LendingError;
    let _81: LendingError;
    let mut _82: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _83: anchor_lang::error::ErrorOrigin;
    let mut _84: anchor_lang::error::Source;
    let mut _85: std::option::Option<anchor_lang::error::ComparedValues>;
    let _86: ();
    let mut _87: bool;
    let mut _88: &state::lending_market::LendingMarket;
    let mut _89: !;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: anchor_lang::error::Error;
    let mut _94: anchor_lang::error::AnchorError;
    let mut _95: std::string::String;
    let mut _96: &LendingError;
    let _97: LendingError;
    let mut _98: u32;
    let mut _99: LendingError;
    let mut _100: std::string::String;
    let mut _101: &LendingError;
    let _102: LendingError;
    let mut _103: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _104: anchor_lang::error::ErrorOrigin;
    let mut _105: anchor_lang::error::Source;
    let mut _106: std::option::Option<anchor_lang::error::ComparedValues>;
    let _107: ();
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _109: std::result::Result<(), anchor_lang::error::Error>;
    let mut _110: &state::obligation::Obligation;
    let mut _111: isize;
    let _112: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _115: ();
    let _116: ();
    let mut _117: bool;
    let mut _118: &state::obligation::Obligation;
    let mut _119: !;
    let mut _120: anchor_lang::error::Error;
    let mut _121: anchor_lang::error::AnchorError;
    let mut _122: std::string::String;
    let mut _123: &LendingError;
    let _124: LendingError;
    let mut _125: u32;
    let mut _126: LendingError;
    let mut _127: std::string::String;
    let mut _128: &LendingError;
    let _129: LendingError;
    let mut _130: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _131: anchor_lang::error::ErrorOrigin;
    let mut _132: anchor_lang::error::Source;
    let mut _133: std::option::Option<anchor_lang::error::ComparedValues>;
    let _134: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _135: &state::reserve::ReserveLiquidity;
    let mut _137: &state::reserve::ReserveLiquidity;
    let mut _139: u64;
    let mut _141: u64;
    let mut _143: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _144: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _145: ();
    let mut _146: bool;
    let mut _147: u64;
    let mut _148: bool;
    let mut _149: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _150: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _151: !;
    let _152: ();
    let mut _153: &str;
    let _154: &str;
    let mut _155: &std::string::String;
    let _156: &std::string::String;
    let _157: std::string::String;
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let mut _161: &[&str; 2];
    let _162: &[&str; 2];
    let _163: [&str; 2];
    let mut _164: &[core::fmt::rt::Argument<'_>];
    let mut _165: &[core::fmt::rt::Argument<'_>; 2];
    let _166: &[core::fmt::rt::Argument<'_>; 2];
    let _167: [core::fmt::rt::Argument<'_>; 2];
    let mut _168: core::fmt::rt::Argument<'_>;
    let mut _169: &utils::fraction::FractionDisplay<'_>;
    let _170: &utils::fraction::FractionDisplay<'_>;
    let _171: utils::fraction::FractionDisplay<'_>;
    let mut _172: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _173: core::fmt::rt::Argument<'_>;
    let mut _174: &u64;
    let _175: &u64;
    let mut _176: anchor_lang::error::Error;
    let mut _177: anchor_lang::error::AnchorError;
    let mut _178: std::string::String;
    let mut _179: &LendingError;
    let _180: LendingError;
    let mut _181: u32;
    let mut _182: LendingError;
    let mut _183: std::string::String;
    let mut _184: &LendingError;
    let _185: LendingError;
    let mut _186: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _187: anchor_lang::error::ErrorOrigin;
    let mut _188: anchor_lang::error::Source;
    let mut _189: std::option::Option<anchor_lang::error::ComparedValues>;
    let _190: ();
    let mut _191: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _192: std::result::Result<(), anchor_lang::error::Error>;
    let mut _193: &state::obligation::Obligation;
    let mut _194: u64;
    let mut _195: isize;
    let mut _197: !;
    let mut _198: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _201: &state::obligation::Obligation;
    let _202: ();
    let mut _203: bool;
    let mut _204: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _205: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _206: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _207: !;
    let _208: ();
    let mut _209: &str;
    let _210: &str;
    let mut _211: anchor_lang::error::Error;
    let mut _212: anchor_lang::error::AnchorError;
    let mut _213: std::string::String;
    let mut _214: &LendingError;
    let _215: LendingError;
    let mut _216: u32;
    let mut _217: LendingError;
    let mut _218: std::string::String;
    let mut _219: &LendingError;
    let _220: LendingError;
    let mut _221: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _222: anchor_lang::error::ErrorOrigin;
    let mut _223: anchor_lang::error::Source;
    let mut _224: std::option::Option<anchor_lang::error::ComparedValues>;
    let _225: ();
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _227: std::result::Result<(), anchor_lang::error::Error>;
    let mut _228: &state::obligation::Obligation;
    let mut _229: &state::reserve::Reserve;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _235: ();
    let mut _236: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _237: std::result::Result<(), anchor_lang::error::Error>;
    let mut _238: &state::lending_market::LendingMarket;
    let mut _239: &state::obligation::Obligation;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _245: ();
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _247: std::result::Result<(), anchor_lang::error::Error>;
    let mut _248: &state::obligation::Obligation;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _255: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _256: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _257: ();
    let mut _258: bool;
    let mut _259: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _260: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _261: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _262: !;
    let _263: ();
    let mut _264: &str;
    let _265: &str;
    let mut _266: anchor_lang::error::Error;
    let mut _267: anchor_lang::error::AnchorError;
    let mut _268: std::string::String;
    let mut _269: &LendingError;
    let _270: LendingError;
    let mut _271: u32;
    let mut _272: LendingError;
    let mut _273: std::string::String;
    let mut _274: &LendingError;
    let _275: LendingError;
    let mut _276: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _277: anchor_lang::error::ErrorOrigin;
    let mut _278: anchor_lang::error::Source;
    let mut _279: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _284: state::types::CalculateBorrowResult;
    let mut _285: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::CalculateBorrowResult>;
    let mut _286: std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error>;
    let mut _287: &state::reserve::Reserve;
    let mut _288: u64;
    let mut _289: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _290: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _291: u16;
    let mut _292: bool;
    let mut _293: u8;
    let mut _294: bool;
    let mut _295: &std::option::Option<std::cell::RefMut<'_, state::referral::ReferrerTokenState>>;
    let mut _296: isize;
    let mut _298: !;
    let mut _299: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _302: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _303: ();
    let mut _304: &str;
    let _305: &str;
    let mut _306: &std::string::String;
    let _307: &std::string::String;
    let _308: std::string::String;
    let mut _310: std::fmt::Arguments<'_>;
    let mut _311: &[&str];
    let mut _312: &[&str; 2];
    let _313: &[&str; 2];
    let _314: [&str; 2];
    let mut _315: &[core::fmt::rt::Argument<'_>];
    let mut _316: &[core::fmt::rt::Argument<'_>; 2];
    let _317: &[core::fmt::rt::Argument<'_>; 2];
    let _318: [core::fmt::rt::Argument<'_>; 2];
    let mut _319: core::fmt::rt::Argument<'_>;
    let mut _320: &u64;
    let _321: &u64;
    let mut _322: core::fmt::rt::Argument<'_>;
    let mut _323: &u64;
    let _324: &u64;
    let _325: ();
    let mut _326: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>>;
    let mut _327: std::result::Result<(), LendingError>;
    let mut _328: &mut state::reserve::WithdrawalCaps;
    let mut _329: &mut state::reserve::WithdrawalCaps;
    let mut _330: u64;
    let mut _331: u64;
    let mut _332: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _333: i64;
    let mut _334: isize;
    let mut _336: !;
    let mut _337: std::result::Result<std::convert::Infallible, LendingError>;
    let _339: ();
    let mut _340: bool;
    let mut _341: u64;
    let mut _342: !;
    let _343: ();
    let mut _344: &str;
    let _345: &str;
    let mut _346: anchor_lang::error::Error;
    let mut _347: anchor_lang::error::AnchorError;
    let mut _348: std::string::String;
    let mut _349: &LendingError;
    let _350: LendingError;
    let mut _351: u32;
    let mut _352: LendingError;
    let mut _353: std::string::String;
    let mut _354: &LendingError;
    let _355: LendingError;
    let mut _356: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _357: anchor_lang::error::ErrorOrigin;
    let mut _358: anchor_lang::error::Source;
    let mut _359: std::option::Option<anchor_lang::error::ComparedValues>;
    let _360: ();
    let mut _361: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _362: std::result::Result<(), anchor_lang::error::Error>;
    let mut _363: &mut state::reserve::ReserveLiquidity;
    let mut _364: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _365: isize;
    let mut _367: !;
    let mut _368: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _370: ();
    let mut _371: &mut state::last_update::LastUpdate;
    let mut _373: state::reserve::BigFractionBytes;
    let mut _377: (&mut state::obligation::ObligationLiquidity, usize);
    let mut _378: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&mut state::obligation::ObligationLiquidity, usize)>;
    let mut _379: std::result::Result<(&mut state::obligation::ObligationLiquidity, usize), anchor_lang::error::Error>;
    let mut _380: &mut state::obligation::Obligation;
    let mut _381: anchor_lang::prelude::Pubkey;
    let mut _382: utils::fraction::BigFraction;
    let mut _383: state::reserve::AssetTier;
    let mut _384: &state::reserve::ReserveConfig;
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _390: ();
    let mut _391: &mut state::obligation::ObligationLiquidity;
    let mut _392: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _393: ();
    let mut _394: isize;
    let mut _396: bool;
    let mut _397: u16;
    let _398: ();
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _400: std::result::Result<(), anchor_lang::error::Error>;
    let mut _401: &mut state::reserve::Reserve;
    let mut _402: &mut state::referral::ReferrerTokenState;
    let mut _403: &mut state::referral::ReferrerTokenState;
    let mut _404: &mut std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _405: &mut std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _406: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _407: u64;
    let mut _408: isize;
    let mut _410: !;
    let mut _411: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _413: u64;
    let mut _414: (u64, bool);
    let _415: ();
    let mut _416: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _417: std::result::Result<(), anchor_lang::error::Error>;
    let mut _418: &mut state::obligation::Obligation;
    let mut _419: isize;
    let mut _421: !;
    let mut _422: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _424: ();
    let mut _425: &mut state::last_update::LastUpdate;
    let mut _427: &state::reserve::ReserveLiquidity;
    let _429: ();
    let mut _430: bool;
    let mut _431: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _432: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _433: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _434: u8;
    let mut _435: bool;
    let mut _436: u8;
    let mut _437: !;
    let _438: ();
    let mut _439: &str;
    let _440: &str;
    let mut _441: &std::string::String;
    let _442: &std::string::String;
    let _443: std::string::String;
    let mut _445: std::fmt::Arguments<'_>;
    let mut _446: &[&str];
    let mut _447: &[&str; 3];
    let _448: &[&str; 3];
    let _449: [&str; 3];
    let mut _450: &[core::fmt::rt::Argument<'_>];
    let mut _451: &[core::fmt::rt::Argument<'_>; 3];
    let _452: &[core::fmt::rt::Argument<'_>; 3];
    let _453: [core::fmt::rt::Argument<'_>; 3];
    let mut _454: core::fmt::rt::Argument<'_>;
    let mut _455: &utils::fraction::FractionDisplay<'_>;
    let _456: &utils::fraction::FractionDisplay<'_>;
    let _457: utils::fraction::FractionDisplay<'_>;
    let mut _458: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _459: core::fmt::rt::Argument<'_>;
    let mut _460: &utils::fraction::FractionDisplay<'_>;
    let _461: &utils::fraction::FractionDisplay<'_>;
    let _462: utils::fraction::FractionDisplay<'_>;
    let mut _463: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _464: core::fmt::rt::Argument<'_>;
    let mut _465: &u8;
    let _466: &u8;
    let mut _467: anchor_lang::error::Error;
    let mut _468: anchor_lang::error::AnchorError;
    let mut _469: std::string::String;
    let mut _470: &LendingError;
    let _471: LendingError;
    let mut _472: u32;
    let mut _473: LendingError;
    let mut _474: std::string::String;
    let mut _475: &LendingError;
    let _476: LendingError;
    let mut _477: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _478: anchor_lang::error::ErrorOrigin;
    let mut _479: anchor_lang::error::Source;
    let mut _480: std::option::Option<anchor_lang::error::ComparedValues>;
    let _481: ();
    let mut _482: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _483: std::result::Result<(), anchor_lang::error::Error>;
    let mut _484: &state::obligation::Obligation;
    let mut _485: isize;
    let mut _487: !;
    let mut _488: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _491: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&state::lending_market::ElevationGroup>>;
    let mut _492: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _493: &state::lending_market::LendingMarket;
    let mut _494: u8;
    let mut _495: isize;
    let mut _497: !;
    let mut _498: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _500: ();
    let mut _501: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _502: std::result::Result<(), anchor_lang::error::Error>;
    let mut _503: u64;
    let mut _504: &mut state::obligation::Obligation;
    let mut _505: usize;
    let mut _506: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _507: &anchor_lang::prelude::Pubkey;
    let _508: &anchor_lang::prelude::Pubkey;
    let mut _509: &mut state::reserve::Reserve;
    let mut _510: impl Iterator<Item = T>;
    let mut _511: isize;
    let mut _513: !;
    let mut _514: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _516: ();
    let mut _517: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _518: std::result::Result<(), anchor_lang::error::Error>;
    let mut _519: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _520: &state::obligation::Obligation;
    let mut _521: &state::reserve::Reserve;
    let mut _522: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _523: u128;
    let _524: usize;
    let mut _525: usize;
    let mut _526: bool;
    let mut _527: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _528: u128;
    let mut _529: isize;
    let mut _531: !;
    let mut _532: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _534: state::types::CalculateBorrowResult;
    let mut _535: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _536: u64;
    let mut _537: u64;
    let mut _538: u64;
    let mut _539: &LendingError;
    let mut _540: &LendingError;
    let mut _541: &LendingError;
    let mut _542: &LendingError;
    let mut _543: &[&str; 1];
    let mut _544: &LendingError;
    let mut _545: &LendingError;
    let mut _546: &LendingError;
    let mut _547: &LendingError;
    let mut _563: bool;
    let mut _564: bool;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    scope 1 {
        debug residual => _37;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _40;
        scope 4 {
        }
    }
    scope 5 {
        debug res => _48;
    }
    scope 6 {
    }
    scope 7 {
        debug residual => _112;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _115;
        scope 10 {
        }
    }
    scope 11 {
        debug current_utilization => _134;
        let _136: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 12 {
            debug reserve_liquidity_borrowed_f => _136;
            let _138: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 13 {
                debug liquidity_amount_f => _138;
                let _140: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 14 {
                    debug borrow_limit_f => _140;
                    let _142: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 15 {
                        debug new_borrowed_amount_f => _142;
                        let _158: std::string::String;
                        let _196: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _199: ();
                        let _200: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        let mut _548: &LendingError;
                        let mut _549: &LendingError;
                        let mut _550: &[&str; 2];
                        scope 16 {
                            debug res => _158;
                        }
                        scope 17 {
                            debug residual => _196;
                            scope 18 {
                            }
                        }
                        scope 19 {
                            debug val => _199;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug remaining_borrow_value => _200;
                            let _231: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _234: ();
                            let _241: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _244: ();
                            let _250: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _253: ();
                            let _254: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                            let mut _551: &LendingError;
                            let mut _552: &LendingError;
                            let mut _562: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                            scope 22 {
                                debug residual => _231;
                                scope 23 {
                                }
                            }
                            scope 24 {
                                debug val => _234;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug residual => _241;
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug val => _244;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug residual => _250;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug val => _253;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug remaining_reserve_capacity => _254;
                                let _280: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                let _281: u64;
                                let _282: u64;
                                let _283: u64;
                                let _297: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _300: state::types::CalculateBorrowResult;
                                let mut _553: &LendingError;
                                let mut _554: &LendingError;
                                let mut _561: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                scope 35 {
                                    debug borrow_amount_f => _280;
                                    debug receive_amount => _281;
                                    debug borrow_fee => _282;
                                    debug referrer_fee => _283;
                                    let _301: u64;
                                    scope 40 {
                                        debug borrow_amount => _301;
                                        let _309: std::string::String;
                                        let _335: std::result::Result<std::convert::Infallible, LendingError>;
                                        let _338: ();
                                        let _366: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _369: ();
                                        let _372: utils::fraction::BigFraction;
                                        let mut _555: &LendingError;
                                        let mut _556: &LendingError;
                                        let mut _560: &[&str; 2];
                                        scope 41 {
                                            debug res => _309;
                                        }
                                        scope 42 {
                                            debug residual => _335;
                                            scope 43 {
                                            }
                                        }
                                        scope 44 {
                                            debug val => _338;
                                            scope 45 {
                                            }
                                        }
                                        scope 46 {
                                            debug residual => _366;
                                            scope 47 {
                                            }
                                        }
                                        scope 48 {
                                            debug val => _369;
                                            scope 49 {
                                            }
                                        }
                                        scope 50 {
                                            debug cumulative_borrow_rate_bf => _372;
                                            let _374: usize;
                                            let _375: &mut state::obligation::ObligationLiquidity;
                                            let _376: usize;
                                            let _386: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _389: (&mut state::obligation::ObligationLiquidity, usize);
                                            scope 51 {
                                                debug borrow_index => _374;
                                                let _420: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _423: ();
                                                let _426: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                scope 57 {
                                                    debug referrer_token_state => _395;
                                                    let mut _395: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
                                                    let _409: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _412: ();
                                                    scope 58 {
                                                        debug residual => _409;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug val => _412;
                                                        scope 61 {
                                                        }
                                                    }
                                                }
                                                scope 62 {
                                                    debug residual => _420;
                                                    scope 63 {
                                                    }
                                                }
                                                scope 64 {
                                                    debug val => _423;
                                                    scope 65 {
                                                    }
                                                }
                                                scope 66 {
                                                    debug new_utilization_rate => _426;
                                                    let _428: u8;
                                                    scope 67 {
                                                        debug utilization_limit => _428;
                                                        let _444: std::string::String;
                                                        let _486: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _489: ();
                                                        let _490: std::option::Option<&state::lending_market::ElevationGroup>;
                                                        let _496: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _499: std::option::Option<&state::lending_market::ElevationGroup>;
                                                        let mut _557: &LendingError;
                                                        let mut _558: &LendingError;
                                                        let mut _559: &[&str; 3];
                                                        scope 68 {
                                                            debug res => _444;
                                                        }
                                                        scope 69 {
                                                            debug residual => _486;
                                                            scope 70 {
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug val => _489;
                                                            scope 72 {
                                                            }
                                                        }
                                                        scope 73 {
                                                            debug elevation_group => _490;
                                                            let _512: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _515: ();
                                                            let _530: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _533: ();
                                                            scope 78 {
                                                                debug residual => _512;
                                                                scope 79 {
                                                                }
                                                            }
                                                            scope 80 {
                                                                debug val => _515;
                                                                scope 81 {
                                                                }
                                                            }
                                                            scope 82 {
                                                                debug residual => _530;
                                                                scope 83 {
                                                                }
                                                            }
                                                            scope 84 {
                                                                debug val => _533;
                                                                scope 85 {
                                                                }
                                                            }
                                                        }
                                                        scope 74 {
                                                            debug residual => _496;
                                                            scope 75 {
                                                            }
                                                        }
                                                        scope 76 {
                                                            debug val => _499;
                                                            scope 77 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug obligation_liquidity => _375;
                                                debug borrow_index => _376;
                                            }
                                            scope 53 {
                                                debug residual => _386;
                                                scope 54 {
                                                }
                                            }
                                            scope 55 {
                                                debug val => _389;
                                                scope 56 {
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 36 {
                                    debug residual => _297;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => _300;
                                    scope 39 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _564 = const false;
        _563 = const false;
        _563 = const true;
        _564 = const true;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _4;
        _10 = Eq(move _11, const 0_u64);
        switchInt(move _10) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_11);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = const "Liquidity amount provided cannot be zero";
        _14 = &(*_15);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb2, unwind: bb267];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _540 = const _;
        _19 = &(*_540);
        _18 = LendingError::name(move _19) -> [return: bb3, unwind: bb267];
    }

    bb3: {
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = LendingError::InvalidAmount;
        _21 = <LendingError as Into<u32>>::into(move _22) -> [return: bb4, unwind: bb240];
    }

    bb4: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _539 = const _;
        _24 = &(*_539);
        _23 = <LendingError as ToString>::to_string(move _24) -> [return: bb5, unwind: bb240];
    }

    bb5: {
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 185_u32 };
        _27 = anchor_lang::error::ErrorOrigin::Source(move _28);
        StorageDead(_28);
        _26 = std::option::Option::<ErrorOrigin>::Some(move _27);
        StorageDead(_27);
        StorageLive(_29);
        _29 = std::option::Option::<ComparedValues>::None;
        _17 = anchor_lang::error::AnchorError { error_name: move _18, error_code_number: move _21, error_msg: move _23, error_origin: move _26, compared_values: move _29 };
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_18);
        _16 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _17) -> [return: bb6, unwind: bb267];
    }

    bb6: {
        StorageDead(_17);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _16);
        StorageDead(_16);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb248;
    }

    bb7: {
        StorageDead(_11);
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_2).1: state::last_update::LastUpdate);
        StorageLive(_35);
        _35 = ((*_5).0: u64);
        _33 = last_update::LastUpdate::is_stale(move _34, move _35, const _) -> [return: bb8, unwind: bb267];
    }

    bb8: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _33) -> [return: bb9, unwind: bb267];
    }

    bb9: {
        StorageDead(_33);
        _36 = discriminant(_32);
        switchInt(move _36) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_40);
        _40 = ((_32 as Continue).0: bool);
        _31 = _40;
        StorageDead(_40);
        switchInt(move _31) -> [0: bb244, otherwise: bb243];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_37);
        _37 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _39) -> [return: bb13, unwind: bb265];
    }

    bb13: {
        StorageDead(_39);
        StorageDead(_37);
        _627 = discriminant(_32);
        StorageDead(_32);
        goto -> bb224;
    }

    bb14: {
        StorageDead(_62);
        _60 = &(_61.0: u8);
        _59 = &(*_60);
        _58 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _59) -> [return: bb15, unwind: bb267];
    }

    bb15: {
        StorageDead(_59);
        _57 = [move _58];
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = move _55 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_55);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_69);
        _69 = core::fmt::rt::Count::Implied;
        StorageLive(_70);
        _70 = core::fmt::rt::Count::Is(const 8_usize);
        _67 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _68, const 8_u32, move _69, move _70) -> [return: bb16, unwind: bb267];
    }

    bb16: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        _66 = [move _67];
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = move _64 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_64);
        StorageLive(_71);
        _71 = core::fmt::rt::UnsafeArg::new() -> [return: bb17, unwind: bb267];
    }

    bb17: {
        _49 = Arguments::<'_>::new_v1_formatted(move _50, move _54, move _63, move _71) -> [return: bb18, unwind: bb267];
    }

    bb18: {
        StorageDead(_71);
        StorageDead(_63);
        StorageDead(_54);
        StorageDead(_50);
        _48 = format(move _49) -> [return: bb19, unwind: bb267];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_52);
        _47 = move _48;
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = <std::string::String as Deref>::deref(move _45) -> [return: bb20, unwind: bb239];
    }

    bb20: {
        _43 = &(*_44);
        StorageDead(_45);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb21, unwind: bb239];
    }

    bb21: {
        StorageDead(_43);
        drop(_47) -> [return: bb22, unwind: bb267];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _542 = const _;
        _75 = &(*_542);
        _74 = LendingError::name(move _75) -> [return: bb23, unwind: bb267];
    }

    bb23: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _78 = LendingError::ReserveStale;
        _77 = <LendingError as Into<u32>>::into(move _78) -> [return: bb24, unwind: bb238];
    }

    bb24: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        _541 = const _;
        _80 = &(*_541);
        _79 = <LendingError as ToString>::to_string(move _80) -> [return: bb25, unwind: bb238];
    }

    bb25: {
        StorageDead(_80);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 196_u32 };
        _83 = anchor_lang::error::ErrorOrigin::Source(move _84);
        StorageDead(_84);
        _82 = std::option::Option::<ErrorOrigin>::Some(move _83);
        StorageDead(_83);
        StorageLive(_85);
        _85 = std::option::Option::<ComparedValues>::None;
        _73 = anchor_lang::error::AnchorError { error_name: move _74, error_code_number: move _77, error_msg: move _79, error_origin: move _82, compared_values: move _85 };
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_74);
        _72 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _73) -> [return: bb26, unwind: bb267];
    }

    bb26: {
        StorageDead(_73);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _72);
        StorageDead(_72);
        goto -> bb224;
    }

    bb27: {
        switchInt(move _87) -> [0: bb34, otherwise: bb28];
    }

    bb28: {
        StorageDead(_88);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = const "Borrowing is disabled";
        _91 = &(*_92);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb29, unwind: bb267];
    }

    bb29: {
        StorageDead(_91);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _545 = const _;
        _96 = &(*_545);
        _95 = LendingError::name(move _96) -> [return: bb30, unwind: bb267];
    }

    bb30: {
        StorageDead(_96);
        StorageLive(_98);
        StorageLive(_99);
        _99 = LendingError::BorrowingDisabled;
        _98 = <LendingError as Into<u32>>::into(move _99) -> [return: bb31, unwind: bb237];
    }

    bb31: {
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        _544 = const _;
        _101 = &(*_544);
        _100 = <LendingError as ToString>::to_string(move _101) -> [return: bb32, unwind: bb237];
    }

    bb32: {
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 201_u32 };
        _104 = anchor_lang::error::ErrorOrigin::Source(move _105);
        StorageDead(_105);
        _103 = std::option::Option::<ErrorOrigin>::Some(move _104);
        StorageDead(_104);
        StorageLive(_106);
        _106 = std::option::Option::<ComparedValues>::None;
        _94 = anchor_lang::error::AnchorError { error_name: move _95, error_code_number: move _98, error_msg: move _100, error_origin: move _103, compared_values: move _106 };
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_95);
        _93 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _94) -> [return: bb33, unwind: bb267];
    }

    bb33: {
        StorageDead(_94);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _93);
        StorageDead(_93);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb248;
    }

    bb34: {
        StorageDead(_88);
        _86 = const ();
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_3);
        _109 = obligation::Obligation::check_not_marked_for_deleveraging(move _110) -> [return: bb35, unwind: bb267];
    }

    bb35: {
        StorageDead(_110);
        _108 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _109) -> [return: bb36, unwind: bb267];
    }

    bb36: {
        StorageDead(_109);
        _111 = discriminant(_108);
        switchInt(move _111) -> [0: bb37, 1: bb38, otherwise: bb11];
    }

    bb37: {
        StorageLive(_115);
        _115 = ((_108 as Continue).0: ());
        _107 = _115;
        StorageDead(_115);
        _569 = discriminant(_108);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &(*_3);
        _117 = obligation::Obligation::has_obsolete_reserves(move _118) -> [return: bb40, unwind: bb267];
    }

    bb38: {
        StorageLive(_112);
        _112 = move ((_108 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_114);
        _114 = move _112;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _114) -> [return: bb39, unwind: bb264];
    }

    bb39: {
        StorageDead(_114);
        StorageDead(_112);
        _625 = discriminant(_108);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb248;
    }

    bb40: {
        switchInt(move _117) -> [0: bb46, otherwise: bb41];
    }

    bb41: {
        StorageDead(_118);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _547 = const _;
        _123 = &(*_547);
        _122 = LendingError::name(move _123) -> [return: bb42, unwind: bb267];
    }

    bb42: {
        StorageDead(_123);
        StorageLive(_125);
        StorageLive(_126);
        _126 = LendingError::ObligationInObsoleteReserve;
        _125 = <LendingError as Into<u32>>::into(move _126) -> [return: bb43, unwind: bb236];
    }

    bb43: {
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _546 = const _;
        _128 = &(*_546);
        _127 = <LendingError as ToString>::to_string(move _128) -> [return: bb44, unwind: bb236];
    }

    bb44: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 210_u32 };
        _131 = anchor_lang::error::ErrorOrigin::Source(move _132);
        StorageDead(_132);
        _130 = std::option::Option::<ErrorOrigin>::Some(move _131);
        StorageDead(_131);
        StorageLive(_133);
        _133 = std::option::Option::<ComparedValues>::None;
        _121 = anchor_lang::error::AnchorError { error_name: move _122, error_code_number: move _125, error_msg: move _127, error_origin: move _130, compared_values: move _133 };
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_122);
        _120 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _121) -> [return: bb45, unwind: bb267];
    }

    bb45: {
        StorageDead(_121);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _120);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb248;
    }

    bb46: {
        StorageDead(_118);
        _116 = const ();
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &((*_2).5: state::reserve::ReserveLiquidity);
        _134 = ReserveLiquidity::utilization_rate(move _135) -> [return: bb47, unwind: bb267];
    }

    bb47: {
        StorageDead(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &((*_2).5: state::reserve::ReserveLiquidity);
        _136 = ReserveLiquidity::total_borrow(move _137) -> [return: bb48, unwind: bb267];
    }

    bb48: {
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _4;
        _138 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _139) -> [return: bb49, unwind: bb267];
    }

    bb49: {
        StorageDead(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = (((*_2).9: state::reserve::ReserveConfig).18: u64);
        _140 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _141) -> [return: bb50, unwind: bb267];
    }

    bb50: {
        StorageDead(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _138;
        StorageLive(_144);
        _144 = _136;
        _142 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _143, move _144) -> [return: bb51, unwind: bb267];
    }

    bb51: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _4;
        _146 = Ne(move _147, const _);
        switchInt(move _146) -> [0: bb68, otherwise: bb52];
    }

    bb52: {
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_142;
        StorageLive(_150);
        _150 = &_140;
        _148 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _149, move _150) -> [return: bb53, unwind: bb267];
    }

    bb53: {
        switchInt(move _148) -> [0: bb67, otherwise: bb54];
    }

    bb54: {
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _550 = const _;
        _162 = &(*_550);
        _161 = &(*_162);
        _160 = move _161 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_161);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_142;
        _171 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _172) -> [return: bb55, unwind: bb267];
    }

    bb55: {
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _169) -> [return: bb56, unwind: bb267];
    }

    bb56: {
        StorageDead(_169);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(((*_2).9: state::reserve::ReserveConfig).18: u64);
        _174 = &(*_175);
        _173 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _174) -> [return: bb57, unwind: bb267];
    }

    bb57: {
        StorageDead(_174);
        _167 = [move _168, move _173];
        StorageDead(_173);
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = move _165 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_165);
        _159 = Arguments::<'_>::new_v1(move _160, move _164) -> [return: bb58, unwind: bb267];
    }

    bb58: {
        StorageDead(_164);
        StorageDead(_160);
        _158 = format(move _159) -> [return: bb59, unwind: bb267];
    }

    bb59: {
        StorageDead(_159);
        StorageDead(_175);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_162);
        _157 = move _158;
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = <std::string::String as Deref>::deref(move _155) -> [return: bb60, unwind: bb235];
    }

    bb60: {
        _153 = &(*_154);
        StorageDead(_155);
        _152 = solana_program::log::sol_log(move _153) -> [return: bb61, unwind: bb235];
    }

    bb61: {
        StorageDead(_153);
        drop(_157) -> [return: bb62, unwind: bb267];
    }

    bb62: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _549 = const _;
        _179 = &(*_549);
        _178 = LendingError::name(move _179) -> [return: bb63, unwind: bb267];
    }

    bb63: {
        StorageDead(_179);
        StorageLive(_181);
        StorageLive(_182);
        _182 = LendingError::BorrowLimitExceeded;
        _181 = <LendingError as Into<u32>>::into(move _182) -> [return: bb64, unwind: bb234];
    }

    bb64: {
        StorageDead(_182);
        StorageLive(_183);
        StorageLive(_184);
        _548 = const _;
        _184 = &(*_548);
        _183 = <LendingError as ToString>::to_string(move _184) -> [return: bb65, unwind: bb234];
    }

    bb65: {
        StorageDead(_184);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 227_u32 };
        _187 = anchor_lang::error::ErrorOrigin::Source(move _188);
        StorageDead(_188);
        _186 = std::option::Option::<ErrorOrigin>::Some(move _187);
        StorageDead(_187);
        StorageLive(_189);
        _189 = std::option::Option::<ComparedValues>::None;
        _177 = anchor_lang::error::AnchorError { error_name: move _178, error_code_number: move _181, error_msg: move _183, error_origin: move _186, compared_values: move _189 };
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_178);
        _176 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _177) -> [return: bb66, unwind: bb267];
    }

    bb66: {
        StorageDead(_177);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _176);
        StorageDead(_176);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb223;
    }

    bb67: {
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb69;
    }

    bb68: {
        StorageDead(_147);
        goto -> bb69;
    }

    bb69: {
        _145 = const ();
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &(*_3);
        StorageLive(_194);
        _194 = ((*_5).0: u64);
        _192 = check_obligation_fully_refreshed_and_not_null(move _193, move _194) -> [return: bb70, unwind: bb267];
    }

    bb70: {
        StorageDead(_194);
        StorageDead(_193);
        _191 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _192) -> [return: bb71, unwind: bb267];
    }

    bb71: {
        StorageDead(_192);
        _195 = discriminant(_191);
        switchInt(move _195) -> [0: bb72, 1: bb73, otherwise: bb11];
    }

    bb72: {
        StorageLive(_199);
        _199 = ((_191 as Continue).0: ());
        _190 = _199;
        StorageDead(_199);
        _571 = discriminant(_191);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &(*_3);
        _200 = obligation::Obligation::remaining_borrow_value(move _201) -> [return: bb75, unwind: bb267];
    }

    bb73: {
        StorageLive(_196);
        _196 = move ((_191 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_198);
        _198 = move _196;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _198) -> [return: bb74, unwind: bb263];
    }

    bb74: {
        StorageDead(_198);
        StorageDead(_196);
        _623 = discriminant(_191);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb223;
    }

    bb75: {
        StorageDead(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_200;
        StorageLive(_205);
        _562 = const _;
        _205 = &(*_562);
        _203 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _204, move _205) -> [return: bb76, unwind: bb267];
    }

    bb76: {
        switchInt(move _203) -> [0: bb83, otherwise: bb77];
    }

    bb77: {
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = const "Remaining borrow value is zero";
        _209 = &(*_210);
        _208 = solana_program::log::sol_log(move _209) -> [return: bb78, unwind: bb267];
    }

    bb78: {
        StorageDead(_209);
        StorageDead(_210);
        StorageDead(_208);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _552 = const _;
        _214 = &(*_552);
        _213 = LendingError::name(move _214) -> [return: bb79, unwind: bb267];
    }

    bb79: {
        StorageDead(_214);
        StorageLive(_216);
        StorageLive(_217);
        _217 = LendingError::BorrowTooLarge;
        _216 = <LendingError as Into<u32>>::into(move _217) -> [return: bb80, unwind: bb233];
    }

    bb80: {
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        _551 = const _;
        _219 = &(*_551);
        _218 = <LendingError as ToString>::to_string(move _219) -> [return: bb81, unwind: bb233];
    }

    bb81: {
        StorageDead(_219);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 234_u32 };
        _222 = anchor_lang::error::ErrorOrigin::Source(move _223);
        StorageDead(_223);
        _221 = std::option::Option::<ErrorOrigin>::Some(move _222);
        StorageDead(_222);
        StorageLive(_224);
        _224 = std::option::Option::<ComparedValues>::None;
        _212 = anchor_lang::error::AnchorError { error_name: move _213, error_code_number: move _216, error_msg: move _218, error_origin: move _221, compared_values: move _224 };
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_213);
        _211 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _212) -> [return: bb82, unwind: bb267];
    }

    bb82: {
        StorageDead(_212);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _211);
        StorageDead(_211);
        StorageDead(_203);
        StorageDead(_202);
        goto -> bb222;
    }

    bb83: {
        StorageDead(_205);
        StorageDead(_204);
        _202 = const ();
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &(*_3);
        StorageLive(_229);
        _229 = &(*_2);
        _227 = check_same_elevation_group(move _228, move _229) -> [return: bb84, unwind: bb267];
    }

    bb84: {
        StorageDead(_229);
        StorageDead(_228);
        _226 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _227) -> [return: bb85, unwind: bb267];
    }

    bb85: {
        StorageDead(_227);
        _230 = discriminant(_226);
        switchInt(move _230) -> [0: bb86, 1: bb87, otherwise: bb11];
    }

    bb86: {
        StorageLive(_234);
        _234 = ((_226 as Continue).0: ());
        _225 = _234;
        StorageDead(_234);
        _573 = discriminant(_226);
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &(*_1);
        StorageLive(_239);
        _239 = &(*_3);
        _237 = check_elevation_group_borrowing_enabled(move _238, move _239) -> [return: bb89, unwind: bb267];
    }

    bb87: {
        StorageLive(_231);
        _231 = move ((_226 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_233);
        _233 = move _231;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _233) -> [return: bb88, unwind: bb262];
    }

    bb88: {
        StorageDead(_233);
        StorageDead(_231);
        _621 = discriminant(_226);
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb222;
    }

    bb89: {
        StorageDead(_239);
        StorageDead(_238);
        _236 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _237) -> [return: bb90, unwind: bb267];
    }

    bb90: {
        StorageDead(_237);
        _240 = discriminant(_236);
        switchInt(move _240) -> [0: bb91, 1: bb92, otherwise: bb11];
    }

    bb91: {
        StorageLive(_244);
        _244 = ((_236 as Continue).0: ());
        _235 = _244;
        StorageDead(_244);
        _575 = discriminant(_236);
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &(*_3);
        _247 = check_non_elevation_group_borrowing_enabled(move _248) -> [return: bb94, unwind: bb267];
    }

    bb92: {
        StorageLive(_241);
        _241 = move ((_236 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_243);
        _243 = move _241;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _243) -> [return: bb93, unwind: bb261];
    }

    bb93: {
        StorageDead(_243);
        StorageDead(_241);
        _619 = discriminant(_236);
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb222;
    }

    bb94: {
        StorageDead(_248);
        _246 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _247) -> [return: bb95, unwind: bb267];
    }

    bb95: {
        StorageDead(_247);
        _249 = discriminant(_246);
        switchInt(move _249) -> [0: bb96, 1: bb97, otherwise: bb11];
    }

    bb96: {
        StorageLive(_253);
        _253 = ((_246 as Continue).0: ());
        _245 = _253;
        StorageDead(_253);
        _577 = discriminant(_246);
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_254);
        StorageLive(_255);
        _255 = _140;
        StorageLive(_256);
        _256 = _136;
        _254 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::saturating_sub(move _255, move _256) -> [return: bb99, unwind: bb267];
    }

    bb97: {
        StorageLive(_250);
        _250 = move ((_246 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_252);
        _252 = move _250;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _252) -> [return: bb98, unwind: bb260];
    }

    bb98: {
        StorageDead(_252);
        StorageDead(_250);
        _617 = discriminant(_246);
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb222;
    }

    bb99: {
        StorageDead(_256);
        StorageDead(_255);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &_254;
        StorageLive(_260);
        _561 = const _;
        _260 = &(*_561);
        _258 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _259, move _260) -> [return: bb100, unwind: bb267];
    }

    bb100: {
        switchInt(move _258) -> [0: bb107, otherwise: bb101];
    }

    bb101: {
        StorageDead(_260);
        StorageDead(_259);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = const "Borrow reserve is at full capacity";
        _264 = &(*_265);
        _263 = solana_program::log::sol_log(move _264) -> [return: bb102, unwind: bb267];
    }

    bb102: {
        StorageDead(_264);
        StorageDead(_265);
        StorageDead(_263);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _554 = const _;
        _269 = &(*_554);
        _268 = LendingError::name(move _269) -> [return: bb103, unwind: bb267];
    }

    bb103: {
        StorageDead(_269);
        StorageLive(_271);
        StorageLive(_272);
        _272 = LendingError::BorrowLimitExceeded;
        _271 = <LendingError as Into<u32>>::into(move _272) -> [return: bb104, unwind: bb232];
    }

    bb104: {
        StorageDead(_272);
        StorageLive(_273);
        StorageLive(_274);
        _553 = const _;
        _274 = &(*_553);
        _273 = <LendingError as ToString>::to_string(move _274) -> [return: bb105, unwind: bb232];
    }

    bb105: {
        StorageDead(_274);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 248_u32 };
        _277 = anchor_lang::error::ErrorOrigin::Source(move _278);
        StorageDead(_278);
        _276 = std::option::Option::<ErrorOrigin>::Some(move _277);
        StorageDead(_277);
        StorageLive(_279);
        _279 = std::option::Option::<ComparedValues>::None;
        _267 = anchor_lang::error::AnchorError { error_name: move _268, error_code_number: move _271, error_msg: move _273, error_origin: move _276, compared_values: move _279 };
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_268);
        _266 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _267) -> [return: bb106, unwind: bb267];
    }

    bb106: {
        StorageDead(_267);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _266);
        StorageDead(_266);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb221;
    }

    bb107: {
        StorageDead(_260);
        StorageDead(_259);
        _257 = const ();
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &(*_2);
        StorageLive(_288);
        _288 = _4;
        StorageLive(_289);
        _289 = _200;
        StorageLive(_290);
        _290 = _254;
        StorageLive(_291);
        _291 = ((*_1).5: u16);
        StorageLive(_292);
        StorageLive(_293);
        _293 = ((*_3).14: u8);
        _292 = Ne(move _293, const _);
        StorageDead(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &_7;
        _294 = std::option::Option::<RefMut<'_, referral::ReferrerTokenState>>::is_some(move _295) -> [return: bb108, unwind: bb267];
    }

    bb108: {
        StorageDead(_295);
        _286 = reserve::Reserve::calculate_borrow(move _287, move _288, move _289, move _290, move _291, move _292, move _294) -> [return: bb109, unwind: bb267];
    }

    bb109: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_287);
        _285 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as Try>::branch(move _286) -> [return: bb110, unwind: bb267];
    }

    bb110: {
        StorageDead(_286);
        _296 = discriminant(_285);
        switchInt(move _296) -> [0: bb111, 1: bb112, otherwise: bb11];
    }

    bb111: {
        StorageLive(_300);
        _300 = move ((_285 as Continue).0: state::types::CalculateBorrowResult);
        _284 = move _300;
        StorageDead(_300);
        StorageLive(_280);
        _280 = (_284.0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_281);
        _281 = (_284.1: u64);
        StorageLive(_282);
        _282 = (_284.2: u64);
        StorageLive(_283);
        _283 = (_284.3: u64);
        _579 = discriminant(_285);
        StorageDead(_285);
        StorageDead(_284);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_280;
        _301 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_ceil::<u64>(move _302) -> [return: bb114, unwind: bb267];
    }

    bb112: {
        StorageLive(_297);
        _297 = move ((_285 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_299);
        _299 = move _297;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _299) -> [return: bb113, unwind: bb259];
    }

    bb113: {
        StorageDead(_299);
        StorageDead(_297);
        _615 = discriminant(_285);
        StorageDead(_285);
        StorageDead(_284);
        goto -> bb221;
    }

    bb114: {
        StorageDead(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _560 = const _;
        _313 = &(*_560);
        _312 = &(*_313);
        _311 = move _312 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_312);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &_4;
        _320 = &(*_321);
        _319 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _320) -> [return: bb115, unwind: bb267];
    }

    bb115: {
        StorageDead(_320);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &_301;
        _323 = &(*_324);
        _322 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _323) -> [return: bb116, unwind: bb267];
    }

    bb116: {
        StorageDead(_323);
        _318 = [move _319, move _322];
        StorageDead(_322);
        StorageDead(_319);
        _317 = &_318;
        _316 = &(*_317);
        _315 = move _316 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_316);
        _310 = Arguments::<'_>::new_v1(move _311, move _315) -> [return: bb117, unwind: bb267];
    }

    bb117: {
        StorageDead(_315);
        StorageDead(_311);
        _309 = format(move _310) -> [return: bb118, unwind: bb267];
    }

    bb118: {
        StorageDead(_310);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_313);
        _308 = move _309;
        StorageDead(_309);
        _307 = &_308;
        _306 = &(*_307);
        _305 = <std::string::String as Deref>::deref(move _306) -> [return: bb119, unwind: bb231];
    }

    bb119: {
        _304 = &(*_305);
        StorageDead(_306);
        _303 = solana_program::log::sol_log(move _304) -> [return: bb120, unwind: bb231];
    }

    bb120: {
        StorageDead(_304);
        drop(_308) -> [return: bb121, unwind: bb267];
    }

    bb121: {
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_303);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &mut (((*_2).9: state::reserve::ReserveConfig).21: state::reserve::WithdrawalCaps);
        _328 = &mut (*_329);
        StorageLive(_330);
        _330 = _301;
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = ((*_5).4: i64);
        _332 = <u64 as TryFrom<i64>>::try_from(move _333) -> [return: bb122, unwind: bb267];
    }

    bb122: {
        StorageDead(_333);
        _331 = std::result::Result::<u64, TryFromIntError>::unwrap(move _332) -> [return: bb123, unwind: bb267];
    }

    bb123: {
        StorageDead(_332);
        _327 = add_to_withdrawal_accum(move _328, move _330, move _331) -> [return: bb124, unwind: bb267];
    }

    bb124: {
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_328);
        _326 = <std::result::Result<(), LendingError> as Try>::branch(move _327) -> [return: bb125, unwind: bb267];
    }

    bb125: {
        StorageDead(_327);
        _334 = discriminant(_326);
        switchInt(move _334) -> [0: bb126, 1: bb127, otherwise: bb11];
    }

    bb126: {
        StorageLive(_338);
        _338 = ((_326 as Continue).0: ());
        _325 = _338;
        StorageDead(_338);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_325);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = _281;
        _340 = Eq(move _341, const 0_u64);
        switchInt(move _340) -> [0: bb130, otherwise: bb129];
    }

    bb127: {
        StorageLive(_335);
        _335 = ((_326 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_337);
        _337 = _335;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _337) -> [return: bb128, unwind: bb267];
    }

    bb128: {
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb220;
    }

    bb129: {
        StorageDead(_341);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = const "Borrow amount is too small to receive liquidity after fees";
        _344 = &(*_345);
        _343 = solana_program::log::sol_log(move _344) -> [return: bb131, unwind: bb267];
    }

    bb130: {
        StorageDead(_341);
        _339 = const ();
        StorageDead(_340);
        StorageDead(_339);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = &mut ((*_2).5: state::reserve::ReserveLiquidity);
        StorageLive(_364);
        _364 = _280;
        _362 = ReserveLiquidity::borrow(move _363, move _364) -> [return: bb136, unwind: bb267];
    }

    bb131: {
        StorageDead(_344);
        StorageDead(_345);
        StorageDead(_343);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _556 = const _;
        _349 = &(*_556);
        _348 = LendingError::name(move _349) -> [return: bb132, unwind: bb267];
    }

    bb132: {
        StorageDead(_349);
        StorageLive(_351);
        StorageLive(_352);
        _352 = LendingError::BorrowTooSmall;
        _351 = <LendingError as Into<u32>>::into(move _352) -> [return: bb133, unwind: bb230];
    }

    bb133: {
        StorageDead(_352);
        StorageLive(_353);
        StorageLive(_354);
        _555 = const _;
        _354 = &(*_555);
        _353 = <LendingError as ToString>::to_string(move _354) -> [return: bb134, unwind: bb230];
    }

    bb134: {
        StorageDead(_354);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 276_u32 };
        _357 = anchor_lang::error::ErrorOrigin::Source(move _358);
        StorageDead(_358);
        _356 = std::option::Option::<ErrorOrigin>::Some(move _357);
        StorageDead(_357);
        StorageLive(_359);
        _359 = std::option::Option::<ComparedValues>::None;
        _347 = anchor_lang::error::AnchorError { error_name: move _348, error_code_number: move _351, error_msg: move _353, error_origin: move _356, compared_values: move _359 };
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_348);
        _346 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _347) -> [return: bb135, unwind: bb267];
    }

    bb135: {
        StorageDead(_347);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _346);
        StorageDead(_346);
        StorageDead(_340);
        StorageDead(_339);
        goto -> bb220;
    }

    bb136: {
        StorageDead(_364);
        StorageDead(_363);
        _361 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _362) -> [return: bb137, unwind: bb267];
    }

    bb137: {
        StorageDead(_362);
        _365 = discriminant(_361);
        switchInt(move _365) -> [0: bb138, 1: bb139, otherwise: bb11];
    }

    bb138: {
        StorageLive(_369);
        _369 = ((_361 as Continue).0: ());
        _360 = _369;
        StorageDead(_369);
        _581 = discriminant(_361);
        StorageDead(_361);
        StorageDead(_360);
        StorageLive(_370);
        StorageLive(_371);
        _371 = &mut ((*_2).1: state::last_update::LastUpdate);
        _370 = last_update::LastUpdate::mark_stale(move _371) -> [return: bb141, unwind: bb267];
    }

    bb139: {
        StorageLive(_366);
        _366 = move ((_361 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_368);
        _368 = move _366;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _368) -> [return: bb140, unwind: bb258];
    }

    bb140: {
        StorageDead(_368);
        StorageDead(_366);
        _613 = discriminant(_361);
        StorageDead(_361);
        StorageDead(_360);
        goto -> bb220;
    }

    bb141: {
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_372);
        StorageLive(_373);
        _373 = (((*_2).5: state::reserve::ReserveLiquidity).10: state::reserve::BigFractionBytes);
        _372 = <utils::fraction::BigFraction as From<reserve::BigFractionBytes>>::from(move _373) -> [return: bb142, unwind: bb267];
    }

    bb142: {
        StorageDead(_373);
        StorageLive(_374);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _380 = &mut (*_3);
        StorageLive(_381);
        _381 = _6;
        StorageLive(_382);
        _382 = _372;
        StorageLive(_383);
        StorageLive(_384);
        _384 = &((*_2).9: state::reserve::ReserveConfig);
        _383 = reserve::ReserveConfig::get_asset_tier(move _384) -> [return: bb143, unwind: bb267];
    }

    bb143: {
        StorageDead(_384);
        _379 = obligation::Obligation::find_or_add_liquidity_to_borrows(move _380, move _381, move _382, move _383) -> [return: bb144, unwind: bb267];
    }

    bb144: {
        StorageDead(_383);
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_380);
        _378 = <std::result::Result<(&mut obligation::ObligationLiquidity, usize), anchor_lang::error::Error> as Try>::branch(move _379) -> [return: bb145, unwind: bb267];
    }

    bb145: {
        StorageDead(_379);
        _385 = discriminant(_378);
        switchInt(move _385) -> [0: bb146, 1: bb147, otherwise: bb11];
    }

    bb146: {
        StorageLive(_389);
        _389 = move ((_378 as Continue).0: (&mut state::obligation::ObligationLiquidity, usize));
        _377 = move _389;
        StorageDead(_389);
        StorageLive(_375);
        _375 = move (_377.0: &mut state::obligation::ObligationLiquidity);
        StorageLive(_376);
        _376 = (_377.1: usize);
        _583 = discriminant(_378);
        StorageDead(_378);
        StorageDead(_377);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &mut (*_375);
        StorageLive(_392);
        _392 = _280;
        _390 = obligation::ObligationLiquidity::borrow(move _391, move _392) -> [return: bb149, unwind: bb267];
    }

    bb147: {
        StorageLive(_386);
        _386 = move ((_378 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_388);
        _388 = move _386;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _388) -> [return: bb148, unwind: bb257];
    }

    bb148: {
        StorageDead(_388);
        StorageDead(_386);
        _611 = discriminant(_378);
        StorageDead(_378);
        StorageDead(_377);
        goto -> bb219;
    }

    bb149: {
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_390);
        _374 = _376;
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_393);
        _394 = discriminant(_7);
        switchInt(move _394) -> [1: bb150, otherwise: bb162];
    }

    bb150: {
        StorageLive(_395);
        _563 = const false;
        _395 = move ((_7 as Some).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>);
        StorageLive(_396);
        StorageLive(_397);
        _397 = ((*_1).5: u16);
        _396 = Gt(move _397, const 0_u16);
        switchInt(move _396) -> [0: bb160, otherwise: bb151];
    }

    bb151: {
        StorageDead(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        _401 = &mut (*_2);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &mut _395;
        _404 = &mut (*_405);
        _403 = <RefMut<'_, referral::ReferrerTokenState> as DerefMut>::deref_mut(move _404) -> [return: bb152, unwind: bb229];
    }

    bb152: {
        _402 = &mut (*_403);
        StorageDead(_404);
        StorageLive(_406);
        StorageLive(_407);
        _407 = _283;
        _406 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_num::<u64>(move _407) -> [return: bb153, unwind: bb229];
    }

    bb153: {
        StorageDead(_407);
        _400 = add_referrer_fee(move _401, move _402, move _406) -> [return: bb154, unwind: bb229];
    }

    bb154: {
        StorageDead(_406);
        StorageDead(_402);
        StorageDead(_401);
        _399 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _400) -> [return: bb155, unwind: bb229];
    }

    bb155: {
        StorageDead(_400);
        _408 = discriminant(_399);
        switchInt(move _408) -> [0: bb156, 1: bb157, otherwise: bb11];
    }

    bb156: {
        StorageLive(_412);
        _412 = ((_399 as Continue).0: ());
        _398 = _412;
        StorageDead(_412);
        _585 = discriminant(_399);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_413);
        _413 = _283;
        _414 = CheckedAdd((((*_2).5: state::reserve::ReserveLiquidity).3: u64), _413);
        assert(!move (_414.1: bool), "attempt to compute `{} + {}`, which would overflow", (((*_2).5: state::reserve::ReserveLiquidity).3: u64), move _413) -> [success: bb159, unwind: bb229];
    }

    bb157: {
        StorageLive(_409);
        _409 = move ((_399 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_411);
        _411 = move _409;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _411) -> [return: bb158, unwind: bb256];
    }

    bb158: {
        StorageDead(_411);
        StorageDead(_409);
        _609 = discriminant(_399);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_396);
        drop(_395) -> [return: bb218, unwind: bb267];
    }

    bb159: {
        (((*_2).5: state::reserve::ReserveLiquidity).3: u64) = move (_414.0: u64);
        StorageDead(_413);
        _393 = const ();
        goto -> bb161;
    }

    bb160: {
        StorageDead(_397);
        _393 = const ();
        goto -> bb161;
    }

    bb161: {
        StorageDead(_396);
        drop(_395) -> [return: bb163, unwind: bb267];
    }

    bb162: {
        _393 = const ();
        goto -> bb164;
    }

    bb163: {
        StorageDead(_395);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_393);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &mut (*_3);
        _417 = check_orders_supported_after_user_operation(move _418) -> [return: bb165, unwind: bb267];
    }

    bb165: {
        StorageDead(_418);
        _416 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _417) -> [return: bb166, unwind: bb267];
    }

    bb166: {
        StorageDead(_417);
        _419 = discriminant(_416);
        switchInt(move _419) -> [0: bb167, 1: bb168, otherwise: bb11];
    }

    bb167: {
        StorageLive(_423);
        _423 = ((_416 as Continue).0: ());
        _415 = _423;
        StorageDead(_423);
        _587 = discriminant(_416);
        StorageDead(_416);
        StorageDead(_415);
        ((*_3).16: u8) = const 1_u8;
        StorageLive(_424);
        StorageLive(_425);
        _425 = &mut ((*_3).1: state::last_update::LastUpdate);
        _424 = last_update::LastUpdate::mark_stale(move _425) -> [return: bb170, unwind: bb267];
    }

    bb168: {
        StorageLive(_420);
        _420 = move ((_416 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_422);
        _422 = move _420;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _422) -> [return: bb169, unwind: bb255];
    }

    bb169: {
        StorageDead(_422);
        StorageDead(_420);
        _607 = discriminant(_416);
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb219;
    }

    bb170: {
        StorageDead(_425);
        StorageDead(_424);
        StorageLive(_426);
        StorageLive(_427);
        _427 = &((*_2).5: state::reserve::ReserveLiquidity);
        _426 = ReserveLiquidity::utilization_rate(move _427) -> [return: bb171, unwind: bb267];
    }

    bb171: {
        StorageDead(_427);
        StorageLive(_428);
        _428 = (((*_2).9: state::reserve::ReserveConfig).24: u8);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &_426;
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = _428;
        _433 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u8>(move _434) -> [return: bb172, unwind: bb267];
    }

    bb172: {
        _432 = &_433;
        StorageDead(_434);
        _430 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _431, move _432) -> [return: bb173, unwind: bb267];
    }

    bb173: {
        switchInt(move _430) -> [0: bb191, otherwise: bb174];
    }

    bb174: {
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        StorageLive(_435);
        StorageLive(_436);
        _436 = _428;
        _435 = Ne(move _436, const 0_u8);
        switchInt(move _435) -> [0: bb190, otherwise: bb175];
    }

    bb175: {
        StorageDead(_436);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        _559 = const _;
        _448 = &(*_559);
        _447 = &(*_448);
        _446 = move _447 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_447);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = &_134;
        _457 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _458) -> [return: bb176, unwind: bb267];
    }

    bb176: {
        StorageDead(_458);
        _456 = &_457;
        _455 = &(*_456);
        _454 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _455) -> [return: bb177, unwind: bb267];
    }

    bb177: {
        StorageDead(_455);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        _463 = &_426;
        _462 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _463) -> [return: bb178, unwind: bb267];
    }

    bb178: {
        StorageDead(_463);
        _461 = &_462;
        _460 = &(*_461);
        _459 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _460) -> [return: bb179, unwind: bb267];
    }

    bb179: {
        StorageDead(_460);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = &_428;
        _465 = &(*_466);
        _464 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _465) -> [return: bb180, unwind: bb267];
    }

    bb180: {
        StorageDead(_465);
        _453 = [move _454, move _459, move _464];
        StorageDead(_464);
        StorageDead(_459);
        StorageDead(_454);
        _452 = &_453;
        _451 = &(*_452);
        _450 = move _451 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_451);
        _445 = Arguments::<'_>::new_v1(move _446, move _450) -> [return: bb181, unwind: bb267];
    }

    bb181: {
        StorageDead(_450);
        StorageDead(_446);
        _444 = format(move _445) -> [return: bb182, unwind: bb267];
    }

    bb182: {
        StorageDead(_445);
        StorageDead(_466);
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_453);
        StorageDead(_452);
        StorageDead(_448);
        _443 = move _444;
        StorageDead(_444);
        _442 = &_443;
        _441 = &(*_442);
        _440 = <std::string::String as Deref>::deref(move _441) -> [return: bb183, unwind: bb228];
    }

    bb183: {
        _439 = &(*_440);
        StorageDead(_441);
        _438 = solana_program::log::sol_log(move _439) -> [return: bb184, unwind: bb228];
    }

    bb184: {
        StorageDead(_439);
        drop(_443) -> [return: bb185, unwind: bb267];
    }

    bb185: {
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_440);
        StorageDead(_438);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _558 = const _;
        _470 = &(*_558);
        _469 = LendingError::name(move _470) -> [return: bb186, unwind: bb267];
    }

    bb186: {
        StorageDead(_470);
        StorageLive(_472);
        StorageLive(_473);
        _473 = LendingError::BorrowingAboveUtilizationRateDisabled;
        _472 = <LendingError as Into<u32>>::into(move _473) -> [return: bb187, unwind: bb227];
    }

    bb187: {
        StorageDead(_473);
        StorageLive(_474);
        StorageLive(_475);
        _557 = const _;
        _475 = &(*_557);
        _474 = <LendingError as ToString>::to_string(move _475) -> [return: bb188, unwind: bb227];
    }

    bb188: {
        StorageDead(_475);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 329_u32 };
        _478 = anchor_lang::error::ErrorOrigin::Source(move _479);
        StorageDead(_479);
        _477 = std::option::Option::<ErrorOrigin>::Some(move _478);
        StorageDead(_478);
        StorageLive(_480);
        _480 = std::option::Option::<ComparedValues>::None;
        _468 = anchor_lang::error::AnchorError { error_name: move _469, error_code_number: move _472, error_msg: move _474, error_origin: move _477, compared_values: move _480 };
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_469);
        _467 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _468) -> [return: bb189, unwind: bb267];
    }

    bb189: {
        StorageDead(_468);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _467);
        StorageDead(_467);
        StorageDead(_435);
        StorageDead(_430);
        StorageDead(_429);
        goto -> bb217;
    }

    bb190: {
        StorageDead(_436);
        goto -> bb192;
    }

    bb191: {
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        goto -> bb192;
    }

    bb192: {
        _429 = const ();
        StorageDead(_435);
        StorageDead(_430);
        StorageDead(_429);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = &(*_3);
        _483 = validate_obligation_asset_tiers(move _484) -> [return: bb193, unwind: bb267];
    }

    bb193: {
        StorageDead(_484);
        _482 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _483) -> [return: bb194, unwind: bb267];
    }

    bb194: {
        StorageDead(_483);
        _485 = discriminant(_482);
        switchInt(move _485) -> [0: bb195, 1: bb196, otherwise: bb11];
    }

    bb195: {
        StorageLive(_489);
        _489 = ((_482 as Continue).0: ());
        _481 = _489;
        StorageDead(_489);
        _589 = discriminant(_482);
        StorageDead(_482);
        StorageDead(_481);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        _493 = &(*_1);
        StorageLive(_494);
        _494 = ((*_3).14: u8);
        _492 = state::lending_market::LendingMarket::get_elevation_group(move _493, move _494) -> [return: bb198, unwind: bb267];
    }

    bb196: {
        StorageLive(_486);
        _486 = move ((_482 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_488);
        _488 = move _486;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _488) -> [return: bb197, unwind: bb254];
    }

    bb197: {
        StorageDead(_488);
        StorageDead(_486);
        _605 = discriminant(_482);
        StorageDead(_482);
        StorageDead(_481);
        goto -> bb217;
    }

    bb198: {
        StorageDead(_494);
        StorageDead(_493);
        _491 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as Try>::branch(move _492) -> [return: bb199, unwind: bb267];
    }

    bb199: {
        StorageDead(_492);
        _495 = discriminant(_491);
        switchInt(move _495) -> [0: bb200, 1: bb201, otherwise: bb11];
    }

    bb200: {
        StorageLive(_499);
        _499 = ((_491 as Continue).0: std::option::Option<&state::lending_market::ElevationGroup>);
        _490 = _499;
        StorageDead(_499);
        _591 = discriminant(_491);
        StorageDead(_491);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = _301;
        StorageLive(_504);
        _504 = &mut (*_3);
        StorageLive(_505);
        _505 = _374;
        StorageLive(_506);
        _506 = _490;
        StorageLive(_507);
        StorageLive(_508);
        _508 = &_6;
        _507 = &(*_508);
        StorageLive(_509);
        _509 = &mut (*_2);
        StorageLive(_510);
        _564 = const false;
        _510 = move _8;
        _502 = update_elevation_group_debt_trackers_on_borrow::<'_, T, impl Iterator<Item = T>>(move _503, move _504, move _505, move _506, move _507, move _509, move _510) -> [return: bb203, unwind: bb267];
    }

    bb201: {
        StorageLive(_496);
        _496 = move ((_491 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_498);
        _498 = move _496;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _498) -> [return: bb202, unwind: bb253];
    }

    bb202: {
        StorageDead(_498);
        StorageDead(_496);
        _603 = discriminant(_491);
        StorageDead(_491);
        goto -> bb216;
    }

    bb203: {
        StorageDead(_510);
        StorageDead(_509);
        StorageDead(_507);
        StorageDead(_506);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_503);
        _501 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _502) -> [return: bb204, unwind: bb267];
    }

    bb204: {
        StorageDead(_502);
        _511 = discriminant(_501);
        switchInt(move _511) -> [0: bb205, 1: bb206, otherwise: bb11];
    }

    bb205: {
        StorageLive(_515);
        _515 = ((_501 as Continue).0: ());
        _500 = _515;
        StorageDead(_515);
        _593 = discriminant(_501);
        StorageDead(_508);
        StorageDead(_501);
        StorageDead(_500);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _519 = _280;
        StorageLive(_520);
        _520 = &(*_3);
        StorageLive(_521);
        _521 = &(*_2);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = _374;
        _525 = Len(((*_3).7: [state::obligation::ObligationLiquidity; 5]));
        _526 = Lt(_524, _525);
        assert(move _526, "index out of bounds: the length is {} but the index is {}", move _525, _524) -> [success: bb208, unwind: bb267];
    }

    bb206: {
        StorageLive(_512);
        _512 = move ((_501 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_514);
        _514 = move _512;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _514) -> [return: bb207, unwind: bb252];
    }

    bb207: {
        StorageDead(_514);
        StorageDead(_512);
        _601 = discriminant(_501);
        StorageDead(_508);
        StorageDead(_501);
        StorageDead(_500);
        goto -> bb216;
    }

    bb208: {
        _523 = (((*_3).7: [state::obligation::ObligationLiquidity; 5])[_524].4: u128);
        _522 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _523) -> [return: bb209, unwind: bb267];
    }

    bb209: {
        StorageDead(_523);
        StorageLive(_527);
        StorageLive(_528);
        _528 = ((*_1).20: u128);
        _527 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _528) -> [return: bb210, unwind: bb267];
    }

    bb210: {
        StorageDead(_528);
        _518 = post_borrow_obligation_invariants(move _519, move _520, move _521, move _522, move _527) -> [return: bb211, unwind: bb267];
    }

    bb211: {
        StorageDead(_527);
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_520);
        StorageDead(_519);
        _517 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _518) -> [return: bb212, unwind: bb267];
    }

    bb212: {
        StorageDead(_518);
        _529 = discriminant(_517);
        switchInt(move _529) -> [0: bb213, 1: bb214, otherwise: bb11];
    }

    bb213: {
        StorageLive(_533);
        _533 = ((_517 as Continue).0: ());
        _516 = _533;
        StorageDead(_533);
        _595 = discriminant(_517);
        StorageDead(_524);
        StorageDead(_517);
        StorageDead(_516);
        StorageLive(_534);
        StorageLive(_535);
        _535 = _280;
        StorageLive(_536);
        _536 = _281;
        StorageLive(_537);
        _537 = _282;
        StorageLive(_538);
        _538 = _283;
        _534 = state::types::CalculateBorrowResult { borrow_amount_f: move _535, receive_amount: move _536, borrow_fee: move _537, referrer_fee: move _538 };
        StorageDead(_538);
        StorageDead(_537);
        StorageDead(_536);
        StorageDead(_535);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Ok(move _534);
        StorageDead(_534);
        StorageDead(_490);
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_301);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_254);
        StorageDead(_200);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        _597 = discriminant(_7);
        switchInt(move _597) -> [1: bb245, otherwise: bb226];
    }

    bb214: {
        StorageLive(_530);
        _530 = move ((_517 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_532);
        _532 = move _530;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _532) -> [return: bb215, unwind: bb251];
    }

    bb215: {
        StorageDead(_532);
        StorageDead(_530);
        _599 = discriminant(_517);
        StorageDead(_524);
        StorageDead(_517);
        StorageDead(_516);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_490);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_428);
        StorageDead(_426);
        goto -> bb219;
    }

    bb218: {
        StorageDead(_395);
        StorageDead(_393);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_374);
        StorageDead(_372);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_301);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_254);
        goto -> bb222;
    }

    bb222: {
        StorageDead(_200);
        goto -> bb223;
    }

    bb223: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        goto -> bb248;
    }

    bb224: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb248;
    }

    bb225: {
        _629 = discriminant(_7);
        switchInt(move _629) -> [1: bb249, otherwise: bb226];
    }

    bb226: {
        return;
    }

    bb227 (cleanup): {
        drop(_469) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        drop(_443) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        drop(_395) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        drop(_348) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        drop(_308) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        drop(_268) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        drop(_213) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        drop(_178) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        drop(_157) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        drop(_122) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        drop(_95) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        drop(_74) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        drop(_47) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        drop(_18) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        _646 = discriminant(_7);
        switchInt(move _646) -> [1: bb268, otherwise: bb242];
    }

    bb242 (cleanup): {
        resume;
    }

    bb243: {
        _565 = discriminant(_32);
        StorageDead(_32);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _543 = const _;
        _52 = &(*_543);
        _51 = &(*_52);
        _50 = move _51 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_2).1: state::last_update::LastUpdate);
        _61 = last_update::LastUpdate::get_price_status(move _62) -> [return: bb14, unwind: bb267];
    }

    bb244: {
        _567 = discriminant(_32);
        StorageDead(_32);
        _30 = const ();
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_1);
        _87 = state::lending_market::LendingMarket::is_borrowing_disabled(move _88) -> [return: bb27, unwind: bb267];
    }

    bb245: {
        switchInt(_563) -> [0: bb226, otherwise: bb246];
    }

    bb246: {
        drop(((_7 as Some).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>)) -> [return: bb226, unwind: bb242];
    }

    bb247: {
        drop(_8) -> [return: bb225, unwind: bb241];
    }

    bb248: {
        switchInt(_564) -> [0: bb225, otherwise: bb247];
    }

    bb249: {
        switchInt(_563) -> [0: bb226, otherwise: bb250];
    }

    bb250: {
        drop(((_7 as Some).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>)) -> [return: bb226, unwind: bb242];
    }

    bb251 (cleanup): {
        _631 = discriminant(_517);
        goto -> bb267;
    }

    bb252 (cleanup): {
        _632 = discriminant(_501);
        goto -> bb267;
    }

    bb253 (cleanup): {
        _633 = discriminant(_491);
        goto -> bb267;
    }

    bb254 (cleanup): {
        _634 = discriminant(_482);
        goto -> bb267;
    }

    bb255 (cleanup): {
        _635 = discriminant(_416);
        goto -> bb267;
    }

    bb256 (cleanup): {
        _636 = discriminant(_399);
        goto -> bb229;
    }

    bb257 (cleanup): {
        _637 = discriminant(_378);
        goto -> bb267;
    }

    bb258 (cleanup): {
        _638 = discriminant(_361);
        goto -> bb267;
    }

    bb259 (cleanup): {
        _639 = discriminant(_285);
        goto -> bb267;
    }

    bb260 (cleanup): {
        _640 = discriminant(_246);
        goto -> bb267;
    }

    bb261 (cleanup): {
        _641 = discriminant(_236);
        goto -> bb267;
    }

    bb262 (cleanup): {
        _642 = discriminant(_226);
        goto -> bb267;
    }

    bb263 (cleanup): {
        _643 = discriminant(_191);
        goto -> bb267;
    }

    bb264 (cleanup): {
        _644 = discriminant(_108);
        goto -> bb267;
    }

    bb265 (cleanup): {
        _645 = discriminant(_32);
        goto -> bb267;
    }

    bb266 (cleanup): {
        drop(_8) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        switchInt(_564) -> [0: bb241, otherwise: bb266];
    }

    bb268 (cleanup): {
        switchInt(_563) -> [0: bb242, otherwise: bb269];
    }

    bb269 (cleanup): {
        drop(((_7 as Some).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>)) -> [return: bb242, unwind terminate(cleanup)];
    }
}
