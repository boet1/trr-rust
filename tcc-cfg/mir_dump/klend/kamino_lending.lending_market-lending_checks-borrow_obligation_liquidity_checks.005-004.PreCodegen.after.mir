// MIR for `borrow_obligation_liquidity_checks` after PreCodegen

fn borrow_obligation_liquidity_checks(_1: &handlers::handler_borrow_obligation_liquidity::BorrowObligationLiquidity<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _3: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::Ref<'_, state::reserve::Reserve>;
    let _12: ();
    let mut _13: bool;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let _15: &state::reserve::Reserve;
    let mut _16: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _17: &anchor_lang::prelude::Pubkey;
    let _18: anchor_lang::prelude::Pubkey;
    let mut _19: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _20: !;
    let _21: ();
    let mut _22: &str;
    let _23: &str;
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::AnchorError;
    let mut _26: std::string::String;
    let mut _27: &LendingError;
    let _28: LendingError;
    let mut _29: u32;
    let mut _30: LendingError;
    let mut _31: std::string::String;
    let mut _32: &LendingError;
    let _33: LendingError;
    let mut _34: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _35: anchor_lang::error::ErrorOrigin;
    let mut _36: anchor_lang::error::Source;
    let mut _37: std::option::Option<anchor_lang::error::ComparedValues>;
    let _38: ();
    let mut _39: bool;
    let mut _40: &state::reserve::ReserveStatus;
    let _41: state::reserve::ReserveStatus;
    let mut _42: &state::reserve::ReserveConfig;
    let _43: &state::reserve::Reserve;
    let mut _44: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _45: &state::reserve::ReserveStatus;
    let _46: state::reserve::ReserveStatus;
    let mut _47: !;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: anchor_lang::error::Error;
    let mut _52: anchor_lang::error::AnchorError;
    let mut _53: std::string::String;
    let mut _54: &LendingError;
    let _55: LendingError;
    let mut _56: u32;
    let mut _57: LendingError;
    let mut _58: std::string::String;
    let mut _59: &LendingError;
    let _60: LendingError;
    let mut _61: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _62: anchor_lang::error::ErrorOrigin;
    let mut _63: anchor_lang::error::Source;
    let mut _64: std::option::Option<anchor_lang::error::ComparedValues>;
    let _65: ();
    let mut _66: bool;
    let mut _67: u64;
    let mut _68: &state::reserve::Reserve;
    let mut _69: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _70: u64;
    let mut _71: !;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: anchor_lang::error::Error;
    let mut _76: anchor_lang::error::AnchorError;
    let mut _77: std::string::String;
    let mut _78: &LendingError;
    let _79: LendingError;
    let mut _80: u32;
    let mut _81: LendingError;
    let mut _82: std::string::String;
    let mut _83: &LendingError;
    let _84: LendingError;
    let mut _85: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _86: anchor_lang::error::ErrorOrigin;
    let mut _87: anchor_lang::error::Source;
    let mut _88: std::option::Option<anchor_lang::error::ComparedValues>;
    let _89: ();
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _91: std::result::Result<(), anchor_lang::error::Error>;
    let mut _92: &anchor_lang::prelude::AccountInfo<'_>;
    let _93: &anchor_lang::prelude::AccountInfo<'_>;
    let _94: anchor_lang::prelude::AccountInfo<'_>;
    let mut _95: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _96: &anchor_lang::prelude::AccountInfo<'_>;
    let _97: &anchor_lang::prelude::AccountInfo<'_>;
    let _98: anchor_lang::prelude::AccountInfo<'_>;
    let mut _99: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _105: ();
    let mut _113: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _114: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _115: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _127: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _128: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug borrow_reserve => _2;
        let _101: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _104: ();
        let mut _106: &LendingError;
        let mut _107: &LendingError;
        let mut _108: &LendingError;
        let mut _109: &LendingError;
        let mut _110: &LendingError;
        let mut _111: &LendingError;
        let mut _112: &state::reserve::ReserveStatus;
        scope 6 {
            debug residual => _101;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _104;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb56];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _3 = move _11;
        StorageDead(_11);
        _2 = &_3;
        _116 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_2);
        _15 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _16) -> [return: bb7, unwind: bb55];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb58];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _122 = discriminant(_4);
        StorageDead(_4);
        goto -> bb48;
    }

    bb7: {
        StorageDead(_16);
        _14 = &(((*_15).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _113 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _126 = (((_113.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _19 = &(*_126);
        _18 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _19) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        _17 = &_18;
        StorageDead(_19);
        _13 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _14, move _17) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        switchInt(move _13) -> [0: bb16, otherwise: bb10];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = const "Borrow reserve liquidity supply cannot be used as the destination liquidity provided";
        _22 = &(*_23);
        _21 = solana_program::log::sol_log(move _22) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_23);
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _107 = const _;
        _27 = &(*_107);
        _26 = LendingError::name(move _27) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        _30 = LendingError::InvalidAccountInput;
        _29 = <LendingError as Into<u32>>::into(move _30) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _106 = const _;
        _32 = &(*_106);
        _31 = <LendingError as ToString>::to_string(move _32) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 28_u32 };
        _35 = anchor_lang::error::ErrorOrigin::Source(move _36);
        StorageDead(_36);
        _34 = std::option::Option::<ErrorOrigin>::Some(move _35);
        StorageDead(_35);
        StorageLive(_37);
        _37 = std::option::Option::<ComparedValues>::None;
        _25 = anchor_lang::error::AnchorError { error_name: move _26, error_code_number: move _29, error_msg: move _31, error_origin: move _34, compared_values: move _37 };
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_26);
        _24 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _25) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        StorageDead(_25);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _24);
        StorageDead(_24);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb47;
    }

    bb16: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        _12 = const ();
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_2);
        _43 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _44) -> [return: bb17, unwind: bb55];
    }

    bb17: {
        StorageDead(_44);
        _42 = &((*_43).9: state::reserve::ReserveConfig);
        _41 = reserve::ReserveConfig::status(move _42) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        _40 = &_41;
        StorageDead(_42);
        StorageLive(_45);
        _112 = const _;
        _45 = &(*_112);
        _39 = <reserve::ReserveStatus as PartialEq>::eq(move _40, move _45) -> [return: bb19, unwind: bb55];
    }

    bb19: {
        switchInt(move _39) -> [0: bb26, otherwise: bb20];
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = const "Reserve is not active";
        _49 = &(*_50);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _109 = const _;
        _54 = &(*_109);
        _53 = LendingError::name(move _54) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        _57 = LendingError::ReserveObsolete;
        _56 = <LendingError as Into<u32>>::into(move _57) -> [return: bb23, unwind: bb53];
    }

    bb23: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _108 = const _;
        _59 = &(*_108);
        _58 = <LendingError as ToString>::to_string(move _59) -> [return: bb24, unwind: bb53];
    }

    bb24: {
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 33_u32 };
        _62 = anchor_lang::error::ErrorOrigin::Source(move _63);
        StorageDead(_63);
        _61 = std::option::Option::<ErrorOrigin>::Some(move _62);
        StorageDead(_62);
        StorageLive(_64);
        _64 = std::option::Option::<ComparedValues>::None;
        _52 = anchor_lang::error::AnchorError { error_name: move _53, error_code_number: move _56, error_msg: move _58, error_origin: move _61, compared_values: move _64 };
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        _51 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _52) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        StorageDead(_52);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _51);
        StorageDead(_51);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb47;
    }

    bb26: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        _38 = const ();
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_2);
        _68 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _69) -> [return: bb27, unwind: bb55];
    }

    bb27: {
        StorageDead(_69);
        _67 = ((*_68).0: u64);
        StorageLive(_70);
        _70 = const _ as u64 (IntToInt);
        _66 = Ne(move _67, move _70);
        switchInt(move _66) -> [0: bb34, otherwise: bb28];
    }

    bb28: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = const "Reserve version does not match the program version";
        _73 = &(*_74);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb29, unwind: bb55];
    }

    bb29: {
        StorageDead(_73);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _111 = const _;
        _78 = &(*_111);
        _77 = LendingError::name(move _78) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        _81 = LendingError::ReserveDeprecated;
        _80 = <LendingError as Into<u32>>::into(move _81) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        _110 = const _;
        _83 = &(*_110);
        _82 = <LendingError as ToString>::to_string(move _83) -> [return: bb32, unwind: bb52];
    }

    bb32: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 38_u32 };
        _86 = anchor_lang::error::ErrorOrigin::Source(move _87);
        StorageDead(_87);
        _85 = std::option::Option::<ErrorOrigin>::Some(move _86);
        StorageDead(_86);
        StorageLive(_88);
        _88 = std::option::Option::<ComparedValues>::None;
        _76 = anchor_lang::error::AnchorError { error_name: move _77, error_code_number: move _80, error_msg: move _82, error_origin: move _85, compared_values: move _88 };
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_77);
        _75 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _76) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        StorageDead(_76);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _75);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb47;
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        _65 = const ();
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _114 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _127 = (((_114.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _95 = &(*_127);
        _94 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _95) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _115 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _128 = (((_115.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _99 = &(*_128);
        _98 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _99) -> [return: bb36, unwind: bb51];
    }

    bb36: {
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _91 = validate_liquidity_token_extensions(move _92, move _96) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        StorageDead(_96);
        StorageDead(_92);
        _90 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _91) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        StorageDead(_91);
        _100 = discriminant(_90);
        switchInt(move _100) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_104);
        _104 = ((_90 as Continue).0: ());
        _89 = _104;
        StorageDead(_104);
        _118 = discriminant(_90);
        drop(_98) -> [return: bb42, unwind: bb51];
    }

    bb40: {
        StorageLive(_101);
        _101 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_103);
        _103 = move _101;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _103) -> [return: bb41, unwind: bb57];
    }

    bb41: {
        StorageDead(_103);
        StorageDead(_101);
        _120 = discriminant(_90);
        drop(_98) -> [return: bb45, unwind: bb51];
    }

    bb42: {
        StorageDead(_98);
        StorageDead(_97);
        drop(_94) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_105);
        _105 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _105);
        StorageDead(_105);
        drop(_3) -> [return: bb44, unwind: bb56];
    }

    bb44: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb49;
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_97);
        drop(_94) -> [return: bb46, unwind: bb55];
    }

    bb46: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb47;
    }

    bb47: {
        drop(_3) -> [return: bb48, unwind: bb56];
    }

    bb48: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb49;
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_98) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_94) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_77) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_53) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_26) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_3) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57 (cleanup): {
        _124 = discriminant(_90);
        goto -> bb50;
    }

    bb58 (cleanup): {
        _125 = discriminant(_4);
        goto -> bb56;
    }
}
