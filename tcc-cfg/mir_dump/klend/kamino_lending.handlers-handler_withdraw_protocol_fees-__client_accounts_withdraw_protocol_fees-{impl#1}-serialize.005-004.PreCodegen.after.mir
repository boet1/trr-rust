// MIR for `handlers::handler_withdraw_protocol_fees::__client_accounts_withdraw_protocol_fees::<impl at programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18>::serialize` after PreCodegen

fn handlers::handler_withdraw_protocol_fees::__client_accounts_withdraw_protocol_fees::<impl at programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18>::serialize(_1: &handlers::handler_withdraw_protocol_fees::__client_accounts_withdraw_protocol_fees::WithdrawProtocolFees, _2: &mut W) -> std::result::Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _5: std::result::Result<(), std::io::Error>;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: &anchor_lang::prelude::Pubkey;
    let mut _8: &mut W;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: &anchor_lang::prelude::Pubkey;
    let _18: &anchor_lang::prelude::Pubkey;
    let mut _19: &mut W;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: ();
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _27: std::result::Result<(), std::io::Error>;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let _29: &anchor_lang::prelude::Pubkey;
    let mut _30: &mut W;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _35: ();
    let _36: ();
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _38: std::result::Result<(), std::io::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut W;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _46: ();
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _49: std::result::Result<(), std::io::Error>;
    let mut _50: &anchor_lang::prelude::Pubkey;
    let _51: &anchor_lang::prelude::Pubkey;
    let mut _52: &mut W;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _57: ();
    let _58: ();
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _60: std::result::Result<(), std::io::Error>;
    let mut _61: &anchor_lang::prelude::Pubkey;
    let _62: &anchor_lang::prelude::Pubkey;
    let mut _63: &mut W;
    let mut _64: isize;
    let _65: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _68: ();
    let _69: ();
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _71: std::result::Result<(), std::io::Error>;
    let mut _72: &anchor_lang::prelude::Pubkey;
    let _73: &anchor_lang::prelude::Pubkey;
    let mut _74: &mut W;
    let mut _75: isize;
    let _76: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _79: ();
    let _80: ();
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _82: std::result::Result<(), std::io::Error>;
    let mut _83: &anchor_lang::prelude::Pubkey;
    let _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut W;
    let mut _86: isize;
    let _87: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _90: ();
    let mut _91: ();
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _32;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _35;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _43;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _46;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _54;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _57;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _65;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _68;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _76;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _79;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _87;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _90;
        scope 32 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = &(*_7);
        StorageLive(_8);
        _8 = &mut (*_2);
        _5 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _6, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<(), std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: ());
        _3 = _13;
        StorageDead(_13);
        _92 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_1).1: anchor_lang::prelude::Pubkey);
        _17 = &(*_18);
        StorageLive(_19);
        _19 = &mut (*_2);
        _16 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _17, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb51];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _122 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb42;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: ());
        _14 = _24;
        StorageDead(_24);
        _94 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_1).2: anchor_lang::prelude::Pubkey);
        _28 = &(*_29);
        StorageLive(_30);
        _30 = &mut (*_2);
        _27 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _28, move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb50];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _120 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb42;
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<(), std::io::Error> as Try>::branch(move _27) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_26 as Continue).0: ());
        _25 = _35;
        StorageDead(_35);
        _96 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).3: anchor_lang::prelude::Pubkey);
        _39 = &(*_40);
        StorageLive(_41);
        _41 = &mut (*_2);
        _38 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _39, move _41) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        _118 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb42;
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<(), std::io::Error> as Try>::branch(move _38) -> [return: bb18, unwind: bb43];
    }

    bb18: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: ());
        _36 = _46;
        StorageDead(_46);
        _98 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).4: anchor_lang::prelude::Pubkey);
        _50 = &(*_51);
        StorageLive(_52);
        _52 = &mut (*_2);
        _49 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _50, move _52) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_43);
        _43 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _45) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        _116 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb42;
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = <std::result::Result<(), std::io::Error> as Try>::branch(move _49) -> [return: bb23, unwind: bb43];
    }

    bb23: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_48 as Continue).0: ());
        _47 = _57;
        StorageDead(_57);
        _100 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_1).5: anchor_lang::prelude::Pubkey);
        _61 = &(*_62);
        StorageLive(_63);
        _63 = &mut (*_2);
        _60 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _61, move _63) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _56) -> [return: bb26, unwind: bb47];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        _114 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb42;
    }

    bb27: {
        StorageDead(_63);
        StorageDead(_61);
        _59 = <std::result::Result<(), std::io::Error> as Try>::branch(move _60) -> [return: bb28, unwind: bb43];
    }

    bb28: {
        StorageDead(_60);
        _64 = discriminant(_59);
        switchInt(move _64) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_68);
        _68 = ((_59 as Continue).0: ());
        _58 = _68;
        StorageDead(_68);
        _102 = discriminant(_59);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &((*_1).6: anchor_lang::prelude::Pubkey);
        _72 = &(*_73);
        StorageLive(_74);
        _74 = &mut (*_2);
        _71 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _72, move _74) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_65);
        _65 = move ((_59 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _67) -> [return: bb31, unwind: bb46];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_65);
        _112 = discriminant(_59);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb42;
    }

    bb32: {
        StorageDead(_74);
        StorageDead(_72);
        _70 = <std::result::Result<(), std::io::Error> as Try>::branch(move _71) -> [return: bb33, unwind: bb43];
    }

    bb33: {
        StorageDead(_71);
        _75 = discriminant(_70);
        switchInt(move _75) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_79);
        _79 = ((_70 as Continue).0: ());
        _69 = _79;
        StorageDead(_79);
        _104 = discriminant(_70);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_1).7: anchor_lang::prelude::Pubkey);
        _83 = &(*_84);
        StorageLive(_85);
        _85 = &mut (*_2);
        _82 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _83, move _85) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_76);
        _76 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _78) -> [return: bb36, unwind: bb45];
    }

    bb36: {
        StorageDead(_78);
        StorageDead(_76);
        _110 = discriminant(_70);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb42;
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = <std::result::Result<(), std::io::Error> as Try>::branch(move _82) -> [return: bb38, unwind: bb43];
    }

    bb38: {
        StorageDead(_82);
        _86 = discriminant(_81);
        switchInt(move _86) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_90);
        _90 = ((_81 as Continue).0: ());
        _80 = _90;
        StorageDead(_90);
        _106 = discriminant(_81);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_91);
        _91 = ();
        _0 = std::result::Result::<(), std::io::Error>::Ok(move _91);
        StorageDead(_91);
        goto -> bb42;
    }

    bb40: {
        StorageLive(_87);
        _87 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_89);
        _89 = move _87;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _89) -> [return: bb41, unwind: bb44];
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_87);
        _108 = discriminant(_81);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb42;
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        _124 = discriminant(_81);
        goto -> bb43;
    }

    bb45 (cleanup): {
        _125 = discriminant(_70);
        goto -> bb43;
    }

    bb46 (cleanup): {
        _126 = discriminant(_59);
        goto -> bb43;
    }

    bb47 (cleanup): {
        _127 = discriminant(_48);
        goto -> bb43;
    }

    bb48 (cleanup): {
        _128 = discriminant(_37);
        goto -> bb43;
    }

    bb49 (cleanup): {
        _129 = discriminant(_26);
        goto -> bb43;
    }

    bb50 (cleanup): {
        _130 = discriminant(_15);
        goto -> bb43;
    }

    bb51 (cleanup): {
        _131 = discriminant(_4);
        goto -> bb43;
    }
}
