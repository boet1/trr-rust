digraph Mir_0_2391 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as utils::fraction::FractionExtra&gt;::full_mul_int_ratio(_1: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, _2: impl Into&lt;U256&gt;/#0, _3: impl Into&lt;U256&gt;/#1) -&gt; fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;<br align="left"/>let _4: utils::fraction::uint_types::U256;<br align="left"/>let mut _5: impl Into&lt;U256&gt;/#0;<br align="left"/>let _6: utils::fraction::uint_types::U256;<br align="left"/>let mut _7: impl Into&lt;U256&gt;/#1;<br align="left"/>let _8: utils::fraction::uint_types::U256;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _11: utils::fraction::uint_types::U256;<br align="left"/>let mut _12: utils::fraction::uint_types::U256;<br align="left"/>let mut _13: utils::fraction::uint_types::U256;<br align="left"/>let mut _14: utils::fraction::uint_types::U256;<br align="left"/>let mut _15: utils::fraction::uint_types::U256;<br align="left"/>let _16: u128;<br align="left"/>let mut _17: std::result::Result&lt;u128, &amp;ReErased str&gt;;<br align="left"/>let mut _18: utils::fraction::uint_types::U256;<br align="left"/>let mut _19: &amp;ReErased str;<br align="left"/>let _20: &amp;ReErased str;<br align="left"/>let mut _21: u128;<br align="left"/>let mut _22: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug numerator =&gt; _2;<br align="left"/>debug denominator =&gt; _3;<br align="left"/>debug numerator =&gt; _4;<br align="left"/>debug denominator =&gt; _6;<br align="left"/>debug big_sf =&gt; _8;<br align="left"/>debug big_sf_res =&gt; _11;<br align="left"/>debug sf_res =&gt; _16;<br align="left"/>>;
    bb0__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_22 = const false<br/>_22 = const true<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = move _2<br/></td></tr><tr><td align="left">_4 = &lt;impl Into&lt;U256&gt; as Into&lt;uint_types::U256&gt;&gt;::into(move _5)</td></tr></table>>];
    bb1__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_22 = const false<br/>_7 = move _3<br/></td></tr><tr><td align="left">_6 = &lt;impl Into&lt;U256&gt; as Into&lt;uint_types::U256&gt;&gt;::into(move _7)</td></tr></table>>];
    bb2__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = (*_1)<br/></td></tr><tr><td align="left">_9 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _10)</td></tr></table>>];
    bb3__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;uint_types::U256 as From&lt;u128&gt;&gt;::from(move _9)</td></tr></table>>];
    bb4__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _8<br/>StorageLive(_14)<br/>_14 = _4<br/></td></tr><tr><td align="left">_12 = &lt;uint_types::U256 as std::ops::Mul&gt;::mul(move _13, move _14)</td></tr></table>>];
    bb5__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_15)<br/>_15 = _6<br/></td></tr><tr><td align="left">_11 = &lt;uint_types::U256 as std::ops::Div&gt;::div(move _12, move _15)</td></tr></table>>];
    bb6__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_12)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _11<br/></td></tr><tr><td align="left">_17 = &lt;uint_types::U256 as TryInto&lt;u128&gt;&gt;::try_into(move _18)</td></tr></table>>];
    bb7__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = const &quot;Denominator is not big enough, the result doesn't fit in a Fraction.&quot;<br/>_19 = &amp;(*_20)<br/></td></tr><tr><td align="left">_16 = std::result::Result::&lt;u128, &amp;str&gt;::expect(move _17, move _19)</td></tr></table>>];
    bb8__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_20)<br/>StorageLive(_21)<br/>_21 = _16<br/></td></tr><tr><td align="left">_0 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::from_bits(move _21)</td></tr></table>>];
    bb9__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_16)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb11__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb12__0_2391 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">switchInt(_22)</td></tr></table>>];
    bb0__0_2391 -> bb1__0_2391 [label="return"];
    bb0__0_2391 -> bb12__0_2391 [label="unwind"];
    bb1__0_2391 -> bb2__0_2391 [label="return"];
    bb1__0_2391 -> bb12__0_2391 [label="unwind"];
    bb2__0_2391 -> bb3__0_2391 [label="return"];
    bb2__0_2391 -> bb12__0_2391 [label="unwind"];
    bb3__0_2391 -> bb4__0_2391 [label="return"];
    bb3__0_2391 -> bb12__0_2391 [label="unwind"];
    bb4__0_2391 -> bb5__0_2391 [label="return"];
    bb4__0_2391 -> bb12__0_2391 [label="unwind"];
    bb5__0_2391 -> bb6__0_2391 [label="return"];
    bb5__0_2391 -> bb12__0_2391 [label="unwind"];
    bb6__0_2391 -> bb7__0_2391 [label="return"];
    bb6__0_2391 -> bb12__0_2391 [label="unwind"];
    bb7__0_2391 -> bb8__0_2391 [label="return"];
    bb7__0_2391 -> bb12__0_2391 [label="unwind"];
    bb8__0_2391 -> bb9__0_2391 [label="return"];
    bb8__0_2391 -> bb12__0_2391 [label="unwind"];
    bb11__0_2391 -> bb10__0_2391 [label="return"];
    bb12__0_2391 -> bb10__0_2391 [label="0"];
    bb12__0_2391 -> bb11__0_2391 [label="otherwise"];
}
