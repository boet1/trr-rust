// MIR for `calculate_order_execution_bonus_rate` after PreCodegen

fn calculate_order_execution_bonus_rate(_1: &obligation::ObligationOrder, _2: &ConditionHit, _3: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> {
    debug order => _1;
    debug condition_hit => _2;
    debug user_no_bf_ltv => _3;
    let mut _0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _5: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _6: std::ops::RangeInclusive<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _7: &state::obligation::ObligationOrder;
    let mut _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: bool;
    let mut _11: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _12: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _13: ();
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[&str; 4];
    let _18: &[&str; 4];
    let _19: [&str; 4];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let mut _21: &[core::fmt::rt::Argument<'_>; 3];
    let _22: &[core::fmt::rt::Argument<'_>; 3];
    let _23: [core::fmt::rt::Argument<'_>; 3];
    let mut _24: core::fmt::rt::Argument<'_>;
    let mut _25: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _26: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _27: core::fmt::rt::Argument<'_>;
    let mut _28: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _29: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _32: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug interpolated_bonus_rate => _4;
        let _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug diff_to_bad_debt => _8;
            let mut _33: &[&str; 4];
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_2).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = obligation::ObligationOrder::execution_bonus_rate_range(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _4 = interpolate_bonus_rate(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _3;
        _8 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::saturating_sub(const _, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_4;
        StorageLive(_12);
        _12 = &_8;
        _10 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _10) -> [0: bb11, otherwise: bb5];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _33 = const _;
        _18 = &(*_33);
        _17 = &(*_18);
        _16 = move _17 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &_3;
        _25 = &(*_26);
        _24 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _25) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_4;
        _28 = &(*_29);
        _27 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _28) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_8;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _31) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_31);
        _23 = [move _24, move _27, move _30];
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = move _21 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_21);
        _15 = Arguments::<'_>::new_v1(move _16, move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_16);
        _14 = _print(move _15) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_15);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_14);
        _13 = const ();
        StorageDead(_13);
        _0 = _8;
        goto -> bb12;
    }

    bb11: {
        StorageDead(_12);
        StorageDead(_11);
        _0 = _4;
        goto -> bb12;
    }

    bb12: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        return;
    }
}
