digraph Mir_0_11356 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U256::byte(_1: &amp;ReErased utils::fraction::uint_types::U256, _2: usize) -&gt; u8<br align="left"/>let _3: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: u64;<br align="left"/>let _6: usize;<br align="left"/>let mut _7: usize;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: usize;<br align="left"/>let mut _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: (usize, bool);<br align="left"/>let mut _16: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug index =&gt; _2;<br align="left"/>debug arr =&gt; _3;<br align="left"/>>;
    bb0__0_11356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;((*_1).0: [u64; 4])<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>_8 = Eq(const 8_usize, const 0_usize)<br/></td></tr><tr><td align="left">assert(!move _8, &quot;attempt to divide `{}` by zero&quot;, _7)</td></tr></table>>];
    bb1__0_11356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = Div(move _7, const 8_usize)<br/>StorageDead(_7)<br/>_9 = Len((*_3))<br/>_10 = Lt(_6, _9)<br/></td></tr><tr><td align="left">assert(move _10, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _9, _6)</td></tr></table>>];
    bb2__0_11356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = (*_3)[_6]<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _2<br/>_14 = Eq(const 8_usize, const 0_usize)<br/></td></tr><tr><td align="left">assert(!move _14, &quot;attempt to calculate the remainder of `{}` with a divisor of zero&quot;, _13)</td></tr></table>>];
    bb3__0_11356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_12 = Rem(move _13, const 8_usize)<br/>StorageDead(_13)<br/>_15 = CheckedMul(_12, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_15.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _12, const 8_usize)</td></tr></table>>];
    bb4__0_11356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_11 = move (_15.0: usize)<br/>StorageDead(_12)<br/>_16 = Lt(_11, const 64_usize)<br/></td></tr><tr><td align="left">assert(move _16, &quot;attempt to shift right by `{}`, which would overflow&quot;, _11)</td></tr></table>>];
    bb5__0_11356 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_4 = Shr(move _5, move _11)<br/>StorageDead(_11)<br/>StorageDead(_5)<br/>_0 = move _4 as u8 (IntToInt)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11356 -> bb1__0_11356 [label="success"];
    bb1__0_11356 -> bb2__0_11356 [label="success"];
    bb2__0_11356 -> bb3__0_11356 [label="success"];
    bb3__0_11356 -> bb4__0_11356 [label="success"];
    bb4__0_11356 -> bb5__0_11356 [label="success"];
}
