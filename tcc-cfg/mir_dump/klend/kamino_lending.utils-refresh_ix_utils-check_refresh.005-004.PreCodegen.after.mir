// MIR for `refresh_ix_utils::check_refresh` after PreCodegen

fn refresh_ix_utils::check_refresh(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: &[(anchor_lang::prelude::Pubkey, &reserve::Reserve)], _3: &anchor_lang::prelude::Pubkey, _4: &[reserve::ReserveFarmKind]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug instruction_sysvar_account_info => _1;
    debug reserves => _2;
    debug obligation_address => _3;
    debug modes => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: &str;
    let _7: &str;
    let _8: ();
    let _9: lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _10: &anchor_lang::prelude::AccountInfo<'_>;
    let _11: ();
    let mut _12: bool;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _14: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _15: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: !;
    let _22: ();
    let mut _23: &str;
    let _24: &str;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::AnchorError;
    let mut _27: std::string::String;
    let mut _28: &LendingError;
    let _29: LendingError;
    let mut _30: u32;
    let mut _31: LendingError;
    let mut _32: std::string::String;
    let mut _33: &LendingError;
    let _34: LendingError;
    let mut _35: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _36: anchor_lang::error::ErrorOrigin;
    let mut _37: anchor_lang::error::Source;
    let mut _38: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _40: u16;
    let mut _41: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _42: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _44: &usize;
    let mut _45: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _47: bool;
    let mut _48: usize;
    let mut _49: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _50: bool;
    let mut _51: &anchor_lang::prelude::Pubkey;
    let _52: usize;
    let mut _53: usize;
    let mut _54: bool;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let _56: usize;
    let mut _57: usize;
    let mut _58: bool;
    let mut _59: usize;
    let mut _60: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _61: (usize, bool);
    let mut _62: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _64: usize;
    let mut _65: usize;
    let mut _66: usize;
    let mut _67: (usize, bool);
    let mut _68: usize;
    let mut _69: (usize, bool);
    let mut _71: usize;
    let _72: ();
    let mut _73: std::iter::Take<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>>;
    let mut _74: std::iter::Take<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>>;
    let mut _75: std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>;
    let mut _76: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _77: usize;
    let mut _79: ();
    let _80: ();
    let mut _81: std::option::Option<&(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>;
    let mut _82: &mut std::iter::Take<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>>;
    let mut _83: &mut std::iter::Take<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>>;
    let mut _84: isize;
    let mut _85: !;
    let _87: ();
    let mut _88: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _89: utils::refresh_ix_utils::RequiredIx;
    let mut _90: utils::refresh_ix_utils::RequiredIxType;
    let mut _91: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize)>;
    let mut _92: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize)]>;
    let mut _93: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize); 1]>;
    let mut _94: usize;
    let mut _95: usize;
    let mut _96: *mut u8;
    let mut _97: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize); 1]>;
    let mut _98: (anchor_lang::prelude::Pubkey, usize);
    let mut _99: anchor_lang::prelude::Pubkey;
    let _100: ();
    let mut _101: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _102: utils::refresh_ix_utils::RequiredIx;
    let mut _103: utils::refresh_ix_utils::RequiredIxType;
    let mut _104: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize)>;
    let mut _105: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize)]>;
    let mut _106: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize); 1]>;
    let mut _107: usize;
    let mut _108: usize;
    let mut _109: *mut u8;
    let mut _110: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize); 1]>;
    let mut _111: (anchor_lang::prelude::Pubkey, usize);
    let mut _112: anchor_lang::prelude::Pubkey;
    let _113: ();
    let mut _114: std::iter::Zip<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>, std::slice::Iter<'_, state::reserve::ReserveFarmKind>>;
    let mut _115: std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>;
    let mut _116: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _117: &[state::reserve::ReserveFarmKind];
    let mut _118: {closure@programs\klend\src\utils\refresh_ix_utils.rs:169:19: 169:60};
    let mut _119: &anchor_lang::prelude::Pubkey;
    let mut _120: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _121: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let _122: ();
    let mut _123: &mut [utils::refresh_ix_utils::RequiredIx];
    let mut _124: &mut [utils::refresh_ix_utils::RequiredIx];
    let mut _125: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let _126: ();
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _128: std::result::Result<(), anchor_lang::error::Error>;
    let mut _129: &{closure@programs\klend\src\utils\refresh_ix_utils.rs:68:22: 68:93};
    let mut _130: (std::vec::Vec<utils::refresh_ix_utils::RequiredIx>, utils::refresh_ix_utils::AppendedIxType);
    let mut _131: std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _132: utils::refresh_ix_utils::AppendedIxType;
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _138: ();
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _140: std::result::Result<(), anchor_lang::error::Error>;
    let mut _141: &{closure@programs\klend\src\utils\refresh_ix_utils.rs:68:22: 68:93};
    let mut _142: (std::vec::Vec<utils::refresh_ix_utils::RequiredIx>, utils::refresh_ix_utils::AppendedIxType);
    let mut _143: std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _144: utils::refresh_ix_utils::AppendedIxType;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let _153: ();
    let mut _154: ();
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: *const [(anchor_lang::prelude::Pubkey, usize); 1];
    let mut _177: *const [(anchor_lang::prelude::Pubkey, usize); 1];
    scope 1 {
        debug ix_loader => _9;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _20: bool;
        let _39: usize;
        let mut _155: &LendingError;
        let mut _156: &LendingError;
        scope 2 {
            debug residual => _17;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _20;
            scope 5 {
            }
        }
        scope 6 {
            debug current_idx => _39;
            let _43: {closure@programs\klend\src\utils\refresh_ix_utils.rs:68:22: 68:93};
            scope 7 {
                debug check_ixns => _43;
                let _46: usize;
                scope 8 {
                    debug refresh_reserve_ixs => _46;
                    let mut _63: std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
                    scope 9 {
                        debug required_pre_ixs => _63;
                        let mut _70: std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
                        scope 10 {
                            debug required_post_ixs => _70;
                            let mut _78: std::iter::Take<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &state::reserve::Reserve)>>;
                            let _134: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _137: ();
                            let _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _149: ();
                            let mut _178: *const ();
                            let mut _179: usize;
                            let mut _180: usize;
                            let mut _181: usize;
                            let mut _182: usize;
                            let mut _183: bool;
                            scope 11 {
                                debug iter => _78;
                                let _86: &(anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
                                scope 12 {
                                    debug reserve => _86;
                                    let mut _184: *const ();
                                    let mut _185: usize;
                                    let mut _186: usize;
                                    let mut _187: usize;
                                    let mut _188: usize;
                                    let mut _189: bool;
                                    scope 13 {
                                    }
                                }
                            }
                            scope 14 {
                            }
                            scope 15 {
                                debug residual => _134;
                                scope 16 {
                                }
                            }
                            scope 17 {
                                debug val => _137;
                                scope 18 {
                                }
                            }
                            scope 19 {
                                debug residual => _146;
                                scope 20 {
                                }
                            }
                            scope 21 {
                                debug val => _149;
                                scope 22 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _158 = const false;
        _157 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = const "Beginning check_refresh";
        _6 = &(*_7);
        _5 = solana_program::log::sol_log(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_7);
        StorageDead(_5);
        StorageLive(_8);
        _8 = solana_program::log::sol_log_compute_units() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        _9 = BpfInstructionLoader::<'_, '_> { instruction_sysvar_account_info: move _10 };
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_9;
        _14 = <BpfInstructionLoader<'_, '_> as InstructionLoader>::is_forbidden_cpi_call(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _13 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb4, unwind: bb69];
    }

    bb4: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: bool);
        _12 = _20;
        StorageDead(_20);
        switchInt(move _12) -> [0: bb71, otherwise: bb70];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb8, unwind: bb80];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _171 = discriminant(_13);
        StorageDead(_13);
        goto -> bb65;
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _156 = const _;
        _28 = &(*_156);
        _27 = LendingError::name(move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = LendingError::CpiDisabled;
        _30 = <LendingError as Into<u32>>::into(move _31) -> [return: bb11, unwind: bb68];
    }

    bb11: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _155 = const _;
        _33 = &(*_155);
        _32 = <LendingError as ToString>::to_string(move _33) -> [return: bb12, unwind: bb68];
    }

    bb12: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\refresh_ix_utils.rs", line: const 65_u32 };
        _36 = anchor_lang::error::ErrorOrigin::Source(move _37);
        StorageDead(_37);
        _35 = std::option::Option::<ErrorOrigin>::Some(move _36);
        StorageDead(_36);
        StorageLive(_38);
        _38 = std::option::Option::<ComparedValues>::None;
        _26 = anchor_lang::error::AnchorError { error_name: move _27, error_code_number: move _30, error_msg: move _32, error_origin: move _35, compared_values: move _38 };
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_27);
        _25 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _26) -> [return: bb13, unwind: bb69];
    }

    bb13: {
        StorageDead(_26);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _25);
        StorageDead(_25);
        goto -> bb65;
    }

    bb14: {
        StorageDead(_42);
        _40 = std::result::Result::<u16, anchor_lang::prelude::ProgramError>::unwrap(move _41) -> [return: bb15, unwind: bb69];
    }

    bb15: {
        StorageDead(_41);
        _39 = <u16 as Into<usize>>::into(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_39;
        StorageLive(_45);
        _45 = &_9;
        _43 = {closure@programs\klend\src\utils\refresh_ix_utils.rs:68:22: 68:93} { current_idx: move _44, ix_loader: move _45 };
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_2);
        _48 = core::slice::<impl [(anchor_lang::prelude::Pubkey, &reserve::Reserve)]>::len(move _49) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_49);
        _47 = Eq(move _48, const 2_usize);
        switchInt(move _47) -> [0: bb26, otherwise: bb18];
    }

    bb18: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = const 0_usize;
        _53 = Len((*_2));
        _54 = Lt(_52, _53);
        assert(move _54, "index out of bounds: the length is {} but the index is {}", move _53, _52) -> [success: bb19, unwind continue];
    }

    bb19: {
        _51 = &((*_2)[_52].0: anchor_lang::prelude::Pubkey);
        StorageLive(_55);
        StorageLive(_56);
        _56 = const 1_usize;
        _57 = Len((*_2));
        _58 = Lt(_56, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> [success: bb20, unwind continue];
    }

    bb20: {
        _55 = &((*_2)[_56].0: anchor_lang::prelude::Pubkey);
        _50 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _51, move _55) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _50) -> [0: bb25, otherwise: bb22];
    }

    bb22: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_2);
        _59 = core::slice::<impl [(anchor_lang::prelude::Pubkey, &reserve::Reserve)]>::len(move _60) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_60);
        _61 = CheckedSub(_59, const 1_usize);
        assert(!move (_61.1: bool), "attempt to compute `{} - {}`, which would overflow", move _59, const 1_usize) -> [success: bb24, unwind continue];
    }

    bb24: {
        _46 = move (_61.0: usize);
        StorageDead(_59);
        goto -> bb29;
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_48);
        goto -> bb27;
    }

    bb27: {
        StorageLive(_62);
        _62 = &(*_2);
        _46 = core::slice::<impl [(anchor_lang::prelude::Pubkey, &reserve::Reserve)]>::len(move _62) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_62);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_50);
        StorageDead(_47);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _46;
        _67 = CheckedAdd(_66, const 1_usize);
        assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", move _66, const 1_usize) -> [success: bb30, unwind continue];
    }

    bb30: {
        _65 = move (_67.0: usize);
        StorageDead(_66);
        StorageLive(_68);
        _68 = _46;
        _69 = CheckedAdd(_65, _68);
        assert(!move (_69.1: bool), "attempt to compute `{} + {}`, which would overflow", move _65, move _68) -> [success: bb31, unwind continue];
    }

    bb31: {
        _64 = move (_69.0: usize);
        StorageDead(_68);
        StorageDead(_65);
        _158 = const true;
        _63 = Vec::<RequiredIx>::with_capacity(move _64) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_64);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _46;
        _70 = Vec::<RequiredIx>::with_capacity(move _71) -> [return: bb33, unwind: bb79];
    }

    bb33: {
        _157 = const true;
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_2);
        _75 = core::slice::<impl [(anchor_lang::prelude::Pubkey, &reserve::Reserve)]>::iter(move _76) -> [return: bb34, unwind: bb77];
    }

    bb34: {
        StorageDead(_76);
        StorageLive(_77);
        _77 = _46;
        _74 = <std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &reserve::Reserve)> as Iterator>::take(move _75, move _77) -> [return: bb35, unwind: bb77];
    }

    bb35: {
        StorageDead(_77);
        StorageDead(_75);
        _73 = <std::iter::Take<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &reserve::Reserve)>> as IntoIterator>::into_iter(move _74) -> [return: bb36, unwind: bb77];
    }

    bb36: {
        StorageDead(_74);
        StorageLive(_78);
        _78 = move _73;
        goto -> bb37;
    }

    bb37: {
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &mut _78;
        _82 = &mut (*_83);
        _81 = <std::iter::Take<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &reserve::Reserve)>> as Iterator>::next(move _82) -> [return: bb38, unwind: bb77];
    }

    bb38: {
        StorageDead(_82);
        _84 = discriminant(_81);
        switchInt(move _84) -> [0: bb40, 1: bb39, otherwise: bb6];
    }

    bb39: {
        StorageLive(_86);
        _86 = ((_81 as Some).0: &(anchor_lang::prelude::Pubkey, &state::reserve::Reserve));
        StorageLive(_87);
        StorageLive(_88);
        _88 = &mut _63;
        StorageLive(_89);
        StorageLive(_90);
        _90 = RequiredIxType::RefreshReserve;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _94 = SizeOf([(anchor_lang::prelude::Pubkey, usize); 1]);
        _95 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 1]);
        _96 = alloc::alloc::exchange_malloc(move _94, move _95) -> [return: bb41, unwind: bb77];
    }

    bb40: {
        _72 = const ();
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &mut _63;
        StorageLive(_102);
        StorageLive(_103);
        _103 = RequiredIxType::RefreshObligation;
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _107 = SizeOf([(anchor_lang::prelude::Pubkey, usize); 1]);
        _108 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 1]);
        _109 = alloc::alloc::exchange_malloc(move _107, move _108) -> [return: bb44, unwind: bb77];
    }

    bb41: {
        StorageLive(_97);
        _97 = ShallowInitBox(move _96, [(anchor_lang::prelude::Pubkey, usize); 1]);
        StorageLive(_98);
        StorageLive(_99);
        _99 = ((*_86).0: anchor_lang::prelude::Pubkey);
        _98 = (move _99, const 0_usize);
        StorageDead(_99);
        _176 = (((_97.0: std::ptr::Unique<[(anchor_lang::prelude::Pubkey, usize); 1]>).0: std::ptr::NonNull<[(anchor_lang::prelude::Pubkey, usize); 1]>).0: *const [(anchor_lang::prelude::Pubkey, usize); 1]);
        _184 = _176 as *const () (PtrToPtr);
        _185 = _184 as usize (Transmute);
        _186 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 1]);
        _187 = Sub(_186, const 1_usize);
        _188 = BitAnd(_185, _187);
        _189 = Eq(_188, const 0_usize);
        assert(_189, "misaligned pointer dereference: address must be a multiple of {} but is {}", _186, _185) -> [success: bb82, unwind unreachable];
    }

    bb42: {
        StorageDead(_92);
        _89 = RequiredIx { kind: move _90, accounts: move _91 };
        StorageDead(_91);
        StorageDead(_90);
        _87 = Vec::<RequiredIx>::push(move _88, move _89) -> [return: bb43, unwind: bb77];
    }

    bb43: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        _80 = const ();
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        _79 = const ();
        goto -> bb37;
    }

    bb44: {
        StorageLive(_110);
        _110 = ShallowInitBox(move _109, [(anchor_lang::prelude::Pubkey, usize); 1]);
        StorageLive(_111);
        StorageLive(_112);
        _112 = (*_3);
        _111 = (move _112, const 1_usize);
        StorageDead(_112);
        _177 = (((_110.0: std::ptr::Unique<[(anchor_lang::prelude::Pubkey, usize); 1]>).0: std::ptr::NonNull<[(anchor_lang::prelude::Pubkey, usize); 1]>).0: *const [(anchor_lang::prelude::Pubkey, usize); 1]);
        _178 = _177 as *const () (PtrToPtr);
        _179 = _178 as usize (Transmute);
        _180 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 1]);
        _181 = Sub(_180, const 1_usize);
        _182 = BitAnd(_179, _181);
        _183 = Eq(_182, const 0_usize);
        assert(_183, "misaligned pointer dereference: address must be a multiple of {} but is {}", _180, _179) -> [success: bb81, unwind unreachable];
    }

    bb45: {
        StorageDead(_105);
        _102 = RequiredIx { kind: move _103, accounts: move _104 };
        StorageDead(_104);
        StorageDead(_103);
        _100 = Vec::<RequiredIx>::push(move _101, move _102) -> [return: bb46, unwind: bb77];
    }

    bb46: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(*_2);
        _115 = core::slice::<impl [(anchor_lang::prelude::Pubkey, &reserve::Reserve)]>::iter(move _116) -> [return: bb47, unwind: bb77];
    }

    bb47: {
        StorageDead(_116);
        StorageLive(_117);
        _117 = _4;
        _114 = <std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &reserve::Reserve)> as Iterator>::zip::<&[reserve::ReserveFarmKind]>(move _115, move _117) -> [return: bb48, unwind: bb77];
    }

    bb48: {
        StorageDead(_117);
        StorageDead(_115);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_3);
        StorageLive(_120);
        _120 = &mut _63;
        StorageLive(_121);
        _121 = &mut _70;
        _118 = {closure@programs\klend\src\utils\refresh_ix_utils.rs:169:19: 169:60} { obligation_address: move _119, required_pre_ixs: move _120, required_post_ixs: move _121 };
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        _113 = <Zip<std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, &reserve::Reserve)>, std::slice::Iter<'_, reserve::ReserveFarmKind>> as Iterator>::for_each::<{closure@programs\klend\src\utils\refresh_ix_utils.rs:169:19: 169:60}>(move _114, move _118) -> [return: bb49, unwind: bb77];
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &mut _63;
        _124 = <Vec<RequiredIx> as DerefMut>::deref_mut(move _125) -> [return: bb50, unwind: bb77];
    }

    bb50: {
        _123 = &mut (*_124);
        StorageDead(_125);
        _122 = core::slice::<impl [RequiredIx]>::reverse(move _123) -> [return: bb51, unwind: bb77];
    }

    bb51: {
        StorageDead(_123);
        StorageDead(_124);
        StorageDead(_122);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_43;
        StorageLive(_130);
        StorageLive(_131);
        _158 = const false;
        _131 = move _63;
        StorageLive(_132);
        _132 = AppendedIxType::PreIxs;
        _130 = (move _131, move _132);
        _128 = <{closure@programs\klend\src\utils\refresh_ix_utils.rs:68:22: 68:93} as Fn<(Vec<RequiredIx>, AppendedIxType)>>::call(move _129, move _130) -> [return: bb52, unwind: bb77];
    }

    bb52: {
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb53, unwind: bb77];
    }

    bb53: {
        StorageDead(_128);
        _133 = discriminant(_127);
        switchInt(move _133) -> [0: bb54, 1: bb55, otherwise: bb6];
    }

    bb54: {
        StorageLive(_137);
        _137 = ((_127 as Continue).0: ());
        _126 = _137;
        StorageDead(_137);
        _163 = discriminant(_127);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_43;
        StorageLive(_142);
        StorageLive(_143);
        _157 = const false;
        _143 = move _70;
        StorageLive(_144);
        _144 = AppendedIxType::PostIxs;
        _142 = (move _143, move _144);
        _140 = <{closure@programs\klend\src\utils\refresh_ix_utils.rs:68:22: 68:93} as Fn<(Vec<RequiredIx>, AppendedIxType)>>::call(move _141, move _142) -> [return: bb57, unwind: bb77];
    }

    bb55: {
        StorageLive(_134);
        _134 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _136) -> [return: bb56, unwind: bb75];
    }

    bb56: {
        StorageDead(_136);
        StorageDead(_134);
        _169 = discriminant(_127);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb73;
    }

    bb57: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_141);
        _139 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _140) -> [return: bb58, unwind: bb77];
    }

    bb58: {
        StorageDead(_140);
        _145 = discriminant(_139);
        switchInt(move _145) -> [0: bb59, 1: bb60, otherwise: bb6];
    }

    bb59: {
        StorageLive(_149);
        _149 = ((_139 as Continue).0: ());
        _138 = _149;
        StorageDead(_149);
        _165 = discriminant(_139);
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = const "Finished check_refresh";
        _151 = &(*_152);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb62, unwind: bb77];
    }

    bb60: {
        StorageLive(_146);
        _146 = move ((_139 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_148);
        _148 = move _146;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _148) -> [return: bb61, unwind: bb74];
    }

    bb61: {
        StorageDead(_148);
        StorageDead(_146);
        _167 = discriminant(_139);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb73;
    }

    bb62: {
        StorageDead(_151);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_153);
        _153 = solana_program::log::sol_log_compute_units() -> [return: bb63, unwind: bb77];
    }

    bb63: {
        StorageDead(_153);
        StorageLive(_154);
        _154 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _154);
        StorageDead(_154);
        _157 = const false;
        StorageDead(_70);
        _158 = const false;
        StorageDead(_63);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_9);
        goto -> bb67;
    }

    bb64: {
        _157 = const false;
        StorageDead(_70);
        _158 = const false;
        StorageDead(_63);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_39);
        goto -> bb66;
    }

    bb65: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_9);
        goto -> bb67;
    }

    bb67: {
        return;
    }

    bb68 (cleanup): {
        drop(_27) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        resume;
    }

    bb70: {
        _159 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const "Instruction was called via CPI!";
        _23 = &(*_24);
        _22 = solana_program::log::sol_log(move _23) -> [return: bb9, unwind continue];
    }

    bb71: {
        _161 = discriminant(_13);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_9;
        _41 = <BpfInstructionLoader<'_, '_> as InstructionLoader>::load_current_index(move _42) -> [return: bb14, unwind continue];
    }

    bb72: {
        drop(_70) -> [return: bb64, unwind: bb79];
    }

    bb73: {
        switchInt(_157) -> [0: bb64, otherwise: bb72];
    }

    bb74 (cleanup): {
        _173 = discriminant(_139);
        goto -> bb77;
    }

    bb75 (cleanup): {
        _174 = discriminant(_127);
        goto -> bb77;
    }

    bb76 (cleanup): {
        drop(_70) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_157) -> [0: bb79, otherwise: bb76];
    }

    bb78 (cleanup): {
        drop(_63) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_158) -> [0: bb69, otherwise: bb78];
    }

    bb80 (cleanup): {
        _175 = discriminant(_13);
        goto -> bb69;
    }

    bb81: {
        (*_177) = [move _111];
        StorageDead(_111);
        _106 = move _110;
        _105 = move _106 as std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize)]> (PointerCoercion(Unsize));
        StorageDead(_110);
        StorageDead(_106);
        _104 = std::slice::<impl [(anchor_lang::prelude::Pubkey, usize)]>::into_vec::<std::alloc::Global>(move _105) -> [return: bb45, unwind: bb77];
    }

    bb82: {
        (*_176) = [move _98];
        StorageDead(_98);
        _93 = move _97;
        _92 = move _93 as std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize)]> (PointerCoercion(Unsize));
        StorageDead(_97);
        StorageDead(_93);
        _91 = std::slice::<impl [(anchor_lang::prelude::Pubkey, usize)]>::into_vec::<std::alloc::Global>(move _92) -> [return: bb42, unwind: bb77];
    }
}
