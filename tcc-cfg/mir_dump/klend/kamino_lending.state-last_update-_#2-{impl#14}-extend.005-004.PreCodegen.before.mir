// MIR for `last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\public.rs:443:9: 443:88>::extend` before PreCodegen

fn last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\public.rs:443:9: 443:88>::extend(_1: &mut last_update::PriceStatusFlags, _2: T) -> () {
    debug self => _1;
    debug iterator => _2;
    let mut _0: ();
    let mut _3: <T as std::iter::IntoIterator>::IntoIter;
    let mut _4: T;
    let mut _5: <T as std::iter::IntoIterator>::IntoIter;
    let mut _6: ();
    let _7: ();
    let mut _8: std::option::Option<state::last_update::PriceStatusFlags>;
    let mut _9: &mut <T as std::iter::IntoIterator>::IntoIter;
    let mut _10: &mut <T as std::iter::IntoIterator>::IntoIter;
    let mut _11: isize;
    let mut _12: !;
    let mut _14: &mut state::last_update::PriceStatusFlags;
    let mut _15: state::last_update::PriceStatusFlags;
    scope 1 {
        debug iter => _5;
        let _13: state::last_update::PriceStatusFlags;
        scope 2 {
            debug item => _13;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = move _2;
        _3 = <T as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _5;
        _9 = &mut (*_10);
        _8 = <<T as IntoIterator>::IntoIter as Iterator>::next(move _9) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = ((_8 as Some).0: state::last_update::PriceStatusFlags);
        StorageLive(_14);
        _14 = &mut (*_1);
        StorageLive(_15);
        _15 = _13;
        _7 = last_update::_::<impl last_update::PriceStatusFlags>::insert(move _14, move _15) -> [return: bb7, unwind: bb9];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = const ();
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        drop(_5) -> [return: bb8, unwind: bb10];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        _6 = const ();
        goto -> bb2;
    }

    bb8: {
        StorageDead(_5);
        StorageDead(_3);
        return;
    }

    bb9 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}
