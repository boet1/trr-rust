// MIR for `check_ltv_not_worse_if_marked_for_deleveraging` before PreCodegen

fn check_ltv_not_worse_if_marked_for_deleveraging(_1: &obligation::Obligation, _2: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _3: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _4: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug obligation => _1;
    debug initial_ltv => _2;
    debug resulting_borrow_factor_adjusted_debt_value => _3;
    debug resulting_deposited_value => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: bool;
    let mut _7: &state::obligation::Obligation;
    let _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: bool;
    let mut _12: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: !;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &std::string::String;
    let _20: std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 2];
    let _25: &[&str; 2];
    let _26: [&str; 2];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let mut _28: &[core::fmt::rt::Argument<'_>; 2];
    let _29: &[core::fmt::rt::Argument<'_>; 2];
    let _30: [core::fmt::rt::Argument<'_>; 2];
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _33: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _36: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _37: anchor_lang::error::Error;
    let mut _38: anchor_lang::error::AnchorError;
    let mut _39: std::string::String;
    let mut _40: &LendingError;
    let _41: LendingError;
    let mut _42: u32;
    let mut _43: LendingError;
    let mut _44: std::string::String;
    let mut _45: &LendingError;
    let _46: LendingError;
    let mut _47: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _48: anchor_lang::error::ErrorOrigin;
    let mut _49: anchor_lang::error::Source;
    let mut _50: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _51: ();
    scope 1 {
        debug resulting_ltv => _8;
        let _21: std::string::String;
        let mut _52: &LendingError;
        let mut _53: &LendingError;
        let mut _54: &[&str; 2];
        scope 2 {
            debug res => _21;
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = obligation::Obligation::is_marked_for_deleveraging(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb18, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = _4;
        _8 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_8;
        StorageLive(_13);
        _13 = &_2;
        _11 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _12, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _11) -> [0: bb17, otherwise: bb5];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _54 = const _;
        _25 = &(*_54);
        _24 = &(*_25);
        _23 = move _24 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_2;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _32) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_8;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _35) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_35);
        _30 = [move _31, move _34];
        StorageDead(_34);
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = move _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_28);
        _22 = Arguments::<'_>::new_v1(move _23, move _27) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_27);
        StorageDead(_23);
        _21 = format(move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        _20 = move _21;
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = <std::string::String as Deref>::deref(move _18) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_16);
        drop(_20) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _53 = const _;
        _40 = &(*_53);
        _39 = LendingError::name(move _40) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        _43 = LendingError::WorseLtvBlocked;
        _42 = <LendingError as Into<u32>>::into(move _43) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _52 = const _;
        _45 = &(*_52);
        _44 = <LendingError as ToString>::to_string(move _45) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        StorageDead(_45);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 908_u32 };
        _48 = anchor_lang::error::ErrorOrigin::Source(move _49);
        StorageDead(_49);
        _47 = std::option::Option::<ErrorOrigin>::Some(move _48);
        StorageDead(_48);
        StorageLive(_50);
        _50 = std::option::Option::<ComparedValues>::None;
        _38 = anchor_lang::error::AnchorError { error_name: move _39, error_code_number: move _42, error_msg: move _44, error_origin: move _47, compared_values: move _50 };
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_39);
        _37 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _38) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        StorageDead(_38);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _37);
        StorageDead(_37);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb20;
    }

    bb17: {
        StorageDead(_13);
        StorageDead(_12);
        _5 = const ();
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_7);
        _5 = const ();
        goto -> bb19;
    }

    bb19: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_51);
        _51 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _51);
        StorageDead(_51);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_39) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_20) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}
