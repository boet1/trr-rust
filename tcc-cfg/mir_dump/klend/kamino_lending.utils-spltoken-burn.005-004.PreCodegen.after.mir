// MIR for `spltoken::burn` after PreCodegen

fn spltoken::burn(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug token_mint => _1;
    debug user_token_ata => _2;
    debug user => _3;
    debug token_program => _4;
    debug burn_amount => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _8: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token::Burn<'_>>;
    let mut _10: anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: anchor_spl::token::Burn<'_>;
    let mut _12: anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: u64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: ();
    let mut _21: ();
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    let mut _26: isize;
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _20;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = move _4;
        StorageLive(_11);
        StorageLive(_12);
        _12 = move _1;
        StorageLive(_13);
        _13 = move _2;
        StorageLive(_14);
        _14 = move _3;
        _11 = anchor_spl::token::Burn::<'_> { mint: move _12, from: move _13, authority: move _14 };
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        _9 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token::Burn<'_>>::new(move _10, move _11) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = _5;
        _8 = anchor_spl::token::burn(move _9, move _15) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = ((_7 as Continue).0: ());
        _6 = _20;
        StorageDead(_20);
        _22 = discriminant(_7);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_21);
        _21 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _21);
        StorageDead(_21);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _24 = discriminant(_7);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _26 = discriminant(_7);
        goto -> bb9;
    }
}
