digraph Mir_0_11902 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U128::div_mod_knuth(_1: utils::fraction::uint_types::U128, _2: utils::fraction::uint_types::U128, _3: usize, _4: usize) -&gt; (utils::fraction::uint_types::U128, utils::fraction::uint_types::U128)<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let _7: ();<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _11: usize;<br align="left"/>let mut _12: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _15: !;<br align="left"/>let _16: ();<br align="left"/>let mut _17: bool;<br align="left"/>let _18: ();<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: usize;<br align="left"/>let mut _23: (usize, bool);<br align="left"/>let mut _24: !;<br align="left"/>let _25: u32;<br align="left"/>let mut _26: u64;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: (usize, bool);<br align="left"/>let mut _30: usize;<br align="left"/>let mut _31: bool;<br align="left"/>let _32: ();<br align="left"/>let mut _33: &amp;ReErased mut utils::fraction::uint_types::U128;<br align="left"/>let mut _34: u32;<br align="left"/>let mut _35: [u64; 3_usize];<br align="left"/>let mut _36: utils::fraction::uint_types::U128;<br align="left"/>let mut _37: u32;<br align="left"/>let mut _38: utils::fraction::uint_types::U128;<br align="left"/>let _39: u64;<br align="left"/>let _40: usize;<br align="left"/>let mut _41: usize;<br align="left"/>let mut _42: (usize, bool);<br align="left"/>let mut _43: usize;<br align="left"/>let mut _44: bool;<br align="left"/>let _45: u64;<br align="left"/>let _46: usize;<br align="left"/>let mut _47: usize;<br align="left"/>let mut _48: (usize, bool);<br align="left"/>let mut _49: usize;<br align="left"/>let mut _50: bool;<br align="left"/>let _51: ();<br align="left"/>let mut _52: std::iter::Rev&lt;std::ops::RangeInclusive&lt;usize&gt;&gt;;<br align="left"/>let mut _53: std::iter::Rev&lt;std::ops::RangeInclusive&lt;usize&gt;&gt;;<br align="left"/>let mut _54: std::ops::RangeInclusive&lt;usize&gt;;<br align="left"/>let mut _55: usize;<br align="left"/>let mut _56: std::iter::Rev&lt;std::ops::RangeInclusive&lt;usize&gt;&gt;;<br align="left"/>let mut _57: ();<br align="left"/>let _58: ();<br align="left"/>let mut _59: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _60: &amp;ReErased mut std::iter::Rev&lt;std::ops::RangeInclusive&lt;usize&gt;&gt;;<br align="left"/>let mut _61: &amp;ReErased mut std::iter::Rev&lt;std::ops::RangeInclusive&lt;usize&gt;&gt;;<br align="left"/>let mut _62: isize;<br align="left"/>let mut _63: !;<br align="left"/>let _64: usize;<br align="left"/>let _65: u64;<br align="left"/>let _66: usize;<br align="left"/>let mut _67: usize;<br align="left"/>let mut _68: usize;<br align="left"/>let mut _69: (usize, bool);<br align="left"/>let mut _70: usize;<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: u64;<br align="left"/>let mut _73: bool;<br align="left"/>let mut _74: u64;<br align="left"/>let mut _75: u64;<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: u64;<br align="left"/>let mut _78: (u64, u64);<br align="left"/>let mut _79: u64;<br align="left"/>let mut _80: u64;<br align="left"/>let _81: usize;<br align="left"/>let mut _82: usize;<br align="left"/>let mut _83: usize;<br align="left"/>let mut _84: usize;<br align="left"/>let mut _85: (usize, bool);<br align="left"/>let mut _86: (usize, bool);<br align="left"/>let mut _87: usize;<br align="left"/>let mut _88: bool;<br align="left"/>let mut _89: u64;<br align="left"/>let _90: ();<br align="left"/>let _91: u64;<br align="left"/>let _92: u64;<br align="left"/>let mut _93: (u64, u64);<br align="left"/>let mut _94: u128;<br align="left"/>let mut _95: u128;<br align="left"/>let mut _96: u64;<br align="left"/>let mut _97: u128;<br align="left"/>let mut _98: u64;<br align="left"/>let mut _99: (u128, bool);<br align="left"/>let _100: ();<br align="left"/>let mut _101: bool;<br align="left"/>let mut _102: &amp;ReErased (u64, u64);<br align="left"/>let _103: (u64, u64);<br align="left"/>let mut _104: u64;<br align="left"/>let mut _105: u64;<br align="left"/>let mut _106: &amp;ReErased (u64, u64);<br align="left"/>let _107: (u64, u64);<br align="left"/>let mut _108: u64;<br align="left"/>let mut _109: u64;<br align="left"/>let _110: usize;<br align="left"/>let mut _111: usize;<br align="left"/>let mut _112: usize;<br align="left"/>let mut _113: usize;<br align="left"/>let mut _114: (usize, bool);<br align="left"/>let mut _115: (usize, bool);<br align="left"/>let mut _116: usize;<br align="left"/>let mut _117: bool;<br align="left"/>let mut _118: !;<br align="left"/>let mut _119: (u64, bool);<br align="left"/>let _120: u64;<br align="left"/>let _121: bool;<br align="left"/>let mut _122: (u64, bool);<br align="left"/>let mut _123: u64;<br align="left"/>let mut _124: u64;<br align="left"/>let mut _125: u64;<br align="left"/>let mut _126: bool;<br align="left"/>let mut _127: !;<br align="left"/>let _128: [u64; 3_usize];<br align="left"/>let mut _129: utils::fraction::uint_types::U128;<br align="left"/>let mut _130: u64;<br align="left"/>let _131: bool;<br align="left"/>let mut _132: &amp;ReErased mut [u64];<br align="left"/>let mut _133: &amp;ReErased mut [u64];<br align="left"/>let mut _134: &amp;ReErased mut [u64];<br align="left"/>let mut _135: &amp;ReErased mut [u64; 3_usize];<br align="left"/>let mut _136: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let mut _137: usize;<br align="left"/>let mut _138: &amp;ReErased [u64];<br align="left"/>let _139: &amp;ReErased [u64];<br align="left"/>let _140: &amp;ReErased [u64];<br align="left"/>let mut _141: &amp;ReErased [u64; 3_usize];<br align="left"/>let mut _142: std::ops::RangeTo&lt;usize&gt;;<br align="left"/>let mut _143: usize;<br align="left"/>let mut _144: usize;<br align="left"/>let mut _145: (usize, bool);<br align="left"/>let _146: ();<br align="left"/>let mut _147: bool;<br align="left"/>let mut _148: (u64, bool);<br align="left"/>let _149: bool;<br align="left"/>let mut _150: &amp;ReErased mut [u64];<br align="left"/>let mut _151: &amp;ReErased mut [u64];<br align="left"/>let mut _152: &amp;ReErased mut [u64];<br align="left"/>let mut _153: &amp;ReErased mut [u64; 3_usize];<br align="left"/>let mut _154: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let mut _155: usize;<br align="left"/>let mut _156: &amp;ReErased [u64];<br align="left"/>let _157: &amp;ReErased [u64];<br align="left"/>let _158: &amp;ReErased [u64];<br align="left"/>let mut _159: &amp;ReErased [u64; 2_usize];<br align="left"/>let mut _160: std::ops::RangeTo&lt;usize&gt;;<br align="left"/>let mut _161: usize;<br align="left"/>let mut _162: u64;<br align="left"/>let mut _163: u64;<br align="left"/>let _164: usize;<br align="left"/>let mut _165: usize;<br align="left"/>let mut _166: usize;<br align="left"/>let mut _167: (usize, bool);<br align="left"/>let mut _168: usize;<br align="left"/>let mut _169: bool;<br align="left"/>let mut _170: u64;<br align="left"/>let mut _171: bool;<br align="left"/>let _172: usize;<br align="left"/>let mut _173: usize;<br align="left"/>let mut _174: usize;<br align="left"/>let mut _175: (usize, bool);<br align="left"/>let mut _176: usize;<br align="left"/>let mut _177: bool;<br align="left"/>let mut _178: u64;<br align="left"/>let _179: usize;<br align="left"/>let mut _180: usize;<br align="left"/>let mut _181: bool;<br align="left"/>let _182: utils::fraction::uint_types::U128;<br align="left"/>let mut _183: [u64; 3_usize];<br align="left"/>let mut _184: u32;<br align="left"/>let mut _185: utils::fraction::uint_types::U128;<br align="left"/>let mut _186: utils::fraction::uint_types::U128;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug v =&gt; _2;<br align="left"/>debug n =&gt; _3;<br align="left"/>debug m =&gt; _4;<br align="left"/>debug shift =&gt; _25;<br align="left"/>debug u =&gt; _35;<br align="left"/>debug q =&gt; _38;<br align="left"/>debug v_n_1 =&gt; _39;<br align="left"/>debug v_n_2 =&gt; _45;<br align="left"/>debug iter =&gt; _56;<br align="left"/>debug j =&gt; _64;<br align="left"/>debug u_jn =&gt; _65;<br align="left"/>debug q_hat =&gt; _72;<br align="left"/>debug q_hat =&gt; _76;<br align="left"/>debug r_hat =&gt; _77;<br align="left"/>debug hi =&gt; _91;<br align="left"/>debug lo =&gt; _92;<br align="left"/>debug new_r_hat =&gt; _120;<br align="left"/>debug overflow =&gt; _121;<br align="left"/>debug q_hat_v =&gt; _128;<br align="left"/>debug c =&gt; _131;<br align="left"/>debug c =&gt; _149;<br align="left"/>debug remainder =&gt; _182;<br align="left"/>>;
    bb0__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = const true<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb1__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;_1<br/></td></tr><tr><td align="left">_9 = uint_types::U128::bits(move _10)</td></tr></table>>];
    bb2__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;_2<br/></td></tr><tr><td align="left">_11 = uint_types::U128::bits(move _12)</td></tr></table>>];
    bb3__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_8 = Ge(move _9, move _11)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;_2<br/></td></tr><tr><td align="left">_13 = uint_types::U128::fits_word(move _14)</td></tr></table>>];
    bb5__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb6__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_7 = const ()<br/>StorageDead(_13)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>_5 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/></td></tr><tr><td align="left">_15 = panic(const &quot;assertion failed: self.bits() &gt;= v.bits() &amp;&amp; !v.fits_word()&quot;)</td></tr></table>>];
    bb10__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_5 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = const true<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb12__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _3<br/>StorageLive(_22)<br/>_22 = _4<br/>_23 = CheckedAdd(_21, _22)<br/></td></tr><tr><td align="left">assert(!move (_23.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _21, move _22)</td></tr></table>>];
    bb13__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_20 = move (_23.0: usize)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>_19 = Le(move _20, const 2_usize)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb14__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_18 = const ()<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>_16 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_24)<br/></td></tr><tr><td align="left">_24 = panic(const &quot;assertion failed: n + m &lt;= 2&quot;)</td></tr></table>>];
    bb16__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_16 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _3<br/>_29 = CheckedSub(_28, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_29.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _28, const 1_usize)</td></tr></table>>];
    bb18__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_27 = move (_29.0: usize)<br/>StorageDead(_28)<br/>_30 = Len((_2.0: [u64; 2]))<br/>_31 = Lt(_27, _30)<br/></td></tr><tr><td align="left">assert(move _31, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _30, _27)</td></tr></table>>];
    bb19__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_26 = (_2.0: [u64; 2])[_27]<br/></td></tr><tr><td align="left">_25 = core::num::&lt;impl u64&gt;::leading_zeros(move _26)</td></tr></table>>];
    bb20__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_27)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = &amp;mut _2<br/>StorageLive(_34)<br/>_34 = _25<br/></td></tr><tr><td align="left">_32 = &lt;uint_types::U128 as ShlAssign&lt;u32&gt;&gt;::shl_assign(move _33, move _34)</td></tr></table>>];
    bb21__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = _1<br/>StorageLive(_37)<br/>_37 = _25<br/></td></tr><tr><td align="left">_35 = uint_types::U128::full_shl(move _36, move _37)</td></tr></table>>];
    bb22__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageLive(_38)<br/></td></tr><tr><td align="left">_38 = uint_types::U128::zero()</td></tr></table>>];
    bb23__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = _3<br/>_42 = CheckedSub(_41, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_42.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _41, const 1_usize)</td></tr></table>>];
    bb24__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_40 = move (_42.0: usize)<br/>StorageDead(_41)<br/>_43 = Len((_2.0: [u64; 2]))<br/>_44 = Lt(_40, _43)<br/></td></tr><tr><td align="left">assert(move _44, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _43, _40)</td></tr></table>>];
    bb25__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_39 = (_2.0: [u64; 2])[_40]<br/>StorageDead(_40)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = _3<br/>_48 = CheckedSub(_47, const 2_usize)<br/></td></tr><tr><td align="left">assert(!move (_48.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _47, const 2_usize)</td></tr></table>>];
    bb26__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_46 = move (_48.0: usize)<br/>StorageDead(_47)<br/>_49 = Len((_2.0: [u64; 2]))<br/>_50 = Lt(_46, _49)<br/></td></tr><tr><td align="left">assert(move _50, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _49, _46)</td></tr></table>>];
    bb27__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_45 = (_2.0: [u64; 2])[_46]<br/>StorageDead(_46)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = _4<br/></td></tr><tr><td align="left">_54 = RangeInclusive::&lt;usize&gt;::new(const 0_usize, move _55)</td></tr></table>>];
    bb28__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/></td></tr><tr><td align="left">_53 = &lt;RangeInclusive&lt;usize&gt; as Iterator&gt;::rev(move _54)</td></tr></table>>];
    bb29__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;Rev&lt;RangeInclusive&lt;usize&gt;&gt; as IntoIterator&gt;::into_iter(move _53)</td></tr></table>>];
    bb30__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageLive(_56)<br/>_56 = move _52<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = &amp;mut _56<br/>_60 = &amp;mut (*_61)<br/></td></tr><tr><td align="left">_59 = &lt;Rev&lt;RangeInclusive&lt;usize&gt;&gt; as Iterator&gt;::next(move _60)</td></tr></table>>];
    bb32__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>_62 = discriminant(_59)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb33__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_64)<br/>_64 = ((_59 as Some).0: usize)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>_67 = _64<br/>StorageLive(_68)<br/>_68 = _3<br/>_69 = CheckedAdd(_67, _68)<br/></td></tr><tr><td align="left">assert(!move (_69.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _67, move _68)</td></tr></table>>];
    bb34__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb35__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_51 = const ()<br/>StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_58)<br/>StorageDead(_56)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>_183 = _35<br/>StorageLive(_184)<br/>_184 = _25<br/></td></tr><tr><td align="left">_182 = uint_types::U128::full_shr(move _183, move _184)</td></tr></table>>];
    bb36__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_66 = move (_69.0: usize)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>_70 = Len(_35)<br/>_71 = Lt(_66, _70)<br/></td></tr><tr><td align="left">assert(move _71, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _70, _66)</td></tr></table>>];
    bb37__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_65 = _35[_66]<br/>StorageDead(_66)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = _65<br/>StorageLive(_75)<br/>_75 = _39<br/>_73 = Lt(move _74, move _75)<br/></td></tr><tr><td align="left">switchInt(move _73)</td></tr></table>>];
    bb38__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_74)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = _65<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = _64<br/>StorageLive(_84)<br/>_84 = _3<br/>_85 = CheckedAdd(_83, _84)<br/></td></tr><tr><td align="left">assert(!move (_85.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _83, move _84)</td></tr></table>>];
    bb39__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_82 = move (_85.0: usize)<br/>StorageDead(_84)<br/>StorageDead(_83)<br/>_86 = CheckedSub(_82, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_86.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _82, const 1_usize)</td></tr></table>>];
    bb40__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_81 = move (_86.0: usize)<br/>StorageDead(_82)<br/>_87 = Len(_35)<br/>_88 = Lt(_81, _87)<br/></td></tr><tr><td align="left">assert(move _88, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _87, _81)</td></tr></table>>];
    bb41__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_80 = _35[_81]<br/>StorageLive(_89)<br/>_89 = _39<br/></td></tr><tr><td align="left">_78 = uint_types::U128::div_mod_word(move _79, move _80, move _89)</td></tr></table>>];
    bb42__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/>StorageLive(_76)<br/>_76 = (_78.0: u64)<br/>StorageLive(_77)<br/>_77 = (_78.1: u64)<br/>StorageDead(_81)<br/>StorageDead(_78)<br/>StorageLive(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = _76<br/></td></tr><tr><td align="left">_95 = &lt;u128 as From&lt;u64&gt;&gt;::from(move _96)</td></tr></table>>];
    bb44__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>_98 = _45<br/></td></tr><tr><td align="left">_97 = &lt;u128 as From&lt;u64&gt;&gt;::from(move _98)</td></tr></table>>];
    bb45__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_99 = CheckedMul(_95, _97)<br/></td></tr><tr><td align="left">assert(!move (_99.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _95, move _97)</td></tr></table>>];
    bb46__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">_94 = move (_99.0: u128)<br/>StorageDead(_97)<br/>StorageDead(_95)<br/></td></tr><tr><td align="left">_93 = uint_types::U128::split_u128(move _94)</td></tr></table>>];
    bb47__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>StorageLive(_91)<br/>_91 = (_93.0: u64)<br/>StorageLive(_92)<br/>_92 = (_93.1: u64)<br/>StorageDead(_93)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>_104 = _91<br/>StorageLive(_105)<br/>_105 = _92<br/>_103 = (move _104, move _105)<br/>_102 = &amp;_103<br/>StorageDead(_105)<br/>StorageDead(_104)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = _77<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>_112 = _64<br/>StorageLive(_113)<br/>_113 = _3<br/>_114 = CheckedAdd(_112, _113)<br/></td></tr><tr><td align="left">assert(!move (_114.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _112, move _113)</td></tr></table>>];
    bb48__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">_111 = move (_114.0: usize)<br/>StorageDead(_113)<br/>StorageDead(_112)<br/>_115 = CheckedSub(_111, const 2_usize)<br/></td></tr><tr><td align="left">assert(!move (_115.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _111, const 2_usize)</td></tr></table>>];
    bb49__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_110 = move (_115.0: usize)<br/>StorageDead(_111)<br/>_116 = Len(_35)<br/>_117 = Lt(_110, _116)<br/></td></tr><tr><td align="left">assert(move _117, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _116, _110)</td></tr></table>>];
    bb50__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">_109 = _35[_110]<br/>_107 = (move _108, move _109)<br/>_106 = &amp;_107<br/>StorageDead(_109)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">_101 = &lt;(u64, u64) as PartialOrd&gt;::le(move _102, move _106)</td></tr></table>>];
    bb51__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left">switchInt(move _101)</td></tr></table>>];
    bb52__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_103)<br/>StorageDead(_102)<br/>_90 = const ()<br/>StorageDead(_101)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_103)<br/>StorageDead(_102)<br/>_100 = const ()<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>_119 = CheckedSub(_76, const 1_u64)<br/></td></tr><tr><td align="left">assert(!move (_119.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _76, const 1_u64)</td></tr></table>>];
    bb54__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">_76 = move (_119.0: u64)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = _77<br/>StorageLive(_124)<br/>_124 = _39<br/></td></tr><tr><td align="left">_122 = core::num::&lt;impl u64&gt;::overflowing_add(move _123, move _124)</td></tr></table>>];
    bb55__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_123)<br/>StorageLive(_120)<br/>_120 = (_122.0: u64)<br/>StorageLive(_121)<br/>_121 = (_122.1: bool)<br/>StorageDead(_122)<br/>StorageLive(_125)<br/>_125 = _120<br/>_77 = move _125<br/>StorageDead(_125)<br/>StorageLive(_126)<br/>_126 = _121<br/></td></tr><tr><td align="left">switchInt(move _126)</td></tr></table>>];
    bb56__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">_90 = const ()<br/>StorageDead(_126)<br/>StorageDead(_121)<br/>StorageDead(_120)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_57 = const ()<br/>StorageDead(_126)<br/>StorageDead(_121)<br/>StorageDead(_120)<br/>StorageDead(_92)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>_72 = _76<br/>StorageDead(_77)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_74)<br/></td></tr><tr><td align="left">_72 = core::num::&lt;impl u64&gt;::max_value()</td></tr></table>>];
    bb60__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = _2<br/>StorageLive(_130)<br/>_130 = _72<br/></td></tr><tr><td align="left">_128 = uint_types::U128::full_mul_u64(move _129, move _130)</td></tr></table>>];
    bb61__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/>StorageDead(_129)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>_135 = &amp;mut _35<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>_137 = _64<br/>_136 = RangeFrom::&lt;usize&gt; { start: move _137 }<br/>StorageDead(_137)<br/></td></tr><tr><td align="left">_134 = &lt;[u64; 3] as IndexMut&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index_mut(move _135, move _136)</td></tr></table>>];
    bb62__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_135)<br/>_133 = &amp;mut (*_134)<br/>_132 = &amp;mut (*_133)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>_141 = &amp;_128<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>_144 = _3<br/>_145 = CheckedAdd(_144, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_145.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _144, const 1_usize)</td></tr></table>>];
    bb63__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">_143 = move (_145.0: usize)<br/>StorageDead(_144)<br/>_142 = RangeTo::&lt;usize&gt; { end: move _143 }<br/>StorageDead(_143)<br/></td></tr><tr><td align="left">_140 = &lt;[u64; 3] as Index&lt;RangeTo&lt;usize&gt;&gt;&gt;::index(move _141, move _142)</td></tr></table>>];
    bb64__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/>StorageDead(_141)<br/>_139 = &amp;(*_140)<br/>_138 = &amp;(*_139)<br/></td></tr><tr><td align="left">_131 = uint_types::U128::sub_slice(move _132, move _138)</td></tr></table>>];
    bb65__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_132)<br/>StorageDead(_140)<br/>StorageDead(_139)<br/>StorageDead(_134)<br/>StorageDead(_133)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>_147 = _131<br/></td></tr><tr><td align="left">switchInt(move _147)</td></tr></table>>];
    bb66__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">_148 = CheckedSub(_72, const 1_u64)<br/></td></tr><tr><td align="left">assert(!move (_148.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _72, const 1_u64)</td></tr></table>>];
    bb67__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">_72 = move (_148.0: u64)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>_153 = &amp;mut _35<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>_155 = _64<br/>_154 = RangeFrom::&lt;usize&gt; { start: move _155 }<br/>StorageDead(_155)<br/></td></tr><tr><td align="left">_152 = &lt;[u64; 3] as IndexMut&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index_mut(move _153, move _154)</td></tr></table>>];
    bb68__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_154)<br/>StorageDead(_153)<br/>_151 = &amp;mut (*_152)<br/>_150 = &amp;mut (*_151)<br/>StorageLive(_156)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>_159 = &amp;(_2.0: [u64; 2])<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>_161 = _3<br/>_160 = RangeTo::&lt;usize&gt; { end: move _161 }<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">_158 = &lt;[u64; 2] as Index&lt;RangeTo&lt;usize&gt;&gt;&gt;::index(move _159, move _160)</td></tr></table>>];
    bb69__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_160)<br/>StorageDead(_159)<br/>_157 = &amp;(*_158)<br/>_156 = &amp;(*_157)<br/></td></tr><tr><td align="left">_149 = uint_types::U128::add_slice(move _150, move _156)</td></tr></table>>];
    bb70__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_156)<br/>StorageDead(_150)<br/>StorageDead(_158)<br/>StorageDead(_157)<br/>StorageDead(_152)<br/>StorageDead(_151)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>_165 = _64<br/>StorageLive(_166)<br/>_166 = _3<br/>_167 = CheckedAdd(_165, _166)<br/></td></tr><tr><td align="left">assert(!move (_167.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _165, move _166)</td></tr></table>>];
    bb71__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">_164 = move (_167.0: usize)<br/>StorageDead(_166)<br/>StorageDead(_165)<br/>_168 = Len(_35)<br/>_169 = Lt(_164, _168)<br/></td></tr><tr><td align="left">assert(move _169, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _168, _164)</td></tr></table>>];
    bb72__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">_163 = _35[_164]<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>_171 = _149<br/></td></tr><tr><td align="left">_170 = &lt;u64 as From&lt;bool&gt;&gt;::from(move _171)</td></tr></table>>];
    bb73__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_171)<br/></td></tr><tr><td align="left">_162 = core::num::&lt;impl u64&gt;::wrapping_add(move _163, move _170)</td></tr></table>>];
    bb74__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_170)<br/>StorageDead(_163)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>_173 = _64<br/>StorageLive(_174)<br/>_174 = _3<br/>_175 = CheckedAdd(_173, _174)<br/></td></tr><tr><td align="left">assert(!move (_175.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _173, move _174)</td></tr></table>>];
    bb75__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">_172 = move (_175.0: usize)<br/>StorageDead(_174)<br/>StorageDead(_173)<br/>_176 = Len(_35)<br/>_177 = Lt(_172, _176)<br/></td></tr><tr><td align="left">assert(move _177, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _176, _172)</td></tr></table>>];
    bb76__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">_35[_172] = move _162<br/>StorageDead(_162)<br/>StorageDead(_172)<br/>StorageDead(_164)<br/>_146 = const ()<br/>StorageDead(_149)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">_146 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb78__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_147)<br/>StorageDead(_146)<br/>StorageLive(_178)<br/>_178 = _72<br/>StorageLive(_179)<br/>_179 = _64<br/>_180 = Len((_38.0: [u64; 2]))<br/>_181 = Lt(_179, _180)<br/></td></tr><tr><td align="left">assert(move _181, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _180, _179)</td></tr></table>>];
    bb79__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">(_38.0: [u64; 2])[_179] = move _178<br/>StorageDead(_178)<br/>StorageDead(_179)<br/>_58 = const ()<br/>StorageDead(_131)<br/>StorageDead(_128)<br/>StorageDead(_72)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/>StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_58)<br/>_57 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb80__0_11902 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_184)<br/>StorageDead(_183)<br/>StorageLive(_185)<br/>_185 = _38<br/>StorageLive(_186)<br/>_186 = _182<br/>_0 = (move _185, move _186)<br/>StorageDead(_186)<br/>StorageDead(_185)<br/>StorageDead(_182)<br/>StorageDead(_45)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_35)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11902 -> bb10__0_11902 [label="0"];
    bb0__0_11902 -> bb1__0_11902 [label="otherwise"];
    bb1__0_11902 -> bb2__0_11902 [label="return"];
    bb2__0_11902 -> bb3__0_11902 [label="return"];
    bb3__0_11902 -> bb8__0_11902 [label="0"];
    bb3__0_11902 -> bb4__0_11902 [label="otherwise"];
    bb4__0_11902 -> bb5__0_11902 [label="return"];
    bb5__0_11902 -> bb7__0_11902 [label="0"];
    bb5__0_11902 -> bb6__0_11902 [label="otherwise"];
    bb6__0_11902 -> bb9__0_11902 [label=""];
    bb7__0_11902 -> bb11__0_11902 [label=""];
    bb8__0_11902 -> bb9__0_11902 [label=""];
    bb10__0_11902 -> bb11__0_11902 [label=""];
    bb11__0_11902 -> bb16__0_11902 [label="0"];
    bb11__0_11902 -> bb12__0_11902 [label="otherwise"];
    bb12__0_11902 -> bb13__0_11902 [label="success"];
    bb13__0_11902 -> bb15__0_11902 [label="0"];
    bb13__0_11902 -> bb14__0_11902 [label="otherwise"];
    bb14__0_11902 -> bb17__0_11902 [label=""];
    bb16__0_11902 -> bb17__0_11902 [label=""];
    bb17__0_11902 -> bb18__0_11902 [label="success"];
    bb18__0_11902 -> bb19__0_11902 [label="success"];
    bb19__0_11902 -> bb20__0_11902 [label="return"];
    bb20__0_11902 -> bb21__0_11902 [label="return"];
    bb21__0_11902 -> bb22__0_11902 [label="return"];
    bb22__0_11902 -> bb23__0_11902 [label="return"];
    bb23__0_11902 -> bb24__0_11902 [label="success"];
    bb24__0_11902 -> bb25__0_11902 [label="success"];
    bb25__0_11902 -> bb26__0_11902 [label="success"];
    bb26__0_11902 -> bb27__0_11902 [label="success"];
    bb27__0_11902 -> bb28__0_11902 [label="return"];
    bb28__0_11902 -> bb29__0_11902 [label="return"];
    bb29__0_11902 -> bb30__0_11902 [label="return"];
    bb30__0_11902 -> bb31__0_11902 [label=""];
    bb31__0_11902 -> bb32__0_11902 [label="return"];
    bb32__0_11902 -> bb35__0_11902 [label="0"];
    bb32__0_11902 -> bb33__0_11902 [label="1"];
    bb32__0_11902 -> bb34__0_11902 [label="otherwise"];
    bb33__0_11902 -> bb36__0_11902 [label="success"];
    bb35__0_11902 -> bb80__0_11902 [label="return"];
    bb36__0_11902 -> bb37__0_11902 [label="success"];
    bb37__0_11902 -> bb59__0_11902 [label="0"];
    bb37__0_11902 -> bb38__0_11902 [label="otherwise"];
    bb38__0_11902 -> bb39__0_11902 [label="success"];
    bb39__0_11902 -> bb40__0_11902 [label="success"];
    bb40__0_11902 -> bb41__0_11902 [label="success"];
    bb41__0_11902 -> bb42__0_11902 [label="return"];
    bb42__0_11902 -> bb43__0_11902 [label=""];
    bb43__0_11902 -> bb44__0_11902 [label="return"];
    bb44__0_11902 -> bb45__0_11902 [label="return"];
    bb45__0_11902 -> bb46__0_11902 [label="success"];
    bb46__0_11902 -> bb47__0_11902 [label="return"];
    bb47__0_11902 -> bb48__0_11902 [label="success"];
    bb48__0_11902 -> bb49__0_11902 [label="success"];
    bb49__0_11902 -> bb50__0_11902 [label="success"];
    bb50__0_11902 -> bb51__0_11902 [label="return"];
    bb51__0_11902 -> bb53__0_11902 [label="0"];
    bb51__0_11902 -> bb52__0_11902 [label="otherwise"];
    bb52__0_11902 -> bb58__0_11902 [label=""];
    bb53__0_11902 -> bb54__0_11902 [label="success"];
    bb54__0_11902 -> bb55__0_11902 [label="return"];
    bb55__0_11902 -> bb57__0_11902 [label="0"];
    bb55__0_11902 -> bb56__0_11902 [label="otherwise"];
    bb56__0_11902 -> bb58__0_11902 [label=""];
    bb57__0_11902 -> bb43__0_11902 [label=""];
    bb58__0_11902 -> bb60__0_11902 [label=""];
    bb59__0_11902 -> bb60__0_11902 [label="return"];
    bb60__0_11902 -> bb61__0_11902 [label="return"];
    bb61__0_11902 -> bb62__0_11902 [label="return"];
    bb62__0_11902 -> bb63__0_11902 [label="success"];
    bb63__0_11902 -> bb64__0_11902 [label="return"];
    bb64__0_11902 -> bb65__0_11902 [label="return"];
    bb65__0_11902 -> bb77__0_11902 [label="0"];
    bb65__0_11902 -> bb66__0_11902 [label="otherwise"];
    bb66__0_11902 -> bb67__0_11902 [label="success"];
    bb67__0_11902 -> bb68__0_11902 [label="return"];
    bb68__0_11902 -> bb69__0_11902 [label="return"];
    bb69__0_11902 -> bb70__0_11902 [label="return"];
    bb70__0_11902 -> bb71__0_11902 [label="success"];
    bb71__0_11902 -> bb72__0_11902 [label="success"];
    bb72__0_11902 -> bb73__0_11902 [label="return"];
    bb73__0_11902 -> bb74__0_11902 [label="return"];
    bb74__0_11902 -> bb75__0_11902 [label="success"];
    bb75__0_11902 -> bb76__0_11902 [label="success"];
    bb76__0_11902 -> bb78__0_11902 [label=""];
    bb77__0_11902 -> bb78__0_11902 [label=""];
    bb78__0_11902 -> bb79__0_11902 [label="success"];
    bb79__0_11902 -> bb31__0_11902 [label=""];
}
