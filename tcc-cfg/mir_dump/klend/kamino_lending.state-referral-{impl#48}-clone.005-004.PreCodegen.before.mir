// MIR for `referral::<impl at programs\klend\src\state\referral.rs:124:1: 124:13>::clone` before PreCodegen

fn referral::<impl at programs\klend\src\state\referral.rs:124:1: 124:13>::clone(_1: &referral::ShortUrl) -> referral::ShortUrl {
    debug self => _1;
    let mut _0: state::referral::ShortUrl;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: &anchor_lang::prelude::Pubkey;
    let _4: &anchor_lang::prelude::Pubkey;
    let mut _5: std::string::String;
    let mut _6: &std::string::String;
    let _7: &std::string::String;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _3 = &(*_4);
        _2 = <anchor_lang::prelude::Pubkey as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: std::string::String);
        _6 = &(*_7);
        _5 = <std::string::String as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _0 = referral::ShortUrl { referrer: move _2, short_url: move _5 };
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
