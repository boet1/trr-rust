// MIR for `InstructionLoader::is_flash_forbidden_cpi_call` before PreCodegen

fn InstructionLoader::is_flash_forbidden_cpi_call(_1: &Self) -> std::result::Result<bool, anchor_lang::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<bool, anchor_lang::error::Error>;
    let _2: usize;
    let mut _3: u16;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _5: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _6: &Self;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: u16;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _14: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _15: &Self;
    let mut _16: usize;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _22: ();
    let mut _23: bool;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &anchor_lang::prelude::Pubkey;
    let mut _27: !;
    let _28: ();
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: !;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    scope 1 {
        debug current_index => _2;
        let _12: solana_program::instruction::Instruction;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _21: solana_program::instruction::Instruction;
        scope 6 {
            debug current_ixn => _12;
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = <Self as InstructionLoader>::load_current_index(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u16);
        _3 = _11;
        StorageDead(_11);
        _2 = move _3 as usize (IntToInt);
        StorageDead(_3);
        _32 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_1);
        StorageLive(_16);
        _16 = _2;
        _14 = <Self as InstructionLoader>::load_instruction_at(move _15, move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<bool, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb26];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        _38 = discriminant(_4);
        StorageDead(_4);
        goto -> bb21;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _14) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        StorageDead(_14);
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_13 as Continue).0: solana_program::instruction::Instruction);
        _12 = move _21;
        StorageDead(_21);
        _34 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _24 = &(*_25);
        StorageLive(_26);
        _26 = &(_12.0: anchor_lang::prelude::Pubkey);
        _23 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _24, move _26) -> [return: bb12, unwind: bb23];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<bool, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _36 = discriminant(_13);
        StorageDead(_13);
        goto -> bb20;
    }

    bb12: {
        switchInt(move _23) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const true);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb19;
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _22 = const ();
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = get_stack_height() -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _29 = Gt(move _30, const _);
        switchInt(move _29) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_30);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const true);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb19;
    }

    bb17: {
        StorageDead(_30);
        _28 = const ();
        StorageDead(_29);
        StorageDead(_28);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const false);
        drop(_12) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        StorageDead(_12);
        StorageDead(_2);
        goto -> bb22;
    }

    bb19: {
        drop(_12) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        StorageDead(_12);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_2);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_12) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        _40 = discriminant(_13);
        goto -> bb24;
    }

    bb26 (cleanup): {
        _41 = discriminant(_4);
        goto -> bb24;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
