// MIR for `refresh_obligation_borrows` before PreCodegen

fn refresh_obligation_borrows(_1: &anchor_lang::prelude::Pubkey, _2: &mut obligation::Obligation, _3: &state::lending_market::LendingMarket, _4: u64, _5: std::option::Option<&state::lending_market::ElevationGroup>, _6: impl Iterator<Item = T>, _7: impl Iterator<Item = U>) -> std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> {
    debug program_id => _1;
    debug obligation => _2;
    debug lending_market => _3;
    debug slot => _4;
    debug elevation_group => _5;
    debug reserves_iter => _6;
    debug referrer_token_states_iter => _7;
    let mut _0: std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error>;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: &state::obligation::Obligation;
    let _17: ();
    let mut _18: std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}>;
    let mut _19: std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}>;
    let mut _20: std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>>;
    let mut _21: std::slice::IterMut<'_, state::obligation::ObligationLiquidity>;
    let mut _22: &mut [state::obligation::ObligationLiquidity];
    let mut _23: &mut [state::obligation::ObligationLiquidity; 5];
    let mut _24: {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30};
    let mut _26: ();
    let _27: ();
    let mut _28: std::option::Option<(usize, &mut state::obligation::ObligationLiquidity)>;
    let mut _29: &mut std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}>;
    let mut _30: &mut std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}>;
    let mut _31: isize;
    let mut _32: !;
    let mut _35: (i32, bool);
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, T>;
    let mut _38: std::result::Result<T, anchor_lang::error::Error>;
    let mut _39: std::option::Option<T>;
    let mut _40: &mut impl Iterator<Item = T>;
    let mut _41: anchor_lang::error::Error;
    let mut _42: anchor_lang::error::AnchorError;
    let mut _43: std::string::String;
    let mut _44: &LendingError;
    let _45: LendingError;
    let mut _46: u32;
    let mut _47: LendingError;
    let mut _48: std::string::String;
    let mut _49: &LendingError;
    let _50: LendingError;
    let mut _51: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _52: anchor_lang::error::ErrorOrigin;
    let mut _53: anchor_lang::error::Source;
    let mut _54: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _61: &T;
    let mut _63: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _65: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _66: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _67: &T;
    let mut _68: {closure@programs\klend\src\lending_market\lending_operations.rs:1163:22: 1163:25};
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _74: ();
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _76: std::result::Result<(), anchor_lang::error::Error>;
    let mut _77: &state::obligation::ObligationLiquidity;
    let mut _78: &state::reserve::Reserve;
    let _79: &state::reserve::Reserve;
    let mut _80: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _81: anchor_lang::prelude::Pubkey;
    let mut _82: usize;
    let mut _83: u64;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _90: state::reserve::BigFractionBytes;
    let mut _91: &state::reserve::Reserve;
    let mut _92: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _94: &state::obligation::ObligationLiquidity;
    let _95: ();
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _97: std::result::Result<(), anchor_lang::error::Error>;
    let mut _98: &mut state::obligation::ObligationLiquidity;
    let mut _99: utils::fraction::BigFraction;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _106: &state::obligation::ObligationLiquidity;
    let mut _108: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _109: u64;
    let mut _110: (u64, bool);
    let _111: ();
    let mut _112: isize;
    let _114: ();
    let mut _115: bool;
    let mut _116: &[u8];
    let mut _117: &[u8; 20];
    let _118: &state::reserve::Reserve;
    let mut _119: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _120: &u8;
    let _121: &u8;
    let mut _122: !;
    let mut _123: anchor_lang::error::Error;
    let mut _124: anchor_lang::error::AnchorError;
    let mut _125: std::string::String;
    let mut _126: &LendingError;
    let _127: LendingError;
    let mut _128: u32;
    let mut _129: LendingError;
    let mut _130: std::string::String;
    let mut _131: &LendingError;
    let _132: LendingError;
    let mut _133: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _134: anchor_lang::error::ErrorOrigin;
    let mut _135: anchor_lang::error::Source;
    let mut _136: std::option::Option<anchor_lang::error::ComparedValues>;
    let _137: ();
    let mut _138: bool;
    let mut _139: &anchor_lang::prelude::Pubkey;
    let mut _140: &anchor_lang::prelude::Pubkey;
    let mut _141: !;
    let mut _142: anchor_lang::error::Error;
    let mut _143: anchor_lang::error::Error;
    let mut _144: anchor_lang::error::AnchorError;
    let mut _145: std::string::String;
    let mut _146: &LendingError;
    let _147: LendingError;
    let mut _148: u32;
    let mut _149: LendingError;
    let mut _150: std::string::String;
    let mut _151: &LendingError;
    let _152: LendingError;
    let mut _153: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _154: anchor_lang::error::ErrorOrigin;
    let mut _155: anchor_lang::error::Source;
    let mut _156: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _157: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _158: anchor_lang::prelude::Pubkey;
    let mut _159: anchor_lang::prelude::Pubkey;
    let mut _160: u64;
    let mut _161: u64;
    let mut _162: &state::reserve::Reserve;
    let mut _163: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _164: u64;
    let mut _165: &mut state::reserve::Reserve;
    let mut _166: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _167: u64;
    let mut _168: &mut state::reserve::Reserve;
    let mut _169: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _170: (u64, bool);
    let mut _171: u64;
    let _172: ();
    let mut _173: bool;
    let mut _174: &state::reserve::ReserveStatus;
    let _175: state::reserve::ReserveStatus;
    let mut _176: &state::reserve::ReserveConfig;
    let _177: &state::reserve::Reserve;
    let mut _178: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _179: &state::reserve::ReserveStatus;
    let _180: state::reserve::ReserveStatus;
    let mut _181: (u8, bool);
    let _182: ();
    let mut _183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _184: std::result::Result<(), anchor_lang::error::Error>;
    let mut _185: &anchor_lang::prelude::Pubkey;
    let mut _186: anchor_lang::prelude::Pubkey;
    let mut _187: &mut state::reserve::Reserve;
    let mut _188: &mut state::reserve::Reserve;
    let mut _189: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let _191: &anchor_lang::prelude::Pubkey;
    let mut _192: u16;
    let mut _193: u64;
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _195: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _196: &state::last_update::LastUpdate;
    let mut _197: u64;
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _203: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _204: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _205: bool;
    let mut _206: &mut impl Iterator<Item = U>;
    let mut _207: &mut impl Iterator<Item = U>;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _214: &state::reserve::Reserve;
    let _215: &state::reserve::Reserve;
    let mut _216: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _217: &state::obligation::ObligationLiquidity;
    let mut _218: u128;
    let mut _219: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _220: ();
    let mut _221: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _222: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _224: &state::reserve::Reserve;
    let _225: &state::reserve::Reserve;
    let mut _226: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _227: bool;
    let mut _228: &std::option::Option<&state::lending_market::ElevationGroup>;
    let _229: ();
    let mut _230: bool;
    let mut _231: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _232: &u64;
    let mut _233: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _234: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _235: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _237: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _238: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _239: u128;
    let mut _240: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _241: ();
    let mut _242: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _243: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _244: u8;
    let mut _245: &state::reserve::Reserve;
    let mut _246: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _247: usize;
    let mut _248: usize;
    let mut _249: bool;
    let _250: ();
    let mut _251: &mut state::last_update::PriceStatusFlags;
    let mut _252: state::last_update::PriceStatusFlags;
    let mut _253: &state::last_update::LastUpdate;
    let _254: &state::reserve::Reserve;
    let mut _255: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _256: ();
    let _257: ();
    let mut _258: std::fmt::Arguments<'_>;
    let mut _259: &[&str];
    let mut _260: &[&str; 5];
    let _261: &[&str; 5];
    let _262: [&str; 5];
    let mut _263: &[core::fmt::rt::Argument<'_>];
    let mut _264: &[core::fmt::rt::Argument<'_>; 4];
    let _265: &[core::fmt::rt::Argument<'_>; 4];
    let _266: [core::fmt::rt::Argument<'_>; 4];
    let mut _267: core::fmt::rt::Argument<'_>;
    let mut _268: &&&str;
    let _269: &&&str;
    let _270: &&str;
    let _271: &str;
    let mut _272: &state::token_info::TokenInfo;
    let _273: &state::reserve::Reserve;
    let mut _274: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _275: core::fmt::rt::Argument<'_>;
    let mut _276: &utils::fraction::FractionDisplay<'_>;
    let _277: &utils::fraction::FractionDisplay<'_>;
    let _278: utils::fraction::FractionDisplay<'_>;
    let mut _279: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _280: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _281: &state::obligation::ObligationLiquidity;
    let mut _282: core::fmt::rt::Argument<'_>;
    let mut _283: &utils::fraction::FractionDisplay<'_>;
    let _284: &utils::fraction::FractionDisplay<'_>;
    let _285: utils::fraction::FractionDisplay<'_>;
    let mut _286: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _287: core::fmt::rt::Argument<'_>;
    let mut _288: &utils::fraction::FractionDisplay<'_>;
    let _289: &utils::fraction::FractionDisplay<'_>;
    let _290: utils::fraction::FractionDisplay<'_>;
    let mut _291: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _293: bool;
    let mut _294: &std::option::Option<&state::lending_market::ElevationGroup>;
    let _295: ();
    let mut _296: bool;
    let mut _297: i32;
    let mut _298: !;
    let mut _299: anchor_lang::error::Error;
    let mut _300: anchor_lang::error::AnchorError;
    let mut _301: std::string::String;
    let mut _302: &LendingError;
    let _303: LendingError;
    let mut _304: u32;
    let mut _305: LendingError;
    let mut _306: std::string::String;
    let mut _307: &LendingError;
    let _308: LendingError;
    let mut _309: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _310: anchor_lang::error::ErrorOrigin;
    let mut _311: anchor_lang::error::Source;
    let mut _312: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _313: u64;
    let mut _314: state::types::RefreshObligationBorrowsResult;
    let mut _315: u8;
    let mut _316: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _317: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _318: std::option::Option<u64>;
    let mut _319: state::last_update::PriceStatusFlags;
    let mut _320: u64;
    let mut _321: std::option::Option<u64>;
    let mut _322: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _333: bool;
    let mut _334: bool;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    scope 1 {
        debug borrowed_assets_market_value => _8;
        let mut _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug borrow_factor_adjusted_debt_value => _9;
            let mut _10: state::last_update::PriceStatusFlags;
            scope 3 {
                debug prices_state => _10;
                let mut _11: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug highest_borrow_factor_f => _11;
                    let mut _12: u8;
                    scope 5 {
                        debug num_of_obsolete_reserves => _12;
                        let _13: bool;
                        scope 6 {
                            debug obligation_has_referrer => _13;
                            let mut _15: u64;
                            scope 7 {
                                debug borrowed_amounts_accumulator_for_elevation_group => _15;
                                let mut _16: i32;
                                scope 8 {
                                    debug num_borrow_reserves => _16;
                                    let mut _25: std::iter::Filter<std::iter::Enumerate<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}>;
                                    let _292: std::option::Option<u64>;
                                    let mut _331: &LendingError;
                                    let mut _332: &LendingError;
                                    scope 9 {
                                        debug iter => _25;
                                        let _33: usize;
                                        let _34: &mut state::obligation::ObligationLiquidity;
                                        scope 10 {
                                            debug index => _33;
                                            debug borrow => _34;
                                            let _36: T;
                                            let _56: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _59: T;
                                            let mut _329: &LendingError;
                                            let mut _330: &LendingError;
                                            scope 11 {
                                                debug borrow_reserve => _36;
                                                let _60: anchor_lang::prelude::Pubkey;
                                                scope 16 {
                                                    debug borrow_reserve_info_key => _60;
                                                    let _62: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
                                                    let _70: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _73: std::cell::RefMut<'_, state::reserve::Reserve>;
                                                    scope 17 {
                                                        debug borrow_reserve => _62;
                                                        let _85: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _88: ();
                                                        let _89: utils::fraction::BigFraction;
                                                        scope 22 {
                                                            debug residual => _85;
                                                            scope 23 {
                                                            }
                                                        }
                                                        scope 24 {
                                                            debug val => _88;
                                                            scope 25 {
                                                            }
                                                        }
                                                        scope 26 {
                                                            debug cumulative_borrow_rate_bf => _89;
                                                            let _93: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                            scope 27 {
                                                                debug previous_borrowed_amount_f => _93;
                                                                let _101: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _104: ();
                                                                let _105: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                scope 28 {
                                                                    debug residual => _101;
                                                                    scope 29 {
                                                                    }
                                                                }
                                                                scope 30 {
                                                                    debug val => _104;
                                                                    scope 31 {
                                                                    }
                                                                }
                                                                scope 32 {
                                                                    debug borrowed_amount_f => _105;
                                                                    let _107: u64;
                                                                    scope 33 {
                                                                        debug borrowed_amount => _107;
                                                                        let _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _202: u64;
                                                                        let _209: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _212: ();
                                                                        let _213: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                        let mut _324: &state::reserve::ReserveStatus;
                                                                        scope 34 {
                                                                            debug elevation_group => _113;
                                                                            let _113: &state::lending_market::ElevationGroup;
                                                                            let mut _325: &LendingError;
                                                                            let mut _326: &LendingError;
                                                                            let mut _327: &LendingError;
                                                                            let mut _328: &LendingError;
                                                                        }
                                                                        scope 35 {
                                                                            debug residual => _199;
                                                                            scope 36 {
                                                                            }
                                                                        }
                                                                        scope 37 {
                                                                            debug val => _202;
                                                                            scope 38 {
                                                                            }
                                                                        }
                                                                        scope 39 {
                                                                            debug residual => _209;
                                                                            scope 40 {
                                                                            }
                                                                        }
                                                                        scope 41 {
                                                                            debug val => _212;
                                                                            scope 42 {
                                                                            }
                                                                        }
                                                                        scope 43 {
                                                                            debug market_value_f => _213;
                                                                            let _223: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                            scope 44 {
                                                                                debug borrow_factor_f => _223;
                                                                                let _236: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                                scope 45 {
                                                                                    debug borrow_factor_adjusted_market_value => _236;
                                                                                    let mut _323: &[&str; 5];
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 18 {
                                                        debug residual => _70;
                                                        scope 19 {
                                                        }
                                                    }
                                                    scope 20 {
                                                        debug val => _73;
                                                        scope 21 {
                                                        }
                                                    }
                                                }
                                            }
                                            scope 12 {
                                                debug residual => _56;
                                                scope 13 {
                                                }
                                            }
                                            scope 14 {
                                                debug val => _59;
                                                scope 15 {
                                                }
                                            }
                                        }
                                    }
                                    scope 46 {
                                        debug borrowed_amount_in_elevation_group => _292;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _334 = const false;
        _333 = const false;
        StorageLive(_8);
        _8 = const _;
        StorageLive(_9);
        _9 = const _;
        StorageLive(_10);
        _10 = last_update::_::<impl last_update::PriceStatusFlags>::all() -> [return: bb1, unwind: bb151];
    }

    bb1: {
        StorageLive(_11);
        _11 = const _;
        StorageLive(_12);
        _12 = const 0_u8;
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_2);
        _13 = obligation::Obligation::has_referrer(move _14) -> [return: bb2, unwind: bb151];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_15);
        _15 = const 0_u64;
        StorageLive(_16);
        _16 = const 0_i32;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &mut ((*_2).7: [state::obligation::ObligationLiquidity; 5]);
        _22 = move _23 as &mut [state::obligation::ObligationLiquidity] (PointerCoercion(Unsize));
        StorageDead(_23);
        _21 = core::slice::<impl [obligation::ObligationLiquidity]>::iter_mut(move _22) -> [return: bb3, unwind: bb151];
    }

    bb3: {
        StorageDead(_22);
        _20 = <std::slice::IterMut<'_, obligation::ObligationLiquidity> as Iterator>::enumerate(move _21) -> [return: bb4, unwind: bb151];
    }

    bb4: {
        StorageDead(_21);
        StorageLive(_24);
        _24 = {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30};
        _19 = <Enumerate<std::slice::IterMut<'_, obligation::ObligationLiquidity>> as Iterator>::filter::<{closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}>(move _20, move _24) -> [return: bb5, unwind: bb151];
    }

    bb5: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = <Filter<Enumerate<std::slice::IterMut<'_, obligation::ObligationLiquidity>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}> as IntoIterator>::into_iter(move _19) -> [return: bb6, unwind: bb151];
    }

    bb6: {
        StorageDead(_19);
        StorageLive(_25);
        _25 = move _18;
        goto -> bb7;
    }

    bb7: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &mut _25;
        _29 = &mut (*_30);
        _28 = <Filter<Enumerate<std::slice::IterMut<'_, obligation::ObligationLiquidity>>, {closure@programs\klend\src\lending_market\lending_operations.rs:1152:17: 1152:30}> as Iterator>::next(move _29) -> [return: bb8, unwind: bb151];
    }

    bb8: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        StorageLive(_33);
        _33 = (((_28 as Some).0: (usize, &mut state::obligation::ObligationLiquidity)).0: usize);
        StorageLive(_34);
        _34 = move (((_28 as Some).0: (usize, &mut state::obligation::ObligationLiquidity)).1: &mut state::obligation::ObligationLiquidity);
        _35 = CheckedAdd(_16, const 1_i32);
        assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_i32) -> [success: bb12, unwind: bb151];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _17 = const ();
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &_5;
        _293 = std::option::Option::<&state::lending_market::ElevationGroup>::is_some(move _294) -> [return: bb123, unwind: bb151];
    }

    bb12: {
        _16 = move (_35.0: i32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut _6;
        _39 = <impl Iterator<Item = T> as Iterator>::next(move _40) -> [return: bb13, unwind: bb151];
    }

    bb13: {
        _334 = const true;
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _330 = const _;
        _44 = &(*_330);
        _43 = LendingError::name(move _44) -> [return: bb14, unwind: bb162];
    }

    bb14: {
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        _47 = LendingError::InvalidAccountInput;
        _46 = <LendingError as Into<u32>>::into(move _47) -> [return: bb15, unwind: bb150];
    }

    bb15: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _329 = const _;
        _49 = &(*_329);
        _48 = <LendingError as ToString>::to_string(move _49) -> [return: bb16, unwind: bb150];
    }

    bb16: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1157_u32 };
        _52 = anchor_lang::error::ErrorOrigin::Source(move _53);
        StorageDead(_53);
        _51 = std::option::Option::<ErrorOrigin>::Some(move _52);
        StorageDead(_52);
        StorageLive(_54);
        _54 = std::option::Option::<ComparedValues>::None;
        _42 = anchor_lang::error::AnchorError { error_name: move _43, error_code_number: move _46, error_msg: move _48, error_origin: move _51, compared_values: move _54 };
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_43);
        _41 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _42) -> [return: bb17, unwind: bb162];
    }

    bb17: {
        StorageDead(_42);
        _334 = const false;
        _38 = std::option::Option::<T>::ok_or::<anchor_lang::error::Error>(move _39, move _41) -> [return: bb18, unwind: bb162];
    }

    bb18: {
        StorageDead(_41);
        _334 = const false;
        StorageDead(_39);
        _37 = <std::result::Result<T, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb19, unwind: bb151];
    }

    bb19: {
        StorageDead(_38);
        _55 = discriminant(_37);
        switchInt(move _55) -> [0: bb20, 1: bb21, otherwise: bb10];
    }

    bb20: {
        StorageLive(_59);
        _59 = move ((_37 as Continue).0: T);
        _36 = move _59;
        StorageDead(_59);
        _335 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_36;
        _60 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _61) -> [return: bb23, unwind: bb149];
    }

    bb21: {
        StorageLive(_56);
        _56 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _58) -> [return: bb22, unwind: bb160];
    }

    bb22: {
        StorageDead(_58);
        StorageDead(_56);
        _357 = discriminant(_37);
        StorageDead(_37);
        goto -> bb141;
    }

    bb23: {
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_36;
        _66 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_mut(move _67) -> [return: bb24, unwind: bb149];
    }

    bb24: {
        StorageDead(_67);
        StorageLive(_68);
        _68 = {closure@programs\klend\src\lending_market\lending_operations.rs:1163:22: 1163:25};
        _65 = std::result::Result::<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:1163:22: 1163:25}>(move _66, move _68) -> [return: bb25, unwind: bb149];
    }

    bb25: {
        StorageDead(_68);
        StorageDead(_66);
        _64 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _65) -> [return: bb26, unwind: bb149];
    }

    bb26: {
        StorageDead(_65);
        _69 = discriminant(_64);
        switchInt(move _69) -> [0: bb27, 1: bb28, otherwise: bb10];
    }

    bb27: {
        StorageLive(_73);
        _73 = move ((_64 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _63 = move _73;
        StorageDead(_73);
        _62 = &mut _63;
        _337 = discriminant(_64);
        StorageDead(_64);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_34);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &(*_62);
        _79 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _80) -> [return: bb30, unwind: bb148];
    }

    bb28: {
        StorageLive(_70);
        _70 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_72);
        _72 = move _70;
        _0 = <std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _72) -> [return: bb29, unwind: bb159];
    }

    bb29: {
        StorageDead(_72);
        StorageDead(_70);
        _355 = discriminant(_64);
        StorageDead(_64);
        goto -> bb140;
    }

    bb30: {
        _78 = &(*_79);
        StorageDead(_80);
        StorageLive(_81);
        _81 = _60;
        StorageLive(_82);
        _82 = _33;
        StorageLive(_83);
        _83 = _4;
        _76 = check_obligation_liquidity_borrow_reserve(move _77, move _78, move _81, move _82, move _83) -> [return: bb31, unwind: bb148];
    }

    bb31: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        _75 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _76) -> [return: bb32, unwind: bb148];
    }

    bb32: {
        StorageDead(_76);
        _84 = discriminant(_75);
        switchInt(move _84) -> [0: bb33, 1: bb34, otherwise: bb10];
    }

    bb33: {
        StorageLive(_88);
        _88 = ((_75 as Continue).0: ());
        _74 = _88;
        StorageDead(_88);
        _339 = discriminant(_75);
        StorageDead(_79);
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_62);
        _91 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _92) -> [return: bb36, unwind: bb148];
    }

    bb34: {
        StorageLive(_85);
        _85 = move ((_75 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _87) -> [return: bb35, unwind: bb158];
    }

    bb35: {
        StorageDead(_87);
        StorageDead(_85);
        _353 = discriminant(_75);
        StorageDead(_79);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb139;
    }

    bb36: {
        StorageDead(_92);
        _90 = (((*_91).5: state::reserve::ReserveLiquidity).10: state::reserve::BigFractionBytes);
        _89 = <utils::fraction::BigFraction as From<reserve::BigFractionBytes>>::from(move _90) -> [return: bb37, unwind: bb148];
    }

    bb37: {
        StorageDead(_90);
        StorageDead(_91);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &(*_34);
        _93 = obligation::ObligationLiquidity::borrowed_amount(move _94) -> [return: bb38, unwind: bb148];
    }

    bb38: {
        StorageDead(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &mut (*_34);
        StorageLive(_99);
        _99 = _89;
        _97 = obligation::ObligationLiquidity::accrue_interest(move _98, move _99) -> [return: bb39, unwind: bb148];
    }

    bb39: {
        StorageDead(_99);
        StorageDead(_98);
        _96 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb148];
    }

    bb40: {
        StorageDead(_97);
        _100 = discriminant(_96);
        switchInt(move _100) -> [0: bb41, 1: bb42, otherwise: bb10];
    }

    bb41: {
        StorageLive(_104);
        _104 = ((_96 as Continue).0: ());
        _95 = _104;
        StorageDead(_104);
        _341 = discriminant(_96);
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_34);
        _105 = obligation::ObligationLiquidity::borrowed_amount(move _106) -> [return: bb44, unwind: bb148];
    }

    bb42: {
        StorageLive(_101);
        _101 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_103);
        _103 = move _101;
        _0 = <std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _103) -> [return: bb43, unwind: bb157];
    }

    bb43: {
        StorageDead(_103);
        StorageDead(_101);
        _351 = discriminant(_96);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb138;
    }

    bb44: {
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_105;
        _107 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_ceil::<u64>(move _108) -> [return: bb45, unwind: bb148];
    }

    bb45: {
        StorageDead(_108);
        StorageLive(_109);
        _109 = _107;
        _110 = CheckedAdd(_15, _109);
        assert(!move (_110.1: bool), "attempt to compute `{} + {}`, which would overflow", _15, move _109) -> [success: bb46, unwind: bb148];
    }

    bb46: {
        _15 = move (_110.0: u64);
        StorageDead(_109);
        StorageLive(_111);
        _112 = discriminant(_5);
        switchInt(move _112) -> [1: bb47, otherwise: bb64];
    }

    bb47: {
        StorageLive(_113);
        _113 = ((_5 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_62);
        _118 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _119) -> [return: bb48, unwind: bb148];
    }

    bb48: {
        StorageDead(_119);
        _117 = &(((*_118).9: state::reserve::ReserveConfig).22: [u8; 20]);
        _116 = move _117 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &((*_113).1: u8);
        _120 = &(*_121);
        _115 = core::slice::<impl [u8]>::contains(move _116, move _120) -> [return: bb49, unwind: bb148];
    }

    bb49: {
        switchInt(move _115) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_121);
        StorageDead(_118);
        _114 = const ();
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_60;
        StorageLive(_140);
        _140 = &((*_113).7: anchor_lang::prelude::Pubkey);
        _138 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _139, move _140) -> [return: bb56, unwind: bb148];
    }

    bb51: {
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_121);
        StorageDead(_118);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _328 = const _;
        _126 = &(*_328);
        _125 = LendingError::name(move _126) -> [return: bb52, unwind: bb148];
    }

    bb52: {
        StorageDead(_126);
        StorageLive(_128);
        StorageLive(_129);
        _129 = LendingError::InconsistentElevationGroup;
        _128 = <LendingError as Into<u32>>::into(move _129) -> [return: bb53, unwind: bb147];
    }

    bb53: {
        StorageDead(_129);
        StorageLive(_130);
        StorageLive(_131);
        _327 = const _;
        _131 = &(*_327);
        _130 = <LendingError as ToString>::to_string(move _131) -> [return: bb54, unwind: bb147];
    }

    bb54: {
        StorageDead(_131);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1187_u32 };
        _134 = anchor_lang::error::ErrorOrigin::Source(move _135);
        StorageDead(_135);
        _133 = std::option::Option::<ErrorOrigin>::Some(move _134);
        StorageDead(_134);
        StorageLive(_136);
        _136 = std::option::Option::<ComparedValues>::None;
        _124 = anchor_lang::error::AnchorError { error_name: move _125, error_code_number: move _128, error_msg: move _130, error_origin: move _133, compared_values: move _136 };
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_125);
        _123 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _124) -> [return: bb55, unwind: bb148];
    }

    bb55: {
        StorageDead(_124);
        _0 = std::result::Result::<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error>::Err(move _123);
        StorageDead(_123);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb136;
    }

    bb56: {
        switchInt(move _138) -> [0: bb63, otherwise: bb57];
    }

    bb57: {
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _326 = const _;
        _146 = &(*_326);
        _145 = LendingError::name(move _146) -> [return: bb58, unwind: bb148];
    }

    bb58: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        _149 = LendingError::ElevationGroupHasAnotherDebtReserve;
        _148 = <LendingError as Into<u32>>::into(move _149) -> [return: bb59, unwind: bb146];
    }

    bb59: {
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        _325 = const _;
        _151 = &(*_325);
        _150 = <LendingError as ToString>::to_string(move _151) -> [return: bb60, unwind: bb146];
    }

    bb60: {
        StorageDead(_151);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1194_u32 };
        _154 = anchor_lang::error::ErrorOrigin::Source(move _155);
        StorageDead(_155);
        _153 = std::option::Option::<ErrorOrigin>::Some(move _154);
        StorageDead(_154);
        StorageLive(_156);
        _156 = std::option::Option::<ComparedValues>::None;
        _144 = anchor_lang::error::AnchorError { error_name: move _145, error_code_number: move _148, error_msg: move _150, error_origin: move _153, compared_values: move _156 };
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_145);
        _143 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _144) -> [return: bb61, unwind: bb148];
    }

    bb61: {
        StorageDead(_144);
        StorageLive(_157);
        StorageLive(_158);
        _158 = _60;
        StorageLive(_159);
        _159 = ((*_113).7: anchor_lang::prelude::Pubkey);
        _157 = (move _158, move _159);
        StorageDead(_159);
        StorageDead(_158);
        _142 = anchor_lang::error::Error::with_pubkeys(move _143, move _157) -> [return: bb62, unwind: bb148];
    }

    bb62: {
        StorageDead(_157);
        StorageDead(_143);
        _0 = std::result::Result::<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error>::Err(move _142);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb136;
    }

    bb63: {
        StorageDead(_140);
        StorageDead(_139);
        _137 = const ();
        StorageDead(_138);
        StorageDead(_137);
        _111 = const ();
        StorageDead(_113);
        goto -> bb70;
    }

    bb64: {
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &(*_62);
        _162 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _163) -> [return: bb65, unwind: bb148];
    }

    bb65: {
        StorageDead(_163);
        _161 = ((*_162).11: u64);
        StorageLive(_164);
        _164 = ((*_34).6: u64);
        _160 = core::num::<impl u64>::saturating_sub(move _161, move _164) -> [return: bb66, unwind: bb148];
    }

    bb66: {
        StorageDead(_164);
        StorageDead(_161);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &mut (*_62);
        _165 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _166) -> [return: bb67, unwind: bb148];
    }

    bb67: {
        StorageDead(_166);
        ((*_165).11: u64) = move _160;
        StorageDead(_160);
        StorageDead(_165);
        StorageDead(_162);
        StorageLive(_167);
        _167 = _107;
        StorageLive(_168);
        StorageLive(_169);
        _169 = &mut (*_62);
        _168 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _169) -> [return: bb68, unwind: bb148];
    }

    bb68: {
        StorageDead(_169);
        _170 = CheckedAdd(((*_168).11: u64), _167);
        assert(!move (_170.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_168).11: u64), move _167) -> [success: bb69, unwind: bb148];
    }

    bb69: {
        ((*_168).11: u64) = move (_170.0: u64);
        StorageDead(_167);
        StorageDead(_168);
        StorageLive(_171);
        _171 = _107;
        ((*_34).6: u64) = move _171;
        StorageDead(_171);
        _111 = const ();
        goto -> bb70;
    }

    bb70: {
        StorageDead(_111);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &(*_62);
        _177 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _178) -> [return: bb71, unwind: bb148];
    }

    bb71: {
        StorageDead(_178);
        _176 = &((*_177).9: state::reserve::ReserveConfig);
        _175 = reserve::ReserveConfig::status(move _176) -> [return: bb72, unwind: bb148];
    }

    bb72: {
        _174 = &_175;
        StorageDead(_176);
        StorageLive(_179);
        _324 = const _;
        _179 = &(*_324);
        _173 = <reserve::ReserveStatus as PartialEq>::eq(move _174, move _179) -> [return: bb73, unwind: bb148];
    }

    bb73: {
        switchInt(move _173) -> [0: bb76, otherwise: bb74];
    }

    bb74: {
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        _181 = CheckedAdd(_12, const 1_u8);
        assert(!move (_181.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 1_u8) -> [success: bb75, unwind: bb148];
    }

    bb75: {
        _12 = move (_181.0: u8);
        _172 = const ();
        goto -> bb77;
    }

    bb76: {
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        _172 = const ();
        goto -> bb77;
    }

    bb77: {
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &(*_1);
        StorageLive(_186);
        _186 = _60;
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &mut (*_62);
        _188 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _189) -> [return: bb78, unwind: bb148];
    }

    bb78: {
        _187 = &mut (*_188);
        StorageDead(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &((*_2).17: anchor_lang::prelude::Pubkey);
        _190 = &(*_191);
        StorageLive(_192);
        _192 = ((*_3).5: u16);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &((*_2).1: state::last_update::LastUpdate);
        StorageLive(_197);
        _197 = _4;
        _195 = last_update::LastUpdate::slots_elapsed(move _196, move _197) -> [return: bb79, unwind: bb148];
    }

    bb79: {
        StorageDead(_197);
        StorageDead(_196);
        _194 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _195) -> [return: bb80, unwind: bb148];
    }

    bb80: {
        _333 = const true;
        StorageDead(_195);
        _198 = discriminant(_194);
        switchInt(move _198) -> [0: bb81, 1: bb82, otherwise: bb10];
    }

    bb81: {
        StorageLive(_202);
        _202 = ((_194 as Continue).0: u64);
        _193 = _202;
        StorageDead(_202);
        StorageLive(_203);
        _203 = _105;
        StorageLive(_204);
        _204 = _93;
        StorageLive(_205);
        _205 = _13;
        StorageLive(_206);
        StorageLive(_207);
        _207 = &mut _7;
        _206 = &mut (*_207);
        _184 = accumulate_referrer_fees::<'_, U, impl Iterator<Item = U>>(move _185, move _186, move _187, move _190, move _192, move _193, move _203, move _204, move _205, move _206) -> [return: bb84, unwind: bb156];
    }

    bb82: {
        StorageLive(_199);
        _199 = move ((_194 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_201);
        _201 = move _199;
        _0 = <std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _201) -> [return: bb83, unwind: bb156];
    }

    bb83: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_184);
        goto -> bb154;
    }

    bb84: {
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_185);
        _183 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _184) -> [return: bb85, unwind: bb156];
    }

    bb85: {
        StorageDead(_184);
        _208 = discriminant(_183);
        switchInt(move _208) -> [0: bb86, 1: bb87, otherwise: bb10];
    }

    bb86: {
        StorageLive(_212);
        _212 = ((_183 as Continue).0: ());
        _182 = _212;
        StorageDead(_212);
        _343 = discriminant(_183);
        StorageDead(_207);
        _345 = discriminant(_194);
        _333 = const false;
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &(*_62);
        _215 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _216) -> [return: bb89, unwind: bb148];
    }

    bb87: {
        StorageLive(_209);
        _209 = move ((_183 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_211);
        _211 = move _209;
        _0 = <std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _211) -> [return: bb88, unwind: bb155];
    }

    bb88: {
        StorageDead(_211);
        StorageDead(_209);
        _347 = discriminant(_183);
        StorageDead(_207);
        goto -> bb154;
    }

    bb89: {
        _214 = &(*_215);
        StorageDead(_216);
        StorageLive(_217);
        _217 = &(*_34);
        _213 = calculate_obligation_liquidity_market_value(move _214, move _217) -> [return: bb90, unwind: bb148];
    }

    bb90: {
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_215);
        StorageLive(_218);
        StorageLive(_219);
        _219 = _213;
        _218 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _219) -> [return: bb91, unwind: bb148];
    }

    bb91: {
        StorageDead(_219);
        ((*_34).4: u128) = move _218;
        StorageDead(_218);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &mut _8;
        StorageLive(_222);
        _222 = _213;
        _220 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as AddAssign>::add_assign(move _221, move _222) -> [return: bb92, unwind: bb148];
    }

    bb92: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &(*_62);
        _225 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _226) -> [return: bb93, unwind: bb148];
    }

    bb93: {
        _224 = &(*_225);
        StorageDead(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_5;
        _227 = std::option::Option::<&state::lending_market::ElevationGroup>::is_some(move _228) -> [return: bb94, unwind: bb148];
    }

    bb94: {
        StorageDead(_228);
        _223 = reserve::Reserve::borrow_factor_f(move _224, move _227) -> [return: bb95, unwind: bb148];
    }

    bb95: {
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_225);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_213;
        StorageLive(_232);
        _232 = &((*_3).23: u64);
        _230 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<u64>>::ge(move _231, move _232) -> [return: bb96, unwind: bb148];
    }

    bb96: {
        switchInt(move _230) -> [0: bb99, otherwise: bb97];
    }

    bb97: {
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_233);
        StorageLive(_234);
        _234 = _11;
        StorageLive(_235);
        _235 = _223;
        _233 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Ord>::max(move _234, move _235) -> [return: bb98, unwind: bb148];
    }

    bb98: {
        StorageDead(_235);
        StorageDead(_234);
        _11 = move _233;
        StorageDead(_233);
        _229 = const ();
        goto -> bb100;
    }

    bb99: {
        StorageDead(_232);
        StorageDead(_231);
        _229 = const ();
        goto -> bb100;
    }

    bb100: {
        StorageDead(_230);
        StorageDead(_229);
        StorageLive(_236);
        StorageLive(_237);
        _237 = _213;
        StorageLive(_238);
        _238 = _223;
        _236 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _237, move _238) -> [return: bb101, unwind: bb148];
    }

    bb101: {
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_239);
        StorageLive(_240);
        _240 = _236;
        _239 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _240) -> [return: bb102, unwind: bb148];
    }

    bb102: {
        StorageDead(_240);
        ((*_34).5: u128) = move _239;
        StorageDead(_239);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &mut _9;
        StorageLive(_243);
        _243 = _236;
        _241 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as AddAssign>::add_assign(move _242, move _243) -> [return: bb103, unwind: bb148];
    }

    bb103: {
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_241);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &(*_62);
        _245 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _246) -> [return: bb104, unwind: bb148];
    }

    bb104: {
        StorageDead(_246);
        _244 = (((*_245).9: state::reserve::ReserveConfig).1: u8);
        StorageLive(_247);
        _247 = _33;
        _248 = Len(((*_2).13: [u8; 5]));
        _249 = Lt(_247, _248);
        assert(move _249, "index out of bounds: the length is {} but the index is {}", move _248, _247) -> [success: bb105, unwind: bb148];
    }

    bb105: {
        ((*_2).13: [u8; 5])[_247] = move _244;
        StorageDead(_244);
        StorageDead(_247);
        StorageDead(_245);
        ((*_2).16: u8) = const 1_u8;
        StorageLive(_250);
        StorageLive(_251);
        _251 = &mut _10;
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &(*_62);
        _254 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _255) -> [return: bb106, unwind: bb148];
    }

    bb106: {
        StorageDead(_255);
        _253 = &((*_254).1: state::last_update::LastUpdate);
        _252 = last_update::LastUpdate::get_price_status(move _253) -> [return: bb107, unwind: bb148];
    }

    bb107: {
        StorageDead(_253);
        _250 = <last_update::PriceStatusFlags as BitAndAssign>::bitand_assign(move _251, move _252) -> [return: bb108, unwind: bb148];
    }

    bb108: {
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_254);
        StorageDead(_250);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _323 = const _;
        _261 = &(*_323);
        _260 = &(*_261);
        _259 = move _260 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_260);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &(*_62);
        _273 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _274) -> [return: bb109, unwind: bb148];
    }

    bb109: {
        StorageDead(_274);
        _272 = &(((*_273).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        _271 = token_info::TokenInfo::symbol(move _272) -> [return: bb110, unwind: bb148];
    }

    bb110: {
        StorageDead(_272);
        _270 = &_271;
        _269 = &_270;
        _268 = &(*_269);
        _267 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(move _268) -> [return: bb111, unwind: bb148];
    }

    bb111: {
        StorageDead(_268);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &(*_34);
        _280 = obligation::ObligationLiquidity::borrowed_amount(move _281) -> [return: bb112, unwind: bb148];
    }

    bb112: {
        _279 = &_280;
        StorageDead(_281);
        _278 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _279) -> [return: bb113, unwind: bb148];
    }

    bb113: {
        StorageDead(_279);
        _277 = &_278;
        _276 = &(*_277);
        _275 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _276) -> [return: bb114, unwind: bb148];
    }

    bb114: {
        StorageDead(_276);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_213;
        _285 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _286) -> [return: bb115, unwind: bb148];
    }

    bb115: {
        StorageDead(_286);
        _284 = &_285;
        _283 = &(*_284);
        _282 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _283) -> [return: bb116, unwind: bb148];
    }

    bb116: {
        StorageDead(_283);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_236;
        _290 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _291) -> [return: bb117, unwind: bb148];
    }

    bb117: {
        StorageDead(_291);
        _289 = &_290;
        _288 = &(*_289);
        _287 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _288) -> [return: bb118, unwind: bb148];
    }

    bb118: {
        StorageDead(_288);
        _266 = [move _267, move _275, move _282, move _287];
        StorageDead(_287);
        StorageDead(_282);
        StorageDead(_275);
        StorageDead(_267);
        _265 = &_266;
        _264 = &(*_265);
        _263 = move _264 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_264);
        _258 = Arguments::<'_>::new_v1(move _259, move _263) -> [return: bb119, unwind: bb148];
    }

    bb119: {
        StorageDead(_263);
        StorageDead(_259);
        _257 = _print(move _258) -> [return: bb120, unwind: bb148];
    }

    bb120: {
        StorageDead(_258);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_261);
        StorageDead(_257);
        _256 = const ();
        StorageDead(_256);
        _27 = const ();
        StorageDead(_236);
        StorageDead(_223);
        StorageDead(_213);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_93);
        StorageDead(_89);
        drop(_63) -> [return: bb121, unwind: bb149];
    }

    bb121: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        drop(_36) -> [return: bb122, unwind: bb151];
    }

    bb122: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        _26 = const ();
        goto -> bb7;
    }

    bb123: {
        switchInt(move _293) -> [0: bb131, otherwise: bb124];
    }

    bb124: {
        StorageDead(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = _16;
        _296 = Le(move _297, const 1_i32);
        switchInt(move _296) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        StorageDead(_297);
        _295 = const ();
        StorageDead(_296);
        StorageDead(_295);
        StorageLive(_313);
        _313 = _15;
        _292 = std::option::Option::<u64>::Some(move _313);
        StorageDead(_313);
        goto -> bb132;
    }

    bb126: {
        StorageDead(_297);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _332 = const _;
        _302 = &(*_332);
        _301 = LendingError::name(move _302) -> [return: bb127, unwind: bb151];
    }

    bb127: {
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        _305 = LendingError::InconsistentElevationGroup;
        _304 = <LendingError as Into<u32>>::into(move _305) -> [return: bb128, unwind: bb145];
    }

    bb128: {
        StorageDead(_305);
        StorageLive(_306);
        StorageLive(_307);
        _331 = const _;
        _307 = &(*_331);
        _306 = <LendingError as ToString>::to_string(move _307) -> [return: bb129, unwind: bb145];
    }

    bb129: {
        StorageDead(_307);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 1263_u32 };
        _310 = anchor_lang::error::ErrorOrigin::Source(move _311);
        StorageDead(_311);
        _309 = std::option::Option::<ErrorOrigin>::Some(move _310);
        StorageDead(_310);
        StorageLive(_312);
        _312 = std::option::Option::<ComparedValues>::None;
        _300 = anchor_lang::error::AnchorError { error_name: move _301, error_code_number: move _304, error_msg: move _306, error_origin: move _309, compared_values: move _312 };
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_301);
        _299 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _300) -> [return: bb130, unwind: bb151];
    }

    bb130: {
        StorageDead(_300);
        _0 = std::result::Result::<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error>::Err(move _299);
        StorageDead(_299);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_292);
        goto -> bb142;
    }

    bb131: {
        StorageDead(_294);
        _292 = std::option::Option::<u64>::None;
        goto -> bb132;
    }

    bb132: {
        StorageDead(_293);
        StorageLive(_314);
        StorageLive(_315);
        _315 = _12;
        StorageLive(_316);
        _316 = _8;
        StorageLive(_317);
        _317 = _9;
        StorageLive(_318);
        _318 = _292;
        StorageLive(_319);
        _319 = _10;
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &_11;
        _321 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_percent::<u64>(move _322) -> [return: bb133, unwind: bb151];
    }

    bb133: {
        StorageDead(_322);
        _320 = std::option::Option::<u64>::unwrap(move _321) -> [return: bb134, unwind: bb151];
    }

    bb134: {
        StorageDead(_321);
        _314 = state::types::RefreshObligationBorrowsResult { borrow_factor_adjusted_debt_value_f: move _317, borrowed_assets_market_value_f: move _316, prices_state: move _319, highest_borrow_factor_pct: move _320, borrowed_amount_in_elevation_group: move _318, num_of_obsolete_reserves: move _315 };
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_315);
        _0 = std::result::Result::<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error>::Ok(move _314);
        StorageDead(_314);
        StorageDead(_292);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        drop(_7) -> [return: bb135, unwind: bb152];
    }

    bb135: {
        drop(_6) -> [return: bb144, unwind: bb153];
    }

    bb136: {
        StorageDead(_113);
        StorageDead(_111);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_107);
        StorageDead(_105);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb139;
    }

    bb139: {
        drop(_63) -> [return: bb140, unwind: bb149];
    }

    bb140: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        drop(_36) -> [return: bb141, unwind: bb151];
    }

    bb141: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        drop(_7) -> [return: bb143, unwind: bb152];
    }

    bb143: {
        drop(_6) -> [return: bb144, unwind: bb153];
    }

    bb144: {
        return;
    }

    bb145 (cleanup): {
        drop(_301) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_145) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_125) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_63) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_36) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_43) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_7) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_6) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        resume;
    }

    bb154: {
        _349 = discriminant(_194);
        _333 = const false;
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb137;
    }

    bb155 (cleanup): {
        _359 = discriminant(_183);
        goto -> bb156;
    }

    bb156 (cleanup): {
        _360 = discriminant(_194);
        goto -> bb148;
    }

    bb157 (cleanup): {
        _361 = discriminant(_96);
        goto -> bb148;
    }

    bb158 (cleanup): {
        _362 = discriminant(_75);
        goto -> bb148;
    }

    bb159 (cleanup): {
        _363 = discriminant(_64);
        goto -> bb149;
    }

    bb160 (cleanup): {
        _364 = discriminant(_37);
        goto -> bb151;
    }

    bb161 (cleanup): {
        drop(_39) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        switchInt(_334) -> [0: bb151, otherwise: bb161];
    }
}
