digraph Mir_0_1946 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn reserve::CollateralExchangeRate::collateral_to_liquidity_ceil(_1: &amp;ReErased state::reserve::CollateralExchangeRate, _2: u64) -&gt; u64<br align="left"/>let _3: utils::fraction::uint_types::U256;<br align="left"/>let mut _4: u64;<br align="left"/>let _5: utils::fraction::uint_types::U256;<br align="left"/>let mut _6: utils::fraction::BigFraction;<br align="left"/>let mut _7: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _8: utils::fraction::uint_types::U256;<br align="left"/>let mut _9: u128;<br align="left"/>let _10: utils::fraction::uint_types::U256;<br align="left"/>let mut _11: std::option::Option&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _12: std::option::Option&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _13: std::option::Option&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _14: utils::fraction::uint_types::U256;<br align="left"/>let mut _15: utils::fraction::uint_types::U256;<br align="left"/>let mut _16: Closure(DefId(0:1947 ~ kamino_lending[6389]::state::reserve::{impl#8}::collateral_to_liquidity_ceil::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((utils::fraction::uint_types::U256,)) -&gt; std::option::Option&lt;utils::fraction::uint_types::U256&gt;, []), (&amp;ReErased utils::fraction::uint_types::U256,)]);<br align="left"/>let mut _17: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let mut _18: Closure(DefId(0:1948 ~ kamino_lending[6389]::state::reserve::{impl#8}::collateral_to_liquidity_ceil::{closure#1}), [i32, Binder(extern &quot;RustCall&quot; fn((utils::fraction::uint_types::U256,)) -&gt; std::option::Option&lt;utils::fraction::uint_types::U256&gt;, []), (&amp;ReErased utils::fraction::uint_types::U256,)]);<br align="left"/>let mut _19: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let mut _20: &amp;ReErased str;<br align="left"/>let _21: &amp;ReErased str;<br align="left"/>let _22: utils::fraction::BigFraction;<br align="left"/>let mut _23: utils::fraction::uint_types::U256;<br align="left"/>let _24: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _25: std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, LendingError&gt;;<br align="left"/>let mut _26: utils::fraction::BigFraction;<br align="left"/>let mut _27: &amp;ReErased str;<br align="left"/>let _28: &amp;ReErased str;<br align="left"/>let mut _29: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug collateral_amount =&gt; _2;<br align="left"/>debug collateral_amount_u256 =&gt; _3;<br align="left"/>debug liquidity_sbf =&gt; _5;<br align="left"/>debug collateral_supply_u256 =&gt; _8;<br align="left"/>debug liquidity_ceil_sbf =&gt; _10;<br align="left"/>debug liquidity_ceil_bf =&gt; _22;<br align="left"/>debug liquidity_ceil_f =&gt; _24;<br align="left"/>>;
    bb0__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = _2<br/></td></tr><tr><td align="left">_3 = &lt;uint_types::U256 as From&lt;u64&gt;&gt;::from(move _4)</td></tr></table>>];
    bb1__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = ((*_1).1: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;utils::fraction::BigFraction as From&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;&gt;&gt;::from(move _7)</td></tr></table>>];
    bb2__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_5 = (_6.0: utils::fraction::uint_types::U256)<br/>StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = ((*_1).0: u128)<br/></td></tr><tr><td align="left">_8 = &lt;uint_types::U256 as From&lt;u128&gt;&gt;::from(move _9)</td></tr></table>>];
    bb3__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/>_15 = _5<br/></td></tr><tr><td align="left">_13 = uint_types::U256::checked_mul(move _14, move _15)</td></tr></table>>];
    bb4__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;_8<br/>_16 = {closure@programs\klend\src\state\reserve.rs:902:23: 902:28} { collateral_supply_u256: move _17 }<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_12 = std::option::Option::&lt;uint_types::U256&gt;::and_then::&lt;uint_types::U256, {closure@programs\klend\src\state\reserve.rs:902:23: 902:28}&gt;(move _13, move _16)</td></tr></table>>];
    bb5__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_13)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;_8<br/>_18 = {closure@programs\klend\src\state\reserve.rs:903:23: 903:28} { collateral_supply_u256: move _19 }<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_11 = std::option::Option::&lt;uint_types::U256&gt;::and_then::&lt;uint_types::U256, {closure@programs\klend\src\state\reserve.rs:903:23: 903:28}&gt;(move _12, move _18)</td></tr></table>>];
    bb6__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_12)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = const &quot;collateral_to_liquidity_ceil: liquidity_amount overflow on calculation&quot;<br/>_20 = &amp;(*_21)<br/></td></tr><tr><td align="left">_10 = std::option::Option::&lt;uint_types::U256&gt;::expect(move _11, move _20)</td></tr></table>>];
    bb7__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_11)<br/>StorageDead(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _10<br/>_22 = utils::fraction::BigFraction(move _23)<br/>StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _22<br/></td></tr><tr><td align="left">_25 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as TryFrom&lt;utils::fraction::BigFraction&gt;&gt;::try_from(move _26)</td></tr></table>>];
    bb8__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = const &quot;collateral_to_liquidity_ceil: liquidity_amount overflow on fraction conversion&quot;<br/>_27 = &amp;(*_28)<br/></td></tr><tr><td align="left">_24 = std::result::Result::&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, LendingError&gt;::expect(move _25, move _27)</td></tr></table>>];
    bb9__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>StorageDead(_28)<br/>StorageLive(_29)<br/>_29 = &amp;_24<br/></td></tr><tr><td align="left">_0 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as utils::fraction::FractionExtra&gt;::to_ceil::&lt;u64&gt;(move _29)</td></tr></table>>];
    bb10__0_1946 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1946 -> bb1__0_1946 [label="return"];
    bb1__0_1946 -> bb2__0_1946 [label="return"];
    bb2__0_1946 -> bb3__0_1946 [label="return"];
    bb3__0_1946 -> bb4__0_1946 [label="return"];
    bb4__0_1946 -> bb5__0_1946 [label="return"];
    bb5__0_1946 -> bb6__0_1946 [label="return"];
    bb6__0_1946 -> bb7__0_1946 [label="return"];
    bb7__0_1946 -> bb8__0_1946 [label="return"];
    bb8__0_1946 -> bb9__0_1946 [label="return"];
    bb9__0_1946 -> bb10__0_1946 [label="return"];
}
