// MIR for `token_info::<impl at programs\klend\src\state\token_info.rs:74:1: 74:15>::validate_token_info_config` before PreCodegen

fn token_info::<impl at programs\klend\src\state\token_info.rs:74:1: 74:15>::validate_token_info_config(_1: &token_info::TokenInfo, _2: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _3: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _4: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _5: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug pyth_info => _2;
    debug switchboard_price_info => _3;
    debug switchboard_twap_info => _4;
    debug scope_prices_info => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: &state::token_info::TokenInfo;
    let mut _9: !;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::AnchorError;
    let mut _12: std::string::String;
    let mut _13: &LendingError;
    let _14: LendingError;
    let mut _15: u32;
    let mut _16: LendingError;
    let mut _17: std::string::String;
    let mut _18: &LendingError;
    let _19: LendingError;
    let mut _20: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _21: anchor_lang::error::ErrorOrigin;
    let mut _22: anchor_lang::error::Source;
    let mut _23: std::option::Option<anchor_lang::error::ComparedValues>;
    let _24: ();
    let mut _25: bool;
    let mut _26: &state::token_info::TokenInfo;
    let mut _27: !;
    let mut _28: anchor_lang::error::Error;
    let mut _29: anchor_lang::error::AnchorError;
    let mut _30: std::string::String;
    let mut _31: &LendingError;
    let _32: LendingError;
    let mut _33: u32;
    let mut _34: LendingError;
    let mut _35: std::string::String;
    let mut _36: &LendingError;
    let _37: LendingError;
    let mut _38: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _39: anchor_lang::error::ErrorOrigin;
    let mut _40: anchor_lang::error::Source;
    let mut _41: std::option::Option<anchor_lang::error::ComparedValues>;
    let _42: ();
    let mut _43: bool;
    let mut _44: &state::token_info::TokenInfo;
    let mut _45: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _46: !;
    let mut _47: anchor_lang::error::Error;
    let mut _48: anchor_lang::error::AnchorError;
    let mut _49: std::string::String;
    let mut _50: &LendingError;
    let _51: LendingError;
    let mut _52: u32;
    let mut _53: LendingError;
    let mut _54: std::string::String;
    let mut _55: &LendingError;
    let _56: LendingError;
    let mut _57: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _58: anchor_lang::error::ErrorOrigin;
    let mut _59: anchor_lang::error::Source;
    let mut _60: std::option::Option<anchor_lang::error::ComparedValues>;
    let _61: ();
    let mut _62: bool;
    let mut _63: &state::token_info::TokenInfo;
    let mut _64: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _65: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _66: !;
    let mut _67: anchor_lang::error::Error;
    let mut _68: anchor_lang::error::AnchorError;
    let mut _69: std::string::String;
    let mut _70: &LendingError;
    let _71: LendingError;
    let mut _72: u32;
    let mut _73: LendingError;
    let mut _74: std::string::String;
    let mut _75: &LendingError;
    let _76: LendingError;
    let mut _77: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _78: anchor_lang::error::ErrorOrigin;
    let mut _79: anchor_lang::error::Source;
    let mut _80: std::option::Option<anchor_lang::error::ComparedValues>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &state::token_info::TokenInfo;
    let mut _84: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _85: !;
    let mut _86: anchor_lang::error::Error;
    let mut _87: anchor_lang::error::AnchorError;
    let mut _88: std::string::String;
    let mut _89: &LendingError;
    let _90: LendingError;
    let mut _91: u32;
    let mut _92: LendingError;
    let mut _93: std::string::String;
    let mut _94: &LendingError;
    let _95: LendingError;
    let mut _96: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _97: anchor_lang::error::ErrorOrigin;
    let mut _98: anchor_lang::error::Source;
    let mut _99: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _100: ();
    let mut _101: &LendingError;
    let mut _102: &LendingError;
    let mut _103: &LendingError;
    let mut _104: &LendingError;
    let mut _105: &LendingError;
    let mut _106: &LendingError;
    let mut _107: &LendingError;
    let mut _108: &LendingError;
    let mut _109: &LendingError;
    let mut _110: &LendingError;

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        _7 = token_info::TokenInfo::is_valid(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        _25 = token_info::TokenInfo::is_twap_config_valid(move _26) -> [return: bb8, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _110 = const _;
        _13 = &(*_110);
        _12 = LendingError::name(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = LendingError::InvalidOracleConfig;
        _15 = <LendingError as Into<u32>>::into(move _16) -> [return: bb5, unwind: bb41];
    }

    bb5: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _109 = const _;
        _18 = &(*_109);
        _17 = <LendingError as ToString>::to_string(move _18) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\token_info.rs", line: const 83_u32 };
        _21 = anchor_lang::error::ErrorOrigin::Source(move _22);
        StorageDead(_22);
        _20 = std::option::Option::<ErrorOrigin>::Some(move _21);
        StorageDead(_21);
        StorageLive(_23);
        _23 = std::option::Option::<ComparedValues>::None;
        _11 = anchor_lang::error::AnchorError { error_name: move _12, error_code_number: move _15, error_msg: move _17, error_origin: move _20, compared_values: move _23 };
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        _10 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _11) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        StorageDead(_11);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb36;
    }

    bb8: {
        switchInt(move _25) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_26);
        _24 = const ();
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_1);
        StorageLive(_45);
        _45 = _2;
        _43 = token_info::TokenInfo::check_pyth_acc_matches(move _44, move _45) -> [return: bb15, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _108 = const _;
        _31 = &(*_108);
        _30 = LendingError::name(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = LendingError::InvalidTwapConfig;
        _33 = <LendingError as Into<u32>>::into(move _34) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _107 = const _;
        _36 = &(*_107);
        _35 = <LendingError as ToString>::to_string(move _36) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\token_info.rs", line: const 84_u32 };
        _39 = anchor_lang::error::ErrorOrigin::Source(move _40);
        StorageDead(_40);
        _38 = std::option::Option::<ErrorOrigin>::Some(move _39);
        StorageDead(_39);
        StorageLive(_41);
        _41 = std::option::Option::<ComparedValues>::None;
        _29 = anchor_lang::error::AnchorError { error_name: move _30, error_code_number: move _33, error_msg: move _35, error_origin: move _38, compared_values: move _41 };
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        _28 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _29) -> [return: bb14, unwind: bb42];
    }

    bb14: {
        StorageDead(_29);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _28);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb36;
    }

    bb15: {
        switchInt(move _43) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = const ();
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_1);
        StorageLive(_64);
        _64 = _3;
        StorageLive(_65);
        _65 = _4;
        _62 = token_info::TokenInfo::check_switchboard_acc_matches(move _63, move _64, move _65) -> [return: bb22, unwind continue];
    }

    bb17: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _106 = const _;
        _50 = &(*_106);
        _49 = LendingError::name(move _50) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        _53 = LendingError::InvalidPythPriceAccount;
        _52 = <LendingError as Into<u32>>::into(move _53) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _105 = const _;
        _55 = &(*_105);
        _54 = <LendingError as ToString>::to_string(move _55) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\token_info.rs", line: const 85_u32 };
        _58 = anchor_lang::error::ErrorOrigin::Source(move _59);
        StorageDead(_59);
        _57 = std::option::Option::<ErrorOrigin>::Some(move _58);
        StorageDead(_58);
        StorageLive(_60);
        _60 = std::option::Option::<ComparedValues>::None;
        _48 = anchor_lang::error::AnchorError { error_name: move _49, error_code_number: move _52, error_msg: move _54, error_origin: move _57, compared_values: move _60 };
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_49);
        _47 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _48) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        StorageDead(_48);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _47);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb36;
    }

    bb22: {
        switchInt(move _62) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        _61 = const ();
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &(*_1);
        StorageLive(_84);
        _84 = _5;
        _82 = token_info::TokenInfo::check_scope_acc_matches(move _83, move _84) -> [return: bb29, unwind continue];
    }

    bb24: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _104 = const _;
        _70 = &(*_104);
        _69 = LendingError::name(move _70) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        _73 = LendingError::InvalidSwitchboardAccount;
        _72 = <LendingError as Into<u32>>::into(move _73) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        _103 = const _;
        _75 = &(*_103);
        _74 = <LendingError as ToString>::to_string(move _75) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\token_info.rs", line: const 89_u32 };
        _78 = anchor_lang::error::ErrorOrigin::Source(move _79);
        StorageDead(_79);
        _77 = std::option::Option::<ErrorOrigin>::Some(move _78);
        StorageDead(_78);
        StorageLive(_80);
        _80 = std::option::Option::<ComparedValues>::None;
        _68 = anchor_lang::error::AnchorError { error_name: move _69, error_code_number: move _72, error_msg: move _74, error_origin: move _77, compared_values: move _80 };
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        _67 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _68) -> [return: bb28, unwind: bb42];
    }

    bb28: {
        StorageDead(_68);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _67);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb36;
    }

    bb29: {
        switchInt(move _82) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_84);
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_100);
        _100 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _100);
        StorageDead(_100);
        goto -> bb36;
    }

    bb31: {
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _102 = const _;
        _89 = &(*_102);
        _88 = LendingError::name(move _89) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        _92 = LendingError::InvalidScopePriceAccount;
        _91 = <LendingError as Into<u32>>::into(move _92) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        _101 = const _;
        _94 = &(*_101);
        _93 = <LendingError as ToString>::to_string(move _94) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        StorageDead(_94);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\token_info.rs", line: const 93_u32 };
        _97 = anchor_lang::error::ErrorOrigin::Source(move _98);
        StorageDead(_98);
        _96 = std::option::Option::<ErrorOrigin>::Some(move _97);
        StorageDead(_97);
        StorageLive(_99);
        _99 = std::option::Option::<ComparedValues>::None;
        _87 = anchor_lang::error::AnchorError { error_name: move _88, error_code_number: move _91, error_msg: move _93, error_origin: move _96, compared_values: move _99 };
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_88);
        _86 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _87) -> [return: bb35, unwind: bb42];
    }

    bb35: {
        StorageDead(_87);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _86);
        StorageDead(_86);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_88) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_69) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_49) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_30) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_12) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }
}
