// MIR for `global_config::<impl at programs\klend\src\state\global_config.rs:67:1: 67:18>::update_value` after PreCodegen

fn global_config::<impl at programs\klend\src\state\global_config.rs:67:1: 67:18>::update_value(_1: &mut global_config::GlobalConfig, _2: global_config::UpdateGlobalConfigMode, _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug mode => _2;
    debug value => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &mut state::global_config::GlobalConfig;
    let _5: ();
    let mut _6: u8;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _9: std::result::Result<(), anchor_lang::error::Error>;
    let mut _10: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _11: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _12: &mut anchor_lang::prelude::Pubkey;
    let mut _13: &mut anchor_lang::prelude::Pubkey;
    let mut _14: &[u8];
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: ();
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _22: std::result::Result<(), anchor_lang::error::Error>;
    let mut _23: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _24: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _25: &mut anchor_lang::prelude::Pubkey;
    let mut _26: &mut anchor_lang::prelude::Pubkey;
    let mut _27: &[u8];
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _33: ();
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    scope 1 {
        debug global_config => _4;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _19: ();
        let _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _32: ();
        scope 2 {
            debug residual => _16;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _19;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _29;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _32;
            scope 9 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = move _1;
        StorageLive(_5);
        _6 = discriminant(_2);
        switchInt(move _6) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &mut ((*_4).2: anchor_lang::prelude::Pubkey);
        _25 = &mut (*_26);
        _24 = for_field::<anchor_lang::prelude::Pubkey>(move _25) -> [return: bb11, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut ((*_4).1: anchor_lang::prelude::Pubkey);
        _12 = &mut (*_13);
        _11 = for_field::<anchor_lang::prelude::Pubkey>(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        _10 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _11, const "&mut global_config.pending_admin") -> [return: bb5, unwind: bb21];
    }

    bb5: {
        StorageDead(_11);
        StorageLive(_14);
        _14 = &(*_3);
        _9 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _10, move _14) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_10);
        _8 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        StorageDead(_9);
        _15 = discriminant(_8);
        switchInt(move _15) -> [0: bb8, 1: bb9, otherwise: bb2];
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_8 as Continue).0: ());
        _7 = _19;
        StorageDead(_19);
        _34 = discriminant(_8);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        goto -> bb18;
    }

    bb9: {
        StorageLive(_16);
        _16 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_16);
        _40 = discriminant(_8);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb19;
    }

    bb11: {
        StorageDead(_25);
        _23 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _24, const "&mut global_config.fee_collector") -> [return: bb12, unwind: bb21];
    }

    bb12: {
        StorageDead(_24);
        StorageLive(_27);
        _27 = &(*_3);
        _22 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _23, move _27) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_23);
        _21 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        StorageDead(_22);
        _28 = discriminant(_21);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb2];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_21 as Continue).0: ());
        _20 = _32;
        StorageDead(_32);
        _36 = discriminant(_21);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        _5 = const ();
        goto -> bb18;
    }

    bb16: {
        StorageLive(_29);
        _29 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _31) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        _38 = discriminant(_21);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_5);
        StorageLive(_33);
        _33 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _33);
        StorageDead(_33);
        StorageDead(_4);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        _42 = discriminant(_21);
        goto -> bb21;
    }

    bb23 (cleanup): {
        _43 = discriminant(_8);
        goto -> bb21;
    }
}
