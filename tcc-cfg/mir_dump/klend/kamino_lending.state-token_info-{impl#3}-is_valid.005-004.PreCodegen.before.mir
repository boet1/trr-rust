// MIR for `token_info::<impl at programs\klend\src\state\token_info.rs:233:1: 233:24>::is_valid` before PreCodegen

fn token_info::<impl at programs\klend\src\state\token_info.rs:233:1: 233:24>::is_valid(_1: &token_info::ScopeConfiguration) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: &state::token_info::ScopeConfiguration;
    let mut _4: bool;
    let mut _5: &[u16; 4];
    let mut _6: &[u16; 4];
    let _7: [u16; 4];
    let mut _8: &[u16; 4];
    let mut _9: &[u16; 4];
    let _10: [u16; 4];
    let mut _11: &[u16; 4];
    let mut _12: &[u16; 4];

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        _2 = token_info::ScopeConfiguration::is_enabled(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).1: [u16; 4]);
        StorageLive(_6);
        _12 = const _;
        _6 = &(*_12);
        _4 = <[u16; 4] as PartialEq>::ne(move _5, move _6) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_3);
        _0 = const true;
        goto -> bb9;
    }

    bb4: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_8);
        _8 = &((*_1).1: [u16; 4]);
        StorageLive(_9);
        _11 = const _;
        _9 = &(*_11);
        _0 = <[u16; 4] as PartialEq>::ne(move _8, move _9) -> [return: bb7, unwind continue];
    }

    bb6: {
        StorageDead(_6);
        StorageDead(_5);
        _0 = const false;
        goto -> bb8;
    }

    bb7: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_4);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_2);
        return;
    }
}
