// MIR for `refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve` before PreCodegen

fn refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve(_1: RefreshFarmsParams<'_, '_>, _2: &impl ToAccountInfo<'info>, _3: &impl ToAccountInfo<'info>, _4: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug reserves_and_farms => _1;
    debug obligation => _2;
    debug lending_market_authority => _3;
    debug lending_market => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _6: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _7: state::reserve::ReserveFarmKind;
    let mut _8: bool;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let _10: anchor_lang::prelude::Pubkey;
    let mut _11: &state::reserve::Reserve;
    let _12: &state::reserve::Reserve;
    let mut _13: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _14: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _16: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _23: state::reserve::ReserveFarmKind;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let _25: anchor_lang::prelude::Pubkey;
    let mut _26: !;
    let mut _27: anchor_lang::error::Error;
    let mut _28: LendingError;
    let mut _31: (std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, std::option::Option<&anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>);
    let mut _32: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _33: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _34: std::option::Option<&anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>;
    let mut _35: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>;
    let mut _36: isize;
    let mut _37: isize;
    let mut _39: anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: &impl ToAccountInfo<'info>;
    let mut _41: anchor_lang::prelude::AccountInfo<'_>;
    let mut _42: &impl ToAccountInfo<'info>;
    let mut _43: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _44: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _45: anchor_lang::prelude::AccountInfo<'_>;
    let mut _46: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _47: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _48: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _49: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _50: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _51: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let _52: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let mut _53: state::reserve::ReserveFarmKind;
    let mut _54: ();
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    scope 1 {
        debug reserve => _5;
        debug farms_accounts => _6;
        debug farm_kind => _7;
        let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _22: std::cell::Ref<'_, state::reserve::Reserve>;
        let _29: &anchor_lang::prelude::AccountInfo<'_>;
        let _30: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
        scope 2 {
            debug residual => _19;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _22;
            scope 5 {
            }
        }
        scope 6 {
            debug reserve_farm_state => _29;
            debug obligation_farm_user_state => _30;
            let _38: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
            scope 7 {
                debug refresh_accounts => _38;
            }
        }
    }

    bb0: {
        _56 = const false;
        _55 = const false;
        StorageLive(_5);
        _5 = (_1.0: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        StorageLive(_6);
        _6 = (_1.1: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        StorageLive(_7);
        _7 = (_1.2: state::reserve::ReserveFarmKind);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_5);
        _16 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        _15 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _55 = const true;
        _56 = const true;
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_22);
        _22 = move ((_15 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _14 = move _22;
        StorageDead(_22);
        _13 = &_14;
        _12 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _13) -> [return: bb7, unwind: bb34];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_19);
        _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _21) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_13);
        StorageDead(_11);
        _61 = discriminant(_15);
        _55 = const false;
        _56 = const false;
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb28;
    }

    bb7: {
        _11 = &(*_12);
        StorageDead(_13);
        StorageLive(_23);
        _23 = _7;
        _10 = reserve::Reserve::get_farm(move _11, move _23) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        _9 = &_10;
        StorageDead(_23);
        StorageDead(_11);
        StorageLive(_24);
        StorageLive(_25);
        _25 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _24 = &_25;
        _8 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _9, move _24) -> [return: bb10, unwind: bb34];
    }

    bb10: {
        switchInt(move _8) -> [0: bb26, otherwise: bb11];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_14) -> [return: bb36, unwind: bb38];
    }

    bb12: {
        StorageDead(_28);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _27);
        StorageDead(_27);
        goto -> bb28;
    }

    bb13: {
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_6).0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>);
        _34 = std::option::Option::<anchor_lang::prelude::AccountLoader<'_, UserState>>::as_ref(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _31 = (move _32, move _34);
        StorageDead(_34);
        StorageDead(_32);
        _37 = discriminant((_31.0: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>));
        switchInt(move _37) -> [1: bb15, otherwise: bb17];
    }

    bb15: {
        _36 = discriminant((_31.1: std::option::Option<&anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>));
        switchInt(move _36) -> [1: bb16, otherwise: bb17];
    }

    bb16: {
        _29 = (((_31.0: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>) as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        _30 = (((_31.1: std::option::Option<&anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>) as Some).0: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>);
        StorageDead(_31);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_2);
        _39 = <impl ToAccountInfo<'info> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _40) -> [return: bb18, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_27);
        StorageLive(_28);
        _28 = LendingError::FarmAccountsMissing;
        _27 = <LendingError as Into<anchor_lang::error::Error>>::into(move _28) -> [return: bb12, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &(*_3);
        _41 = <impl ToAccountInfo<'info> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _42) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_5);
        _43 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as Clone>::clone(move _44) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_29);
        _45 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _46) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_30);
        _47 = <anchor_lang::prelude::AccountLoader<'_, UserState> as Clone>::clone(move _48) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_4);
        _49 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as Clone>::clone(move _50) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        StorageDead(_50);
        _38 = handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase::<'_> { obligation: move _39, lending_market_authority: move _41, reserve: move _43, reserve_farm_state: move _45, obligation_farm_user_state: move _47, lending_market: move _49 };
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_38;
        _51 = &(*_52);
        StorageLive(_53);
        _53 = _7;
        _0 = handlers::handler_refresh_obligation_farms_for_reserve::process_impl_refresh_obligation_farms_for_reserve(move _51, move _53) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        StorageDead(_53);
        StorageDead(_51);
        drop(_38) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        StorageDead(_38);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_52);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_14) -> [return: bb37, unwind: bb38];
    }

    bb27: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_38) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_45) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_41) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_39) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_14) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36: {
        _57 = discriminant(_15);
        _55 = const false;
        _56 = const false;
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_6).1: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _32 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _33) -> [return: bb13, unwind continue];
    }

    bb37: {
        _59 = discriminant(_15);
        _55 = const false;
        _56 = const false;
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_54);
        _54 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _54);
        StorageDead(_54);
        goto -> bb27;
    }

    bb38 (cleanup): {
        _63 = discriminant(_15);
        goto -> bb35;
    }
}
