digraph Mir_0_1314 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn lending_operations::refresh_obligation(_1: &amp;ReErased anchor_lang::prelude::Pubkey, _2: &amp;ReErased mut state::obligation::Obligation, _3: &amp;ReErased state::lending_market::LendingMarket, _4: u64, _5: state::types::MaxReservesAsCollateralCheck, _6: impl Iterator&lt;Item = T&gt;/#3, _7: impl Iterator&lt;Item = T&gt;/#4, _8: impl Iterator&lt;Item = U&gt;/#5) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _9: std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;&gt;;<br align="left"/>let mut _11: std::result::Result&lt;std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _12: u8;<br align="left"/>let mut _13: &amp;ReErased state::lending_market::LendingMarket;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _18: std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let _19: u8;<br align="left"/>let _20: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _21: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _22: state::last_update::PriceStatusFlags;<br align="left"/>let _23: std::option::Option&lt;u64&gt;;<br align="left"/>let _24: u64;<br align="left"/>let mut _25: state::types::RefreshObligationBorrowsResult;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, state::types::RefreshObligationBorrowsResult&gt;;<br align="left"/>let mut _27: std::result::Result&lt;state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error&gt;;<br align="left"/>let mut _28: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _29: &amp;ReErased mut state::obligation::Obligation;<br align="left"/>let mut _30: &amp;ReErased state::lending_market::LendingMarket;<br align="left"/>let mut _31: u64;<br align="left"/>let mut _32: std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let mut _33: &amp;ReErased mut impl Iterator&lt;Item = T&gt;/#4;<br align="left"/>let mut _34: &amp;ReErased mut impl Iterator&lt;Item = U&gt;/#5;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _39: state::types::RefreshObligationBorrowsResult;<br align="left"/>let _40: u8;<br align="left"/>let _41: u8;<br align="left"/>let _42: u8;<br align="left"/>let _43: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _44: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _45: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _46: state::last_update::PriceStatusFlags;<br align="left"/>let _47: bool;<br align="left"/>let mut _48: state::types::RefreshObligationDepositsResult;<br align="left"/>let mut _49: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, state::types::RefreshObligationDepositsResult&gt;;<br align="left"/>let mut _50: std::result::Result&lt;state::types::RefreshObligationDepositsResult, anchor_lang::error::Error&gt;;<br align="left"/>let mut _51: &amp;ReErased mut state::obligation::Obligation;<br align="left"/>let mut _52: &amp;ReErased state::lending_market::LendingMarket;<br align="left"/>let mut _53: u64;<br align="left"/>let mut _54: state::types::MaxReservesAsCollateralCheck;<br align="left"/>let mut _55: std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let mut _56: &amp;ReErased mut impl Iterator&lt;Item = T&gt;/#3;<br align="left"/>let mut _57: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _58: isize;<br align="left"/>let _59: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _60: !;<br align="left"/>let mut _61: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _62: state::types::RefreshObligationDepositsResult;<br align="left"/>let mut _63: u128;<br align="left"/>let mut _64: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _65: u128;<br align="left"/>let mut _66: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _67: u128;<br align="left"/>let mut _68: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _69: u128;<br align="left"/>let mut _70: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _71: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _72: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _73: u64;<br align="left"/>let mut _74: u128;<br align="left"/>let mut _75: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: u8;<br align="left"/>let mut _78: u8;<br align="left"/>let mut _79: u8;<br align="left"/>let mut _80: u8;<br align="left"/>let mut _81: u8;<br align="left"/>let mut _82: bool;<br align="left"/>let mut _83: u64;<br align="left"/>let _84: state::last_update::PriceStatusFlags;<br align="left"/>let mut _85: state::last_update::PriceStatusFlags;<br align="left"/>let mut _86: state::last_update::PriceStatusFlags;<br align="left"/>let _87: ();<br align="left"/>let mut _88: &amp;ReErased mut state::last_update::LastUpdate;<br align="left"/>let mut _89: u64;<br align="left"/>let mut _90: std::option::Option&lt;state::last_update::PriceStatusFlags&gt;;<br align="left"/>let mut _91: state::last_update::PriceStatusFlags;<br align="left"/>let mut _92: ();<br align="left"/>let mut _93: isize;<br align="left"/>let mut _94: isize;<br align="left"/>let mut _95: isize;<br align="left"/>let mut _96: isize;<br align="left"/>let mut _97: isize;<br align="left"/>let mut _98: isize;<br align="left"/>let mut _99: isize;<br align="left"/>let mut _100: isize;<br align="left"/>let mut _101: isize;<br align="left"/>let mut _102: isize;<br align="left"/>let mut _103: isize;<br align="left"/>let mut _104: isize;<br align="left"/>let mut _105: isize;<br align="left"/>let mut _106: isize;<br align="left"/>let mut _107: isize;<br align="left"/>debug program_id =&gt; _1;<br align="left"/>debug obligation =&gt; _2;<br align="left"/>debug lending_market =&gt; _3;<br align="left"/>debug slot =&gt; _4;<br align="left"/>debug max_reserves_as_collateral_check =&gt; _5;<br align="left"/>debug deposit_reserves_iter =&gt; _6;<br align="left"/>debug borrow_reserves_iter =&gt; _7;<br align="left"/>debug referrer_token_states_iter =&gt; _8;<br align="left"/>debug elevation_group =&gt; _9;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>debug num_of_obsolete_borrow_reserves =&gt; _19;<br align="left"/>debug borrow_factor_adjusted_debt_value_f =&gt; _20;<br align="left"/>debug borrowed_assets_market_value_f =&gt; _21;<br align="left"/>debug borrows_prices_state =&gt; _22;<br align="left"/>debug borrowed_amount_in_elevation_group =&gt; _23;<br align="left"/>debug highest_borrow_factor_pct =&gt; _24;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>debug lowest_deposit_liquidation_ltv_threshold_pct =&gt; _40;<br align="left"/>debug lowest_deposit_max_ltv_pct =&gt; _41;<br align="left"/>debug num_of_obsolete_deposit_reserves =&gt; _42;<br align="left"/>debug deposited_value_f =&gt; _43;<br align="left"/>debug allowed_borrow_value =&gt; _44;<br align="left"/>debug unhealthy_borrow_value =&gt; _45;<br align="left"/>debug deposits_prices_state =&gt; _46;<br align="left"/>debug borrowing_disabled =&gt; _47;<br align="left"/>debug residual =&gt; _59;<br align="left"/>debug val =&gt; _62;<br align="left"/>debug prices_state =&gt; _84;<br align="left"/>>;
    bb0__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = ((*_2).14: u8)<br/>StorageLive(_13)<br/>_13 = &amp;(*_3)<br/></td></tr><tr><td align="left">_11 = get_elevation_group(move _12, move _13)</td></tr></table>>];
    bb1__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;std::option::Option&lt;&amp;state::lending_market::ElevationGroup&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb2__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_14 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb3__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_10 as Continue).0: std::option::Option&lt;&amp;state::lending_market::ElevationGroup&gt;)<br/>_9 = _18<br/>StorageDead(_18)<br/>_93 = discriminant(_10)<br/>StorageDead(_10)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;(*_1)<br/>StorageLive(_29)<br/>_29 = &amp;mut (*_2)<br/>StorageLive(_30)<br/>_30 = &amp;(*_3)<br/>StorageLive(_31)<br/>_31 = _4<br/>StorageLive(_32)<br/>_32 = _9<br/>StorageLive(_33)<br/>_33 = &amp;mut _7<br/>StorageLive(_34)<br/>_34 = &amp;mut _8<br/></td></tr><tr><td align="left">_27 = refresh_obligation_borrows::&lt;'_, T, U, &amp;mut impl Iterator&lt;Item = T&gt;, &amp;mut impl Iterator&lt;Item = U&gt;&gt;(move _28, move _29, move _30, move _31, move _32, move _33, move _34)</td></tr></table>>];
    bb4__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = move ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_17)<br/>_17 = move _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb6__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>_103 = discriminant(_10)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb8__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_35 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb9__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = move ((_26 as Continue).0: state::types::RefreshObligationBorrowsResult)<br/>_25 = move _39<br/>StorageDead(_39)<br/>StorageLive(_19)<br/>_19 = (_25.5: u8)<br/>StorageLive(_20)<br/>_20 = (_25.0: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/>StorageLive(_21)<br/>_21 = (_25.1: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/>StorageLive(_22)<br/>_22 = (_25.2: state::last_update::PriceStatusFlags)<br/>StorageLive(_23)<br/>_23 = (_25.4: std::option::Option&lt;u64&gt;)<br/>StorageLive(_24)<br/>_24 = (_25.3: u64)<br/>_95 = discriminant(_26)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = &amp;mut (*_2)<br/>StorageLive(_52)<br/>_52 = &amp;(*_3)<br/>StorageLive(_53)<br/>_53 = _4<br/>StorageLive(_54)<br/>_54 = move _5<br/>StorageLive(_55)<br/>_55 = _9<br/>StorageLive(_56)<br/>_56 = &amp;mut _6<br/>StorageLive(_57)<br/>_57 = _23<br/></td></tr><tr><td align="left">_50 = refresh_obligation_deposits::&lt;'_, T, &amp;mut impl Iterator&lt;Item = T&gt;&gt;(move _51, move _52, move _53, move _54, move _55, move _56, move _57)</td></tr></table>>];
    bb10__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = move ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_38)<br/>_38 = move _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb11__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>_101 = discriminant(_26)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">_49 = &lt;std::result::Result&lt;state::types::RefreshObligationDepositsResult, anchor_lang::error::Error&gt; as Try&gt;::branch(move _50)</td></tr></table>>];
    bb13__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>_58 = discriminant(_49)<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb14__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = move ((_49 as Continue).0: state::types::RefreshObligationDepositsResult)<br/>_48 = move _62<br/>StorageDead(_62)<br/>StorageLive(_40)<br/>_40 = (_48.0: u8)<br/>StorageLive(_41)<br/>_41 = (_48.1: u8)<br/>StorageLive(_42)<br/>_42 = (_48.2: u8)<br/>StorageLive(_43)<br/>_43 = (_48.3: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/>StorageLive(_44)<br/>_44 = (_48.4: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/>StorageLive(_45)<br/>_45 = (_48.5: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/>StorageLive(_46)<br/>_46 = (_48.6: state::last_update::PriceStatusFlags)<br/>StorageLive(_47)<br/>_47 = (_48.7: bool)<br/>_97 = discriminant(_49)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _21<br/></td></tr><tr><td align="left">_63 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _64)</td></tr></table>>];
    bb15__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = move ((_49 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_61)<br/>_61 = move _59<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _61)</td></tr></table>>];
    bb16__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_59)<br/>_99 = discriminant(_49)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>((*_2).9: u128) = move _63<br/>StorageDead(_63)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = _43<br/></td></tr><tr><td align="left">_65 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _66)</td></tr></table>>];
    bb18__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>((*_2).6: u128) = move _65<br/>StorageDead(_65)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = _20<br/></td></tr><tr><td align="left">_67 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _68)</td></tr></table>>];
    bb19__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>((*_2).8: u128) = move _67<br/>StorageDead(_67)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = _44<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = ((*_3).15: u64)<br/></td></tr><tr><td align="left">_72 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as From&lt;u64&gt;&gt;::from(move _73)</td></tr></table>>];
    bb20__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/></td></tr><tr><td align="left">_70 = std::cmp::min::&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;&gt;(move _71, move _72)</td></tr></table>>];
    bb21__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">_69 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _70)</td></tr></table>>];
    bb22__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>((*_2).10: u128) = move _69<br/>StorageDead(_69)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = _45<br/></td></tr><tr><td align="left">_74 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _75)</td></tr></table>>];
    bb23__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>((*_2).11: u128) = move _74<br/>StorageDead(_74)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>_77 = _40<br/></td></tr><tr><td align="left">_76 = &lt;u8 as Into&lt;u64&gt;&gt;::into(move _77)</td></tr></table>>];
    bb24__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>((*_2).5: u64) = move _76<br/>StorageDead(_76)<br/>StorageLive(_78)<br/>_78 = _41<br/>((*_2).20: u8) = move _78<br/>StorageDead(_78)<br/>StorageLive(_79)<br/>_79 = _19<br/>((*_2).21: u8) = move _79<br/>StorageDead(_79)<br/>StorageLive(_80)<br/>_80 = _42<br/>((*_2).15: u8) = move _80<br/>StorageDead(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>_82 = _47<br/></td></tr><tr><td align="left">_81 = &lt;bool as Into&lt;u8&gt;&gt;::into(move _82)</td></tr></table>>];
    bb25__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>((*_2).18: u8) = move _81<br/>StorageDead(_81)<br/>StorageLive(_83)<br/>_83 = _24<br/>((*_2).23: u64) = move _83<br/>StorageDead(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_85 = _46<br/>StorageLive(_86)<br/>_86 = _22<br/></td></tr><tr><td align="left">_84 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::intersection(move _85, move _86)</td></tr></table>>];
    bb26__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>_88 = &amp;mut ((*_2).1: state::last_update::LastUpdate)<br/>StorageLive(_89)<br/>_89 = _4<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = _84<br/>_90 = std::option::Option::&lt;last_update::PriceStatusFlags&gt;::Some(move _91)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">_87 = last_update::LastUpdate::update_slot::&lt;std::option::Option&lt;last_update::PriceStatusFlags&gt;&gt;(move _88, move _89, move _90)</td></tr></table>>];
    bb27__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageLive(_92)<br/>_92 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _92)<br/>StorageDead(_92)<br/>StorageDead(_84)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">drop(_8)</td></tr></table>>];
    bb28__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb29__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb30__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">drop(_8)</td></tr></table>>];
    bb31__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb32__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb33__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left">return</td></tr></table>>];
    bb34__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left">drop(_8)</td></tr></table>>];
    bb35__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">35 (cleanup)</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb36__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">36 (cleanup)</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb37__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">37 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb38__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">38 (cleanup)</td></tr><tr><td align="left" balign="left">_105 = discriminant(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">39 (cleanup)</td></tr><tr><td align="left" balign="left">_106 = discriminant(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_1314 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">40 (cleanup)</td></tr><tr><td align="left" balign="left">_107 = discriminant(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1314 -> bb1__0_1314 [label="return"];
    bb0__0_1314 -> bb34__0_1314 [label="unwind"];
    bb1__0_1314 -> bb2__0_1314 [label="return"];
    bb1__0_1314 -> bb34__0_1314 [label="unwind"];
    bb2__0_1314 -> bb3__0_1314 [label="0"];
    bb2__0_1314 -> bb5__0_1314 [label="1"];
    bb2__0_1314 -> bb4__0_1314 [label="otherwise"];
    bb3__0_1314 -> bb7__0_1314 [label="return"];
    bb3__0_1314 -> bb34__0_1314 [label="unwind"];
    bb5__0_1314 -> bb6__0_1314 [label="return"];
    bb5__0_1314 -> bb40__0_1314 [label="unwind"];
    bb6__0_1314 -> bb30__0_1314 [label=""];
    bb7__0_1314 -> bb8__0_1314 [label="return"];
    bb7__0_1314 -> bb34__0_1314 [label="unwind"];
    bb8__0_1314 -> bb9__0_1314 [label="0"];
    bb8__0_1314 -> bb10__0_1314 [label="1"];
    bb8__0_1314 -> bb4__0_1314 [label="otherwise"];
    bb9__0_1314 -> bb12__0_1314 [label="return"];
    bb9__0_1314 -> bb34__0_1314 [label="unwind"];
    bb10__0_1314 -> bb11__0_1314 [label="return"];
    bb10__0_1314 -> bb39__0_1314 [label="unwind"];
    bb11__0_1314 -> bb30__0_1314 [label=""];
    bb12__0_1314 -> bb13__0_1314 [label="return"];
    bb12__0_1314 -> bb34__0_1314 [label="unwind"];
    bb13__0_1314 -> bb14__0_1314 [label="0"];
    bb13__0_1314 -> bb15__0_1314 [label="1"];
    bb13__0_1314 -> bb4__0_1314 [label="otherwise"];
    bb14__0_1314 -> bb17__0_1314 [label="return"];
    bb14__0_1314 -> bb34__0_1314 [label="unwind"];
    bb15__0_1314 -> bb16__0_1314 [label="return"];
    bb15__0_1314 -> bb38__0_1314 [label="unwind"];
    bb16__0_1314 -> bb30__0_1314 [label=""];
    bb17__0_1314 -> bb18__0_1314 [label="return"];
    bb17__0_1314 -> bb34__0_1314 [label="unwind"];
    bb18__0_1314 -> bb19__0_1314 [label="return"];
    bb18__0_1314 -> bb34__0_1314 [label="unwind"];
    bb19__0_1314 -> bb20__0_1314 [label="return"];
    bb19__0_1314 -> bb34__0_1314 [label="unwind"];
    bb20__0_1314 -> bb21__0_1314 [label="return"];
    bb20__0_1314 -> bb34__0_1314 [label="unwind"];
    bb21__0_1314 -> bb22__0_1314 [label="return"];
    bb21__0_1314 -> bb34__0_1314 [label="unwind"];
    bb22__0_1314 -> bb23__0_1314 [label="return"];
    bb22__0_1314 -> bb34__0_1314 [label="unwind"];
    bb23__0_1314 -> bb24__0_1314 [label="return"];
    bb23__0_1314 -> bb34__0_1314 [label="unwind"];
    bb24__0_1314 -> bb25__0_1314 [label="return"];
    bb24__0_1314 -> bb34__0_1314 [label="unwind"];
    bb25__0_1314 -> bb26__0_1314 [label="return"];
    bb25__0_1314 -> bb34__0_1314 [label="unwind"];
    bb26__0_1314 -> bb27__0_1314 [label="return"];
    bb26__0_1314 -> bb34__0_1314 [label="unwind"];
    bb27__0_1314 -> bb28__0_1314 [label="return"];
    bb27__0_1314 -> bb35__0_1314 [label="unwind"];
    bb28__0_1314 -> bb29__0_1314 [label="return"];
    bb28__0_1314 -> bb36__0_1314 [label="unwind"];
    bb29__0_1314 -> bb33__0_1314 [label="return"];
    bb29__0_1314 -> bb37__0_1314 [label="unwind"];
    bb30__0_1314 -> bb31__0_1314 [label="return"];
    bb30__0_1314 -> bb35__0_1314 [label="unwind"];
    bb31__0_1314 -> bb32__0_1314 [label="return"];
    bb31__0_1314 -> bb36__0_1314 [label="unwind"];
    bb32__0_1314 -> bb33__0_1314 [label="return"];
    bb32__0_1314 -> bb37__0_1314 [label="unwind"];
    bb34__0_1314 -> bb35__0_1314 [label="return"];
    bb35__0_1314 -> bb36__0_1314 [label="return"];
    bb36__0_1314 -> bb37__0_1314 [label="return"];
    bb38__0_1314 -> bb34__0_1314 [label=""];
    bb39__0_1314 -> bb34__0_1314 [label=""];
    bb40__0_1314 -> bb34__0_1314 [label=""];
}
