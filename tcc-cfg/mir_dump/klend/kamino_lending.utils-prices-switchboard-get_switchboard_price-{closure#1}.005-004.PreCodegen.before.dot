digraph Mir_0_2634 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_switchboard_price::{closure#1}(_1: &amp;ReErased Closure(DefId(0:2634 ~ kamino_lending[6389]::utils::prices::switchboard::get_switchboard_price::{closure#1}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), (u128, u32, u128, u32)])) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _4: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _5: u128;<br align="left"/>let mut _6: u32;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _13: ();<br align="left"/>let _14: utils::prices::types::Price&lt;u128&gt;;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: u32;<br align="left"/>let mut _17: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _18: utils::prices::types::Price&lt;u128&gt;;<br align="left"/>let mut _19: isize;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>debug price_switchboard_desc_mantissa =&gt; ((*_1).0: u128);<br align="left"/>debug price_switchboard_desc_scale =&gt; ((*_1).1: u32);<br align="left"/>debug stdev_mantissa =&gt; ((*_1).2: u128);<br align="left"/>debug stdev_scale =&gt; ((*_1).3: u32);<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug base_price =&gt; _14;<br align="left"/>>;
    bb0__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = ((*_1).0: u128)<br/>StorageLive(_6)<br/>_6 = ((*_1).1: u32)<br/>StorageLive(_7)<br/>_7 = ((*_1).2: u128)<br/>StorageLive(_8)<br/>_8 = ((*_1).3: u32)<br/></td></tr><tr><td align="left">_4 = validate_switchboard_confidence(move _5, move _6, move _7, move _8, const _)</td></tr></table>>];
    bb1__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_9 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_3 as Continue).0: ())<br/>_2 = _13<br/>StorageDead(_13)<br/>_19 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = ((*_1).0: u128)<br/>StorageLive(_16)<br/>_16 = ((*_1).1: u32)<br/>_14 = prices::types::Price::&lt;u128&gt; { value: move _15, exp: move _16 }<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _14<br/></td></tr><tr><td align="left">_17 = price_to_fraction::&lt;u128&gt;(move _18)</td></tr></table>>];
    bb4__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_12)<br/>_12 = move _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>_21 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_0 = std::result::Result::&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;::Ok(move _17)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_2634 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_23 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2634 -> bb1__0_2634 [label="return"];
    bb1__0_2634 -> bb2__0_2634 [label="return"];
    bb1__0_2634 -> bb9__0_2634 [label="unwind"];
    bb2__0_2634 -> bb3__0_2634 [label="0"];
    bb2__0_2634 -> bb5__0_2634 [label="1"];
    bb2__0_2634 -> bb4__0_2634 [label="otherwise"];
    bb3__0_2634 -> bb7__0_2634 [label="return"];
    bb5__0_2634 -> bb6__0_2634 [label="return"];
    bb5__0_2634 -> bb10__0_2634 [label="unwind"];
    bb6__0_2634 -> bb8__0_2634 [label=""];
    bb7__0_2634 -> bb8__0_2634 [label=""];
    bb10__0_2634 -> bb9__0_2634 [label=""];
}
