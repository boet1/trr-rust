digraph Mir_0_993 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn as_u8_enum(_1: &amp;ReErased u8, _2: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let mut _3: std::result::Result&lt;E/#0, Alias(Projection, AliasTy { args: [E/#0, u8], def_id: DefId(2:2592 ~ core[c321]::convert::TryFrom::Error) })&gt;;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: isize;<br align="left"/>let _6: E/#0;<br align="left"/>let mut _7: &amp;ReErased E/#0;<br align="left"/>let mut _8: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _9: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _10: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _11: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _12: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _13: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _14: [&amp;ReErased str; 3_usize];<br align="left"/>let mut _15: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _16: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _17: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _18: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _19: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _20: &amp;ReErased &amp;ReErased str;<br align="left"/>let _21: &amp;ReErased &amp;ReErased str;<br align="left"/>let _22: &amp;ReErased str;<br align="left"/>let mut _23: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _24: &amp;ReErased &amp;ReErased u8;<br align="left"/>let _25: &amp;ReErased &amp;ReErased u8;<br align="left"/>let mut _26: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>debug repr =&gt; _1;<br align="left"/>debug f =&gt; _2;<br align="left"/>debug value =&gt; _6;<br align="left"/>>;
    bb0__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_27 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = (*_1)<br/>_27 = const true<br/></td></tr><tr><td align="left">_3 = &lt;E as TryFrom&lt;u8&gt;&gt;::try_from(move _4)</td></tr></table>>];
    bb1__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_5 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb2__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = &amp;mut (*_2)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_26 = const _<br/>_13 = &amp;(*_26)<br/>_12 = &amp;(*_13)<br/>_11 = move _12 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_12)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/></td></tr><tr><td align="left">_22 = std::any::type_name::&lt;E&gt;()</td></tr></table>>];
    bb3__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb4__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>_6 = move ((_3 as Ok).0: E)<br/>StorageLive(_7)<br/>_7 = &amp;_6<br/>StorageLive(_8)<br/>_8 = &amp;mut (*_2)<br/></td></tr><tr><td align="left">_0 = &lt;E as std::fmt::Debug&gt;::fmt(move _7, move _8)</td></tr></table>>];
    bb5__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb6__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_21 = &amp;_22<br/>_20 = &amp;(*_21)<br/></td></tr><tr><td align="left">_19 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;str&gt;(move _20)</td></tr></table>>];
    bb8__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = &amp;_1<br/>_24 = &amp;(*_25)<br/></td></tr><tr><td align="left">_23 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;u8&gt;(move _24)</td></tr></table>>];
    bb9__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_18 = [move _19, move _23]<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>_17 = &amp;_18<br/>_16 = &amp;(*_17)<br/>_15 = move _16 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_10 = Arguments::&lt;'_&gt;::new_v1(move _11, move _15)</td></tr></table>>];
    bb10__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_fmt(move _9, move _10)</td></tr></table>>];
    bb11__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_13)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">drop(_6)</td></tr></table>>];
    bb13__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb14__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_27 = const false<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb15__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb16__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_28 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb17__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">17 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb18__0_993 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left" balign="left">_30 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb0__0_993 -> bb1__0_993 [label="return"];
    bb1__0_993 -> bb4__0_993 [label="0"];
    bb1__0_993 -> bb2__0_993 [label="1"];
    bb1__0_993 -> bb3__0_993 [label="otherwise"];
    bb2__0_993 -> bb7__0_993 [label="return"];
    bb2__0_993 -> bb18__0_993 [label="unwind"];
    bb4__0_993 -> bb5__0_993 [label="return"];
    bb4__0_993 -> bb12__0_993 [label="unwind"];
    bb5__0_993 -> bb6__0_993 [label="return"];
    bb5__0_993 -> bb18__0_993 [label="unwind"];
    bb6__0_993 -> bb16__0_993 [label=""];
    bb7__0_993 -> bb8__0_993 [label="return"];
    bb7__0_993 -> bb18__0_993 [label="unwind"];
    bb8__0_993 -> bb9__0_993 [label="return"];
    bb8__0_993 -> bb18__0_993 [label="unwind"];
    bb9__0_993 -> bb10__0_993 [label="return"];
    bb9__0_993 -> bb18__0_993 [label="unwind"];
    bb10__0_993 -> bb11__0_993 [label="return"];
    bb10__0_993 -> bb18__0_993 [label="unwind"];
    bb11__0_993 -> bb16__0_993 [label=""];
    bb12__0_993 -> bb18__0_993 [label="return"];
    bb15__0_993 -> bb14__0_993 [label="return"];
    bb15__0_993 -> bb13__0_993 [label="unwind"];
    bb16__0_993 -> bb14__0_993 [label="0"];
    bb16__0_993 -> bb15__0_993 [label="otherwise"];
    bb17__0_993 -> bb13__0_993 [label="return"];
    bb18__0_993 -> bb13__0_993 [label="0"];
    bb18__0_993 -> bb17__0_993 [label="otherwise"];
}
