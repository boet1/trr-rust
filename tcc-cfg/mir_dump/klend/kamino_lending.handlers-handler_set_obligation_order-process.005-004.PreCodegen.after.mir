// MIR for `handlers::handler_set_obligation_order::process` after PreCodegen

fn handlers::handler_set_obligation_order::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_set_obligation_order::SetObligationOrder<'_>>, _2: u8, _3: obligation::ObligationOrder) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug index => _2;
    debug order => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _5: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _7: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _15: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _24: ();
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _26: std::result::Result<(), anchor_lang::error::Error>;
    let mut _27: &state::lending_market::LendingMarket;
    let _28: &state::lending_market::LendingMarket;
    let mut _29: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _30: &mut state::obligation::Obligation;
    let mut _31: &mut state::obligation::Obligation;
    let mut _32: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _33: u8;
    let mut _34: state::obligation::ObligationOrder;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _40: ();
    let mut _41: &mut handlers::handler_set_obligation_order::SetObligationOrder<'_>;
    let mut _42: &mut handlers::handler_set_obligation_order::SetObligationOrder<'_>;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    scope 1 {
        debug lending_market => _4;
        let _14: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _23: std::cell::RefMut<'_, state::obligation::Obligation>;
        scope 6 {
            debug obligation => _14;
            let _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _39: ();
            scope 11 {
                debug residual => _36;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _39;
                scope 14 {
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _41 = deref_copy (_1.1: &mut handlers::handler_set_obligation_order::SetObligationOrder<'_>);
        _8 = &((*_41).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_6 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _5 = move _13;
        StorageDead(_13);
        _4 = &_5;
        _43 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _42 = deref_copy (_1.1: &mut handlers::handler_set_obligation_order::SetObligationOrder<'_>);
        _18 = &((*_42).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _18) -> [return: bb7, unwind: bb25];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _53 = discriminant(_6);
        StorageDead(_6);
        goto -> bb22;
    }

    bb7: {
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _15 = move _23;
        StorageDead(_23);
        _14 = &mut _15;
        _45 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_4);
        _28 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _29) -> [return: bb12, unwind: bb24];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _51 = discriminant(_16);
        StorageDead(_16);
        goto -> bb21;
    }

    bb12: {
        _27 = &(*_28);
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &mut (*_14);
        _31 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _32) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _30 = &mut (*_31);
        StorageDead(_32);
        StorageLive(_33);
        _33 = _2;
        StorageLive(_34);
        _34 = _3;
        _26 = set_order_on_obligation(move _27, move _30, move _33, move _34) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        _25 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _26) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        StorageDead(_26);
        _35 = discriminant(_25);
        switchInt(move _35) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_39);
        _39 = ((_25 as Continue).0: ());
        _24 = _39;
        StorageDead(_39);
        _47 = discriminant(_25);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_40);
        _40 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _40);
        StorageDead(_40);
        drop(_15) -> [return: bb19, unwind: bb25];
    }

    bb17: {
        StorageLive(_36);
        _36 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _38) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        StorageDead(_38);
        StorageDead(_36);
        _49 = discriminant(_25);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        drop(_15) -> [return: bb21, unwind: bb25];
    }

    bb19: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_5) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb23;
    }

    bb21: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_5) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_15) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_5) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _55 = discriminant(_25);
        goto -> bb24;
    }

    bb28 (cleanup): {
        _56 = discriminant(_16);
        goto -> bb25;
    }

    bb29 (cleanup): {
        _57 = discriminant(_6);
        goto -> bb26;
    }
}
