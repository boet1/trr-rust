// MIR for `borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:141:1: 141:21>::validate` before PreCodegen

fn borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:141:1: 141:21>::validate(_1: &BorrowRateCurve) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &[utils::borrow_rate_curve::CurvePoint; 11];
    let _3: ();
    let mut _4: bool;
    let mut _5: u32;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: !;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: anchor_lang::error::Error;
    let mut _14: anchor_lang::error::AnchorError;
    let mut _15: std::string::String;
    let mut _16: &LendingError;
    let _17: LendingError;
    let mut _18: u32;
    let mut _19: LendingError;
    let mut _20: std::string::String;
    let mut _21: &LendingError;
    let _22: LendingError;
    let mut _23: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _24: anchor_lang::error::ErrorOrigin;
    let mut _25: anchor_lang::error::Source;
    let mut _26: std::option::Option<anchor_lang::error::ComparedValues>;
    let _27: ();
    let mut _28: bool;
    let mut _29: u32;
    let _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _33: !;
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: anchor_lang::error::Error;
    let mut _38: anchor_lang::error::AnchorError;
    let mut _39: std::string::String;
    let mut _40: &LendingError;
    let _41: LendingError;
    let mut _42: u32;
    let mut _43: LendingError;
    let mut _44: std::string::String;
    let mut _45: &LendingError;
    let _46: LendingError;
    let mut _47: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _48: anchor_lang::error::ErrorOrigin;
    let mut _49: anchor_lang::error::Source;
    let mut _50: std::option::Option<anchor_lang::error::ComparedValues>;
    let _52: usize;
    let mut _53: usize;
    let mut _54: bool;
    let _55: ();
    let mut _56: std::iter::Skip<std::slice::Iter<'_, utils::borrow_rate_curve::CurvePoint>>;
    let mut _57: std::iter::Skip<std::slice::Iter<'_, utils::borrow_rate_curve::CurvePoint>>;
    let mut _58: std::slice::Iter<'_, utils::borrow_rate_curve::CurvePoint>;
    let mut _59: &[utils::borrow_rate_curve::CurvePoint];
    let mut _60: &[utils::borrow_rate_curve::CurvePoint; 11];
    let mut _62: ();
    let _63: ();
    let mut _64: std::option::Option<&utils::borrow_rate_curve::CurvePoint>;
    let mut _65: &mut std::iter::Skip<std::slice::Iter<'_, utils::borrow_rate_curve::CurvePoint>>;
    let mut _66: &mut std::iter::Skip<std::slice::Iter<'_, utils::borrow_rate_curve::CurvePoint>>;
    let mut _67: isize;
    let mut _68: !;
    let _70: ();
    let mut _71: bool;
    let mut _72: u32;
    let mut _73: bool;
    let mut _74: u32;
    let mut _75: !;
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: anchor_lang::error::Error;
    let mut _80: anchor_lang::error::AnchorError;
    let mut _81: std::string::String;
    let mut _82: &LendingError;
    let _83: LendingError;
    let mut _84: u32;
    let mut _85: LendingError;
    let mut _86: std::string::String;
    let mut _87: &LendingError;
    let _88: LendingError;
    let mut _89: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _90: anchor_lang::error::ErrorOrigin;
    let mut _91: anchor_lang::error::Source;
    let mut _92: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _93: bool;
    let mut _94: u32;
    let mut _95: u32;
    let mut _96: !;
    let _97: ();
    let mut _98: &str;
    let _99: &str;
    let mut _100: anchor_lang::error::Error;
    let mut _101: anchor_lang::error::AnchorError;
    let mut _102: std::string::String;
    let mut _103: &LendingError;
    let _104: LendingError;
    let mut _105: u32;
    let mut _106: LendingError;
    let mut _107: std::string::String;
    let mut _108: &LendingError;
    let _109: LendingError;
    let mut _110: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _111: anchor_lang::error::ErrorOrigin;
    let mut _112: anchor_lang::error::Source;
    let mut _113: std::option::Option<anchor_lang::error::ComparedValues>;
    let _114: ();
    let mut _115: bool;
    let mut _116: u32;
    let mut _117: u32;
    let mut _118: !;
    let _119: ();
    let mut _120: &str;
    let _121: &str;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::AnchorError;
    let mut _124: std::string::String;
    let mut _125: &LendingError;
    let _126: LendingError;
    let mut _127: u32;
    let mut _128: LendingError;
    let mut _129: std::string::String;
    let mut _130: &LendingError;
    let _131: LendingError;
    let mut _132: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _133: anchor_lang::error::ErrorOrigin;
    let mut _134: anchor_lang::error::Source;
    let mut _135: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _136: utils::borrow_rate_curve::CurvePoint;
    let mut _137: ();
    scope 1 {
        debug pts => _2;
        let mut _51: utils::borrow_rate_curve::CurvePoint;
        let mut _138: &LendingError;
        let mut _139: &LendingError;
        let mut _140: &LendingError;
        let mut _141: &LendingError;
        scope 2 {
            debug last_pt => _51;
            let mut _61: std::iter::Skip<std::slice::Iter<'_, utils::borrow_rate_curve::CurvePoint>>;
            scope 3 {
                debug iter => _61;
                let _69: &utils::borrow_rate_curve::CurvePoint;
                scope 4 {
                    debug pt => _69;
                    let mut _142: &LendingError;
                    let mut _143: &LendingError;
                    let mut _144: &LendingError;
                    let mut _145: &LendingError;
                    let mut _146: &LendingError;
                    let mut _147: &LendingError;
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = &((*_1).0: [utils::borrow_rate_curve::CurvePoint; 11]);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const 0_usize;
        _7 = Len((*_2));
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb1, unwind continue];
    }

    bb1: {
        _5 = ((*_2)[_6].0: u32);
        _4 = Ne(move _5, const 0_u32);
        switchInt(move _4) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = const "First point of borrowing rate curve must have an utilization rate of 0";
        _11 = &(*_12);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _139 = const _;
        _16 = &(*_139);
        _15 = LendingError::name(move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = LendingError::InvalidBorrowRateCurvePoint;
        _18 = <LendingError as Into<u32>>::into(move _19) -> [return: bb5, unwind: bb58];
    }

    bb5: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _138 = const _;
        _21 = &(*_138);
        _20 = <LendingError as ToString>::to_string(move _21) -> [return: bb6, unwind: bb58];
    }

    bb6: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 149_u32 };
        _24 = anchor_lang::error::ErrorOrigin::Source(move _25);
        StorageDead(_25);
        _23 = std::option::Option::<ErrorOrigin>::Some(move _24);
        StorageDead(_24);
        StorageLive(_26);
        _26 = std::option::Option::<ComparedValues>::None;
        _14 = anchor_lang::error::AnchorError { error_name: move _15, error_code_number: move _18, error_msg: move _20, error_origin: move _23, compared_values: move _26 };
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_15);
        _13 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _14) -> [return: bb7, unwind: bb59];
    }

    bb7: {
        StorageDead(_14);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _13);
        StorageDead(_13);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb52;
    }

    bb8: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = const 10_usize;
        _31 = Len((*_2));
        _32 = Lt(_30, _31);
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb9, unwind continue];
    }

    bb9: {
        _29 = ((*_2)[_30].0: u32);
        _28 = Ne(move _29, const _);
        switchInt(move _28) -> [0: bb16, otherwise: bb10];
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = const "Last point of borrowing rate curve must have an utilization rate of 1";
        _35 = &(*_36);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _141 = const _;
        _40 = &(*_141);
        _39 = LendingError::name(move _40) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        _43 = LendingError::InvalidBorrowRateCurvePoint;
        _42 = <LendingError as Into<u32>>::into(move _43) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _140 = const _;
        _45 = &(*_140);
        _44 = <LendingError as ToString>::to_string(move _45) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        StorageDead(_45);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 154_u32 };
        _48 = anchor_lang::error::ErrorOrigin::Source(move _49);
        StorageDead(_49);
        _47 = std::option::Option::<ErrorOrigin>::Some(move _48);
        StorageDead(_48);
        StorageLive(_50);
        _50 = std::option::Option::<ComparedValues>::None;
        _38 = anchor_lang::error::AnchorError { error_name: move _39, error_code_number: move _42, error_msg: move _44, error_origin: move _47, compared_values: move _50 };
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_39);
        _37 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _38) -> [return: bb15, unwind: bb59];
    }

    bb15: {
        StorageDead(_38);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _37);
        StorageDead(_37);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb52;
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_51);
        StorageLive(_52);
        _52 = const 0_usize;
        _53 = Len((*_2));
        _54 = Lt(_52, _53);
        assert(move _54, "index out of bounds: the length is {} but the index is {}", move _53, _52) -> [success: bb17, unwind continue];
    }

    bb17: {
        _51 = (*_2)[_52];
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_2);
        _59 = move _60 as &[utils::borrow_rate_curve::CurvePoint] (PointerCoercion(Unsize));
        StorageDead(_60);
        _58 = core::slice::<impl [CurvePoint]>::iter(move _59) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_59);
        _57 = <std::slice::Iter<'_, CurvePoint> as Iterator>::skip(move _58, const 1_usize) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_58);
        _56 = <Skip<std::slice::Iter<'_, CurvePoint>> as IntoIterator>::into_iter(move _57) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_57);
        StorageLive(_61);
        _61 = move _56;
        goto -> bb21;
    }

    bb21: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut _61;
        _65 = &mut (*_66);
        _64 = <Skip<std::slice::Iter<'_, CurvePoint>> as Iterator>::next(move _65) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb25, 1: bb23, otherwise: bb24];
    }

    bb23: {
        StorageLive(_69);
        _69 = ((_64 as Some).0: &utils::borrow_rate_curve::CurvePoint);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = (_51.0: u32);
        _71 = Eq(move _72, const _);
        switchInt(move _71) -> [0: bb34, otherwise: bb26];
    }

    bb24: {
        unreachable;
    }

    bb25: {
        _55 = const ();
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_137);
        _137 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _137);
        StorageDead(_137);
        StorageDead(_51);
        StorageDead(_2);
        goto -> bb53;
    }

    bb26: {
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = ((*_69).0: u32);
        _73 = Ne(move _74, const _);
        switchInt(move _73) -> [0: bb33, otherwise: bb27];
    }

    bb27: {
        StorageDead(_74);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = const "Last point of borrowing rate curve must have an utilization rate of 1 but lower utilization rate found after last point";
        _77 = &(*_78);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_77);
        StorageDead(_78);
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _143 = const _;
        _82 = &(*_143);
        _81 = LendingError::name(move _82) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        _85 = LendingError::InvalidBorrowRateCurvePoint;
        _84 = <LendingError as Into<u32>>::into(move _85) -> [return: bb30, unwind: bb56];
    }

    bb30: {
        StorageDead(_85);
        StorageLive(_86);
        StorageLive(_87);
        _142 = const _;
        _87 = &(*_142);
        _86 = <LendingError as ToString>::to_string(move _87) -> [return: bb31, unwind: bb56];
    }

    bb31: {
        StorageDead(_87);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 166_u32 };
        _90 = anchor_lang::error::ErrorOrigin::Source(move _91);
        StorageDead(_91);
        _89 = std::option::Option::<ErrorOrigin>::Some(move _90);
        StorageDead(_90);
        StorageLive(_92);
        _92 = std::option::Option::<ComparedValues>::None;
        _80 = anchor_lang::error::AnchorError { error_name: move _81, error_code_number: move _84, error_msg: move _86, error_origin: move _89, compared_values: move _92 };
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_81);
        _79 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _80) -> [return: bb32, unwind: bb59];
    }

    bb32: {
        StorageDead(_80);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _79);
        StorageDead(_79);
        StorageDead(_73);
        goto -> bb50;
    }

    bb33: {
        StorageDead(_74);
        _70 = const ();
        StorageDead(_73);
        goto -> bb42;
    }

    bb34: {
        StorageDead(_72);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ((*_69).0: u32);
        StorageLive(_95);
        _95 = (_51.0: u32);
        _93 = Le(move _94, move _95);
        switchInt(move _93) -> [0: bb41, otherwise: bb35];
    }

    bb35: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = const "Borrowing rate curve points must be sorted by utilization rate";
        _98 = &(*_99);
        _97 = solana_program::log::sol_log(move _98) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_98);
        StorageDead(_99);
        StorageDead(_97);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _147 = const _;
        _103 = &(*_147);
        _102 = LendingError::name(move _103) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        _106 = LendingError::InvalidBorrowRateCurvePoint;
        _105 = <LendingError as Into<u32>>::into(move _106) -> [return: bb38, unwind: bb55];
    }

    bb38: {
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        _146 = const _;
        _108 = &(*_146);
        _107 = <LendingError as ToString>::to_string(move _108) -> [return: bb39, unwind: bb55];
    }

    bb39: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 170_u32 };
        _111 = anchor_lang::error::ErrorOrigin::Source(move _112);
        StorageDead(_112);
        _110 = std::option::Option::<ErrorOrigin>::Some(move _111);
        StorageDead(_111);
        StorageLive(_113);
        _113 = std::option::Option::<ComparedValues>::None;
        _101 = anchor_lang::error::AnchorError { error_name: move _102, error_code_number: move _105, error_msg: move _107, error_origin: move _110, compared_values: move _113 };
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_102);
        _100 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _101) -> [return: bb40, unwind: bb59];
    }

    bb40: {
        StorageDead(_101);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _100);
        StorageDead(_100);
        StorageDead(_93);
        goto -> bb50;
    }

    bb41: {
        StorageDead(_95);
        StorageDead(_94);
        _70 = const ();
        StorageDead(_93);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = ((*_69).1: u32);
        StorageLive(_117);
        _117 = (_51.1: u32);
        _115 = Lt(move _116, move _117);
        switchInt(move _115) -> [0: bb49, otherwise: bb43];
    }

    bb43: {
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = const "Borrowing rate must growing in the curve";
        _120 = &(*_121);
        _119 = solana_program::log::sol_log(move _120) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_120);
        StorageDead(_121);
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _145 = const _;
        _125 = &(*_145);
        _124 = LendingError::name(move _125) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        _128 = LendingError::InvalidBorrowRateCurvePoint;
        _127 = <LendingError as Into<u32>>::into(move _128) -> [return: bb46, unwind: bb54];
    }

    bb46: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _144 = const _;
        _130 = &(*_144);
        _129 = <LendingError as ToString>::to_string(move _130) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 175_u32 };
        _133 = anchor_lang::error::ErrorOrigin::Source(move _134);
        StorageDead(_134);
        _132 = std::option::Option::<ErrorOrigin>::Some(move _133);
        StorageDead(_133);
        StorageLive(_135);
        _135 = std::option::Option::<ComparedValues>::None;
        _123 = anchor_lang::error::AnchorError { error_name: move _124, error_code_number: move _127, error_msg: move _129, error_origin: move _132, compared_values: move _135 };
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_124);
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _123) -> [return: bb48, unwind: bb59];
    }

    bb48: {
        StorageDead(_123);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _122);
        StorageDead(_122);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb51;
    }

    bb49: {
        StorageDead(_117);
        StorageDead(_116);
        _114 = const ();
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_136);
        _136 = (*_69);
        _51 = move _136;
        StorageDead(_136);
        _63 = const ();
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        _62 = const ();
        goto -> bb21;
    }

    bb50: {
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_2);
        goto -> bb53;
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_124) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_102) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_81) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_39) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_15) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        resume;
    }
}
