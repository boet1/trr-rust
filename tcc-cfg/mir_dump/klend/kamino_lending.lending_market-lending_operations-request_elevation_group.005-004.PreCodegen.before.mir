// MIR for `lending_operations::request_elevation_group` before PreCodegen

fn lending_operations::request_elevation_group(_1: &anchor_lang::prelude::Pubkey, _2: &mut obligation::Obligation, _3: &state::lending_market::LendingMarket, _4: u64, _5: u8, _6: impl Iterator<Item = T> + Clone, _7: impl Iterator<Item = T> + Clone, _8: impl Iterator<Item = U>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug obligation => _2;
    debug lending_market => _3;
    debug slot => _4;
    debug new_elevation_group => _5;
    debug deposit_reserves_iter => _6;
    debug borrow_reserves_iter => _7;
    debug referrer_token_states_iter => _8;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _11: std::result::Result<(), anchor_lang::error::Error>;
    let mut _12: &state::obligation::Obligation;
    let mut _13: u64;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _18: ();
    let _19: ();
    let mut _20: bool;
    let mut _21: u8;
    let mut _22: u8;
    let mut _23: !;
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::AnchorError;
    let mut _26: std::string::String;
    let mut _27: &LendingError;
    let _28: LendingError;
    let mut _29: u32;
    let mut _30: LendingError;
    let mut _31: std::string::String;
    let mut _32: &LendingError;
    let _33: LendingError;
    let mut _34: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _35: anchor_lang::error::ErrorOrigin;
    let mut _36: anchor_lang::error::Source;
    let mut _37: std::option::Option<anchor_lang::error::ComparedValues>;
    let _38: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _39: &state::obligation::Obligation;
    let _40: ();
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _42: std::result::Result<(), anchor_lang::error::Error>;
    let mut _43: &mut state::obligation::Obligation;
    let mut _44: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&state::lending_market::ElevationGroup>>;
    let mut _46: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _47: u8;
    let mut _48: &state::lending_market::LendingMarket;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _54: impl Iterator<Item = T> + Clone;
    let mut _55: &impl Iterator<Item = T> + Clone;
    let mut _56: impl Iterator<Item = T> + Clone;
    let mut _57: &impl Iterator<Item = T> + Clone;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&state::lending_market::ElevationGroup>>;
    let mut _65: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _66: u8;
    let mut _67: &state::lending_market::LendingMarket;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _73: ();
    let mut _74: isize;
    let _76: ();
    let mut _77: bool;
    let mut _78: &state::lending_market::ElevationGroup;
    let mut _79: !;
    let mut _80: anchor_lang::error::Error;
    let mut _81: anchor_lang::error::AnchorError;
    let mut _82: std::string::String;
    let mut _83: &LendingError;
    let _84: LendingError;
    let mut _85: u32;
    let mut _86: LendingError;
    let mut _87: std::string::String;
    let mut _88: &LendingError;
    let _89: LendingError;
    let mut _90: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _91: anchor_lang::error::ErrorOrigin;
    let mut _92: anchor_lang::error::Source;
    let mut _93: std::option::Option<anchor_lang::error::ComparedValues>;
    let _94: ();
    let mut _95: bool;
    let mut _96: &anchor_lang::prelude::Pubkey;
    let mut _97: &anchor_lang::prelude::Pubkey;
    let _98: anchor_lang::prelude::Pubkey;
    let mut _99: !;
    let mut _100: anchor_lang::error::Error;
    let mut _101: anchor_lang::error::AnchorError;
    let mut _102: std::string::String;
    let mut _103: &LendingError;
    let _104: LendingError;
    let mut _105: u32;
    let mut _106: LendingError;
    let mut _107: std::string::String;
    let mut _108: &LendingError;
    let _109: LendingError;
    let mut _110: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _111: anchor_lang::error::ErrorOrigin;
    let mut _112: anchor_lang::error::Source;
    let mut _113: std::option::Option<anchor_lang::error::ComparedValues>;
    let _114: ();
    let mut _115: bool;
    let mut _116: u8;
    let mut _117: !;
    let mut _118: anchor_lang::error::Error;
    let mut _119: anchor_lang::error::Error;
    let mut _120: anchor_lang::error::AnchorError;
    let mut _121: std::string::String;
    let mut _122: &LendingError;
    let _123: LendingError;
    let mut _124: u32;
    let mut _125: LendingError;
    let mut _126: std::string::String;
    let mut _127: &LendingError;
    let _128: LendingError;
    let mut _129: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _130: anchor_lang::error::ErrorOrigin;
    let mut _131: anchor_lang::error::Source;
    let mut _132: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _133: (u8, i32);
    let mut _134: u8;
    let mut _137: state::types::RefreshObligationBorrowsResult;
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::RefreshObligationBorrowsResult>;
    let mut _139: std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error>;
    let mut _140: &anchor_lang::prelude::Pubkey;
    let mut _141: &mut state::obligation::Obligation;
    let mut _142: &state::lending_market::LendingMarket;
    let mut _143: u64;
    let mut _144: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _145: impl Iterator<Item = T> + Clone;
    let mut _146: &impl Iterator<Item = T> + Clone;
    let mut _147: &mut impl Iterator<Item = U>;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _156: state::types::RefreshObligationDepositsResult;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::RefreshObligationDepositsResult>;
    let mut _158: std::result::Result<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error>;
    let mut _159: &mut state::obligation::Obligation;
    let mut _160: &state::lending_market::LendingMarket;
    let mut _161: u64;
    let mut _162: state::types::MaxReservesAsCollateralCheck;
    let mut _163: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _164: impl Iterator<Item = T> + Clone;
    let mut _165: &impl Iterator<Item = T> + Clone;
    let mut _166: std::option::Option<u64>;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _172: ();
    let mut _173: bool;
    let mut _174: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _175: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _176: !;
    let _177: ();
    let mut _178: &str;
    let _179: &str;
    let mut _180: anchor_lang::error::Error;
    let mut _181: anchor_lang::error::Error;
    let mut _182: anchor_lang::error::AnchorError;
    let mut _183: std::string::String;
    let mut _184: &LendingError;
    let _185: LendingError;
    let mut _186: u32;
    let mut _187: LendingError;
    let mut _188: std::string::String;
    let mut _189: &LendingError;
    let _190: LendingError;
    let mut _191: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _192: anchor_lang::error::ErrorOrigin;
    let mut _193: anchor_lang::error::Source;
    let mut _194: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _195: (utils::fraction::FractionDisplay<'_>, utils::fraction::FractionDisplay<'_>);
    let mut _196: utils::fraction::FractionDisplay<'_>;
    let mut _197: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _198: utils::fraction::FractionDisplay<'_>;
    let mut _199: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _200: ();
    let mut _201: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _202: std::result::Result<(), anchor_lang::error::Error>;
    let mut _203: &state::obligation::Obligation;
    let mut _204: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _205: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _206: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _207: isize;
    let mut _209: !;
    let mut _210: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _212: ();
    let mut _213: &str;
    let _214: &str;
    let mut _215: &std::string::String;
    let _216: &std::string::String;
    let _217: std::string::String;
    let mut _219: std::fmt::Arguments<'_>;
    let mut _220: &[&str];
    let mut _221: &[&str; 2];
    let _222: &[&str; 2];
    let _223: [&str; 2];
    let mut _224: &[core::fmt::rt::Argument<'_>];
    let mut _225: &[core::fmt::rt::Argument<'_>; 2];
    let _226: &[core::fmt::rt::Argument<'_>; 2];
    let _227: [core::fmt::rt::Argument<'_>; 2];
    let mut _228: core::fmt::rt::Argument<'_>;
    let mut _229: &u8;
    let _230: &u8;
    let mut _231: core::fmt::rt::Argument<'_>;
    let mut _232: &u8;
    let _233: &u8;
    let mut _234: u8;
    let mut _235: u8;
    let mut _236: bool;
    let _237: ();
    let mut _238: &mut state::last_update::LastUpdate;
    let _239: ();
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _241: std::result::Result<(), anchor_lang::error::Error>;
    let mut _242: &state::obligation::Obligation;
    let mut _243: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _244: impl Iterator<Item = T> + Clone;
    let mut _245: impl Iterator<Item = T> + Clone;
    let mut _246: isize;
    let mut _248: !;
    let mut _249: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _251: ();
    let mut _261: &LendingError;
    let mut _262: &LendingError;
    let mut _263: bool;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug initial_ltv => _38;
        let _50: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _53: std::option::Option<&state::lending_market::ElevationGroup>;
        let _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _62: ();
        let _63: std::option::Option<&state::lending_market::ElevationGroup>;
        let _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _72: std::option::Option<&state::lending_market::ElevationGroup>;
        scope 6 {
            debug residual => _50;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _53;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _59;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _62;
            scope 13 {
            }
        }
        scope 14 {
            debug elevation_group => _63;
            let _135: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            let _136: std::option::Option<u64>;
            let _149: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _152: state::types::RefreshObligationBorrowsResult;
            scope 19 {
                debug elevation_group => _75;
                let _75: &state::lending_market::ElevationGroup;
                let mut _255: &LendingError;
                let mut _256: &LendingError;
                let mut _257: &LendingError;
                let mut _258: &LendingError;
                let mut _259: &LendingError;
                let mut _260: &LendingError;
            }
            scope 20 {
                debug borrow_factor_adjusted_debt_value => _135;
                debug borrowed_amount_in_elevation_group => _136;
                let _153: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                let _154: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                let _155: bool;
                let _168: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _171: state::types::RefreshObligationDepositsResult;
                scope 25 {
                    debug allowed_borrow_value => _153;
                    debug deposited_value => _154;
                    debug borrowing_disabled => _155;
                    let _208: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _211: ();
                    let _218: std::string::String;
                    let _247: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _250: ();
                    let mut _252: &LendingError;
                    let mut _253: &LendingError;
                    let mut _254: &[&str; 2];
                    scope 30 {
                        debug residual => _208;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => _211;
                        scope 33 {
                        }
                    }
                    scope 34 {
                        debug res => _218;
                    }
                    scope 35 {
                        debug residual => _247;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug val => _250;
                        scope 38 {
                        }
                    }
                }
                scope 26 {
                    debug residual => _168;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug val => _171;
                    scope 29 {
                    }
                }
            }
            scope 21 {
                debug residual => _149;
                scope 22 {
                }
            }
            scope 23 {
                debug val => _152;
                scope 24 {
                }
            }
        }
        scope 15 {
            debug residual => _69;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _72;
            scope 18 {
            }
        }
    }

    bb0: {
        _265 = const false;
        _264 = const false;
        _267 = const false;
        _266 = const false;
        _263 = const false;
        _265 = const true;
        _264 = const true;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_2);
        StorageLive(_13);
        _13 = _4;
        _11 = check_obligation_fully_refreshed_and_not_null(move _12, move _13) -> [return: bb1, unwind: bb113];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _11) -> [return: bb2, unwind: bb113];
    }

    bb2: {
        StorageDead(_11);
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = ((_10 as Continue).0: ());
        _9 = _18;
        StorageDead(_18);
        _268 = discriminant(_10);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_2).14: u8);
        StorageLive(_22);
        _22 = _5;
        _20 = Ne(move _21, move _22);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _17) -> [return: bb6, unwind: bb130];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        _298 = discriminant(_10);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb104;
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = const ();
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_2);
        _38 = obligation::Obligation::loan_to_value(move _39) -> [return: bb13, unwind: bb113];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _262 = const _;
        _27 = &(*_262);
        _26 = LendingError::name(move _27) -> [return: bb9, unwind: bb113];
    }

    bb9: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        _30 = LendingError::ElevationGroupAlreadyActivated;
        _29 = <LendingError as Into<u32>>::into(move _30) -> [return: bb10, unwind: bb112];
    }

    bb10: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _261 = const _;
        _32 = &(*_261);
        _31 = <LendingError as ToString>::to_string(move _32) -> [return: bb11, unwind: bb112];
    }

    bb11: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 790_u32 };
        _35 = anchor_lang::error::ErrorOrigin::Source(move _36);
        StorageDead(_36);
        _34 = std::option::Option::<ErrorOrigin>::Some(move _35);
        StorageDead(_35);
        StorageLive(_37);
        _37 = std::option::Option::<ComparedValues>::None;
        _25 = anchor_lang::error::AnchorError { error_name: move _26, error_code_number: move _29, error_msg: move _31, error_origin: move _34, compared_values: move _37 };
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_26);
        _24 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _25) -> [return: bb12, unwind: bb113];
    }

    bb12: {
        StorageDead(_25);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _24);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb104;
    }

    bb13: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut (*_2);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_2).14: u8);
        StorageLive(_48);
        _48 = &(*_3);
        _46 = get_elevation_group(move _47, move _48) -> [return: bb14, unwind: bb113];
    }

    bb14: {
        StorageDead(_48);
        StorageDead(_47);
        _45 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as Try>::branch(move _46) -> [return: bb15, unwind: bb113];
    }

    bb15: {
        _263 = const true;
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_53);
        _53 = ((_45 as Continue).0: std::option::Option<&state::lending_market::ElevationGroup>);
        _44 = _53;
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_6;
        _54 = <impl Iterator<Item = T> + Clone as Clone>::clone(move _55) -> [return: bb19, unwind: bb129];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _52) -> [return: bb18, unwind: bb129];
    }

    bb18: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb102;
    }

    bb19: {
        _267 = const true;
        StorageDead(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_7;
        _56 = <impl Iterator<Item = T> + Clone as Clone>::clone(move _57) -> [return: bb20, unwind: bb128];
    }

    bb20: {
        StorageDead(_57);
        _267 = const false;
        _42 = reset_elevation_group_debts::<'_, T, impl Iterator<Item = T> + Clone, impl Iterator<Item = T> + Clone>(move _43, move _44, move _54, move _56) -> [return: bb21, unwind: bb128];
    }

    bb21: {
        StorageDead(_56);
        _267 = const false;
        StorageDead(_54);
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _42) -> [return: bb22, unwind: bb129];
    }

    bb22: {
        StorageDead(_42);
        _58 = discriminant(_41);
        switchInt(move _58) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_62);
        _62 = ((_41 as Continue).0: ());
        _40 = _62;
        StorageDead(_62);
        _270 = discriminant(_41);
        _272 = discriminant(_45);
        _263 = const false;
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _5;
        StorageLive(_67);
        _67 = &(*_3);
        _65 = get_elevation_group(move _66, move _67) -> [return: bb26, unwind: bb113];
    }

    bb24: {
        StorageLive(_59);
        _59 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _61) -> [return: bb25, unwind: bb126];
    }

    bb25: {
        StorageDead(_61);
        StorageDead(_59);
        _294 = discriminant(_41);
        goto -> bb102;
    }

    bb26: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as Try>::branch(move _65) -> [return: bb27, unwind: bb113];
    }

    bb27: {
        StorageDead(_65);
        _68 = discriminant(_64);
        switchInt(move _68) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_72);
        _72 = ((_64 as Continue).0: std::option::Option<&state::lending_market::ElevationGroup>);
        _63 = _72;
        StorageDead(_72);
        _274 = discriminant(_64);
        StorageDead(_64);
        StorageLive(_73);
        _74 = discriminant(_63);
        switchInt(move _74) -> [1: bb31, otherwise: bb54];
    }

    bb29: {
        StorageLive(_69);
        _69 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_71);
        _71 = move _69;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _71) -> [return: bb30, unwind: bb125];
    }

    bb30: {
        StorageDead(_71);
        StorageDead(_69);
        _292 = discriminant(_64);
        StorageDead(_64);
        goto -> bb101;
    }

    bb31: {
        StorageLive(_75);
        _75 = ((_63 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_75);
        _77 = state::lending_market::ElevationGroup::new_loans_disabled(move _78) -> [return: bb32, unwind: bb113];
    }

    bb32: {
        switchInt(move _77) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _256 = const _;
        _83 = &(*_256);
        _82 = LendingError::name(move _83) -> [return: bb35, unwind: bb113];
    }

    bb34: {
        StorageDead(_78);
        _76 = const ();
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &((*_75).7: anchor_lang::prelude::Pubkey);
        StorageLive(_97);
        StorageLive(_98);
        _98 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb39, unwind: bb113];
    }

    bb35: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        _86 = LendingError::ElevationGroupNewLoansDisabled;
        _85 = <LendingError as Into<u32>>::into(move _86) -> [return: bb36, unwind: bb111];
    }

    bb36: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _255 = const _;
        _88 = &(*_255);
        _87 = <LendingError as ToString>::to_string(move _88) -> [return: bb37, unwind: bb111];
    }

    bb37: {
        StorageDead(_88);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 810_u32 };
        _91 = anchor_lang::error::ErrorOrigin::Source(move _92);
        StorageDead(_92);
        _90 = std::option::Option::<ErrorOrigin>::Some(move _91);
        StorageDead(_91);
        StorageLive(_93);
        _93 = std::option::Option::<ComparedValues>::None;
        _81 = anchor_lang::error::AnchorError { error_name: move _82, error_code_number: move _85, error_msg: move _87, error_origin: move _90, compared_values: move _93 };
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        _80 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _81) -> [return: bb38, unwind: bb113];
    }

    bb38: {
        StorageDead(_81);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _80);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb100;
    }

    bb39: {
        _97 = &_98;
        _95 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _96, move _97) -> [return: bb40, unwind: bb113];
    }

    bb40: {
        switchInt(move _95) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_98);
        _94 = const ();
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = ((*_75).5: u8);
        _115 = Le(move _116, const 0_u8);
        switchInt(move _115) -> [0: bb48, otherwise: bb47];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _260 = const _;
        _103 = &(*_260);
        _102 = LendingError::name(move _103) -> [return: bb43, unwind: bb113];
    }

    bb43: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        _106 = LendingError::ElevationGroupWithoutDebtReserve;
        _105 = <LendingError as Into<u32>>::into(move _106) -> [return: bb44, unwind: bb110];
    }

    bb44: {
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        _259 = const _;
        _108 = &(*_259);
        _107 = <LendingError as ToString>::to_string(move _108) -> [return: bb45, unwind: bb110];
    }

    bb45: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 815_u32 };
        _111 = anchor_lang::error::ErrorOrigin::Source(move _112);
        StorageDead(_112);
        _110 = std::option::Option::<ErrorOrigin>::Some(move _111);
        StorageDead(_111);
        StorageLive(_113);
        _113 = std::option::Option::<ComparedValues>::None;
        _101 = anchor_lang::error::AnchorError { error_name: move _102, error_code_number: move _105, error_msg: move _107, error_origin: move _110, compared_values: move _113 };
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_102);
        _100 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _101) -> [return: bb46, unwind: bb113];
    }

    bb46: {
        StorageDead(_101);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _100);
        StorageDead(_100);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb100;
    }

    bb47: {
        StorageDead(_116);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _258 = const _;
        _122 = &(*_258);
        _121 = LendingError::name(move _122) -> [return: bb49, unwind: bb113];
    }

    bb48: {
        StorageDead(_116);
        _114 = const ();
        StorageDead(_115);
        StorageDead(_114);
        _73 = const ();
        StorageDead(_75);
        goto -> bb55;
    }

    bb49: {
        StorageDead(_122);
        StorageLive(_124);
        StorageLive(_125);
        _125 = LendingError::ElevationGroupMaxCollateralReserveZero;
        _124 = <LendingError as Into<u32>>::into(move _125) -> [return: bb50, unwind: bb109];
    }

    bb50: {
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        _257 = const _;
        _127 = &(*_257);
        _126 = <LendingError as ToString>::to_string(move _127) -> [return: bb51, unwind: bb109];
    }

    bb51: {
        StorageDead(_127);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 820_u32 };
        _130 = anchor_lang::error::ErrorOrigin::Source(move _131);
        StorageDead(_131);
        _129 = std::option::Option::<ErrorOrigin>::Some(move _130);
        StorageDead(_130);
        StorageLive(_132);
        _132 = std::option::Option::<ComparedValues>::None;
        _120 = anchor_lang::error::AnchorError { error_name: move _121, error_code_number: move _124, error_msg: move _126, error_origin: move _129, compared_values: move _132 };
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_121);
        _119 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _120) -> [return: bb52, unwind: bb113];
    }

    bb52: {
        StorageDead(_120);
        StorageLive(_133);
        StorageLive(_134);
        _134 = ((*_75).5: u8);
        _133 = (move _134, const 0_i32);
        StorageDead(_134);
        _118 = anchor_lang::error::Error::with_values::<u8, i32>(move _119, move _133) -> [return: bb53, unwind: bb113];
    }

    bb53: {
        StorageDead(_133);
        StorageDead(_119);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _118);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb100;
    }

    bb54: {
        _73 = const ();
        goto -> bb55;
    }

    bb55: {
        StorageDead(_73);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &(*_1);
        StorageLive(_141);
        _141 = &mut (*_2);
        StorageLive(_142);
        _142 = &(*_3);
        StorageLive(_143);
        _143 = _4;
        StorageLive(_144);
        _144 = _63;
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_7;
        _145 = <impl Iterator<Item = T> + Clone as Clone>::clone(move _146) -> [return: bb56, unwind: bb113];
    }

    bb56: {
        StorageDead(_146);
        StorageLive(_147);
        _147 = &mut _8;
        _139 = refresh_obligation_borrows::<'_, T, U, impl Iterator<Item = T> + Clone, &mut impl Iterator<Item = U>>(move _140, move _141, move _142, move _143, move _144, move _145, move _147) -> [return: bb57, unwind: bb113];
    }

    bb57: {
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        _138 = <std::result::Result<state::types::RefreshObligationBorrowsResult, anchor_lang::error::Error> as Try>::branch(move _139) -> [return: bb58, unwind: bb113];
    }

    bb58: {
        StorageDead(_139);
        _148 = discriminant(_138);
        switchInt(move _148) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_152);
        _152 = move ((_138 as Continue).0: state::types::RefreshObligationBorrowsResult);
        _137 = move _152;
        StorageDead(_152);
        StorageLive(_135);
        _135 = (_137.0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_136);
        _136 = (_137.4: std::option::Option<u64>);
        _276 = discriminant(_138);
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &mut (*_2);
        StorageLive(_160);
        _160 = &(*_3);
        StorageLive(_161);
        _161 = _4;
        StorageLive(_162);
        _162 = state::types::MaxReservesAsCollateralCheck::Perform;
        StorageLive(_163);
        _163 = _63;
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_6;
        _164 = <impl Iterator<Item = T> + Clone as Clone>::clone(move _165) -> [return: bb62, unwind: bb113];
    }

    bb60: {
        StorageLive(_149);
        _149 = move ((_138 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_151);
        _151 = move _149;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _151) -> [return: bb61, unwind: bb124];
    }

    bb61: {
        StorageDead(_151);
        StorageDead(_149);
        _290 = discriminant(_138);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb101;
    }

    bb62: {
        StorageDead(_165);
        StorageLive(_166);
        _166 = _136;
        _158 = refresh_obligation_deposits::<'_, T, impl Iterator<Item = T> + Clone>(move _159, move _160, move _161, move _162, move _163, move _164, move _166) -> [return: bb63, unwind: bb113];
    }

    bb63: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        _157 = <std::result::Result<state::types::RefreshObligationDepositsResult, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb113];
    }

    bb64: {
        StorageDead(_158);
        _167 = discriminant(_157);
        switchInt(move _167) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_171);
        _171 = move ((_157 as Continue).0: state::types::RefreshObligationDepositsResult);
        _156 = move _171;
        StorageDead(_171);
        StorageLive(_153);
        _153 = (_156.4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_154);
        _154 = (_156.3: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_155);
        _155 = (_156.7: bool);
        _278 = discriminant(_157);
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_153;
        StorageLive(_175);
        _175 = &_135;
        _173 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _174, move _175) -> [return: bb68, unwind: bb113];
    }

    bb66: {
        StorageLive(_168);
        _168 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_170);
        _170 = move _168;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _170) -> [return: bb67, unwind: bb123];
    }

    bb67: {
        StorageDead(_170);
        StorageDead(_168);
        _288 = discriminant(_157);
        StorageDead(_157);
        StorageDead(_156);
        goto -> bb99;
    }

    bb68: {
        switchInt(move _173) -> [0: bb78, otherwise: bb69];
    }

    bb69: {
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = const "The obligation is not healthy enough to support the new elevation group";
        _178 = &(*_179);
        _177 = solana_program::log::sol_log(move _178) -> [return: bb70, unwind: bb113];
    }

    bb70: {
        StorageDead(_178);
        StorageDead(_179);
        StorageDead(_177);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _253 = const _;
        _184 = &(*_253);
        _183 = LendingError::name(move _184) -> [return: bb71, unwind: bb113];
    }

    bb71: {
        StorageDead(_184);
        StorageLive(_186);
        StorageLive(_187);
        _187 = LendingError::UnhealthyElevationGroupLtv;
        _186 = <LendingError as Into<u32>>::into(move _187) -> [return: bb72, unwind: bb108];
    }

    bb72: {
        StorageDead(_187);
        StorageLive(_188);
        StorageLive(_189);
        _252 = const _;
        _189 = &(*_252);
        _188 = <LendingError as ToString>::to_string(move _189) -> [return: bb73, unwind: bb108];
    }

    bb73: {
        StorageDead(_189);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 859_u32 };
        _192 = anchor_lang::error::ErrorOrigin::Source(move _193);
        StorageDead(_193);
        _191 = std::option::Option::<ErrorOrigin>::Some(move _192);
        StorageDead(_192);
        StorageLive(_194);
        _194 = std::option::Option::<ComparedValues>::None;
        _182 = anchor_lang::error::AnchorError { error_name: move _183, error_code_number: move _186, error_msg: move _188, error_origin: move _191, compared_values: move _194 };
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_183);
        _181 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _182) -> [return: bb74, unwind: bb113];
    }

    bb74: {
        _266 = const true;
        StorageDead(_182);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &_153;
        _196 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _197) -> [return: bb75, unwind: bb122];
    }

    bb75: {
        StorageDead(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_135;
        _198 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _199) -> [return: bb76, unwind: bb122];
    }

    bb76: {
        StorageDead(_199);
        _195 = (move _196, move _198);
        StorageDead(_198);
        StorageDead(_196);
        _266 = const false;
        _180 = anchor_lang::error::Error::with_values::<FractionDisplay<'_>, FractionDisplay<'_>>(move _181, move _195) -> [return: bb77, unwind: bb122];
    }

    bb77: {
        StorageDead(_195);
        _266 = const false;
        StorageDead(_181);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _180);
        StorageDead(_180);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb98;
    }

    bb78: {
        StorageDead(_175);
        StorageDead(_174);
        _172 = const ();
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &(*_2);
        StorageLive(_204);
        _204 = _38;
        StorageLive(_205);
        _205 = _135;
        StorageLive(_206);
        _206 = _154;
        _202 = check_ltv_not_worse_if_marked_for_deleveraging(move _203, move _204, move _205, move _206) -> [return: bb79, unwind: bb113];
    }

    bb79: {
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_203);
        _201 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _202) -> [return: bb80, unwind: bb113];
    }

    bb80: {
        StorageDead(_202);
        _207 = discriminant(_201);
        switchInt(move _207) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_211);
        _211 = ((_201 as Continue).0: ());
        _200 = _211;
        StorageDead(_211);
        _280 = discriminant(_201);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _254 = const _;
        _222 = &(*_254);
        _221 = &(*_222);
        _220 = move _221 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_221);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &((*_2).14: u8);
        _229 = &(*_230);
        _228 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _229) -> [return: bb84, unwind: bb113];
    }

    bb82: {
        StorageLive(_208);
        _208 = move ((_201 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_210);
        _210 = move _208;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _210) -> [return: bb83, unwind: bb120];
    }

    bb83: {
        StorageDead(_210);
        StorageDead(_208);
        _286 = discriminant(_201);
        StorageDead(_201);
        StorageDead(_200);
        goto -> bb98;
    }

    bb84: {
        StorageDead(_229);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_5;
        _232 = &(*_233);
        _231 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _232) -> [return: bb85, unwind: bb113];
    }

    bb85: {
        StorageDead(_232);
        _227 = [move _228, move _231];
        StorageDead(_231);
        StorageDead(_228);
        _226 = &_227;
        _225 = &(*_226);
        _224 = move _225 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_225);
        _219 = Arguments::<'_>::new_v1(move _220, move _224) -> [return: bb86, unwind: bb113];
    }

    bb86: {
        StorageDead(_224);
        StorageDead(_220);
        _218 = format(move _219) -> [return: bb87, unwind: bb113];
    }

    bb87: {
        StorageDead(_219);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_222);
        _217 = move _218;
        StorageDead(_218);
        _216 = &_217;
        _215 = &(*_216);
        _214 = <std::string::String as Deref>::deref(move _215) -> [return: bb88, unwind: bb107];
    }

    bb88: {
        _213 = &(*_214);
        StorageDead(_215);
        _212 = solana_program::log::sol_log(move _213) -> [return: bb89, unwind: bb107];
    }

    bb89: {
        StorageDead(_213);
        drop(_217) -> [return: bb90, unwind: bb113];
    }

    bb90: {
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageLive(_234);
        _234 = _5;
        ((*_2).14: u8) = move _234;
        StorageDead(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = _155;
        _235 = <bool as Into<u8>>::into(move _236) -> [return: bb91, unwind: bb113];
    }

    bb91: {
        StorageDead(_236);
        ((*_2).18: u8) = move _235;
        StorageDead(_235);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &mut ((*_2).1: state::last_update::LastUpdate);
        _237 = last_update::LastUpdate::mark_stale(move _238) -> [return: bb92, unwind: bb113];
    }

    bb92: {
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &(*_2);
        StorageLive(_243);
        _243 = _63;
        StorageLive(_244);
        _265 = const false;
        _244 = move _6;
        StorageLive(_245);
        _264 = const false;
        _245 = move _7;
        _241 = check_elevation_group_borrow_limit_constraints::<'_, T, impl Iterator<Item = T> + Clone, impl Iterator<Item = T> + Clone>(move _242, move _243, move _244, move _245) -> [return: bb93, unwind: bb113];
    }

    bb93: {
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_242);
        _240 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _241) -> [return: bb94, unwind: bb113];
    }

    bb94: {
        StorageDead(_241);
        _246 = discriminant(_240);
        switchInt(move _246) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        StorageLive(_250);
        _250 = ((_240 as Continue).0: ());
        _239 = _250;
        StorageDead(_250);
        _282 = discriminant(_240);
        StorageDead(_240);
        StorageDead(_239);
        StorageLive(_251);
        _251 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _251);
        StorageDead(_251);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_63);
        StorageDead(_38);
        drop(_8) -> [return: bb106, unwind: bb132];
    }

    bb96: {
        StorageLive(_247);
        _247 = move ((_240 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_249);
        _249 = move _247;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _249) -> [return: bb97, unwind: bb119];
    }

    bb97: {
        StorageDead(_249);
        StorageDead(_247);
        _284 = discriminant(_240);
        StorageDead(_240);
        StorageDead(_239);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb101;
    }

    bb100: {
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_63);
        goto -> bb103;
    }

    bb102: {
        _296 = discriminant(_45);
        _263 = const false;
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_38);
        goto -> bb104;
    }

    bb104: {
        drop(_8) -> [return: bb117, unwind: bb132];
    }

    bb105: {
        switchInt(_265) -> [0: bb106, otherwise: bb118];
    }

    bb106: {
        return;
    }

    bb107 (cleanup): {
        drop(_217) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_183) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_121) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_102) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_82) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_26) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_8) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_265) -> [0: bb115, otherwise: bb133];
    }

    bb115 (cleanup): {
        resume;
    }

    bb116: {
        drop(_7) -> [return: bb105, unwind: bb114];
    }

    bb117: {
        switchInt(_264) -> [0: bb105, otherwise: bb116];
    }

    bb118: {
        drop(_6) -> [return: bb106, unwind: bb115];
    }

    bb119 (cleanup): {
        _300 = discriminant(_240);
        goto -> bb113;
    }

    bb120 (cleanup): {
        _301 = discriminant(_201);
        goto -> bb113;
    }

    bb121 (cleanup): {
        drop(_181) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        switchInt(_266) -> [0: bb113, otherwise: bb121];
    }

    bb123 (cleanup): {
        _302 = discriminant(_157);
        goto -> bb113;
    }

    bb124 (cleanup): {
        _303 = discriminant(_138);
        goto -> bb113;
    }

    bb125 (cleanup): {
        _304 = discriminant(_64);
        goto -> bb113;
    }

    bb126 (cleanup): {
        _305 = discriminant(_41);
        goto -> bb129;
    }

    bb127 (cleanup): {
        drop(_54) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        switchInt(_267) -> [0: bb129, otherwise: bb127];
    }

    bb129 (cleanup): {
        _306 = discriminant(_45);
        goto -> bb113;
    }

    bb130 (cleanup): {
        _307 = discriminant(_10);
        goto -> bb113;
    }

    bb131 (cleanup): {
        drop(_7) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        switchInt(_264) -> [0: bb114, otherwise: bb131];
    }

    bb133 (cleanup): {
        drop(_6) -> [return: bb115, unwind terminate(cleanup)];
    }
}
