// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::repay` after PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::repay(_1: &mut obligation::Obligation, _2: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _3: usize) -> () {
    debug self => _1;
    debug settle_amount => _2;
    debug liquidity_index => _3;
    let mut _0: ();
    let _4: &mut state::obligation::ObligationLiquidity;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _11: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _12: &state::obligation::ObligationLiquidity;
    let mut _13: state::obligation::ObligationLiquidity;
    let _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let _20: ();
    let mut _21: &mut state::obligation::ObligationLiquidity;
    let mut _22: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug liquidity => _4;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        _6 = Len(((*_1).7: [state::obligation::ObligationLiquidity; 5]));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut ((*_1).7: [state::obligation::ObligationLiquidity; 5])[_5];
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_2;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_4);
        _11 = obligation::ObligationLiquidity::borrowed_amount(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_11;
        StorageDead(_12);
        _8 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _8) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_13);
        _13 = <obligation::ObligationLiquidity as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_14);
        _14 = _3;
        _15 = Len(((*_1).7: [state::obligation::ObligationLiquidity; 5]));
        _16 = Lt(_14, _15);
        assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb6, unwind continue];
    }

    bb6: {
        ((*_1).7: [state::obligation::ObligationLiquidity; 5])[_14] = move _13;
        StorageDead(_13);
        StorageDead(_14);
        StorageLive(_17);
        _17 = _3;
        _18 = Len(((*_1).13: [u8; 5]));
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb7, unwind continue];
    }

    bb7: {
        ((*_1).13: [u8; 5])[_17] = const _;
        StorageDead(_17);
        _0 = const ();
        goto -> bb10;
    }

    bb8: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut (*_4);
        StorageLive(_22);
        _22 = _2;
        _20 = obligation::ObligationLiquidity::repay(move _21, move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _0 = const ();
        goto -> bb10;
    }

    bb10: {
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
