// MIR for `utils::constraints::emergency_mode_disabled` before PreCodegen

fn utils::constraints::emergency_mode_disabled(_1: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug lending_market => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: &state::lending_market::LendingMarket;
    let mut _6: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _7: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _9: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _16: !;
    let mut _17: anchor_lang::error::Error;
    let mut _18: anchor_lang::error::AnchorError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: u32;
    let mut _23: LendingError;
    let mut _24: std::string::String;
    let mut _25: &LendingError;
    let _26: LendingError;
    let mut _27: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _28: anchor_lang::error::ErrorOrigin;
    let mut _29: anchor_lang::error::Source;
    let mut _30: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _31: ();
    let mut _32: &LendingError;
    let mut _33: &LendingError;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }

    bb0: {
        _35 = const false;
        _34 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        _9 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _34 = const true;
        _35 = const true;
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = move ((_8 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _7 = move _15;
        StorageDead(_15);
        _6 = &_7;
        _5 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _6) -> [return: bb7, unwind: bb17];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        _40 = discriminant(_8);
        _34 = const false;
        _35 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb14;
    }

    bb7: {
        StorageDead(_6);
        _4 = ((*_5).6: u8);
        _3 = Gt(move _4, const 0_u8);
        switchInt(move _3) -> [0: bb13, otherwise: bb8];
    }

    bb8: {
        drop(_7) -> [return: bb19, unwind: bb21];
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = LendingError::GlobalEmergencyMode;
        _22 = <LendingError as Into<u32>>::into(move _23) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _32 = const _;
        _25 = &(*_32);
        _24 = <LendingError as ToString>::to_string(move _25) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 11_u32 };
        _28 = anchor_lang::error::ErrorOrigin::Source(move _29);
        StorageDead(_29);
        _27 = std::option::Option::<ErrorOrigin>::Some(move _28);
        StorageDead(_28);
        StorageLive(_30);
        _30 = std::option::Option::<ComparedValues>::None;
        _18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 };
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        _17 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _18) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        StorageDead(_18);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _17);
        StorageDead(_17);
        goto -> bb14;
    }

    bb13: {
        drop(_7) -> [return: bb20, unwind: bb21];
    }

    bb14: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_19) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_7) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _36 = discriminant(_8);
        _34 = const false;
        _35 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _33 = const _;
        _20 = &(*_33);
        _19 = LendingError::name(move _20) -> [return: bb9, unwind continue];
    }

    bb20: {
        _38 = discriminant(_8);
        _34 = const false;
        _35 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_31);
        _31 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _31);
        StorageDead(_31);
        goto -> bb15;
    }

    bb21 (cleanup): {
        _42 = discriminant(_8);
        goto -> bb18;
    }
}
