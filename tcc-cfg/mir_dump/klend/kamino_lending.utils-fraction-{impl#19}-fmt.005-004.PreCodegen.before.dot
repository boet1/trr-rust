digraph Mir_0_2483 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;FractionDisplay&lt;'_&gt; as std::fmt::Display&gt;::fmt(_1: &amp;ReErased utils::fraction::FractionDisplay&lt;ReErased&gt;, _2: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let _3: u128;<br align="left"/>let mut _4: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _5: u128;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: (u128, bool);<br align="left"/>let _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: bool;<br align="left"/>let _11: u64;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: u128;<br align="left"/>let _14: u64;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: u64;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: u32;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: (u64, bool);<br align="left"/>let mut _21: u32;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _24: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _25: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _26: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _27: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _28: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _29: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _30: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _31: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _32: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _33: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _34: &amp;ReErased u128;<br align="left"/>let _35: &amp;ReErased u128;<br align="left"/>let mut _36: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _37: &amp;ReErased u64;<br align="left"/>let _38: &amp;ReErased u64;<br align="left"/>let mut _39: &amp;ReErased [core::fmt::rt::Placeholder];<br align="left"/>let mut _40: &amp;ReErased [core::fmt::rt::Placeholder; 2_usize];<br align="left"/>let _41: &amp;ReErased [core::fmt::rt::Placeholder; 2_usize];<br align="left"/>let _42: [core::fmt::rt::Placeholder; 2_usize];<br align="left"/>let mut _43: core::fmt::rt::Placeholder;<br align="left"/>let mut _44: core::fmt::rt::Alignment;<br align="left"/>let mut _45: core::fmt::rt::Count;<br align="left"/>let mut _46: core::fmt::rt::Count;<br align="left"/>let mut _47: core::fmt::rt::Placeholder;<br align="left"/>let mut _48: core::fmt::rt::Alignment;<br align="left"/>let mut _49: core::fmt::rt::Count;<br align="left"/>let mut _50: core::fmt::rt::Count;<br align="left"/>let mut _51: core::fmt::rt::UnsafeArg;<br align="left"/>let mut _52: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _53: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug formater =&gt; _2;<br align="left"/>debug sf =&gt; _3;<br align="left"/>debug sf =&gt; _5;<br align="left"/>debug i =&gt; _8;<br align="left"/>debug f_p =&gt; _11;<br align="left"/>debug f_p =&gt; _14;<br align="left"/>>;
    bb0__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_53 = deref_copy ((*_1).0: &amp;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/>_4 = (*_53)<br/></td></tr><tr><td align="left">_3 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _4)</td></tr></table>>];
    bb1__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _3<br/>_7 = CheckedAdd(_6, const _)<br/></td></tr><tr><td align="left">assert(!move (_7.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _6, const _)</td></tr></table>>];
    bb2__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = move (_7.0: u128)<br/>StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _5<br/>_10 = Lt(const _, const 128_u32)<br/></td></tr><tr><td align="left">assert(move _10, &quot;attempt to shift right by `{}`, which would overflow&quot;, const _)</td></tr></table>>];
    bb3__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = Shr(move _9, const _)<br/>StorageDead(_9)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _5<br/>_12 = BitAnd(move _13, const _)<br/>StorageDead(_13)<br/>_11 = move _12 as u64 (IntToInt)<br/>StorageDead(_12)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _11<br/>_18 = const 30_i32 as u32 (IntToInt)<br/>_19 = Lt(move _18, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _19, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 30_i32)</td></tr></table>>];
    bb4__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_16 = Shr(move _17, const 30_i32)<br/>StorageDead(_17)<br/>_20 = CheckedMul(_16, const 10000_u64)<br/></td></tr><tr><td align="left">assert(!move (_20.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _16, const 10000_u64)</td></tr></table>>];
    bb5__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_15 = move (_20.0: u64)<br/>StorageDead(_16)<br/>_21 = const 30_i32 as u32 (IntToInt)<br/>_22 = Lt(move _21, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _22, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 30_i32)</td></tr></table>>];
    bb6__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_14 = Shr(move _15, const 30_i32)<br/>StorageDead(_15)<br/>StorageLive(_23)<br/>_23 = &amp;mut (*_2)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_52 = const _<br/>_27 = &amp;(*_52)<br/>_26 = &amp;(*_27)<br/>_25 = move _26 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_26)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = &amp;_8<br/>_34 = &amp;(*_35)<br/></td></tr><tr><td align="left">_33 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u128&gt;(move _34)</td></tr></table>>];
    bb7__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = &amp;_14<br/>_37 = &amp;(*_38)<br/></td></tr><tr><td align="left">_36 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _37)</td></tr></table>>];
    bb8__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_32 = [move _33, move _36]<br/>StorageDead(_36)<br/>StorageDead(_33)<br/>_31 = &amp;_32<br/>_30 = &amp;(*_31)<br/>_29 = move _30 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_30)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = core::fmt::rt::Alignment::Unknown<br/>StorageLive(_45)<br/>_45 = core::fmt::rt::Count::Implied<br/>StorageLive(_46)<br/>_46 = core::fmt::rt::Count::Implied<br/></td></tr><tr><td align="left">_43 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _44, const 0_u32, move _45, move _46)</td></tr></table>>];
    bb9__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = core::fmt::rt::Alignment::Right<br/>StorageLive(_49)<br/>_49 = core::fmt::rt::Count::Implied<br/>StorageLive(_50)<br/>_50 = core::fmt::rt::Count::Is(const 4_usize)<br/></td></tr><tr><td align="left">_47 = core::fmt::rt::Placeholder::new(const 1_usize, const '0', move _48, const 0_u32, move _49, move _50)</td></tr></table>>];
    bb10__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>_42 = [move _43, move _47]<br/>StorageDead(_47)<br/>StorageDead(_43)<br/>_41 = &amp;_42<br/>_40 = &amp;(*_41)<br/>_39 = move _40 as &amp;[core::fmt::rt::Placeholder] (PointerCoercion(Unsize))<br/>StorageDead(_40)<br/>StorageLive(_51)<br/></td></tr><tr><td align="left">_51 = core::fmt::rt::UnsafeArg::new()</td></tr></table>>];
    bb11__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">_24 = Arguments::&lt;'_&gt;::new_v1_formatted(move _25, move _29, move _39, move _51)</td></tr></table>>];
    bb12__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_39)<br/>StorageDead(_29)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_fmt(move _23, move _24)</td></tr></table>>];
    bb13__0_2483 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_38)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2483 -> bb1__0_2483 [label="return"];
    bb1__0_2483 -> bb2__0_2483 [label="success"];
    bb2__0_2483 -> bb3__0_2483 [label="success"];
    bb3__0_2483 -> bb4__0_2483 [label="success"];
    bb4__0_2483 -> bb5__0_2483 [label="success"];
    bb5__0_2483 -> bb6__0_2483 [label="success"];
    bb6__0_2483 -> bb7__0_2483 [label="return"];
    bb7__0_2483 -> bb8__0_2483 [label="return"];
    bb8__0_2483 -> bb9__0_2483 [label="return"];
    bb9__0_2483 -> bb10__0_2483 [label="return"];
    bb10__0_2483 -> bb11__0_2483 [label="return"];
    bb11__0_2483 -> bb12__0_2483 [label="return"];
    bb12__0_2483 -> bb13__0_2483 [label="return"];
}
