// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:842:1: 842:21>::opportunity_to_display` before PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:842:1: 842:21>::opportunity_to_display(_1: &obligation::ObligationOrder) -> std::string::String {
    debug self => _1;
    let mut _0: std::string::String;
    let mut _2: state::order_operations::OpportunityType;
    let mut _3: &state::obligation::ObligationOrder;
    let mut _4: u8;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[&str; 2];
    let _9: &[&str; 2];
    let _10: [&str; 2];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let mut _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let mut _16: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _17: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _18: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _19: &state::obligation::ObligationOrder;
    let mut _20: &str;
    let _21: &str;
    let mut _22: &[&str; 2];
    scope 1 {
        debug res => _5;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        _2 = obligation::ObligationOrder::opportunity_type(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_20);
        StorageLive(_21);
        _21 = const "repay all debt";
        _20 = &(*_21);
        _0 = <str as ToString>::to_string(move _20) -> [return: bb9, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _22 = const _;
        _9 = &(*_22);
        _8 = &(*_9);
        _7 = move _8 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_1);
        _18 = obligation::ObligationOrder::opportunity_parameter(move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        _14 = [move _15];
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = move _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_12);
        _6 = Arguments::<'_>::new_v1(move _7, move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_11);
        StorageDead(_7);
        _5 = format(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_6);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_9);
        _0 = move _5;
        StorageDead(_5);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_2);
        return;
    }
}
