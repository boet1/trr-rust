digraph Mir_0_11351 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U256::fits_word(_1: &amp;ReErased utils::fraction::uint_types::U256) -&gt; bool<br align="left"/>let mut _2: !;<br align="left"/>let _3: &amp;ReErased [u64; 4_usize];<br align="left"/>let _4: ();<br align="left"/>let mut _5: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _6: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: ();<br align="left"/>let _9: ();<br align="left"/>let mut _10: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _11: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _13: isize;<br align="left"/>let mut _14: !;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: u64;<br align="left"/>let _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: !;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug arr =&gt; _3;<br align="left"/>debug iter =&gt; _7;<br align="left"/>debug i =&gt; _15;<br align="left"/>>;
    bb0__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;((*_1).0: [u64; 4])<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = std::ops::Range::&lt;usize&gt; { start: const 1_usize, end: const 4_usize }<br/></td></tr><tr><td align="left">_5 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _6)</td></tr></table>>];
    bb1__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>_7 = move _5<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;mut _7<br/>_11 = &amp;mut (*_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _11)</td></tr></table>>];
    bb3__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_13 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb4__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_10 as Some).0: usize)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _15<br/>_19 = Len((*_3))<br/>_20 = Lt(_18, _19)<br/></td></tr><tr><td align="left">assert(move _20, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _19, _18)</td></tr></table>>];
    bb5__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_4 = const ()<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>_0 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = (*_3)[_18]<br/>_16 = Ne(move _17, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb8__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>_0 = const false<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>_9 = const ()<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>_8 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_11351 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11351 -> bb1__0_11351 [label="return"];
    bb1__0_11351 -> bb2__0_11351 [label=""];
    bb2__0_11351 -> bb3__0_11351 [label="return"];
    bb3__0_11351 -> bb6__0_11351 [label="0"];
    bb3__0_11351 -> bb4__0_11351 [label="1"];
    bb3__0_11351 -> bb5__0_11351 [label="otherwise"];
    bb4__0_11351 -> bb7__0_11351 [label="success"];
    bb6__0_11351 -> bb10__0_11351 [label=""];
    bb7__0_11351 -> bb9__0_11351 [label="0"];
    bb7__0_11351 -> bb8__0_11351 [label="otherwise"];
    bb8__0_11351 -> bb10__0_11351 [label=""];
    bb9__0_11351 -> bb2__0_11351 [label=""];
}
