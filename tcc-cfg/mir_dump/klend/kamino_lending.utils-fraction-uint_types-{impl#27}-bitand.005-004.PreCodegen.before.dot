digraph Mir_0_11500 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;uint_types::U256 as BitAnd&gt;::bitand(_1: utils::fraction::uint_types::U256, _2: utils::fraction::uint_types::U256) -&gt; utils::fraction::uint_types::U256<br align="left"/>let _3: &amp;ReErased [u64; 4_usize];<br align="left"/>let _4: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _5: [u64; 4_usize];<br align="left"/>let _6: ();<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _9: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _10: ();<br align="left"/>let _11: ();<br align="left"/>let mut _12: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _13: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _14: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _15: isize;<br align="left"/>let mut _16: !;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: u64;<br align="left"/>let _19: usize;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: u64;<br align="left"/>let _23: usize;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: bool;<br align="left"/>let _26: usize;<br align="left"/>let mut _27: usize;<br align="left"/>let mut _28: bool;<br align="left"/>let mut _29: [u64; 4_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug other =&gt; _2;<br align="left"/>debug arr1 =&gt; _3;<br align="left"/>debug arr2 =&gt; _4;<br align="left"/>debug ret =&gt; _5;<br align="left"/>debug iter =&gt; _9;<br align="left"/>debug i =&gt; _17;<br align="left"/>>;
    bb0__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;(_1.0: [u64; 4])<br/>StorageLive(_4)<br/>_4 = &amp;(_2.0: [u64; 4])<br/>StorageLive(_5)<br/>_5 = [const 0_u64; 4]<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 4_usize }<br/></td></tr><tr><td align="left">_7 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _8)</td></tr></table>>];
    bb1__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_9)<br/>_9 = move _7<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;mut _9<br/>_13 = &amp;mut (*_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _13)</td></tr></table>>];
    bb3__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_15 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb4__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_12 as Some).0: usize)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _17<br/>_20 = Len((*_3))<br/>_21 = Lt(_19, _20)<br/></td></tr><tr><td align="left">assert(move _21, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _20, _19)</td></tr></table>>];
    bb5__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_6 = const ()<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_29)<br/>_29 = _5<br/>_0 = uint_types::U256(move _29)<br/>StorageDead(_29)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb7__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_18 = (*_3)[_19]<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _17<br/>_24 = Len((*_4))<br/>_25 = Lt(_23, _24)<br/></td></tr><tr><td align="left">assert(move _25, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _24, _23)</td></tr></table>>];
    bb8__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_22 = (*_4)[_23]<br/>StorageLive(_26)<br/>_26 = _17<br/>_27 = Len(_5)<br/>_28 = Lt(_26, _27)<br/></td></tr><tr><td align="left">assert(move _28, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _27, _26)</td></tr></table>>];
    bb9__0_11500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_5[_26] = BitAnd(move _18, move _22)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageDead(_26)<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>_11 = const ()<br/>StorageDead(_17)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_11500 -> bb1__0_11500 [label="return"];
    bb1__0_11500 -> bb2__0_11500 [label=""];
    bb2__0_11500 -> bb3__0_11500 [label="return"];
    bb3__0_11500 -> bb6__0_11500 [label="0"];
    bb3__0_11500 -> bb4__0_11500 [label="1"];
    bb3__0_11500 -> bb5__0_11500 [label="otherwise"];
    bb4__0_11500 -> bb7__0_11500 [label="success"];
    bb7__0_11500 -> bb8__0_11500 [label="success"];
    bb8__0_11500 -> bb9__0_11500 [label="success"];
    bb9__0_11500 -> bb2__0_11500 [label=""];
}
