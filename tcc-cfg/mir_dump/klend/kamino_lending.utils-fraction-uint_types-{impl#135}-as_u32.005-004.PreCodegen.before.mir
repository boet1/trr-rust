// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::as_u32` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::as_u32(_1: &uint_types::U128) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let _2: &[u64; 2];
    let _3: ();
    let mut _4: bool;
    let mut _5: &utils::fraction::uint_types::U128;
    let mut _6: bool;
    let mut _7: u64;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: u32;
    let mut _13: !;
    let _14: !;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[&str; 1];
    let _18: &[&str; 1];
    let _19: [&str; 1];
    let mut _20: u64;
    let mut _21: &utils::fraction::uint_types::U128;
    scope 1 {
        debug arr => _2;
        let mut _22: &[&str; 1];
    }

    bb0: {
        StorageLive(_2);
        _2 = &((*_1).0: [u64; 2]);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = uint_types::U128::fits_word(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const 0_usize;
        _9 = Len((*_2));
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        goto -> bb6;
    }

    bb4: {
        _7 = (*_2)[_8];
        StorageLive(_11);
        StorageLive(_12);
        _12 = core::num::<impl u32>::max_value() -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = move _12 as u64 (IntToInt);
        StorageDead(_12);
        _6 = Gt(move _7, move _11);
        switchInt(move _6) -> [0: bb8, otherwise: bb6];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _22 = const _;
        _18 = &(*_22);
        _17 = &(*_18);
        _16 = move _17 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = Arguments::<'_>::new_const(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        _14 = panic_fmt(move _15) -> unwind continue;
    }

    bb8: {
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_7);
        _3 = const ();
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_1);
        _20 = uint_types::U128::as_u64(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        _0 = move _20 as u32 (IntToInt);
        StorageDead(_20);
        StorageDead(_2);
        return;
    }
}
