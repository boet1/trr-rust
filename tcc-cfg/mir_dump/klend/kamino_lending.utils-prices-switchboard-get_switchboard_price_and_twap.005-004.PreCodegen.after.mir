// MIR for `get_switchboard_price_and_twap` after PreCodegen

fn get_switchboard_price_and_twap(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _3: &anchor_lang::prelude::Clock) -> std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> {
    debug switchboard_price_feed_info => _1;
    debug switchboard_twap_feed_info => _2;
    debug clock => _3;
    let mut _0: std::result::Result<utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error>;
    let _4: utils::prices::types::TimestampedPrice;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, utils::prices::types::TimestampedPrice>;
    let mut _6: std::result::Result<utils::prices::types::TimestampedPrice, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &anchor_lang::prelude::Clock;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: utils::prices::types::TimestampedPrice;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<utils::prices::types::TimestampedPrice>>;
    let mut _16: std::result::Result<std::option::Option<utils::prices::types::TimestampedPrice>, anchor_lang::error::Error>;
    let mut _17: std::option::Option<std::result::Result<utils::prices::types::TimestampedPrice, anchor_lang::error::Error>>;
    let mut _18: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _19: &std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _20: {closure@programs\klend\src\utils\prices\switchboard.rs:29:14: 29:23};
    let mut _21: &anchor_lang::prelude::Clock;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _27: utils::prices::types::TimestampedPriceWithTwap;
    let mut _28: utils::prices::types::TimestampedPrice;
    let mut _29: std::option::Option<utils::prices::types::TimestampedPrice>;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    scope 1 {
        debug price => _4;
        let _14: std::option::Option<utils::prices::types::TimestampedPrice>;
        let _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _26: std::option::Option<utils::prices::types::TimestampedPrice>;
        scope 6 {
            debug twap => _14;
        }
        scope 7 {
            debug residual => _23;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _26;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = &(*_3);
        _6 = get_switchboard_price(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<TimestampedPrice, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_5 as Continue).0: utils::prices::types::TimestampedPrice);
        _4 = move _13;
        StorageDead(_13);
        _30 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_2;
        _18 = std::option::Option::<&anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _19) -> [return: bb7, unwind: bb16];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _36 = discriminant(_5);
        StorageDead(_5);
        goto -> bb14;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_3);
        _20 = {closure@programs\klend\src\utils\prices\switchboard.rs:29:14: 29:23} { clock: move _21 };
        StorageDead(_21);
        _17 = std::option::Option::<&&anchor_lang::prelude::AccountInfo<'_>>::map::<std::result::Result<TimestampedPrice, anchor_lang::error::Error>, {closure@programs\klend\src\utils\prices\switchboard.rs:29:14: 29:23}>(move _18, move _20) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = std::option::Option::<std::result::Result<TimestampedPrice, anchor_lang::error::Error>>::transpose(move _17) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_17);
        _15 = <std::result::Result<std::option::Option<TimestampedPrice>, anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_16);
        _22 = discriminant(_15);
        switchInt(move _22) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_26);
        _26 = move ((_15 as Continue).0: std::option::Option<utils::prices::types::TimestampedPrice>);
        _14 = move _26;
        StorageDead(_26);
        _32 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_27);
        StorageLive(_28);
        _28 = move _4;
        StorageLive(_29);
        _29 = move _14;
        _27 = TimestampedPriceWithTwap { price: move _28, twap: move _29 };
        StorageDead(_29);
        StorageDead(_28);
        _0 = std::result::Result::<TimestampedPriceWithTwap, anchor_lang::error::Error>::Ok(move _27);
        StorageDead(_27);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb15;
    }

    bb12: {
        StorageLive(_23);
        _23 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _25) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_23);
        _34 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        drop(_4) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        StorageDead(_4);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_4) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        _38 = discriminant(_15);
        goto -> bb16;
    }

    bb19 (cleanup): {
        _39 = discriminant(_5);
        goto -> bb17;
    }
}
