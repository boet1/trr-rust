// MIR for `kamino_lending::set_obligation_order` after PreCodegen

fn kamino_lending::set_obligation_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_set_obligation_order::SetObligationOrder<'_>>, _2: u8, _3: obligation::ObligationOrder) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug index => _2;
    debug order => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let mut _14: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_set_obligation_order::SetObligationOrder<'_>>;
    let mut _15: u8;
    let mut _16: state::obligation::ObligationOrder;
    let mut _17: &mut handlers::handler_set_obligation_order::SetObligationOrder<'_>;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _17 = deref_copy (_1.1: &mut handlers::handler_set_obligation_order::SetObligationOrder<'_>);
        _8 = &((*_17).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _7 = &(*_8);
        _6 = utils::constraints::emergency_mode_disabled(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _18 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        _14 = move _1;
        StorageLive(_15);
        _15 = _2;
        StorageLive(_16);
        _16 = _3;
        _0 = handlers::handler_set_obligation_order::process(move _14, move _15, move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _20 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _22 = discriminant(_5);
        goto -> bb9;
    }
}
