digraph Mir_0_2584 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_scope_price_and_twap(_1: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: &amp;ReErased state::token_info::ScopeConfiguration) -&gt; std::result::Result&lt;utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error&gt;<br align="left"/>let _3: std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;&gt;;<br align="left"/>let mut _5: std::result::Result&lt;std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _11: std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;;<br align="left"/>let _12: utils::prices::types::TimestampedPrice;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, utils::prices::types::TimestampedPrice&gt;;<br align="left"/>let mut _14: std::result::Result&lt;utils::prices::types::TimestampedPrice, anchor_lang::error::Error&gt;;<br align="left"/>let mut _15: &amp;ReErased scope_types::OraclePrices;<br align="left"/>let _16: &amp;ReErased scope_types::OraclePrices;<br align="left"/>let mut _17: &amp;ReErased std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;;<br align="left"/>let _18: &amp;ReErased std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;;<br align="left"/>let mut _19: [u16; 4_usize];<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _24: utils::prices::types::TimestampedPrice;<br align="left"/>let _25: std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: &amp;ReErased state::token_info::ScopeConfiguration;<br align="left"/>let mut _28: std::result::Result&lt;utils::prices::types::TimestampedPrice, ()&gt;;<br align="left"/>let mut _29: std::result::Result&lt;utils::prices::types::TimestampedPrice, anchor_lang::error::Error&gt;;<br align="left"/>let mut _30: &amp;ReErased scope_types::OraclePrices;<br align="left"/>let _31: &amp;ReErased scope_types::OraclePrices;<br align="left"/>let mut _32: &amp;ReErased std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;;<br align="left"/>let _33: &amp;ReErased std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;;<br align="left"/>let mut _34: [u16; 4_usize];<br align="left"/>let mut _35: Closure(DefId(0:2585 ~ kamino_lending[6389]::utils::prices::scope::get_scope_price_and_twap::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)), []), ()]);<br align="left"/>let mut _36: utils::prices::types::TimestampedPriceWithTwap;<br align="left"/>let mut _37: utils::prices::types::TimestampedPrice;<br align="left"/>let mut _38: std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;;<br align="left"/>let mut _39: isize;<br align="left"/>let mut _40: isize;<br align="left"/>let mut _41: isize;<br align="left"/>let mut _42: isize;<br align="left"/>let mut _43: isize;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: isize;<br align="left"/>let mut _46: isize;<br align="left"/>let mut _47: isize;<br align="left"/>let mut _48: isize;<br align="left"/>debug scope_price_account =&gt; _1;<br align="left"/>debug conf =&gt; _2;<br align="left"/>debug scope_prices =&gt; _3;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>debug price =&gt; _12;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug twap =&gt; _25;<br align="left"/>>;
    bb0__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_1)<br/></td></tr><tr><td align="left">_5 = get_price_account(move _6)</td></tr></table>>];
    bb1__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;Ref&lt;'_, scope_types::OraclePrices&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = move ((_4 as Continue).0: std::cell::Ref&lt;'_, scope_types::OraclePrices&gt;)<br/>_3 = move _11<br/>StorageDead(_11)<br/>_39 = discriminant(_4)<br/>StorageDead(_4)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;_3<br/>_17 = &amp;(*_18)<br/></td></tr><tr><td align="left">_16 = &lt;Ref&lt;'_, scope_types::OraclePrices&gt; as Deref&gt;::deref(move _17)</td></tr></table>>];
    bb4__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>_45 = discriminant(_4)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = &amp;(*_16)<br/>StorageDead(_17)<br/>StorageLive(_19)<br/>_19 = ((*_2).1: [u16; 4])<br/></td></tr><tr><td align="left">_14 = get_price_usd(move _15, move _19)</td></tr></table>>];
    bb8__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;TimestampedPrice, anchor_lang::error::Error&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb9__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_20 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb10__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = move ((_13 as Continue).0: utils::prices::types::TimestampedPrice)<br/>_12 = move _24<br/>StorageDead(_24)<br/>_41 = discriminant(_13)<br/>StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;(*_2)<br/></td></tr><tr><td align="left">_26 = token_info::ScopeConfiguration::has_twap(move _27)</td></tr></table>>];
    bb11__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = move ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_23)<br/>_23 = move _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb12__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>_43 = discriminant(_13)<br/>StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb13__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb14__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = &amp;_3<br/>_32 = &amp;(*_33)<br/></td></tr><tr><td align="left">_31 = &lt;Ref&lt;'_, scope_types::OraclePrices&gt; as Deref&gt;::deref(move _32)</td></tr></table>>];
    bb15__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_30 = &amp;(*_31)<br/>StorageDead(_32)<br/>StorageLive(_34)<br/>_34 = ((*_2).2: [u16; 4])<br/></td></tr><tr><td align="left">_29 = get_price_usd(move _30, move _34)</td></tr></table>>];
    bb16__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_30)<br/>StorageLive(_35)<br/>_35 = {closure@programs\klend\src\utils\prices\scope.rs:24:22: 24:25}<br/></td></tr><tr><td align="left">_28 = std::result::Result::&lt;TimestampedPrice, anchor_lang::error::Error&gt;::map_err::&lt;(), {closure@programs\klend\src\utils\prices\scope.rs:24:22: 24:25}&gt;(move _29, move _35)</td></tr></table>>];
    bb17__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_25 = std::result::Result::&lt;TimestampedPrice, ()&gt;::ok(move _28)</td></tr></table>>];
    bb18__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_33)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_25 = std::option::Option::&lt;TimestampedPrice&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = move _12<br/>StorageLive(_38)<br/>_38 = move _25<br/>_36 = TimestampedPriceWithTwap { price: move _37, twap: move _38 }<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>_0 = std::result::Result::&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt;::Ok(move _36)<br/>StorageDead(_36)<br/>StorageDead(_25)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb21__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left">return</td></tr></table>>];
    bb24__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">24 (cleanup)</td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb25__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">25 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb26__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">26 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb27__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">27 (cleanup)</td></tr><tr><td align="left" balign="left">_47 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_2584 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left" balign="left">_48 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2584 -> bb1__0_2584 [label="return"];
    bb1__0_2584 -> bb2__0_2584 [label="return"];
    bb1__0_2584 -> bb26__0_2584 [label="unwind"];
    bb2__0_2584 -> bb3__0_2584 [label="0"];
    bb2__0_2584 -> bb5__0_2584 [label="1"];
    bb2__0_2584 -> bb4__0_2584 [label="otherwise"];
    bb3__0_2584 -> bb7__0_2584 [label="return"];
    bb3__0_2584 -> bb25__0_2584 [label="unwind"];
    bb5__0_2584 -> bb6__0_2584 [label="return"];
    bb5__0_2584 -> bb28__0_2584 [label="unwind"];
    bb6__0_2584 -> bb22__0_2584 [label=""];
    bb7__0_2584 -> bb8__0_2584 [label="return"];
    bb7__0_2584 -> bb25__0_2584 [label="unwind"];
    bb8__0_2584 -> bb9__0_2584 [label="return"];
    bb8__0_2584 -> bb25__0_2584 [label="unwind"];
    bb9__0_2584 -> bb10__0_2584 [label="0"];
    bb9__0_2584 -> bb11__0_2584 [label="1"];
    bb9__0_2584 -> bb4__0_2584 [label="otherwise"];
    bb10__0_2584 -> bb13__0_2584 [label="return"];
    bb10__0_2584 -> bb24__0_2584 [label="unwind"];
    bb11__0_2584 -> bb12__0_2584 [label="return"];
    bb11__0_2584 -> bb27__0_2584 [label="unwind"];
    bb12__0_2584 -> bb22__0_2584 [label="return"];
    bb12__0_2584 -> bb26__0_2584 [label="unwind"];
    bb13__0_2584 -> bb19__0_2584 [label="0"];
    bb13__0_2584 -> bb14__0_2584 [label="otherwise"];
    bb14__0_2584 -> bb15__0_2584 [label="return"];
    bb14__0_2584 -> bb24__0_2584 [label="unwind"];
    bb15__0_2584 -> bb16__0_2584 [label="return"];
    bb15__0_2584 -> bb24__0_2584 [label="unwind"];
    bb16__0_2584 -> bb17__0_2584 [label="return"];
    bb16__0_2584 -> bb24__0_2584 [label="unwind"];
    bb17__0_2584 -> bb18__0_2584 [label="return"];
    bb17__0_2584 -> bb24__0_2584 [label="unwind"];
    bb18__0_2584 -> bb20__0_2584 [label=""];
    bb19__0_2584 -> bb20__0_2584 [label=""];
    bb20__0_2584 -> bb21__0_2584 [label="return"];
    bb20__0_2584 -> bb26__0_2584 [label="unwind"];
    bb21__0_2584 -> bb23__0_2584 [label=""];
    bb22__0_2584 -> bb23__0_2584 [label=""];
    bb24__0_2584 -> bb25__0_2584 [label="return"];
    bb25__0_2584 -> bb26__0_2584 [label="return"];
    bb27__0_2584 -> bb25__0_2584 [label=""];
    bb28__0_2584 -> bb26__0_2584 [label=""];
}
