digraph Mir_0_2147 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;account_loader_trait::FatAccountLoader&lt;'info, T&gt; as anchor_lang::Accounts&lt;'info, B&gt;&gt;::try_accounts(_1: &amp;ReErased anchor_lang::prelude::Pubkey, _2: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], _3: &amp;ReErased [u8], _4: &amp;ReErased mut B/#1, _5: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;) -&gt; std::result::Result&lt;utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#2&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _6: ();<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: anchor_lang::error::Error;<br align="left"/>let mut _11: anchor_lang::error::ErrorCode;<br align="left"/>let _12: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let _17: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let _18: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _19: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _20: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let _21: utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#2&gt;;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#2&gt;&gt;;<br align="left"/>let mut _23: std::result::Result&lt;utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#2&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _24: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _25: isize;<br align="left"/>let _26: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _29: utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#2&gt;;<br align="left"/>let mut _30: utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#2&gt;;<br align="left"/>let mut _31: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _32: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _33: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _34: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>debug _program_id =&gt; _1;<br align="left"/>debug accounts =&gt; _2;<br align="left"/>debug _ix_data =&gt; _3;<br align="left"/>debug _bumps =&gt; _4;<br align="left"/>debug _reallocs =&gt; _5;<br align="left"/>debug account =&gt; _12;<br align="left"/>debug l =&gt; _21;<br align="left"/>debug residual =&gt; _26;<br align="left"/>debug val =&gt; _29;<br align="left"/>>;
    bb0__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_31 = deref_copy (*_2)<br/>_8 = &amp;(*_31)<br/></td></tr><tr><td align="left">_7 = core::slice::&lt;impl [anchor_lang::prelude::AccountInfo&lt;'_&gt;]&gt;::is_empty(move _8)</td></tr></table>>];
    bb1__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb2__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = AccountNotEnoughKeys<br/></td></tr><tr><td align="left">_10 = &lt;anchor_lang::error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _11)</td></tr></table>>];
    bb3__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_0 = std::result::Result::&lt;account_loader_trait::FatAccountLoader&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Err(move _10)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_6 = const ()<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = const 0_usize<br/>_32 = deref_copy (*_2)<br/>_14 = Len((*_32))<br/>_15 = Lt(_13, _14)<br/></td></tr><tr><td align="left">assert(move _15, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _14, _13)</td></tr></table>>];
    bb5__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_33 = deref_copy (*_2)<br/>_12 = &amp;(*_33)[_13]<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_34 = deref_copy (*_2)<br/>_19 = &amp;(*_34)<br/>StorageLive(_20)<br/>_20 = RangeFrom::&lt;usize&gt; { start: const 1_usize }<br/></td></tr><tr><td align="left">_18 = &lt;[anchor_lang::prelude::AccountInfo&lt;'_&gt;] as Index&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index(move _19, move _20)</td></tr></table>>];
    bb6__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/>_17 = &amp;(*_18)<br/>_16 = &amp;(*_17)<br/>(*_2) = move _16<br/>StorageDead(_16)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;(*_12)<br/></td></tr><tr><td align="left">_23 = account_loader_trait::FatAccountLoader::&lt;'_, T&gt;::try_from(move _24)</td></tr></table>>];
    bb7__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;account_loader_trait::FatAccountLoader&lt;'_, T&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb8__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_25 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb9__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = move ((_22 as Continue).0: utils::account_loader_trait::FatAccountLoader&lt;'_, T&gt;)<br/>_21 = move _29<br/>StorageDead(_29)<br/>_35 = discriminant(_22)<br/>StorageDead(_22)<br/>StorageLive(_30)<br/>_30 = move _21<br/>_0 = std::result::Result::&lt;account_loader_trait::FatAccountLoader&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Ok(move _30)<br/>StorageDead(_30)<br/>StorageDead(_21)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = move ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_28)<br/>_28 = move _26<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;account_loader_trait::FatAccountLoader&lt;'_, T&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _28)</td></tr></table>>];
    bb12__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/>_37 = discriminant(_22)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb14__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb15__0_2147 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left" balign="left">_39 = discriminant(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2147 -> bb1__0_2147 [label="return"];
    bb1__0_2147 -> bb4__0_2147 [label="0"];
    bb1__0_2147 -> bb2__0_2147 [label="otherwise"];
    bb2__0_2147 -> bb3__0_2147 [label="return"];
    bb3__0_2147 -> bb13__0_2147 [label=""];
    bb4__0_2147 -> bb5__0_2147 [label="success"];
    bb5__0_2147 -> bb6__0_2147 [label="return"];
    bb6__0_2147 -> bb7__0_2147 [label="return"];
    bb7__0_2147 -> bb8__0_2147 [label="return"];
    bb7__0_2147 -> bb14__0_2147 [label="unwind"];
    bb8__0_2147 -> bb9__0_2147 [label="0"];
    bb8__0_2147 -> bb11__0_2147 [label="1"];
    bb8__0_2147 -> bb10__0_2147 [label="otherwise"];
    bb9__0_2147 -> bb13__0_2147 [label=""];
    bb11__0_2147 -> bb12__0_2147 [label="return"];
    bb11__0_2147 -> bb15__0_2147 [label="unwind"];
    bb12__0_2147 -> bb13__0_2147 [label=""];
    bb15__0_2147 -> bb14__0_2147 [label=""];
}
