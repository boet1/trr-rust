// MIR for `calculate_liquidation_amounts` after PreCodegen

fn calculate_liquidation_amounts(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: &obligation::ObligationCollateral, _3: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _4: bool) -> (FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, u64, u64) {
    debug total_liquidation_value_including_bonus => _1;
    debug collateral => _2;
    debug debt_liquidation_amount => _3;
    debug is_below_min_full_liquidation_value_threshold => _4;
    let mut _0: (fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, u64, u64);
    let _5: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _6: u128;
    let mut _7: std::cmp::Ordering;
    let mut _8: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _10: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: i8;
    let mut _13: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _16: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _19: bool;
    let mut _21: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _24: u64;
    let mut _25: u64;
    let mut _28: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _31: u64;
    let mut _32: u64;
    let mut _35: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _37: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _38: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _40: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _41: u64;
    let mut _42: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _47: &u64;
    let _48: u64;
    let mut _49: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _50: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _51: u64;
    let mut _52: u64;
    scope 1 {
        debug collateral_value => _5;
        let _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        let _26: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        let _33: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug repay_ratio => _12;
            let _15: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug repay_amount_f => _15;
                let _18: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug settle_amount => _18;
                    let _20: u64;
                    scope 5 {
                        debug repay_amount => _20;
                        let _22: u64;
                        scope 6 {
                            debug withdraw_amount => _22;
                        }
                    }
                }
            }
        }
        scope 7 {
            debug settle_amount => _26;
            let _27: u64;
            scope 8 {
                debug repay_amount => _27;
                let _29: u64;
                scope 9 {
                    debug withdraw_amount => _29;
                }
            }
        }
        scope 10 {
            debug settle_amount => _33;
            let _34: u64;
            scope 11 {
                debug repay_amount => _34;
                let _36: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 12 {
                    debug withdraw_pct => _36;
                    let _39: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 13 {
                        debug withdraw_amount_f => _39;
                        let _43: u64;
                        let mut _53: &u64;
                        scope 14 {
                            debug withdraw_amount => _43;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_2).2: u128);
        _5 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_1;
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_5;
        _9 = &(*_10);
        _7 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Ord>::cmp(move _8, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [255: bb3, 0: bb12, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_33);
        _33 = _3;
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_33;
        _34 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_ceil::<u64>(move _35) -> [return: bb14, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        StorageLive(_13);
        _13 = _5;
        StorageLive(_14);
        _14 = _1;
        _12 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _3;
        StorageLive(_17);
        _17 = _12;
        _15 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _4;
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _18 = _3;
        goto -> bb10;
    }

    bb9: {
        _18 = _15;
        goto -> bb10;
    }

    bb10: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_18;
        _20 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_ceil::<u64>(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = ((*_2).1: u64);
        StorageLive(_23);
        _23 = _18;
        StorageLive(_24);
        _24 = _20;
        StorageLive(_25);
        _25 = _22;
        _0 = (move _23, move _24, move _25);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        goto -> bb25;
    }

    bb12: {
        StorageLive(_26);
        _26 = _3;
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_26;
        _27 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_ceil::<u64>(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = ((*_2).1: u64);
        StorageLive(_30);
        _30 = _26;
        StorageLive(_31);
        _31 = _27;
        StorageLive(_32);
        _32 = _29;
        _0 = (move _30, move _31, move _32);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb25;
    }

    bb14: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _1;
        StorageLive(_38);
        _38 = _5;
        _36 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _37, move _38) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_2).1: u64);
        _40 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_num::<u64>(move _41) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_41);
        StorageLive(_42);
        _42 = _36;
        _39 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _40, move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _4;
        switchInt(move _44) -> [0: bb22, otherwise: bb18];
    }

    bb18: {
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_39;
        StorageLive(_47);
        _53 = const _;
        _47 = &(*_53);
        _45 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<u64>>::lt(move _46, move _47) -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _45) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_47);
        StorageDead(_46);
        _43 = const _;
        goto -> bb24;
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb22;
    }

    bb22: {
        StorageLive(_49);
        _49 = &_39;
        _43 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_floor::<u64>(move _49) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_49);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_50);
        _50 = _33;
        StorageLive(_51);
        _51 = _34;
        StorageLive(_52);
        _52 = _43;
        _0 = (move _50, move _51, move _52);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_5);
        StorageDead(_10);
        StorageDead(_7);
        return;
    }
}
