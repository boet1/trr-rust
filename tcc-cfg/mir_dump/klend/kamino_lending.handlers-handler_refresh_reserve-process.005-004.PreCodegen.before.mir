// MIR for `handlers::handler_refresh_reserve::process` before PreCodegen

fn handlers::handler_refresh_reserve::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_reserve::RefreshReserve<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &anchor_lang::prelude::Clock;
    let _3: anchor_lang::prelude::Clock;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _5: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _10: anchor_lang::prelude::Clock;
    let mut _12: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _22: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _24: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _31: ();
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _33: std::result::Result<(), anchor_lang::error::Error>;
    let mut _34: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_reserve::RefreshReserve<'_>>;
    let _35: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_reserve::RefreshReserve<'_>>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _41: ();
    let mut _42: bool;
    let mut _43: u64;
    let mut _44: &state::reserve::Reserve;
    let mut _45: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _46: u64;
    let mut _47: !;
    let mut _48: anchor_lang::error::Error;
    let mut _49: anchor_lang::error::AnchorError;
    let mut _50: std::string::String;
    let mut _51: &LendingError;
    let _52: LendingError;
    let mut _53: u32;
    let mut _54: LendingError;
    let mut _55: std::string::String;
    let mut _56: &LendingError;
    let _57: LendingError;
    let mut _58: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _59: anchor_lang::error::ErrorOrigin;
    let mut _60: anchor_lang::error::Source;
    let mut _61: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _63: bool;
    let mut _64: &state::reserve::Reserve;
    let _65: &state::reserve::Reserve;
    let mut _66: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _67: &state::lending_market::LendingMarket;
    let _68: &state::lending_market::LendingMarket;
    let mut _69: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _70: i64;
    let _71: ();
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _73: std::result::Result<(), anchor_lang::error::Error>;
    let mut _74: &state::token_info::TokenInfo;
    let _75: &state::reserve::Reserve;
    let mut _76: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _77: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _78: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _79: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _80: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _81: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _82: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _83: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _84: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<utils::prices::GetPriceResult>>;
    let mut _91: std::result::Result<std::option::Option<utils::prices::GetPriceResult>, anchor_lang::error::Error>;
    let mut _92: &state::token_info::TokenInfo;
    let _93: &state::token_info::TokenInfo;
    let _94: &state::reserve::Reserve;
    let mut _95: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _96: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _98: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _99: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _100: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _101: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _102: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _103: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _104: &anchor_lang::prelude::Clock;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _110: ();
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _112: std::result::Result<(), anchor_lang::error::Error>;
    let mut _113: &mut state::reserve::Reserve;
    let mut _114: &mut state::reserve::Reserve;
    let mut _115: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _116: &anchor_lang::prelude::Clock;
    let mut _117: std::option::Option<utils::prices::GetPriceResult>;
    let mut _118: u16;
    let mut _119: &state::lending_market::LendingMarket;
    let mut _120: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _128: i64;
    let _129: ();
    let mut _130: &mut state::reserve::Reserve;
    let mut _131: &mut state::reserve::Reserve;
    let mut _132: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _133: u64;
    let _134: ();
    let mut _135: &str;
    let _136: &str;
    let mut _137: &std::string::String;
    let _138: &std::string::String;
    let _139: std::string::String;
    let mut _141: std::fmt::Arguments<'_>;
    let mut _142: &[&str];
    let mut _143: &[&str; 2];
    let _144: &[&str; 2];
    let _145: [&str; 2];
    let mut _146: &[core::fmt::rt::Argument<'_>];
    let mut _147: &[core::fmt::rt::Argument<'_>; 2];
    let _148: &[core::fmt::rt::Argument<'_>; 2];
    let _149: [core::fmt::rt::Argument<'_>; 2];
    let mut _150: core::fmt::rt::Argument<'_>;
    let mut _151: &&&str;
    let _152: &&&str;
    let _153: &&str;
    let _154: &str;
    let mut _155: &state::token_info::TokenInfo;
    let _156: &state::reserve::Reserve;
    let mut _157: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _158: core::fmt::rt::Argument<'_>;
    let mut _159: &utils::fraction::FractionDisplay<'_>;
    let _160: &utils::fraction::FractionDisplay<'_>;
    let _161: utils::fraction::FractionDisplay<'_>;
    let mut _162: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _163: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _164: &state::reserve::ReserveLiquidity;
    let _165: &state::reserve::Reserve;
    let mut _166: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _167: ();
    let mut _171: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _172: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _173: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _174: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _175: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _176: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _177: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _178: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _179: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _180: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    scope 1 {
        debug clock => _2;
        let _11: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _20: std::cell::RefMut<'_, state::reserve::Reserve>;
        scope 6 {
            debug reserve => _11;
            let _21: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
            let _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _30: std::cell::Ref<'_, state::lending_market::LendingMarket>;
            scope 11 {
                debug lending_market => _21;
                let _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _40: ();
                let _62: std::option::Option<utils::prices::GetPriceResult>;
                let _86: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _89: ();
                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _109: std::option::Option<utils::prices::GetPriceResult>;
                let mut _169: &LendingError;
                let mut _170: &LendingError;
                scope 16 {
                    debug residual => _37;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _40;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug price_res => _62;
                    let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _125: ();
                    let _126: u64;
                    scope 29 {
                        debug residual => _122;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _125;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug timestamp => _126;
                        let _140: std::string::String;
                        let mut _168: &[&str; 2];
                        scope 34 {
                            debug res => _140;
                        }
                    }
                }
                scope 21 {
                    debug residual => _86;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _89;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug residual => _106;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _109;
                    scope 28 {
                    }
                }
            }
            scope 12 {
                debug residual => _27;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _30;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb91];
    }

    bb2: {
        StorageDead(_5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_4 as Continue).0: anchor_lang::prelude::Clock);
        _3 = move _10;
        StorageDead(_10);
        _2 = &_3;
        _181 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _171 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _15 = &((*_171).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _14 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb98];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _207 = discriminant(_4);
        StorageDead(_4);
        goto -> bb85;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb91];
    }

    bb8: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _12 = move _20;
        StorageDead(_20);
        _11 = &mut _12;
        _183 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _172 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _25 = &((*_172).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _24 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _25) -> [return: bb12, unwind: bb90];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb97];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _205 = discriminant(_13);
        StorageDead(_13);
        goto -> bb84;
    }

    bb12: {
        StorageDead(_25);
        _23 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _24) -> [return: bb13, unwind: bb90];
    }

    bb13: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = move ((_23 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _22 = move _30;
        StorageDead(_30);
        _21 = &_22;
        _185 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_1;
        _34 = &(*_35);
        _33 = utils::constraints::check_remaining_accounts::<handlers::handler_refresh_reserve::RefreshReserve<'_>>(move _34) -> [return: bb17, unwind: bb89];
    }

    bb15: {
        StorageLive(_27);
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _29) -> [return: bb16, unwind: bb96];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        _203 = discriminant(_23);
        StorageDead(_23);
        goto -> bb83;
    }

    bb17: {
        StorageDead(_34);
        _32 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _33) -> [return: bb18, unwind: bb89];
    }

    bb18: {
        StorageDead(_33);
        _36 = discriminant(_32);
        switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_40);
        _40 = ((_32 as Continue).0: ());
        _31 = _40;
        StorageDead(_40);
        _187 = discriminant(_32);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_11);
        _44 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _45) -> [return: bb22, unwind: bb89];
    }

    bb20: {
        StorageLive(_37);
        _37 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _39) -> [return: bb21, unwind: bb95];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_37);
        _201 = discriminant(_32);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb82;
    }

    bb22: {
        StorageDead(_45);
        _43 = ((*_44).0: u64);
        StorageLive(_46);
        _46 = const _ as u64 (IntToInt);
        _42 = Eq(move _43, move _46);
        switchInt(move _42) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_44);
        _41 = const ();
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_11);
        _65 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _66) -> [return: bb29, unwind: bb89];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_44);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _170 = const _;
        _51 = &(*_170);
        _50 = LendingError::name(move _51) -> [return: bb25, unwind: bb89];
    }

    bb25: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        _54 = LendingError::ReserveDeprecated;
        _53 = <LendingError as Into<u32>>::into(move _54) -> [return: bb26, unwind: bb88];
    }

    bb26: {
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        _169 = const _;
        _56 = &(*_169);
        _55 = <LendingError as ToString>::to_string(move _56) -> [return: bb27, unwind: bb88];
    }

    bb27: {
        StorageDead(_56);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_reserve.rs", line: const 18_u32 };
        _59 = anchor_lang::error::ErrorOrigin::Source(move _60);
        StorageDead(_60);
        _58 = std::option::Option::<ErrorOrigin>::Some(move _59);
        StorageDead(_59);
        StorageLive(_61);
        _61 = std::option::Option::<ComparedValues>::None;
        _49 = anchor_lang::error::AnchorError { error_name: move _50, error_code_number: move _53, error_msg: move _55, error_origin: move _58, compared_values: move _61 };
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_50);
        _48 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _49) -> [return: bb28, unwind: bb89];
    }

    bb28: {
        StorageDead(_49);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _48);
        StorageDead(_48);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb82;
    }

    bb29: {
        _64 = &(*_65);
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_21);
        _68 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _69) -> [return: bb30, unwind: bb89];
    }

    bb30: {
        _67 = &(*_68);
        StorageDead(_69);
        StorageLive(_70);
        _70 = ((*_2).4: i64);
        _63 = is_price_refresh_needed(move _64, move _67, move _70) -> [return: bb31, unwind: bb89];
    }

    bb31: {
        switchInt(move _63) -> [0: bb53, otherwise: bb32];
    }

    bb32: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_11);
        _75 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _76) -> [return: bb33, unwind: bb89];
    }

    bb33: {
        StorageDead(_76);
        _74 = &(((*_75).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        StorageLive(_77);
        StorageLive(_78);
        _173 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _78 = &((*_173).2: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _77 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _78) -> [return: bb34, unwind: bb89];
    }

    bb34: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        _174 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _80 = &((*_174).3: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _79 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _80) -> [return: bb35, unwind: bb89];
    }

    bb35: {
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _175 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _82 = &((*_175).4: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _81 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _82) -> [return: bb36, unwind: bb89];
    }

    bb36: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        _176 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _84 = &((*_176).5: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _83 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _84) -> [return: bb37, unwind: bb89];
    }

    bb37: {
        StorageDead(_84);
        _73 = token_info::TokenInfo::validate_token_info_config(move _74, move _77, move _79, move _81, move _83) -> [return: bb38, unwind: bb89];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_74);
        _72 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _73) -> [return: bb39, unwind: bb89];
    }

    bb39: {
        StorageDead(_73);
        _85 = discriminant(_72);
        switchInt(move _85) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_89);
        _89 = ((_72 as Continue).0: ());
        _71 = _89;
        StorageDead(_89);
        _189 = discriminant(_72);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &(*_11);
        _94 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _95) -> [return: bb43, unwind: bb89];
    }

    bb41: {
        StorageLive(_86);
        _86 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_88);
        _88 = move _86;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _88) -> [return: bb42, unwind: bb94];
    }

    bb42: {
        StorageDead(_88);
        StorageDead(_86);
        _199 = discriminant(_72);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb80;
    }

    bb43: {
        StorageDead(_95);
        _93 = &(((*_94).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        _92 = &(*_93);
        StorageLive(_96);
        StorageLive(_97);
        _177 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _97 = &((*_177).2: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _96 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _97) -> [return: bb44, unwind: bb89];
    }

    bb44: {
        StorageDead(_97);
        StorageLive(_98);
        StorageLive(_99);
        _178 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _99 = &((*_178).3: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _98 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _99) -> [return: bb45, unwind: bb89];
    }

    bb45: {
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        _179 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _101 = &((*_179).4: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _100 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _101) -> [return: bb46, unwind: bb89];
    }

    bb46: {
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        _180 = deref_copy (_1.1: &mut handlers::handler_refresh_reserve::RefreshReserve<'_>);
        _103 = &((*_180).5: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _102 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _103) -> [return: bb47, unwind: bb89];
    }

    bb47: {
        StorageDead(_103);
        StorageLive(_104);
        _104 = &(*_2);
        _91 = get_price(move _92, move _96, move _98, move _100, move _102, move _104) -> [return: bb48, unwind: bb89];
    }

    bb48: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_92);
        _90 = <std::result::Result<std::option::Option<prices::GetPriceResult>, anchor_lang::error::Error> as Try>::branch(move _91) -> [return: bb49, unwind: bb89];
    }

    bb49: {
        StorageDead(_91);
        _105 = discriminant(_90);
        switchInt(move _105) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_109);
        _109 = move ((_90 as Continue).0: std::option::Option<utils::prices::GetPriceResult>);
        _62 = move _109;
        StorageDead(_109);
        _191 = discriminant(_90);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        goto -> bb54;
    }

    bb51: {
        StorageLive(_106);
        _106 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb52, unwind: bb93];
    }

    bb52: {
        StorageDead(_108);
        StorageDead(_106);
        _197 = discriminant(_90);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_90);
        goto -> bb80;
    }

    bb53: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        _62 = std::option::Option::<prices::GetPriceResult>::None;
        goto -> bb54;
    }

    bb54: {
        StorageDead(_63);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &mut (*_11);
        _114 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _115) -> [return: bb55, unwind: bb89];
    }

    bb55: {
        _113 = &mut (*_114);
        StorageDead(_115);
        StorageLive(_116);
        _116 = &(*_2);
        StorageLive(_117);
        _117 = move _62;
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_21);
        _119 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _120) -> [return: bb56, unwind: bb89];
    }

    bb56: {
        StorageDead(_120);
        _118 = ((*_119).5: u16);
        _112 = lending_operations::refresh_reserve(move _113, move _116, move _117, move _118) -> [return: bb57, unwind: bb89];
    }

    bb57: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        _111 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb58, unwind: bb89];
    }

    bb58: {
        StorageDead(_112);
        _121 = discriminant(_111);
        switchInt(move _121) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_125);
        _125 = ((_111 as Continue).0: ());
        _110 = _125;
        StorageDead(_125);
        _193 = discriminant(_111);
        StorageDead(_119);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = ((*_2).4: i64);
        _127 = <u64 as TryFrom<i64>>::try_from(move _128) -> [return: bb62, unwind: bb89];
    }

    bb60: {
        StorageLive(_122);
        _122 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb61, unwind: bb92];
    }

    bb61: {
        StorageDead(_124);
        StorageDead(_122);
        _195 = discriminant(_111);
        StorageDead(_119);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb81;
    }

    bb62: {
        StorageDead(_128);
        _126 = std::result::Result::<u64, TryFromIntError>::unwrap(move _127) -> [return: bb63, unwind: bb89];
    }

    bb63: {
        StorageDead(_127);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &mut (*_11);
        _131 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _132) -> [return: bb64, unwind: bb89];
    }

    bb64: {
        _130 = &mut (*_131);
        StorageDead(_132);
        StorageLive(_133);
        _133 = _126;
        _129 = refresh_reserve_limit_timestamps(move _130, move _133) -> [return: bb65, unwind: bb89];
    }

    bb65: {
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_131);
        StorageDead(_129);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _168 = const _;
        _144 = &(*_168);
        _143 = &(*_144);
        _142 = move _143 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_143);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &(*_11);
        _156 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _157) -> [return: bb66, unwind: bb89];
    }

    bb66: {
        StorageDead(_157);
        _155 = &(((*_156).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        _154 = token_info::TokenInfo::symbol(move _155) -> [return: bb67, unwind: bb89];
    }

    bb67: {
        StorageDead(_155);
        _153 = &_154;
        _152 = &_153;
        _151 = &(*_152);
        _150 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(move _151) -> [return: bb68, unwind: bb89];
    }

    bb68: {
        StorageDead(_151);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &(*_11);
        _165 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _166) -> [return: bb69, unwind: bb89];
    }

    bb69: {
        StorageDead(_166);
        _164 = &((*_165).5: state::reserve::ReserveLiquidity);
        _163 = ReserveLiquidity::get_market_price(move _164) -> [return: bb70, unwind: bb89];
    }

    bb70: {
        _162 = &_163;
        StorageDead(_164);
        _161 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _162) -> [return: bb71, unwind: bb89];
    }

    bb71: {
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _159) -> [return: bb72, unwind: bb89];
    }

    bb72: {
        StorageDead(_159);
        _149 = [move _150, move _158];
        StorageDead(_158);
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = move _147 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_147);
        _141 = Arguments::<'_>::new_v1(move _142, move _146) -> [return: bb73, unwind: bb89];
    }

    bb73: {
        StorageDead(_146);
        StorageDead(_142);
        _140 = format(move _141) -> [return: bb74, unwind: bb89];
    }

    bb74: {
        StorageDead(_141);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_144);
        _139 = move _140;
        StorageDead(_140);
        _138 = &_139;
        _137 = &(*_138);
        _136 = <std::string::String as Deref>::deref(move _137) -> [return: bb75, unwind: bb87];
    }

    bb75: {
        _135 = &(*_136);
        StorageDead(_137);
        _134 = solana_program::log::sol_log(move _135) -> [return: bb76, unwind: bb87];
    }

    bb76: {
        StorageDead(_135);
        drop(_139) -> [return: bb77, unwind: bb89];
    }

    bb77: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageLive(_167);
        _167 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _167);
        StorageDead(_167);
        StorageDead(_126);
        StorageDead(_62);
        drop(_22) -> [return: bb78, unwind: bb90];
    }

    bb78: {
        StorageDead(_22);
        StorageDead(_21);
        drop(_12) -> [return: bb79, unwind: bb91];
    }

    bb79: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb86;
    }

    bb80: {
        StorageDead(_63);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_62);
        goto -> bb82;
    }

    bb82: {
        drop(_22) -> [return: bb83, unwind: bb90];
    }

    bb83: {
        StorageDead(_22);
        StorageDead(_21);
        drop(_12) -> [return: bb84, unwind: bb91];
    }

    bb84: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb86;
    }

    bb86: {
        return;
    }

    bb87 (cleanup): {
        drop(_139) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_50) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_22) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_12) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        resume;
    }

    bb92 (cleanup): {
        _209 = discriminant(_111);
        goto -> bb89;
    }

    bb93 (cleanup): {
        _210 = discriminant(_90);
        goto -> bb89;
    }

    bb94 (cleanup): {
        _211 = discriminant(_72);
        goto -> bb89;
    }

    bb95 (cleanup): {
        _212 = discriminant(_32);
        goto -> bb89;
    }

    bb96 (cleanup): {
        _213 = discriminant(_23);
        goto -> bb90;
    }

    bb97 (cleanup): {
        _214 = discriminant(_13);
        goto -> bb91;
    }

    bb98 (cleanup): {
        _215 = discriminant(_4);
        goto -> bb91;
    }
}
