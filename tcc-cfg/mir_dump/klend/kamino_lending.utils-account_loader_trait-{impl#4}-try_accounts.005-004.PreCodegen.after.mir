// MIR for `account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:170:1: 170:86>::try_accounts` after PreCodegen

fn account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:170:1: 170:86>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut B, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error> {
    debug _program_id => _1;
    debug accounts => _2;
    debug _ix_data => _3;
    debug _bumps => _4;
    debug _reallocs => _5;
    let mut _0: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _9: !;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::ErrorCode;
    let _12: &anchor_lang::prelude::AccountInfo<'_>;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: &[anchor_lang::prelude::AccountInfo<'_>];
    let _17: &[anchor_lang::prelude::AccountInfo<'_>];
    let _18: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _19: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _20: std::ops::RangeFrom<usize>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, utils::account_loader_trait::FatAccountLoader<'_, T>>;
    let mut _23: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _30: utils::account_loader_trait::FatAccountLoader<'_, T>;
    let mut _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    scope 1 {
        debug account => _12;
        let _21: utils::account_loader_trait::FatAccountLoader<'_, T>;
        let _26: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _29: utils::account_loader_trait::FatAccountLoader<'_, T>;
        scope 2 {
            debug l => _21;
        }
        scope 3 {
            debug residual => _26;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _29;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _31 = deref_copy (*_2);
        _8 = &(*_31);
        _7 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _7) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = AccountNotEnoughKeys;
        _10 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _0 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb13;
    }

    bb4: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const 0_usize;
        _32 = deref_copy (*_2);
        _14 = Len((*_32));
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb5, unwind continue];
    }

    bb5: {
        _33 = deref_copy (*_2);
        _12 = &(*_33)[_13];
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _34 = deref_copy (*_2);
        _19 = &(*_34);
        StorageLive(_20);
        _20 = RangeFrom::<usize> { start: const 1_usize };
        _18 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _19, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = &(*_18);
        _16 = &(*_17);
        (*_2) = move _16;
        StorageDead(_16);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_12);
        _23 = account_loader_trait::FatAccountLoader::<'_, T>::try_from(move _24) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_24);
        _22 = <std::result::Result<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_29);
        _29 = move ((_22 as Continue).0: utils::account_loader_trait::FatAccountLoader<'_, T>);
        _21 = move _29;
        StorageDead(_29);
        _35 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_30);
        _30 = move _21;
        _0 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>::Ok(move _30);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb13;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _28) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_26);
        _37 = discriminant(_22);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        _39 = discriminant(_22);
        goto -> bb14;
    }
}
