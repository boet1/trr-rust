// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::find_or_add_collateral_to_deposits` after PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::find_or_add_collateral_to_deposits(_1: &mut obligation::Obligation, _2: anchor_lang::prelude::Pubkey, _3: reserve::AssetTier) -> std::result::Result<(&mut obligation::ObligationCollateral, bool), anchor_lang::error::Error> {
    debug self => _1;
    debug deposit_reserve => _2;
    debug deposit_reserve_asset_tier => _3;
    let mut _0: std::result::Result<(&mut state::obligation::ObligationCollateral, bool), anchor_lang::error::Error>;
    let mut _4: std::option::Option<usize>;
    let mut _5: &mut std::slice::IterMut<'_, state::obligation::ObligationCollateral>;
    let mut _6: std::slice::IterMut<'_, state::obligation::ObligationCollateral>;
    let mut _7: &mut [state::obligation::ObligationCollateral];
    let mut _8: &mut [state::obligation::ObligationCollateral; 8];
    let mut _9: {closure@programs\klend\src\state\obligation.rs:317:23: 317:35};
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: isize;
    let mut _13: (&mut state::obligation::ObligationCollateral, bool);
    let mut _14: &mut state::obligation::ObligationCollateral;
    let mut _15: &mut state::obligation::ObligationCollateral;
    let _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: std::option::Option<usize>;
    let mut _20: &mut std::slice::Iter<'_, state::obligation::ObligationCollateral>;
    let mut _21: std::slice::Iter<'_, state::obligation::ObligationCollateral>;
    let mut _22: &[state::obligation::ObligationCollateral];
    let mut _23: &[state::obligation::ObligationCollateral; 8];
    let mut _24: {closure@programs\klend\src\state\obligation.rs:320:78: 320:81};
    let mut _25: isize;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: state::obligation::ObligationCollateral;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: u8;
    let mut _34: state::reserve::AssetTier;
    let _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let mut _38: (&mut state::obligation::ObligationCollateral, bool);
    let mut _39: &mut state::obligation::ObligationCollateral;
    let _40: ();
    let _41: ();
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[&str; 1];
    let _45: &[&str; 1];
    let _46: [&str; 1];
    let mut _47: anchor_lang::error::Error;
    let mut _48: anchor_lang::error::AnchorError;
    let mut _49: std::string::String;
    let mut _50: &LendingError;
    let _51: LendingError;
    let mut _52: u32;
    let mut _53: LendingError;
    let mut _54: std::string::String;
    let mut _55: &LendingError;
    let _56: LendingError;
    let mut _57: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _58: anchor_lang::error::ErrorOrigin;
    let mut _59: anchor_lang::error::Source;
    let mut _60: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _61: &LendingError;
    let mut _62: &LendingError;
    let mut _63: &[&str; 1];
    scope 1 {
        debug collateral_index => _12;
        let _12: usize;
    }
    scope 2 {
        debug collateral_index => _26;
        let _26: usize;
        let _27: &mut state::obligation::ObligationCollateral;
        scope 3 {
            debug collateral => _27;
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut ((*_1).4: [state::obligation::ObligationCollateral; 8]);
        _7 = move _8 as &mut [state::obligation::ObligationCollateral] (PointerCoercion(Unsize));
        StorageDead(_8);
        _6 = core::slice::<impl [obligation::ObligationCollateral]>::iter_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _6;
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_2;
        _9 = {closure@programs\klend\src\state\obligation.rs:317:23: 317:35} { deposit_reserve: move _10 };
        StorageDead(_10);
        _4 = <std::slice::IterMut<'_, obligation::ObligationCollateral> as Iterator>::position::<{closure@programs\klend\src\state\obligation.rs:317:23: 317:35}>(move _5, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_5);
        _11 = discriminant(_4);
        switchInt(move _11) -> [1: bb3, otherwise: bb5];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Some).0: usize);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _12;
        _17 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]));
        _18 = Lt(_16, _17);
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb4, unwind continue];
    }

    bb4: {
        _15 = &mut ((*_1).4: [state::obligation::ObligationCollateral; 8])[_16];
        _14 = &mut (*_15);
        _13 = (move _14, const false);
        StorageDead(_14);
        _0 = std::result::Result::<(&mut obligation::ObligationCollateral, bool), anchor_lang::error::Error>::Ok(move _13);
        StorageDead(_13);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        goto -> bb21;
    }

    bb5: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_1).4: [state::obligation::ObligationCollateral; 8]);
        _22 = move _23 as &[state::obligation::ObligationCollateral] (PointerCoercion(Unsize));
        StorageDead(_23);
        _21 = core::slice::<impl [obligation::ObligationCollateral]>::iter(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = &mut _21;
        StorageDead(_22);
        StorageLive(_24);
        _24 = {closure@programs\klend\src\state\obligation.rs:320:78: 320:81};
        _19 = <std::slice::Iter<'_, obligation::ObligationCollateral> as Iterator>::position::<{closure@programs\klend\src\state\obligation.rs:320:78: 320:81}>(move _20, move _24) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_24);
        StorageDead(_20);
        _25 = discriminant(_19);
        switchInt(move _25) -> [1: bb8, otherwise: bb13];
    }

    bb8: {
        StorageLive(_26);
        _26 = ((_19 as Some).0: usize);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _26;
        _29 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]));
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb9, unwind continue];
    }

    bb9: {
        _27 = &mut ((*_1).4: [state::obligation::ObligationCollateral; 8])[_28];
        StorageLive(_31);
        StorageLive(_32);
        _32 = _2;
        _31 = obligation::ObligationCollateral::new(move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_32);
        (*_27) = move _31;
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = move _3;
        _33 = <reserve::AssetTier as Into<u8>>::into(move _34) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_34);
        StorageLive(_35);
        _35 = _26;
        _36 = Len(((*_1).12: [u8; 8]));
        _37 = Lt(_35, _36);
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> [success: bb12, unwind continue];
    }

    bb12: {
        ((*_1).12: [u8; 8])[_35] = move _33;
        StorageDead(_33);
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut (*_27);
        _38 = (move _39, const true);
        StorageDead(_39);
        _0 = std::result::Result::<(&mut obligation::ObligationCollateral, bool), anchor_lang::error::Error>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb20;
    }

    bb13: {
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _63 = const _;
        _45 = &(*_63);
        _44 = &(*_45);
        _43 = move _44 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_44);
        _42 = Arguments::<'_>::new_const(move _43) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_43);
        _41 = _print(move _42) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_45);
        StorageDead(_41);
        _40 = const ();
        StorageDead(_40);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _62 = const _;
        _50 = &(*_62);
        _49 = LendingError::name(move _50) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        _53 = LendingError::ObligationReserveLimit;
        _52 = <LendingError as Into<u32>>::into(move _53) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _61 = const _;
        _55 = &(*_61);
        _54 = <LendingError as ToString>::to_string(move _55) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\obligation.rs", line: const 327_u32 };
        _58 = anchor_lang::error::ErrorOrigin::Source(move _59);
        StorageDead(_59);
        _57 = std::option::Option::<ErrorOrigin>::Some(move _58);
        StorageDead(_58);
        StorageLive(_60);
        _60 = std::option::Option::<ComparedValues>::None;
        _48 = anchor_lang::error::AnchorError { error_name: move _49, error_code_number: move _52, error_msg: move _54, error_origin: move _57, compared_values: move _60 };
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_49);
        _47 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _48) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        StorageDead(_48);
        _0 = std::result::Result::<(&mut obligation::ObligationCollateral, bool), anchor_lang::error::Error>::Err(move _47);
        StorageDead(_47);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_6);
        StorageDead(_4);
        return;
    }

    bb22 (cleanup): {
        drop(_49) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}
