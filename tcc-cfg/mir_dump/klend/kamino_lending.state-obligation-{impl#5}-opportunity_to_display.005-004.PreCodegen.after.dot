digraph Mir_0_1750 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn obligation::ObligationOrder::opportunity_to_display(_1: &amp;ReErased state::obligation::ObligationOrder) -&gt; std::string::String<br align="left"/>let mut _2: state::order_operations::OpportunityType;<br align="left"/>let mut _3: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let mut _4: u8;<br align="left"/>let _5: std::string::String;<br align="left"/>let mut _6: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _7: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _8: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _9: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _10: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _11: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _12: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _13: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _14: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _15: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _16: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _17: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _18: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _19: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let mut _20: &amp;ReErased str;<br align="left"/>let _21: &amp;ReErased str;<br align="left"/>let mut _22: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug res =&gt; _5;<br align="left"/>>;
    bb0__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_3 = &amp;(*_1)<br/></td></tr><tr><td align="left">_2 = obligation::ObligationOrder::opportunity_type(move _3)</td></tr></table>>];
    bb1__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>_4 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = const &quot;repay all debt&quot;<br/>_20 = &amp;(*_21)<br/></td></tr><tr><td align="left">_0 = &lt;str as ToString&gt;::to_string(move _20)</td></tr></table>>];
    bb3__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb4__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_22 = const _<br/>_9 = &amp;(*_22)<br/>_8 = &amp;(*_9)<br/>_7 = move _8 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;(*_1)<br/></td></tr><tr><td align="left">_18 = obligation::ObligationOrder::opportunity_parameter(move _19)</td></tr></table>>];
    bb5__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_17 = &amp;_18<br/>_16 = &amp;(*_17)<br/></td></tr><tr><td align="left">_15 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;&gt;(move _16)</td></tr></table>>];
    bb6__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_14 = [move _15]<br/>StorageDead(_15)<br/>_13 = &amp;_14<br/>_12 = &amp;(*_13)<br/>_11 = move _12 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_6 = Arguments::&lt;'_&gt;::new_v1(move _7, move _11)</td></tr></table>>];
    bb7__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = format(move _6)</td></tr></table>>];
    bb8__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>_0 = move _5<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1750 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1750 -> bb1__0_1750 [label="return"];
    bb1__0_1750 -> bb4__0_1750 [label="0"];
    bb1__0_1750 -> bb2__0_1750 [label="1"];
    bb1__0_1750 -> bb3__0_1750 [label="otherwise"];
    bb2__0_1750 -> bb9__0_1750 [label="return"];
    bb4__0_1750 -> bb5__0_1750 [label="return"];
    bb5__0_1750 -> bb6__0_1750 [label="return"];
    bb6__0_1750 -> bb7__0_1750 [label="return"];
    bb7__0_1750 -> bb8__0_1750 [label="return"];
    bb8__0_1750 -> bb10__0_1750 [label=""];
    bb9__0_1750 -> bb10__0_1750 [label=""];
}
