// MIR for `handlers::handler_refresh_reserve::__client_accounts_refresh_reserve::<impl at programs\klend\src\handlers\handler_refresh_reserve.rs:65:10: 65:18>::to_account_metas` after PreCodegen

fn handlers::handler_refresh_reserve::__client_accounts_refresh_reserve::<impl at programs\klend\src\handlers\handler_refresh_reserve.rs:65:10: 65:18>::to_account_metas(_1: &handlers::handler_refresh_reserve::__client_accounts_refresh_reserve::RefreshReserve, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let _8: ();
    let mut _9: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _10: anchor_lang::prelude::AccountMeta;
    let mut _11: anchor_lang::prelude::Pubkey;
    let _12: ();
    let mut _13: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _14: isize;
    let _16: ();
    let mut _17: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _18: anchor_lang::prelude::AccountMeta;
    let mut _19: anchor_lang::prelude::Pubkey;
    let _20: ();
    let mut _21: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let _25: ();
    let mut _26: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _27: isize;
    let _29: ();
    let mut _30: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _31: anchor_lang::prelude::AccountMeta;
    let mut _32: anchor_lang::prelude::Pubkey;
    let _33: ();
    let mut _34: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _35: anchor_lang::prelude::AccountMeta;
    let mut _36: anchor_lang::prelude::Pubkey;
    let mut _37: &anchor_lang::prelude::Pubkey;
    let _38: ();
    let mut _39: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _40: isize;
    let _42: ();
    let mut _43: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _44: anchor_lang::prelude::AccountMeta;
    let mut _45: anchor_lang::prelude::Pubkey;
    let _46: ();
    let mut _47: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _48: anchor_lang::prelude::AccountMeta;
    let mut _49: anchor_lang::prelude::Pubkey;
    let mut _50: &anchor_lang::prelude::Pubkey;
    let _51: ();
    let mut _52: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _53: isize;
    let _55: ();
    let mut _56: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _57: anchor_lang::prelude::AccountMeta;
    let mut _58: anchor_lang::prelude::Pubkey;
    let _59: ();
    let mut _60: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _61: anchor_lang::prelude::AccountMeta;
    let mut _62: anchor_lang::prelude::Pubkey;
    let mut _63: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
        scope 2 {
            debug pyth_oracle => _15;
            let _15: &anchor_lang::prelude::Pubkey;
        }
        scope 3 {
            debug switchboard_price_oracle => _28;
            let _28: &anchor_lang::prelude::Pubkey;
        }
        scope 4 {
            debug switchboard_twap_oracle => _41;
            let _41: &anchor_lang::prelude::Pubkey;
        }
        scope 5 {
            debug scope_prices => _54;
            let _54: &anchor_lang::prelude::Pubkey;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = anchor_lang::prelude::AccountMeta::new(move _7, const false) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _3;
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).1: anchor_lang::prelude::Pubkey);
        _10 = anchor_lang::prelude::AccountMeta::new_readonly(move _11, const false) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        StorageDead(_11);
        _8 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _9, move _10) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).2: std::option::Option<anchor_lang::prelude::Pubkey>);
        _14 = discriminant((*_13));
        switchInt(move _14) -> [1: bb6, otherwise: bb9];
    }

    bb6: {
        StorageLive(_15);
        _15 = &(((*_13) as Some).0: anchor_lang::prelude::Pubkey);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _3;
        StorageLive(_18);
        StorageLive(_19);
        _19 = (*_15);
        _18 = anchor_lang::prelude::AccountMeta::new_readonly(move _19, const false) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        StorageDead(_19);
        _16 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _17, move _18) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        _12 = const ();
        StorageDead(_15);
        goto -> bb12;
    }

    bb9: {
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _3;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _23 = (*_24);
        _22 = anchor_lang::prelude::AccountMeta::new_readonly(move _23, const false) -> [return: bb10, unwind: bb34];
    }

    bb10: {
        StorageDead(_23);
        _20 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _21, move _22) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_24);
        StorageDead(_20);
        _12 = const ();
        goto -> bb12;
    }

    bb12: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &((*_1).3: std::option::Option<anchor_lang::prelude::Pubkey>);
        _27 = discriminant((*_26));
        switchInt(move _27) -> [1: bb13, otherwise: bb16];
    }

    bb13: {
        StorageLive(_28);
        _28 = &(((*_26) as Some).0: anchor_lang::prelude::Pubkey);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &mut _3;
        StorageLive(_31);
        StorageLive(_32);
        _32 = (*_28);
        _31 = anchor_lang::prelude::AccountMeta::new_readonly(move _32, const false) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        StorageDead(_32);
        _29 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _30, move _31) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        _25 = const ();
        StorageDead(_28);
        goto -> bb19;
    }

    bb16: {
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _3;
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _36 = (*_37);
        _35 = anchor_lang::prelude::AccountMeta::new_readonly(move _36, const false) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        StorageDead(_36);
        _33 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _34, move _35) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_37);
        StorageDead(_33);
        _25 = const ();
        goto -> bb19;
    }

    bb19: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_1).4: std::option::Option<anchor_lang::prelude::Pubkey>);
        _40 = discriminant((*_39));
        switchInt(move _40) -> [1: bb20, otherwise: bb23];
    }

    bb20: {
        StorageLive(_41);
        _41 = &(((*_39) as Some).0: anchor_lang::prelude::Pubkey);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut _3;
        StorageLive(_44);
        StorageLive(_45);
        _45 = (*_41);
        _44 = anchor_lang::prelude::AccountMeta::new_readonly(move _45, const false) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        StorageDead(_45);
        _42 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _43, move _44) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        _38 = const ();
        StorageDead(_41);
        goto -> bb26;
    }

    bb23: {
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut _3;
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _49 = (*_50);
        _48 = anchor_lang::prelude::AccountMeta::new_readonly(move _49, const false) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        StorageDead(_49);
        _46 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _47, move _48) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_50);
        StorageDead(_46);
        _38 = const ();
        goto -> bb26;
    }

    bb26: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &((*_1).5: std::option::Option<anchor_lang::prelude::Pubkey>);
        _53 = discriminant((*_52));
        switchInt(move _53) -> [1: bb27, otherwise: bb30];
    }

    bb27: {
        StorageLive(_54);
        _54 = &(((*_52) as Some).0: anchor_lang::prelude::Pubkey);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut _3;
        StorageLive(_57);
        StorageLive(_58);
        _58 = (*_54);
        _57 = anchor_lang::prelude::AccountMeta::new_readonly(move _58, const false) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_58);
        _55 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _56, move _57) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        _51 = const ();
        StorageDead(_54);
        goto -> bb33;
    }

    bb30: {
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut _3;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _62 = (*_63);
        _61 = anchor_lang::prelude::AccountMeta::new_readonly(move _62, const false) -> [return: bb31, unwind: bb34];
    }

    bb31: {
        StorageDead(_62);
        _59 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _60, move _61) -> [return: bb32, unwind: bb34];
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_63);
        StorageDead(_59);
        _51 = const ();
        goto -> bb33;
    }

    bb33: {
        StorageDead(_52);
        StorageDead(_51);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
