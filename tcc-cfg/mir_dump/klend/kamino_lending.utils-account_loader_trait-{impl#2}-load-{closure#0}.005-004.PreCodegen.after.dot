digraph Mir_0_2131 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn account_loader_trait::FatAccountLoader::&lt;'info, T&gt;::load::{closure#0}(_1: Closure(DefId(0:2131 ~ kamino_lending[6389]::utils::account_loader_trait::{impl#2}::load::{closure#0}), [ReErased, T/#1, i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased mut [u8],)) -&gt; &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) T/#1, [Region(BrAnon)]), ()]), _2: &amp;ReErased &amp;ReErased mut [u8]) -&gt; &amp;ReErased T/#1<br align="left"/>let _3: &amp;ReErased T/#1;<br align="left"/>let mut _4: &amp;ReErased [u8];<br align="left"/>let _5: &amp;ReErased [u8];<br align="left"/>let _6: &amp;ReErased [u8];<br align="left"/>let mut _7: &amp;ReErased [u8];<br align="left"/>let mut _8: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: usize;<br align="left"/>let mut _11: (usize, bool);<br align="left"/>let mut _12: &amp;ReErased mut [u8];<br align="left"/>debug data =&gt; _2;<br align="left"/>>;
    bb0__0_2131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_12 = deref_copy (*_2)<br/>_7 = &amp;(*_12)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/></td></tr><tr><td align="left">_10 = std::mem::size_of::&lt;T&gt;()</td></tr></table>>];
    bb1__0_2131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_11 = CheckedAdd(_10, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_11.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _10, const 8_usize)</td></tr></table>>];
    bb2__0_2131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_9 = move (_11.0: usize)<br/>StorageDead(_10)<br/>_8 = std::ops::Range::&lt;usize&gt; { start: const 8_usize, end: move _9 }<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_6 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _7, move _8)</td></tr></table>>];
    bb3__0_2131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>_5 = &amp;(*_6)<br/>_4 = &amp;(*_5)<br/></td></tr><tr><td align="left">_3 = bytemuck::from_bytes::&lt;T&gt;(move _4)</td></tr></table>>];
    bb4__0_2131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = &amp;(*_3)<br/>StorageDead(_4)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2131 -> bb1__0_2131 [label="return"];
    bb1__0_2131 -> bb2__0_2131 [label="success"];
    bb2__0_2131 -> bb3__0_2131 [label="return"];
    bb3__0_2131 -> bb4__0_2131 [label="return"];
}
