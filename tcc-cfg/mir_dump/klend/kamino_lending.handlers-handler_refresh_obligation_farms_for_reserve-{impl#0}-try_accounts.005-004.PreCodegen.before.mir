// MIR for `handlers::handler_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18>::try_accounts` before PreCodegen

fn handlers::handler_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut RefreshObligationFarmsForReserveBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>>;
    let mut _23: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _28: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, farms::program::Farms>>;
    let mut _37: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _52: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _80: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>;
    let mut _81: anchor_lang::prelude::Signer<'_>;
    let mut _82: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let mut _83: anchor_lang::prelude::Program<'_, farms::program::Farms>;
    let mut _84: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _85: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    scope 1 {
        debug crank => _6;
        let _21: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
        let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _34: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
        scope 6 {
            debug base_accounts => _21;
            let _35: anchor_lang::prelude::Program<'_, farms::program::Farms>;
            let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _49: anchor_lang::prelude::Program<'_, farms::program::Farms>;
            scope 11 {
                debug farms_program => _35;
                let _50: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _64: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                scope 16 {
                    debug rent => _50;
                    let _65: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _79: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    scope 21 {
                        debug system_program => _65;
                    }
                    scope 22 {
                        debug residual => _76;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _79;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _61;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _64;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _46;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _49;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _31;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _34;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18}>(move _9, move _15) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _86 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_3);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut ((*_4).0: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps);
        _27 = &mut (*_28);
        StorageLive(_29);
        _29 = &mut (*_5);
        _23 = <handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBaseBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _104 = discriminant(_7);
        StorageDead(_7);
        goto -> bb34;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb9, unwind: bb37];
    }

    bb9: {
        StorageDead(_23);
        _30 = discriminant(_22);
        switchInt(move _30) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_34);
        _34 = move ((_22 as Continue).0: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>);
        _21 = move _34;
        StorageDead(_34);
        _88 = discriminant(_22);
        StorageDead(_28);
        StorageDead(_22);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_3);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::Program<'_, Farms> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb13, unwind: bb36];
    }

    bb11: {
        StorageLive(_31);
        _31 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_31);
        _102 = discriminant(_22);
        StorageDead(_28);
        StorageDead(_22);
        goto -> bb33;
    }

    bb13: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
        _37 = std::result::Result::<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18}>(move _38, move _44) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::Program<'_, farms::program::Farms>);
        _35 = move _49;
        StorageDead(_49);
        _90 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_3);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb19, unwind: bb36];
    }

    bb17: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        StorageDead(_48);
        StorageDead(_46);
        _100 = discriminant(_36);
        StorageDead(_36);
        goto -> bb32;
    }

    bb19: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
        _52 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18}>(move _53, move _59) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb22, 1: bb23, otherwise: bb5];
    }

    bb22: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _50 = move _64;
        StorageDead(_64);
        _92 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_3);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb25, unwind: bb36];
    }

    bb23: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        StorageDead(_63);
        StorageDead(_61);
        _98 = discriminant(_51);
        StorageDead(_51);
        goto -> bb31;
    }

    bb25: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18};
        _67 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18}>(move _68, move _74) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb28, 1: bb29, otherwise: bb5];
    }

    bb28: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _65 = move _79;
        StorageDead(_79);
        _94 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        _81 = move _6;
        StorageLive(_82);
        _82 = move _21;
        StorageLive(_83);
        _83 = move _35;
        StorageLive(_84);
        _84 = move _50;
        StorageLive(_85);
        _85 = move _65;
        _80 = handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve::<'_> { crank: move _81, base_accounts: move _82, farms_program: move _83, rent: move _84, system_program: move _85 };
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        _0 = std::result::Result::<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error>::Ok(move _80);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb35;
    }

    bb29: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb30, unwind: bb38];
    }

    bb30: {
        StorageDead(_78);
        StorageDead(_76);
        _96 = discriminant(_66);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_50);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_35);
        drop(_21) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        StorageDead(_21);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_6);
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_21) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        _106 = discriminant(_66);
        goto -> bb36;
    }

    bb39 (cleanup): {
        _107 = discriminant(_51);
        goto -> bb36;
    }

    bb40 (cleanup): {
        _108 = discriminant(_36);
        goto -> bb36;
    }

    bb41 (cleanup): {
        _109 = discriminant(_22);
        goto -> bb37;
    }

    bb42 (cleanup): {
        _110 = discriminant(_7);
        goto -> bb37;
    }
}
