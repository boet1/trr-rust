// MIR for `check_obligation_order_execution` after PreCodegen

fn check_obligation_order_execution(_1: &state::types::LiquidationCheckInputs<'_>) -> std::option::Option<state::types::LiquidationParams> {
    let mut _0: std::option::Option<state::types::LiquidationParams>;
    let _2: &state::lending_market::LendingMarket;
    let _3: &state::reserve::Reserve;
    let _4: &state::reserve::Reserve;
    let _5: &state::obligation::Obligation;
    let mut _8: (usize, state::order_operations::ConditionHit);
    let mut _9: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, (usize, state::order_operations::ConditionHit)>;
    let mut _10: std::option::Option<(usize, state::order_operations::ConditionHit)>;
    let mut _11: &state::reserve::Reserve;
    let mut _12: &state::reserve::Reserve;
    let mut _13: &state::obligation::Obligation;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::option::Option<std::convert::Infallible>;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let _23: ();
    let mut _24: bool;
    let mut _25: &state::lending_market::LendingMarket;
    let mut _26: !;
    let _27: ();
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[&str; 4];
    let _32: &[&str; 4];
    let _33: [&str; 4];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let mut _35: &[core::fmt::rt::Argument<'_>; 3];
    let _36: &[core::fmt::rt::Argument<'_>; 3];
    let _37: [core::fmt::rt::Argument<'_>; 3];
    let mut _38: core::fmt::rt::Argument<'_>;
    let mut _39: &usize;
    let _40: &usize;
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &std::string::String;
    let _43: &std::string::String;
    let _44: std::string::String;
    let mut _45: &state::obligation::ObligationOrder;
    let mut _46: core::fmt::rt::Argument<'_>;
    let mut _47: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _48: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _49: ();
    let _50: ();
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[&str; 5];
    let _54: &[&str; 5];
    let _55: [&str; 5];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let mut _57: &[core::fmt::rt::Argument<'_>; 4];
    let _58: &[core::fmt::rt::Argument<'_>; 4];
    let _59: [core::fmt::rt::Argument<'_>; 4];
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &usize;
    let _62: &usize;
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &std::string::String;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _67: &state::obligation::ObligationOrder;
    let mut _68: core::fmt::rt::Argument<'_>;
    let mut _69: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _70: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _71: core::fmt::rt::Argument<'_>;
    let mut _72: &std::string::String;
    let _73: &std::string::String;
    let _74: std::string::String;
    let mut _75: &state::obligation::ObligationOrder;
    let mut _76: state::types::LiquidationParams;
    let mut _77: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _78: &state::obligation::Obligation;
    let mut _79: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _80: &state::obligation::ObligationOrder;
    let mut _81: &state::order_operations::ConditionHit;
    let _82: &state::order_operations::ConditionHit;
    let mut _83: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _84: &state::obligation::Obligation;
    let mut _85: state::types::LiquidationReason;
    let mut _86: usize;
    scope 1 {
        debug lending_market => _2;
        debug collateral_reserve => _3;
        debug debt_reserve => _4;
        debug obligation => _5;
        let _6: usize;
        let _7: state::order_operations::ConditionHit;
        let _15: std::option::Option<std::convert::Infallible>;
        let _18: (usize, state::order_operations::ConditionHit);
        scope 2 {
            debug order_index => _6;
            debug condition_hit => _7;
            let _19: &state::obligation::ObligationOrder;
            scope 7 {
                debug order => _19;
                let mut _87: &[&str; 5];
                let mut _88: &[&str; 4];
            }
        }
        scope 3 {
            debug residual => _15;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _18;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = ((*_1).0: &state::lending_market::LendingMarket);
        StorageLive(_3);
        _3 = ((*_1).1: &state::reserve::Reserve);
        StorageLive(_4);
        _4 = ((*_1).2: &state::reserve::Reserve);
        StorageLive(_5);
        _5 = ((*_1).3: &state::obligation::Obligation);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_3);
        StorageLive(_12);
        _12 = &(*_4);
        StorageLive(_13);
        _13 = &(*_5);
        _10 = find_applicable_obligation_order(move _11, move _12, move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::option::Option<(usize, ConditionHit)> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _14 = discriminant(_9);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = move ((_9 as Continue).0: (usize, state::order_operations::ConditionHit));
        _8 = move _18;
        StorageDead(_18);
        StorageLive(_6);
        _6 = (_8.0: usize);
        StorageLive(_7);
        _7 = move (_8.1: state::order_operations::ConditionHit);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _6;
        _21 = Len(((*_5).25: [state::obligation::ObligationOrder; 2]));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_9 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::option::Option<state::types::LiquidationParams> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb31;
    }

    bb7: {
        _19 = &((*_5).25: [state::obligation::ObligationOrder; 2])[_20];
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_2);
        _24 = state::lending_market::LendingMarket::is_obligation_order_execution_enabled(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_25);
        _23 = const ();
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _87 = const _;
        _54 = &(*_87);
        _53 = &(*_54);
        _52 = move _53 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_6;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _61) -> [return: bb18, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _88 = const _;
        _32 = &(*_88);
        _31 = &(*_32);
        _30 = move _31 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_6;
        _39 = &(*_40);
        _38 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_19);
        _44 = obligation::ObligationOrder::condition_to_display(move _45) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _42) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        StorageDead(_42);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(_7.0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _47 = &(*_48);
        _46 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _47) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        StorageDead(_47);
        _37 = [move _38, move _41, move _46];
        StorageDead(_46);
        StorageDead(_41);
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = move _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_35);
        _29 = Arguments::<'_>::new_v1(move _30, move _34) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_30);
        _28 = _print(move _29) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_48);
        drop(_44) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_28);
        _27 = const ();
        StorageDead(_27);
        _0 = std::option::Option::<state::types::LiquidationParams>::None;
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb31;
    }

    bb18: {
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &(*_19);
        _66 = obligation::ObligationOrder::condition_to_display(move _67) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _64) -> [return: bb20, unwind: bb34];
    }

    bb20: {
        StorageDead(_64);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(_7.0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _69 = &(*_70);
        _68 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _69) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        StorageDead(_69);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_19);
        _74 = obligation::ObligationOrder::opportunity_to_display(move _75) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _72) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        StorageDead(_72);
        _59 = [move _60, move _63, move _68, move _71];
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_63);
        StorageDead(_60);
        _58 = &_59;
        _57 = &(*_58);
        _56 = move _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_57);
        _51 = Arguments::<'_>::new_v1(move _52, move _56) -> [return: bb24, unwind: bb33];
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_52);
        _50 = _print(move _51) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        StorageDead(_51);
        drop(_74) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_70);
        drop(_66) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        StorageDead(_50);
        _49 = const ();
        StorageDead(_49);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_5);
        _77 = obligation::Obligation::loan_to_value(move _78) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &(*_19);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_7;
        _81 = &(*_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_5);
        _83 = obligation::Obligation::no_bf_loan_to_value(move _84) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_84);
        _79 = calculate_order_execution_bonus_rate(move _80, move _81, move _83) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _6;
        _85 = state::types::LiquidationReason::ObligationOrder(move _86);
        StorageDead(_86);
        _76 = state::types::LiquidationParams { user_ltv: move _77, liquidation_bonus_rate: move _79, liquidation_reason: move _85 };
        StorageDead(_85);
        StorageDead(_79);
        StorageDead(_77);
        _0 = std::option::Option::<state::types::LiquidationParams>::Some(move _76);
        StorageDead(_76);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_82);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb32;
    }

    bb31: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_74) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_66) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_44) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}
