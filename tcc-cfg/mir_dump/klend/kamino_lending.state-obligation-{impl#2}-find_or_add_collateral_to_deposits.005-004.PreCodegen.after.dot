digraph Mir_0_1667 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn obligation::Obligation::find_or_add_collateral_to_deposits(_1: &amp;ReErased mut state::obligation::Obligation, _2: anchor_lang::prelude::Pubkey, _3: state::reserve::AssetTier) -&gt; std::result::Result&lt;(&amp;ReErased mut state::obligation::ObligationCollateral, bool), anchor_lang::error::Error&gt;<br align="left"/>let mut _4: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _5: &amp;ReErased mut std::slice::IterMut&lt;ReErased, state::obligation::ObligationCollateral&gt;;<br align="left"/>let mut _6: std::slice::IterMut&lt;ReErased, state::obligation::ObligationCollateral&gt;;<br align="left"/>let mut _7: &amp;ReErased mut [state::obligation::ObligationCollateral];<br align="left"/>let mut _8: &amp;ReErased mut [state::obligation::ObligationCollateral; 8_usize];<br align="left"/>let mut _9: Closure(DefId(0:1668 ~ kamino_lending[6389]::state::obligation::{impl#2}::find_or_add_collateral_to_deposits::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased mut state::obligation::ObligationCollateral,)) -&gt; bool, []), (&amp;ReErased anchor_lang::prelude::Pubkey,)]);<br align="left"/>let mut _10: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: usize;<br align="left"/>let mut _13: (&amp;ReErased mut state::obligation::ObligationCollateral, bool);<br align="left"/>let mut _14: &amp;ReErased mut state::obligation::ObligationCollateral;<br align="left"/>let mut _15: &amp;ReErased mut state::obligation::ObligationCollateral;<br align="left"/>let _16: usize;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: bool;<br align="left"/>let mut _19: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _20: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::obligation::ObligationCollateral&gt;;<br align="left"/>let mut _21: std::slice::Iter&lt;ReErased, state::obligation::ObligationCollateral&gt;;<br align="left"/>let mut _22: &amp;ReErased [state::obligation::ObligationCollateral];<br align="left"/>let mut _23: &amp;ReErased [state::obligation::ObligationCollateral; 8_usize];<br align="left"/>let mut _24: Closure(DefId(0:1669 ~ kamino_lending[6389]::state::obligation::{impl#2}::find_or_add_collateral_to_deposits::{closure#1}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased state::obligation::ObligationCollateral,)) -&gt; bool, []), ()]);<br align="left"/>let mut _25: isize;<br align="left"/>let _26: usize;<br align="left"/>let _27: &amp;ReErased mut state::obligation::ObligationCollateral;<br align="left"/>let _28: usize;<br align="left"/>let mut _29: usize;<br align="left"/>let mut _30: bool;<br align="left"/>let mut _31: state::obligation::ObligationCollateral;<br align="left"/>let mut _32: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _33: u8;<br align="left"/>let mut _34: state::reserve::AssetTier;<br align="left"/>let _35: usize;<br align="left"/>let mut _36: usize;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: (&amp;ReErased mut state::obligation::ObligationCollateral, bool);<br align="left"/>let mut _39: &amp;ReErased mut state::obligation::ObligationCollateral;<br align="left"/>let _40: ();<br align="left"/>let _41: ();<br align="left"/>let mut _42: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _43: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _44: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _45: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _46: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _47: anchor_lang::error::Error;<br align="left"/>let mut _48: anchor_lang::error::AnchorError;<br align="left"/>let mut _49: std::string::String;<br align="left"/>let mut _50: &amp;ReErased LendingError;<br align="left"/>let _51: LendingError;<br align="left"/>let mut _52: u32;<br align="left"/>let mut _53: LendingError;<br align="left"/>let mut _54: std::string::String;<br align="left"/>let mut _55: &amp;ReErased LendingError;<br align="left"/>let _56: LendingError;<br align="left"/>let mut _57: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _58: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _59: anchor_lang::error::Source;<br align="left"/>let mut _60: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _61: &amp;ReErased LendingError;<br align="left"/>let mut _62: &amp;ReErased LendingError;<br align="left"/>let mut _63: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug deposit_reserve =&gt; _2;<br align="left"/>debug deposit_reserve_asset_tier =&gt; _3;<br align="left"/>debug collateral_index =&gt; _12;<br align="left"/>debug collateral_index =&gt; _26;<br align="left"/>debug collateral =&gt; _27;<br align="left"/>>;
    bb0__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;mut ((*_1).4: [state::obligation::ObligationCollateral; 8])<br/>_7 = move _8 as &amp;mut [state::obligation::ObligationCollateral] (PointerCoercion(Unsize))<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = core::slice::&lt;impl [obligation::ObligationCollateral]&gt;::iter_mut(move _7)</td></tr></table>>];
    bb1__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = &amp;mut _6<br/>StorageDead(_7)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;_2<br/>_9 = {closure@programs\klend\src\state\obligation.rs:317:23: 317:35} { deposit_reserve: move _10 }<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_4 = &lt;std::slice::IterMut&lt;'_, obligation::ObligationCollateral&gt; as Iterator&gt;::position::&lt;{closure@programs\klend\src\state\obligation.rs:317:23: 317:35}&gt;(move _5, move _9)</td></tr></table>>];
    bb2__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_5)<br/>_11 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_4 as Some).0: usize)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _12<br/>_17 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]))<br/>_18 = Lt(_16, _17)<br/></td></tr><tr><td align="left">assert(move _18, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _17, _16)</td></tr></table>>];
    bb4__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_15 = &amp;mut ((*_1).4: [state::obligation::ObligationCollateral; 8])[_16]<br/>_14 = &amp;mut (*_15)<br/>_13 = (move _14, const false)<br/>StorageDead(_14)<br/>_0 = std::result::Result::&lt;(&amp;mut obligation::ObligationCollateral, bool), anchor_lang::error::Error&gt;::Ok(move _13)<br/>StorageDead(_13)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;((*_1).4: [state::obligation::ObligationCollateral; 8])<br/>_22 = move _23 as &amp;[state::obligation::ObligationCollateral] (PointerCoercion(Unsize))<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = core::slice::&lt;impl [obligation::ObligationCollateral]&gt;::iter(move _22)</td></tr></table>>];
    bb6__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_20 = &amp;mut _21<br/>StorageDead(_22)<br/>StorageLive(_24)<br/>_24 = {closure@programs\klend\src\state\obligation.rs:320:78: 320:81}<br/></td></tr><tr><td align="left">_19 = &lt;std::slice::Iter&lt;'_, obligation::ObligationCollateral&gt; as Iterator&gt;::position::&lt;{closure@programs\klend\src\state\obligation.rs:320:78: 320:81}&gt;(move _20, move _24)</td></tr></table>>];
    bb7__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_20)<br/>_25 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb8__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_19 as Some).0: usize)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _26<br/>_29 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]))<br/>_30 = Lt(_28, _29)<br/></td></tr><tr><td align="left">assert(move _30, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _29, _28)</td></tr></table>>];
    bb9__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_27 = &amp;mut ((*_1).4: [state::obligation::ObligationCollateral; 8])[_28]<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _2<br/></td></tr><tr><td align="left">_31 = obligation::ObligationCollateral::new(move _32)</td></tr></table>>];
    bb10__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>(*_27) = move _31<br/>StorageDead(_31)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = move _3<br/></td></tr><tr><td align="left">_33 = &lt;reserve::AssetTier as Into&lt;u8&gt;&gt;::into(move _34)</td></tr></table>>];
    bb11__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageLive(_35)<br/>_35 = _26<br/>_36 = Len(((*_1).12: [u8; 8]))<br/>_37 = Lt(_35, _36)<br/></td></tr><tr><td align="left">assert(move _37, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _36, _35)</td></tr></table>>];
    bb12__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">((*_1).12: [u8; 8])[_35] = move _33<br/>StorageDead(_33)<br/>StorageDead(_35)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;mut (*_27)<br/>_38 = (move _39, const true)<br/>StorageDead(_39)<br/>_0 = std::result::Result::&lt;(&amp;mut obligation::ObligationCollateral, bool), anchor_lang::error::Error&gt;::Ok(move _38)<br/>StorageDead(_38)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_63 = const _<br/>_45 = &amp;(*_63)<br/>_44 = &amp;(*_45)<br/>_43 = move _44 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">_42 = Arguments::&lt;'_&gt;::new_const(move _43)</td></tr></table>>];
    bb14__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/></td></tr><tr><td align="left">_41 = _print(move _42)</td></tr></table>>];
    bb15__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_45)<br/>StorageDead(_41)<br/>_40 = const ()<br/>StorageDead(_40)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_62 = const _<br/>_50 = &amp;(*_62)<br/></td></tr><tr><td align="left">_49 = LendingError::name(move _50)</td></tr></table>>];
    bb16__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = LendingError::ObligationReserveLimit<br/></td></tr><tr><td align="left">_52 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _53)</td></tr></table>>];
    bb17__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_61 = const _<br/>_55 = &amp;(*_61)<br/></td></tr><tr><td align="left">_54 = &lt;LendingError as ToString&gt;::to_string(move _55)</td></tr></table>>];
    bb18__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\state\\obligation.rs&quot;, line: const 327_u32 }<br/>_58 = anchor_lang::error::ErrorOrigin::Source(move _59)<br/>StorageDead(_59)<br/>_57 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _58)<br/>StorageDead(_58)<br/>StorageLive(_60)<br/>_60 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_48 = anchor_lang::error::AnchorError { error_name: move _49, error_code_number: move _52, error_msg: move _54, error_origin: move _57, compared_values: move _60 }<br/>StorageDead(_60)<br/>StorageDead(_57)<br/>StorageDead(_54)<br/>StorageDead(_52)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _48)</td></tr></table>>];
    bb19__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_0 = std::result::Result::&lt;(&amp;mut obligation::ObligationCollateral, bool), anchor_lang::error::Error&gt;::Err(move _47)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb22__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb23__0_1667 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1667 -> bb1__0_1667 [label="return"];
    bb1__0_1667 -> bb2__0_1667 [label="return"];
    bb2__0_1667 -> bb3__0_1667 [label="1"];
    bb2__0_1667 -> bb5__0_1667 [label="otherwise"];
    bb3__0_1667 -> bb4__0_1667 [label="success"];
    bb4__0_1667 -> bb21__0_1667 [label=""];
    bb5__0_1667 -> bb6__0_1667 [label="return"];
    bb6__0_1667 -> bb7__0_1667 [label="return"];
    bb7__0_1667 -> bb8__0_1667 [label="1"];
    bb7__0_1667 -> bb13__0_1667 [label="otherwise"];
    bb8__0_1667 -> bb9__0_1667 [label="success"];
    bb9__0_1667 -> bb10__0_1667 [label="return"];
    bb10__0_1667 -> bb11__0_1667 [label="return"];
    bb11__0_1667 -> bb12__0_1667 [label="success"];
    bb12__0_1667 -> bb20__0_1667 [label=""];
    bb13__0_1667 -> bb14__0_1667 [label="return"];
    bb14__0_1667 -> bb15__0_1667 [label="return"];
    bb15__0_1667 -> bb16__0_1667 [label="return"];
    bb16__0_1667 -> bb17__0_1667 [label="return"];
    bb16__0_1667 -> bb22__0_1667 [label="unwind"];
    bb17__0_1667 -> bb18__0_1667 [label="return"];
    bb17__0_1667 -> bb22__0_1667 [label="unwind"];
    bb18__0_1667 -> bb19__0_1667 [label="return"];
    bb18__0_1667 -> bb23__0_1667 [label="unwind"];
    bb19__0_1667 -> bb20__0_1667 [label=""];
    bb20__0_1667 -> bb21__0_1667 [label=""];
    bb22__0_1667 -> bb23__0_1667 [label="return"];
}
