// MIR for `account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:50:1: 50:60>::load` before PreCodegen

fn account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:50:1: 50:60>::load(_1: &account_loader_trait::FatAccountLoader<'_, T>) -> std::result::Result<Ref<'_, T>, anchor_lang::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::cell::Ref<'_, T>, anchor_lang::error::Error>;
    let _2: std::cell::Ref<'_, &mut [u8]>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _4: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _10: std::cell::Ref<'_, &mut [u8]>;
    let _11: ();
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: &[u8];
    let _15: &&mut [u8];
    let mut _16: &std::cell::Ref<'_, &mut [u8]>;
    let mut _17: usize;
    let mut _18: &[u8];
    let mut _19: &[u8; 8];
    let _20: [u8; 8];
    let mut _21: !;
    let mut _22: anchor_lang::error::Error;
    let mut _23: anchor_lang::error::ErrorCode;
    let _24: ();
    let mut _25: bool;
    let mut _26: &[u8];
    let _27: &[u8];
    let mut _28: &[u8];
    let _29: &&mut [u8];
    let mut _30: &std::cell::Ref<'_, &mut [u8]>;
    let mut _31: std::ops::Range<usize>;
    let mut _32: &[u8; 8];
    let _33: [u8; 8];
    let mut _34: !;
    let mut _35: anchor_lang::error::Error;
    let mut _36: anchor_lang::error::ErrorCode;
    let mut _37: std::cell::Ref<'_, T>;
    let mut _38: std::cell::Ref<'_, &mut [u8]>;
    let mut _39: {closure@programs\klend\src\utils\account_loader_trait.rs:105:27: 105:33};
    let mut _40: &mut [u8];
    let mut _41: &mut [u8];
    let mut _42: bool;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    scope 1 {
        debug data => _2;
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _42 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _4 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _4) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _42 = const true;
        _2 = move _10;
        StorageDead(_10);
        _43 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_2;
        _15 = <Ref<'_, &mut [u8]> as Deref>::deref(move _16) -> [return: bb7, unwind: bb27];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<Ref<'_, T>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb28];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _45 = discriminant(_3);
        StorageDead(_3);
        goto -> bb23;
    }

    bb7: {
        _40 = deref_copy (*_15);
        _14 = &(*_40);
        StorageDead(_16);
        _13 = core::slice::<impl [u8]>::len(move _14) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = <T as Discriminator>::discriminator() -> [return: bb9, unwind: bb27];
    }

    bb9: {
        _19 = &_20;
        _18 = move _19 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_19);
        _17 = core::slice::<impl [u8]>::len(move _18) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        StorageDead(_18);
        _12 = Lt(move _13, move _17);
        switchInt(move _12) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        _23 = AccountDiscriminatorNotFound;
        _22 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _23) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        StorageDead(_23);
        _0 = std::result::Result::<Ref<'_, T>, anchor_lang::error::Error>::Err(move _22);
        StorageDead(_22);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb22;
    }

    bb13: {
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_2;
        _29 = <Ref<'_, &mut [u8]> as Deref>::deref(move _30) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _41 = deref_copy (*_29);
        _28 = &(*_41);
        StorageDead(_30);
        StorageLive(_31);
        _31 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _27 = <[u8] as Index<std::ops::Range<usize>>>::index(move _28, move _31) -> [return: bb15, unwind: bb27];
    }

    bb15: {
        _26 = &(*_27);
        StorageDead(_31);
        StorageDead(_28);
        StorageLive(_32);
        StorageLive(_33);
        _33 = <T as Discriminator>::discriminator() -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _32 = &_33;
        _25 = <[u8] as PartialEq<[u8; 8]>>::ne(move _26, move _32) -> [return: bb17, unwind: bb27];
    }

    bb17: {
        switchInt(move _25) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_35);
        StorageLive(_36);
        _36 = AccountDiscriminatorMismatch;
        _35 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _36) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        StorageDead(_36);
        _0 = std::result::Result::<Ref<'_, T>, anchor_lang::error::Error>::Err(move _35);
        StorageDead(_35);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb22;
    }

    bb20: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        _24 = const ();
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_37);
        StorageLive(_38);
        _42 = const false;
        _38 = move _2;
        StorageLive(_39);
        _39 = {closure@programs\klend\src\utils\account_loader_trait.rs:105:27: 105:33};
        _37 = Ref::<'_, &mut [u8]>::map::<T, {closure@programs\klend\src\utils\account_loader_trait.rs:105:27: 105:33}>(move _38, move _39) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_38);
        _0 = std::result::Result::<Ref<'_, T>, anchor_lang::error::Error>::Ok(move _37);
        StorageDead(_37);
        _42 = const false;
        StorageDead(_2);
        goto -> bb24;
    }

    bb22: {
        drop(_2) -> [return: bb23, unwind: bb25];
    }

    bb23: {
        _42 = const false;
        StorageDead(_2);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_42) -> [0: bb25, otherwise: bb26];
    }

    bb28 (cleanup): {
        _47 = discriminant(_3);
        goto -> bb25;
    }
}
