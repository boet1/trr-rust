// MIR for `post_withdraw_obligation_invariants` after PreCodegen

fn post_withdraw_obligation_invariants(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: &obligation::Obligation, _3: &reserve::Reserve, _4: u8, _5: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _6: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug amount => _1;
    debug obligation => _2;
    debug reserve => _3;
    debug reserve_liquidation_threshold_pct => _4;
    debug previous_collateral_asset_mv => _5;
    debug min_accepted_net_value => _6;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _7: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _8: &state::reserve::Reserve;
    let mut _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _12: u128;
    let mut _13: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: u128;
    let _16: ();
    let mut _17: bool;
    let mut _18: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _19: &i32;
    let _20: i32;
    let mut _22: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _24: bool;
    let mut _25: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _26: &i32;
    let _27: i32;
    let mut _28: bool;
    let mut _29: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _31: !;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 2];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let mut _45: &[core::fmt::rt::Argument<'_>; 2];
    let _46: &[core::fmt::rt::Argument<'_>; 2];
    let _47: [core::fmt::rt::Argument<'_>; 2];
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &utils::fraction::FractionDisplay<'_>;
    let _50: &utils::fraction::FractionDisplay<'_>;
    let _51: utils::fraction::FractionDisplay<'_>;
    let mut _52: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _53: core::fmt::rt::Argument<'_>;
    let mut _54: &&str;
    let _55: &&str;
    let _56: &str;
    let mut _57: &state::reserve::Reserve;
    let mut _58: anchor_lang::error::Error;
    let mut _59: anchor_lang::error::AnchorError;
    let mut _60: std::string::String;
    let mut _61: &LendingError;
    let _62: LendingError;
    let mut _63: u32;
    let mut _64: LendingError;
    let mut _65: std::string::String;
    let mut _66: &LendingError;
    let _67: LendingError;
    let mut _68: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _69: anchor_lang::error::ErrorOrigin;
    let mut _70: anchor_lang::error::Source;
    let mut _71: std::option::Option<anchor_lang::error::ComparedValues>;
    let _72: ();
    let mut _73: bool;
    let mut _74: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _75: &i32;
    let _76: i32;
    let mut _77: bool;
    let mut _78: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _79: &i32;
    let _80: i32;
    let mut _81: !;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: &std::string::String;
    let _86: &std::string::String;
    let _87: std::string::String;
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let mut _91: &[&str; 2];
    let _92: &[&str; 2];
    let _93: [&str; 2];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let mut _95: &[core::fmt::rt::Argument<'_>; 2];
    let _96: &[core::fmt::rt::Argument<'_>; 2];
    let _97: [core::fmt::rt::Argument<'_>; 2];
    let mut _98: core::fmt::rt::Argument<'_>;
    let mut _99: &utils::fraction::FractionDisplay<'_>;
    let _100: &utils::fraction::FractionDisplay<'_>;
    let _101: utils::fraction::FractionDisplay<'_>;
    let mut _102: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _103: core::fmt::rt::Argument<'_>;
    let mut _104: &utils::fraction::FractionDisplay<'_>;
    let _105: &utils::fraction::FractionDisplay<'_>;
    let _106: utils::fraction::FractionDisplay<'_>;
    let mut _107: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _108: anchor_lang::error::Error;
    let mut _109: anchor_lang::error::AnchorError;
    let mut _110: std::string::String;
    let mut _111: &LendingError;
    let _112: LendingError;
    let mut _113: u32;
    let mut _114: LendingError;
    let mut _115: std::string::String;
    let mut _116: &LendingError;
    let _117: LendingError;
    let mut _118: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _119: anchor_lang::error::ErrorOrigin;
    let mut _120: anchor_lang::error::Source;
    let mut _121: std::option::Option<anchor_lang::error::ComparedValues>;
    let _122: ();
    let mut _123: bool;
    let mut _124: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _125: &i32;
    let _126: i32;
    let _127: ();
    let mut _128: bool;
    let mut _129: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _130: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _131: u128;
    let mut _132: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _133: !;
    let _134: ();
    let mut _135: &str;
    let _136: &str;
    let mut _137: &std::string::String;
    let _138: &std::string::String;
    let _139: std::string::String;
    let mut _141: std::fmt::Arguments<'_>;
    let mut _142: &[&str];
    let mut _143: &[&str; 2];
    let _144: &[&str; 2];
    let _145: [&str; 2];
    let mut _146: &[core::fmt::rt::Argument<'_>];
    let mut _147: &[core::fmt::rt::Argument<'_>; 2];
    let _148: &[core::fmt::rt::Argument<'_>; 2];
    let _149: [core::fmt::rt::Argument<'_>; 2];
    let mut _150: core::fmt::rt::Argument<'_>;
    let mut _151: &utils::fraction::FractionDisplay<'_>;
    let _152: &utils::fraction::FractionDisplay<'_>;
    let _153: utils::fraction::FractionDisplay<'_>;
    let mut _154: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _155: core::fmt::rt::Argument<'_>;
    let mut _156: &&str;
    let _157: &&str;
    let _158: &str;
    let mut _159: &state::reserve::Reserve;
    let mut _160: anchor_lang::error::Error;
    let mut _161: anchor_lang::error::AnchorError;
    let mut _162: std::string::String;
    let mut _163: &LendingError;
    let _164: LendingError;
    let mut _165: u32;
    let mut _166: LendingError;
    let mut _167: std::string::String;
    let mut _168: &LendingError;
    let _169: LendingError;
    let mut _170: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _171: anchor_lang::error::ErrorOrigin;
    let mut _172: anchor_lang::error::Source;
    let mut _173: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _175: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _176: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _178: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _179: u128;
    let mut _180: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _181: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _182: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _183: u8;
    let mut _185: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _186: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _187: bool;
    let mut _188: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _189: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _190: bool;
    let mut _191: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _192: &i32;
    let _193: i32;
    let mut _194: !;
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: &std::string::String;
    let _199: &std::string::String;
    let _200: std::string::String;
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[&str; 3];
    let _205: &[&str; 3];
    let _206: [&str; 3];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let mut _208: &[core::fmt::rt::Argument<'_>; 3];
    let _209: &[core::fmt::rt::Argument<'_>; 3];
    let _210: [core::fmt::rt::Argument<'_>; 3];
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &utils::fraction::FractionDisplay<'_>;
    let _213: &utils::fraction::FractionDisplay<'_>;
    let _214: utils::fraction::FractionDisplay<'_>;
    let mut _215: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _216: core::fmt::rt::Argument<'_>;
    let mut _217: &utils::fraction::FractionDisplay<'_>;
    let _218: &utils::fraction::FractionDisplay<'_>;
    let _219: utils::fraction::FractionDisplay<'_>;
    let mut _220: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _221: core::fmt::rt::Argument<'_>;
    let mut _222: &&str;
    let _223: &&str;
    let _224: &str;
    let mut _225: &state::reserve::Reserve;
    let mut _226: &[core::fmt::rt::Placeholder];
    let mut _227: &[core::fmt::rt::Placeholder; 3];
    let _228: &[core::fmt::rt::Placeholder; 3];
    let _229: [core::fmt::rt::Placeholder; 3];
    let mut _230: core::fmt::rt::Placeholder;
    let mut _231: core::fmt::rt::Alignment;
    let mut _232: core::fmt::rt::Count;
    let mut _233: core::fmt::rt::Count;
    let mut _234: core::fmt::rt::Placeholder;
    let mut _235: core::fmt::rt::Alignment;
    let mut _236: core::fmt::rt::Count;
    let mut _237: core::fmt::rt::Count;
    let mut _238: core::fmt::rt::Placeholder;
    let mut _239: core::fmt::rt::Alignment;
    let mut _240: core::fmt::rt::Count;
    let mut _241: core::fmt::rt::Count;
    let mut _242: core::fmt::rt::UnsafeArg;
    let mut _243: anchor_lang::error::Error;
    let mut _244: anchor_lang::error::AnchorError;
    let mut _245: std::string::String;
    let mut _246: &LendingError;
    let _247: LendingError;
    let mut _248: u32;
    let mut _249: LendingError;
    let mut _250: std::string::String;
    let mut _251: &LendingError;
    let _252: LendingError;
    let mut _253: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _254: anchor_lang::error::ErrorOrigin;
    let mut _255: anchor_lang::error::Source;
    let mut _256: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _257: ();
    scope 1 {
        debug asset_mv => _7;
        let _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug new_total_deposited_mv => _10;
            let _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug debt_value_bf => _14;
                let _21: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                let _88: std::string::String;
                let _140: std::string::String;
                let _174: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                let mut _261: &LendingError;
                let mut _262: &LendingError;
                let mut _263: &[&str; 2];
                let mut _264: &LendingError;
                let mut _265: &LendingError;
                let mut _266: &[&str; 2];
                let mut _271: &i32;
                let mut _272: &i32;
                let mut _273: &i32;
                let mut _275: &i32;
                scope 4 {
                    debug new_collateral_asset_mv => _21;
                    let _38: std::string::String;
                    let mut _258: &LendingError;
                    let mut _259: &LendingError;
                    let mut _260: &[&str; 2];
                    let mut _274: &i32;
                    scope 5 {
                        debug res => _38;
                    }
                }
                scope 6 {
                    debug res => _88;
                }
                scope 7 {
                    debug res => _140;
                }
                scope 8 {
                    debug new_ltv => _174;
                    let _177: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 9 {
                        debug new_unhealthy_borrow_value => _177;
                        let _184: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        scope 10 {
                            debug new_unhealthy_ltv => _184;
                            let _201: std::string::String;
                            let mut _267: &LendingError;
                            let mut _268: &LendingError;
                            let mut _269: &[&str; 3];
                            let mut _270: &i32;
                            scope 11 {
                                debug res => _201;
                            }
                            scope 12 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_3);
        StorageLive(_9);
        _9 = _1;
        _7 = calculate_market_value_from_liquidity_amount(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((*_2).6: u128);
        _11 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        StorageLive(_13);
        _13 = _7;
        _10 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _11, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_2).8: u128);
        _14 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_5;
        StorageLive(_19);
        _275 = const _;
        _19 = &(*_275);
        _17 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::ne(move _18, move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _17) -> [0: bb28, otherwise: bb6];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _5;
        StorageLive(_23);
        _23 = _7;
        _21 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_21;
        StorageLive(_26);
        _274 = const _;
        _26 = &(*_274);
        _24 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _25, move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _24) -> [0: bb26, otherwise: bb9];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_21;
        StorageLive(_30);
        _30 = &_6;
        _28 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _29, move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _28) -> [0: bb25, otherwise: bb11];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _260 = const _;
        _42 = &(*_260);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_21;
        _51 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _52) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _49) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_49);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_3);
        _56 = reserve::Reserve::token_symbol(move _57) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _54) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_54);
        _47 = [move _48, move _53];
        StorageDead(_53);
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = move _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_45);
        _39 = Arguments::<'_>::new_v1(move _40, move _44) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_39);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <std::string::String as Deref>::deref(move _35) -> [return: bb18, unwind: bb113];
    }

    bb18: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb19, unwind: bb113];
    }

    bb19: {
        StorageDead(_33);
        drop(_37) -> [return: bb20, unwind: bb114];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _259 = const _;
        _61 = &(*_259);
        _60 = LendingError::name(move _61) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        _64 = LendingError::NetValueRemainingTooSmall;
        _63 = <LendingError as Into<u32>>::into(move _64) -> [return: bb22, unwind: bb112];
    }

    bb22: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        _258 = const _;
        _66 = &(*_258);
        _65 = <LendingError as ToString>::to_string(move _66) -> [return: bb23, unwind: bb112];
    }

    bb23: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2828_u32 };
        _69 = anchor_lang::error::ErrorOrigin::Source(move _70);
        StorageDead(_70);
        _68 = std::option::Option::<ErrorOrigin>::Some(move _69);
        StorageDead(_69);
        StorageLive(_71);
        _71 = std::option::Option::<ComparedValues>::None;
        _59 = anchor_lang::error::AnchorError { error_name: move _60, error_code_number: move _63, error_msg: move _65, error_origin: move _68, compared_values: move _71 };
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        _58 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _59) -> [return: bb24, unwind: bb114];
    }

    bb24: {
        StorageDead(_59);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _58);
        StorageDead(_58);
        StorageDead(_28);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb104;
    }

    bb25: {
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb27;
    }

    bb27: {
        _16 = const ();
        StorageDead(_28);
        StorageDead(_24);
        StorageDead(_21);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = const ();
        goto -> bb29;
    }

    bb29: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_10;
        StorageLive(_75);
        _273 = const _;
        _75 = &(*_273);
        _73 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::eq(move _74, move _75) -> [return: bb30, unwind continue];
    }

    bb30: {
        switchInt(move _73) -> [0: bb48, otherwise: bb31];
    }

    bb31: {
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_14;
        StorageLive(_79);
        _272 = const _;
        _79 = &(*_272);
        _77 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _78, move _79) -> [return: bb32, unwind continue];
    }

    bb32: {
        switchInt(move _77) -> [0: bb47, otherwise: bb33];
    }

    bb33: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _263 = const _;
        _92 = &(*_263);
        _91 = &(*_92);
        _90 = move _91 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_14;
        _101 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _102) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _99) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_99);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_10;
        _106 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _107) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _104) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_104);
        _97 = [move _98, move _103];
        StorageDead(_103);
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = move _95 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_95);
        _89 = Arguments::<'_>::new_v1(move _90, move _94) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_94);
        StorageDead(_90);
        _88 = format(move _89) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_89);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        _87 = move _88;
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = <std::string::String as Deref>::deref(move _85) -> [return: bb40, unwind: bb111];
    }

    bb40: {
        _83 = &(*_84);
        StorageDead(_85);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb41, unwind: bb111];
    }

    bb41: {
        StorageDead(_83);
        drop(_87) -> [return: bb42, unwind: bb114];
    }

    bb42: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _262 = const _;
        _111 = &(*_262);
        _110 = LendingError::name(move _111) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_111);
        StorageLive(_113);
        StorageLive(_114);
        _114 = LendingError::LiabilitiesBiggerThanAssets;
        _113 = <LendingError as Into<u32>>::into(move _114) -> [return: bb44, unwind: bb110];
    }

    bb44: {
        StorageDead(_114);
        StorageLive(_115);
        StorageLive(_116);
        _261 = const _;
        _116 = &(*_261);
        _115 = <LendingError as ToString>::to_string(move _116) -> [return: bb45, unwind: bb110];
    }

    bb45: {
        StorageDead(_116);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2837_u32 };
        _119 = anchor_lang::error::ErrorOrigin::Source(move _120);
        StorageDead(_120);
        _118 = std::option::Option::<ErrorOrigin>::Some(move _119);
        StorageDead(_119);
        StorageLive(_121);
        _121 = std::option::Option::<ComparedValues>::None;
        _109 = anchor_lang::error::AnchorError { error_name: move _110, error_code_number: move _113, error_msg: move _115, error_origin: move _118, compared_values: move _121 };
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_110);
        _108 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _109) -> [return: bb46, unwind: bb114];
    }

    bb46: {
        StorageDead(_109);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _108);
        StorageDead(_108);
        StorageDead(_77);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb104;
    }

    bb47: {
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb49;
    }

    bb48: {
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb49;
    }

    bb49: {
        _72 = const ();
        StorageDead(_77);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_10;
        StorageLive(_125);
        _271 = const _;
        _125 = &(*_271);
        _123 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::ne(move _124, move _125) -> [return: bb50, unwind continue];
    }

    bb50: {
        switchInt(move _123) -> [0: bb101, otherwise: bb51];
    }

    bb51: {
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = ((*_2).9: u128);
        _130 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _131) -> [return: bb52, unwind continue];
    }

    bb52: {
        _129 = &_130;
        StorageDead(_131);
        StorageLive(_132);
        _132 = &_10;
        _128 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _129, move _132) -> [return: bb53, unwind continue];
    }

    bb53: {
        switchInt(move _128) -> [0: bb68, otherwise: bb54];
    }

    bb54: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _266 = const _;
        _144 = &(*_266);
        _143 = &(*_144);
        _142 = move _143 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_143);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &_10;
        _153 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _154) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _151) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_151);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(*_3);
        _158 = reserve::Reserve::token_symbol(move _159) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _156) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_156);
        _149 = [move _150, move _155];
        StorageDead(_155);
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = move _147 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_147);
        _141 = Arguments::<'_>::new_v1(move _142, move _146) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_146);
        StorageDead(_142);
        _140 = format(move _141) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_141);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_144);
        _139 = move _140;
        StorageDead(_140);
        _138 = &_139;
        _137 = &(*_138);
        _136 = <std::string::String as Deref>::deref(move _137) -> [return: bb61, unwind: bb109];
    }

    bb61: {
        _135 = &(*_136);
        StorageDead(_137);
        _134 = solana_program::log::sol_log(move _135) -> [return: bb62, unwind: bb109];
    }

    bb62: {
        StorageDead(_135);
        drop(_139) -> [return: bb63, unwind: bb114];
    }

    bb63: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _265 = const _;
        _163 = &(*_265);
        _162 = LendingError::name(move _163) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_163);
        StorageLive(_165);
        StorageLive(_166);
        _166 = LendingError::LiabilitiesBiggerThanAssets;
        _165 = <LendingError as Into<u32>>::into(move _166) -> [return: bb65, unwind: bb108];
    }

    bb65: {
        StorageDead(_166);
        StorageLive(_167);
        StorageLive(_168);
        _264 = const _;
        _168 = &(*_264);
        _167 = <LendingError as ToString>::to_string(move _168) -> [return: bb66, unwind: bb108];
    }

    bb66: {
        StorageDead(_168);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2852_u32 };
        _171 = anchor_lang::error::ErrorOrigin::Source(move _172);
        StorageDead(_172);
        _170 = std::option::Option::<ErrorOrigin>::Some(move _171);
        StorageDead(_171);
        StorageLive(_173);
        _173 = std::option::Option::<ComparedValues>::None;
        _161 = anchor_lang::error::AnchorError { error_name: move _162, error_code_number: move _165, error_msg: move _167, error_origin: move _170, compared_values: move _173 };
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_162);
        _160 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _161) -> [return: bb67, unwind: bb114];
    }

    bb67: {
        StorageDead(_161);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _160);
        StorageDead(_160);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb103;
    }

    bb68: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_129);
        _127 = const ();
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_174);
        StorageLive(_175);
        _175 = _14;
        StorageLive(_176);
        _176 = _10;
        _174 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _175, move _176) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = ((*_2).11: u128);
        _178 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _179) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = _7;
        StorageLive(_182);
        StorageLive(_183);
        _183 = _4;
        _182 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u8>(move _183) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_183);
        _180 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _181, move _182) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_182);
        StorageDead(_181);
        _177 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _178, move _180) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_180);
        StorageDead(_178);
        StorageLive(_184);
        StorageLive(_185);
        _185 = _177;
        StorageLive(_186);
        _186 = _10;
        _184 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _185, move _186) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_186);
        StorageDead(_185);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_174;
        StorageLive(_189);
        _189 = &_184;
        _187 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _188, move _189) -> [return: bb75, unwind continue];
    }

    bb75: {
        switchInt(move _187) -> [0: bb99, otherwise: bb76];
    }

    bb76: {
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_174;
        StorageLive(_192);
        _270 = const _;
        _192 = &(*_270);
        _190 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::ne(move _191, move _192) -> [return: bb77, unwind continue];
    }

    bb77: {
        switchInt(move _190) -> [0: bb98, otherwise: bb78];
    }

    bb78: {
        StorageDead(_192);
        StorageDead(_191);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _269 = const _;
        _205 = &(*_269);
        _204 = &(*_205);
        _203 = move _204 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_204);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &_174;
        _214 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _215) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_215);
        _213 = &_214;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _212) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_212);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_184;
        _219 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _220) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _216 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _217) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_217);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &(*_3);
        _224 = reserve::Reserve::token_symbol(move _225) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_225);
        _223 = &_224;
        _222 = &(*_223);
        _221 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _222) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_222);
        _210 = [move _211, move _216, move _221];
        StorageDead(_221);
        StorageDead(_216);
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = move _208 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_208);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_232);
        _232 = core::fmt::rt::Count::Is(const 2_usize);
        StorageLive(_233);
        _233 = core::fmt::rt::Count::Implied;
        _230 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _231, const 0_u32, move _232, move _233) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_234);
        StorageLive(_235);
        _235 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_236);
        _236 = core::fmt::rt::Count::Is(const 2_usize);
        StorageLive(_237);
        _237 = core::fmt::rt::Count::Implied;
        _234 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _235, const 0_u32, move _236, move _237) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_238);
        StorageLive(_239);
        _239 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_240);
        _240 = core::fmt::rt::Count::Implied;
        StorageLive(_241);
        _241 = core::fmt::rt::Count::Implied;
        _238 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _239, const 0_u32, move _240, move _241) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_239);
        _229 = [move _230, move _234, move _238];
        StorageDead(_238);
        StorageDead(_234);
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = move _227 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_227);
        StorageLive(_242);
        _242 = core::fmt::rt::UnsafeArg::new() -> [return: bb88, unwind continue];
    }

    bb88: {
        _202 = Arguments::<'_>::new_v1_formatted(move _203, move _207, move _226, move _242) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_242);
        StorageDead(_226);
        StorageDead(_207);
        StorageDead(_203);
        _201 = format(move _202) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_202);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_205);
        _200 = move _201;
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = <std::string::String as Deref>::deref(move _198) -> [return: bb91, unwind: bb107];
    }

    bb91: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb92, unwind: bb107];
    }

    bb92: {
        StorageDead(_196);
        drop(_200) -> [return: bb93, unwind: bb114];
    }

    bb93: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _268 = const _;
        _246 = &(*_268);
        _245 = LendingError::name(move _246) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_246);
        StorageLive(_248);
        StorageLive(_249);
        _249 = LendingError::WorseLtvThanUnhealthyLtv;
        _248 = <LendingError as Into<u32>>::into(move _249) -> [return: bb95, unwind: bb106];
    }

    bb95: {
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        _267 = const _;
        _251 = &(*_267);
        _250 = <LendingError as ToString>::to_string(move _251) -> [return: bb96, unwind: bb106];
    }

    bb96: {
        StorageDead(_251);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2871_u32 };
        _254 = anchor_lang::error::ErrorOrigin::Source(move _255);
        StorageDead(_255);
        _253 = std::option::Option::<ErrorOrigin>::Some(move _254);
        StorageDead(_254);
        StorageLive(_256);
        _256 = std::option::Option::<ComparedValues>::None;
        _244 = anchor_lang::error::AnchorError { error_name: move _245, error_code_number: move _248, error_msg: move _250, error_origin: move _253, compared_values: move _256 };
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_245);
        _243 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _244) -> [return: bb97, unwind: bb114];
    }

    bb97: {
        StorageDead(_244);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _243);
        StorageDead(_243);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_177);
        StorageDead(_174);
        goto -> bb103;
    }

    bb98: {
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb100;
    }

    bb99: {
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb100;
    }

    bb100: {
        _122 = const ();
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_177);
        StorageDead(_174);
        goto -> bb102;
    }

    bb101: {
        StorageDead(_125);
        StorageDead(_124);
        _122 = const ();
        goto -> bb102;
    }

    bb102: {
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_257);
        _257 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _257);
        StorageDead(_257);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb105;
    }

    bb103: {
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb105;
    }

    bb105: {
        return;
    }

    bb106 (cleanup): {
        drop(_245) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_200) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_162) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_139) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_110) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_87) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_60) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_37) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        resume;
    }
}
