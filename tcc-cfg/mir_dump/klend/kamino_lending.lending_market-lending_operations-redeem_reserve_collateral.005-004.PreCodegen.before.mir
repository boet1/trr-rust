// MIR for `lending_operations::redeem_reserve_collateral` before PreCodegen

fn lending_operations::redeem_reserve_collateral(_1: &mut reserve::Reserve, _2: u64, _3: &anchor_lang::prelude::Clock, _4: bool) -> std::result::Result<u64, anchor_lang::error::Error> {
    debug reserve => _1;
    debug collateral_amount => _2;
    debug clock => _3;
    debug add_amount_to_withdrawal_caps => _4;
    let mut _0: std::result::Result<u64, anchor_lang::error::Error>;
    let _5: ();
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: !;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: anchor_lang::error::Error;
    let mut _13: anchor_lang::error::AnchorError;
    let mut _14: std::string::String;
    let mut _15: &LendingError;
    let _16: LendingError;
    let mut _17: u32;
    let mut _18: LendingError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _23: anchor_lang::error::ErrorOrigin;
    let mut _24: anchor_lang::error::Source;
    let mut _25: std::option::Option<anchor_lang::error::ComparedValues>;
    let _26: ();
    let mut _27: bool;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _29: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _30: &state::last_update::LastUpdate;
    let mut _31: u64;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _36: bool;
    let mut _37: !;
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: anchor_lang::error::Error;
    let mut _42: anchor_lang::error::AnchorError;
    let mut _43: std::string::String;
    let mut _44: &LendingError;
    let _45: LendingError;
    let mut _46: u32;
    let mut _47: LendingError;
    let mut _48: std::string::String;
    let mut _49: &LendingError;
    let _50: LendingError;
    let mut _51: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _52: anchor_lang::error::ErrorOrigin;
    let mut _53: anchor_lang::error::Source;
    let mut _54: std::option::Option<anchor_lang::error::ComparedValues>;
    let _55: u64;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _57: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _58: &mut state::reserve::Reserve;
    let mut _59: u64;
    let mut _60: isize;
    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _64: u64;
    let mut _66: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _67: i64;
    let _68: ();
    let mut _69: &mut state::reserve::Reserve;
    let mut _70: u64;
    let _71: ();
    let mut _72: &mut state::last_update::LastUpdate;
    let _73: ();
    let mut _74: bool;
    let _75: ();
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>>;
    let mut _77: std::result::Result<(), LendingError>;
    let mut _78: &mut state::reserve::WithdrawalCaps;
    let mut _79: &mut state::reserve::WithdrawalCaps;
    let mut _80: u64;
    let mut _81: u64;
    let mut _82: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _83: i64;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _89: u64;
    let mut _90: &LendingError;
    let mut _91: &LendingError;
    let mut _92: &LendingError;
    let mut _93: &LendingError;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    scope 1 {
        debug residual => _33;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _36;
        scope 4 {
        }
    }
    scope 5 {
        debug liquidity_amount => _55;
        let _65: u64;
        scope 10 {
            debug timestamp => _65;
            let _85: std::result::Result<std::convert::Infallible, LendingError>;
            let _88: ();
            scope 11 {
                debug residual => _85;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _88;
                scope 14 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _61;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _64;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Eq(move _7, const 0_u64);
        switchInt(move _6) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "Collateral amount provided cannot be zero";
        _10 = &(*_11);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _91 = const _;
        _15 = &(*_91);
        _14 = LendingError::name(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = LendingError::InvalidAmount;
        _17 = <LendingError as Into<u32>>::into(move _18) -> [return: bb4, unwind: bb42];
    }

    bb4: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _90 = const _;
        _20 = &(*_90);
        _19 = <LendingError as ToString>::to_string(move _20) -> [return: bb5, unwind: bb42];
    }

    bb5: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 627_u32 };
        _23 = anchor_lang::error::ErrorOrigin::Source(move _24);
        StorageDead(_24);
        _22 = std::option::Option::<ErrorOrigin>::Some(move _23);
        StorageDead(_23);
        StorageLive(_25);
        _25 = std::option::Option::<ComparedValues>::None;
        _13 = anchor_lang::error::AnchorError { error_name: move _14, error_code_number: move _17, error_msg: move _19, error_origin: move _22, compared_values: move _25 };
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        _12 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _13) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        StorageDead(_13);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _12);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb40;
    }

    bb7: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_31);
        _31 = ((*_3).0: u64);
        _29 = last_update::LastUpdate::is_stale(move _30, move _31, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _29) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: bool);
        _27 = _36;
        StorageDead(_36);
        switchInt(move _27) -> [0: bb45, otherwise: bb44];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_33);
        _33 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _35) -> [return: bb13, unwind: bb47];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_33);
        _102 = discriminant(_28);
        StorageDead(_28);
        goto -> bb39;
    }

    bb14: {
        StorageDead(_39);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _93 = const _;
        _44 = &(*_93);
        _43 = LendingError::name(move _44) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        _47 = LendingError::ReserveStale;
        _46 = <LendingError as Into<u32>>::into(move _47) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _92 = const _;
        _49 = &(*_92);
        _48 = <LendingError as ToString>::to_string(move _49) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 635_u32 };
        _52 = anchor_lang::error::ErrorOrigin::Source(move _53);
        StorageDead(_53);
        _51 = std::option::Option::<ErrorOrigin>::Some(move _52);
        StorageDead(_52);
        StorageLive(_54);
        _54 = std::option::Option::<ComparedValues>::None;
        _42 = anchor_lang::error::AnchorError { error_name: move _43, error_code_number: move _46, error_msg: move _48, error_origin: move _51, compared_values: move _54 };
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_43);
        _41 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _42) -> [return: bb18, unwind: bb43];
    }

    bb18: {
        StorageDead(_42);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _41);
        StorageDead(_41);
        goto -> bb39;
    }

    bb19: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _57) -> [return: bb20, unwind: bb43];
    }

    bb20: {
        StorageDead(_57);
        _60 = discriminant(_56);
        switchInt(move _60) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_64);
        _64 = ((_56 as Continue).0: u64);
        _55 = _64;
        StorageDead(_64);
        _98 = discriminant(_56);
        StorageDead(_56);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = ((*_3).4: i64);
        _66 = <u64 as TryFrom<i64>>::try_from(move _67) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_61);
        _61 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        StorageDead(_63);
        StorageDead(_61);
        _100 = discriminant(_56);
        StorageDead(_56);
        goto -> bb38;
    }

    bb24: {
        StorageDead(_67);
        _65 = std::result::Result::<u64, TryFromIntError>::unwrap(move _66) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_1);
        StorageLive(_70);
        _70 = _65;
        _68 = refresh_reserve_limit_timestamps(move _69, move _70) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &mut ((*_1).1: state::last_update::LastUpdate);
        _71 = last_update::LastUpdate::mark_stale(move _72) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _4;
        switchInt(move _74) -> [0: bb36, otherwise: bb28];
    }

    bb28: {
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &mut (((*_1).9: state::reserve::ReserveConfig).20: state::reserve::WithdrawalCaps);
        _78 = &mut (*_79);
        StorageLive(_80);
        _80 = _55;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = ((*_3).4: i64);
        _82 = <u64 as TryFrom<i64>>::try_from(move _83) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_83);
        _81 = std::result::Result::<u64, TryFromIntError>::unwrap(move _82) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_82);
        _77 = add_to_withdrawal_accum(move _78, move _80, move _81) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        _76 = <std::result::Result<(), LendingError> as Try>::branch(move _77) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_77);
        _84 = discriminant(_76);
        switchInt(move _84) -> [0: bb33, 1: bb34, otherwise: bb11];
    }

    bb33: {
        StorageLive(_88);
        _88 = ((_76 as Continue).0: ());
        _75 = _88;
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        _73 = const ();
        goto -> bb37;
    }

    bb34: {
        StorageLive(_85);
        _85 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _87) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_65);
        goto -> bb38;
    }

    bb36: {
        _73 = const ();
        goto -> bb37;
    }

    bb37: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_89);
        _89 = _55;
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Ok(move _89);
        StorageDead(_89);
        StorageDead(_65);
        StorageDead(_55);
        goto -> bb40;
    }

    bb38: {
        StorageDead(_55);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb40;
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_43) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_14) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44: {
        _94 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = const "Reserve is stale and must be refreshed in the current slot";
        _39 = &(*_40);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb14, unwind continue];
    }

    bb45: {
        _96 = discriminant(_28);
        StorageDead(_28);
        _26 = const ();
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &mut (*_1);
        StorageLive(_59);
        _59 = _2;
        _57 = reserve::Reserve::redeem_collateral(move _58, move _59) -> [return: bb19, unwind continue];
    }

    bb46 (cleanup): {
        _104 = discriminant(_56);
        goto -> bb43;
    }

    bb47 (cleanup): {
        _105 = discriminant(_28);
        goto -> bb43;
    }
}
