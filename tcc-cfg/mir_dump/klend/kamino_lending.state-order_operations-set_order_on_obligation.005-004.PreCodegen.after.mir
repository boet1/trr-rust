// MIR for `set_order_on_obligation` after PreCodegen

fn set_order_on_obligation(_1: &state::lending_market::LendingMarket, _2: &mut obligation::Obligation, _3: u8, _4: obligation::ObligationOrder) -> std::result::Result<(), anchor_lang::error::Error> {
    debug lending_market => _1;
    debug obligation => _2;
    debug index => _3;
    debug order => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: state::obligation::ObligationOrder;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: ();
    let mut _15: bool;
    let mut _16: &state::obligation::ObligationOrder;
    let mut _17: &state::obligation::Obligation;
    let mut _18: !;
    let _19: ();
    let mut _20: &str;
    let _21: &str;
    let mut _22: &std::string::String;
    let _23: &std::string::String;
    let _24: std::string::String;
    let _25: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[&str; 2];
    let _29: &[&str; 2];
    let _30: [&str; 2];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let mut _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &state::obligation::ObligationOrder;
    let _37: &state::obligation::ObligationOrder;
    let mut _38: anchor_lang::error::Error;
    let mut _39: anchor_lang::error::AnchorError;
    let mut _40: std::string::String;
    let mut _41: &LendingError;
    let _42: LendingError;
    let mut _43: u32;
    let mut _44: LendingError;
    let mut _45: std::string::String;
    let mut _46: &LendingError;
    let _47: LendingError;
    let mut _48: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _49: anchor_lang::error::ErrorOrigin;
    let mut _50: anchor_lang::error::Source;
    let mut _51: std::option::Option<anchor_lang::error::ComparedValues>;
    let _52: usize;
    let mut _53: u8;
    let _54: ();
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let mut _58: &[state::obligation::ObligationOrder];
    let mut _59: &[state::obligation::ObligationOrder; 2];
    let mut _60: !;
    let _61: ();
    let mut _62: &str;
    let _63: &str;
    let mut _64: &std::string::String;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[&str; 2];
    let _71: &[&str; 2];
    let _72: [&str; 2];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let mut _74: &[core::fmt::rt::Argument<'_>; 2];
    let _75: &[core::fmt::rt::Argument<'_>; 2];
    let _76: [core::fmt::rt::Argument<'_>; 2];
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &usize;
    let _79: &usize;
    let _80: usize;
    let mut _81: &[state::obligation::ObligationOrder];
    let mut _82: &[state::obligation::ObligationOrder; 2];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &usize;
    let _85: &usize;
    let mut _86: anchor_lang::error::Error;
    let mut _87: anchor_lang::error::AnchorError;
    let mut _88: std::string::String;
    let mut _89: &LendingError;
    let _90: LendingError;
    let mut _91: u32;
    let mut _92: LendingError;
    let mut _93: std::string::String;
    let mut _94: &LendingError;
    let _95: LendingError;
    let mut _96: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _97: anchor_lang::error::ErrorOrigin;
    let mut _98: anchor_lang::error::Source;
    let mut _99: std::option::Option<anchor_lang::error::ComparedValues>;
    let _101: usize;
    let mut _102: usize;
    let mut _103: bool;
    let _104: ();
    let mut _105: bool;
    let mut _106: &state::obligation::ObligationOrder;
    let mut _107: bool;
    let mut _108: &state::obligation::ObligationOrder;
    let mut _109: bool;
    let mut _110: &state::lending_market::LendingMarket;
    let mut _111: !;
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::AnchorError;
    let mut _117: std::string::String;
    let mut _118: &LendingError;
    let _119: LendingError;
    let mut _120: u32;
    let mut _121: LendingError;
    let mut _122: std::string::String;
    let mut _123: &LendingError;
    let _124: LendingError;
    let mut _125: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _126: anchor_lang::error::ErrorOrigin;
    let mut _127: anchor_lang::error::Source;
    let mut _128: std::option::Option<anchor_lang::error::ComparedValues>;
    let _129: ();
    let mut _130: &str;
    let _131: &str;
    let mut _132: &std::string::String;
    let _133: &std::string::String;
    let _134: std::string::String;
    let mut _136: std::fmt::Arguments<'_>;
    let mut _137: &[&str];
    let mut _138: &[&str; 3];
    let _139: &[&str; 3];
    let _140: [&str; 3];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let mut _142: &[core::fmt::rt::Argument<'_>; 3];
    let _143: &[core::fmt::rt::Argument<'_>; 3];
    let _144: [core::fmt::rt::Argument<'_>; 3];
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &usize;
    let _147: &usize;
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &&mut state::obligation::ObligationOrder;
    let _150: &&mut state::obligation::ObligationOrder;
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &state::obligation::ObligationOrder;
    let _153: &state::obligation::ObligationOrder;
    let mut _154: state::obligation::ObligationOrder;
    let mut _155: ();
    let mut _162: &LendingError;
    let mut _163: &LendingError;
    let mut _164: &[&str; 2];
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug res => _25;
    }
    scope 6 {
        debug index => _52;
        let _67: std::string::String;
        let _100: &mut state::obligation::ObligationOrder;
        let mut _156: &LendingError;
        let mut _157: &LendingError;
        let mut _158: &[&str; 2];
        scope 7 {
            debug res => _67;
        }
        scope 8 {
            debug previous_order => _100;
            let _135: std::string::String;
            let mut _159: &[&str; 3];
            let mut _160: &LendingError;
            let mut _161: &LendingError;
            scope 9 {
                debug res => _135;
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        _7 = validate_order(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb68];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: ());
        _5 = _13;
        StorageDead(_13);
        _165 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_4;
        StorageLive(_17);
        _17 = &(*_2);
        _15 = obligation::ObligationOrder::is_supported_by(move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb69];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _167 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb61;
    }

    bb7: {
        switchInt(move _15) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _3;
        _52 = <usize as From<u8>>::from(move _53) -> [return: bb20, unwind continue];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _164 = const _;
        _29 = &(*_164);
        _28 = &(*_29);
        _27 = move _28 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_4;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_debug::<obligation::ObligationOrder>(move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_36);
        _34 = [move _35];
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = move _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_32);
        _26 = Arguments::<'_>::new_v1(move _27, move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_27);
        _25 = format(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_29);
        _24 = move _25;
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = <std::string::String as Deref>::deref(move _22) -> [return: bb13, unwind: bb67];
    }

    bb13: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = solana_program::log::sol_log(move _20) -> [return: bb14, unwind: bb67];
    }

    bb14: {
        StorageDead(_20);
        drop(_24) -> [return: bb15, unwind: bb68];
    }

    bb15: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _163 = const _;
        _41 = &(*_163);
        _40 = LendingError::name(move _41) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        _44 = LendingError::OrderConfigurationNotSupportedByObligation;
        _43 = <LendingError as Into<u32>>::into(move _44) -> [return: bb17, unwind: bb66];
    }

    bb17: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _162 = const _;
        _46 = &(*_162);
        _45 = <LendingError as ToString>::to_string(move _46) -> [return: bb18, unwind: bb66];
    }

    bb18: {
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 142_u32 };
        _49 = anchor_lang::error::ErrorOrigin::Source(move _50);
        StorageDead(_50);
        _48 = std::option::Option::<ErrorOrigin>::Some(move _49);
        StorageDead(_49);
        StorageLive(_51);
        _51 = std::option::Option::<ComparedValues>::None;
        _39 = anchor_lang::error::AnchorError { error_name: move _40, error_code_number: move _43, error_msg: move _45, error_origin: move _48, compared_values: move _51 };
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_40);
        _38 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _39) -> [return: bb19, unwind: bb68];
    }

    bb19: {
        StorageDead(_39);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _38);
        StorageDead(_38);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb61;
    }

    bb20: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _52;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &((*_2).25: [state::obligation::ObligationOrder; 2]);
        _58 = move _59 as &[state::obligation::ObligationOrder] (PointerCoercion(Unsize));
        StorageDead(_59);
        _57 = core::slice::<impl [obligation::ObligationOrder]>::len(move _58) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_58);
        _55 = Ge(move _56, move _57);
        switchInt(move _55) -> [0: bb35, otherwise: bb22];
    }

    bb22: {
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _158 = const _;
        _71 = &(*_158);
        _70 = &(*_71);
        _69 = move _70 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &((*_2).25: [state::obligation::ObligationOrder; 2]);
        _81 = move _82 as &[state::obligation::ObligationOrder] (PointerCoercion(Unsize));
        StorageDead(_82);
        _80 = core::slice::<impl [obligation::ObligationOrder]>::len(move _81) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _78) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_78);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_52;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _84) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_84);
        _76 = [move _77, move _83];
        StorageDead(_83);
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_74);
        _68 = Arguments::<'_>::new_v1(move _69, move _73) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_69);
        _67 = format(move _68) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_68);
        StorageDead(_85);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        _66 = move _67;
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = <std::string::String as Deref>::deref(move _64) -> [return: bb28, unwind: bb65];
    }

    bb28: {
        _62 = &(*_63);
        StorageDead(_64);
        _61 = solana_program::log::sol_log(move _62) -> [return: bb29, unwind: bb65];
    }

    bb29: {
        StorageDead(_62);
        drop(_66) -> [return: bb30, unwind: bb68];
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _157 = const _;
        _89 = &(*_157);
        _88 = LendingError::name(move _89) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        _92 = LendingError::OrderIndexOutOfBounds;
        _91 = <LendingError as Into<u32>>::into(move _92) -> [return: bb32, unwind: bb64];
    }

    bb32: {
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        _156 = const _;
        _94 = &(*_156);
        _93 = <LendingError as ToString>::to_string(move _94) -> [return: bb33, unwind: bb64];
    }

    bb33: {
        StorageDead(_94);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 152_u32 };
        _97 = anchor_lang::error::ErrorOrigin::Source(move _98);
        StorageDead(_98);
        _96 = std::option::Option::<ErrorOrigin>::Some(move _97);
        StorageDead(_97);
        StorageLive(_99);
        _99 = std::option::Option::<ComparedValues>::None;
        _87 = anchor_lang::error::AnchorError { error_name: move _88, error_code_number: move _91, error_msg: move _93, error_origin: move _96, compared_values: move _99 };
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_88);
        _86 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _87) -> [return: bb34, unwind: bb68];
    }

    bb34: {
        StorageDead(_87);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _86);
        StorageDead(_86);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb60;
    }

    bb35: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = const ();
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _52;
        _102 = Len(((*_2).25: [state::obligation::ObligationOrder; 2]));
        _103 = Lt(_101, _102);
        assert(move _103, "index out of bounds: the length is {} but the index is {}", move _102, _101) -> [success: bb36, unwind continue];
    }

    bb36: {
        _100 = &mut ((*_2).25: [state::obligation::ObligationOrder; 2])[_101];
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_100);
        _105 = obligation::ObligationOrder::is_active(move _106) -> [return: bb37, unwind continue];
    }

    bb37: {
        switchInt(move _105) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        StorageDead(_106);
        goto -> bb51;
    }

    bb39: {
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_4;
        _107 = obligation::ObligationOrder::is_active(move _108) -> [return: bb40, unwind continue];
    }

    bb40: {
        switchInt(move _107) -> [0: bb50, otherwise: bb41];
    }

    bb41: {
        StorageDead(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_1);
        _109 = state::lending_market::LendingMarket::is_obligation_order_creation_enabled(move _110) -> [return: bb42, unwind continue];
    }

    bb42: {
        switchInt(move _109) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        StorageDead(_110);
        goto -> bb51;
    }

    bb44: {
        StorageDead(_110);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = const "Creation of new orders is disabled by the market's configuration";
        _113 = &(*_114);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_113);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _161 = const _;
        _118 = &(*_161);
        _117 = LendingError::name(move _118) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_118);
        StorageLive(_120);
        StorageLive(_121);
        _121 = LendingError::OrderCreationDisabled;
        _120 = <LendingError as Into<u32>>::into(move _121) -> [return: bb47, unwind: bb63];
    }

    bb47: {
        StorageDead(_121);
        StorageLive(_122);
        StorageLive(_123);
        _160 = const _;
        _123 = &(*_160);
        _122 = <LendingError as ToString>::to_string(move _123) -> [return: bb48, unwind: bb63];
    }

    bb48: {
        StorageDead(_123);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 161_u32 };
        _126 = anchor_lang::error::ErrorOrigin::Source(move _127);
        StorageDead(_127);
        _125 = std::option::Option::<ErrorOrigin>::Some(move _126);
        StorageDead(_126);
        StorageLive(_128);
        _128 = std::option::Option::<ComparedValues>::None;
        _116 = anchor_lang::error::AnchorError { error_name: move _117, error_code_number: move _120, error_msg: move _122, error_origin: move _125, compared_values: move _128 };
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_117);
        _115 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _116) -> [return: bb49, unwind: bb68];
    }

    bb49: {
        StorageDead(_116);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _115);
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb60;
    }

    bb50: {
        StorageDead(_108);
        goto -> bb51;
    }

    bb51: {
        _104 = const ();
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _159 = const _;
        _139 = &(*_159);
        _138 = &(*_139);
        _137 = move _138 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_52;
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _146) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_100;
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_debug::<&mut obligation::ObligationOrder>(move _149) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_149);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_4;
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_debug::<obligation::ObligationOrder>(move _152) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_152);
        _144 = [move _145, move _148, move _151];
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = move _142 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_142);
        _136 = Arguments::<'_>::new_v1(move _137, move _141) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_141);
        StorageDead(_137);
        _135 = format(move _136) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_136);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_139);
        _134 = move _135;
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = <std::string::String as Deref>::deref(move _132) -> [return: bb57, unwind: bb62];
    }

    bb57: {
        _130 = &(*_131);
        StorageDead(_132);
        _129 = solana_program::log::sol_log(move _130) -> [return: bb58, unwind: bb62];
    }

    bb58: {
        StorageDead(_130);
        drop(_134) -> [return: bb59, unwind: bb68];
    }

    bb59: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageLive(_154);
        _154 = _4;
        (*_100) = move _154;
        StorageDead(_154);
        StorageLive(_155);
        _155 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _155);
        StorageDead(_155);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_52);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_52);
        goto -> bb61;
    }

    bb61: {
        return;
    }

    bb62 (cleanup): {
        drop(_134) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_117) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_88) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_66) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_40) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_24) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        resume;
    }

    bb69 (cleanup): {
        _169 = discriminant(_6);
        goto -> bb68;
    }
}
