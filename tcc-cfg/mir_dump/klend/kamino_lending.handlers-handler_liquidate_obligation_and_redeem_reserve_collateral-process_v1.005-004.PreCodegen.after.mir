// MIR for `handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_v1` after PreCodegen

fn handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_v1(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>>, _2: u64, _3: u64, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    debug min_acceptable_received_liquidity_amount => _3;
    debug max_allowed_ltv_override_percent => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let _6: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _8: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _17: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _24: bool;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let _26: anchor_lang::prelude::Pubkey;
    let mut _27: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let _29: anchor_lang::prelude::Pubkey;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _31: ();
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _33: std::result::Result<(), anchor_lang::error::Error>;
    let mut _34: &anchor_lang::prelude::AccountInfo<'_>;
    let _35: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _37: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 2];
    let _38: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 2];
    let _39: [(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 2];
    let mut _40: (anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
    let mut _41: anchor_lang::prelude::Pubkey;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _43: &state::reserve::Reserve;
    let _44: &state::reserve::Reserve;
    let mut _45: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _46: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _47: (anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
    let mut _48: anchor_lang::prelude::Pubkey;
    let mut _49: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _50: &state::reserve::Reserve;
    let _51: &state::reserve::Reserve;
    let mut _52: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _53: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let _55: &anchor_lang::prelude::Pubkey;
    let _56: anchor_lang::prelude::Pubkey;
    let mut _57: &anchor_lang::prelude::AccountInfo<'_>;
    let _58: anchor_lang::prelude::AccountInfo<'_>;
    let mut _59: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _60: &[state::reserve::ReserveFarmKind];
    let mut _61: &[state::reserve::ReserveFarmKind; 2];
    let _62: &[state::reserve::ReserveFarmKind; 2];
    let _63: [state::reserve::ReserveFarmKind; 2];
    let mut _64: state::reserve::ReserveFarmKind;
    let mut _65: state::reserve::ReserveFarmKind;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _71: ();
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _73: std::result::Result<(), anchor_lang::error::Error>;
    let mut _74: &anchor_lang::prelude::AccountInfo<'_>;
    let _75: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _76: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)];
    let mut _77: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 2];
    let _78: &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 2];
    let _79: [(anchor_lang::prelude::Pubkey, &state::reserve::Reserve); 2];
    let mut _80: (anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
    let mut _81: anchor_lang::prelude::Pubkey;
    let mut _82: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _83: &state::reserve::Reserve;
    let _84: &state::reserve::Reserve;
    let mut _85: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _86: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _87: (anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
    let mut _88: anchor_lang::prelude::Pubkey;
    let mut _89: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _90: &state::reserve::Reserve;
    let _91: &state::reserve::Reserve;
    let mut _92: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _93: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _94: &anchor_lang::prelude::Pubkey;
    let _95: &anchor_lang::prelude::Pubkey;
    let _96: anchor_lang::prelude::Pubkey;
    let mut _97: &anchor_lang::prelude::AccountInfo<'_>;
    let _98: anchor_lang::prelude::AccountInfo<'_>;
    let mut _99: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _100: &[state::reserve::ReserveFarmKind];
    let mut _101: &[state::reserve::ReserveFarmKind; 2];
    let _102: &[state::reserve::ReserveFarmKind; 2];
    let _103: [state::reserve::ReserveFarmKind; 2];
    let mut _104: state::reserve::ReserveFarmKind;
    let mut _105: state::reserve::ReserveFarmKind;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: &handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _112: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _113: u64;
    let mut _114: u64;
    let mut _115: u64;
    let mut _118: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _119: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _120: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _121: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _122: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _123: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _124: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _125: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _126: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _127: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _128: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _129: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _130: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _131: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    scope 1 {
        debug _reserve_one => _6;
        let _15: std::cell::Ref<'_, state::reserve::Reserve>;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _23: std::cell::Ref<'_, state::reserve::Reserve>;
        scope 6 {
            debug _reserve_two => _15;
            let _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _70: ();
            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _110: ();
            let mut _116: &[state::reserve::ReserveFarmKind; 2];
            let mut _117: &[state::reserve::ReserveFarmKind; 2];
            scope 11 {
                debug residual => _67;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _70;
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _107;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _110;
                scope 18 {
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _118 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _9 = &((*_118).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = move ((_7 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _6 = move _14;
        StorageDead(_14);
        _132 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _119 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _18 = &((*_119).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _18) -> [return: bb7, unwind: bb54];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _146 = discriminant(_7);
        StorageDead(_7);
        goto -> bb49;
    }

    bb7: {
        StorageDead(_18);
        _16 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb8, unwind: bb54];
    }

    bb8: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_16 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _15 = move _23;
        StorageDead(_23);
        _134 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _120 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _27 = &((*_120).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _26 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _27) -> [return: bb12, unwind: bb53];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _144 = discriminant(_16);
        StorageDead(_16);
        goto -> bb48;
    }

    bb12: {
        _25 = &_26;
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _121 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _30 = &((*_121).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _29 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _30) -> [return: bb13, unwind: bb53];
    }

    bb13: {
        _28 = &_29;
        StorageDead(_30);
        _24 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _25, move _28) -> [return: bb14, unwind: bb53];
    }

    bb14: {
        switchInt(move _24) -> [0: bb28, otherwise: bb15];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _122 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _35 = &((*_122).19: anchor_lang::prelude::AccountInfo<'_>);
        _34 = &(*_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _123 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _42 = &((*_123).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _41 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _42) -> [return: bb16, unwind: bb53];
    }

    bb16: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_6;
        _45 = &(*_46);
        _44 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _45) -> [return: bb17, unwind: bb53];
    }

    bb17: {
        _43 = &(*_44);
        StorageDead(_45);
        _40 = (move _41, move _43);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _124 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _49 = &((*_124).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _48 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _49) -> [return: bb18, unwind: bb53];
    }

    bb18: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_6;
        _52 = &(*_53);
        _51 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _52) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        _50 = &(*_51);
        StorageDead(_52);
        _47 = (move _48, move _50);
        StorageDead(_50);
        StorageDead(_48);
        _39 = [move _40, move _47];
        StorageDead(_47);
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _125 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _59 = &((*_125).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _58 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _59) -> [return: bb20, unwind: bb53];
    }

    bb20: {
        _57 = &_58;
        StorageDead(_59);
        _56 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _57) -> [return: bb21, unwind: bb52];
    }

    bb21: {
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _116 = const _;
        _62 = &(*_116);
        _61 = &(*_62);
        _60 = move _61 as &[state::reserve::ReserveFarmKind] (PointerCoercion(Unsize));
        StorageDead(_61);
        _33 = refresh_ix_utils::check_refresh(move _34, move _36, move _54, move _60) -> [return: bb22, unwind: bb52];
    }

    bb22: {
        StorageDead(_60);
        StorageDead(_54);
        StorageDead(_36);
        StorageDead(_34);
        _32 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _33) -> [return: bb23, unwind: bb52];
    }

    bb23: {
        StorageDead(_33);
        _66 = discriminant(_32);
        switchInt(move _66) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_70);
        _70 = ((_32 as Continue).0: ());
        _31 = _70;
        StorageDead(_70);
        _136 = discriminant(_32);
        StorageDead(_62);
        drop(_58) -> [return: bb27, unwind: bb53];
    }

    bb25: {
        StorageLive(_67);
        _67 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _69) -> [return: bb26, unwind: bb57];
    }

    bb26: {
        StorageDead(_69);
        StorageDead(_67);
        _142 = discriminant(_32);
        StorageDead(_62);
        drop(_58) -> [return: bb46, unwind: bb53];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        _5 = const ();
        goto -> bb41;
    }

    bb28: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _126 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _75 = &((*_126).19: anchor_lang::prelude::AccountInfo<'_>);
        _74 = &(*_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _127 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _82 = &((*_127).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _81 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _82) -> [return: bb29, unwind: bb53];
    }

    bb29: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_6;
        _85 = &(*_86);
        _84 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _85) -> [return: bb30, unwind: bb53];
    }

    bb30: {
        _83 = &(*_84);
        StorageDead(_85);
        _80 = (move _81, move _83);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _128 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _89 = &((*_128).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _88 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _89) -> [return: bb31, unwind: bb53];
    }

    bb31: {
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_15;
        _92 = &(*_93);
        _91 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _92) -> [return: bb32, unwind: bb53];
    }

    bb32: {
        _90 = &(*_91);
        StorageDead(_92);
        _87 = (move _88, move _90);
        StorageDead(_90);
        StorageDead(_88);
        _79 = [move _80, move _87];
        StorageDead(_87);
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = move _77 as &[(anchor_lang::prelude::Pubkey, &state::reserve::Reserve)] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _129 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _99 = &((*_129).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _98 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _99) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        _97 = &_98;
        StorageDead(_99);
        _96 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _97) -> [return: bb34, unwind: bb51];
    }

    bb34: {
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _117 = const _;
        _102 = &(*_117);
        _101 = &(*_102);
        _100 = move _101 as &[state::reserve::ReserveFarmKind] (PointerCoercion(Unsize));
        StorageDead(_101);
        _73 = refresh_ix_utils::check_refresh(move _74, move _76, move _94, move _100) -> [return: bb35, unwind: bb51];
    }

    bb35: {
        StorageDead(_100);
        StorageDead(_94);
        StorageDead(_76);
        StorageDead(_74);
        _72 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _73) -> [return: bb36, unwind: bb51];
    }

    bb36: {
        StorageDead(_73);
        _106 = discriminant(_72);
        switchInt(move _106) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_110);
        _110 = ((_72 as Continue).0: ());
        _71 = _110;
        StorageDead(_110);
        _138 = discriminant(_72);
        StorageDead(_102);
        drop(_98) -> [return: bb40, unwind: bb53];
    }

    bb38: {
        StorageLive(_107);
        _107 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb39, unwind: bb56];
    }

    bb39: {
        StorageDead(_109);
        StorageDead(_107);
        _140 = discriminant(_72);
        StorageDead(_102);
        drop(_98) -> [return: bb45, unwind: bb53];
    }

    bb40: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        _5 = const ();
        goto -> bb41;
    }

    bb41: {
        StorageDead(_24);
        drop(_15) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        StorageDead(_15);
        drop(_6) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_111);
        _130 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _111 = &(*_130);
        StorageLive(_112);
        _131 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _112 = &(*_131);
        StorageLive(_113);
        _113 = _2;
        StorageLive(_114);
        _114 = _3;
        StorageLive(_115);
        _115 = _4;
        _0 = handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_impl(move _111, move _112, move _113, move _114, move _115) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb50;
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_24);
        drop(_15) -> [return: bb48, unwind: bb54];
    }

    bb48: {
        StorageDead(_15);
        drop(_6) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb50;
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_98) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_58) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_15) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_6) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        _148 = discriminant(_72);
        goto -> bb51;
    }

    bb57 (cleanup): {
        _149 = discriminant(_32);
        goto -> bb52;
    }

    bb58 (cleanup): {
        _150 = discriminant(_16);
        goto -> bb54;
    }

    bb59 (cleanup): {
        _151 = discriminant(_7);
        goto -> bb55;
    }
}
