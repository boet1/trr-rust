// MIR for `handlers::handler_refresh_reserve::<impl at programs\klend\src\handlers\handler_refresh_reserve.rs:65:10: 65:18>::to_account_metas` after PreCodegen

fn handlers::handler_refresh_reserve::<impl at programs\klend\src\handlers\handler_refresh_reserve.rs:65:10: 65:18>::to_account_metas(_1: &handlers::handler_refresh_reserve::RefreshReserve<'_>, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _8: std::option::Option<bool>;
    let _9: ();
    let mut _10: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _11: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _12: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _13: std::option::Option<bool>;
    let _14: ();
    let mut _15: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _16: isize;
    let _18: ();
    let mut _19: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _20: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: std::option::Option<bool>;
    let _23: ();
    let mut _24: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _25: anchor_lang::prelude::AccountMeta;
    let mut _26: anchor_lang::prelude::Pubkey;
    let mut _27: &anchor_lang::prelude::Pubkey;
    let _28: ();
    let mut _29: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _30: isize;
    let _32: ();
    let mut _33: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _34: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _35: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: std::option::Option<bool>;
    let _37: ();
    let mut _38: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _39: anchor_lang::prelude::AccountMeta;
    let mut _40: anchor_lang::prelude::Pubkey;
    let mut _41: &anchor_lang::prelude::Pubkey;
    let _42: ();
    let mut _43: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _44: isize;
    let _46: ();
    let mut _47: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _48: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _49: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: std::option::Option<bool>;
    let _51: ();
    let mut _52: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _53: anchor_lang::prelude::AccountMeta;
    let mut _54: anchor_lang::prelude::Pubkey;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let _56: ();
    let mut _57: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _58: isize;
    let _60: ();
    let mut _61: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _62: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _63: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _64: std::option::Option<bool>;
    let _65: ();
    let mut _66: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _67: anchor_lang::prelude::AccountMeta;
    let mut _68: anchor_lang::prelude::Pubkey;
    let mut _69: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
        scope 2 {
            debug pyth_oracle => _17;
            let _17: &anchor_lang::prelude::AccountInfo<'_>;
        }
        scope 3 {
            debug switchboard_price_oracle => _31;
            let _31: &anchor_lang::prelude::AccountInfo<'_>;
        }
        scope 4 {
            debug switchboard_twap_oracle => _45;
            let _45: &anchor_lang::prelude::AccountInfo<'_>;
        }
        scope 5 {
            debug scope_prices => _59;
            let _59: &anchor_lang::prelude::AccountInfo<'_>;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        StorageLive(_8);
        _8 = std::option::Option::<bool>::None;
        _6 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::ToAccountMetas>::to_account_metas(move _7, move _8) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _4 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _5, move _6) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _3;
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        StorageLive(_13);
        _13 = std::option::Option::<bool>::None;
        _11 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::ToAccountMetas>::to_account_metas(move _12, move _13) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        _9 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _10, move _11) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_1).2: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _16 = discriminant((*_15));
        switchInt(move _16) -> [1: bb6, otherwise: bb9];
    }

    bb6: {
        StorageLive(_17);
        _17 = &(((*_15) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _3;
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_17);
        StorageLive(_22);
        _22 = std::option::Option::<bool>::None;
        _20 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _21, move _22) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_21);
        _18 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _19, move _20) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _14 = const ();
        StorageDead(_17);
        goto -> bb12;
    }

    bb9: {
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut _3;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _26 = (*_27);
        _25 = anchor_lang::prelude::AccountMeta::new_readonly(move _26, const false) -> [return: bb10, unwind: bb34];
    }

    bb10: {
        StorageDead(_26);
        _23 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _24, move _25) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_27);
        StorageDead(_23);
        _14 = const ();
        goto -> bb12;
    }

    bb12: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_1).3: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _30 = discriminant((*_29));
        switchInt(move _30) -> [1: bb13, otherwise: bb16];
    }

    bb13: {
        StorageLive(_31);
        _31 = &(((*_29) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _3;
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_31);
        StorageLive(_36);
        _36 = std::option::Option::<bool>::None;
        _34 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _35, move _36) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_35);
        _32 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _33, move _34) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        _28 = const ();
        StorageDead(_31);
        goto -> bb19;
    }

    bb16: {
        StorageLive(_37);
        StorageLive(_38);
        _38 = &mut _3;
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _40 = (*_41);
        _39 = anchor_lang::prelude::AccountMeta::new_readonly(move _40, const false) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        StorageDead(_40);
        _37 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _38, move _39) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_41);
        StorageDead(_37);
        _28 = const ();
        goto -> bb19;
    }

    bb19: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &((*_1).4: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _44 = discriminant((*_43));
        switchInt(move _44) -> [1: bb20, otherwise: bb23];
    }

    bb20: {
        StorageLive(_45);
        _45 = &(((*_43) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut _3;
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_45);
        StorageLive(_50);
        _50 = std::option::Option::<bool>::None;
        _48 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _49, move _50) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_49);
        _46 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _47, move _48) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        _42 = const ();
        StorageDead(_45);
        goto -> bb26;
    }

    bb23: {
        StorageLive(_51);
        StorageLive(_52);
        _52 = &mut _3;
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _54 = (*_55);
        _53 = anchor_lang::prelude::AccountMeta::new_readonly(move _54, const false) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        StorageDead(_54);
        _51 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _52, move _53) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_55);
        StorageDead(_51);
        _42 = const ();
        goto -> bb26;
    }

    bb26: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &((*_1).5: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _58 = discriminant((*_57));
        switchInt(move _58) -> [1: bb27, otherwise: bb30];
    }

    bb27: {
        StorageLive(_59);
        _59 = &(((*_57) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _3;
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_59);
        StorageLive(_64);
        _64 = std::option::Option::<bool>::None;
        _62 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _63, move _64) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_64);
        StorageDead(_63);
        _60 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _61, move _62) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        _56 = const ();
        StorageDead(_59);
        goto -> bb33;
    }

    bb30: {
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut _3;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _68 = (*_69);
        _67 = anchor_lang::prelude::AccountMeta::new_readonly(move _68, const false) -> [return: bb31, unwind: bb34];
    }

    bb31: {
        StorageDead(_68);
        _65 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _66, move _67) -> [return: bb32, unwind: bb34];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_69);
        StorageDead(_65);
        _56 = const ();
        goto -> bb33;
    }

    bb33: {
        StorageDead(_57);
        StorageDead(_56);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
