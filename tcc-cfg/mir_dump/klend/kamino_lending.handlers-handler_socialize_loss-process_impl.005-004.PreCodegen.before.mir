// MIR for `handlers::handler_socialize_loss::process_impl` before PreCodegen

fn handlers::handler_socialize_loss::process_impl(_1: &handlers::handler_socialize_loss::SocializeLoss<'_>, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug remaining_accounts => _2;
    debug liquidity_amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: anchor_lang::prelude::Clock;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _6: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: anchor_lang::prelude::Clock;
    let mut _13: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _23: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _32: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _34: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let mut _35: &mut state::reserve::Reserve;
    let mut _36: &mut state::reserve::Reserve;
    let mut _37: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _38: &anchor_lang::prelude::Pubkey;
    let _39: &anchor_lang::prelude::Pubkey;
    let _40: anchor_lang::prelude::Pubkey;
    let mut _41: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _42: &mut state::obligation::Obligation;
    let mut _43: &mut state::obligation::Obligation;
    let mut _44: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _45: u64;
    let mut _46: u64;
    let mut _47: std::iter::Map<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_socialize_loss.rs:56:39: 56:42}>;
    let mut _48: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _49: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _50: {closure@programs\klend\src\handlers\handler_socialize_loss.rs:56:39: 56:42};
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _56: ();
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    scope 1 {
        debug clock => _4;
        let _12: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _21: std::cell::RefMut<'_, state::reserve::Reserve>;
        scope 6 {
            debug repay_reserve => _12;
            let _22: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
            let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _31: std::cell::RefMut<'_, state::obligation::Obligation>;
            scope 11 {
                debug obligation => _22;
                let _52: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _55: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 16 {
                    debug residual => _52;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _55;
                    scope 19 {
                    }
                }
            }
            scope 12 {
                debug residual => _28;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _31;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        StorageDead(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_5 as Continue).0: anchor_lang::prelude::Clock);
        _4 = move _11;
        StorageDead(_11);
        _57 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _15 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _71 = discriminant(_5);
        StorageDead(_5);
        goto -> bb31;
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_14 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _13 = move _21;
        StorageDead(_21);
        _12 = &mut _13;
        _59 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _25 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _26) -> [return: bb12, unwind: bb34];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _20) -> [return: bb11, unwind: bb38];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _69 = discriminant(_14);
        StorageDead(_14);
        goto -> bb30;
    }

    bb12: {
        StorageDead(_26);
        _24 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_31);
        _31 = move ((_24 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _23 = move _31;
        StorageDead(_31);
        _22 = &mut _23;
        _61 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_12);
        _36 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _37) -> [return: bb17, unwind: bb33];
    }

    bb15: {
        StorageLive(_28);
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb16, unwind: bb37];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_28);
        _67 = discriminant(_24);
        StorageDead(_24);
        goto -> bb29;
    }

    bb17: {
        _35 = &mut (*_36);
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _40 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _41) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &mut (*_22);
        _43 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _44) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _42 = &mut (*_43);
        StorageDead(_44);
        StorageLive(_45);
        _45 = _3;
        StorageLive(_46);
        _46 = (_4.0: u64);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_2);
        _48 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _49) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        StorageDead(_49);
        StorageLive(_50);
        _50 = {closure@programs\klend\src\handlers\handler_socialize_loss.rs:56:39: 56:42};
        _47 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_socialize_loss.rs:56:39: 56:42}>(move _48, move _50) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_48);
        _34 = lending_operations::socialize_loss::<'_, account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, std::iter::Map<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_socialize_loss.rs:56:39: 56:42}>>(move _35, move _38, move _42, move _45, move _46, move _47) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_38);
        StorageDead(_35);
        _33 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as Try>::branch(move _34) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        StorageDead(_34);
        _51 = discriminant(_33);
        switchInt(move _51) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_55);
        _55 = ((_33 as Continue).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _32 = _55;
        StorageDead(_55);
        _63 = discriminant(_33);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_56);
        _56 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _56);
        StorageDead(_56);
        drop(_23) -> [return: bb27, unwind: bb34];
    }

    bb25: {
        StorageLive(_52);
        _52 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _54) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_52);
        _65 = discriminant(_33);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        drop(_23) -> [return: bb29, unwind: bb34];
    }

    bb27: {
        StorageDead(_23);
        StorageDead(_22);
        drop(_13) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_4);
        goto -> bb32;
    }

    bb29: {
        StorageDead(_23);
        StorageDead(_22);
        drop(_13) -> [return: bb30, unwind: bb35];
    }

    bb30: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_4);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_23) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_13) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36 (cleanup): {
        _73 = discriminant(_33);
        goto -> bb33;
    }

    bb37 (cleanup): {
        _74 = discriminant(_24);
        goto -> bb34;
    }

    bb38 (cleanup): {
        _75 = discriminant(_14);
        goto -> bb35;
    }

    bb39 (cleanup): {
        _76 = discriminant(_5);
        goto -> bb35;
    }
}
