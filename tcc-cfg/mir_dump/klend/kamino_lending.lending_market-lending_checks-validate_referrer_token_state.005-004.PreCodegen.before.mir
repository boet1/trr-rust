// MIR for `lending_checks::validate_referrer_token_state` before PreCodegen

fn lending_checks::validate_referrer_token_state(_1: &anchor_lang::prelude::Pubkey, _2: &referral::ReferrerTokenState, _3: anchor_lang::prelude::Pubkey, _4: anchor_lang::prelude::Pubkey, _5: anchor_lang::prelude::Pubkey, _6: anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug referrer_token_state => _2;
    debug referrer_token_state_key => _3;
    debug mint => _4;
    debug owner_referrer => _5;
    debug reserve_key => _6;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _7: ();
    let mut _8: bool;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: bool;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let _15: anchor_lang::prelude::Pubkey;
    let mut _16: !;
    let mut _17: anchor_lang::error::Error;
    let mut _18: anchor_lang::error::AnchorError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: u32;
    let mut _23: LendingError;
    let mut _24: std::string::String;
    let mut _25: &LendingError;
    let _26: LendingError;
    let mut _27: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _28: anchor_lang::error::ErrorOrigin;
    let mut _29: anchor_lang::error::Source;
    let mut _30: std::option::Option<anchor_lang::error::ComparedValues>;
    let _31: ();
    let mut _32: bool;
    let mut _33: &anchor_lang::prelude::Pubkey;
    let mut _34: &anchor_lang::prelude::Pubkey;
    let mut _35: !;
    let mut _36: anchor_lang::error::Error;
    let mut _37: anchor_lang::error::AnchorError;
    let mut _38: std::string::String;
    let mut _39: &LendingError;
    let _40: LendingError;
    let mut _41: u32;
    let mut _42: LendingError;
    let mut _43: std::string::String;
    let mut _44: &LendingError;
    let _45: LendingError;
    let mut _46: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _47: anchor_lang::error::ErrorOrigin;
    let mut _48: anchor_lang::error::Source;
    let mut _49: std::option::Option<anchor_lang::error::ComparedValues>;
    let _50: anchor_lang::prelude::Pubkey;
    let mut _51: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _52: &[&[u8]];
    let mut _53: &[&[u8]; 4];
    let _54: &[&[u8]; 4];
    let _55: [&[u8]; 4];
    let mut _56: &[u8];
    let _57: &[u8];
    let mut _58: &[u8];
    let _59: &[u8];
    let mut _60: &anchor_lang::prelude::Pubkey;
    let mut _61: &[u8];
    let _62: &[u8];
    let mut _63: &anchor_lang::prelude::Pubkey;
    let mut _64: &[u8];
    let mut _65: &[u8; 1];
    let _66: &[u8; 1];
    let _67: [u8; 1];
    let mut _68: u8;
    let mut _69: std::result::Result<u8, std::num::TryFromIntError>;
    let mut _70: u64;
    let mut _71: &anchor_lang::prelude::Pubkey;
    let _72: ();
    let mut _73: bool;
    let mut _74: &anchor_lang::prelude::Pubkey;
    let mut _75: &anchor_lang::prelude::Pubkey;
    let mut _76: !;
    let mut _77: anchor_lang::error::Error;
    let mut _78: anchor_lang::error::AnchorError;
    let mut _79: std::string::String;
    let mut _80: &LendingError;
    let _81: LendingError;
    let mut _82: u32;
    let mut _83: LendingError;
    let mut _84: std::string::String;
    let mut _85: &LendingError;
    let _86: LendingError;
    let mut _87: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _88: anchor_lang::error::ErrorOrigin;
    let mut _89: anchor_lang::error::Source;
    let mut _90: std::option::Option<anchor_lang::error::ComparedValues>;
    let _91: ();
    let mut _92: bool;
    let mut _93: &anchor_lang::prelude::Pubkey;
    let mut _94: &anchor_lang::prelude::Pubkey;
    let mut _95: !;
    let mut _96: anchor_lang::error::Error;
    let mut _97: anchor_lang::error::AnchorError;
    let mut _98: std::string::String;
    let mut _99: &LendingError;
    let _100: LendingError;
    let mut _101: u32;
    let mut _102: LendingError;
    let mut _103: std::string::String;
    let mut _104: &LendingError;
    let _105: LendingError;
    let mut _106: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _107: anchor_lang::error::ErrorOrigin;
    let mut _108: anchor_lang::error::Source;
    let mut _109: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _110: ();
    let mut _111: &LendingError;
    let mut _112: &LendingError;
    let mut _113: &LendingError;
    let mut _114: &LendingError;
    scope 1 {
        debug referrer_token_state_valid_pda => _50;
        let mut _115: &LendingError;
        let mut _116: &LendingError;
        let mut _117: &LendingError;
        let mut _118: &LendingError;
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_2).1: anchor_lang::prelude::Pubkey);
        StorageLive(_10);
        StorageLive(_11);
        _11 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_11;
        _8 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb7;
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_2).0: anchor_lang::prelude::Pubkey);
        StorageLive(_14);
        StorageLive(_15);
        _15 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        _14 = &_15;
        _12 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _12) -> [0: bb12, otherwise: bb7];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _112 = const _;
        _20 = &(*_112);
        _19 = LendingError::name(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = LendingError::ReferrerAccountNotInitialized;
        _22 = <LendingError as Into<u32>>::into(move _23) -> [return: bb9, unwind: bb45];
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _111 = const _;
        _25 = &(*_111);
        _24 = <LendingError as ToString>::to_string(move _25) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 453_u32 };
        _28 = anchor_lang::error::ErrorOrigin::Source(move _29);
        StorageDead(_29);
        _27 = std::option::Option::<ErrorOrigin>::Some(move _28);
        StorageDead(_28);
        StorageLive(_30);
        _30 = std::option::Option::<ComparedValues>::None;
        _18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 };
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        _17 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _18) -> [return: bb11, unwind: bb46];
    }

    bb11: {
        StorageDead(_18);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _17);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb41;
    }

    bb12: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        _7 = const ();
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_2).1: anchor_lang::prelude::Pubkey);
        StorageLive(_34);
        _34 = &_4;
        _32 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _33, move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _32) -> [0: bb19, otherwise: bb14];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _114 = const _;
        _39 = &(*_114);
        _38 = LendingError::name(move _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        _42 = LendingError::ReferrerAccountMintMissmatch;
        _41 = <LendingError as Into<u32>>::into(move _42) -> [return: bb16, unwind: bb44];
    }

    bb16: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _113 = const _;
        _44 = &(*_113);
        _43 = <LendingError as ToString>::to_string(move _44) -> [return: bb17, unwind: bb44];
    }

    bb17: {
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 457_u32 };
        _47 = anchor_lang::error::ErrorOrigin::Source(move _48);
        StorageDead(_48);
        _46 = std::option::Option::<ErrorOrigin>::Some(move _47);
        StorageDead(_47);
        StorageLive(_49);
        _49 = std::option::Option::<ComparedValues>::None;
        _37 = anchor_lang::error::AnchorError { error_name: move _38, error_code_number: move _41, error_msg: move _43, error_origin: move _46, compared_values: move _49 };
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_38);
        _36 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _37) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        StorageDead(_37);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _36);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb41;
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = const ();
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const _;
        _56 = &(*_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _59 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _60) -> [return: bb20, unwind continue];
    }

    bb20: {
        _58 = &(*_59);
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_6;
        _62 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _63) -> [return: bb21, unwind continue];
    }

    bb21: {
        _61 = &(*_62);
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = ((*_2).4: u64);
        _69 = <u64 as TryInto<u8>>::try_into(move _70) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_70);
        _68 = std::result::Result::<u8, TryFromIntError>::unwrap(move _69) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_69);
        _67 = [move _68];
        StorageDead(_68);
        _66 = &_67;
        _65 = &(*_66);
        _64 = move _65 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_65);
        _55 = [move _56, move _58, move _61, move _64];
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = move _53 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_71);
        _71 = &(*_1);
        _51 = anchor_lang::prelude::Pubkey::create_program_address(move _52, move _71) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_71);
        StorageDead(_52);
        _50 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::unwrap(move _51) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_51);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_3;
        StorageLive(_75);
        _75 = &_50;
        _73 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _74, move _75) -> [return: bb26, unwind continue];
    }

    bb26: {
        switchInt(move _73) -> [0: bb32, otherwise: bb27];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _116 = const _;
        _80 = &(*_116);
        _79 = LendingError::name(move _80) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_80);
        StorageLive(_82);
        StorageLive(_83);
        _83 = LendingError::ReferrerAccountWrongAddress;
        _82 = <LendingError as Into<u32>>::into(move _83) -> [return: bb29, unwind: bb43];
    }

    bb29: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        _115 = const _;
        _85 = &(*_115);
        _84 = <LendingError as ToString>::to_string(move _85) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        StorageDead(_85);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 472_u32 };
        _88 = anchor_lang::error::ErrorOrigin::Source(move _89);
        StorageDead(_89);
        _87 = std::option::Option::<ErrorOrigin>::Some(move _88);
        StorageDead(_88);
        StorageLive(_90);
        _90 = std::option::Option::<ComparedValues>::None;
        _78 = anchor_lang::error::AnchorError { error_name: move _79, error_code_number: move _82, error_msg: move _84, error_origin: move _87, compared_values: move _90 };
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_79);
        _77 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _78) -> [return: bb31, unwind: bb46];
    }

    bb31: {
        StorageDead(_78);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _77);
        StorageDead(_77);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb40;
    }

    bb32: {
        StorageDead(_75);
        StorageDead(_74);
        _72 = const ();
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &((*_2).0: anchor_lang::prelude::Pubkey);
        StorageLive(_94);
        _94 = &_5;
        _92 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _93, move _94) -> [return: bb33, unwind continue];
    }

    bb33: {
        switchInt(move _92) -> [0: bb39, otherwise: bb34];
    }

    bb34: {
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _118 = const _;
        _99 = &(*_118);
        _98 = LendingError::name(move _99) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        _102 = LendingError::ReferrerAccountReferrerMissmatch;
        _101 = <LendingError as Into<u32>>::into(move _102) -> [return: bb36, unwind: bb42];
    }

    bb36: {
        StorageDead(_102);
        StorageLive(_103);
        StorageLive(_104);
        _117 = const _;
        _104 = &(*_117);
        _103 = <LendingError as ToString>::to_string(move _104) -> [return: bb37, unwind: bb42];
    }

    bb37: {
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 476_u32 };
        _107 = anchor_lang::error::ErrorOrigin::Source(move _108);
        StorageDead(_108);
        _106 = std::option::Option::<ErrorOrigin>::Some(move _107);
        StorageDead(_107);
        StorageLive(_109);
        _109 = std::option::Option::<ComparedValues>::None;
        _97 = anchor_lang::error::AnchorError { error_name: move _98, error_code_number: move _101, error_msg: move _103, error_origin: move _106, compared_values: move _109 };
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_98);
        _96 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _97) -> [return: bb38, unwind: bb46];
    }

    bb38: {
        StorageDead(_97);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _96);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_94);
        StorageDead(_93);
        _91 = const ();
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_110);
        _110 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _110);
        StorageDead(_110);
        StorageDead(_50);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_50);
        goto -> bb41;
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        drop(_98) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_79) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_38) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_19) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }
}
