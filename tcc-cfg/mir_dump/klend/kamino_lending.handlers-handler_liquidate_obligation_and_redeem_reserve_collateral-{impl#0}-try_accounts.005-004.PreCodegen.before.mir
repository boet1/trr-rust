// MIR for `handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18>::try_accounts` before PreCodegen

fn handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut LiquidateObligationAndRedeemReserveCollateralBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _113: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _128: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _143: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _158: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _173: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _188: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _189: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _192: &[u8];
    let mut _193: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _194: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _195: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _203: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _204: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _205: &anchor_lang::prelude::Pubkey;
    let mut _206: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _207: &[u8];
    let mut _208: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _209: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _210: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _218: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _219: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _220: &anchor_lang::prelude::Pubkey;
    let mut _221: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _222: &[u8];
    let mut _223: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _224: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _225: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _226: isize;
    let mut _228: !;
    let mut _229: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _233: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _234: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _235: &anchor_lang::prelude::Pubkey;
    let mut _236: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _237: &[u8];
    let mut _238: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _239: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _240: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _241: isize;
    let mut _243: !;
    let mut _244: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _248: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _249: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _250: &anchor_lang::prelude::Pubkey;
    let mut _251: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _252: &[u8];
    let mut _253: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _254: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _255: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _256: isize;
    let mut _258: !;
    let mut _259: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _263: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _264: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _265: &anchor_lang::prelude::Pubkey;
    let mut _266: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _267: &[u8];
    let mut _268: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _269: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _270: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _271: isize;
    let mut _273: !;
    let mut _274: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _277: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _278: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _279: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _280: &anchor_lang::prelude::Pubkey;
    let mut _281: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _282: &[u8];
    let mut _283: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _284: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _285: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _286: isize;
    let mut _288: !;
    let mut _289: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _292: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _293: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _294: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _295: &anchor_lang::prelude::Pubkey;
    let mut _296: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _297: &[u8];
    let mut _298: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _299: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _300: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _301: isize;
    let mut _303: !;
    let mut _304: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _306: ();
    let mut _307: bool;
    let mut _308: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _309: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _310: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _311: !;
    let mut _312: anchor_lang::error::Error;
    let mut _313: anchor_lang::error::Error;
    let mut _314: anchor_lang::error::ErrorCode;
    let _315: ();
    let mut _317: &state::obligation::Obligation;
    let mut _318: &std::cell::Ref<'_, state::obligation::Obligation>;
    let _319: std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _320: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _321: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _322: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _329: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _330: bool;
    let mut _331: &anchor_lang::prelude::Pubkey;
    let mut _332: &anchor_lang::prelude::Pubkey;
    let mut _333: !;
    let mut _334: anchor_lang::error::Error;
    let mut _335: anchor_lang::error::Error;
    let mut _336: anchor_lang::error::Error;
    let mut _337: anchor_lang::error::ErrorCode;
    let mut _338: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _339: anchor_lang::prelude::Pubkey;
    let mut _340: anchor_lang::prelude::Pubkey;
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _343: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _344: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _345: &[&[u8]];
    let mut _346: &[&[u8]; 3];
    let _347: &[&[u8]; 3];
    let _348: [&[u8]; 3];
    let mut _349: &[u8];
    let _350: &[u8];
    let mut _351: &[u8];
    let _352: &[u8];
    let mut _353: &anchor_lang::prelude::Pubkey;
    let _354: anchor_lang::prelude::Pubkey;
    let mut _355: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _356: &[u8];
    let _357: &[u8];
    let _358: &[u8];
    let mut _359: &[u8; 1];
    let _360: [u8; 1];
    let mut _361: u8;
    let mut _362: u64;
    let mut _363: &state::lending_market::LendingMarket;
    let mut _364: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _365: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _367: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _368: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _369: isize;
    let mut _371: !;
    let mut _372: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _374: std::ops::RangeFull;
    let mut _375: &anchor_lang::prelude::Pubkey;
    let _376: &&anchor_lang::prelude::Pubkey;
    let mut _377: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
    let mut _378: isize;
    let mut _380: !;
    let mut _381: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _383: ();
    let mut _384: bool;
    let mut _385: &anchor_lang::prelude::Pubkey;
    let _386: anchor_lang::prelude::Pubkey;
    let mut _387: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _388: &anchor_lang::prelude::Pubkey;
    let mut _389: !;
    let mut _390: anchor_lang::error::Error;
    let mut _391: anchor_lang::error::Error;
    let mut _392: anchor_lang::error::Error;
    let mut _393: anchor_lang::error::ErrorCode;
    let mut _394: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _395: anchor_lang::prelude::Pubkey;
    let mut _396: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _397: anchor_lang::prelude::Pubkey;
    let _398: ();
    let mut _399: bool;
    let mut _400: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _401: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _402: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _403: !;
    let mut _404: anchor_lang::error::Error;
    let mut _405: anchor_lang::error::Error;
    let mut _406: anchor_lang::error::ErrorCode;
    let _407: ();
    let mut _409: &state::reserve::Reserve;
    let mut _410: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _411: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _413: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _414: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _415: isize;
    let mut _417: !;
    let mut _418: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _421: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _422: bool;
    let mut _423: &anchor_lang::prelude::Pubkey;
    let mut _424: &anchor_lang::prelude::Pubkey;
    let mut _425: !;
    let mut _426: anchor_lang::error::Error;
    let mut _427: anchor_lang::error::Error;
    let mut _428: anchor_lang::error::Error;
    let mut _429: anchor_lang::error::ErrorCode;
    let mut _430: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _431: anchor_lang::prelude::Pubkey;
    let mut _432: anchor_lang::prelude::Pubkey;
    let _433: ();
    let mut _435: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _437: &state::reserve::Reserve;
    let mut _438: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _439: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _440: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _441: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _442: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _443: isize;
    let mut _445: !;
    let mut _446: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _448: bool;
    let mut _449: &anchor_lang::prelude::Pubkey;
    let mut _450: &anchor_lang::prelude::Pubkey;
    let mut _451: !;
    let mut _452: anchor_lang::error::Error;
    let mut _453: anchor_lang::error::Error;
    let mut _454: anchor_lang::error::Error;
    let mut _455: anchor_lang::error::ErrorCode;
    let mut _456: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _457: anchor_lang::prelude::Pubkey;
    let mut _458: anchor_lang::prelude::Pubkey;
    let _459: ();
    let mut _460: bool;
    let mut _461: &&anchor_lang::prelude::Pubkey;
    let _462: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _463: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _464: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _465: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _466: &&anchor_lang::prelude::Pubkey;
    let _467: &anchor_lang::prelude::Pubkey;
    let _468: anchor_lang::prelude::Pubkey;
    let mut _469: &anchor_lang::prelude::AccountInfo<'_>;
    let _470: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _471: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _472: !;
    let mut _473: anchor_lang::error::Error;
    let mut _474: anchor_lang::error::ErrorCode;
    let _475: ();
    let mut _476: bool;
    let mut _477: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _478: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _479: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _480: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _481: !;
    let mut _482: anchor_lang::error::Error;
    let mut _483: anchor_lang::error::Error;
    let mut _484: anchor_lang::error::ErrorCode;
    let _485: ();
    let mut _487: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _489: &state::reserve::Reserve;
    let mut _490: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _491: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _492: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _493: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _494: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _495: isize;
    let mut _497: !;
    let mut _498: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _500: bool;
    let mut _501: &anchor_lang::prelude::Pubkey;
    let mut _502: &anchor_lang::prelude::Pubkey;
    let mut _503: !;
    let mut _504: anchor_lang::error::Error;
    let mut _505: anchor_lang::error::Error;
    let mut _506: anchor_lang::error::Error;
    let mut _507: anchor_lang::error::ErrorCode;
    let mut _508: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _509: anchor_lang::prelude::Pubkey;
    let mut _510: anchor_lang::prelude::Pubkey;
    let _511: ();
    let mut _512: bool;
    let mut _513: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _514: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _515: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _516: !;
    let mut _517: anchor_lang::error::Error;
    let mut _518: anchor_lang::error::Error;
    let mut _519: anchor_lang::error::ErrorCode;
    let _520: ();
    let mut _522: &state::reserve::Reserve;
    let mut _523: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _524: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _525: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _526: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _527: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _528: isize;
    let mut _530: !;
    let mut _531: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _534: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _535: bool;
    let mut _536: &anchor_lang::prelude::Pubkey;
    let mut _537: &anchor_lang::prelude::Pubkey;
    let mut _538: !;
    let mut _539: anchor_lang::error::Error;
    let mut _540: anchor_lang::error::Error;
    let mut _541: anchor_lang::error::Error;
    let mut _542: anchor_lang::error::ErrorCode;
    let mut _543: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _544: anchor_lang::prelude::Pubkey;
    let mut _545: anchor_lang::prelude::Pubkey;
    let _546: ();
    let mut _548: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _550: &state::reserve::Reserve;
    let mut _551: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _552: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _553: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _554: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _555: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _556: isize;
    let mut _558: !;
    let mut _559: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _561: bool;
    let mut _562: &anchor_lang::prelude::Pubkey;
    let mut _563: &anchor_lang::prelude::Pubkey;
    let mut _564: !;
    let mut _565: anchor_lang::error::Error;
    let mut _566: anchor_lang::error::Error;
    let mut _567: anchor_lang::error::Error;
    let mut _568: anchor_lang::error::ErrorCode;
    let mut _569: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _570: anchor_lang::prelude::Pubkey;
    let mut _571: anchor_lang::prelude::Pubkey;
    let _572: ();
    let mut _573: bool;
    let mut _574: &&anchor_lang::prelude::Pubkey;
    let _575: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _576: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _577: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _578: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _579: &&anchor_lang::prelude::Pubkey;
    let _580: &anchor_lang::prelude::Pubkey;
    let _581: anchor_lang::prelude::Pubkey;
    let mut _582: &anchor_lang::prelude::AccountInfo<'_>;
    let _583: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _584: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _585: !;
    let mut _586: anchor_lang::error::Error;
    let mut _587: anchor_lang::error::ErrorCode;
    let _588: ();
    let mut _589: bool;
    let mut _590: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _591: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _592: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _593: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _594: !;
    let mut _595: anchor_lang::error::Error;
    let mut _596: anchor_lang::error::Error;
    let mut _597: anchor_lang::error::ErrorCode;
    let _598: ();
    let mut _600: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _602: &state::reserve::Reserve;
    let mut _603: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _604: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _605: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _606: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _607: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _608: isize;
    let mut _610: !;
    let mut _611: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _613: bool;
    let mut _614: &anchor_lang::prelude::Pubkey;
    let mut _615: &anchor_lang::prelude::Pubkey;
    let mut _616: !;
    let mut _617: anchor_lang::error::Error;
    let mut _618: anchor_lang::error::Error;
    let mut _619: anchor_lang::error::Error;
    let mut _620: anchor_lang::error::ErrorCode;
    let mut _621: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _622: anchor_lang::prelude::Pubkey;
    let mut _623: anchor_lang::prelude::Pubkey;
    let _624: ();
    let mut _625: bool;
    let mut _626: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _627: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _628: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _629: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _630: !;
    let mut _631: anchor_lang::error::Error;
    let mut _632: anchor_lang::error::Error;
    let mut _633: anchor_lang::error::ErrorCode;
    let _634: ();
    let mut _636: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _638: &state::reserve::Reserve;
    let mut _639: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _640: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _641: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _642: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _643: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _644: isize;
    let mut _646: !;
    let mut _647: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _649: bool;
    let mut _650: &anchor_lang::prelude::Pubkey;
    let mut _651: &anchor_lang::prelude::Pubkey;
    let mut _652: !;
    let mut _653: anchor_lang::error::Error;
    let mut _654: anchor_lang::error::Error;
    let mut _655: anchor_lang::error::Error;
    let mut _656: anchor_lang::error::ErrorCode;
    let mut _657: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _658: anchor_lang::prelude::Pubkey;
    let mut _659: anchor_lang::prelude::Pubkey;
    let _660: ();
    let mut _661: bool;
    let mut _662: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _663: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _664: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _665: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _666: !;
    let mut _667: anchor_lang::error::Error;
    let mut _668: anchor_lang::error::Error;
    let mut _669: anchor_lang::error::ErrorCode;
    let _670: ();
    let mut _672: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _674: &state::reserve::Reserve;
    let mut _675: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _676: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _677: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _678: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _679: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _680: isize;
    let mut _682: !;
    let mut _683: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _685: bool;
    let mut _686: &anchor_lang::prelude::Pubkey;
    let mut _687: &anchor_lang::prelude::Pubkey;
    let mut _688: !;
    let mut _689: anchor_lang::error::Error;
    let mut _690: anchor_lang::error::Error;
    let mut _691: anchor_lang::error::Error;
    let mut _692: anchor_lang::error::ErrorCode;
    let mut _693: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _694: anchor_lang::prelude::Pubkey;
    let mut _695: anchor_lang::prelude::Pubkey;
    let _696: ();
    let mut _697: bool;
    let mut _698: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _699: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _700: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _701: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _702: !;
    let mut _703: anchor_lang::error::Error;
    let mut _704: anchor_lang::error::Error;
    let mut _705: anchor_lang::error::ErrorCode;
    let _706: ();
    let mut _708: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _710: &state::reserve::Reserve;
    let mut _711: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _712: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _713: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _714: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _715: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _716: isize;
    let mut _718: !;
    let mut _719: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _721: bool;
    let mut _722: &anchor_lang::prelude::Pubkey;
    let mut _723: &anchor_lang::prelude::Pubkey;
    let mut _724: !;
    let mut _725: anchor_lang::error::Error;
    let mut _726: anchor_lang::error::Error;
    let mut _727: anchor_lang::error::Error;
    let mut _728: anchor_lang::error::ErrorCode;
    let mut _729: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _730: anchor_lang::prelude::Pubkey;
    let mut _731: anchor_lang::prelude::Pubkey;
    let _732: ();
    let mut _733: bool;
    let mut _734: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _735: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _736: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _737: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _738: !;
    let mut _739: anchor_lang::error::Error;
    let mut _740: anchor_lang::error::Error;
    let mut _741: anchor_lang::error::ErrorCode;
    let _742: ();
    let mut _743: bool;
    let mut _744: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _745: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _746: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _747: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _748: !;
    let mut _749: anchor_lang::error::Error;
    let mut _750: anchor_lang::error::Error;
    let mut _751: anchor_lang::error::ErrorCode;
    let _752: ();
    let mut _753: bool;
    let mut _754: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _755: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _756: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _757: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _758: !;
    let mut _759: anchor_lang::error::Error;
    let mut _760: anchor_lang::error::Error;
    let mut _761: anchor_lang::error::ErrorCode;
    let _762: ();
    let mut _764: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _766: bool;
    let mut _767: &anchor_lang::prelude::Pubkey;
    let mut _768: &anchor_lang::prelude::Pubkey;
    let mut _769: !;
    let mut _770: anchor_lang::error::Error;
    let mut _771: anchor_lang::error::Error;
    let mut _772: anchor_lang::error::Error;
    let mut _773: anchor_lang::error::ErrorCode;
    let mut _774: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _775: anchor_lang::prelude::Pubkey;
    let mut _776: anchor_lang::prelude::Pubkey;
    let mut _777: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _778: anchor_lang::prelude::Signer<'_>;
    let mut _779: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _780: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _781: anchor_lang::prelude::AccountInfo<'_>;
    let mut _782: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _783: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _784: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _785: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _786: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _787: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _788: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _789: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _790: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _791: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _792: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _793: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _794: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _795: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _796: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _797: anchor_lang::prelude::AccountInfo<'_>;
    let mut _798: &anchor_lang::prelude::Pubkey;
    let mut _799: bool;
    let mut _800: bool;
    let mut _801: bool;
    let mut _802: bool;
    let mut _803: bool;
    let mut _804: bool;
    let mut _805: bool;
    let mut _806: bool;
    let mut _807: bool;
    let mut _808: bool;
    let mut _809: bool;
    let mut _810: bool;
    let mut _811: bool;
    let mut _812: bool;
    let mut _813: bool;
    let mut _814: bool;
    let mut _815: bool;
    let mut _816: bool;
    let mut _817: bool;
    let mut _818: bool;
    let mut _819: bool;
    let mut _820: bool;
    let mut _821: bool;
    let mut _822: isize;
    let mut _823: isize;
    let mut _824: isize;
    let mut _825: isize;
    let mut _826: isize;
    let mut _827: isize;
    let mut _828: isize;
    let mut _829: isize;
    let mut _830: isize;
    let mut _831: isize;
    let mut _832: isize;
    let mut _833: isize;
    let mut _834: isize;
    let mut _835: isize;
    let mut _836: isize;
    let mut _837: isize;
    let mut _838: isize;
    let mut _839: isize;
    let mut _840: isize;
    let mut _841: isize;
    let mut _842: isize;
    let mut _843: isize;
    let mut _844: isize;
    let mut _845: isize;
    let mut _846: isize;
    let mut _847: isize;
    let mut _848: isize;
    let mut _849: isize;
    let mut _850: isize;
    let mut _851: isize;
    let mut _852: isize;
    let mut _853: isize;
    let mut _854: isize;
    let mut _855: isize;
    let mut _856: isize;
    let mut _857: isize;
    let mut _858: isize;
    let mut _859: isize;
    let mut _860: isize;
    let mut _861: isize;
    let mut _862: isize;
    let mut _863: isize;
    let mut _864: isize;
    let mut _865: isize;
    let mut _866: isize;
    let mut _867: isize;
    let mut _868: isize;
    let mut _869: isize;
    let mut _870: isize;
    let mut _871: isize;
    let mut _872: isize;
    let mut _873: isize;
    let mut _874: isize;
    let mut _875: isize;
    let mut _876: isize;
    let mut _877: isize;
    let mut _878: isize;
    let mut _879: isize;
    let mut _880: isize;
    let mut _881: isize;
    let mut _882: isize;
    let mut _883: isize;
    let mut _884: isize;
    let mut _885: isize;
    let mut _886: isize;
    let mut _887: isize;
    let mut _888: isize;
    let mut _889: isize;
    let mut _890: isize;
    let mut _891: isize;
    let mut _892: isize;
    let mut _893: isize;
    let mut _894: isize;
    let mut _895: isize;
    let mut _896: isize;
    let mut _897: isize;
    let mut _898: isize;
    let mut _899: isize;
    let mut _900: isize;
    let mut _901: isize;
    let mut _902: isize;
    let mut _903: isize;
    let mut _904: isize;
    let mut _905: isize;
    let mut _906: isize;
    let mut _907: isize;
    let mut _908: isize;
    let mut _909: isize;
    let mut _910: isize;
    let mut _911: isize;
    let mut _912: isize;
    let mut _913: isize;
    let mut _914: isize;
    let mut _915: isize;
    let mut _916: isize;
    let mut _917: isize;
    let mut _918: isize;
    let mut _919: isize;
    let mut _920: isize;
    let mut _921: isize;
    let mut _922: isize;
    let mut _923: isize;
    let mut _924: isize;
    let mut _925: isize;
    let mut _926: isize;
    let mut _927: isize;
    let mut _928: isize;
    let mut _929: isize;
    let mut _930: isize;
    let mut _931: isize;
    let mut _932: isize;
    let mut _933: isize;
    let mut _934: isize;
    let mut _935: isize;
    let mut _936: isize;
    let mut _937: isize;
    let mut _938: isize;
    let mut _939: isize;
    let mut _940: isize;
    let mut _941: isize;
    let mut _942: isize;
    let mut _943: isize;
    let mut _944: isize;
    let mut _945: isize;
    let mut _946: isize;
    let mut _947: isize;
    let mut _948: isize;
    let mut _949: isize;
    let mut _950: isize;
    let mut _951: isize;
    let mut _952: isize;
    let mut _953: isize;
    let mut _954: isize;
    let mut _955: isize;
    let mut _956: isize;
    let mut _957: isize;
    let mut _958: isize;
    let mut _959: isize;
    let mut _960: isize;
    let mut _961: isize;
    let mut _962: isize;
    let mut _963: isize;
    let mut _964: isize;
    let mut _965: isize;
    let mut _966: isize;
    let mut _967: isize;
    let mut _968: isize;
    let mut _969: isize;
    let mut _970: isize;
    let mut _971: isize;
    let mut _972: isize;
    let mut _973: isize;
    let mut _974: isize;
    let mut _975: isize;
    let mut _976: isize;
    let mut _977: isize;
    let mut _978: isize;
    let mut _979: isize;
    let mut _980: isize;
    let mut _981: isize;
    let mut _982: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _983: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _984: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _985: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _986: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _987: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _988: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug liquidator => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
        scope 6 {
            debug obligation => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
            scope 11 {
                debug lending_market => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug lending_market_authority => _51;
                    let _66: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                    scope 21 {
                        debug repay_reserve => _66;
                        let _81: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        scope 26 {
                            debug repay_reserve_liquidity_mint => _81;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 31 {
                                debug repay_reserve_liquidity_supply => _96;
                                let _111: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                                scope 36 {
                                    debug withdraw_reserve => _111;
                                    let _126: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    scope 41 {
                                        debug withdraw_reserve_liquidity_mint => _126;
                                        let _141: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        scope 46 {
                                            debug withdraw_reserve_collateral_mint => _141;
                                            let _156: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                            scope 51 {
                                                debug withdraw_reserve_collateral_supply => _156;
                                                let _171: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _185: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                scope 56 {
                                                    debug withdraw_reserve_liquidity_supply => _171;
                                                    let _186: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                    let _197: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _200: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                    scope 61 {
                                                        debug withdraw_reserve_liquidity_fee_receiver => _186;
                                                        let _201: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                        let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _215: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                        scope 66 {
                                                            debug user_source_liquidity => _201;
                                                            let _216: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                            let _227: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _230: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                            scope 71 {
                                                                debug user_destination_collateral => _216;
                                                                let _231: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                let _242: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _245: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                scope 76 {
                                                                    debug user_destination_liquidity => _231;
                                                                    let _246: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                                                    let _257: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _260: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                                                    scope 81 {
                                                                        debug collateral_token_program => _246;
                                                                        let _261: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                        let _272: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _275: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                        scope 86 {
                                                                            debug repay_liquidity_token_program => _261;
                                                                            let _276: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                            let _287: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _290: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                                            scope 91 {
                                                                                debug withdraw_liquidity_token_program => _276;
                                                                                let _291: anchor_lang::prelude::AccountInfo<'_>;
                                                                                let _302: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _305: anchor_lang::prelude::AccountInfo<'_>;
                                                                                scope 96 {
                                                                                    debug instruction_sysvar_account => _291;
                                                                                    let _316: anchor_lang::prelude::Pubkey;
                                                                                    let _324: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _327: std::cell::Ref<'_, state::obligation::Obligation>;
                                                                                    let _341: anchor_lang::prelude::Pubkey;
                                                                                    let _370: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _373: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                                                                    let _379: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _382: anchor_lang::prelude::Pubkey;
                                                                                    scope 101 {
                                                                                        debug my_key => _316;
                                                                                        let _328: anchor_lang::prelude::Pubkey;
                                                                                        scope 106 {
                                                                                            debug target_key => _328;
                                                                                        }
                                                                                    }
                                                                                    scope 102 {
                                                                                        debug residual => _324;
                                                                                        scope 103 {
                                                                                        }
                                                                                    }
                                                                                    scope 104 {
                                                                                        debug val => _327;
                                                                                        scope 105 {
                                                                                        }
                                                                                    }
                                                                                    scope 107 {
                                                                                        debug __pda_address => _341;
                                                                                        let _408: anchor_lang::prelude::Pubkey;
                                                                                        let _416: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _419: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                        let _434: anchor_lang::prelude::Pubkey;
                                                                                        let _486: anchor_lang::prelude::Pubkey;
                                                                                        let _521: anchor_lang::prelude::Pubkey;
                                                                                        let _529: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _532: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                        let _547: anchor_lang::prelude::Pubkey;
                                                                                        let _599: anchor_lang::prelude::Pubkey;
                                                                                        let _635: anchor_lang::prelude::Pubkey;
                                                                                        let _671: anchor_lang::prelude::Pubkey;
                                                                                        let _707: anchor_lang::prelude::Pubkey;
                                                                                        let _763: anchor_lang::prelude::Pubkey;
                                                                                        scope 116 {
                                                                                            debug my_key => _408;
                                                                                            let _420: anchor_lang::prelude::Pubkey;
                                                                                            scope 121 {
                                                                                                debug target_key => _420;
                                                                                            }
                                                                                        }
                                                                                        scope 117 {
                                                                                            debug residual => _416;
                                                                                            scope 118 {
                                                                                            }
                                                                                        }
                                                                                        scope 119 {
                                                                                            debug val => _419;
                                                                                            scope 120 {
                                                                                            }
                                                                                        }
                                                                                        scope 122 {
                                                                                            debug actual => _434;
                                                                                            let _436: anchor_lang::prelude::Pubkey;
                                                                                            let _444: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _447: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                            scope 123 {
                                                                                                debug expected => _436;
                                                                                            }
                                                                                            scope 124 {
                                                                                                debug residual => _444;
                                                                                                scope 125 {
                                                                                                }
                                                                                            }
                                                                                            scope 126 {
                                                                                                debug val => _447;
                                                                                                scope 127 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 128 {
                                                                                            debug actual => _486;
                                                                                            let _488: anchor_lang::prelude::Pubkey;
                                                                                            let _496: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _499: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                            scope 129 {
                                                                                                debug expected => _488;
                                                                                            }
                                                                                            scope 130 {
                                                                                                debug residual => _496;
                                                                                                scope 131 {
                                                                                                }
                                                                                            }
                                                                                            scope 132 {
                                                                                                debug val => _499;
                                                                                                scope 133 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 134 {
                                                                                            debug my_key => _521;
                                                                                            let _533: anchor_lang::prelude::Pubkey;
                                                                                            scope 139 {
                                                                                                debug target_key => _533;
                                                                                            }
                                                                                        }
                                                                                        scope 135 {
                                                                                            debug residual => _529;
                                                                                            scope 136 {
                                                                                            }
                                                                                        }
                                                                                        scope 137 {
                                                                                            debug val => _532;
                                                                                            scope 138 {
                                                                                            }
                                                                                        }
                                                                                        scope 140 {
                                                                                            debug actual => _547;
                                                                                            let _549: anchor_lang::prelude::Pubkey;
                                                                                            let _557: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _560: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                            scope 141 {
                                                                                                debug expected => _549;
                                                                                            }
                                                                                            scope 142 {
                                                                                                debug residual => _557;
                                                                                                scope 143 {
                                                                                                }
                                                                                            }
                                                                                            scope 144 {
                                                                                                debug val => _560;
                                                                                                scope 145 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 146 {
                                                                                            debug actual => _599;
                                                                                            let _601: anchor_lang::prelude::Pubkey;
                                                                                            let _609: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _612: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                            scope 147 {
                                                                                                debug expected => _601;
                                                                                            }
                                                                                            scope 148 {
                                                                                                debug residual => _609;
                                                                                                scope 149 {
                                                                                                }
                                                                                            }
                                                                                            scope 150 {
                                                                                                debug val => _612;
                                                                                                scope 151 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 152 {
                                                                                            debug actual => _635;
                                                                                            let _637: anchor_lang::prelude::Pubkey;
                                                                                            let _645: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _648: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                            scope 153 {
                                                                                                debug expected => _637;
                                                                                            }
                                                                                            scope 154 {
                                                                                                debug residual => _645;
                                                                                                scope 155 {
                                                                                                }
                                                                                            }
                                                                                            scope 156 {
                                                                                                debug val => _648;
                                                                                                scope 157 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 158 {
                                                                                            debug actual => _671;
                                                                                            let _673: anchor_lang::prelude::Pubkey;
                                                                                            let _681: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _684: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                            scope 159 {
                                                                                                debug expected => _673;
                                                                                            }
                                                                                            scope 160 {
                                                                                                debug residual => _681;
                                                                                                scope 161 {
                                                                                                }
                                                                                            }
                                                                                            scope 162 {
                                                                                                debug val => _684;
                                                                                                scope 163 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 164 {
                                                                                            debug actual => _707;
                                                                                            let _709: anchor_lang::prelude::Pubkey;
                                                                                            let _717: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _720: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                                            scope 165 {
                                                                                                debug expected => _709;
                                                                                            }
                                                                                            scope 166 {
                                                                                                debug residual => _717;
                                                                                                scope 167 {
                                                                                                }
                                                                                            }
                                                                                            scope 168 {
                                                                                                debug val => _720;
                                                                                                scope 169 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 170 {
                                                                                            debug actual => _763;
                                                                                            let _765: anchor_lang::prelude::Pubkey;
                                                                                            scope 171 {
                                                                                                debug expected => _765;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 108 {
                                                                                        debug residual => _370;
                                                                                        scope 109 {
                                                                                        }
                                                                                    }
                                                                                    scope 110 {
                                                                                        debug val => _373;
                                                                                        scope 111 {
                                                                                        }
                                                                                    }
                                                                                    scope 112 {
                                                                                        debug residual => _379;
                                                                                        scope 113 {
                                                                                        }
                                                                                    }
                                                                                    scope 114 {
                                                                                        debug val => _382;
                                                                                        scope 115 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 97 {
                                                                                    debug residual => _302;
                                                                                    scope 98 {
                                                                                    }
                                                                                }
                                                                                scope 99 {
                                                                                    debug val => _305;
                                                                                    scope 100 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 92 {
                                                                                debug residual => _287;
                                                                                scope 93 {
                                                                                }
                                                                            }
                                                                            scope 94 {
                                                                                debug val => _290;
                                                                                scope 95 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 87 {
                                                                            debug residual => _272;
                                                                            scope 88 {
                                                                            }
                                                                        }
                                                                        scope 89 {
                                                                            debug val => _275;
                                                                            scope 90 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 82 {
                                                                        debug residual => _257;
                                                                        scope 83 {
                                                                        }
                                                                    }
                                                                    scope 84 {
                                                                        debug val => _260;
                                                                        scope 85 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 77 {
                                                                    debug residual => _242;
                                                                    scope 78 {
                                                                    }
                                                                }
                                                                scope 79 {
                                                                    debug val => _245;
                                                                    scope 80 {
                                                                    }
                                                                }
                                                            }
                                                            scope 72 {
                                                                debug residual => _227;
                                                                scope 73 {
                                                                }
                                                            }
                                                            scope 74 {
                                                                debug val => _230;
                                                                scope 75 {
                                                                }
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug residual => _212;
                                                            scope 68 {
                                                            }
                                                        }
                                                        scope 69 {
                                                            debug val => _215;
                                                            scope 70 {
                                                            }
                                                        }
                                                    }
                                                    scope 62 {
                                                        debug residual => _197;
                                                        scope 63 {
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug val => _200;
                                                        scope 65 {
                                                        }
                                                    }
                                                }
                                                scope 57 {
                                                    debug residual => _182;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug val => _185;
                                                    scope 60 {
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _167;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _170;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 47 {
                                            debug residual => _152;
                                            scope 48 {
                                            }
                                        }
                                        scope 49 {
                                            debug val => _155;
                                            scope 50 {
                                            }
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _137;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _140;
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _122;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _125;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _819 = const false;
        _821 = const false;
        _820 = const false;
        _800 = const false;
        _799 = const false;
        _818 = const false;
        _817 = const false;
        _816 = const false;
        _815 = const false;
        _814 = const false;
        _813 = const false;
        _812 = const false;
        _811 = const false;
        _810 = const false;
        _809 = const false;
        _808 = const false;
        _807 = const false;
        _806 = const false;
        _805 = const false;
        _804 = const false;
        _803 = const false;
        _802 = const false;
        _801 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _9, move _15) -> [return: bb2, unwind: bb418];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb418];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _822 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb464];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _948 = discriminant(_7);
        StorageDead(_7);
        goto -> bb393;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _24, move _30) -> [return: bb9, unwind: bb418];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb418];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _21 = move _35;
        StorageDead(_35);
        _824 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb463];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _946 = discriminant(_22);
        StorageDead(_22);
        goto -> bb392;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _39, move _45) -> [return: bb15, unwind: bb418];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb418];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _36 = move _50;
        StorageDead(_50);
        _826 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb462];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _944 = discriminant(_37);
        StorageDead(_37);
        goto -> bb391;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _54, move _60) -> [return: bb21, unwind: bb418];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb418];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _828 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb417];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb461];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _942 = discriminant(_52);
        StorageDead(_52);
        goto -> bb390;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _69, move _75) -> [return: bb27, unwind: bb417];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb417];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _66 = move _80;
        StorageDead(_80);
        _830 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb417];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb460];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _940 = discriminant(_67);
        StorageDead(_67);
        goto -> bb389;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _84, move _90) -> [return: bb33, unwind: bb417];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb417];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _81 = move _95;
        StorageDead(_95);
        _832 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb416];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb459];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _938 = discriminant(_82);
        StorageDead(_82);
        goto -> bb388;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _99, move _105) -> [return: bb39, unwind: bb416];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb416];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _834 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb415];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb458];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _936 = discriminant(_97);
        StorageDead(_97);
        goto -> bb387;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _113 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _114, move _120) -> [return: bb45, unwind: bb415];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb415];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _111 = move _125;
        StorageDead(_125);
        _836 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb415];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb457];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _934 = discriminant(_112);
        StorageDead(_112);
        goto -> bb386;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _128 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _129, move _135) -> [return: bb51, unwind: bb415];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb415];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _126 = move _140;
        StorageDead(_140);
        _838 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb414];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb456];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _932 = discriminant(_127);
        StorageDead(_127);
        goto -> bb385;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _143 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _144, move _150) -> [return: bb57, unwind: bb414];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb414];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _141 = move _155;
        StorageDead(_155);
        _840 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb413];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb455];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _930 = discriminant(_142);
        StorageDead(_142);
        goto -> bb384;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _158 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _159, move _165) -> [return: bb63, unwind: bb413];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb413];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _156 = move _170;
        StorageDead(_170);
        _842 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_3);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb412];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb454];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _928 = discriminant(_157);
        StorageDead(_157);
        goto -> bb383;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _173 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _174, move _180) -> [return: bb69, unwind: bb412];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb412];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _171 = move _185;
        StorageDead(_185);
        _844 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_1);
        StorageLive(_191);
        _191 = &mut (*_2);
        StorageLive(_192);
        _192 = &(*_3);
        StorageLive(_193);
        _193 = &mut (*_4);
        StorageLive(_194);
        _194 = &mut (*_5);
        _189 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _190, move _191, move _192, move _193, move _194) -> [return: bb74, unwind: bb411];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb453];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _926 = discriminant(_172);
        StorageDead(_172);
        goto -> bb382;
    }

    bb74: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_195);
        _195 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _188 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _189, move _195) -> [return: bb75, unwind: bb411];
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_189);
        _187 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb76, unwind: bb411];
    }

    bb76: {
        StorageDead(_188);
        _196 = discriminant(_187);
        switchInt(move _196) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_200);
        _200 = move ((_187 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _186 = move _200;
        StorageDead(_200);
        _846 = discriminant(_187);
        StorageDead(_187);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_1);
        StorageLive(_206);
        _206 = &mut (*_2);
        StorageLive(_207);
        _207 = &(*_3);
        StorageLive(_208);
        _208 = &mut (*_4);
        StorageLive(_209);
        _209 = &mut (*_5);
        _204 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _205, move _206, move _207, move _208, move _209) -> [return: bb80, unwind: bb410];
    }

    bb78: {
        StorageLive(_197);
        _197 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _199) -> [return: bb79, unwind: bb452];
    }

    bb79: {
        StorageDead(_199);
        StorageDead(_197);
        _924 = discriminant(_187);
        StorageDead(_187);
        goto -> bb381;
    }

    bb80: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_210);
        _210 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _203 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _204, move _210) -> [return: bb81, unwind: bb410];
    }

    bb81: {
        StorageDead(_210);
        StorageDead(_204);
        _202 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _203) -> [return: bb82, unwind: bb410];
    }

    bb82: {
        StorageDead(_203);
        _211 = discriminant(_202);
        switchInt(move _211) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_215);
        _215 = move ((_202 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _201 = move _215;
        StorageDead(_215);
        _848 = discriminant(_202);
        StorageDead(_202);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &(*_1);
        StorageLive(_221);
        _221 = &mut (*_2);
        StorageLive(_222);
        _222 = &(*_3);
        StorageLive(_223);
        _223 = &mut (*_4);
        StorageLive(_224);
        _224 = &mut (*_5);
        _219 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _220, move _221, move _222, move _223, move _224) -> [return: bb86, unwind: bb409];
    }

    bb84: {
        StorageLive(_212);
        _212 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb85, unwind: bb451];
    }

    bb85: {
        StorageDead(_214);
        StorageDead(_212);
        _922 = discriminant(_202);
        StorageDead(_202);
        goto -> bb380;
    }

    bb86: {
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_225);
        _225 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _218 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _219, move _225) -> [return: bb87, unwind: bb409];
    }

    bb87: {
        StorageDead(_225);
        StorageDead(_219);
        _217 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _218) -> [return: bb88, unwind: bb409];
    }

    bb88: {
        StorageDead(_218);
        _226 = discriminant(_217);
        switchInt(move _226) -> [0: bb89, 1: bb90, otherwise: bb5];
    }

    bb89: {
        StorageLive(_230);
        _230 = move ((_217 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _216 = move _230;
        StorageDead(_230);
        _850 = discriminant(_217);
        StorageDead(_217);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &(*_1);
        StorageLive(_236);
        _236 = &mut (*_2);
        StorageLive(_237);
        _237 = &(*_3);
        StorageLive(_238);
        _238 = &mut (*_4);
        StorageLive(_239);
        _239 = &mut (*_5);
        _234 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _235, move _236, move _237, move _238, move _239) -> [return: bb92, unwind: bb408];
    }

    bb90: {
        StorageLive(_227);
        _227 = move ((_217 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_229);
        _229 = move _227;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _229) -> [return: bb91, unwind: bb450];
    }

    bb91: {
        StorageDead(_229);
        StorageDead(_227);
        _920 = discriminant(_217);
        StorageDead(_217);
        goto -> bb379;
    }

    bb92: {
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_240);
        _240 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _233 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _234, move _240) -> [return: bb93, unwind: bb408];
    }

    bb93: {
        StorageDead(_240);
        StorageDead(_234);
        _232 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _233) -> [return: bb94, unwind: bb408];
    }

    bb94: {
        StorageDead(_233);
        _241 = discriminant(_232);
        switchInt(move _241) -> [0: bb95, 1: bb96, otherwise: bb5];
    }

    bb95: {
        StorageLive(_245);
        _245 = move ((_232 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _231 = move _245;
        StorageDead(_245);
        _852 = discriminant(_232);
        StorageDead(_232);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &(*_1);
        StorageLive(_251);
        _251 = &mut (*_2);
        StorageLive(_252);
        _252 = &(*_3);
        StorageLive(_253);
        _253 = &mut (*_4);
        StorageLive(_254);
        _254 = &mut (*_5);
        _249 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _250, move _251, move _252, move _253, move _254) -> [return: bb98, unwind: bb407];
    }

    bb96: {
        StorageLive(_242);
        _242 = move ((_232 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_244);
        _244 = move _242;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _244) -> [return: bb97, unwind: bb449];
    }

    bb97: {
        StorageDead(_244);
        StorageDead(_242);
        _918 = discriminant(_232);
        StorageDead(_232);
        goto -> bb378;
    }

    bb98: {
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_255);
        _255 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _248 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _249, move _255) -> [return: bb99, unwind: bb407];
    }

    bb99: {
        StorageDead(_255);
        StorageDead(_249);
        _247 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error> as Try>::branch(move _248) -> [return: bb100, unwind: bb407];
    }

    bb100: {
        StorageDead(_248);
        _256 = discriminant(_247);
        switchInt(move _256) -> [0: bb101, 1: bb102, otherwise: bb5];
    }

    bb101: {
        StorageLive(_260);
        _260 = move ((_247 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _246 = move _260;
        StorageDead(_260);
        _854 = discriminant(_247);
        StorageDead(_247);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &(*_1);
        StorageLive(_266);
        _266 = &mut (*_2);
        StorageLive(_267);
        _267 = &(*_3);
        StorageLive(_268);
        _268 = &mut (*_4);
        StorageLive(_269);
        _269 = &mut (*_5);
        _264 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _265, move _266, move _267, move _268, move _269) -> [return: bb104, unwind: bb407];
    }

    bb102: {
        StorageLive(_257);
        _257 = move ((_247 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_259);
        _259 = move _257;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _259) -> [return: bb103, unwind: bb448];
    }

    bb103: {
        StorageDead(_259);
        StorageDead(_257);
        _916 = discriminant(_247);
        StorageDead(_247);
        goto -> bb377;
    }

    bb104: {
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_270);
        _270 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _263 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _264, move _270) -> [return: bb105, unwind: bb407];
    }

    bb105: {
        StorageDead(_270);
        StorageDead(_264);
        _262 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _263) -> [return: bb106, unwind: bb407];
    }

    bb106: {
        StorageDead(_263);
        _271 = discriminant(_262);
        switchInt(move _271) -> [0: bb107, 1: bb108, otherwise: bb5];
    }

    bb107: {
        StorageLive(_275);
        _275 = move ((_262 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _261 = move _275;
        StorageDead(_275);
        _856 = discriminant(_262);
        StorageDead(_262);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &(*_1);
        StorageLive(_281);
        _281 = &mut (*_2);
        StorageLive(_282);
        _282 = &(*_3);
        StorageLive(_283);
        _283 = &mut (*_4);
        StorageLive(_284);
        _284 = &mut (*_5);
        _279 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _280, move _281, move _282, move _283, move _284) -> [return: bb110, unwind: bb407];
    }

    bb108: {
        StorageLive(_272);
        _272 = move ((_262 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_274);
        _274 = move _272;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _274) -> [return: bb109, unwind: bb447];
    }

    bb109: {
        StorageDead(_274);
        StorageDead(_272);
        _914 = discriminant(_262);
        StorageDead(_262);
        goto -> bb376;
    }

    bb110: {
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        StorageLive(_285);
        _285 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _278 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _279, move _285) -> [return: bb111, unwind: bb407];
    }

    bb111: {
        StorageDead(_285);
        StorageDead(_279);
        _277 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _278) -> [return: bb112, unwind: bb407];
    }

    bb112: {
        StorageDead(_278);
        _286 = discriminant(_277);
        switchInt(move _286) -> [0: bb113, 1: bb114, otherwise: bb5];
    }

    bb113: {
        StorageLive(_290);
        _290 = move ((_277 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _276 = move _290;
        StorageDead(_290);
        _858 = discriminant(_277);
        StorageDead(_277);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &(*_1);
        StorageLive(_296);
        _296 = &mut (*_2);
        StorageLive(_297);
        _297 = &(*_3);
        StorageLive(_298);
        _298 = &mut (*_4);
        StorageLive(_299);
        _299 = &mut (*_5);
        _294 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _295, move _296, move _297, move _298, move _299) -> [return: bb116, unwind: bb407];
    }

    bb114: {
        StorageLive(_287);
        _287 = move ((_277 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_289);
        _289 = move _287;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _289) -> [return: bb115, unwind: bb446];
    }

    bb115: {
        StorageDead(_289);
        StorageDead(_287);
        _912 = discriminant(_277);
        StorageDead(_277);
        goto -> bb375;
    }

    bb116: {
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_295);
        StorageLive(_300);
        _300 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _293 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _294, move _300) -> [return: bb117, unwind: bb407];
    }

    bb117: {
        StorageDead(_300);
        StorageDead(_294);
        _292 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _293) -> [return: bb118, unwind: bb407];
    }

    bb118: {
        StorageDead(_293);
        _301 = discriminant(_292);
        switchInt(move _301) -> [0: bb119, 1: bb120, otherwise: bb5];
    }

    bb119: {
        StorageLive(_305);
        _305 = move ((_292 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _291 = move _305;
        StorageDead(_305);
        _860 = discriminant(_292);
        StorageDead(_292);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &_21;
        _309 = &(*_310);
        _308 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _309) -> [return: bb122, unwind: bb406];
    }

    bb120: {
        StorageLive(_302);
        _302 = move ((_292 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_304);
        _304 = move _302;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _304) -> [return: bb121, unwind: bb445];
    }

    bb121: {
        StorageDead(_304);
        StorageDead(_302);
        _910 = discriminant(_292);
        StorageDead(_292);
        goto -> bb374;
    }

    bb122: {
        StorageDead(_309);
        _307 = ((*_308).6: bool);
        switchInt(move _307) -> [0: bb123, otherwise: bb126];
    }

    bb123: {
        StorageDead(_310);
        StorageDead(_308);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = ConstraintMut;
        _313 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _314) -> [return: bb124, unwind: bb406];
    }

    bb124: {
        StorageDead(_314);
        _312 = anchor_lang::error::Error::with_account_name::<&str>(move _313, const "obligation") -> [return: bb125, unwind: bb406];
    }

    bb125: {
        StorageDead(_313);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _312);
        StorageDead(_312);
        StorageDead(_307);
        StorageDead(_306);
        goto -> bb373;
    }

    bb126: {
        StorageDead(_310);
        StorageDead(_308);
        _306 = const ();
        StorageDead(_307);
        StorageDead(_306);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &_21;
        _321 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load(move _322) -> [return: bb127, unwind: bb406];
    }

    bb127: {
        StorageDead(_322);
        _320 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _321) -> [return: bb128, unwind: bb406];
    }

    bb128: {
        _820 = const true;
        _821 = const true;
        StorageDead(_321);
        _323 = discriminant(_320);
        switchInt(move _323) -> [0: bb129, 1: bb130, otherwise: bb5];
    }

    bb129: {
        StorageLive(_327);
        _327 = move ((_320 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _319 = move _327;
        StorageDead(_327);
        _318 = &_319;
        _317 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _318) -> [return: bb132, unwind: bb405];
    }

    bb130: {
        StorageLive(_324);
        _324 = move ((_320 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_326);
        _326 = move _324;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _326) -> [return: bb131, unwind: bb444];
    }

    bb131: {
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_318);
        _908 = discriminant(_320);
        _820 = const false;
        _821 = const false;
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_317);
        goto -> bb372;
    }

    bb132: {
        StorageDead(_318);
        _316 = ((*_317).2: anchor_lang::prelude::Pubkey);
        drop(_319) -> [return: bb419, unwind: bb444];
    }

    bb133: {
        StorageDead(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = &_316;
        StorageLive(_332);
        _332 = &_328;
        _330 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _331, move _332) -> [return: bb134, unwind: bb406];
    }

    bb134: {
        switchInt(move _330) -> [0: bb139, otherwise: bb135];
    }

    bb135: {
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = ConstraintHasOne;
        _336 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _337) -> [return: bb136, unwind: bb406];
    }

    bb136: {
        StorageDead(_337);
        _335 = anchor_lang::error::Error::with_account_name::<&str>(move _336, const "obligation") -> [return: bb137, unwind: bb406];
    }

    bb137: {
        StorageDead(_336);
        StorageLive(_338);
        StorageLive(_339);
        _339 = _316;
        StorageLive(_340);
        _340 = _328;
        _338 = (move _339, move _340);
        StorageDead(_340);
        StorageDead(_339);
        _334 = anchor_lang::error::Error::with_pubkeys(move _335, move _338) -> [return: bb138, unwind: bb406];
    }

    bb138: {
        StorageDead(_338);
        StorageDead(_335);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _334);
        StorageDead(_334);
        StorageDead(_330);
        StorageDead(_328);
        goto -> bb372;
    }

    bb139: {
        StorageDead(_332);
        StorageDead(_331);
        _315 = const ();
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_316);
        StorageDead(_315);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _350 = const _;
        _349 = &(*_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = &_36;
        _354 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _355) -> [return: bb140, unwind: bb406];
    }

    bb140: {
        _353 = &_354;
        StorageDead(_355);
        _352 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _353) -> [return: bb141, unwind: bb406];
    }

    bb141: {
        _351 = &(*_352);
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &_36;
        _367 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _368) -> [return: bb142, unwind: bb406];
    }

    bb142: {
        StorageDead(_368);
        _366 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _367) -> [return: bb143, unwind: bb406];
    }

    bb143: {
        _799 = const true;
        _800 = const true;
        StorageDead(_367);
        _369 = discriminant(_366);
        switchInt(move _369) -> [0: bb144, 1: bb145, otherwise: bb5];
    }

    bb144: {
        StorageLive(_373);
        _373 = move ((_366 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _365 = move _373;
        StorageDead(_373);
        _364 = &_365;
        _363 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _364) -> [return: bb147, unwind: bb404];
    }

    bb145: {
        StorageLive(_370);
        _370 = move ((_366 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_372);
        _372 = move _370;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _372) -> [return: bb146, unwind: bb443];
    }

    bb146: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_343);
        goto -> bb430;
    }

    bb147: {
        StorageDead(_364);
        _362 = ((*_363).1: u64);
        _361 = move _362 as u8 (IntToInt);
        StorageDead(_362);
        _360 = [move _361];
        _359 = &_360;
        StorageDead(_361);
        StorageLive(_374);
        _374 = RangeFull;
        _358 = <[u8; 1] as Index<RangeFull>>::index(move _359, move _374) -> [return: bb148, unwind: bb404];
    }

    bb148: {
        StorageDead(_374);
        StorageDead(_359);
        _357 = &(*_358);
        _356 = &(*_357);
        _348 = [move _349, move _351, move _356];
        StorageDead(_356);
        StorageDead(_351);
        StorageDead(_349);
        _347 = &_348;
        _346 = &(*_347);
        _345 = move _346 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_346);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &_1;
        _798 = deref_copy (*_376);
        _375 = &(*_798);
        _344 = anchor_lang::prelude::Pubkey::create_program_address(move _345, move _375) -> [return: bb149, unwind: bb404];
    }

    bb149: {
        StorageDead(_375);
        StorageDead(_345);
        StorageLive(_377);
        _377 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18};
        _343 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18}>(move _344, move _377) -> [return: bb150, unwind: bb404];
    }

    bb150: {
        StorageDead(_377);
        StorageDead(_344);
        _342 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _343) -> [return: bb151, unwind: bb404];
    }

    bb151: {
        StorageDead(_343);
        _378 = discriminant(_342);
        switchInt(move _378) -> [0: bb152, 1: bb153, otherwise: bb5];
    }

    bb152: {
        StorageLive(_382);
        _382 = ((_342 as Continue).0: anchor_lang::prelude::Pubkey);
        _341 = _382;
        StorageDead(_382);
        _864 = discriminant(_342);
        StorageDead(_376);
        drop(_365) -> [return: bb420, unwind: bb443];
    }

    bb153: {
        StorageLive(_379);
        _379 = move ((_342 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_381);
        _381 = move _379;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _381) -> [return: bb154, unwind: bb442];
    }

    bb154: {
        StorageDead(_381);
        StorageDead(_379);
        _904 = discriminant(_342);
        StorageDead(_376);
        drop(_365) -> [return: bb430, unwind: bb443];
    }

    bb155: {
        _385 = &_386;
        StorageDead(_387);
        StorageLive(_388);
        _388 = &_341;
        _384 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _385, move _388) -> [return: bb156, unwind: bb406];
    }

    bb156: {
        switchInt(move _384) -> [0: bb162, otherwise: bb157];
    }

    bb157: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_385);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = ConstraintSeeds;
        _392 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _393) -> [return: bb158, unwind: bb406];
    }

    bb158: {
        StorageDead(_393);
        _391 = anchor_lang::error::Error::with_account_name::<&str>(move _392, const "lending_market_authority") -> [return: bb159, unwind: bb406];
    }

    bb159: {
        _819 = const true;
        StorageDead(_392);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = &_51;
        _395 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _396) -> [return: bb160, unwind: bb441];
    }

    bb160: {
        StorageDead(_396);
        StorageLive(_397);
        _397 = _341;
        _394 = (move _395, move _397);
        StorageDead(_397);
        StorageDead(_395);
        _819 = const false;
        _390 = anchor_lang::error::Error::with_pubkeys(move _391, move _394) -> [return: bb161, unwind: bb441];
    }

    bb161: {
        StorageDead(_394);
        _819 = const false;
        StorageDead(_391);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _390);
        StorageDead(_390);
        StorageDead(_384);
        StorageDead(_383);
        goto -> bb371;
    }

    bb162: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_385);
        _383 = const ();
        StorageDead(_384);
        StorageDead(_383);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = &_66;
        _401 = &(*_402);
        _400 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _401) -> [return: bb163, unwind: bb406];
    }

    bb163: {
        StorageDead(_401);
        _399 = ((*_400).6: bool);
        switchInt(move _399) -> [0: bb164, otherwise: bb167];
    }

    bb164: {
        StorageDead(_402);
        StorageDead(_400);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = ConstraintMut;
        _405 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _406) -> [return: bb165, unwind: bb406];
    }

    bb165: {
        StorageDead(_406);
        _404 = anchor_lang::error::Error::with_account_name::<&str>(move _405, const "repay_reserve") -> [return: bb166, unwind: bb406];
    }

    bb166: {
        StorageDead(_405);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _404);
        StorageDead(_404);
        StorageDead(_399);
        StorageDead(_398);
        goto -> bb371;
    }

    bb167: {
        StorageDead(_402);
        StorageDead(_400);
        _398 = const ();
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_66;
        _413 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _414) -> [return: bb168, unwind: bb406];
    }

    bb168: {
        StorageDead(_414);
        _412 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _413) -> [return: bb169, unwind: bb406];
    }

    bb169: {
        _817 = const true;
        _818 = const true;
        StorageDead(_413);
        _415 = discriminant(_412);
        switchInt(move _415) -> [0: bb170, 1: bb171, otherwise: bb5];
    }

    bb170: {
        StorageLive(_419);
        _419 = move ((_412 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _411 = move _419;
        StorageDead(_419);
        _410 = &_411;
        _409 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _410) -> [return: bb173, unwind: bb403];
    }

    bb171: {
        StorageLive(_416);
        _416 = move ((_412 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_418);
        _418 = move _416;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _418) -> [return: bb172, unwind: bb439];
    }

    bb172: {
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_410);
        _902 = discriminant(_412);
        _817 = const false;
        _818 = const false;
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_409);
        goto -> bb370;
    }

    bb173: {
        StorageDead(_410);
        _408 = ((*_409).2: anchor_lang::prelude::Pubkey);
        drop(_411) -> [return: bb421, unwind: bb439];
    }

    bb174: {
        StorageDead(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &_408;
        StorageLive(_424);
        _424 = &_420;
        _422 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _423, move _424) -> [return: bb175, unwind: bb406];
    }

    bb175: {
        switchInt(move _422) -> [0: bb180, otherwise: bb176];
    }

    bb176: {
        StorageDead(_424);
        StorageDead(_423);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = ConstraintHasOne;
        _428 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _429) -> [return: bb177, unwind: bb406];
    }

    bb177: {
        StorageDead(_429);
        _427 = anchor_lang::error::Error::with_account_name::<&str>(move _428, const "repay_reserve") -> [return: bb178, unwind: bb406];
    }

    bb178: {
        StorageDead(_428);
        StorageLive(_430);
        StorageLive(_431);
        _431 = _408;
        StorageLive(_432);
        _432 = _420;
        _430 = (move _431, move _432);
        StorageDead(_432);
        StorageDead(_431);
        _426 = anchor_lang::error::Error::with_pubkeys(move _427, move _430) -> [return: bb179, unwind: bb406];
    }

    bb179: {
        StorageDead(_430);
        StorageDead(_427);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _426);
        StorageDead(_426);
        StorageDead(_422);
        StorageDead(_420);
        goto -> bb370;
    }

    bb180: {
        StorageDead(_424);
        StorageDead(_423);
        _407 = const ();
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_408);
        StorageDead(_407);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _982 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _435 = &(*_982);
        _434 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _435) -> [return: bb181, unwind: bb406];
    }

    bb181: {
        StorageDead(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = &_66;
        _441 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _442) -> [return: bb182, unwind: bb406];
    }

    bb182: {
        StorageDead(_442);
        _440 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _441) -> [return: bb183, unwind: bb406];
    }

    bb183: {
        _815 = const true;
        _816 = const true;
        StorageDead(_441);
        _443 = discriminant(_440);
        switchInt(move _443) -> [0: bb184, 1: bb185, otherwise: bb5];
    }

    bb184: {
        StorageLive(_447);
        _447 = move ((_440 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _439 = move _447;
        StorageDead(_447);
        _438 = &_439;
        _437 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _438) -> [return: bb187, unwind: bb402];
    }

    bb185: {
        StorageLive(_444);
        _444 = move ((_440 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_446);
        _446 = move _444;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _446) -> [return: bb186, unwind: bb438];
    }

    bb186: {
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_438);
        _900 = discriminant(_440);
        _815 = const false;
        _816 = const false;
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_437);
        goto -> bb369;
    }

    bb187: {
        StorageDead(_438);
        _436 = (((*_437).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        drop(_439) -> [return: bb422, unwind: bb438];
    }

    bb188: {
        switchInt(move _448) -> [0: bb193, otherwise: bb189];
    }

    bb189: {
        StorageDead(_450);
        StorageDead(_449);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _455 = ConstraintAddress;
        _454 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _455) -> [return: bb190, unwind: bb406];
    }

    bb190: {
        StorageDead(_455);
        _453 = anchor_lang::error::Error::with_account_name::<&str>(move _454, const "repay_reserve_liquidity_mint") -> [return: bb191, unwind: bb406];
    }

    bb191: {
        StorageDead(_454);
        StorageLive(_456);
        StorageLive(_457);
        _457 = _434;
        StorageLive(_458);
        _458 = _436;
        _456 = (move _457, move _458);
        StorageDead(_458);
        StorageDead(_457);
        _452 = anchor_lang::error::Error::with_pubkeys(move _453, move _456) -> [return: bb192, unwind: bb406];
    }

    bb192: {
        StorageDead(_456);
        StorageDead(_453);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _452);
        StorageDead(_452);
        StorageDead(_448);
        goto -> bb369;
    }

    bb193: {
        StorageDead(_450);
        StorageDead(_449);
        _433 = const ();
        StorageDead(_448);
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &_81;
        _464 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _465) -> [return: bb194, unwind: bb406];
    }

    bb194: {
        _463 = &(*_464);
        StorageDead(_465);
        _462 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _463) -> [return: bb195, unwind: bb406];
    }

    bb195: {
        StorageDead(_463);
        _461 = &((*_462).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_261;
        _470 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _471) -> [return: bb196, unwind: bb406];
    }

    bb196: {
        _469 = &(*_470);
        StorageDead(_471);
        _468 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _469) -> [return: bb197, unwind: bb406];
    }

    bb197: {
        StorageDead(_469);
        _467 = &_468;
        _466 = &_467;
        _460 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _461, move _466) -> [return: bb198, unwind: bb406];
    }

    bb198: {
        switchInt(move _460) -> [0: bb201, otherwise: bb199];
    }

    bb199: {
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_461);
        StorageLive(_473);
        StorageLive(_474);
        _474 = ConstraintMintTokenProgram;
        _473 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _474) -> [return: bb200, unwind: bb406];
    }

    bb200: {
        StorageDead(_474);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _473);
        StorageDead(_473);
        StorageDead(_460);
        StorageDead(_459);
        goto -> bb371;
    }

    bb201: {
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_461);
        _459 = const ();
        StorageDead(_460);
        StorageDead(_459);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_96;
        _479 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _480) -> [return: bb202, unwind: bb406];
    }

    bb202: {
        _478 = &(*_479);
        StorageDead(_480);
        _477 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _478) -> [return: bb203, unwind: bb406];
    }

    bb203: {
        StorageDead(_478);
        _476 = ((*_477).6: bool);
        switchInt(move _476) -> [0: bb204, otherwise: bb207];
    }

    bb204: {
        StorageDead(_479);
        StorageDead(_477);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = ConstraintMut;
        _483 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _484) -> [return: bb205, unwind: bb406];
    }

    bb205: {
        StorageDead(_484);
        _482 = anchor_lang::error::Error::with_account_name::<&str>(move _483, const "repay_reserve_liquidity_supply") -> [return: bb206, unwind: bb406];
    }

    bb206: {
        StorageDead(_483);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _482);
        StorageDead(_482);
        StorageDead(_476);
        StorageDead(_475);
        goto -> bb371;
    }

    bb207: {
        StorageDead(_479);
        StorageDead(_477);
        _475 = const ();
        StorageDead(_476);
        StorageDead(_475);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _983 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _487 = &(*_983);
        _486 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _487) -> [return: bb208, unwind: bb406];
    }

    bb208: {
        StorageDead(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        _494 = &_66;
        _493 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _494) -> [return: bb209, unwind: bb406];
    }

    bb209: {
        StorageDead(_494);
        _492 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _493) -> [return: bb210, unwind: bb406];
    }

    bb210: {
        _813 = const true;
        _814 = const true;
        StorageDead(_493);
        _495 = discriminant(_492);
        switchInt(move _495) -> [0: bb211, 1: bb212, otherwise: bb5];
    }

    bb211: {
        StorageLive(_499);
        _499 = move ((_492 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _491 = move _499;
        StorageDead(_499);
        _490 = &_491;
        _489 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _490) -> [return: bb214, unwind: bb401];
    }

    bb212: {
        StorageLive(_496);
        _496 = move ((_492 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_498);
        _498 = move _496;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _498) -> [return: bb213, unwind: bb437];
    }

    bb213: {
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_490);
        _898 = discriminant(_492);
        _813 = const false;
        _814 = const false;
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_489);
        goto -> bb368;
    }

    bb214: {
        StorageDead(_490);
        _488 = (((*_489).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        drop(_491) -> [return: bb423, unwind: bb437];
    }

    bb215: {
        switchInt(move _500) -> [0: bb220, otherwise: bb216];
    }

    bb216: {
        StorageDead(_502);
        StorageDead(_501);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = ConstraintAddress;
        _506 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _507) -> [return: bb217, unwind: bb406];
    }

    bb217: {
        StorageDead(_507);
        _505 = anchor_lang::error::Error::with_account_name::<&str>(move _506, const "repay_reserve_liquidity_supply") -> [return: bb218, unwind: bb406];
    }

    bb218: {
        StorageDead(_506);
        StorageLive(_508);
        StorageLive(_509);
        _509 = _486;
        StorageLive(_510);
        _510 = _488;
        _508 = (move _509, move _510);
        StorageDead(_510);
        StorageDead(_509);
        _504 = anchor_lang::error::Error::with_pubkeys(move _505, move _508) -> [return: bb219, unwind: bb406];
    }

    bb219: {
        StorageDead(_508);
        StorageDead(_505);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _504);
        StorageDead(_504);
        StorageDead(_500);
        goto -> bb368;
    }

    bb220: {
        StorageDead(_502);
        StorageDead(_501);
        _485 = const ();
        StorageDead(_500);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_485);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &_111;
        _514 = &(*_515);
        _513 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _514) -> [return: bb221, unwind: bb406];
    }

    bb221: {
        StorageDead(_514);
        _512 = ((*_513).6: bool);
        switchInt(move _512) -> [0: bb222, otherwise: bb225];
    }

    bb222: {
        StorageDead(_515);
        StorageDead(_513);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _519 = ConstraintMut;
        _518 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _519) -> [return: bb223, unwind: bb406];
    }

    bb223: {
        StorageDead(_519);
        _517 = anchor_lang::error::Error::with_account_name::<&str>(move _518, const "withdraw_reserve") -> [return: bb224, unwind: bb406];
    }

    bb224: {
        StorageDead(_518);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _517);
        StorageDead(_517);
        StorageDead(_512);
        StorageDead(_511);
        goto -> bb371;
    }

    bb225: {
        StorageDead(_515);
        StorageDead(_513);
        _511 = const ();
        StorageDead(_512);
        StorageDead(_511);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = &_111;
        _526 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _527) -> [return: bb226, unwind: bb406];
    }

    bb226: {
        StorageDead(_527);
        _525 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _526) -> [return: bb227, unwind: bb406];
    }

    bb227: {
        _811 = const true;
        _812 = const true;
        StorageDead(_526);
        _528 = discriminant(_525);
        switchInt(move _528) -> [0: bb228, 1: bb229, otherwise: bb5];
    }

    bb228: {
        StorageLive(_532);
        _532 = move ((_525 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _524 = move _532;
        StorageDead(_532);
        _523 = &_524;
        _522 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _523) -> [return: bb231, unwind: bb400];
    }

    bb229: {
        StorageLive(_529);
        _529 = move ((_525 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_531);
        _531 = move _529;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _531) -> [return: bb230, unwind: bb436];
    }

    bb230: {
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_523);
        _896 = discriminant(_525);
        _811 = const false;
        _812 = const false;
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_522);
        goto -> bb367;
    }

    bb231: {
        StorageDead(_523);
        _521 = ((*_522).2: anchor_lang::prelude::Pubkey);
        drop(_524) -> [return: bb424, unwind: bb436];
    }

    bb232: {
        StorageDead(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = &_521;
        StorageLive(_537);
        _537 = &_533;
        _535 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _536, move _537) -> [return: bb233, unwind: bb406];
    }

    bb233: {
        switchInt(move _535) -> [0: bb238, otherwise: bb234];
    }

    bb234: {
        StorageDead(_537);
        StorageDead(_536);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _542 = ConstraintHasOne;
        _541 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _542) -> [return: bb235, unwind: bb406];
    }

    bb235: {
        StorageDead(_542);
        _540 = anchor_lang::error::Error::with_account_name::<&str>(move _541, const "withdraw_reserve") -> [return: bb236, unwind: bb406];
    }

    bb236: {
        StorageDead(_541);
        StorageLive(_543);
        StorageLive(_544);
        _544 = _521;
        StorageLive(_545);
        _545 = _533;
        _543 = (move _544, move _545);
        StorageDead(_545);
        StorageDead(_544);
        _539 = anchor_lang::error::Error::with_pubkeys(move _540, move _543) -> [return: bb237, unwind: bb406];
    }

    bb237: {
        StorageDead(_543);
        StorageDead(_540);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _539);
        StorageDead(_539);
        StorageDead(_535);
        StorageDead(_533);
        goto -> bb367;
    }

    bb238: {
        StorageDead(_537);
        StorageDead(_536);
        _520 = const ();
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_521);
        StorageDead(_520);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _984 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _548 = &(*_984);
        _547 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _548) -> [return: bb239, unwind: bb406];
    }

    bb239: {
        StorageDead(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = &_111;
        _554 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _555) -> [return: bb240, unwind: bb406];
    }

    bb240: {
        StorageDead(_555);
        _553 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _554) -> [return: bb241, unwind: bb406];
    }

    bb241: {
        _809 = const true;
        _810 = const true;
        StorageDead(_554);
        _556 = discriminant(_553);
        switchInt(move _556) -> [0: bb242, 1: bb243, otherwise: bb5];
    }

    bb242: {
        StorageLive(_560);
        _560 = move ((_553 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _552 = move _560;
        StorageDead(_560);
        _551 = &_552;
        _550 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _551) -> [return: bb245, unwind: bb399];
    }

    bb243: {
        StorageLive(_557);
        _557 = move ((_553 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_559);
        _559 = move _557;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _559) -> [return: bb244, unwind: bb435];
    }

    bb244: {
        StorageDead(_559);
        StorageDead(_557);
        StorageDead(_551);
        _894 = discriminant(_553);
        _809 = const false;
        _810 = const false;
        StorageDead(_553);
        StorageDead(_552);
        StorageDead(_550);
        goto -> bb366;
    }

    bb245: {
        StorageDead(_551);
        _549 = (((*_550).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        drop(_552) -> [return: bb425, unwind: bb435];
    }

    bb246: {
        switchInt(move _561) -> [0: bb251, otherwise: bb247];
    }

    bb247: {
        StorageDead(_563);
        StorageDead(_562);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = ConstraintAddress;
        _567 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _568) -> [return: bb248, unwind: bb406];
    }

    bb248: {
        StorageDead(_568);
        _566 = anchor_lang::error::Error::with_account_name::<&str>(move _567, const "withdraw_reserve_liquidity_mint") -> [return: bb249, unwind: bb406];
    }

    bb249: {
        StorageDead(_567);
        StorageLive(_569);
        StorageLive(_570);
        _570 = _547;
        StorageLive(_571);
        _571 = _549;
        _569 = (move _570, move _571);
        StorageDead(_571);
        StorageDead(_570);
        _565 = anchor_lang::error::Error::with_pubkeys(move _566, move _569) -> [return: bb250, unwind: bb406];
    }

    bb250: {
        StorageDead(_569);
        StorageDead(_566);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _565);
        StorageDead(_565);
        StorageDead(_561);
        goto -> bb366;
    }

    bb251: {
        StorageDead(_563);
        StorageDead(_562);
        _546 = const ();
        StorageDead(_561);
        StorageDead(_549);
        StorageDead(_547);
        StorageDead(_546);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = &_126;
        _577 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _578) -> [return: bb252, unwind: bb406];
    }

    bb252: {
        _576 = &(*_577);
        StorageDead(_578);
        _575 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _576) -> [return: bb253, unwind: bb406];
    }

    bb253: {
        StorageDead(_576);
        _574 = &((*_575).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _584 = &_276;
        _583 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _584) -> [return: bb254, unwind: bb406];
    }

    bb254: {
        _582 = &(*_583);
        StorageDead(_584);
        _581 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _582) -> [return: bb255, unwind: bb406];
    }

    bb255: {
        StorageDead(_582);
        _580 = &_581;
        _579 = &_580;
        _573 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _574, move _579) -> [return: bb256, unwind: bb406];
    }

    bb256: {
        switchInt(move _573) -> [0: bb259, otherwise: bb257];
    }

    bb257: {
        StorageDead(_583);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_577);
        StorageDead(_575);
        StorageDead(_574);
        StorageLive(_586);
        StorageLive(_587);
        _587 = ConstraintMintTokenProgram;
        _586 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _587) -> [return: bb258, unwind: bb406];
    }

    bb258: {
        StorageDead(_587);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _586);
        StorageDead(_586);
        StorageDead(_573);
        StorageDead(_572);
        goto -> bb371;
    }

    bb259: {
        StorageDead(_583);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_577);
        StorageDead(_575);
        StorageDead(_574);
        _572 = const ();
        StorageDead(_573);
        StorageDead(_572);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _593 = &_141;
        _592 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _593) -> [return: bb260, unwind: bb406];
    }

    bb260: {
        _591 = &(*_592);
        StorageDead(_593);
        _590 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _591) -> [return: bb261, unwind: bb406];
    }

    bb261: {
        StorageDead(_591);
        _589 = ((*_590).6: bool);
        switchInt(move _589) -> [0: bb262, otherwise: bb265];
    }

    bb262: {
        StorageDead(_592);
        StorageDead(_590);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        _597 = ConstraintMut;
        _596 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _597) -> [return: bb263, unwind: bb406];
    }

    bb263: {
        StorageDead(_597);
        _595 = anchor_lang::error::Error::with_account_name::<&str>(move _596, const "withdraw_reserve_collateral_mint") -> [return: bb264, unwind: bb406];
    }

    bb264: {
        StorageDead(_596);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _595);
        StorageDead(_595);
        StorageDead(_589);
        StorageDead(_588);
        goto -> bb371;
    }

    bb265: {
        StorageDead(_592);
        StorageDead(_590);
        _588 = const ();
        StorageDead(_589);
        StorageDead(_588);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        _985 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _600 = &(*_985);
        _599 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _600) -> [return: bb266, unwind: bb406];
    }

    bb266: {
        StorageDead(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        _607 = &_111;
        _606 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _607) -> [return: bb267, unwind: bb406];
    }

    bb267: {
        StorageDead(_607);
        _605 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _606) -> [return: bb268, unwind: bb406];
    }

    bb268: {
        _807 = const true;
        _808 = const true;
        StorageDead(_606);
        _608 = discriminant(_605);
        switchInt(move _608) -> [0: bb269, 1: bb270, otherwise: bb5];
    }

    bb269: {
        StorageLive(_612);
        _612 = move ((_605 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _604 = move _612;
        StorageDead(_612);
        _603 = &_604;
        _602 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _603) -> [return: bb272, unwind: bb398];
    }

    bb270: {
        StorageLive(_609);
        _609 = move ((_605 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_611);
        _611 = move _609;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _611) -> [return: bb271, unwind: bb434];
    }

    bb271: {
        StorageDead(_611);
        StorageDead(_609);
        StorageDead(_603);
        _892 = discriminant(_605);
        _807 = const false;
        _808 = const false;
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_602);
        goto -> bb365;
    }

    bb272: {
        StorageDead(_603);
        _601 = (((*_602).7: state::reserve::ReserveCollateral).0: anchor_lang::prelude::Pubkey);
        drop(_604) -> [return: bb426, unwind: bb434];
    }

    bb273: {
        switchInt(move _613) -> [0: bb278, otherwise: bb274];
    }

    bb274: {
        StorageDead(_615);
        StorageDead(_614);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        _620 = ConstraintAddress;
        _619 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _620) -> [return: bb275, unwind: bb406];
    }

    bb275: {
        StorageDead(_620);
        _618 = anchor_lang::error::Error::with_account_name::<&str>(move _619, const "withdraw_reserve_collateral_mint") -> [return: bb276, unwind: bb406];
    }

    bb276: {
        StorageDead(_619);
        StorageLive(_621);
        StorageLive(_622);
        _622 = _599;
        StorageLive(_623);
        _623 = _601;
        _621 = (move _622, move _623);
        StorageDead(_623);
        StorageDead(_622);
        _617 = anchor_lang::error::Error::with_pubkeys(move _618, move _621) -> [return: bb277, unwind: bb406];
    }

    bb277: {
        StorageDead(_621);
        StorageDead(_618);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _617);
        StorageDead(_617);
        StorageDead(_613);
        goto -> bb365;
    }

    bb278: {
        StorageDead(_615);
        StorageDead(_614);
        _598 = const ();
        StorageDead(_613);
        StorageDead(_601);
        StorageDead(_599);
        StorageDead(_598);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        _629 = &_156;
        _628 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _629) -> [return: bb279, unwind: bb406];
    }

    bb279: {
        _627 = &(*_628);
        StorageDead(_629);
        _626 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _627) -> [return: bb280, unwind: bb406];
    }

    bb280: {
        StorageDead(_627);
        _625 = ((*_626).6: bool);
        switchInt(move _625) -> [0: bb281, otherwise: bb284];
    }

    bb281: {
        StorageDead(_628);
        StorageDead(_626);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        _633 = ConstraintMut;
        _632 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _633) -> [return: bb282, unwind: bb406];
    }

    bb282: {
        StorageDead(_633);
        _631 = anchor_lang::error::Error::with_account_name::<&str>(move _632, const "withdraw_reserve_collateral_supply") -> [return: bb283, unwind: bb406];
    }

    bb283: {
        StorageDead(_632);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _631);
        StorageDead(_631);
        StorageDead(_625);
        StorageDead(_624);
        goto -> bb371;
    }

    bb284: {
        StorageDead(_628);
        StorageDead(_626);
        _624 = const ();
        StorageDead(_625);
        StorageDead(_624);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        _986 = (((_156.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _636 = &(*_986);
        _635 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _636) -> [return: bb285, unwind: bb406];
    }

    bb285: {
        StorageDead(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        _643 = &_111;
        _642 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _643) -> [return: bb286, unwind: bb406];
    }

    bb286: {
        StorageDead(_643);
        _641 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _642) -> [return: bb287, unwind: bb406];
    }

    bb287: {
        _805 = const true;
        _806 = const true;
        StorageDead(_642);
        _644 = discriminant(_641);
        switchInt(move _644) -> [0: bb288, 1: bb289, otherwise: bb5];
    }

    bb288: {
        StorageLive(_648);
        _648 = move ((_641 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _640 = move _648;
        StorageDead(_648);
        _639 = &_640;
        _638 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _639) -> [return: bb291, unwind: bb397];
    }

    bb289: {
        StorageLive(_645);
        _645 = move ((_641 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_647);
        _647 = move _645;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _647) -> [return: bb290, unwind: bb433];
    }

    bb290: {
        StorageDead(_647);
        StorageDead(_645);
        StorageDead(_639);
        _890 = discriminant(_641);
        _805 = const false;
        _806 = const false;
        StorageDead(_641);
        StorageDead(_640);
        StorageDead(_638);
        goto -> bb364;
    }

    bb291: {
        StorageDead(_639);
        _637 = (((*_638).7: state::reserve::ReserveCollateral).2: anchor_lang::prelude::Pubkey);
        drop(_640) -> [return: bb427, unwind: bb433];
    }

    bb292: {
        switchInt(move _649) -> [0: bb297, otherwise: bb293];
    }

    bb293: {
        StorageDead(_651);
        StorageDead(_650);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        _656 = ConstraintAddress;
        _655 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _656) -> [return: bb294, unwind: bb406];
    }

    bb294: {
        StorageDead(_656);
        _654 = anchor_lang::error::Error::with_account_name::<&str>(move _655, const "withdraw_reserve_collateral_supply") -> [return: bb295, unwind: bb406];
    }

    bb295: {
        StorageDead(_655);
        StorageLive(_657);
        StorageLive(_658);
        _658 = _635;
        StorageLive(_659);
        _659 = _637;
        _657 = (move _658, move _659);
        StorageDead(_659);
        StorageDead(_658);
        _653 = anchor_lang::error::Error::with_pubkeys(move _654, move _657) -> [return: bb296, unwind: bb406];
    }

    bb296: {
        StorageDead(_657);
        StorageDead(_654);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _653);
        StorageDead(_653);
        StorageDead(_649);
        goto -> bb364;
    }

    bb297: {
        StorageDead(_651);
        StorageDead(_650);
        _634 = const ();
        StorageDead(_649);
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_634);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        _665 = &_171;
        _664 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _665) -> [return: bb298, unwind: bb406];
    }

    bb298: {
        _663 = &(*_664);
        StorageDead(_665);
        _662 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _663) -> [return: bb299, unwind: bb406];
    }

    bb299: {
        StorageDead(_663);
        _661 = ((*_662).6: bool);
        switchInt(move _661) -> [0: bb300, otherwise: bb303];
    }

    bb300: {
        StorageDead(_664);
        StorageDead(_662);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        _669 = ConstraintMut;
        _668 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _669) -> [return: bb301, unwind: bb406];
    }

    bb301: {
        StorageDead(_669);
        _667 = anchor_lang::error::Error::with_account_name::<&str>(move _668, const "withdraw_reserve_liquidity_supply") -> [return: bb302, unwind: bb406];
    }

    bb302: {
        StorageDead(_668);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _667);
        StorageDead(_667);
        StorageDead(_661);
        StorageDead(_660);
        goto -> bb371;
    }

    bb303: {
        StorageDead(_664);
        StorageDead(_662);
        _660 = const ();
        StorageDead(_661);
        StorageDead(_660);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        _987 = (((_171.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _672 = &(*_987);
        _671 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _672) -> [return: bb304, unwind: bb406];
    }

    bb304: {
        StorageDead(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _679 = &_111;
        _678 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _679) -> [return: bb305, unwind: bb406];
    }

    bb305: {
        StorageDead(_679);
        _677 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _678) -> [return: bb306, unwind: bb406];
    }

    bb306: {
        _803 = const true;
        _804 = const true;
        StorageDead(_678);
        _680 = discriminant(_677);
        switchInt(move _680) -> [0: bb307, 1: bb308, otherwise: bb5];
    }

    bb307: {
        StorageLive(_684);
        _684 = move ((_677 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _676 = move _684;
        StorageDead(_684);
        _675 = &_676;
        _674 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _675) -> [return: bb310, unwind: bb396];
    }

    bb308: {
        StorageLive(_681);
        _681 = move ((_677 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_683);
        _683 = move _681;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _683) -> [return: bb309, unwind: bb432];
    }

    bb309: {
        StorageDead(_683);
        StorageDead(_681);
        StorageDead(_675);
        _888 = discriminant(_677);
        _803 = const false;
        _804 = const false;
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_674);
        goto -> bb363;
    }

    bb310: {
        StorageDead(_675);
        _673 = (((*_674).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        drop(_676) -> [return: bb428, unwind: bb432];
    }

    bb311: {
        switchInt(move _685) -> [0: bb316, otherwise: bb312];
    }

    bb312: {
        StorageDead(_687);
        StorageDead(_686);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        _692 = ConstraintAddress;
        _691 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _692) -> [return: bb313, unwind: bb406];
    }

    bb313: {
        StorageDead(_692);
        _690 = anchor_lang::error::Error::with_account_name::<&str>(move _691, const "withdraw_reserve_liquidity_supply") -> [return: bb314, unwind: bb406];
    }

    bb314: {
        StorageDead(_691);
        StorageLive(_693);
        StorageLive(_694);
        _694 = _671;
        StorageLive(_695);
        _695 = _673;
        _693 = (move _694, move _695);
        StorageDead(_695);
        StorageDead(_694);
        _689 = anchor_lang::error::Error::with_pubkeys(move _690, move _693) -> [return: bb315, unwind: bb406];
    }

    bb315: {
        StorageDead(_693);
        StorageDead(_690);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _689);
        StorageDead(_689);
        StorageDead(_685);
        goto -> bb363;
    }

    bb316: {
        StorageDead(_687);
        StorageDead(_686);
        _670 = const ();
        StorageDead(_685);
        StorageDead(_673);
        StorageDead(_671);
        StorageDead(_670);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        _701 = &_186;
        _700 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _701) -> [return: bb317, unwind: bb406];
    }

    bb317: {
        _699 = &(*_700);
        StorageDead(_701);
        _698 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _699) -> [return: bb318, unwind: bb406];
    }

    bb318: {
        StorageDead(_699);
        _697 = ((*_698).6: bool);
        switchInt(move _697) -> [0: bb319, otherwise: bb322];
    }

    bb319: {
        StorageDead(_700);
        StorageDead(_698);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        _705 = ConstraintMut;
        _704 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _705) -> [return: bb320, unwind: bb406];
    }

    bb320: {
        StorageDead(_705);
        _703 = anchor_lang::error::Error::with_account_name::<&str>(move _704, const "withdraw_reserve_liquidity_fee_receiver") -> [return: bb321, unwind: bb406];
    }

    bb321: {
        StorageDead(_704);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _703);
        StorageDead(_703);
        StorageDead(_697);
        StorageDead(_696);
        goto -> bb371;
    }

    bb322: {
        StorageDead(_700);
        StorageDead(_698);
        _696 = const ();
        StorageDead(_697);
        StorageDead(_696);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        _988 = (((_186.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _708 = &(*_988);
        _707 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _708) -> [return: bb323, unwind: bb406];
    }

    bb323: {
        StorageDead(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        _715 = &_111;
        _714 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _715) -> [return: bb324, unwind: bb406];
    }

    bb324: {
        StorageDead(_715);
        _713 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _714) -> [return: bb325, unwind: bb406];
    }

    bb325: {
        _801 = const true;
        _802 = const true;
        StorageDead(_714);
        _716 = discriminant(_713);
        switchInt(move _716) -> [0: bb326, 1: bb327, otherwise: bb5];
    }

    bb326: {
        StorageLive(_720);
        _720 = move ((_713 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _712 = move _720;
        StorageDead(_720);
        _711 = &_712;
        _710 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _711) -> [return: bb329, unwind: bb395];
    }

    bb327: {
        StorageLive(_717);
        _717 = move ((_713 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_719);
        _719 = move _717;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _719) -> [return: bb328, unwind: bb431];
    }

    bb328: {
        StorageDead(_719);
        StorageDead(_717);
        StorageDead(_711);
        _886 = discriminant(_713);
        _801 = const false;
        _802 = const false;
        StorageDead(_713);
        StorageDead(_712);
        StorageDead(_710);
        goto -> bb362;
    }

    bb329: {
        StorageDead(_711);
        _709 = (((*_710).5: state::reserve::ReserveLiquidity).2: anchor_lang::prelude::Pubkey);
        drop(_712) -> [return: bb429, unwind: bb431];
    }

    bb330: {
        switchInt(move _721) -> [0: bb335, otherwise: bb331];
    }

    bb331: {
        StorageDead(_723);
        StorageDead(_722);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        _728 = ConstraintAddress;
        _727 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _728) -> [return: bb332, unwind: bb406];
    }

    bb332: {
        StorageDead(_728);
        _726 = anchor_lang::error::Error::with_account_name::<&str>(move _727, const "withdraw_reserve_liquidity_fee_receiver") -> [return: bb333, unwind: bb406];
    }

    bb333: {
        StorageDead(_727);
        StorageLive(_729);
        StorageLive(_730);
        _730 = _707;
        StorageLive(_731);
        _731 = _709;
        _729 = (move _730, move _731);
        StorageDead(_731);
        StorageDead(_730);
        _725 = anchor_lang::error::Error::with_pubkeys(move _726, move _729) -> [return: bb334, unwind: bb406];
    }

    bb334: {
        StorageDead(_729);
        StorageDead(_726);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _725);
        StorageDead(_725);
        StorageDead(_721);
        goto -> bb362;
    }

    bb335: {
        StorageDead(_723);
        StorageDead(_722);
        _706 = const ();
        StorageDead(_721);
        StorageDead(_709);
        StorageDead(_707);
        StorageDead(_706);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        _737 = &_201;
        _736 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _737) -> [return: bb336, unwind: bb406];
    }

    bb336: {
        _735 = &(*_736);
        StorageDead(_737);
        _734 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _735) -> [return: bb337, unwind: bb406];
    }

    bb337: {
        StorageDead(_735);
        _733 = ((*_734).6: bool);
        switchInt(move _733) -> [0: bb338, otherwise: bb341];
    }

    bb338: {
        StorageDead(_736);
        StorageDead(_734);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = ConstraintMut;
        _740 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _741) -> [return: bb339, unwind: bb406];
    }

    bb339: {
        StorageDead(_741);
        _739 = anchor_lang::error::Error::with_account_name::<&str>(move _740, const "user_source_liquidity") -> [return: bb340, unwind: bb406];
    }

    bb340: {
        StorageDead(_740);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _739);
        StorageDead(_739);
        StorageDead(_733);
        StorageDead(_732);
        goto -> bb371;
    }

    bb341: {
        StorageDead(_736);
        StorageDead(_734);
        _732 = const ();
        StorageDead(_733);
        StorageDead(_732);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        _747 = &_216;
        _746 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _747) -> [return: bb342, unwind: bb406];
    }

    bb342: {
        _745 = &(*_746);
        StorageDead(_747);
        _744 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _745) -> [return: bb343, unwind: bb406];
    }

    bb343: {
        StorageDead(_745);
        _743 = ((*_744).6: bool);
        switchInt(move _743) -> [0: bb344, otherwise: bb347];
    }

    bb344: {
        StorageDead(_746);
        StorageDead(_744);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        _751 = ConstraintMut;
        _750 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _751) -> [return: bb345, unwind: bb406];
    }

    bb345: {
        StorageDead(_751);
        _749 = anchor_lang::error::Error::with_account_name::<&str>(move _750, const "user_destination_collateral") -> [return: bb346, unwind: bb406];
    }

    bb346: {
        StorageDead(_750);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _749);
        StorageDead(_749);
        StorageDead(_743);
        StorageDead(_742);
        goto -> bb371;
    }

    bb347: {
        StorageDead(_746);
        StorageDead(_744);
        _742 = const ();
        StorageDead(_743);
        StorageDead(_742);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &_231;
        _756 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _757) -> [return: bb348, unwind: bb406];
    }

    bb348: {
        _755 = &(*_756);
        StorageDead(_757);
        _754 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _755) -> [return: bb349, unwind: bb406];
    }

    bb349: {
        StorageDead(_755);
        _753 = ((*_754).6: bool);
        switchInt(move _753) -> [0: bb350, otherwise: bb353];
    }

    bb350: {
        StorageDead(_756);
        StorageDead(_754);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        _761 = ConstraintMut;
        _760 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _761) -> [return: bb351, unwind: bb406];
    }

    bb351: {
        StorageDead(_761);
        _759 = anchor_lang::error::Error::with_account_name::<&str>(move _760, const "user_destination_liquidity") -> [return: bb352, unwind: bb406];
    }

    bb352: {
        StorageDead(_760);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _759);
        StorageDead(_759);
        StorageDead(_753);
        StorageDead(_752);
        goto -> bb371;
    }

    bb353: {
        StorageDead(_756);
        StorageDead(_754);
        _752 = const ();
        StorageDead(_753);
        StorageDead(_752);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        _764 = &_291;
        _763 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _764) -> [return: bb354, unwind: bb406];
    }

    bb354: {
        StorageDead(_764);
        StorageLive(_765);
        _765 = <Instructions as SysvarId>::id() -> [return: bb355, unwind: bb406];
    }

    bb355: {
        StorageLive(_766);
        StorageLive(_767);
        _767 = &_763;
        StorageLive(_768);
        _768 = &_765;
        _766 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _767, move _768) -> [return: bb356, unwind: bb406];
    }

    bb356: {
        switchInt(move _766) -> [0: bb361, otherwise: bb357];
    }

    bb357: {
        StorageDead(_768);
        StorageDead(_767);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        _773 = ConstraintAddress;
        _772 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _773) -> [return: bb358, unwind: bb406];
    }

    bb358: {
        StorageDead(_773);
        _771 = anchor_lang::error::Error::with_account_name::<&str>(move _772, const "instruction_sysvar_account") -> [return: bb359, unwind: bb406];
    }

    bb359: {
        StorageDead(_772);
        StorageLive(_774);
        StorageLive(_775);
        _775 = _763;
        StorageLive(_776);
        _776 = _765;
        _774 = (move _775, move _776);
        StorageDead(_776);
        StorageDead(_775);
        _770 = anchor_lang::error::Error::with_pubkeys(move _771, move _774) -> [return: bb360, unwind: bb406];
    }

    bb360: {
        StorageDead(_774);
        StorageDead(_771);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Err(move _770);
        StorageDead(_770);
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_763);
        StorageDead(_762);
        goto -> bb371;
    }

    bb361: {
        StorageDead(_768);
        StorageDead(_767);
        _762 = const ();
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_763);
        StorageDead(_762);
        StorageLive(_777);
        StorageLive(_778);
        _778 = move _6;
        StorageLive(_779);
        _779 = move _21;
        StorageLive(_780);
        _780 = move _36;
        StorageLive(_781);
        _781 = move _51;
        StorageLive(_782);
        _782 = move _66;
        StorageLive(_783);
        _783 = move _81;
        StorageLive(_784);
        _784 = move _96;
        StorageLive(_785);
        _785 = move _111;
        StorageLive(_786);
        _786 = move _126;
        StorageLive(_787);
        _787 = move _141;
        StorageLive(_788);
        _788 = move _156;
        StorageLive(_789);
        _789 = move _171;
        StorageLive(_790);
        _790 = move _186;
        StorageLive(_791);
        _791 = move _201;
        StorageLive(_792);
        _792 = move _216;
        StorageLive(_793);
        _793 = move _231;
        StorageLive(_794);
        _794 = move _246;
        StorageLive(_795);
        _795 = move _261;
        StorageLive(_796);
        _796 = move _276;
        StorageLive(_797);
        _797 = move _291;
        _777 = handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral::<'_> { liquidator: move _778, obligation: move _779, lending_market: move _780, lending_market_authority: move _781, repay_reserve: move _782, repay_reserve_liquidity_mint: move _783, repay_reserve_liquidity_supply: move _784, withdraw_reserve: move _785, withdraw_reserve_liquidity_mint: move _786, withdraw_reserve_collateral_mint: move _787, withdraw_reserve_collateral_supply: move _788, withdraw_reserve_liquidity_supply: move _789, withdraw_reserve_liquidity_fee_receiver: move _790, user_source_liquidity: move _791, user_destination_collateral: move _792, user_destination_liquidity: move _793, collateral_token_program: move _794, repay_liquidity_token_program: move _795, withdraw_liquidity_token_program: move _796, instruction_sysvar_account: move _797 };
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_794);
        StorageDead(_793);
        StorageDead(_792);
        StorageDead(_791);
        StorageDead(_790);
        StorageDead(_789);
        StorageDead(_788);
        StorageDead(_787);
        StorageDead(_786);
        StorageDead(_785);
        StorageDead(_784);
        StorageDead(_783);
        StorageDead(_782);
        StorageDead(_781);
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_778);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>::Ok(move _777);
        StorageDead(_777);
        StorageDead(_341);
        StorageDead(_291);
        StorageDead(_276);
        StorageDead(_261);
        StorageDead(_246);
        StorageDead(_231);
        StorageDead(_216);
        StorageDead(_201);
        StorageDead(_186);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb394;
    }

    bb362: {
        StorageDead(_709);
        StorageDead(_707);
        StorageDead(_706);
        goto -> bb371;
    }

    bb363: {
        StorageDead(_673);
        StorageDead(_671);
        StorageDead(_670);
        goto -> bb371;
    }

    bb364: {
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_634);
        goto -> bb371;
    }

    bb365: {
        StorageDead(_601);
        StorageDead(_599);
        StorageDead(_598);
        goto -> bb371;
    }

    bb366: {
        StorageDead(_549);
        StorageDead(_547);
        StorageDead(_546);
        goto -> bb371;
    }

    bb367: {
        StorageDead(_521);
        StorageDead(_520);
        goto -> bb371;
    }

    bb368: {
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_485);
        goto -> bb371;
    }

    bb369: {
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb371;
    }

    bb370: {
        StorageDead(_408);
        StorageDead(_407);
        goto -> bb371;
    }

    bb371: {
        StorageDead(_341);
        goto -> bb373;
    }

    bb372: {
        StorageDead(_316);
        StorageDead(_315);
        goto -> bb373;
    }

    bb373: {
        drop(_291) -> [return: bb374, unwind: bb407];
    }

    bb374: {
        StorageDead(_291);
        goto -> bb375;
    }

    bb375: {
        StorageDead(_276);
        goto -> bb376;
    }

    bb376: {
        StorageDead(_261);
        goto -> bb377;
    }

    bb377: {
        StorageDead(_246);
        drop(_231) -> [return: bb378, unwind: bb408];
    }

    bb378: {
        StorageDead(_231);
        drop(_216) -> [return: bb379, unwind: bb409];
    }

    bb379: {
        StorageDead(_216);
        drop(_201) -> [return: bb380, unwind: bb410];
    }

    bb380: {
        StorageDead(_201);
        drop(_186) -> [return: bb381, unwind: bb411];
    }

    bb381: {
        StorageDead(_186);
        drop(_171) -> [return: bb382, unwind: bb412];
    }

    bb382: {
        StorageDead(_171);
        drop(_156) -> [return: bb383, unwind: bb413];
    }

    bb383: {
        StorageDead(_156);
        drop(_141) -> [return: bb384, unwind: bb414];
    }

    bb384: {
        StorageDead(_141);
        drop(_126) -> [return: bb385, unwind: bb415];
    }

    bb385: {
        StorageDead(_126);
        goto -> bb386;
    }

    bb386: {
        StorageDead(_111);
        drop(_96) -> [return: bb387, unwind: bb416];
    }

    bb387: {
        StorageDead(_96);
        drop(_81) -> [return: bb388, unwind: bb417];
    }

    bb388: {
        StorageDead(_81);
        goto -> bb389;
    }

    bb389: {
        StorageDead(_66);
        drop(_51) -> [return: bb390, unwind: bb418];
    }

    bb390: {
        StorageDead(_51);
        goto -> bb391;
    }

    bb391: {
        StorageDead(_36);
        goto -> bb392;
    }

    bb392: {
        StorageDead(_21);
        goto -> bb393;
    }

    bb393: {
        StorageDead(_6);
        goto -> bb394;
    }

    bb394: {
        return;
    }

    bb395 (cleanup): {
        drop(_712) -> [return: bb431, unwind terminate(cleanup)];
    }

    bb396 (cleanup): {
        drop(_676) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb397 (cleanup): {
        drop(_640) -> [return: bb433, unwind terminate(cleanup)];
    }

    bb398 (cleanup): {
        drop(_604) -> [return: bb434, unwind terminate(cleanup)];
    }

    bb399 (cleanup): {
        drop(_552) -> [return: bb435, unwind terminate(cleanup)];
    }

    bb400 (cleanup): {
        drop(_524) -> [return: bb436, unwind terminate(cleanup)];
    }

    bb401 (cleanup): {
        drop(_491) -> [return: bb437, unwind terminate(cleanup)];
    }

    bb402 (cleanup): {
        drop(_439) -> [return: bb438, unwind terminate(cleanup)];
    }

    bb403 (cleanup): {
        drop(_411) -> [return: bb439, unwind terminate(cleanup)];
    }

    bb404 (cleanup): {
        drop(_365) -> [return: bb443, unwind terminate(cleanup)];
    }

    bb405 (cleanup): {
        drop(_319) -> [return: bb444, unwind terminate(cleanup)];
    }

    bb406 (cleanup): {
        drop(_291) -> [return: bb407, unwind terminate(cleanup)];
    }

    bb407 (cleanup): {
        drop(_231) -> [return: bb408, unwind terminate(cleanup)];
    }

    bb408 (cleanup): {
        drop(_216) -> [return: bb409, unwind terminate(cleanup)];
    }

    bb409 (cleanup): {
        drop(_201) -> [return: bb410, unwind terminate(cleanup)];
    }

    bb410 (cleanup): {
        drop(_186) -> [return: bb411, unwind terminate(cleanup)];
    }

    bb411 (cleanup): {
        drop(_171) -> [return: bb412, unwind terminate(cleanup)];
    }

    bb412 (cleanup): {
        drop(_156) -> [return: bb413, unwind terminate(cleanup)];
    }

    bb413 (cleanup): {
        drop(_141) -> [return: bb414, unwind terminate(cleanup)];
    }

    bb414 (cleanup): {
        drop(_126) -> [return: bb415, unwind terminate(cleanup)];
    }

    bb415 (cleanup): {
        drop(_96) -> [return: bb416, unwind terminate(cleanup)];
    }

    bb416 (cleanup): {
        drop(_81) -> [return: bb417, unwind terminate(cleanup)];
    }

    bb417 (cleanup): {
        drop(_51) -> [return: bb418, unwind terminate(cleanup)];
    }

    bb418 (cleanup): {
        resume;
    }

    bb419: {
        _862 = discriminant(_320);
        _820 = const false;
        _821 = const false;
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_317);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &_36;
        _328 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _329) -> [return: bb133, unwind: bb406];
    }

    bb420: {
        _866 = discriminant(_366);
        _799 = const false;
        _800 = const false;
        StorageDead(_366);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_350);
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_342);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_51;
        _386 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _387) -> [return: bb155, unwind: bb406];
    }

    bb421: {
        _868 = discriminant(_412);
        _817 = const false;
        _818 = const false;
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_409);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_36;
        _420 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _421) -> [return: bb174, unwind: bb406];
    }

    bb422: {
        _870 = discriminant(_440);
        _815 = const false;
        _816 = const false;
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_437);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &_434;
        StorageLive(_450);
        _450 = &_436;
        _448 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _449, move _450) -> [return: bb188, unwind: bb406];
    }

    bb423: {
        _872 = discriminant(_492);
        _813 = const false;
        _814 = const false;
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_489);
        StorageLive(_500);
        StorageLive(_501);
        _501 = &_486;
        StorageLive(_502);
        _502 = &_488;
        _500 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _501, move _502) -> [return: bb215, unwind: bb406];
    }

    bb424: {
        _874 = discriminant(_525);
        _811 = const false;
        _812 = const false;
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_522);
        StorageLive(_533);
        StorageLive(_534);
        _534 = &_36;
        _533 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _534) -> [return: bb232, unwind: bb406];
    }

    bb425: {
        _876 = discriminant(_553);
        _809 = const false;
        _810 = const false;
        StorageDead(_553);
        StorageDead(_552);
        StorageDead(_550);
        StorageLive(_561);
        StorageLive(_562);
        _562 = &_547;
        StorageLive(_563);
        _563 = &_549;
        _561 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _562, move _563) -> [return: bb246, unwind: bb406];
    }

    bb426: {
        _878 = discriminant(_605);
        _807 = const false;
        _808 = const false;
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_602);
        StorageLive(_613);
        StorageLive(_614);
        _614 = &_599;
        StorageLive(_615);
        _615 = &_601;
        _613 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _614, move _615) -> [return: bb273, unwind: bb406];
    }

    bb427: {
        _880 = discriminant(_641);
        _805 = const false;
        _806 = const false;
        StorageDead(_641);
        StorageDead(_640);
        StorageDead(_638);
        StorageLive(_649);
        StorageLive(_650);
        _650 = &_635;
        StorageLive(_651);
        _651 = &_637;
        _649 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _650, move _651) -> [return: bb292, unwind: bb406];
    }

    bb428: {
        _882 = discriminant(_677);
        _803 = const false;
        _804 = const false;
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_674);
        StorageLive(_685);
        StorageLive(_686);
        _686 = &_671;
        StorageLive(_687);
        _687 = &_673;
        _685 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _686, move _687) -> [return: bb311, unwind: bb406];
    }

    bb429: {
        _884 = discriminant(_713);
        _801 = const false;
        _802 = const false;
        StorageDead(_713);
        StorageDead(_712);
        StorageDead(_710);
        StorageLive(_721);
        StorageLive(_722);
        _722 = &_707;
        StorageLive(_723);
        _723 = &_709;
        _721 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _722, move _723) -> [return: bb330, unwind: bb406];
    }

    bb430: {
        _906 = discriminant(_366);
        _799 = const false;
        _800 = const false;
        StorageDead(_366);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_350);
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_342);
        goto -> bb371;
    }

    bb431 (cleanup): {
        _950 = discriminant(_713);
        goto -> bb406;
    }

    bb432 (cleanup): {
        _951 = discriminant(_677);
        goto -> bb406;
    }

    bb433 (cleanup): {
        _952 = discriminant(_641);
        goto -> bb406;
    }

    bb434 (cleanup): {
        _953 = discriminant(_605);
        goto -> bb406;
    }

    bb435 (cleanup): {
        _954 = discriminant(_553);
        goto -> bb406;
    }

    bb436 (cleanup): {
        _955 = discriminant(_525);
        goto -> bb406;
    }

    bb437 (cleanup): {
        _956 = discriminant(_492);
        goto -> bb406;
    }

    bb438 (cleanup): {
        _957 = discriminant(_440);
        goto -> bb406;
    }

    bb439 (cleanup): {
        _958 = discriminant(_412);
        goto -> bb406;
    }

    bb440 (cleanup): {
        drop(_391) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb441 (cleanup): {
        switchInt(_819) -> [0: bb406, otherwise: bb440];
    }

    bb442 (cleanup): {
        _959 = discriminant(_342);
        goto -> bb404;
    }

    bb443 (cleanup): {
        _960 = discriminant(_366);
        goto -> bb406;
    }

    bb444 (cleanup): {
        _961 = discriminant(_320);
        goto -> bb406;
    }

    bb445 (cleanup): {
        _962 = discriminant(_292);
        goto -> bb407;
    }

    bb446 (cleanup): {
        _963 = discriminant(_277);
        goto -> bb407;
    }

    bb447 (cleanup): {
        _964 = discriminant(_262);
        goto -> bb407;
    }

    bb448 (cleanup): {
        _965 = discriminant(_247);
        goto -> bb407;
    }

    bb449 (cleanup): {
        _966 = discriminant(_232);
        goto -> bb408;
    }

    bb450 (cleanup): {
        _967 = discriminant(_217);
        goto -> bb409;
    }

    bb451 (cleanup): {
        _968 = discriminant(_202);
        goto -> bb410;
    }

    bb452 (cleanup): {
        _969 = discriminant(_187);
        goto -> bb411;
    }

    bb453 (cleanup): {
        _970 = discriminant(_172);
        goto -> bb412;
    }

    bb454 (cleanup): {
        _971 = discriminant(_157);
        goto -> bb413;
    }

    bb455 (cleanup): {
        _972 = discriminant(_142);
        goto -> bb414;
    }

    bb456 (cleanup): {
        _973 = discriminant(_127);
        goto -> bb415;
    }

    bb457 (cleanup): {
        _974 = discriminant(_112);
        goto -> bb415;
    }

    bb458 (cleanup): {
        _975 = discriminant(_97);
        goto -> bb416;
    }

    bb459 (cleanup): {
        _976 = discriminant(_82);
        goto -> bb417;
    }

    bb460 (cleanup): {
        _977 = discriminant(_67);
        goto -> bb417;
    }

    bb461 (cleanup): {
        _978 = discriminant(_52);
        goto -> bb418;
    }

    bb462 (cleanup): {
        _979 = discriminant(_37);
        goto -> bb418;
    }

    bb463 (cleanup): {
        _980 = discriminant(_22);
        goto -> bb418;
    }

    bb464 (cleanup): {
        _981 = discriminant(_7);
        goto -> bb418;
    }
}
