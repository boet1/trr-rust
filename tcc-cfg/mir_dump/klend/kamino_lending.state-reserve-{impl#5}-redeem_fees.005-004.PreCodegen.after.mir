// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::redeem_fees` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::redeem_fees(_1: &mut ReserveLiquidity, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug withdraw_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, u64>;
    let mut _5: std::result::Result<u64, LendingError>;
    let mut _6: std::option::Option<u64>;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: {closure@programs\klend\src\state\reserve.rs:606:25: 606:27};
    let mut _10: &u64;
    let mut _11: &u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, LendingError>;
    let _16: u64;
    let _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _18: u128;
    let mut _20: u64;
    let mut _21: u128;
    let mut _22: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _24: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let mut _25: std::option::Option<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _26: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _27: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _28: {closure@programs\klend\src\state\reserve.rs:617:25: 617:27};
    let mut _29: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: ();
    let mut _37: bool;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug accumulated_protocol_fees_f => _17;
        let _19: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 6 {
            debug withdraw_amount_f => _19;
            let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _35: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 7 {
                debug residual => _32;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _35;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _37 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).3: u64);
        StorageLive(_8);
        _8 = _2;
        _6 = core::num::<impl u64>::checked_sub(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).3: u64);
        StorageLive(_11);
        _11 = &_2;
        _9 = {closure@programs\klend\src\state\reserve.rs:606:25: 606:27} { self: move _10, withdraw_amount: move _11 };
        StorageDead(_11);
        StorageDead(_10);
        _5 = std::option::Option::<u64>::ok_or_else::<LendingError, {closure@programs\klend\src\state\reserve.rs:606:25: 606:27}>(move _6, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_6);
        _4 = <std::result::Result<u64, LendingError> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        _12 = discriminant(_4);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_4 as Continue).0: u64);
        _3 = _16;
        StorageDead(_16);
        ((*_1).3: u64) = move _3;
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).11: u128);
        _17 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _18) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_4);
        goto -> bb17;
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        _19 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_num::<u64>(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _17;
        StorageLive(_27);
        _27 = _19;
        _25 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::checked_sub(move _26, move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_17;
        StorageLive(_30);
        _30 = &_19;
        _28 = {closure@programs\klend\src\state\reserve.rs:617:25: 617:27} { accumulated_protocol_fees_f: move _29, withdraw_amount_f: move _30 };
        StorageDead(_30);
        StorageDead(_29);
        _24 = std::option::Option::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\state\reserve.rs:617:25: 617:27}>(move _25, move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_25);
        _23 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as Try>::branch(move _24) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _37 = const true;
        StorageDead(_24);
        _31 = discriminant(_23);
        switchInt(move _31) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        StorageLive(_35);
        _35 = ((_23 as Continue).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _22 = _35;
        StorageDead(_35);
        _21 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _22) -> [return: bb16, unwind: bb19];
    }

    bb14: {
        StorageLive(_32);
        _32 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_22);
        StorageDead(_21);
        _40 = discriminant(_23);
        _37 = const false;
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb17;
    }

    bb16: {
        StorageDead(_22);
        ((*_1).11: u128) = move _21;
        StorageDead(_21);
        _38 = discriminant(_23);
        _37 = const false;
        StorageDead(_23);
        StorageLive(_36);
        _36 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _36);
        StorageDead(_36);
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _42 = discriminant(_23);
        goto -> bb18;
    }
}
