// MIR for `update_elevation_group_debt_trackers_on_repay` before PreCodegen

fn update_elevation_group_debt_trackers_on_repay(_1: u64, _2: &mut obligation::Obligation, _3: usize, _4: &mut reserve::Reserve, _5: impl Iterator<Item = T>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug repay_amount => _1;
    debug obligation => _2;
    debug obligation_borrow_index => _3;
    debug borrow_reserve => _4;
    debug deposit_reserves_iter => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: u8;
    let _9: usize;
    let mut _10: usize;
    let mut _11: u8;
    let mut _12: (usize, bool);
    let mut _13: std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>;
    let mut _14: std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>;
    let mut _15: &mut state::obligation::Obligation;
    let mut _17: ();
    let _18: ();
    let mut _19: std::option::Option<&mut state::obligation::ObligationCollateral>;
    let mut _20: &mut std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>;
    let mut _21: &mut std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>;
    let mut _22: isize;
    let mut _23: !;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, T>;
    let mut _27: std::result::Result<T, anchor_lang::error::Error>;
    let mut _28: std::option::Option<T>;
    let mut _29: &mut impl Iterator<Item = T>;
    let mut _30: {closure@programs\klend\src\lending_market\lending_operations.rs:2644:33: 2644:35};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _36: ();
    let mut _37: bool;
    let mut _38: &anchor_lang::prelude::Pubkey;
    let _39: anchor_lang::prelude::Pubkey;
    let mut _40: &T;
    let mut _41: &anchor_lang::prelude::Pubkey;
    let mut _42: !;
    let mut _43: anchor_lang::error::Error;
    let mut _44: anchor_lang::error::Error;
    let mut _45: anchor_lang::error::AnchorError;
    let mut _46: std::string::String;
    let mut _47: &anchor_lang::error::ErrorCode;
    let _48: anchor_lang::error::ErrorCode;
    let mut _49: u32;
    let mut _50: anchor_lang::error::ErrorCode;
    let mut _51: std::string::String;
    let mut _52: &anchor_lang::error::ErrorCode;
    let _53: anchor_lang::error::ErrorCode;
    let mut _54: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _55: anchor_lang::error::ErrorOrigin;
    let mut _56: anchor_lang::error::Source;
    let mut _57: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _58: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _59: anchor_lang::prelude::Pubkey;
    let mut _60: &T;
    let mut _61: anchor_lang::prelude::Pubkey;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _64: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _65: &T;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _72: &state::reserve::Reserve;
    let mut _73: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _74: usize;
    let mut _75: usize;
    let mut _76: bool;
    let mut _78: &state::reserve::Reserve;
    let mut _79: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _80: usize;
    let mut _81: usize;
    let mut _82: bool;
    let mut _84: u64;
    let mut _85: u64;
    let _86: ();
    let mut _87: &str;
    let _88: &str;
    let mut _89: &std::string::String;
    let _90: &std::string::String;
    let _91: std::string::String;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 4];
    let _96: &[&str; 4];
    let _97: [&str; 4];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 4];
    let _100: &[core::fmt::rt::Argument<'_>; 4];
    let _101: [core::fmt::rt::Argument<'_>; 4];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &anchor_lang::prelude::Pubkey;
    let _104: &anchor_lang::prelude::Pubkey;
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &u64;
    let _107: &u64;
    let mut _108: core::fmt::rt::Argument<'_>;
    let mut _109: &u64;
    let _110: &u64;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &u64;
    let _113: &u64;
    let mut _114: u64;
    let mut _115: &mut state::reserve::Reserve;
    let mut _116: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let _117: usize;
    let mut _118: usize;
    let mut _119: bool;
    let mut _120: u64;
    let mut _121: u64;
    let mut _122: u64;
    let _123: u64;
    let mut _124: u64;
    let mut _125: u64;
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: &std::string::String;
    let _130: &std::string::String;
    let _131: std::string::String;
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[&str; 1];
    let _136: &[&str; 1];
    let _137: [&str; 1];
    let mut _138: &[core::fmt::rt::Argument<'_>];
    let mut _139: &[core::fmt::rt::Argument<'_>; 1];
    let _140: &[core::fmt::rt::Argument<'_>; 1];
    let _141: [core::fmt::rt::Argument<'_>; 1];
    let mut _142: core::fmt::rt::Argument<'_>;
    let mut _143: &u64;
    let _144: &u64;
    let mut _145: u64;
    let mut _146: u64;
    let mut _147: u64;
    let _148: usize;
    let mut _149: usize;
    let mut _150: bool;
    let mut _151: u64;
    let _152: usize;
    let mut _153: usize;
    let mut _154: bool;
    let mut _155: ();
    let mut _160: bool;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    scope 1 {
        debug elevation_group_index => _9;
        let mut _16: std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>;
        scope 2 {
            debug iter => _16;
            let _24: &mut state::obligation::ObligationCollateral;
            scope 3 {
                debug obligation_deposit => _24;
                let _25: T;
                let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _35: T;
                scope 4 {
                    debug deposit_reserve => _25;
                    let mut _62: std::cell::RefMut<'_, state::reserve::Reserve>;
                    let _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _70: std::cell::RefMut<'_, state::reserve::Reserve>;
                    let mut _156: &anchor_lang::error::ErrorCode;
                    let mut _157: &anchor_lang::error::ErrorCode;
                    scope 9 {
                        debug deposit_reserve => _62;
                        let _71: u64;
                        scope 14 {
                            debug debt_limit => _71;
                            let _77: u64;
                            scope 15 {
                                debug pre_debt_amount => _77;
                                let _83: u64;
                                scope 16 {
                                    debug new_debt_amount => _83;
                                    let _92: std::string::String;
                                    let mut _158: &[&str; 4];
                                    scope 17 {
                                        debug res => _92;
                                    }
                                }
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _67;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _70;
                        scope 13 {
                        }
                    }
                }
                scope 5 {
                    debug residual => _32;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _35;
                    scope 8 {
                    }
                }
            }
        }
    }
    scope 18 {
        debug new_total_borrow_amount => _123;
        let _132: std::string::String;
        let mut _159: &[&str; 1];
        scope 19 {
            debug res => _132;
        }
    }

    bb0: {
        _160 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_2).14: u8);
        _7 = Ne(move _8, const _);
        switchInt(move _7) -> [0: bb50, otherwise: bb1];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_2).14: u8);
        _10 = move _11 as usize (IntToInt);
        StorageDead(_11);
        _12 = CheckedSub(_10, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, const 1_usize) -> [success: bb2, unwind: bb70];
    }

    bb2: {
        _9 = move (_12.0: usize);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_2);
        _14 = obligation::Obligation::active_deposits_mut(move _15) -> [return: bb3, unwind: bb70];
    }

    bb3: {
        StorageDead(_15);
        _13 = <Filter<std::slice::IterMut<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}> as IntoIterator>::into_iter(move _14) -> [return: bb4, unwind: bb70];
    }

    bb4: {
        StorageDead(_14);
        StorageLive(_16);
        _16 = move _13;
        goto -> bb5;
    }

    bb5: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _16;
        _20 = &mut (*_21);
        _19 = <Filter<std::slice::IterMut<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}> as Iterator>::next(move _20) -> [return: bb6, unwind: bb70];
    }

    bb6: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_24);
        _24 = move ((_19 as Some).0: &mut state::obligation::ObligationCollateral);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _5;
        _28 = <impl Iterator<Item = T> as Iterator>::next(move _29) -> [return: bb10, unwind: bb70];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _6 = const ();
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        goto -> bb61;
    }

    bb10: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\lending_market\lending_operations.rs:2644:33: 2644:35};
        _27 = std::option::Option::<T>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:2644:33: 2644:35}>(move _28, move _30) -> [return: bb11, unwind: bb70];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<T, anchor_lang::error::Error> as Try>::branch(move _27) -> [return: bb12, unwind: bb70];
    }

    bb12: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        StorageLive(_35);
        _35 = move ((_26 as Continue).0: T);
        _25 = move _35;
        StorageDead(_35);
        _161 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_25;
        _39 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _40) -> [return: bb16, unwind: bb69];
    }

    bb14: {
        StorageLive(_32);
        _32 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb15, unwind: bb75];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_32);
        _167 = discriminant(_26);
        StorageDead(_26);
        goto -> bb63;
    }

    bb16: {
        _38 = &_39;
        StorageDead(_40);
        StorageLive(_41);
        _41 = &((*_24).0: anchor_lang::prelude::Pubkey);
        _37 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _38, move _41) -> [return: bb17, unwind: bb69];
    }

    bb17: {
        switchInt(move _37) -> [0: bb25, otherwise: bb18];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _157 = const _;
        _47 = &(*_157);
        _46 = anchor_lang::error::ErrorCode::name(move _47) -> [return: bb19, unwind: bb69];
    }

    bb19: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        _50 = RequireKeysEqViolated;
        _49 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _50) -> [return: bb20, unwind: bb68];
    }

    bb20: {
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        _156 = const _;
        _52 = &(*_156);
        _51 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _52) -> [return: bb21, unwind: bb68];
    }

    bb21: {
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2645_u32 };
        _55 = anchor_lang::error::ErrorOrigin::Source(move _56);
        StorageDead(_56);
        _54 = std::option::Option::<ErrorOrigin>::Some(move _55);
        StorageDead(_55);
        StorageLive(_57);
        _57 = std::option::Option::<ComparedValues>::None;
        _45 = anchor_lang::error::AnchorError { error_name: move _46, error_code_number: move _49, error_msg: move _51, error_origin: move _54, compared_values: move _57 };
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_46);
        _44 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _45) -> [return: bb22, unwind: bb69];
    }

    bb22: {
        _160 = const true;
        StorageDead(_45);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_25;
        _59 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _60) -> [return: bb23, unwind: bb74];
    }

    bb23: {
        StorageDead(_60);
        StorageLive(_61);
        _61 = ((*_24).0: anchor_lang::prelude::Pubkey);
        _58 = (move _59, move _61);
        StorageDead(_61);
        StorageDead(_59);
        _160 = const false;
        _43 = anchor_lang::error::Error::with_pubkeys(move _44, move _58) -> [return: bb24, unwind: bb74];
    }

    bb24: {
        StorageDead(_58);
        _160 = const false;
        StorageDead(_44);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _43);
        StorageDead(_43);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb62;
    }

    bb25: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_25;
        _64 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_mut(move _65) -> [return: bb26, unwind: bb69];
    }

    bb26: {
        StorageDead(_65);
        _63 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _64) -> [return: bb27, unwind: bb69];
    }

    bb27: {
        StorageDead(_64);
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb28, 1: bb29, otherwise: bb8];
    }

    bb28: {
        StorageLive(_70);
        _70 = move ((_63 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _62 = move _70;
        StorageDead(_70);
        _163 = discriminant(_63);
        StorageDead(_63);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_62;
        _72 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _73) -> [return: bb31, unwind: bb67];
    }

    bb29: {
        StorageLive(_67);
        _67 = move ((_63 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _69) -> [return: bb30, unwind: bb72];
    }

    bb30: {
        StorageDead(_69);
        StorageDead(_67);
        _165 = discriminant(_63);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb62;
    }

    bb31: {
        StorageDead(_73);
        StorageLive(_74);
        _74 = _9;
        _75 = Len((((*_72).9: state::reserve::ReserveConfig).28: [u64; 32]));
        _76 = Lt(_74, _75);
        assert(move _76, "index out of bounds: the length is {} but the index is {}", move _75, _74) -> [success: bb32, unwind: bb67];
    }

    bb32: {
        _71 = (((*_72).9: state::reserve::ReserveConfig).28: [u64; 32])[_74];
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_62;
        _78 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _79) -> [return: bb33, unwind: bb67];
    }

    bb33: {
        StorageDead(_79);
        StorageLive(_80);
        _80 = _9;
        _81 = Len(((*_78).12: [u64; 32]));
        _82 = Lt(_80, _81);
        assert(move _82, "index out of bounds: the length is {} but the index is {}", move _81, _80) -> [success: bb34, unwind: bb67];
    }

    bb34: {
        _77 = ((*_78).12: [u64; 32])[_80];
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_83);
        StorageLive(_84);
        _84 = _77;
        StorageLive(_85);
        _85 = _1;
        _83 = core::num::<impl u64>::saturating_sub(move _84, move _85) -> [return: bb35, unwind: bb67];
    }

    bb35: {
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _158 = const _;
        _96 = &(*_158);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &((*_24).0: anchor_lang::prelude::Pubkey);
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _103) -> [return: bb36, unwind: bb67];
    }

    bb36: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_77;
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _106) -> [return: bb37, unwind: bb67];
    }

    bb37: {
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_83;
        _109 = &(*_110);
        _108 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _109) -> [return: bb38, unwind: bb67];
    }

    bb38: {
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_71;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _112) -> [return: bb39, unwind: bb67];
    }

    bb39: {
        StorageDead(_112);
        _101 = [move _102, move _105, move _108, move _111];
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb40, unwind: bb67];
    }

    bb40: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = format(move _93) -> [return: bb41, unwind: bb67];
    }

    bb41: {
        StorageDead(_93);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        _91 = move _92;
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = <std::string::String as Deref>::deref(move _89) -> [return: bb42, unwind: bb66];
    }

    bb42: {
        _87 = &(*_88);
        StorageDead(_89);
        _86 = solana_program::log::sol_log(move _87) -> [return: bb43, unwind: bb66];
    }

    bb43: {
        StorageDead(_87);
        drop(_91) -> [return: bb44, unwind: bb67];
    }

    bb44: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_114);
        _114 = _83;
        StorageLive(_115);
        StorageLive(_116);
        _116 = &mut _62;
        _115 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _116) -> [return: bb45, unwind: bb67];
    }

    bb45: {
        StorageDead(_116);
        StorageLive(_117);
        _117 = _9;
        _118 = Len(((*_115).12: [u64; 32]));
        _119 = Lt(_117, _118);
        assert(move _119, "index out of bounds: the length is {} but the index is {}", move _118, _117) -> [success: bb46, unwind: bb67];
    }

    bb46: {
        ((*_115).12: [u64; 32])[_117] = move _114;
        StorageDead(_114);
        StorageDead(_117);
        StorageDead(_115);
        StorageLive(_120);
        StorageLive(_121);
        _121 = ((*_24).3: u64);
        StorageLive(_122);
        _122 = _1;
        _120 = core::num::<impl u64>::saturating_sub(move _121, move _122) -> [return: bb47, unwind: bb67];
    }

    bb47: {
        StorageDead(_122);
        StorageDead(_121);
        ((*_24).3: u64) = move _120;
        StorageDead(_120);
        _18 = const ();
        StorageDead(_83);
        StorageDead(_77);
        StorageDead(_71);
        drop(_62) -> [return: bb48, unwind: bb69];
    }

    bb48: {
        StorageDead(_62);
        drop(_25) -> [return: bb49, unwind: bb70];
    }

    bb49: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        _17 = const ();
        goto -> bb5;
    }

    bb50: {
        StorageDead(_8);
        StorageLive(_123);
        StorageLive(_124);
        _124 = ((*_4).11: u64);
        StorageLive(_125);
        _125 = _1;
        _123 = core::num::<impl u64>::saturating_sub(move _124, move _125) -> [return: bb51, unwind: bb70];
    }

    bb51: {
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _159 = const _;
        _136 = &(*_159);
        _135 = &(*_136);
        _134 = move _135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_135);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &((*_4).11: u64);
        _143 = &(*_144);
        _142 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _143) -> [return: bb52, unwind: bb70];
    }

    bb52: {
        StorageDead(_143);
        _141 = [move _142];
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_139);
        _133 = Arguments::<'_>::new_v1(move _134, move _138) -> [return: bb53, unwind: bb70];
    }

    bb53: {
        StorageDead(_138);
        StorageDead(_134);
        _132 = format(move _133) -> [return: bb54, unwind: bb70];
    }

    bb54: {
        StorageDead(_133);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        _131 = move _132;
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = <std::string::String as Deref>::deref(move _129) -> [return: bb55, unwind: bb65];
    }

    bb55: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb56, unwind: bb65];
    }

    bb56: {
        StorageDead(_127);
        drop(_131) -> [return: bb57, unwind: bb70];
    }

    bb57: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_145);
        _145 = _123;
        ((*_4).11: u64) = move _145;
        StorageDead(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = _3;
        _149 = Len(((*_2).7: [state::obligation::ObligationLiquidity; 5]));
        _150 = Lt(_148, _149);
        assert(move _150, "index out of bounds: the length is {} but the index is {}", move _149, _148) -> [success: bb58, unwind: bb70];
    }

    bb58: {
        _147 = (((*_2).7: [state::obligation::ObligationLiquidity; 5])[_148].6: u64);
        StorageLive(_151);
        _151 = _1;
        _146 = core::num::<impl u64>::saturating_sub(move _147, move _151) -> [return: bb59, unwind: bb70];
    }

    bb59: {
        StorageDead(_151);
        StorageDead(_147);
        StorageLive(_152);
        _152 = _3;
        _153 = Len(((*_2).7: [state::obligation::ObligationLiquidity; 5]));
        _154 = Lt(_152, _153);
        assert(move _154, "index out of bounds: the length is {} but the index is {}", move _153, _152) -> [success: bb60, unwind: bb70];
    }

    bb60: {
        (((*_2).7: [state::obligation::ObligationLiquidity; 5])[_152].6: u64) = move _146;
        StorageDead(_146);
        StorageDead(_152);
        StorageDead(_148);
        _6 = const ();
        StorageDead(_123);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_155);
        _155 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _155);
        StorageDead(_155);
        drop(_5) -> [return: bb64, unwind: bb71];
    }

    bb62: {
        drop(_25) -> [return: bb63, unwind: bb70];
    }

    bb63: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        drop(_5) -> [return: bb64, unwind: bb71];
    }

    bb64: {
        return;
    }

    bb65 (cleanup): {
        drop(_131) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_91) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_62) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_46) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_25) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_5) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        resume;
    }

    bb72 (cleanup): {
        _169 = discriminant(_63);
        goto -> bb69;
    }

    bb73 (cleanup): {
        drop(_44) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_160) -> [0: bb69, otherwise: bb73];
    }

    bb75 (cleanup): {
        _170 = discriminant(_26);
        goto -> bb70;
    }
}
