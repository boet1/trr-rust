// MIR for `get_switchboard_price` after PreCodegen

fn get_switchboard_price(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: &anchor_lang::prelude::Clock) -> std::result::Result<TimestampedPrice, anchor_lang::error::Error> {
    debug switchboard_feed_info => _1;
    debug clock => _2;
    let mut _0: std::result::Result<utils::prices::types::TimestampedPrice, anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: anchor_lang::prelude::Pubkey;
    let mut _8: !;
    let mut _9: anchor_lang::error::Error;
    let mut _10: anchor_lang::error::AnchorError;
    let mut _11: std::string::String;
    let mut _12: &LendingError;
    let _13: LendingError;
    let mut _14: u32;
    let mut _15: LendingError;
    let mut _16: std::string::String;
    let mut _17: &LendingError;
    let _18: LendingError;
    let mut _19: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _20: anchor_lang::error::ErrorOrigin;
    let mut _21: anchor_lang::error::Source;
    let mut _22: std::option::Option<anchor_lang::error::ComparedValues>;
    let _23: utils::account_loader_trait::FatAccountLoader<'_, sbod_itf::accounts::PullFeedAccountData>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, utils::account_loader_trait::FatAccountLoader<'_, sbod_itf::accounts::PullFeedAccountData>>;
    let mut _25: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, sbod_itf::accounts::PullFeedAccountData>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _31: utils::account_loader_trait::FatAccountLoader<'_, sbod_itf::accounts::PullFeedAccountData>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>>;
    let mut _34: std::result::Result<std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>, anchor_lang::error::Error>;
    let mut _35: &utils::account_loader_trait::FatAccountLoader<'_, sbod_itf::accounts::PullFeedAccountData>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _42: &sbod_itf::accounts::PullFeedAccountData;
    let mut _43: &std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>;
    let mut _45: u64;
    let mut _46: u64;
    let mut _48: u64;
    let mut _49: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _50: i64;
    let mut _51: u64;
    let mut _52: u64;
    let mut _53: u64;
    let mut _54: (u64, bool);
    let mut _55: bool;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, rust_decimal::decimal::Decimal>;
    let mut _58: std::result::Result<rust_decimal::decimal::Decimal, anchor_lang::error::Error>;
    let mut _59: std::option::Option<rust_decimal::decimal::Decimal>;
    let mut _60: &sbod_itf::accounts::CurrentResult;
    let _61: &sbod_itf::accounts::PullFeedAccountData;
    let mut _62: &std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>;
    let mut _63: anchor_lang::error::Error;
    let mut _64: anchor_lang::error::AnchorError;
    let mut _65: std::string::String;
    let mut _66: &LendingError;
    let _67: LendingError;
    let mut _68: u32;
    let mut _69: LendingError;
    let mut _70: std::string::String;
    let mut _71: &LendingError;
    let _72: LendingError;
    let mut _73: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _74: anchor_lang::error::ErrorOrigin;
    let mut _75: anchor_lang::error::Source;
    let mut _76: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _82: ();
    let mut _83: bool;
    let mut _84: i128;
    let mut _85: &rust_decimal::decimal::Decimal;
    let mut _86: !;
    let _87: ();
    let mut _88: &str;
    let _89: &str;
    let mut _90: anchor_lang::error::Error;
    let mut _91: anchor_lang::error::AnchorError;
    let mut _92: std::string::String;
    let mut _93: &LendingError;
    let _94: LendingError;
    let mut _95: u32;
    let mut _96: LendingError;
    let mut _97: std::string::String;
    let mut _98: &LendingError;
    let _99: LendingError;
    let mut _100: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _101: anchor_lang::error::ErrorOrigin;
    let mut _102: anchor_lang::error::Source;
    let mut _103: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _105: std::result::Result<u128, std::num::TryFromIntError>;
    let mut _106: i128;
    let mut _107: &rust_decimal::decimal::Decimal;
    let mut _108: &str;
    let _109: &str;
    let mut _111: &rust_decimal::decimal::Decimal;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, rust_decimal::decimal::Decimal>;
    let mut _114: std::result::Result<rust_decimal::decimal::Decimal, anchor_lang::error::Error>;
    let mut _115: std::option::Option<rust_decimal::decimal::Decimal>;
    let mut _116: &sbod_itf::accounts::CurrentResult;
    let _117: &sbod_itf::accounts::PullFeedAccountData;
    let mut _118: &std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>;
    let mut _119: anchor_lang::error::Error;
    let mut _120: anchor_lang::error::AnchorError;
    let mut _121: std::string::String;
    let mut _122: &LendingError;
    let _123: LendingError;
    let mut _124: u32;
    let mut _125: LendingError;
    let mut _126: std::string::String;
    let mut _127: &LendingError;
    let _128: LendingError;
    let mut _129: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _130: anchor_lang::error::ErrorOrigin;
    let mut _131: anchor_lang::error::Source;
    let mut _132: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u128>;
    let mut _140: std::result::Result<u128, anchor_lang::error::Error>;
    let mut _141: std::result::Result<u128, std::num::TryFromIntError>;
    let mut _142: i128;
    let mut _143: &rust_decimal::decimal::Decimal;
    let mut _144: {closure@programs\klend\src\utils\prices\switchboard.rs:72:67: 72:70};
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _151: &rust_decimal::decimal::Decimal;
    let mut _153: {closure@programs\klend\src\utils\prices\switchboard.rs:78:31: 78:38};
    let mut _154: utils::prices::types::TimestampedPrice;
    let mut _155: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>;
    let mut _156: std::boxed::Box<{closure@programs\klend\src\utils\prices\switchboard.rs:78:31: 78:38}>;
    let mut _157: u64;
    let mut _158: &LendingError;
    let mut _159: &LendingError;
    let mut _166: &anchor_lang::prelude::Pubkey;
    let mut _167: &anchor_lang::prelude::Pubkey;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    scope 1 {
        debug feed_acc => _23;
        let _32: std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>;
        let _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _40: std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>;
        scope 6 {
            debug feed => _32;
            let _41: u64;
            scope 11 {
                debug last_updated_slot => _41;
                let _44: u64;
                scope 12 {
                    debug elapsed_slots => _44;
                    let _47: u64;
                    scope 13 {
                        debug timestamp => _47;
                        let _56: rust_decimal::decimal::Decimal;
                        let _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _81: rust_decimal::decimal::Decimal;
                        let mut _164: &LendingError;
                        let mut _165: &LendingError;
                        scope 14 {
                            debug price_switchboard_desc => _56;
                            let _104: u128;
                            let mut _160: &LendingError;
                            let mut _161: &LendingError;
                            scope 19 {
                                debug price_switchboard_desc_mantissa => _104;
                                let _110: u32;
                                scope 20 {
                                    debug price_switchboard_desc_scale => _110;
                                    let _112: rust_decimal::decimal::Decimal;
                                    let _134: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _137: rust_decimal::decimal::Decimal;
                                    let mut _162: &LendingError;
                                    let mut _163: &LendingError;
                                    scope 21 {
                                        debug stdev => _112;
                                        let _138: u128;
                                        let _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _149: u128;
                                        scope 26 {
                                            debug stdev_mantissa => _138;
                                            let _150: u32;
                                            scope 31 {
                                                debug stdev_scale => _150;
                                                let _152: std::boxed::Box<{closure@programs\klend\src\utils\prices\switchboard.rs:78:31: 78:38}>;
                                                scope 32 {
                                                    debug price_load => _152;
                                                }
                                            }
                                        }
                                        scope 27 {
                                            debug residual => _146;
                                            scope 28 {
                                            }
                                        }
                                        scope 29 {
                                            debug val => _149;
                                            scope 30 {
                                            }
                                        }
                                    }
                                    scope 22 {
                                        debug residual => _134;
                                        scope 23 {
                                        }
                                    }
                                    scope 24 {
                                        debug val => _137;
                                        scope 25 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _78;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _81;
                            scope 18 {
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _37;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _40;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _28;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _31;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _167 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _5 = &(*_167);
        StorageLive(_6);
        _166 = const _;
        _6 = &(*_166);
        _4 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _159 = const _;
        _12 = &(*_159);
        _11 = LendingError::name(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        _15 = LendingError::NoPriceFound;
        _14 = <LendingError as Into<u32>>::into(move _15) -> [return: bb4, unwind: bb81];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _158 = const _;
        _17 = &(*_158);
        _16 = <LendingError as ToString>::to_string(move _17) -> [return: bb5, unwind: bb81];
    }

    bb5: {
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\switchboard.rs", line: const 39_u32 };
        _20 = anchor_lang::error::ErrorOrigin::Source(move _21);
        StorageDead(_21);
        _19 = std::option::Option::<ErrorOrigin>::Some(move _20);
        StorageDead(_20);
        StorageLive(_22);
        _22 = std::option::Option::<ComparedValues>::None;
        _10 = anchor_lang::error::AnchorError { error_name: move _11, error_code_number: move _14, error_msg: move _16, error_origin: move _19, compared_values: move _22 };
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_11);
        _9 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _10) -> [return: bb6, unwind: bb82];
    }

    bb6: {
        StorageDead(_10);
        _0 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::Err(move _9);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb75;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        _25 = account_loader_trait::FatAccountLoader::<'_, PullFeedAccountData>::try_from(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        _24 = <std::result::Result<account_loader_trait::FatAccountLoader<'_, PullFeedAccountData>, anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb9, unwind: bb82];
    }

    bb9: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_31);
        _31 = move ((_24 as Continue).0: utils::account_loader_trait::FatAccountLoader<'_, sbod_itf::accounts::PullFeedAccountData>);
        _23 = move _31;
        StorageDead(_31);
        _168 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_23;
        _34 = account_loader_trait::FatAccountLoader::<'_, PullFeedAccountData>::load(move _35) -> [return: bb14, unwind: bb80];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_28);
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<TimestampedPrice, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb13, unwind: bb87];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_28);
        _186 = discriminant(_24);
        StorageDead(_24);
        goto -> bb74;
    }

    bb14: {
        StorageDead(_35);
        _33 = <std::result::Result<Ref<'_, PullFeedAccountData>, anchor_lang::error::Error> as Try>::branch(move _34) -> [return: bb15, unwind: bb80];
    }

    bb15: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_40);
        _40 = move ((_33 as Continue).0: std::cell::Ref<'_, sbod_itf::accounts::PullFeedAccountData>);
        _32 = move _40;
        StorageDead(_40);
        _170 = discriminant(_33);
        StorageDead(_33);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_32;
        _42 = <Ref<'_, PullFeedAccountData> as Deref>::deref(move _43) -> [return: bb19, unwind: bb79];
    }

    bb17: {
        StorageLive(_37);
        _37 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<TimestampedPrice, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _39) -> [return: bb18, unwind: bb86];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_37);
        _184 = discriminant(_33);
        StorageDead(_33);
        goto -> bb73;
    }

    bb19: {
        StorageDead(_43);
        _41 = (((*_42).15: sbod_itf::accounts::CurrentResult).8: u64);
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        _45 = ((*_2).0: u64);
        StorageLive(_46);
        _46 = _41;
        _44 = core::num::<impl u64>::saturating_sub(move _45, move _46) -> [return: bb20, unwind: bb79];
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_2).4: i64);
        _49 = <u64 as TryFrom<i64>>::try_from(move _50) -> [return: bb21, unwind: bb79];
    }

    bb21: {
        StorageDead(_50);
        _48 = std::result::Result::<u64, TryFromIntError>::unwrap_or(move _49, const 0_u64) -> [return: bb22, unwind: bb79];
    }

    bb22: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _44;
        _54 = CheckedMul(_53, const _);
        assert(!move (_54.1: bool), "attempt to compute `{} * {}`, which would overflow", move _53, const _) -> [success: bb23, unwind: bb79];
    }

    bb23: {
        _52 = move (_54.0: u64);
        StorageDead(_53);
        _55 = Eq(const 1000_u64, const 0_u64);
        assert(!move _55, "attempt to divide `{}` by zero", _52) -> [success: bb24, unwind: bb79];
    }

    bb24: {
        _51 = Div(move _52, const 1000_u64);
        StorageDead(_52);
        _47 = core::num::<impl u64>::saturating_sub(move _48, move _51) -> [return: bb25, unwind: bb79];
    }

    bb25: {
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_32;
        _61 = <Ref<'_, PullFeedAccountData> as Deref>::deref(move _62) -> [return: bb26, unwind: bb79];
    }

    bb26: {
        StorageDead(_62);
        _60 = &((*_61).15: sbod_itf::accounts::CurrentResult);
        _59 = CurrentResult::value(move _60) -> [return: bb27, unwind: bb79];
    }

    bb27: {
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _165 = const _;
        _66 = &(*_165);
        _65 = LendingError::name(move _66) -> [return: bb28, unwind: bb79];
    }

    bb28: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        _69 = LendingError::SwitchboardV2Error;
        _68 = <LendingError as Into<u32>>::into(move _69) -> [return: bb29, unwind: bb78];
    }

    bb29: {
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        _164 = const _;
        _71 = &(*_164);
        _70 = <LendingError as ToString>::to_string(move _71) -> [return: bb30, unwind: bb78];
    }

    bb30: {
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\switchboard.rs", line: const 58_u32 };
        _74 = anchor_lang::error::ErrorOrigin::Source(move _75);
        StorageDead(_75);
        _73 = std::option::Option::<ErrorOrigin>::Some(move _74);
        StorageDead(_74);
        StorageLive(_76);
        _76 = std::option::Option::<ComparedValues>::None;
        _64 = anchor_lang::error::AnchorError { error_name: move _65, error_code_number: move _68, error_msg: move _70, error_origin: move _73, compared_values: move _76 };
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_65);
        _63 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _64) -> [return: bb31, unwind: bb79];
    }

    bb31: {
        StorageDead(_64);
        _58 = std::option::Option::<rust_decimal::decimal::Decimal>::ok_or::<anchor_lang::error::Error>(move _59, move _63) -> [return: bb32, unwind: bb79];
    }

    bb32: {
        StorageDead(_63);
        StorageDead(_59);
        _57 = <std::result::Result<rust_decimal::decimal::Decimal, anchor_lang::error::Error> as Try>::branch(move _58) -> [return: bb33, unwind: bb79];
    }

    bb33: {
        StorageDead(_58);
        _77 = discriminant(_57);
        switchInt(move _77) -> [0: bb34, 1: bb35, otherwise: bb11];
    }

    bb34: {
        StorageLive(_81);
        _81 = ((_57 as Continue).0: rust_decimal::decimal::Decimal);
        _56 = _81;
        StorageDead(_81);
        _172 = discriminant(_57);
        StorageDead(_61);
        StorageDead(_57);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_56;
        _84 = rust_decimal::decimal::Decimal::mantissa(move _85) -> [return: bb37, unwind: bb79];
    }

    bb35: {
        StorageLive(_78);
        _78 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_80);
        _80 = move _78;
        _0 = <std::result::Result<TimestampedPrice, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _80) -> [return: bb36, unwind: bb85];
    }

    bb36: {
        StorageDead(_80);
        StorageDead(_78);
        _182 = discriminant(_57);
        StorageDead(_61);
        StorageDead(_57);
        goto -> bb72;
    }

    bb37: {
        StorageDead(_85);
        _83 = Le(move _84, const 0_i128);
        switchInt(move _83) -> [0: bb44, otherwise: bb38];
    }

    bb38: {
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = const "Switchboard oracle price is zero or negative which is not allowed";
        _88 = &(*_89);
        _87 = solana_program::log::sol_log(move _88) -> [return: bb39, unwind: bb79];
    }

    bb39: {
        StorageDead(_88);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _161 = const _;
        _93 = &(*_161);
        _92 = LendingError::name(move _93) -> [return: bb40, unwind: bb79];
    }

    bb40: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        _96 = LendingError::PriceIsZero;
        _95 = <LendingError as Into<u32>>::into(move _96) -> [return: bb41, unwind: bb77];
    }

    bb41: {
        StorageDead(_96);
        StorageLive(_97);
        StorageLive(_98);
        _160 = const _;
        _98 = &(*_160);
        _97 = <LendingError as ToString>::to_string(move _98) -> [return: bb42, unwind: bb77];
    }

    bb42: {
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\switchboard.rs", line: const 62_u32 };
        _101 = anchor_lang::error::ErrorOrigin::Source(move _102);
        StorageDead(_102);
        _100 = std::option::Option::<ErrorOrigin>::Some(move _101);
        StorageDead(_101);
        StorageLive(_103);
        _103 = std::option::Option::<ComparedValues>::None;
        _91 = anchor_lang::error::AnchorError { error_name: move _92, error_code_number: move _95, error_msg: move _97, error_origin: move _100, compared_values: move _103 };
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_92);
        _90 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _91) -> [return: bb43, unwind: bb79];
    }

    bb43: {
        StorageDead(_91);
        _0 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::Err(move _90);
        StorageDead(_90);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb72;
    }

    bb44: {
        StorageDead(_84);
        _82 = const ();
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_56;
        _106 = rust_decimal::decimal::Decimal::mantissa(move _107) -> [return: bb45, unwind: bb79];
    }

    bb45: {
        StorageDead(_107);
        _105 = <u128 as TryFrom<i128>>::try_from(move _106) -> [return: bb46, unwind: bb79];
    }

    bb46: {
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        _109 = const "a `<= 0` check above guarantees this";
        _108 = &(*_109);
        _104 = std::result::Result::<u128, TryFromIntError>::expect(move _105, move _108) -> [return: bb47, unwind: bb79];
    }

    bb47: {
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_56;
        _110 = rust_decimal::decimal::Decimal::scale(move _111) -> [return: bb48, unwind: bb79];
    }

    bb48: {
        StorageDead(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_32;
        _117 = <Ref<'_, PullFeedAccountData> as Deref>::deref(move _118) -> [return: bb49, unwind: bb79];
    }

    bb49: {
        StorageDead(_118);
        _116 = &((*_117).15: sbod_itf::accounts::CurrentResult);
        _115 = CurrentResult::std_dev(move _116) -> [return: bb50, unwind: bb79];
    }

    bb50: {
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _163 = const _;
        _122 = &(*_163);
        _121 = LendingError::name(move _122) -> [return: bb51, unwind: bb79];
    }

    bb51: {
        StorageDead(_122);
        StorageLive(_124);
        StorageLive(_125);
        _125 = LendingError::SwitchboardV2Error;
        _124 = <LendingError as Into<u32>>::into(move _125) -> [return: bb52, unwind: bb76];
    }

    bb52: {
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        _162 = const _;
        _127 = &(*_162);
        _126 = <LendingError as ToString>::to_string(move _127) -> [return: bb53, unwind: bb76];
    }

    bb53: {
        StorageDead(_127);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\switchboard.rs", line: const 71_u32 };
        _130 = anchor_lang::error::ErrorOrigin::Source(move _131);
        StorageDead(_131);
        _129 = std::option::Option::<ErrorOrigin>::Some(move _130);
        StorageDead(_130);
        StorageLive(_132);
        _132 = std::option::Option::<ComparedValues>::None;
        _120 = anchor_lang::error::AnchorError { error_name: move _121, error_code_number: move _124, error_msg: move _126, error_origin: move _129, compared_values: move _132 };
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_121);
        _119 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _120) -> [return: bb54, unwind: bb79];
    }

    bb54: {
        StorageDead(_120);
        _114 = std::option::Option::<rust_decimal::decimal::Decimal>::ok_or::<anchor_lang::error::Error>(move _115, move _119) -> [return: bb55, unwind: bb79];
    }

    bb55: {
        StorageDead(_119);
        StorageDead(_115);
        _113 = <std::result::Result<rust_decimal::decimal::Decimal, anchor_lang::error::Error> as Try>::branch(move _114) -> [return: bb56, unwind: bb79];
    }

    bb56: {
        StorageDead(_114);
        _133 = discriminant(_113);
        switchInt(move _133) -> [0: bb57, 1: bb58, otherwise: bb11];
    }

    bb57: {
        StorageLive(_137);
        _137 = ((_113 as Continue).0: rust_decimal::decimal::Decimal);
        _112 = _137;
        StorageDead(_137);
        _174 = discriminant(_113);
        StorageDead(_117);
        StorageDead(_113);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_112;
        _142 = rust_decimal::decimal::Decimal::mantissa(move _143) -> [return: bb60, unwind: bb79];
    }

    bb58: {
        StorageLive(_134);
        _134 = move ((_113 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<TimestampedPrice, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _136) -> [return: bb59, unwind: bb84];
    }

    bb59: {
        StorageDead(_136);
        StorageDead(_134);
        _180 = discriminant(_113);
        StorageDead(_117);
        StorageDead(_113);
        goto -> bb71;
    }

    bb60: {
        StorageDead(_143);
        _141 = <u128 as TryFrom<i128>>::try_from(move _142) -> [return: bb61, unwind: bb79];
    }

    bb61: {
        StorageDead(_142);
        StorageLive(_144);
        _144 = {closure@programs\klend\src\utils\prices\switchboard.rs:72:67: 72:70};
        _140 = std::result::Result::<u128, TryFromIntError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\utils\prices\switchboard.rs:72:67: 72:70}>(move _141, move _144) -> [return: bb62, unwind: bb79];
    }

    bb62: {
        StorageDead(_144);
        StorageDead(_141);
        _139 = <std::result::Result<u128, anchor_lang::error::Error> as Try>::branch(move _140) -> [return: bb63, unwind: bb79];
    }

    bb63: {
        StorageDead(_140);
        _145 = discriminant(_139);
        switchInt(move _145) -> [0: bb64, 1: bb65, otherwise: bb11];
    }

    bb64: {
        StorageLive(_149);
        _149 = ((_139 as Continue).0: u128);
        _138 = _149;
        StorageDead(_149);
        _176 = discriminant(_139);
        StorageDead(_139);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_112;
        _150 = rust_decimal::decimal::Decimal::scale(move _151) -> [return: bb67, unwind: bb79];
    }

    bb65: {
        StorageLive(_146);
        _146 = move ((_139 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_148);
        _148 = move _146;
        _0 = <std::result::Result<TimestampedPrice, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _148) -> [return: bb66, unwind: bb83];
    }

    bb66: {
        StorageDead(_148);
        StorageDead(_146);
        _178 = discriminant(_139);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb71;
    }

    bb67: {
        StorageDead(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = {closure@programs\klend\src\utils\prices\switchboard.rs:78:31: 78:38} { price_switchboard_desc_mantissa: _104, price_switchboard_desc_scale: _110, stdev_mantissa: _138, stdev_scale: _150 };
        _152 = Box::<{closure@programs\klend\src\utils\prices\switchboard.rs:78:31: 78:38}>::new(move _153) -> [return: bb68, unwind: bb79];
    }

    bb68: {
        StorageDead(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = move _152;
        _155 = move _156 as std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>> (PointerCoercion(Unsize));
        StorageDead(_156);
        StorageLive(_157);
        _157 = _47;
        _154 = TimestampedPrice { price_load: move _155, timestamp: move _157 };
        StorageDead(_157);
        StorageDead(_155);
        _0 = std::result::Result::<TimestampedPrice, anchor_lang::error::Error>::Ok(move _154);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_138);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_104);
        StorageDead(_56);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_41);
        drop(_32) -> [return: bb69, unwind: bb80];
    }

    bb69: {
        StorageDead(_32);
        drop(_23) -> [return: bb70, unwind: bb82];
    }

    bb70: {
        StorageDead(_23);
        goto -> bb75;
    }

    bb71: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_104);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_56);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_41);
        drop(_32) -> [return: bb73, unwind: bb80];
    }

    bb73: {
        StorageDead(_32);
        drop(_23) -> [return: bb74, unwind: bb82];
    }

    bb74: {
        StorageDead(_23);
        goto -> bb75;
    }

    bb75: {
        return;
    }

    bb76 (cleanup): {
        drop(_121) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_92) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_65) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_32) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_23) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_11) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        resume;
    }

    bb83 (cleanup): {
        _188 = discriminant(_139);
        goto -> bb79;
    }

    bb84 (cleanup): {
        _189 = discriminant(_113);
        goto -> bb79;
    }

    bb85 (cleanup): {
        _190 = discriminant(_57);
        goto -> bb79;
    }

    bb86 (cleanup): {
        _191 = discriminant(_33);
        goto -> bb80;
    }

    bb87 (cleanup): {
        _192 = discriminant(_24);
        goto -> bb82;
    }
}
