// MIR for `liquidate_obligation_checks` before PreCodegen

fn liquidate_obligation_checks(_1: &handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _4: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _10: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _13: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _14: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: ();
    let mut _21: bool;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let _23: &state::reserve::Reserve;
    let mut _24: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let _26: anchor_lang::prelude::Pubkey;
    let mut _27: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _28: !;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: anchor_lang::error::Error;
    let mut _33: anchor_lang::error::AnchorError;
    let mut _34: std::string::String;
    let mut _35: &LendingError;
    let _36: LendingError;
    let mut _37: u32;
    let mut _38: LendingError;
    let mut _39: std::string::String;
    let mut _40: &LendingError;
    let _41: LendingError;
    let mut _42: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _43: anchor_lang::error::ErrorOrigin;
    let mut _44: anchor_lang::error::Source;
    let mut _45: std::option::Option<anchor_lang::error::ComparedValues>;
    let _46: ();
    let mut _47: bool;
    let mut _48: &anchor_lang::prelude::Pubkey;
    let _49: &state::reserve::Reserve;
    let mut _50: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _51: &anchor_lang::prelude::Pubkey;
    let _52: anchor_lang::prelude::Pubkey;
    let mut _53: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _54: !;
    let _55: ();
    let mut _56: &str;
    let _57: &str;
    let mut _58: anchor_lang::error::Error;
    let mut _59: anchor_lang::error::AnchorError;
    let mut _60: std::string::String;
    let mut _61: &LendingError;
    let _62: LendingError;
    let mut _63: u32;
    let mut _64: LendingError;
    let mut _65: std::string::String;
    let mut _66: &LendingError;
    let _67: LendingError;
    let mut _68: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _69: anchor_lang::error::ErrorOrigin;
    let mut _70: anchor_lang::error::Source;
    let mut _71: std::option::Option<anchor_lang::error::ComparedValues>;
    let _72: ();
    let mut _73: bool;
    let mut _74: u64;
    let mut _75: &state::reserve::Reserve;
    let mut _76: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _77: u64;
    let mut _78: !;
    let _79: ();
    let mut _80: &str;
    let _81: &str;
    let mut _82: anchor_lang::error::Error;
    let mut _83: anchor_lang::error::AnchorError;
    let mut _84: std::string::String;
    let mut _85: &LendingError;
    let _86: LendingError;
    let mut _87: u32;
    let mut _88: LendingError;
    let mut _89: std::string::String;
    let mut _90: &LendingError;
    let _91: LendingError;
    let mut _92: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _93: anchor_lang::error::ErrorOrigin;
    let mut _94: anchor_lang::error::Source;
    let mut _95: std::option::Option<anchor_lang::error::ComparedValues>;
    let _96: ();
    let mut _97: bool;
    let mut _98: &anchor_lang::prelude::Pubkey;
    let _99: &state::reserve::Reserve;
    let mut _100: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _101: &anchor_lang::prelude::Pubkey;
    let _102: anchor_lang::prelude::Pubkey;
    let mut _103: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _104: !;
    let _105: ();
    let mut _106: &str;
    let _107: &str;
    let mut _108: anchor_lang::error::Error;
    let mut _109: anchor_lang::error::AnchorError;
    let mut _110: std::string::String;
    let mut _111: &LendingError;
    let _112: LendingError;
    let mut _113: u32;
    let mut _114: LendingError;
    let mut _115: std::string::String;
    let mut _116: &LendingError;
    let _117: LendingError;
    let mut _118: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _119: anchor_lang::error::ErrorOrigin;
    let mut _120: anchor_lang::error::Source;
    let mut _121: std::option::Option<anchor_lang::error::ComparedValues>;
    let _122: ();
    let mut _123: bool;
    let mut _124: &anchor_lang::prelude::Pubkey;
    let _125: &state::reserve::Reserve;
    let mut _126: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _127: &anchor_lang::prelude::Pubkey;
    let _128: anchor_lang::prelude::Pubkey;
    let mut _129: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _130: !;
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: anchor_lang::error::Error;
    let mut _135: anchor_lang::error::AnchorError;
    let mut _136: std::string::String;
    let mut _137: &LendingError;
    let _138: LendingError;
    let mut _139: u32;
    let mut _140: LendingError;
    let mut _141: std::string::String;
    let mut _142: &LendingError;
    let _143: LendingError;
    let mut _144: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _145: anchor_lang::error::ErrorOrigin;
    let mut _146: anchor_lang::error::Source;
    let mut _147: std::option::Option<anchor_lang::error::ComparedValues>;
    let _148: ();
    let mut _149: bool;
    let mut _150: u64;
    let mut _151: &state::reserve::Reserve;
    let mut _152: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _153: u64;
    let mut _154: !;
    let _155: ();
    let mut _156: &str;
    let _157: &str;
    let mut _158: anchor_lang::error::Error;
    let mut _159: anchor_lang::error::AnchorError;
    let mut _160: std::string::String;
    let mut _161: &LendingError;
    let _162: LendingError;
    let mut _163: u32;
    let mut _164: LendingError;
    let mut _165: std::string::String;
    let mut _166: &LendingError;
    let _167: LendingError;
    let mut _168: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _169: anchor_lang::error::ErrorOrigin;
    let mut _170: anchor_lang::error::Source;
    let mut _171: std::option::Option<anchor_lang::error::ComparedValues>;
    let _172: ();
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _174: std::result::Result<(), anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::AccountInfo<'_>;
    let _176: &anchor_lang::prelude::AccountInfo<'_>;
    let _177: anchor_lang::prelude::AccountInfo<'_>;
    let mut _178: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _179: &anchor_lang::prelude::AccountInfo<'_>;
    let _180: &anchor_lang::prelude::AccountInfo<'_>;
    let _181: anchor_lang::prelude::AccountInfo<'_>;
    let mut _182: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _183: isize;
    let mut _185: !;
    let mut _186: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _188: ();
    let mut _189: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _190: std::result::Result<(), anchor_lang::error::Error>;
    let mut _191: &anchor_lang::prelude::AccountInfo<'_>;
    let _192: &anchor_lang::prelude::AccountInfo<'_>;
    let _193: anchor_lang::prelude::AccountInfo<'_>;
    let mut _194: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _195: &anchor_lang::prelude::AccountInfo<'_>;
    let _196: &anchor_lang::prelude::AccountInfo<'_>;
    let _197: anchor_lang::prelude::AccountInfo<'_>;
    let mut _198: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _204: ();
    let mut _217: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _218: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _219: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _220: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _221: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _222: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _223: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _224: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _246: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _247: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _248: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _249: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _250: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _251: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _252: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug repay_reserve => _2;
        let _11: std::cell::Ref<'_, state::reserve::Reserve>;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _19: std::cell::Ref<'_, state::reserve::Reserve>;
        scope 6 {
            debug withdraw_reserve => _11;
            let _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _187: ();
            let _200: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _203: ();
            let mut _205: &LendingError;
            let mut _206: &LendingError;
            let mut _207: &LendingError;
            let mut _208: &LendingError;
            let mut _209: &LendingError;
            let mut _210: &LendingError;
            let mut _211: &LendingError;
            let mut _212: &LendingError;
            let mut _213: &LendingError;
            let mut _214: &LendingError;
            let mut _215: &LendingError;
            let mut _216: &LendingError;
            scope 11 {
                debug residual => _184;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _187;
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _200;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _203;
                scope 18 {
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _19;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _4 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb108];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _2 = move _10;
        StorageDead(_10);
        _225 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &((*_1).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _13 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _14) -> [return: bb7, unwind: bb107];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _9) -> [return: bb6, unwind: bb112];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _239 = discriminant(_3);
        StorageDead(_3);
        goto -> bb94;
    }

    bb7: {
        StorageDead(_14);
        _12 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _13) -> [return: bb8, unwind: bb107];
    }

    bb8: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_19);
        _19 = move ((_12 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _11 = move _19;
        StorageDead(_19);
        _227 = discriminant(_12);
        StorageDead(_12);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_2;
        _23 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _24) -> [return: bb12, unwind: bb106];
    }

    bb10: {
        StorageLive(_16);
        _16 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb11, unwind: bb111];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        _237 = discriminant(_12);
        StorageDead(_12);
        goto -> bb93;
    }

    bb12: {
        StorageDead(_24);
        _22 = &(((*_23).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _217 = deref_copy ((*_1).13: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _245 = (((_217.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _27 = &(*_245);
        _26 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _27) -> [return: bb13, unwind: bb106];
    }

    bb13: {
        _25 = &_26;
        StorageDead(_27);
        _21 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _22, move _25) -> [return: bb14, unwind: bb106];
    }

    bb14: {
        switchInt(move _21) -> [0: bb21, otherwise: bb15];
    }

    bb15: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const "Repay reserve liquidity supply cannot be used as the source liquidity provided";
        _30 = &(*_31);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb16, unwind: bb106];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _206 = const _;
        _35 = &(*_206);
        _34 = LendingError::name(move _35) -> [return: bb17, unwind: bb106];
    }

    bb17: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        _38 = LendingError::InvalidAccountInput;
        _37 = <LendingError as Into<u32>>::into(move _38) -> [return: bb18, unwind: bb105];
    }

    bb18: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _205 = const _;
        _40 = &(*_205);
        _39 = <LendingError as ToString>::to_string(move _40) -> [return: bb19, unwind: bb105];
    }

    bb19: {
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 140_u32 };
        _43 = anchor_lang::error::ErrorOrigin::Source(move _44);
        StorageDead(_44);
        _42 = std::option::Option::<ErrorOrigin>::Some(move _43);
        StorageDead(_43);
        StorageLive(_45);
        _45 = std::option::Option::<ComparedValues>::None;
        _33 = anchor_lang::error::AnchorError { error_name: move _34, error_code_number: move _37, error_msg: move _39, error_origin: move _42, compared_values: move _45 };
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        _32 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _33) -> [return: bb20, unwind: bb106];
    }

    bb20: {
        StorageDead(_33);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _32);
        StorageDead(_32);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb92;
    }

    bb21: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_2;
        _49 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _50) -> [return: bb22, unwind: bb106];
    }

    bb22: {
        StorageDead(_50);
        _48 = &(((*_49).7: state::reserve::ReserveCollateral).2: anchor_lang::prelude::Pubkey);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _218 = deref_copy ((*_1).14: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _246 = (((_218.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _53 = &(*_246);
        _52 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _53) -> [return: bb23, unwind: bb106];
    }

    bb23: {
        _51 = &_52;
        StorageDead(_53);
        _47 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _48, move _51) -> [return: bb24, unwind: bb106];
    }

    bb24: {
        switchInt(move _47) -> [0: bb31, otherwise: bb25];
    }

    bb25: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const "Repay reserve collateral supply cannot be used as the destination collateral provided";
        _56 = &(*_57);
        _55 = solana_program::log::sol_log(move _56) -> [return: bb26, unwind: bb106];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_57);
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _208 = const _;
        _61 = &(*_208);
        _60 = LendingError::name(move _61) -> [return: bb27, unwind: bb106];
    }

    bb27: {
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        _64 = LendingError::InvalidAccountInput;
        _63 = <LendingError as Into<u32>>::into(move _64) -> [return: bb28, unwind: bb104];
    }

    bb28: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        _207 = const _;
        _66 = &(*_207);
        _65 = <LendingError as ToString>::to_string(move _66) -> [return: bb29, unwind: bb104];
    }

    bb29: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 146_u32 };
        _69 = anchor_lang::error::ErrorOrigin::Source(move _70);
        StorageDead(_70);
        _68 = std::option::Option::<ErrorOrigin>::Some(move _69);
        StorageDead(_69);
        StorageLive(_71);
        _71 = std::option::Option::<ComparedValues>::None;
        _59 = anchor_lang::error::AnchorError { error_name: move _60, error_code_number: move _63, error_msg: move _65, error_origin: move _68, compared_values: move _71 };
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        _58 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _59) -> [return: bb30, unwind: bb106];
    }

    bb30: {
        StorageDead(_59);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _58);
        StorageDead(_58);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb92;
    }

    bb31: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_48);
        _46 = const ();
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_2;
        _75 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _76) -> [return: bb32, unwind: bb106];
    }

    bb32: {
        StorageDead(_76);
        _74 = ((*_75).0: u64);
        StorageLive(_77);
        _77 = const _ as u64 (IntToInt);
        _73 = Ne(move _74, move _77);
        switchInt(move _73) -> [0: bb39, otherwise: bb33];
    }

    bb33: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = const "Withdraw reserve version does not match the program version";
        _80 = &(*_81);
        _79 = solana_program::log::sol_log(move _80) -> [return: bb34, unwind: bb106];
    }

    bb34: {
        StorageDead(_80);
        StorageDead(_81);
        StorageDead(_79);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _210 = const _;
        _85 = &(*_210);
        _84 = LendingError::name(move _85) -> [return: bb35, unwind: bb106];
    }

    bb35: {
        StorageDead(_85);
        StorageLive(_87);
        StorageLive(_88);
        _88 = LendingError::ReserveDeprecated;
        _87 = <LendingError as Into<u32>>::into(move _88) -> [return: bb36, unwind: bb103];
    }

    bb36: {
        StorageDead(_88);
        StorageLive(_89);
        StorageLive(_90);
        _209 = const _;
        _90 = &(*_209);
        _89 = <LendingError as ToString>::to_string(move _90) -> [return: bb37, unwind: bb103];
    }

    bb37: {
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 151_u32 };
        _93 = anchor_lang::error::ErrorOrigin::Source(move _94);
        StorageDead(_94);
        _92 = std::option::Option::<ErrorOrigin>::Some(move _93);
        StorageDead(_93);
        StorageLive(_95);
        _95 = std::option::Option::<ComparedValues>::None;
        _83 = anchor_lang::error::AnchorError { error_name: move _84, error_code_number: move _87, error_msg: move _89, error_origin: move _92, compared_values: move _95 };
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_84);
        _82 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _83) -> [return: bb38, unwind: bb106];
    }

    bb38: {
        StorageDead(_83);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _82);
        StorageDead(_82);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb92;
    }

    bb39: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_74);
        _72 = const ();
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &_11;
        _99 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _100) -> [return: bb40, unwind: bb106];
    }

    bb40: {
        StorageDead(_100);
        _98 = &(((*_99).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _219 = deref_copy ((*_1).13: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _247 = (((_219.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _103 = &(*_247);
        _102 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _103) -> [return: bb41, unwind: bb106];
    }

    bb41: {
        _101 = &_102;
        StorageDead(_103);
        _97 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _98, move _101) -> [return: bb42, unwind: bb106];
    }

    bb42: {
        switchInt(move _97) -> [0: bb49, otherwise: bb43];
    }

    bb43: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = const "Withdraw reserve liquidity supply cannot be used as the source liquidity provided";
        _106 = &(*_107);
        _105 = solana_program::log::sol_log(move _106) -> [return: bb44, unwind: bb106];
    }

    bb44: {
        StorageDead(_106);
        StorageDead(_107);
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _212 = const _;
        _111 = &(*_212);
        _110 = LendingError::name(move _111) -> [return: bb45, unwind: bb106];
    }

    bb45: {
        StorageDead(_111);
        StorageLive(_113);
        StorageLive(_114);
        _114 = LendingError::InvalidAccountInput;
        _113 = <LendingError as Into<u32>>::into(move _114) -> [return: bb46, unwind: bb102];
    }

    bb46: {
        StorageDead(_114);
        StorageLive(_115);
        StorageLive(_116);
        _211 = const _;
        _116 = &(*_211);
        _115 = <LendingError as ToString>::to_string(move _116) -> [return: bb47, unwind: bb102];
    }

    bb47: {
        StorageDead(_116);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 156_u32 };
        _119 = anchor_lang::error::ErrorOrigin::Source(move _120);
        StorageDead(_120);
        _118 = std::option::Option::<ErrorOrigin>::Some(move _119);
        StorageDead(_119);
        StorageLive(_121);
        _121 = std::option::Option::<ComparedValues>::None;
        _109 = anchor_lang::error::AnchorError { error_name: move _110, error_code_number: move _113, error_msg: move _115, error_origin: move _118, compared_values: move _121 };
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_110);
        _108 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _109) -> [return: bb48, unwind: bb106];
    }

    bb48: {
        StorageDead(_109);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _108);
        StorageDead(_108);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb92;
    }

    bb49: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_98);
        _96 = const ();
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_11;
        _125 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _126) -> [return: bb50, unwind: bb106];
    }

    bb50: {
        StorageDead(_126);
        _124 = &(((*_125).7: state::reserve::ReserveCollateral).2: anchor_lang::prelude::Pubkey);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _220 = deref_copy ((*_1).14: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _248 = (((_220.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _129 = &(*_248);
        _128 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _129) -> [return: bb51, unwind: bb106];
    }

    bb51: {
        _127 = &_128;
        StorageDead(_129);
        _123 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _124, move _127) -> [return: bb52, unwind: bb106];
    }

    bb52: {
        switchInt(move _123) -> [0: bb59, otherwise: bb53];
    }

    bb53: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = const "Withdraw reserve collateral supply cannot be used as the destination collateral provided";
        _132 = &(*_133);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb54, unwind: bb106];
    }

    bb54: {
        StorageDead(_132);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _214 = const _;
        _137 = &(*_214);
        _136 = LendingError::name(move _137) -> [return: bb55, unwind: bb106];
    }

    bb55: {
        StorageDead(_137);
        StorageLive(_139);
        StorageLive(_140);
        _140 = LendingError::InvalidAccountInput;
        _139 = <LendingError as Into<u32>>::into(move _140) -> [return: bb56, unwind: bb101];
    }

    bb56: {
        StorageDead(_140);
        StorageLive(_141);
        StorageLive(_142);
        _213 = const _;
        _142 = &(*_213);
        _141 = <LendingError as ToString>::to_string(move _142) -> [return: bb57, unwind: bb101];
    }

    bb57: {
        StorageDead(_142);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 160_u32 };
        _145 = anchor_lang::error::ErrorOrigin::Source(move _146);
        StorageDead(_146);
        _144 = std::option::Option::<ErrorOrigin>::Some(move _145);
        StorageDead(_145);
        StorageLive(_147);
        _147 = std::option::Option::<ComparedValues>::None;
        _135 = anchor_lang::error::AnchorError { error_name: move _136, error_code_number: move _139, error_msg: move _141, error_origin: move _144, compared_values: move _147 };
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_136);
        _134 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _135) -> [return: bb58, unwind: bb106];
    }

    bb58: {
        StorageDead(_135);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _134);
        StorageDead(_134);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb92;
    }

    bb59: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        _122 = const ();
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_11;
        _151 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _152) -> [return: bb60, unwind: bb106];
    }

    bb60: {
        StorageDead(_152);
        _150 = ((*_151).0: u64);
        StorageLive(_153);
        _153 = const _ as u64 (IntToInt);
        _149 = Ne(move _150, move _153);
        switchInt(move _149) -> [0: bb67, otherwise: bb61];
    }

    bb61: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = const "Withdraw reserve version does not match the program version";
        _156 = &(*_157);
        _155 = solana_program::log::sol_log(move _156) -> [return: bb62, unwind: bb106];
    }

    bb62: {
        StorageDead(_156);
        StorageDead(_157);
        StorageDead(_155);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _216 = const _;
        _161 = &(*_216);
        _160 = LendingError::name(move _161) -> [return: bb63, unwind: bb106];
    }

    bb63: {
        StorageDead(_161);
        StorageLive(_163);
        StorageLive(_164);
        _164 = LendingError::ReserveDeprecated;
        _163 = <LendingError as Into<u32>>::into(move _164) -> [return: bb64, unwind: bb100];
    }

    bb64: {
        StorageDead(_164);
        StorageLive(_165);
        StorageLive(_166);
        _215 = const _;
        _166 = &(*_215);
        _165 = <LendingError as ToString>::to_string(move _166) -> [return: bb65, unwind: bb100];
    }

    bb65: {
        StorageDead(_166);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 165_u32 };
        _169 = anchor_lang::error::ErrorOrigin::Source(move _170);
        StorageDead(_170);
        _168 = std::option::Option::<ErrorOrigin>::Some(move _169);
        StorageDead(_169);
        StorageLive(_171);
        _171 = std::option::Option::<ComparedValues>::None;
        _159 = anchor_lang::error::AnchorError { error_name: move _160, error_code_number: move _163, error_msg: move _165, error_origin: move _168, compared_values: move _171 };
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_160);
        _158 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _159) -> [return: bb66, unwind: bb106];
    }

    bb66: {
        StorageDead(_159);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _158);
        StorageDead(_158);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb92;
    }

    bb67: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        _148 = const ();
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _221 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _249 = (((_221.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _178 = &(*_249);
        _177 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _178) -> [return: bb68, unwind: bb106];
    }

    bb68: {
        StorageDead(_178);
        _176 = &_177;
        _175 = &(*_176);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _222 = deref_copy ((*_1).13: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _250 = (((_222.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _182 = &(*_250);
        _181 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _182) -> [return: bb69, unwind: bb99];
    }

    bb69: {
        StorageDead(_182);
        _180 = &_181;
        _179 = &(*_180);
        _174 = validate_liquidity_token_extensions(move _175, move _179) -> [return: bb70, unwind: bb98];
    }

    bb70: {
        StorageDead(_179);
        StorageDead(_175);
        _173 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _174) -> [return: bb71, unwind: bb98];
    }

    bb71: {
        StorageDead(_174);
        _183 = discriminant(_173);
        switchInt(move _183) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_187);
        _187 = ((_173 as Continue).0: ());
        _172 = _187;
        StorageDead(_187);
        _229 = discriminant(_173);
        drop(_181) -> [return: bb75, unwind: bb99];
    }

    bb73: {
        StorageLive(_184);
        _184 = move ((_173 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_186);
        _186 = move _184;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _186) -> [return: bb74, unwind: bb110];
    }

    bb74: {
        StorageDead(_186);
        StorageDead(_184);
        _235 = discriminant(_173);
        drop(_181) -> [return: bb90, unwind: bb99];
    }

    bb75: {
        StorageDead(_181);
        StorageDead(_180);
        drop(_177) -> [return: bb76, unwind: bb106];
    }

    bb76: {
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _223 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _251 = (((_223.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _194 = &(*_251);
        _193 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _194) -> [return: bb77, unwind: bb106];
    }

    bb77: {
        StorageDead(_194);
        _192 = &_193;
        _191 = &(*_192);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _224 = deref_copy ((*_1).15: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _252 = (((_224.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _198 = &(*_252);
        _197 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _198) -> [return: bb78, unwind: bb97];
    }

    bb78: {
        StorageDead(_198);
        _196 = &_197;
        _195 = &(*_196);
        _190 = validate_liquidity_token_extensions(move _191, move _195) -> [return: bb79, unwind: bb96];
    }

    bb79: {
        StorageDead(_195);
        StorageDead(_191);
        _189 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _190) -> [return: bb80, unwind: bb96];
    }

    bb80: {
        StorageDead(_190);
        _199 = discriminant(_189);
        switchInt(move _199) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_203);
        _203 = ((_189 as Continue).0: ());
        _188 = _203;
        StorageDead(_203);
        _231 = discriminant(_189);
        drop(_197) -> [return: bb84, unwind: bb97];
    }

    bb82: {
        StorageLive(_200);
        _200 = move ((_189 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_202);
        _202 = move _200;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _202) -> [return: bb83, unwind: bb109];
    }

    bb83: {
        StorageDead(_202);
        StorageDead(_200);
        _233 = discriminant(_189);
        drop(_197) -> [return: bb88, unwind: bb97];
    }

    bb84: {
        StorageDead(_197);
        StorageDead(_196);
        drop(_193) -> [return: bb85, unwind: bb106];
    }

    bb85: {
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_204);
        _204 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _204);
        StorageDead(_204);
        drop(_11) -> [return: bb86, unwind: bb107];
    }

    bb86: {
        StorageDead(_11);
        drop(_2) -> [return: bb87, unwind: bb108];
    }

    bb87: {
        StorageDead(_2);
        goto -> bb95;
    }

    bb88: {
        StorageDead(_197);
        StorageDead(_196);
        drop(_193) -> [return: bb89, unwind: bb106];
    }

    bb89: {
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb92;
    }

    bb90: {
        StorageDead(_181);
        StorageDead(_180);
        drop(_177) -> [return: bb91, unwind: bb106];
    }

    bb91: {
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb92;
    }

    bb92: {
        drop(_11) -> [return: bb93, unwind: bb107];
    }

    bb93: {
        StorageDead(_11);
        drop(_2) -> [return: bb94, unwind: bb108];
    }

    bb94: {
        StorageDead(_2);
        goto -> bb95;
    }

    bb95: {
        return;
    }

    bb96 (cleanup): {
        drop(_197) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_193) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_181) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_177) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_160) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_136) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_110) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_84) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_60) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_34) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_11) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_2) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        resume;
    }

    bb109 (cleanup): {
        _241 = discriminant(_189);
        goto -> bb96;
    }

    bb110 (cleanup): {
        _242 = discriminant(_173);
        goto -> bb98;
    }

    bb111 (cleanup): {
        _243 = discriminant(_12);
        goto -> bb107;
    }

    bb112 (cleanup): {
        _244 = discriminant(_3);
        goto -> bb108;
    }
}
