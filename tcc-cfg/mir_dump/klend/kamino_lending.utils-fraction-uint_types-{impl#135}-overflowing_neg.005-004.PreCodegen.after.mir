// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_neg` after PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_neg(_1: uint_types::U128) -> (uint_types::U128, bool) {
    debug self => _1;
    let mut _0: (utils::fraction::uint_types::U128, bool);
    let mut _2: bool;
    let mut _3: &utils::fraction::uint_types::U128;
    let mut _4: utils::fraction::uint_types::U128;
    let mut _5: utils::fraction::uint_types::U128;
    let mut _6: utils::fraction::uint_types::U128;
    let mut _7: utils::fraction::uint_types::U128;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &_1;
        _2 = uint_types::U128::is_zero(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_4);
        _4 = _1;
        _0 = (move _4, const false);
        StorageDead(_4);
        goto -> bb6;
    }

    bb3: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        _6 = <uint_types::U128 as Not>::not(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        _5 = <uint_types::U128 as Add<i32>>::add(move _6, const 1_i32) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_6);
        _0 = (move _5, const true);
        StorageDead(_5);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_2);
        return;
    }
}
