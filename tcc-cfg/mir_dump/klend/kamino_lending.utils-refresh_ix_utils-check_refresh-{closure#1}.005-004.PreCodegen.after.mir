// MIR for `refresh_ix_utils::check_refresh::{closure#1}` after PreCodegen

fn refresh_ix_utils::check_refresh::{closure#1}(_1: &mut {closure@programs\klend\src\utils\refresh_ix_utils.rs:169:19: 169:60}, _2: (&(anchor_lang::prelude::Pubkey, &reserve::Reserve), &reserve::ReserveFarmKind)) -> () {
    debug obligation_address => (*((*_1).0: &anchor_lang::prelude::Pubkey));
    debug required_pre_ixs => (*((*_1).1: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>));
    debug required_post_ixs => (*((*_1).2: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>));
    let mut _0: ();
    let _3: &anchor_lang::prelude::Pubkey;
    let _4: &&state::reserve::Reserve;
    let _5: &state::reserve::ReserveFarmKind;
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: anchor_lang::prelude::Pubkey;
    let mut _9: &state::reserve::Reserve;
    let mut _10: state::reserve::ReserveFarmKind;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let _12: anchor_lang::prelude::Pubkey;
    let mut _14: utils::refresh_ix_utils::RequiredIxType;
    let mut _15: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize)>;
    let mut _16: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize)]>;
    let mut _17: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize); 3]>;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: *mut u8;
    let mut _21: std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize); 3]>;
    let mut _22: (anchor_lang::prelude::Pubkey, usize);
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: (anchor_lang::prelude::Pubkey, usize);
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: (anchor_lang::prelude::Pubkey, usize);
    let mut _27: anchor_lang::prelude::Pubkey;
    let mut _28: &state::reserve::Reserve;
    let mut _29: state::reserve::ReserveFarmKind;
    let _30: ();
    let mut _31: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _32: utils::refresh_ix_utils::RequiredIx;
    let mut _33: &utils::refresh_ix_utils::RequiredIx;
    let _34: ();
    let mut _35: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _36: utils::refresh_ix_utils::RequiredIx;
    let mut _37: &(anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
    let mut _38: &(anchor_lang::prelude::Pubkey, &state::reserve::Reserve);
    let mut _39: &state::reserve::Reserve;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &state::reserve::Reserve;
    let mut _42: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _43: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _44: bool;
    let mut _45: *const [(anchor_lang::prelude::Pubkey, usize); 3];
    scope 1 {
        debug reserve_address => _3;
        debug reserve => _4;
        debug farm_type => _5;
        let _13: utils::refresh_ix_utils::RequiredIx;
        let mut _46: *const ();
        let mut _47: usize;
        let mut _48: usize;
        let mut _49: usize;
        let mut _50: usize;
        let mut _51: bool;
        scope 2 {
            debug required_ix => _13;
        }
        scope 3 {
        }
    }

    bb0: {
        _44 = const false;
        StorageLive(_3);
        _37 = deref_copy (_2.0: &(anchor_lang::prelude::Pubkey, &state::reserve::Reserve));
        _3 = &((*_37).0: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        _38 = deref_copy (_2.0: &(anchor_lang::prelude::Pubkey, &state::reserve::Reserve));
        _4 = &((*_38).1: &state::reserve::Reserve);
        StorageLive(_5);
        _5 = (_2.1: &state::reserve::ReserveFarmKind);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _39 = deref_copy (*_4);
        _9 = &(*_39);
        StorageLive(_10);
        _10 = (*_5);
        _8 = reserve::Reserve::get_farm(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = &_12;
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _7, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb11, otherwise: bb4];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_13);
        StorageLive(_14);
        _14 = RequiredIxType::RefreshFarmsForObligationForReserve;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _18 = SizeOf([(anchor_lang::prelude::Pubkey, usize); 3]);
        _19 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 3]);
        _20 = alloc::alloc::exchange_malloc(move _18, move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_21);
        _21 = ShallowInitBox(move _20, [(anchor_lang::prelude::Pubkey, usize); 3]);
        StorageLive(_22);
        StorageLive(_23);
        _23 = (*_3);
        _22 = (move _23, const 3_usize);
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _40 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _25 = (*_40);
        _24 = (move _25, const 1_usize);
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _41 = deref_copy (*_4);
        _28 = &(*_41);
        StorageLive(_29);
        _29 = (*_5);
        _27 = reserve::Reserve::get_farm(move _28, move _29) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = (move _27, const 4_usize);
        StorageDead(_27);
        _45 = (((_21.0: std::ptr::Unique<[(anchor_lang::prelude::Pubkey, usize); 3]>).0: std::ptr::NonNull<[(anchor_lang::prelude::Pubkey, usize); 3]>).0: *const [(anchor_lang::prelude::Pubkey, usize); 3]);
        _46 = _45 as *const () (PtrToPtr);
        _47 = _46 as usize (Transmute);
        _48 = AlignOf([(anchor_lang::prelude::Pubkey, usize); 3]);
        _49 = Sub(_48, const 1_usize);
        _50 = BitAnd(_47, _49);
        _51 = Eq(_50, const 0_usize);
        assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb17, unwind unreachable];
    }

    bb7: {
        StorageDead(_16);
        _44 = const true;
        _13 = RequiredIx { kind: move _14, accounts: move _15 };
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_30);
        StorageLive(_31);
        _42 = deref_copy ((*_1).1: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>);
        _31 = &mut (*_42);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_13;
        _32 = <RequiredIx as Clone>::clone(move _33) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        StorageDead(_33);
        _30 = Vec::<RequiredIx>::push(move _31, move _32) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_34);
        StorageLive(_35);
        _43 = deref_copy ((*_1).2: &mut std::vec::Vec<utils::refresh_ix_utils::RequiredIx>);
        _35 = &mut (*_43);
        StorageLive(_36);
        _44 = const false;
        _36 = move _13;
        _34 = Vec::<RequiredIx>::push(move _35, move _36) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        _0 = const ();
        _44 = const false;
        StorageDead(_13);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_7);
        _0 = const ();
        goto -> bb12;
    }

    bb12: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb13 (cleanup): {
        drop(_21) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_13) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_44) -> [0: bb14, otherwise: bb15];
    }

    bb17: {
        (*_45) = [move _22, move _24, move _26];
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        _17 = move _21;
        _16 = move _17 as std::boxed::Box<[(anchor_lang::prelude::Pubkey, usize)]> (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageDead(_17);
        _15 = std::slice::<impl [(anchor_lang::prelude::Pubkey, usize)]>::into_vec::<std::alloc::Global>(move _16) -> [return: bb7, unwind: bb14];
    }
}
