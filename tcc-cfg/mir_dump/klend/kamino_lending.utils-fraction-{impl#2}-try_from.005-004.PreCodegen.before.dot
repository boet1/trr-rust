digraph Mir_0_2416 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn utils::fraction::&lt;impl TryFrom&lt;utils::fraction::BigFraction&gt; for FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;&gt;::try_from(_1: utils::fraction::BigFraction) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, LendingError&gt;<br align="left"/>let _2: u128;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, LendingError&gt;, u128&gt;;<br align="left"/>let mut _4: std::result::Result&lt;u128, LendingError&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u128, &amp;ReErased str&gt;;<br align="left"/>let mut _6: utils::fraction::uint_types::U256;<br align="left"/>let mut _7: Closure(DefId(0:2417 ~ kamino_lending[6389]::utils::fraction::{impl#2}::try_from::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased str,)) -&gt; LendingError, []), ()]);<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let _12: u128;<br align="left"/>let mut _13: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _14: u128;<br align="left"/>debug value =&gt; _1;<br align="left"/>debug repr_faction =&gt; _2;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>>;
    bb0__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = (_1.0: utils::fraction::uint_types::U256)<br/></td></tr><tr><td align="left">_5 = &lt;uint_types::U256 as TryInto&lt;u128&gt;&gt;::try_into(move _6)</td></tr></table>>];
    bb1__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>_7 = {closure@programs\klend\src\utils\fraction.rs:231:22: 231:25}<br/></td></tr><tr><td align="left">_4 = std::result::Result::&lt;u128, &amp;str&gt;::map_err::&lt;LendingError, {closure@programs\klend\src\utils\fraction.rs:231:22: 231:25}&gt;(move _5, move _7)</td></tr></table>>];
    bb2__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;u128, LendingError&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb3__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_8 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_3 as Continue).0: u128)<br/>_2 = _12<br/>StorageDead(_12)<br/>StorageDead(_3)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _2<br/></td></tr><tr><td align="left">_13 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::from_bits(move _14)</td></tr></table>>];
    bb5__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, LendingError&gt;)<br/>StorageLive(_11)<br/>_11 = _9<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, LendingError&gt; as FromResidual&lt;std::result::Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb7__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_0 = std::result::Result::&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, LendingError&gt;::Ok(move _13)<br/>StorageDead(_13)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2416 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2416 -> bb1__0_2416 [label="return"];
    bb1__0_2416 -> bb2__0_2416 [label="return"];
    bb2__0_2416 -> bb3__0_2416 [label="return"];
    bb3__0_2416 -> bb4__0_2416 [label="0"];
    bb3__0_2416 -> bb6__0_2416 [label="1"];
    bb3__0_2416 -> bb5__0_2416 [label="otherwise"];
    bb4__0_2416 -> bb8__0_2416 [label="return"];
    bb6__0_2416 -> bb7__0_2416 [label="return"];
    bb7__0_2416 -> bb9__0_2416 [label=""];
    bb8__0_2416 -> bb9__0_2416 [label=""];
}
