// MIR for `handlers::handler_init_farms_for_reserve::process` before PreCodegen

fn handlers::handler_init_farms_for_reserve::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug mode => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _4: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: std::result::Result<state::reserve::ReserveFarmKind, num_enum::TryFromPrimitiveError<state::reserve::ReserveFarmKind>>;
    let mut _17: u8;
    let _18: ();
    let mut _19: &str;
    let _20: &str;
    let mut _21: &std::string::String;
    let _22: &std::string::String;
    let _23: std::string::String;
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[&str; 2];
    let _28: &[&str; 2];
    let _29: [&str; 2];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let mut _31: &[core::fmt::rt::Argument<'_>; 2];
    let _32: &[core::fmt::rt::Argument<'_>; 2];
    let _33: [core::fmt::rt::Argument<'_>; 2];
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &anchor_lang::prelude::Pubkey;
    let _36: &anchor_lang::prelude::Pubkey;
    let _37: anchor_lang::prelude::Pubkey;
    let mut _38: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &state::reserve::ReserveFarmKind;
    let _41: &state::reserve::ReserveFarmKind;
    let _42: ();
    let mut _43: &mut state::reserve::Reserve;
    let mut _44: &mut state::reserve::Reserve;
    let mut _45: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _46: &anchor_lang::prelude::Pubkey;
    let _47: &anchor_lang::prelude::Pubkey;
    let mut _48: state::reserve::ReserveFarmKind;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _51: std::result::Result<(), anchor_lang::error::Error>;
    let mut _52: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>>;
    let _53: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>>;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _59: ();
    let mut _61: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _62: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _63: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    scope 1 {
        debug reserve => _3;
        let _13: anchor_lang::prelude::Pubkey;
        scope 6 {
            debug farm => _13;
            let _15: state::reserve::ReserveFarmKind;
            scope 7 {
                debug mode => _15;
                let _24: std::string::String;
                let _55: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _58: ();
                let mut _60: &[&str; 2];
                scope 8 {
                    debug res => _24;
                }
                scope 9 {
                    debug residual => _55;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _58;
                    scope 12 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _61 = deref_copy (_1.1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _7 = &((*_61).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _4 = move _12;
        StorageDead(_12);
        _3 = &mut _4;
        _64 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        _62 = deref_copy (_1.1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _14 = &((*_62).6: anchor_lang::prelude::AccountInfo<'_>);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _14) -> [return: bb7, unwind: bb29];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb32];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _70 = discriminant(_5);
        StorageDead(_5);
        goto -> bb26;
    }

    bb7: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = <u8 as TryInto<reserve::ReserveFarmKind>>::try_into(move _17) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        StorageDead(_17);
        _15 = std::result::Result::<reserve::ReserveFarmKind, TryFromPrimitiveError<reserve::ReserveFarmKind>>::unwrap(move _16) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _60 = const _;
        _28 = &(*_60);
        _27 = &(*_28);
        _26 = move _27 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _63 = deref_copy (_1.1: &mut handlers::handler_init_farms_for_reserve::InitFarmsForReserve<'_>);
        _38 = &((*_63).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _37 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _38) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _35) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        StorageDead(_35);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_15;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_debug::<reserve::ReserveFarmKind>(move _40) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        StorageDead(_40);
        _33 = [move _34, move _39];
        StorageDead(_39);
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = move _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_31);
        _25 = Arguments::<'_>::new_v1(move _26, move _30) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_26);
        _24 = format(move _25) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        StorageDead(_25);
        StorageDead(_41);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        _23 = move _24;
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = <std::string::String as Deref>::deref(move _21) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _19 = &(*_20);
        StorageDead(_21);
        _18 = solana_program::log::sol_log(move _19) -> [return: bb16, unwind: bb28];
    }

    bb16: {
        StorageDead(_19);
        drop(_23) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &mut (*_3);
        _44 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _45) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _43 = &mut (*_44);
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_13;
        _46 = &(*_47);
        StorageLive(_48);
        _48 = _15;
        _42 = reserve::Reserve::add_farm(move _43, move _46, move _48) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_1;
        _52 = &(*_53);
        _51 = cpi_initialize_farm_delegated(move _52) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        StorageDead(_52);
        _50 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _51) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        StorageDead(_51);
        _54 = discriminant(_50);
        switchInt(move _54) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_58);
        _58 = ((_50 as Continue).0: ());
        _49 = _58;
        StorageDead(_58);
        _66 = discriminant(_50);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_59);
        _59 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _59);
        StorageDead(_59);
        StorageDead(_15);
        StorageDead(_13);
        drop(_4) -> [return: bb25, unwind: bb30];
    }

    bb23: {
        StorageLive(_55);
        _55 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_57);
        _57 = move _55;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _57) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        StorageDead(_57);
        StorageDead(_55);
        _68 = discriminant(_50);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_15);
        StorageDead(_13);
        drop(_4) -> [return: bb26, unwind: bb30];
    }

    bb25: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_23) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_4) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }

    bb31 (cleanup): {
        _72 = discriminant(_50);
        goto -> bb29;
    }

    bb32 (cleanup): {
        _73 = discriminant(_5);
        goto -> bb30;
    }
}
