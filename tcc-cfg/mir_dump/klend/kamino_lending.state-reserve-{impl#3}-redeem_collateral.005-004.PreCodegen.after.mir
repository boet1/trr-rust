// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::redeem_collateral` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::redeem_collateral(_1: &mut reserve::Reserve, _2: u64) -> std::result::Result<u64, anchor_lang::error::Error> {
    debug self => _1;
    debug collateral_amount => _2;
    let mut _0: std::result::Result<u64, anchor_lang::error::Error>;
    let _3: state::reserve::CollateralExchangeRate;
    let mut _4: &state::reserve::Reserve;
    let mut _6: &state::reserve::CollateralExchangeRate;
    let mut _7: u64;
    let _8: ();
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _10: std::result::Result<(), anchor_lang::error::Error>;
    let mut _11: &mut state::reserve::ReserveCollateral;
    let mut _12: u64;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _18: ();
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _20: std::result::Result<(), anchor_lang::error::Error>;
    let mut _21: &mut state::reserve::ReserveLiquidity;
    let mut _22: u64;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _28: u64;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    scope 1 {
        debug collateral_exchange_rate => _3;
        let _5: u64;
        scope 2 {
            debug liquidity_amount => _5;
            let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _17: ();
            let _24: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _27: ();
            scope 3 {
                debug residual => _14;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _17;
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _24;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _27;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = reserve::Reserve::collateral_exchange_rate(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_3;
        StorageLive(_7);
        _7 = _2;
        _5 = reserve::CollateralExchangeRate::collateral_to_liquidity(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut ((*_1).7: state::reserve::ReserveCollateral);
        StorageLive(_12);
        _12 = _2;
        _10 = ReserveCollateral::burn(move _11, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _10) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: ());
        _8 = _17;
        StorageDead(_17);
        _29 = discriminant(_9);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut ((*_1).5: state::reserve::ReserveLiquidity);
        StorageLive(_22);
        _22 = _5;
        _20 = ReserveLiquidity::withdraw(move _21, move _22) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _16) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        _35 = discriminant(_9);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb14;
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _20) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_20);
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_19 as Continue).0: ());
        _18 = _27;
        StorageDead(_27);
        _31 = discriminant(_19);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_28);
        _28 = _5;
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Ok(move _28);
        StorageDead(_28);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb15;
    }

    bb12: {
        StorageLive(_24);
        _24 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _26) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        _33 = discriminant(_19);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        _37 = discriminant(_19);
        goto -> bb16;
    }

    bb18 (cleanup): {
        _38 = discriminant(_9);
        goto -> bb16;
    }
}
