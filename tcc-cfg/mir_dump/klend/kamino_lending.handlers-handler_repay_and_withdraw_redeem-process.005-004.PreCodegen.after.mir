// MIR for `handlers::handler_repay_and_withdraw_redeem::process` after PreCodegen

fn handlers::handler_repay_and_withdraw_redeem::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>>, _2: u64, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug repay_amount => _2;
    debug withdraw_collateral_amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let _8: &handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _9: &handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>;
    let _10: &handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>;
    let mut _11: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &anchor_lang::prelude::Pubkey;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: ();
    let _20: ();
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _23: std::result::Result<(), anchor_lang::error::Error>;
    let mut _24: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams<'_, '_>;
    let mut _25: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _26: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _27: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _28: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _29: state::reserve::ReserveFarmKind;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _31: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _32: &anchor_lang::prelude::AccountInfo<'_>;
    let _33: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _34: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _35: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _40: ();
    let _41: ();
    let _42: ();
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _44: std::result::Result<(), anchor_lang::error::Error>;
    let mut _45: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams<'_, '_>;
    let mut _46: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _47: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _48: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _49: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _50: state::reserve::ReserveFarmKind;
    let mut _51: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _52: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _53: &anchor_lang::prelude::AccountInfo<'_>;
    let _54: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _55: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _56: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _57: isize;
    let _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _61: ();
    let mut _62: ();
    let mut _63: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _64: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _65: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _66: &anchor_lang::prelude::Pubkey;
    let mut _67: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _68: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _69: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _70: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _71: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _72: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _73: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _74: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _75: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _76: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _37;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _40;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _58;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _61;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _63 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _8 = &((*_63).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        _7 = &(*_8);
        StorageLive(_9);
        StorageLive(_10);
        _64 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _10 = &((*_64).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>);
        _9 = &(*_10);
        StorageLive(_11);
        _65 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _11 = &(*_65);
        StorageLive(_12);
        _66 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _12 = &(*_66);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = _3;
        _6 = handlers::handler_repay_and_withdraw_redeem::process_impl(move _7, move _9, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        StorageDead(_6);
        _15 = discriminant(_5);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = ((_5 as Continue).0: ());
        _4 = _19;
        StorageDead(_19);
        _77 = discriminant(_5);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _67 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _26 = &(((*_67).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _25 = &(*_26);
        StorageLive(_27);
        StorageLive(_28);
        _68 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _28 = &((*_68).2: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _27 = &(*_28);
        StorageLive(_29);
        _29 = reserve::ReserveFarmKind::Collateral;
        _24 = RefreshFarmsParams::<'_, '_> { reserve: move _25, farms_accounts: move _27, farm_kind: move _29 };
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_30);
        StorageLive(_31);
        _69 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _31 = &(((*_69).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _30 = &(*_31);
        StorageLive(_32);
        StorageLive(_33);
        _70 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _33 = &(((*_70).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).3: anchor_lang::prelude::AccountInfo<'_>);
        _32 = &(*_33);
        StorageLive(_34);
        StorageLive(_35);
        _71 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _35 = &(((*_71).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _34 = &(*_35);
        _23 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::<'_, anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::prelude::AccountInfo<'_>>(move _24, move _30, move _32, move _34) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        _87 = discriminant(_5);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        StorageDead(_23);
        _36 = discriminant(_22);
        switchInt(move _36) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_40);
        _40 = ((_22 as Continue).0: ());
        _21 = _40;
        StorageDead(_40);
        _79 = discriminant(_22);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _72 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _47 = &(((*_72).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _46 = &(*_47);
        StorageLive(_48);
        StorageLive(_49);
        _73 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _49 = &((*_73).3: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _48 = &(*_49);
        StorageLive(_50);
        _50 = reserve::ReserveFarmKind::Debt;
        _45 = RefreshFarmsParams::<'_, '_> { reserve: move _46, farms_accounts: move _48, farm_kind: move _50 };
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_51);
        StorageLive(_52);
        _74 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _52 = &(((*_74).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _51 = &(*_52);
        StorageLive(_53);
        StorageLive(_54);
        _75 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _54 = &(((*_75).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).3: anchor_lang::prelude::AccountInfo<'_>);
        _53 = &(*_54);
        StorageLive(_55);
        StorageLive(_56);
        _76 = deref_copy (_1.1: &mut handlers::handler_repay_and_withdraw_redeem::RepayAndWithdraw<'_>);
        _56 = &(((*_76).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _55 = &(*_56);
        _44 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::<'_, anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::prelude::AccountInfo<'_>>(move _45, move _51, move _53, move _55) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_37);
        _37 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _39) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_39);
        StorageDead(_37);
        _85 = discriminant(_22);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb17;
    }

    bb12: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_45);
        _43 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _44) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        StorageDead(_44);
        _57 = discriminant(_43);
        switchInt(move _57) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_61);
        _61 = ((_43 as Continue).0: ());
        _42 = _61;
        StorageDead(_61);
        _81 = discriminant(_43);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        _41 = const ();
        StorageDead(_41);
        _20 = const ();
        StorageDead(_20);
        StorageLive(_62);
        _62 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _62);
        StorageDead(_62);
        goto -> bb18;
    }

    bb15: {
        StorageLive(_58);
        _58 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _60) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_60);
        StorageDead(_58);
        _83 = discriminant(_43);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_20);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        _89 = discriminant(_43);
        goto -> bb19;
    }

    bb21 (cleanup): {
        _90 = discriminant(_22);
        goto -> bb19;
    }

    bb22 (cleanup): {
        _91 = discriminant(_5);
        goto -> bb19;
    }
}
