// MIR for `validate_new_elevation_group` after PreCodegen

fn validate_new_elevation_group(_1: &state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {
    debug elevation_group => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: !;
    let mut _6: anchor_lang::error::Error;
    let mut _7: anchor_lang::error::AnchorError;
    let mut _8: std::string::String;
    let mut _9: &LendingError;
    let _10: LendingError;
    let mut _11: u32;
    let mut _12: LendingError;
    let mut _13: std::string::String;
    let mut _14: &LendingError;
    let _15: LendingError;
    let mut _16: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _17: anchor_lang::error::ErrorOrigin;
    let mut _18: anchor_lang::error::Source;
    let mut _19: std::option::Option<anchor_lang::error::ComparedValues>;
    let _20: ();
    let mut _21: bool;
    let mut _22: u8;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: !;
    let mut _26: anchor_lang::error::Error;
    let mut _27: anchor_lang::error::AnchorError;
    let mut _28: std::string::String;
    let mut _29: &LendingError;
    let _30: LendingError;
    let mut _31: u32;
    let mut _32: LendingError;
    let mut _33: std::string::String;
    let mut _34: &LendingError;
    let _35: LendingError;
    let mut _36: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _37: anchor_lang::error::ErrorOrigin;
    let mut _38: anchor_lang::error::Source;
    let mut _39: std::option::Option<anchor_lang::error::ComparedValues>;
    let _40: ();
    let mut _41: bool;
    let mut _42: u8;
    let mut _43: bool;
    let mut _44: u8;
    let mut _45: bool;
    let mut _46: u8;
    let mut _47: u8;
    let mut _48: bool;
    let mut _49: u16;
    let mut _50: !;
    let mut _51: anchor_lang::error::Error;
    let mut _52: anchor_lang::error::AnchorError;
    let mut _53: std::string::String;
    let mut _54: &LendingError;
    let _55: LendingError;
    let mut _56: u32;
    let mut _57: LendingError;
    let mut _58: std::string::String;
    let mut _59: &LendingError;
    let _60: LendingError;
    let mut _61: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _62: anchor_lang::error::ErrorOrigin;
    let mut _63: anchor_lang::error::Source;
    let mut _64: std::option::Option<anchor_lang::error::ComparedValues>;
    let _65: ();
    let mut _66: bool;
    let mut _67: u8;
    let mut _68: bool;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let _71: anchor_lang::prelude::Pubkey;
    let mut _72: bool;
    let mut _73: u8;
    let mut _74: !;
    let mut _75: anchor_lang::error::Error;
    let mut _76: anchor_lang::error::AnchorError;
    let mut _77: std::string::String;
    let mut _78: &LendingError;
    let _79: LendingError;
    let mut _80: u32;
    let mut _81: LendingError;
    let mut _82: std::string::String;
    let mut _83: &LendingError;
    let _84: LendingError;
    let mut _85: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _86: anchor_lang::error::ErrorOrigin;
    let mut _87: anchor_lang::error::Source;
    let mut _88: std::option::Option<anchor_lang::error::ComparedValues>;
    let _89: ();
    let mut _90: bool;
    let mut _91: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _92: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _93: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _94: u8;
    let mut _95: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _96: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _97: u8;
    let mut _98: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _99: u16;
    let mut _100: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _101: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _102: !;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: anchor_lang::error::Error;
    let mut _107: anchor_lang::error::AnchorError;
    let mut _108: std::string::String;
    let mut _109: &LendingError;
    let _110: LendingError;
    let mut _111: u32;
    let mut _112: LendingError;
    let mut _113: std::string::String;
    let mut _114: &LendingError;
    let _115: LendingError;
    let mut _116: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _117: anchor_lang::error::ErrorOrigin;
    let mut _118: anchor_lang::error::Source;
    let mut _119: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _120: ();
    let mut _121: &LendingError;
    let mut _122: &LendingError;
    let mut _123: &LendingError;
    let mut _124: &LendingError;
    let mut _125: &LendingError;
    let mut _126: &LendingError;
    let mut _127: &LendingError;
    let mut _128: &LendingError;
    let mut _129: &LendingError;
    let mut _130: &LendingError;
    let mut _131: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).1: u8);
        _3 = Gt(move _4, const _);
        switchInt(move _3) -> [0: bb6, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _122 = const _;
        _9 = &(*_122);
        _8 = LendingError::name(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = LendingError::InvalidElevationGroupConfig;
        _11 = <LendingError as Into<u32>>::into(move _12) -> [return: bb3, unwind: bb59];
    }

    bb3: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _121 = const _;
        _14 = &(*_121);
        _13 = <LendingError as ToString>::to_string(move _14) -> [return: bb4, unwind: bb59];
    }

    bb4: {
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_lending_market.rs", line: const 173_u32 };
        _17 = anchor_lang::error::ErrorOrigin::Source(move _18);
        StorageDead(_18);
        _16 = std::option::Option::<ErrorOrigin>::Some(move _17);
        StorageDead(_17);
        StorageLive(_19);
        _19 = std::option::Option::<ComparedValues>::None;
        _7 = anchor_lang::error::AnchorError { error_name: move _8, error_code_number: move _11, error_msg: move _13, error_origin: move _16, compared_values: move _19 };
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_8);
        _6 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _7) -> [return: bb5, unwind: bb60];
    }

    bb5: {
        StorageDead(_7);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _6);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb54;
    }

    bb6: {
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_1).1: u8);
        _21 = Ne(move _22, const _);
        switchInt(move _21) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((*_1).3: u8);
        _23 = Eq(move _24, const 0_u8);
        switchInt(move _23) -> [0: bb14, otherwise: bb9];
    }

    bb8: {
        StorageDead(_22);
        goto -> bb15;
    }

    bb9: {
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _124 = const _;
        _29 = &(*_124);
        _28 = LendingError::name(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        _32 = LendingError::InvalidElevationGroupConfig;
        _31 = <LendingError as Into<u32>>::into(move _32) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        _123 = const _;
        _34 = &(*_123);
        _33 = <LendingError as ToString>::to_string(move _34) -> [return: bb12, unwind: bb58];
    }

    bb12: {
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_lending_market.rs", line: const 178_u32 };
        _37 = anchor_lang::error::ErrorOrigin::Source(move _38);
        StorageDead(_38);
        _36 = std::option::Option::<ErrorOrigin>::Some(move _37);
        StorageDead(_37);
        StorageLive(_39);
        _39 = std::option::Option::<ComparedValues>::None;
        _27 = anchor_lang::error::AnchorError { error_name: move _28, error_code_number: move _31, error_msg: move _33, error_origin: move _36, compared_values: move _39 };
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_28);
        _26 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _27) -> [return: bb13, unwind: bb60];
    }

    bb13: {
        StorageDead(_27);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _26);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb54;
    }

    bb14: {
        StorageDead(_24);
        goto -> bb15;
    }

    bb15: {
        _20 = const ();
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_1).3: u8);
        _41 = Ge(move _42, const 100_u8);
        switchInt(move _41) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_42);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = ((*_1).2: u8);
        _43 = Ge(move _44, const 100_u8);
        switchInt(move _43) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        StorageDead(_44);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = ((*_1).2: u8);
        StorageLive(_47);
        _47 = ((*_1).3: u8);
        _45 = Gt(move _46, move _47);
        switchInt(move _45) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        _49 = ((*_1).0: u16);
        _48 = Gt(move _49, const _);
        switchInt(move _48) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _126 = const _;
        _54 = &(*_126);
        _53 = LendingError::name(move _54) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_49);
        _40 = const ();
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = ((*_1).1: u8);
        _66 = Ne(move _67, const _);
        switchInt(move _66) -> [0: bb29, otherwise: bb28];
    }

    bb24: {
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        _57 = LendingError::InvalidElevationGroupConfig;
        _56 = <LendingError as Into<u32>>::into(move _57) -> [return: bb25, unwind: bb57];
    }

    bb25: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _125 = const _;
        _59 = &(*_125);
        _58 = <LendingError as ToString>::to_string(move _59) -> [return: bb26, unwind: bb57];
    }

    bb26: {
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_lending_market.rs", line: const 187_u32 };
        _62 = anchor_lang::error::ErrorOrigin::Source(move _63);
        StorageDead(_63);
        _61 = std::option::Option::<ErrorOrigin>::Some(move _62);
        StorageDead(_62);
        StorageLive(_64);
        _64 = std::option::Option::<ComparedValues>::None;
        _52 = anchor_lang::error::AnchorError { error_name: move _53, error_code_number: move _56, error_msg: move _58, error_origin: move _61, compared_values: move _64 };
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        _51 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _52) -> [return: bb27, unwind: bb60];
    }

    bb27: {
        StorageDead(_52);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _51);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb54;
    }

    bb28: {
        StorageDead(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &((*_1).7: anchor_lang::prelude::Pubkey);
        StorageLive(_70);
        StorageLive(_71);
        _71 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb30, unwind continue];
    }

    bb29: {
        StorageDead(_67);
        goto -> bb40;
    }

    bb30: {
        _70 = &_71;
        _68 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _69, move _70) -> [return: bb31, unwind continue];
    }

    bb31: {
        switchInt(move _68) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        _73 = ((*_1).5: u8);
        _72 = Eq(move _73, const 0_u8);
        switchInt(move _72) -> [0: bb39, otherwise: bb34];
    }

    bb34: {
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _128 = const _;
        _78 = &(*_128);
        _77 = LendingError::name(move _78) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        _81 = LendingError::InvalidElevationGroupConfig;
        _80 = <LendingError as Into<u32>>::into(move _81) -> [return: bb36, unwind: bb56];
    }

    bb36: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        _127 = const _;
        _83 = &(*_127);
        _82 = <LendingError as ToString>::to_string(move _83) -> [return: bb37, unwind: bb56];
    }

    bb37: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_lending_market.rs", line: const 194_u32 };
        _86 = anchor_lang::error::ErrorOrigin::Source(move _87);
        StorageDead(_87);
        _85 = std::option::Option::<ErrorOrigin>::Some(move _86);
        StorageDead(_86);
        StorageLive(_88);
        _88 = std::option::Option::<ComparedValues>::None;
        _76 = anchor_lang::error::AnchorError { error_name: move _77, error_code_number: move _80, error_msg: move _82, error_origin: move _85, compared_values: move _88 };
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_77);
        _75 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _76) -> [return: bb38, unwind: bb60];
    }

    bb38: {
        StorageDead(_76);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _75);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb54;
    }

    bb39: {
        StorageDead(_73);
        goto -> bb40;
    }

    bb40: {
        _65 = const ();
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ((*_1).3: u8);
        _93 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u8>(move _94) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = ((*_1).3: u8);
        _96 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u8>(move _97) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = ((*_1).0: u16);
        _98 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_bps::<u16>(move _99) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_99);
        _95 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _96, move _98) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_98);
        StorageDead(_96);
        _92 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _93, move _95) -> [return: bb45, unwind continue];
    }

    bb45: {
        _91 = &_92;
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_100);
        _131 = const _;
        _100 = &(*_131);
        _90 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _91, move _100) -> [return: bb46, unwind continue];
    }

    bb46: {
        switchInt(move _90) -> [0: bb53, otherwise: bb47];
    }

    bb47: {
        StorageDead(_100);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = const "Max liquidation bonus * liquidation threshold is greater than 100%, invalid";
        _104 = &(*_105);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_104);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _130 = const _;
        _109 = &(*_130);
        _108 = LendingError::name(move _109) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        _112 = LendingError::InvalidElevationGroupConfig;
        _111 = <LendingError as Into<u32>>::into(move _112) -> [return: bb50, unwind: bb55];
    }

    bb50: {
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        _129 = const _;
        _114 = &(*_129);
        _113 = <LendingError as ToString>::to_string(move _114) -> [return: bb51, unwind: bb55];
    }

    bb51: {
        StorageDead(_114);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_lending_market.rs", line: const 205_u32 };
        _117 = anchor_lang::error::ErrorOrigin::Source(move _118);
        StorageDead(_118);
        _116 = std::option::Option::<ErrorOrigin>::Some(move _117);
        StorageDead(_117);
        StorageLive(_119);
        _119 = std::option::Option::<ComparedValues>::None;
        _107 = anchor_lang::error::AnchorError { error_name: move _108, error_code_number: move _111, error_msg: move _113, error_origin: move _116, compared_values: move _119 };
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_108);
        _106 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _107) -> [return: bb52, unwind: bb60];
    }

    bb52: {
        StorageDead(_107);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _106);
        StorageDead(_106);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb54;
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_92);
        StorageDead(_91);
        _89 = const ();
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_120);
        _120 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _120);
        StorageDead(_120);
        goto -> bb54;
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_108) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_77) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_53) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_28) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_8) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }
}
