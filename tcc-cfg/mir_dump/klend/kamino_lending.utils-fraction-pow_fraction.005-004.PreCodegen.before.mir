// MIR for `pow_fraction` before PreCodegen

fn pow_fraction(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: u32) -> std::option::Option<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>> {
    debug fraction => _1;
    debug power => _2;
    let mut _0: std::option::Option<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u32;
    let mut _6: !;
    let mut _7: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _10: ();
    let mut _11: ();
    let mut _12: bool;
    let mut _13: u32;
    let _14: ();
    let mut _15: bool;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: bool;
    let mut _19: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _20: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _21: std::option::Option<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _22: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::option::Option<std::convert::Infallible>;
    let mut _29: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _31: std::option::Option<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _32: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _33: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::option::Option<std::convert::Infallible>;
    let mut _39: bool;
    let mut _40: !;
    let _41: ();
    let mut _42: !;
    let mut _43: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _44: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug x => _7;
        let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug y => _8;
            let mut _9: u32;
            scope 3 {
                debug n => _9;
                let _25: std::option::Option<std::convert::Infallible>;
                let _28: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                let _35: std::option::Option<std::convert::Infallible>;
                let _38: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug residual => _25;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => _28;
                    scope 7 {
                    }
                }
                scope 8 {
                    debug residual => _35;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _38;
                    scope 11 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        _4 = Eq(move _5, const 0_u32);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        _0 = std::option::Option::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::Some(const _);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb24;
    }

    bb2: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        _7 = _1;
        StorageLive(_8);
        _8 = const _;
        StorageLive(_9);
        _9 = _2;
        StorageLive(_10);
        goto -> bb3;
    }

    bb3: {
        StorageLive(_12);
        StorageLive(_13);
        _13 = _9;
        _12 = Gt(move _13, const 1_u32);
        switchInt(move _12) -> [0: bb21, otherwise: bb4];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _9;
        _18 = Eq(const 2_u32, const 0_u32);
        assert(!move _18, "attempt to calculate the remainder of `{}` with a divisor of zero", _17) -> [success: bb5, unwind continue];
    }

    bb5: {
        _16 = Rem(move _17, const 2_u32);
        StorageDead(_17);
        _15 = Eq(move _16, const 1_u32);
        switchInt(move _15) -> [0: bb13, otherwise: bb6];
    }

    bb6: {
        StorageDead(_16);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _7;
        StorageLive(_23);
        _23 = _8;
        _21 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::checked_mul(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::option::Option<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>> as Try>::branch(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _19 = _28;
        StorageDead(_28);
        _8 = move _19;
        StorageDead(_19);
        StorageDead(_20);
        _14 = const ();
        goto -> bb14;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_20 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::option::Option<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb23;
    }

    bb13: {
        StorageDead(_16);
        _14 = const ();
        goto -> bb14;
    }

    bb14: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _7;
        StorageLive(_33);
        _33 = _7;
        _31 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::checked_mul(move _32, move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::option::Option<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>> as Try>::branch(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        _34 = discriminant(_30);
        switchInt(move _34) -> [0: bb17, 1: bb18, otherwise: bb10];
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_30 as Continue).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _29 = _38;
        StorageDead(_38);
        _7 = move _29;
        StorageDead(_29);
        StorageDead(_30);
        _39 = Eq(const 2_u32, const 0_u32);
        assert(!move _39, "attempt to divide `{}` by zero", _9) -> [success: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_30 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::option::Option<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _37) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_30);
        goto -> bb23;
    }

    bb20: {
        _9 = Div(_9, const 2_u32);
        _11 = const ();
        StorageDead(_12);
        goto -> bb3;
    }

    bb21: {
        StorageDead(_13);
        StorageLive(_41);
        _10 = const ();
        StorageDead(_41);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_43);
        _43 = _7;
        StorageLive(_44);
        _44 = _8;
        _0 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::checked_mul(move _43, move _44) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}
