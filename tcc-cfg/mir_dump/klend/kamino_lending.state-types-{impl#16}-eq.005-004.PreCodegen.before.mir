// MIR for `state::types::<impl at programs\klend\src\state\types.rs:34:24: 34:33>::eq` before PreCodegen

fn state::types::<impl at programs\klend\src\state\types.rs:34:24: 34:33>::eq(_1: &state::types::CalculateLiquidationResult, _2: &state::types::CalculateLiquidationResult) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _5: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: bool;
    let mut _13: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: &state::types::LiquidationReason;
    let mut _16: &state::types::LiquidationReason;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_5);
        _5 = &((*_2).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _3 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb10, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u64);
        StorageLive(_8);
        _8 = ((*_2).1: u64);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb9, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: u64);
        StorageLive(_11);
        _11 = ((*_2).2: u64);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_14);
        _14 = &((*_2).3: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _12 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _13, move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _12) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        _15 = &((*_1).4: state::types::LiquidationReason);
        StorageLive(_16);
        _16 = &((*_2).4: state::types::LiquidationReason);
        _0 = <state::types::LiquidationReason as PartialEq>::eq(move _15, move _16) -> [return: bb12, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb11;
    }

    bb8: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb11;
    }

    bb9: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb11;
    }

    bb11: {
        _0 = const false;
        goto -> bb13;
    }

    bb12: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
