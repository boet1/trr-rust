// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::init` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::init(_1: &mut reserve::Reserve, _2: InitReserveParams) -> () {
    debug self => _1;
    debug params => _2;
    let mut _0: ();
    let mut _3: state::reserve::Reserve;
    let mut _4: state::last_update::LastUpdate;
    let mut _5: u64;
    let mut _6: anchor_lang::prelude::Pubkey;
    let mut _7: state::reserve::ReserveLiquidity;
    let mut _8: state::reserve::ReserveCollateral;
    let mut _9: state::reserve::ReserveConfig;
    let mut _10: std::boxed::Box<state::reserve::ReserveLiquidity>;
    let mut _11: std::boxed::Box<state::reserve::ReserveCollateral>;
    let mut _12: std::boxed::Box<state::reserve::ReserveConfig>;
    let mut _13: *const state::reserve::ReserveLiquidity;
    let mut _14: *const state::reserve::ReserveCollateral;
    let mut _15: *const state::reserve::ReserveConfig;
    let mut _16: *const ();
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: *const ();
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _28: *const ();
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: usize;
    let mut _33: bool;

    bb0: {
        StorageLive(_3);
        _3 = <reserve::Reserve as Default>::default() -> [return: bb1, unwind: bb4];
    }

    bb1: {
        (*_1) = move _3;
        StorageDead(_3);
        ((*_1).0: u64) = const _ as u64 (IntToInt);
        StorageLive(_4);
        StorageLive(_5);
        _5 = (_2.0: u64);
        _4 = last_update::LastUpdate::new(move _5) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        StorageDead(_5);
        ((*_1).1: state::last_update::LastUpdate) = move _4;
        StorageDead(_4);
        StorageLive(_6);
        _6 = (_2.1: anchor_lang::prelude::Pubkey);
        ((*_1).2: anchor_lang::prelude::Pubkey) = move _6;
        StorageDead(_6);
        StorageLive(_7);
        _10 = deref_copy (_2.2: std::boxed::Box<state::reserve::ReserveLiquidity>);
        _13 = (((_10.0: std::ptr::Unique<state::reserve::ReserveLiquidity>).0: std::ptr::NonNull<state::reserve::ReserveLiquidity>).0: *const state::reserve::ReserveLiquidity);
        _28 = _13 as *const () (PtrToPtr);
        _29 = _28 as usize (Transmute);
        _30 = AlignOf(state::reserve::ReserveLiquidity);
        _31 = Sub(_30, const 1_usize);
        _32 = BitAnd(_29, _31);
        _33 = Eq(_32, const 0_usize);
        assert(_33, "misaligned pointer dereference: address must be a multiple of {} but is {}", _30, _29) -> [success: bb8, unwind unreachable];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        _9 = (*_15);
        ((*_1).9: state::reserve::ReserveConfig) = move _9;
        StorageDead(_9);
        _0 = const ();
        drop(_2) -> [return: bb3, unwind: bb5];
    }

    bb7: {
        _8 = (*_14);
        ((*_1).7: state::reserve::ReserveCollateral) = move _8;
        StorageDead(_8);
        StorageLive(_9);
        _12 = deref_copy (_2.4: std::boxed::Box<state::reserve::ReserveConfig>);
        _15 = (((_12.0: std::ptr::Unique<state::reserve::ReserveConfig>).0: std::ptr::NonNull<state::reserve::ReserveConfig>).0: *const state::reserve::ReserveConfig);
        _16 = _15 as *const () (PtrToPtr);
        _17 = _16 as usize (Transmute);
        _18 = AlignOf(state::reserve::ReserveConfig);
        _19 = Sub(_18, const 1_usize);
        _20 = BitAnd(_17, _19);
        _21 = Eq(_20, const 0_usize);
        assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb6, unwind unreachable];
    }

    bb8: {
        _7 = (*_13);
        ((*_1).5: state::reserve::ReserveLiquidity) = move _7;
        StorageDead(_7);
        StorageLive(_8);
        _11 = deref_copy (_2.3: std::boxed::Box<state::reserve::ReserveCollateral>);
        _14 = (((_11.0: std::ptr::Unique<state::reserve::ReserveCollateral>).0: std::ptr::NonNull<state::reserve::ReserveCollateral>).0: *const state::reserve::ReserveCollateral);
        _22 = _14 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(state::reserve::ReserveCollateral);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb7, unwind unreachable];
    }
}
