// MIR for `check_cpi_call` after PreCodegen

fn check_cpi_call(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug instruction_sysvar_account_info => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _3: &anchor_lang::prelude::AccountInfo<'_>;
    let _4: ();
    let mut _5: bool;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _7: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _8: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _9: isize;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _14: !;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: anchor_lang::error::Error;
    let mut _19: anchor_lang::error::AnchorError;
    let mut _20: std::string::String;
    let mut _21: &LendingError;
    let _22: LendingError;
    let mut _23: u32;
    let mut _24: LendingError;
    let mut _25: std::string::String;
    let mut _26: &LendingError;
    let _27: LendingError;
    let mut _28: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _29: anchor_lang::error::ErrorOrigin;
    let mut _30: anchor_lang::error::Source;
    let mut _31: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _32: ();
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    scope 1 {
        debug ix_loader => _2;
        let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _13: bool;
        let mut _33: &LendingError;
        let mut _34: &LendingError;
        scope 2 {
            debug residual => _10;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _13;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        _2 = BpfInstructionLoader::<'_, '_> { instruction_sysvar_account_info: move _3 };
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_2;
        _7 = <BpfInstructionLoader<'_, '_> as InstructionLoader>::is_forbidden_cpi_call(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: bool);
        _5 = _13;
        StorageDead(_13);
        switchInt(move _5) -> [0: bb17, otherwise: bb16];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _39 = discriminant(_6);
        StorageDead(_6);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _34 = const _;
        _21 = &(*_34);
        _20 = LendingError::name(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        _24 = LendingError::CpiDisabled;
        _23 = <LendingError as Into<u32>>::into(move _24) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _33 = const _;
        _26 = &(*_33);
        _25 = <LendingError as ToString>::to_string(move _26) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\refresh_ix_utils.rs", line: const 43_u32 };
        _29 = anchor_lang::error::ErrorOrigin::Source(move _30);
        StorageDead(_30);
        _28 = std::option::Option::<ErrorOrigin>::Some(move _29);
        StorageDead(_29);
        StorageLive(_31);
        _31 = std::option::Option::<ComparedValues>::None;
        _19 = anchor_lang::error::AnchorError { error_name: move _20, error_code_number: move _23, error_msg: move _25, error_origin: move _28, compared_values: move _31 };
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        _18 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _19) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        StorageDead(_19);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _18);
        StorageDead(_18);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        goto -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_20) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        _35 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = const "Instruction was called via CPI!";
        _16 = &(*_17);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb7, unwind continue];
    }

    bb17: {
        _37 = discriminant(_6);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_32);
        _32 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _32);
        StorageDead(_32);
        StorageDead(_2);
        goto -> bb13;
    }

    bb18 (cleanup): {
        _41 = discriminant(_6);
        goto -> bb15;
    }
}
