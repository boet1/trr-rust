// MIR for `handlers::handler_init_referrer_state_and_short_url::process` after PreCodegen

fn handlers::handler_init_referrer_state_and_short_url::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>>, _2: std::string::String) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug short_url => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &mut std::str::Chars<'_>;
    let mut _6: std::str::Chars<'_>;
    let mut _7: &str;
    let _8: &str;
    let mut _9: &std::string::String;
    let mut _10: {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:15:18: 15:24};
    let mut _11: !;
    let mut _12: anchor_lang::error::Error;
    let mut _13: anchor_lang::error::AnchorError;
    let mut _14: std::string::String;
    let mut _15: &LendingError;
    let _16: LendingError;
    let mut _17: u32;
    let mut _18: LendingError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _23: anchor_lang::error::ErrorOrigin;
    let mut _24: anchor_lang::error::Source;
    let mut _25: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _26: anchor_lang::prelude::Pubkey;
    let mut _27: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _28: &anchor_lang::prelude::Signer<'_>;
    let mut _29: &mut state::referral::ShortUrl;
    let mut _30: &mut anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _31: std::string::String;
    let mut _32: &mut state::referral::ShortUrl;
    let mut _33: &mut anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let _34: &mut std::cell::RefMut<'_, state::referral::ReferrerState>;
    let mut _35: std::cell::RefMut<'_, state::referral::ReferrerState>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::referral::ReferrerState>>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::referral::ReferrerState>, anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _43: std::cell::RefMut<'_, state::referral::ReferrerState>;
    let mut _44: anchor_lang::prelude::Pubkey;
    let mut _45: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _46: &mut state::referral::ReferrerState;
    let mut _47: &mut std::cell::RefMut<'_, state::referral::ReferrerState>;
    let mut _48: anchor_lang::prelude::Pubkey;
    let mut _49: &anchor_lang::prelude::Signer<'_>;
    let mut _50: &mut state::referral::ReferrerState;
    let mut _51: &mut std::cell::RefMut<'_, state::referral::ReferrerState>;
    let mut _52: ();
    let mut _53: &LendingError;
    let mut _54: &LendingError;
    let mut _55: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>;
    let mut _56: &anchor_lang::prelude::Pubkey;
    let mut _57: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>;
    let mut _58: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>;
    let mut _59: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>;
    let mut _60: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>;
    let mut _61: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    scope 1 {
        debug referrer_state => _34;
    }
    scope 2 {
        debug residual => _40;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _43;
        scope 5 {
        }
    }

    bb0: {
        _62 = const false;
        _63 = const false;
        _62 = const true;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_2;
        _8 = <std::string::String as Deref>::deref(move _9) -> [return: bb1, unwind: bb36];
    }

    bb1: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = core::str::<impl str>::chars(move _7) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _5 = &mut _6;
        StorageDead(_7);
        StorageLive(_10);
        _10 = {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:15:18: 15:24};
        _4 = <Chars<'_> as Iterator>::all::<{closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:15:18: 15:24}>(move _5, move _10) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_8);
        StorageDead(_6);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _55 = deref_copy (_1.1: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>);
        _28 = &((*_55).0: anchor_lang::prelude::Signer<'_>);
        _27 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _28) -> [return: bb10, unwind: bb36];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _54 = const _;
        _15 = &(*_54);
        _14 = LendingError::name(move _15) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = LendingError::ShortUrlNotAsciiAlphanumeric;
        _17 = <LendingError as Into<u32>>::into(move _18) -> [return: bb7, unwind: bb28];
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _53 = const _;
        _20 = &(*_53);
        _19 = <LendingError as ToString>::to_string(move _20) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_referrer_state_and_short_url.rs", line: const 12_u32 };
        _23 = anchor_lang::error::ErrorOrigin::Source(move _24);
        StorageDead(_24);
        _22 = std::option::Option::<ErrorOrigin>::Some(move _23);
        StorageDead(_23);
        StorageLive(_25);
        _25 = std::option::Option::<ComparedValues>::None;
        _13 = anchor_lang::error::AnchorError { error_name: move _14, error_code_number: move _17, error_msg: move _19, error_origin: move _22, compared_values: move _25 };
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        _12 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _13) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        StorageDead(_13);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _12);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb31;
    }

    bb10: {
        StorageDead(_28);
        _56 = deref_copy ((*_27).0: &anchor_lang::prelude::Pubkey);
        _26 = (*_56);
        StorageLive(_29);
        StorageLive(_30);
        _57 = deref_copy (_1.1: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>);
        _30 = &mut ((*_57).2: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>);
        _29 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as DerefMut>::deref_mut(move _30) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        StorageDead(_30);
        ((*_29).0: anchor_lang::prelude::Pubkey) = move _26;
        StorageDead(_26);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_31);
        _62 = const false;
        _63 = const true;
        _31 = move _2;
        StorageLive(_32);
        StorageLive(_33);
        _58 = deref_copy (_1.1: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>);
        _33 = &mut ((*_58).2: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>);
        _32 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as DerefMut>::deref_mut(move _33) -> [return: bb12, unwind: bb34];
    }

    bb12: {
        StorageDead(_33);
        drop(((*_32).1: std::string::String)) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _63 = const false;
        ((*_32).1: std::string::String) = move _31;
        _63 = const false;
        StorageDead(_31);
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _59 = deref_copy (_1.1: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>);
        _38 = &((*_59).1: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>);
        _37 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerState>::load_init(move _38) -> [return: bb15, unwind: bb36];
    }

    bb14 (cleanup): {
        _63 = const false;
        ((*_32).1: std::string::String) = move _31;
        goto -> bb34;
    }

    bb15: {
        StorageDead(_38);
        _36 = <std::result::Result<RefMut<'_, referral::ReferrerState>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_43);
        _43 = move ((_36 as Continue).0: std::cell::RefMut<'_, state::referral::ReferrerState>);
        _35 = move _43;
        StorageDead(_43);
        _34 = &mut _35;
        _64 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_44);
        StorageLive(_45);
        _60 = deref_copy (_1.1: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>);
        _45 = &((*_60).2: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>);
        _44 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as anchor_lang::Key>::key(move _45) -> [return: bb21, unwind: bb27];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_40);
        _40 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _42) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        _66 = discriminant(_36);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb31;
    }

    bb21: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut (*_34);
        _46 = <RefMut<'_, referral::ReferrerState> as DerefMut>::deref_mut(move _47) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        StorageDead(_47);
        ((*_46).0: anchor_lang::prelude::Pubkey) = move _44;
        StorageDead(_44);
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        _61 = deref_copy (_1.1: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>);
        _49 = &((*_61).0: anchor_lang::prelude::Signer<'_>);
        _48 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _49) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut (*_34);
        _50 = <RefMut<'_, referral::ReferrerState> as DerefMut>::deref_mut(move _51) -> [return: bb24, unwind: bb27];
    }

    bb24: {
        StorageDead(_51);
        ((*_50).1: anchor_lang::prelude::Pubkey) = move _48;
        StorageDead(_48);
        StorageDead(_50);
        StorageLive(_52);
        _52 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _52);
        StorageDead(_52);
        drop(_35) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_35) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_14) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30: {
        drop(_2) -> [return: bb26, unwind: bb29];
    }

    bb31: {
        switchInt(_62) -> [0: bb26, otherwise: bb30];
    }

    bb32 (cleanup): {
        _68 = discriminant(_36);
        goto -> bb36;
    }

    bb33 (cleanup): {
        drop(_31) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_63) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_62) -> [0: bb29, otherwise: bb35];
    }
}
