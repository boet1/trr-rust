// MIR for `update_counter::{closure#4}` before PreCodegen

fn update_counter::{closure#4}(_1: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:90:42: 90:45}, _2: TryFromIntError) -> LendingError {
    let mut _0: LendingError;
    let mut _3: LendingError;
    let _4: LendingError;
    let _5: ();
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[&str; 2];
    let _10: &[&str; 2];
    let _11: [&str; 2];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let mut _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let mut _17: &&LendingError;
    let _18: &&LendingError;
    let _19: &LendingError;
    let mut _20: &[core::fmt::rt::Placeholder];
    let mut _21: &[core::fmt::rt::Placeholder; 1];
    let _22: &[core::fmt::rt::Placeholder; 1];
    let _23: [core::fmt::rt::Placeholder; 1];
    let mut _24: core::fmt::rt::Placeholder;
    let mut _25: core::fmt::rt::Alignment;
    let mut _26: core::fmt::rt::Count;
    let mut _27: core::fmt::rt::Count;
    let mut _28: core::fmt::rt::UnsafeArg;
    scope 1 {
        debug tmp => _4;
        let mut _29: &[&str; 2];
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = LendingError::IntegerOverflow;
        StorageLive(_4);
        _4 = _3;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _29 = const _;
        _10 = &(*_29);
        _9 = &(*_10);
        _8 = move _9 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_4;
        _18 = &_19;
        _17 = &(*_18);
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<&LendingError>(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        _15 = [move _16];
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = move _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_26);
        _26 = core::fmt::rt::Count::Implied;
        StorageLive(_27);
        _27 = core::fmt::rt::Count::Implied;
        _24 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _25, const 4_u32, move _26, move _27) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        _23 = [move _24];
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = move _21 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_28);
        _28 = core::fmt::rt::UnsafeArg::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = Arguments::<'_>::new_v1_formatted(move _8, move _12, move _20, move _28) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_28);
        StorageDead(_20);
        StorageDead(_12);
        StorageDead(_8);
        _6 = _print(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_6);
        _5 = const ();
        StorageDead(_5);
        _0 = _4;
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
