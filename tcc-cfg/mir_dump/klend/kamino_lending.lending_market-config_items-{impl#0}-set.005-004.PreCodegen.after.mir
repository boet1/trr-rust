// MIR for `config_items::<impl at programs\klend\src\lending_market\config_items.rs:94:1: 95:44>::set` after PreCodegen

fn config_items::<impl at programs\klend\src\lending_market\config_items.rs:94:1: 95:44>::set(_1: ConfigItemUpdater<'_, H, T, S, G, V, R>, _2: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug source => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: T;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, T>;
    let mut _5: std::result::Result<T, std::io::Error>;
    let mut _6: &mut &[u8];
    let mut _7: &mut &[u8];
    let mut _8: &[u8];
    let _9: &[u8];
    let mut _10: &[u8];
    let mut _11: std::ops::RangeFull;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _16: T;
    let _23: ();
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _25: std::result::Result<(), anchor_lang::error::Error>;
    let mut _26: &V;
    let mut _27: (&T,);
    let mut _28: &T;
    let _29: &T;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: &G;
    let mut _37: (&H, &T);
    let mut _38: &H;
    let mut _39: &T;
    let _40: &T;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: &std::string::String;
    let _45: &std::string::String;
    let _46: std::string::String;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[&str; 2];
    let _51: &[&str; 2];
    let _52: [&str; 2];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let mut _54: &[core::fmt::rt::Argument<'_>; 2];
    let _55: &[core::fmt::rt::Argument<'_>; 2];
    let _56: [core::fmt::rt::Argument<'_>; 2];
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &std::string::String;
    let _59: &std::string::String;
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &lending_market::config_items::RenderedOption<'_, R, T>;
    let _62: &lending_market::config_items::RenderedOption<'_, R, T>;
    let _63: lending_market::config_items::RenderedOption<'_, R, T>;
    let mut _64: &R;
    let _65: &R;
    let mut _66: std::result::Result<std::option::Option<&T>, anchor_lang::error::Error>;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 2];
    let _81: &[core::fmt::rt::Argument<'_>; 2];
    let _82: [core::fmt::rt::Argument<'_>; 2];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &lending_market::config_items::Rendered<'_, R, T>;
    let _88: &lending_market::config_items::Rendered<'_, R, T>;
    let _89: lending_market::config_items::Rendered<'_, R, T>;
    let mut _90: &R;
    let _91: &R;
    let mut _92: &T;
    let _93: &T;
    let _94: ();
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _96: std::result::Result<(), anchor_lang::error::Error>;
    let mut _97: &S;
    let mut _98: (&mut H, T);
    let mut _99: &mut H;
    let mut _100: T;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _106: ();
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    scope 1 {
        debug new_value => _3;
        let _17: &mut H;
        let _18: std::string::String;
        let _19: G;
        let _20: S;
        let _21: V;
        let _22: R;
        scope 6 {
            debug target => _17;
            debug name => _18;
            debug getter => _19;
            debug setter => _20;
            debug validator => _21;
            debug renderer => _22;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: ();
            let _35: std::result::Result<std::option::Option<&T>, anchor_lang::error::Error>;
            scope 7 {
                debug residual => _31;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _34;
                scope 10 {
                }
            }
            scope 11 {
                debug prv => _35;
                let _47: std::string::String;
                let _73: std::string::String;
                let _102: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _105: ();
                let mut _107: &[&str; 2];
                let mut _108: &[&str; 2];
                scope 12 {
                    debug res => _47;
                }
                scope 13 {
                    debug res => _73;
                }
                scope 14 {
                    debug residual => _102;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _105;
                    scope 17 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        _109 = const false;
        _115 = const false;
        _114 = const false;
        _113 = const false;
        _112 = const false;
        _111 = const false;
        _110 = const false;
        _110 = const true;
        _111 = const true;
        _112 = const true;
        _113 = const true;
        _114 = const true;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_2);
        StorageLive(_11);
        _11 = RangeFull;
        _9 = <[u8] as Index<RangeFull>>::index(move _10, move _11) -> [return: bb1, unwind: bb91];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = &(*_9);
        _7 = &mut _8;
        _6 = &mut (*_7);
        _5 = <T as BorshDeserialize>::deserialize(move _6) -> [return: bb2, unwind: bb91];
    }

    bb2: {
        StorageDead(_6);
        _4 = <std::result::Result<T, std::io::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb91];
    }

    bb3: {
        StorageDead(_5);
        _12 = discriminant(_4);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = move ((_4 as Continue).0: T);
        _109 = const true;
        _3 = move _16;
        StorageDead(_16);
        _116 = discriminant(_4);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_17);
        _17 = move (_1.0: &mut H);
        StorageLive(_18);
        _114 = const false;
        _18 = move (_1.1: std::string::String);
        StorageLive(_19);
        _113 = const false;
        _19 = move (_1.3: G);
        StorageLive(_20);
        _112 = const false;
        _20 = move (_1.2: S);
        StorageLive(_21);
        _111 = const false;
        _21 = move (_1.4: V);
        StorageLive(_22);
        _110 = const false;
        _22 = move (_1.5: R);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &_21;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_3;
        _28 = &(*_29);
        _27 = (move _28,);
        _25 = <V as Fn<(&T,)>>::call(move _26, move _27) -> [return: bb8, unwind: bb51];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _15) -> [return: bb7, unwind: bb81];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        _126 = discriminant(_4);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb45;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb9, unwind: bb51];
    }

    bb9: {
        StorageDead(_25);
        _30 = discriminant(_24);
        switchInt(move _30) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_34);
        _34 = ((_24 as Continue).0: ());
        _23 = _34;
        StorageDead(_34);
        _118 = discriminant(_24);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_19;
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_17);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_3;
        _39 = &(*_40);
        _37 = (move _38, move _39);
        _35 = <G as Fn<(&H, &T)>>::call(move _36, move _37) -> [return: bb13, unwind: bb51];
    }

    bb11: {
        StorageLive(_31);
        _31 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb12, unwind: bb78];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_31);
        _124 = discriminant(_24);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb39;
    }

    bb13: {
        _115 = const true;
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _108 = const _;
        _51 = &(*_108);
        _50 = &(*_51);
        _49 = move _50 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_18;
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _58) -> [return: bb14, unwind: bb77];
    }

    bb14: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_22;
        _64 = &(*_65);
        StorageLive(_66);
        _115 = const false;
        _66 = move _35;
        _63 = RenderedOption::<'_, R, T>(move _64, move _66);
        StorageDead(_66);
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<RenderedOption<'_, R, T>>(move _61) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        StorageDead(_61);
        _56 = [move _57, move _60];
        StorageDead(_60);
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_54);
        _48 = Arguments::<'_>::new_v1(move _49, move _53) -> [return: bb16, unwind: bb50];
    }

    bb16: {
        StorageDead(_53);
        StorageDead(_49);
        _47 = format(move _48) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        StorageDead(_48);
        drop(_63) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        _46 = move _47;
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = <std::string::String as Deref>::deref(move _44) -> [return: bb19, unwind: bb48];
    }

    bb19: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb20, unwind: bb48];
    }

    bb20: {
        StorageDead(_42);
        drop(_46) -> [return: bb21, unwind: bb77];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _107 = const _;
        _77 = &(*_107);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_18;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(move _84) -> [return: bb22, unwind: bb77];
    }

    bb22: {
        StorageDead(_84);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_22;
        _90 = &(*_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_3;
        _92 = &(*_93);
        _89 = Rendered::<'_, R, T>(move _90, move _92);
        StorageDead(_92);
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<Rendered<'_, R, T>>(move _87) -> [return: bb23, unwind: bb77];
    }

    bb23: {
        StorageDead(_87);
        _82 = [move _83, move _86];
        StorageDead(_86);
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb24, unwind: bb77];
    }

    bb24: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb25, unwind: bb77];
    }

    bb25: {
        StorageDead(_74);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <std::string::String as Deref>::deref(move _70) -> [return: bb26, unwind: bb47];
    }

    bb26: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb27, unwind: bb47];
    }

    bb27: {
        StorageDead(_68);
        drop(_72) -> [return: bb28, unwind: bb77];
    }

    bb28: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_20;
        StorageLive(_98);
        StorageLive(_99);
        _99 = &mut (*_17);
        StorageLive(_100);
        _109 = const false;
        _100 = move _3;
        _98 = (move _99, move _100);
        _96 = <S as Fn<(&mut H, T)>>::call(move _97, move _98) -> [return: bb29, unwind: bb77];
    }

    bb29: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        _95 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _96) -> [return: bb30, unwind: bb77];
    }

    bb30: {
        StorageDead(_96);
        _101 = discriminant(_95);
        switchInt(move _101) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_105);
        _105 = ((_95 as Continue).0: ());
        _94 = _105;
        StorageDead(_105);
        _120 = discriminant(_95);
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_106);
        _106 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _106);
        StorageDead(_106);
        _115 = const false;
        StorageDead(_35);
        drop(_22) -> [return: bb34, unwind: bb52];
    }

    bb32: {
        StorageLive(_102);
        _102 = move ((_95 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_104);
        _104 = move _102;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _104) -> [return: bb33, unwind: bb75];
    }

    bb33: {
        StorageDead(_104);
        StorageDead(_102);
        _122 = discriminant(_95);
        StorageDead(_95);
        StorageDead(_94);
        _115 = const false;
        StorageDead(_35);
        goto -> bb39;
    }

    bb34: {
        StorageDead(_22);
        drop(_21) -> [return: bb35, unwind: bb53];
    }

    bb35: {
        StorageDead(_21);
        drop(_20) -> [return: bb36, unwind: bb54];
    }

    bb36: {
        StorageDead(_20);
        drop(_19) -> [return: bb37, unwind: bb55];
    }

    bb37: {
        StorageDead(_19);
        drop(_18) -> [return: bb38, unwind: bb80];
    }

    bb38: {
        StorageDead(_18);
        StorageDead(_17);
        _109 = const false;
        StorageDead(_3);
        goto -> bb46;
    }

    bb39: {
        drop(_22) -> [return: bb40, unwind: bb52];
    }

    bb40: {
        StorageDead(_22);
        drop(_21) -> [return: bb41, unwind: bb53];
    }

    bb41: {
        StorageDead(_21);
        drop(_20) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        StorageDead(_20);
        drop(_19) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        StorageDead(_19);
        drop(_18) -> [return: bb44, unwind: bb80];
    }

    bb44: {
        StorageDead(_18);
        StorageDead(_17);
        switchInt(_109) -> [0: bb45, otherwise: bb57];
    }

    bb45: {
        _109 = const false;
        StorageDead(_3);
        switchInt(_114) -> [0: bb72, otherwise: bb74];
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_72) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_46) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_47) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_63) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_22) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_21) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_20) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_19) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_18) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57: {
        drop(_3) -> [return: bb45, unwind: bb91];
    }

    bb58 (cleanup): {
        switchInt(_110) -> [0: bb56, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((_1.5: R)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_111) -> [0: bb58, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop((_1.4: V)) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_113) -> [0: bb60, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.3: G)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_112) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.2: S)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66: {
        switchInt(_110) -> [0: bb46, otherwise: bb67];
    }

    bb67: {
        drop((_1.5: R)) -> [return: bb46, unwind: bb56];
    }

    bb68: {
        switchInt(_111) -> [0: bb66, otherwise: bb69];
    }

    bb69: {
        drop((_1.4: V)) -> [return: bb66, unwind: bb58];
    }

    bb70: {
        switchInt(_113) -> [0: bb68, otherwise: bb71];
    }

    bb71: {
        drop((_1.3: G)) -> [return: bb68, unwind: bb60];
    }

    bb72: {
        switchInt(_112) -> [0: bb70, otherwise: bb73];
    }

    bb73: {
        drop((_1.2: S)) -> [return: bb70, unwind: bb62];
    }

    bb74: {
        drop((_1.1: std::string::String)) -> [return: bb72, unwind: bb64];
    }

    bb75 (cleanup): {
        _128 = discriminant(_95);
        goto -> bb77;
    }

    bb76 (cleanup): {
        drop(_35) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_115) -> [0: bb51, otherwise: bb76];
    }

    bb78 (cleanup): {
        _129 = discriminant(_24);
        goto -> bb51;
    }

    bb79 (cleanup): {
        drop(_3) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_109) -> [0: bb91, otherwise: bb79];
    }

    bb81 (cleanup): {
        _130 = discriminant(_4);
        goto -> bb91;
    }

    bb82 (cleanup): {
        switchInt(_110) -> [0: bb56, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.5: R)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_111) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.4: V)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_113) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.3: G)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_112) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.2: S)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop((_1.1: std::string::String)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_114) -> [0: bb88, otherwise: bb90];
    }
}
