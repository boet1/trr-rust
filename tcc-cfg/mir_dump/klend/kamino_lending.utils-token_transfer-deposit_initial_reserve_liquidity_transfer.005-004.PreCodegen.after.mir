// MIR for `deposit_initial_reserve_liquidity_transfer` after PreCodegen

fn deposit_initial_reserve_liquidity_transfer(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: anchor_lang::prelude::AccountInfo<'_>, _6: u64, _7: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug source_liquidity_deposit => _1;
    debug destination_liquidity_deposit => _2;
    debug admin_authority => _3;
    debug liquidity_mint => _4;
    debug liquidity_token_program => _5;
    debug liquidity_deposit_amount => _6;
    debug liquidity_decimals => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _8: ();
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: !;
    let mut _12: ();
    let mut _13: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _14: anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _17: anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: u64;
    let mut _22: u8;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;

    bb0: {
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _26 = const true;
        _25 = const true;
        _24 = const true;
        _23 = const true;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _6;
        _9 = Eq(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_12);
        _12 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _12);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        drop(_5) -> [return: bb6, unwind: bb14];
    }

    bb2: {
        StorageDead(_10);
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_5;
        _14 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _15) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _26 = const false;
        _17 = move _1;
        StorageLive(_18);
        _25 = const false;
        _18 = move _2;
        StorageLive(_19);
        _24 = const false;
        _19 = move _3;
        StorageLive(_20);
        _23 = const false;
        _20 = move _4;
        _16 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _17, mint: move _20, to: move _18, authority: move _19 };
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        _13 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new(move _14, move _16) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_21);
        _21 = _6;
        StorageLive(_22);
        _22 = _7;
        _0 = anchor_spl::token_2022::transfer_checked(move _13, move _21, move _22) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_13);
        drop(_5) -> [return: bb10, unwind: bb14];
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        drop(_1) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_4) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_23) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_3) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_24) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_25) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_26) -> [0: bb12, otherwise: bb19];
    }
}
