// MIR for `lending_operations::repay_obligation_liquidity` after PreCodegen

fn lending_operations::repay_obligation_liquidity(_1: &mut reserve::Reserve, _2: &mut obligation::Obligation, _3: &anchor_lang::prelude::Clock, _4: u64, _5: anchor_lang::prelude::Pubkey, _6: &state::lending_market::LendingMarket, _7: impl Iterator<Item = T>) -> std::result::Result<u64, anchor_lang::error::Error> {
    debug repay_reserve => _1;
    debug obligation => _2;
    debug clock => _3;
    debug liquidity_amount => _4;
    debug repay_reserve_pk => _5;
    debug lending_market => _6;
    debug deposit_reserves_iter => _7;
    let mut _0: std::result::Result<u64, anchor_lang::error::Error>;
    let _8: ();
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: !;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: anchor_lang::error::Error;
    let mut _16: anchor_lang::error::AnchorError;
    let mut _17: std::string::String;
    let mut _18: &LendingError;
    let _19: LendingError;
    let mut _20: u32;
    let mut _21: LendingError;
    let mut _22: std::string::String;
    let mut _23: &LendingError;
    let _24: LendingError;
    let mut _25: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _26: anchor_lang::error::ErrorOrigin;
    let mut _27: anchor_lang::error::Source;
    let mut _28: std::option::Option<anchor_lang::error::ComparedValues>;
    let _29: ();
    let mut _30: bool;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _32: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _33: &state::last_update::LastUpdate;
    let mut _34: u64;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _39: bool;
    let mut _40: !;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: anchor_lang::error::Error;
    let mut _45: anchor_lang::error::AnchorError;
    let mut _46: std::string::String;
    let mut _47: &LendingError;
    let _48: LendingError;
    let mut _49: u32;
    let mut _50: LendingError;
    let mut _51: std::string::String;
    let mut _52: &LendingError;
    let _53: LendingError;
    let mut _54: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _55: anchor_lang::error::ErrorOrigin;
    let mut _56: anchor_lang::error::Source;
    let mut _57: std::option::Option<anchor_lang::error::ComparedValues>;
    let _58: ();
    let mut _59: bool;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _61: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _62: &state::last_update::LastUpdate;
    let mut _63: u64;
    let mut _64: isize;
    let _65: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _68: bool;
    let mut _69: !;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: anchor_lang::error::Error;
    let mut _74: anchor_lang::error::AnchorError;
    let mut _75: std::string::String;
    let mut _76: &LendingError;
    let _77: LendingError;
    let mut _78: u32;
    let mut _79: LendingError;
    let mut _80: std::string::String;
    let mut _81: &LendingError;
    let _82: LendingError;
    let mut _83: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _84: anchor_lang::error::ErrorOrigin;
    let mut _85: anchor_lang::error::Source;
    let mut _86: std::option::Option<anchor_lang::error::ComparedValues>;
    let _87: &mut state::obligation::ObligationLiquidity;
    let _88: usize;
    let mut _89: (&mut state::obligation::ObligationLiquidity, usize);
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&mut state::obligation::ObligationLiquidity, usize)>;
    let mut _91: std::result::Result<(&mut state::obligation::ObligationLiquidity, usize), anchor_lang::error::Error>;
    let mut _92: &mut state::obligation::Obligation;
    let mut _93: anchor_lang::prelude::Pubkey;
    let mut _94: isize;
    let _95: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _98: (&mut state::obligation::ObligationLiquidity, usize);
    let _99: ();
    let mut _100: bool;
    let mut _101: u128;
    let mut _102: !;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: anchor_lang::error::Error;
    let mut _107: anchor_lang::error::AnchorError;
    let mut _108: std::string::String;
    let mut _109: &LendingError;
    let _110: LendingError;
    let mut _111: u32;
    let mut _112: LendingError;
    let mut _113: std::string::String;
    let mut _114: &LendingError;
    let _115: LendingError;
    let mut _116: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _117: anchor_lang::error::ErrorOrigin;
    let mut _118: anchor_lang::error::Source;
    let mut _119: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _121: state::reserve::BigFractionBytes;
    let _122: ();
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _124: std::result::Result<(), anchor_lang::error::Error>;
    let mut _125: &mut state::obligation::ObligationLiquidity;
    let mut _126: utils::fraction::BigFraction;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _134: state::types::CalculateRepayResult;
    let mut _135: &state::reserve::Reserve;
    let mut _136: u64;
    let mut _137: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _138: &state::obligation::ObligationLiquidity;
    let _139: ();
    let mut _140: bool;
    let mut _141: u64;
    let mut _142: !;
    let _143: ();
    let mut _144: &str;
    let _145: &str;
    let mut _146: anchor_lang::error::Error;
    let mut _147: anchor_lang::error::AnchorError;
    let mut _148: std::string::String;
    let mut _149: &LendingError;
    let _150: LendingError;
    let mut _151: u32;
    let mut _152: LendingError;
    let mut _153: std::string::String;
    let mut _154: &LendingError;
    let _155: LendingError;
    let mut _156: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _157: anchor_lang::error::ErrorOrigin;
    let mut _158: anchor_lang::error::Source;
    let mut _159: std::option::Option<anchor_lang::error::ComparedValues>;
    let _160: ();
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>>;
    let mut _162: std::result::Result<(), LendingError>;
    let mut _163: &mut state::reserve::WithdrawalCaps;
    let mut _164: &mut state::reserve::WithdrawalCaps;
    let mut _165: u64;
    let mut _166: u64;
    let mut _167: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _168: i64;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, LendingError>;
    let _174: ();
    let mut _175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _176: std::result::Result<(), anchor_lang::error::Error>;
    let mut _177: u64;
    let mut _178: &mut state::obligation::Obligation;
    let mut _179: usize;
    let mut _180: &mut state::reserve::Reserve;
    let mut _181: impl Iterator<Item = T>;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _187: ();
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>>;
    let mut _189: std::result::Result<(), LendingError>;
    let mut _190: &mut state::reserve::ReserveLiquidity;
    let mut _191: u64;
    let mut _192: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, LendingError>;
    let _198: ();
    let mut _199: &mut state::last_update::LastUpdate;
    let _200: ();
    let mut _201: &mut state::obligation::Obligation;
    let mut _202: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _203: usize;
    let _204: ();
    let mut _205: &mut state::obligation::Obligation;
    let _206: ();
    let mut _207: &mut state::last_update::LastUpdate;
    let _208: ();
    let mut _209: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _210: std::result::Result<(), anchor_lang::error::Error>;
    let mut _211: &mut state::obligation::Obligation;
    let mut _212: isize;
    let mut _214: !;
    let mut _215: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _217: ();
    let mut _218: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _219: std::result::Result<(), anchor_lang::error::Error>;
    let mut _220: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _221: &state::obligation::Obligation;
    let mut _222: &state::reserve::Reserve;
    let mut _223: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _224: u128;
    let _225: usize;
    let mut _226: usize;
    let mut _227: bool;
    let mut _228: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _229: u128;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _235: u64;
    let mut _236: &LendingError;
    let mut _237: &LendingError;
    let mut _238: &LendingError;
    let mut _239: &LendingError;
    let mut _240: &LendingError;
    let mut _241: &LendingError;
    let mut _246: bool;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    scope 1 {
        debug residual => _36;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _39;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _65;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _68;
        scope 8 {
        }
    }
    scope 9 {
        debug liquidity => _87;
        debug liquidity_index => _88;
        let _120: utils::fraction::BigFraction;
        let mut _242: &LendingError;
        let mut _243: &LendingError;
        scope 14 {
            debug cumulative_borrow_rate => _120;
            let _128: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _131: ();
            let _132: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            let _133: u64;
            scope 15 {
                debug residual => _128;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _131;
                scope 18 {
                }
            }
            scope 19 {
                debug settle_amount => _132;
                debug repay_amount => _133;
                let _170: std::result::Result<std::convert::Infallible, LendingError>;
                let _173: ();
                let _183: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _186: ();
                let _194: std::result::Result<std::convert::Infallible, LendingError>;
                let _197: ();
                let _213: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _216: ();
                let _231: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _234: ();
                let mut _244: &LendingError;
                let mut _245: &LendingError;
                scope 20 {
                    debug residual => _170;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _173;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug residual => _183;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _186;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug residual => _194;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _197;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug residual => _213;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _216;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug residual => _231;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _234;
                    scope 39 {
                    }
                }
            }
        }
    }
    scope 10 {
        debug residual => _95;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _98;
        scope 13 {
        }
    }

    bb0: {
        _246 = const false;
        _246 = const true;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _4;
        _9 = Eq(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const "Liquidity amount provided cannot be zero";
        _13 = &(*_14);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb2, unwind: bb116];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _237 = const _;
        _18 = &(*_237);
        _17 = LendingError::name(move _18) -> [return: bb3, unwind: bb116];
    }

    bb3: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        _21 = LendingError::InvalidAmount;
        _20 = <LendingError as Into<u32>>::into(move _21) -> [return: bb4, unwind: bb100];
    }

    bb4: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _236 = const _;
        _23 = &(*_236);
        _22 = <LendingError as ToString>::to_string(move _23) -> [return: bb5, unwind: bb100];
    }

    bb5: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 692_u32 };
        _26 = anchor_lang::error::ErrorOrigin::Source(move _27);
        StorageDead(_27);
        _25 = std::option::Option::<ErrorOrigin>::Some(move _26);
        StorageDead(_26);
        StorageLive(_28);
        _28 = std::option::Option::<ComparedValues>::None;
        _16 = anchor_lang::error::AnchorError { error_name: move _17, error_code_number: move _20, error_msg: move _22, error_origin: move _25, compared_values: move _28 };
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_17);
        _15 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _16) -> [return: bb6, unwind: bb116];
    }

    bb6: {
        StorageDead(_16);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _15);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb107;
    }

    bb7: {
        StorageDead(_10);
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_34);
        _34 = ((*_3).0: u64);
        _32 = last_update::LastUpdate::is_stale(move _33, move _34, const _) -> [return: bb8, unwind: bb116];
    }

    bb8: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _32) -> [return: bb9, unwind: bb116];
    }

    bb9: {
        StorageDead(_32);
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_39);
        _39 = ((_31 as Continue).0: bool);
        _30 = _39;
        StorageDead(_39);
        switchInt(move _30) -> [0: bb103, otherwise: bb102];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_36);
        _36 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _38) -> [return: bb13, unwind: bb114];
    }

    bb13: {
        StorageDead(_38);
        StorageDead(_36);
        _277 = discriminant(_31);
        StorageDead(_31);
        goto -> bb94;
    }

    bb14: {
        StorageDead(_42);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _239 = const _;
        _47 = &(*_239);
        _46 = LendingError::name(move _47) -> [return: bb15, unwind: bb116];
    }

    bb15: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        _50 = LendingError::ReserveStale;
        _49 = <LendingError as Into<u32>>::into(move _50) -> [return: bb16, unwind: bb99];
    }

    bb16: {
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        _238 = const _;
        _52 = &(*_238);
        _51 = <LendingError as ToString>::to_string(move _52) -> [return: bb17, unwind: bb99];
    }

    bb17: {
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 700_u32 };
        _55 = anchor_lang::error::ErrorOrigin::Source(move _56);
        StorageDead(_56);
        _54 = std::option::Option::<ErrorOrigin>::Some(move _55);
        StorageDead(_55);
        StorageLive(_57);
        _57 = std::option::Option::<ComparedValues>::None;
        _45 = anchor_lang::error::AnchorError { error_name: move _46, error_code_number: move _49, error_msg: move _51, error_origin: move _54, compared_values: move _57 };
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_46);
        _44 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _45) -> [return: bb18, unwind: bb116];
    }

    bb18: {
        StorageDead(_45);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _44);
        StorageDead(_44);
        goto -> bb94;
    }

    bb19: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _61) -> [return: bb20, unwind: bb116];
    }

    bb20: {
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: bool);
        _59 = _68;
        StorageDead(_68);
        switchInt(move _59) -> [0: bb105, otherwise: bb104];
    }

    bb22: {
        StorageLive(_65);
        _65 = move ((_60 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _67) -> [return: bb23, unwind: bb113];
    }

    bb23: {
        StorageDead(_67);
        StorageDead(_65);
        _275 = discriminant(_60);
        StorageDead(_60);
        goto -> bb93;
    }

    bb24: {
        StorageDead(_71);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _241 = const _;
        _76 = &(*_241);
        _75 = LendingError::name(move _76) -> [return: bb25, unwind: bb116];
    }

    bb25: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        _79 = LendingError::ObligationStale;
        _78 = <LendingError as Into<u32>>::into(move _79) -> [return: bb26, unwind: bb98];
    }

    bb26: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        _240 = const _;
        _81 = &(*_240);
        _80 = <LendingError as ToString>::to_string(move _81) -> [return: bb27, unwind: bb98];
    }

    bb27: {
        StorageDead(_81);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 707_u32 };
        _84 = anchor_lang::error::ErrorOrigin::Source(move _85);
        StorageDead(_85);
        _83 = std::option::Option::<ErrorOrigin>::Some(move _84);
        StorageDead(_84);
        StorageLive(_86);
        _86 = std::option::Option::<ComparedValues>::None;
        _74 = anchor_lang::error::AnchorError { error_name: move _75, error_code_number: move _78, error_msg: move _80, error_origin: move _83, compared_values: move _86 };
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_75);
        _73 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _74) -> [return: bb28, unwind: bb116];
    }

    bb28: {
        StorageDead(_74);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _73);
        StorageDead(_73);
        goto -> bb93;
    }

    bb29: {
        StorageDead(_93);
        StorageDead(_92);
        _90 = <std::result::Result<(&mut obligation::ObligationLiquidity, usize), anchor_lang::error::Error> as Try>::branch(move _91) -> [return: bb30, unwind: bb116];
    }

    bb30: {
        StorageDead(_91);
        _94 = discriminant(_90);
        switchInt(move _94) -> [0: bb31, 1: bb32, otherwise: bb11];
    }

    bb31: {
        StorageLive(_98);
        _98 = move ((_90 as Continue).0: (&mut state::obligation::ObligationLiquidity, usize));
        _89 = move _98;
        StorageDead(_98);
        StorageLive(_87);
        _87 = move (_89.0: &mut state::obligation::ObligationLiquidity);
        StorageLive(_88);
        _88 = (_89.1: usize);
        _255 = discriminant(_90);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = ((*_87).3: u128);
        _100 = Eq(move _101, const 0_u128);
        switchInt(move _100) -> [0: bb40, otherwise: bb34];
    }

    bb32: {
        StorageLive(_95);
        _95 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_97);
        _97 = move _95;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _97) -> [return: bb33, unwind: bb112];
    }

    bb33: {
        StorageDead(_97);
        StorageDead(_95);
        _273 = discriminant(_90);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb107;
    }

    bb34: {
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = const "Liquidity borrowed amount is zero";
        _104 = &(*_105);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb35, unwind: bb116];
    }

    bb35: {
        StorageDead(_104);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _243 = const _;
        _109 = &(*_243);
        _108 = LendingError::name(move _109) -> [return: bb36, unwind: bb116];
    }

    bb36: {
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        _112 = LendingError::ObligationLiquidityEmpty;
        _111 = <LendingError as Into<u32>>::into(move _112) -> [return: bb37, unwind: bb97];
    }

    bb37: {
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        _242 = const _;
        _114 = &(*_242);
        _113 = <LendingError as ToString>::to_string(move _114) -> [return: bb38, unwind: bb97];
    }

    bb38: {
        StorageDead(_114);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 714_u32 };
        _117 = anchor_lang::error::ErrorOrigin::Source(move _118);
        StorageDead(_118);
        _116 = std::option::Option::<ErrorOrigin>::Some(move _117);
        StorageDead(_117);
        StorageLive(_119);
        _119 = std::option::Option::<ComparedValues>::None;
        _107 = anchor_lang::error::AnchorError { error_name: move _108, error_code_number: move _111, error_msg: move _113, error_origin: move _116, compared_values: move _119 };
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_108);
        _106 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _107) -> [return: bb39, unwind: bb116];
    }

    bb39: {
        StorageDead(_107);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _106);
        StorageDead(_106);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb92;
    }

    bb40: {
        StorageDead(_101);
        _99 = const ();
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_120);
        StorageLive(_121);
        _121 = (((*_1).5: state::reserve::ReserveLiquidity).10: state::reserve::BigFractionBytes);
        _120 = <utils::fraction::BigFraction as From<reserve::BigFractionBytes>>::from(move _121) -> [return: bb41, unwind: bb116];
    }

    bb41: {
        StorageDead(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &mut (*_87);
        StorageLive(_126);
        _126 = _120;
        _124 = obligation::ObligationLiquidity::accrue_interest(move _125, move _126) -> [return: bb42, unwind: bb116];
    }

    bb42: {
        StorageDead(_126);
        StorageDead(_125);
        _123 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _124) -> [return: bb43, unwind: bb116];
    }

    bb43: {
        StorageDead(_124);
        _127 = discriminant(_123);
        switchInt(move _127) -> [0: bb44, 1: bb45, otherwise: bb11];
    }

    bb44: {
        StorageLive(_131);
        _131 = ((_123 as Continue).0: ());
        _122 = _131;
        StorageDead(_131);
        _257 = discriminant(_123);
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &(*_1);
        StorageLive(_136);
        _136 = _4;
        StorageLive(_137);
        StorageLive(_138);
        _138 = &(*_87);
        _137 = obligation::ObligationLiquidity::borrowed_amount(move _138) -> [return: bb47, unwind: bb116];
    }

    bb45: {
        StorageLive(_128);
        _128 = move ((_123 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _130) -> [return: bb46, unwind: bb111];
    }

    bb46: {
        StorageDead(_130);
        StorageDead(_128);
        _271 = discriminant(_123);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb91;
    }

    bb47: {
        StorageDead(_138);
        _134 = reserve::Reserve::calculate_repay(move _135, move _136, move _137) -> [return: bb48, unwind: bb116];
    }

    bb48: {
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_132);
        _132 = (_134.0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_133);
        _133 = (_134.1: u64);
        StorageDead(_134);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = _133;
        _140 = Eq(move _141, const 0_u64);
        switchInt(move _140) -> [0: bb55, otherwise: bb49];
    }

    bb49: {
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = const "Repay amount is too small to transfer liquidity";
        _144 = &(*_145);
        _143 = solana_program::log::sol_log(move _144) -> [return: bb50, unwind: bb116];
    }

    bb50: {
        StorageDead(_144);
        StorageDead(_145);
        StorageDead(_143);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _245 = const _;
        _149 = &(*_245);
        _148 = LendingError::name(move _149) -> [return: bb51, unwind: bb116];
    }

    bb51: {
        StorageDead(_149);
        StorageLive(_151);
        StorageLive(_152);
        _152 = LendingError::RepayTooSmall;
        _151 = <LendingError as Into<u32>>::into(move _152) -> [return: bb52, unwind: bb96];
    }

    bb52: {
        StorageDead(_152);
        StorageLive(_153);
        StorageLive(_154);
        _244 = const _;
        _154 = &(*_244);
        _153 = <LendingError as ToString>::to_string(move _154) -> [return: bb53, unwind: bb96];
    }

    bb53: {
        StorageDead(_154);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 731_u32 };
        _157 = anchor_lang::error::ErrorOrigin::Source(move _158);
        StorageDead(_158);
        _156 = std::option::Option::<ErrorOrigin>::Some(move _157);
        StorageDead(_157);
        StorageLive(_159);
        _159 = std::option::Option::<ComparedValues>::None;
        _147 = anchor_lang::error::AnchorError { error_name: move _148, error_code_number: move _151, error_msg: move _153, error_origin: move _156, compared_values: move _159 };
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_148);
        _146 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _147) -> [return: bb54, unwind: bb116];
    }

    bb54: {
        StorageDead(_147);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _146);
        StorageDead(_146);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb90;
    }

    bb55: {
        StorageDead(_141);
        _139 = const ();
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &mut (((*_1).9: state::reserve::ReserveConfig).21: state::reserve::WithdrawalCaps);
        _163 = &mut (*_164);
        StorageLive(_165);
        _165 = _133;
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = ((*_3).4: i64);
        _167 = <u64 as TryFrom<i64>>::try_from(move _168) -> [return: bb56, unwind: bb116];
    }

    bb56: {
        StorageDead(_168);
        _166 = std::result::Result::<u64, TryFromIntError>::unwrap(move _167) -> [return: bb57, unwind: bb116];
    }

    bb57: {
        StorageDead(_167);
        _162 = sub_from_withdrawal_accum(move _163, move _165, move _166) -> [return: bb58, unwind: bb116];
    }

    bb58: {
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_163);
        _161 = <std::result::Result<(), LendingError> as Try>::branch(move _162) -> [return: bb59, unwind: bb116];
    }

    bb59: {
        StorageDead(_162);
        _169 = discriminant(_161);
        switchInt(move _169) -> [0: bb60, 1: bb61, otherwise: bb11];
    }

    bb60: {
        StorageLive(_173);
        _173 = ((_161 as Continue).0: ());
        _160 = _173;
        StorageDead(_173);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = _133;
        StorageLive(_178);
        _178 = &mut (*_2);
        StorageLive(_179);
        _179 = _88;
        StorageLive(_180);
        _180 = &mut (*_1);
        StorageLive(_181);
        _246 = const false;
        _181 = move _7;
        _176 = update_elevation_group_debt_trackers_on_repay::<'_, T, impl Iterator<Item = T>>(move _177, move _178, move _179, move _180, move _181) -> [return: bb63, unwind: bb116];
    }

    bb61: {
        StorageLive(_170);
        _170 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_172);
        _172 = _170;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _172) -> [return: bb62, unwind: bb116];
    }

    bb62: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb90;
    }

    bb63: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        _175 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _176) -> [return: bb64, unwind: bb116];
    }

    bb64: {
        StorageDead(_176);
        _182 = discriminant(_175);
        switchInt(move _182) -> [0: bb65, 1: bb66, otherwise: bb11];
    }

    bb65: {
        StorageLive(_186);
        _186 = ((_175 as Continue).0: ());
        _174 = _186;
        StorageDead(_186);
        _259 = discriminant(_175);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &mut ((*_1).5: state::reserve::ReserveLiquidity);
        StorageLive(_191);
        _191 = _133;
        StorageLive(_192);
        _192 = _132;
        _189 = ReserveLiquidity::repay(move _190, move _191, move _192) -> [return: bb68, unwind: bb116];
    }

    bb66: {
        StorageLive(_183);
        _183 = move ((_175 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_185);
        _185 = move _183;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _185) -> [return: bb67, unwind: bb110];
    }

    bb67: {
        StorageDead(_185);
        StorageDead(_183);
        _269 = discriminant(_175);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb90;
    }

    bb68: {
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        _188 = <std::result::Result<(), LendingError> as Try>::branch(move _189) -> [return: bb69, unwind: bb116];
    }

    bb69: {
        StorageDead(_189);
        _193 = discriminant(_188);
        switchInt(move _193) -> [0: bb70, 1: bb71, otherwise: bb11];
    }

    bb70: {
        StorageLive(_197);
        _197 = ((_188 as Continue).0: ());
        _187 = _197;
        StorageDead(_197);
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &mut ((*_1).1: state::last_update::LastUpdate);
        _198 = last_update::LastUpdate::mark_stale(move _199) -> [return: bb73, unwind: bb116];
    }

    bb71: {
        StorageLive(_194);
        _194 = ((_188 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_196);
        _196 = _194;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _196) -> [return: bb72, unwind: bb116];
    }

    bb72: {
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb90;
    }

    bb73: {
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &mut (*_2);
        StorageLive(_202);
        _202 = _132;
        StorageLive(_203);
        _203 = _88;
        _200 = obligation::Obligation::repay(move _201, move _202, move _203) -> [return: bb74, unwind: bb116];
    }

    bb74: {
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &mut (*_2);
        _204 = obligation::Obligation::update_has_debt(move _205) -> [return: bb75, unwind: bb116];
    }

    bb75: {
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &mut ((*_2).1: state::last_update::LastUpdate);
        _206 = last_update::LastUpdate::mark_stale(move _207) -> [return: bb76, unwind: bb116];
    }

    bb76: {
        StorageDead(_207);
        StorageDead(_206);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &mut (*_2);
        _210 = check_orders_supported_after_user_operation(move _211) -> [return: bb77, unwind: bb116];
    }

    bb77: {
        StorageDead(_211);
        _209 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _210) -> [return: bb78, unwind: bb116];
    }

    bb78: {
        StorageDead(_210);
        _212 = discriminant(_209);
        switchInt(move _212) -> [0: bb79, 1: bb80, otherwise: bb11];
    }

    bb79: {
        StorageLive(_216);
        _216 = ((_209 as Continue).0: ());
        _208 = _216;
        StorageDead(_216);
        _261 = discriminant(_209);
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = _132;
        StorageLive(_221);
        _221 = &(*_2);
        StorageLive(_222);
        _222 = &(*_1);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = _88;
        _226 = Len(((*_2).7: [state::obligation::ObligationLiquidity; 5]));
        _227 = Lt(_225, _226);
        assert(move _227, "index out of bounds: the length is {} but the index is {}", move _226, _225) -> [success: bb82, unwind: bb116];
    }

    bb80: {
        StorageLive(_213);
        _213 = move ((_209 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_215);
        _215 = move _213;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _215) -> [return: bb81, unwind: bb109];
    }

    bb81: {
        StorageDead(_215);
        StorageDead(_213);
        _267 = discriminant(_209);
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb90;
    }

    bb82: {
        _224 = (((*_2).7: [state::obligation::ObligationLiquidity; 5])[_225].4: u128);
        _223 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _224) -> [return: bb83, unwind: bb116];
    }

    bb83: {
        StorageDead(_224);
        StorageLive(_228);
        StorageLive(_229);
        _229 = ((*_6).20: u128);
        _228 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _229) -> [return: bb84, unwind: bb116];
    }

    bb84: {
        StorageDead(_229);
        _219 = post_repay_obligation_invariants(move _220, move _221, move _222, move _223, move _228) -> [return: bb85, unwind: bb116];
    }

    bb85: {
        StorageDead(_228);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        _218 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _219) -> [return: bb86, unwind: bb116];
    }

    bb86: {
        StorageDead(_219);
        _230 = discriminant(_218);
        switchInt(move _230) -> [0: bb87, 1: bb88, otherwise: bb11];
    }

    bb87: {
        StorageLive(_234);
        _234 = ((_218 as Continue).0: ());
        _217 = _234;
        StorageDead(_234);
        _263 = discriminant(_218);
        StorageDead(_225);
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_235);
        _235 = _133;
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Ok(move _235);
        StorageDead(_235);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_120);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb95;
    }

    bb88: {
        StorageLive(_231);
        _231 = move ((_218 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_233);
        _233 = move _231;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _233) -> [return: bb89, unwind: bb108];
    }

    bb89: {
        StorageDead(_233);
        StorageDead(_231);
        _265 = discriminant(_218);
        StorageDead(_225);
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_120);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb107;
    }

    bb93: {
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb107;
    }

    bb94: {
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb107;
    }

    bb95: {
        return;
    }

    bb96 (cleanup): {
        drop(_148) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_108) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_75) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_46) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_17) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        resume;
    }

    bb102: {
        _247 = discriminant(_31);
        StorageDead(_31);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const "Repay reserve is stale and must be refreshed in the current slot";
        _42 = &(*_43);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb14, unwind: bb116];
    }

    bb103: {
        _249 = discriminant(_31);
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_2).1: state::last_update::LastUpdate);
        StorageLive(_63);
        _63 = ((*_3).0: u64);
        _61 = last_update::LastUpdate::is_stale(move _62, move _63, const _) -> [return: bb19, unwind: bb116];
    }

    bb104: {
        _251 = discriminant(_60);
        StorageDead(_60);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = const "Obligation is stale and must be refreshed in the current slot";
        _71 = &(*_72);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb24, unwind: bb116];
    }

    bb105: {
        _253 = discriminant(_60);
        StorageDead(_60);
        _58 = const ();
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &mut (*_2);
        StorageLive(_93);
        _93 = _5;
        _91 = obligation::Obligation::find_liquidity_in_borrows_mut(move _92, move _93) -> [return: bb29, unwind: bb116];
    }

    bb106: {
        drop(_7) -> [return: bb95, unwind: bb101];
    }

    bb107: {
        switchInt(_246) -> [0: bb95, otherwise: bb106];
    }

    bb108 (cleanup): {
        _279 = discriminant(_218);
        goto -> bb116;
    }

    bb109 (cleanup): {
        _280 = discriminant(_209);
        goto -> bb116;
    }

    bb110 (cleanup): {
        _281 = discriminant(_175);
        goto -> bb116;
    }

    bb111 (cleanup): {
        _282 = discriminant(_123);
        goto -> bb116;
    }

    bb112 (cleanup): {
        _283 = discriminant(_90);
        goto -> bb116;
    }

    bb113 (cleanup): {
        _284 = discriminant(_60);
        goto -> bb116;
    }

    bb114 (cleanup): {
        _285 = discriminant(_31);
        goto -> bb116;
    }

    bb115 (cleanup): {
        drop(_7) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_246) -> [0: bb101, otherwise: bb115];
    }
}
