// MIR for `handlers::handler_update_lending_market::__client_accounts_update_lending_market::<impl at programs\klend\src\handlers\handler_update_lending_market.rs:211:10: 211:18>::serialize` after PreCodegen

fn handlers::handler_update_lending_market::__client_accounts_update_lending_market::<impl at programs\klend\src\handlers\handler_update_lending_market.rs:211:10: 211:18>::serialize(_1: &handlers::handler_update_lending_market::__client_accounts_update_lending_market::UpdateLendingMarket, _2: &mut W) -> std::result::Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _5: std::result::Result<(), std::io::Error>;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: &anchor_lang::prelude::Pubkey;
    let mut _8: &mut W;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: &anchor_lang::prelude::Pubkey;
    let _18: &anchor_lang::prelude::Pubkey;
    let mut _19: &mut W;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: ();
    let mut _25: ();
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = &(*_7);
        StorageLive(_8);
        _8 = &mut (*_2);
        _5 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _6, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<(), std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: ());
        _3 = _13;
        StorageDead(_13);
        _26 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_1).1: anchor_lang::prelude::Pubkey);
        _17 = &(*_18);
        StorageLive(_19);
        _19 = &mut (*_2);
        _16 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _17, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _32 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: ());
        _14 = _24;
        StorageDead(_24);
        _28 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        _25 = ();
        _0 = std::result::Result::<(), std::io::Error>::Ok(move _25);
        StorageDead(_25);
        goto -> bb12;
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _30 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        _34 = discriminant(_15);
        goto -> bb13;
    }

    bb15 (cleanup): {
        _35 = discriminant(_4);
        goto -> bb13;
    }
}
