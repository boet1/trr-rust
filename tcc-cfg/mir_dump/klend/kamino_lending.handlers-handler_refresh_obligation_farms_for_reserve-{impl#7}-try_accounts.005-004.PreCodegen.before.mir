// MIR for `handlers::handler_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18>::try_accounts` before PreCodegen

fn handlers::handler_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut RefreshObligationFarmsForReserveBaseBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBaseBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _98: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _99: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _100: &[&[u8]];
    let mut _101: &[&[u8]; 3];
    let _102: &[&[u8]; 3];
    let _103: [&[u8]; 3];
    let mut _104: &[u8];
    let _105: &[u8];
    let mut _106: &[u8];
    let _107: &[u8];
    let mut _108: &anchor_lang::prelude::Pubkey;
    let _109: anchor_lang::prelude::Pubkey;
    let mut _110: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _111: &[u8];
    let _112: &[u8];
    let _113: &[u8];
    let mut _114: &[u8; 1];
    let _115: [u8; 1];
    let mut _116: u8;
    let mut _117: u64;
    let mut _118: &state::lending_market::LendingMarket;
    let mut _119: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _120: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _122: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _123: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _129: std::ops::RangeFull;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let _131: &&anchor_lang::prelude::Pubkey;
    let mut _132: {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _138: ();
    let mut _139: bool;
    let mut _140: &anchor_lang::prelude::Pubkey;
    let _141: anchor_lang::prelude::Pubkey;
    let mut _142: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: &anchor_lang::prelude::Pubkey;
    let mut _144: !;
    let mut _145: anchor_lang::error::Error;
    let mut _146: anchor_lang::error::Error;
    let mut _147: anchor_lang::error::Error;
    let mut _148: anchor_lang::error::ErrorCode;
    let mut _149: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _150: anchor_lang::prelude::Pubkey;
    let mut _151: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _152: anchor_lang::prelude::Pubkey;
    let _153: ();
    let mut _155: &state::reserve::Reserve;
    let mut _156: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _157: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _159: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _161: isize;
    let mut _163: !;
    let mut _164: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _167: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _168: bool;
    let mut _169: &anchor_lang::prelude::Pubkey;
    let mut _170: &anchor_lang::prelude::Pubkey;
    let mut _171: !;
    let mut _172: anchor_lang::error::Error;
    let mut _173: anchor_lang::error::Error;
    let mut _174: anchor_lang::error::Error;
    let mut _175: anchor_lang::error::ErrorCode;
    let mut _176: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _177: anchor_lang::prelude::Pubkey;
    let mut _178: anchor_lang::prelude::Pubkey;
    let _179: ();
    let mut _180: bool;
    let mut _181: &bool;
    let mut _182: !;
    let mut _183: anchor_lang::error::Error;
    let mut _184: anchor_lang::error::Error;
    let mut _185: anchor_lang::error::ErrorCode;
    let _186: ();
    let mut _187: bool;
    let mut _188: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _189: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let _190: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _191: !;
    let mut _192: anchor_lang::error::Error;
    let mut _193: anchor_lang::error::Error;
    let mut _194: anchor_lang::error::ErrorCode;
    let mut _195: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let mut _196: anchor_lang::prelude::AccountInfo<'_>;
    let mut _197: anchor_lang::prelude::AccountInfo<'_>;
    let mut _198: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _199: anchor_lang::prelude::AccountInfo<'_>;
    let mut _200: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _201: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _202: &anchor_lang::prelude::Pubkey;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    scope 1 {
        debug obligation => _6;
        let _21: anchor_lang::prelude::AccountInfo<'_>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountInfo<'_>;
        scope 6 {
            debug lending_market_authority => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
            scope 11 {
                debug reserve => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug reserve_farm_state => _51;
                    let _66: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
                    scope 21 {
                        debug obligation_farm_user_state => _66;
                        let _81: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                        scope 26 {
                            debug lending_market => _81;
                            let _96: anchor_lang::prelude::Pubkey;
                            let _125: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _128: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                            let _134: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _137: anchor_lang::prelude::Pubkey;
                            scope 31 {
                                debug __pda_address => _96;
                                let _154: anchor_lang::prelude::Pubkey;
                                let _162: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _165: std::cell::Ref<'_, state::reserve::Reserve>;
                                scope 40 {
                                    debug my_key => _154;
                                    let _166: anchor_lang::prelude::Pubkey;
                                    scope 45 {
                                        debug target_key => _166;
                                    }
                                }
                                scope 41 {
                                    debug residual => _162;
                                    scope 42 {
                                    }
                                }
                                scope 43 {
                                    debug val => _165;
                                    scope 44 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _125;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _128;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug residual => _134;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _137;
                                scope 39 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _207 = const false;
        _204 = const false;
        _203 = const false;
        _206 = const false;
        _205 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBaseBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
        _8 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18}>(move _9, move _15) -> [return: bb2, unwind: bb98];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb98];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _6 = move _20;
        StorageDead(_20);
        _208 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBaseBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind: bb97];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb112];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _242 = discriminant(_7);
        StorageDead(_7);
        goto -> bb91;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18}>(move _24, move _30) -> [return: bb9, unwind: bb97];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb97];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _21 = move _35;
        StorageDead(_35);
        _210 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBaseBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb96];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb111];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _240 = discriminant(_22);
        StorageDead(_22);
        goto -> bb90;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18}>(move _39, move _45) -> [return: bb15, unwind: bb96];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb96];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _36 = move _50;
        StorageDead(_50);
        _212 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBaseBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb96];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb110];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _238 = discriminant(_37);
        StorageDead(_37);
        goto -> bb89;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18}>(move _54, move _60) -> [return: bb21, unwind: bb96];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb96];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _214 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, UserState> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBaseBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb95];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb109];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _236 = discriminant(_52);
        StorageDead(_52);
        goto -> bb88;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserState>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18}>(move _69, move _75) -> [return: bb27, unwind: bb95];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserState>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb95];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>);
        _66 = move _80;
        StorageDead(_80);
        _216 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, RefreshObligationFarmsForReserveBaseBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb95];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _234 = discriminant(_67);
        StorageDead(_67);
        goto -> bb87;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
        _83 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18}>(move _84, move _90) -> [return: bb33, unwind: bb95];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb95];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _81 = move _95;
        StorageDead(_95);
        _218 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = const _;
        _104 = &(*_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_81;
        _109 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _110) -> [return: bb38, unwind: bb95];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb107];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _232 = discriminant(_82);
        StorageDead(_82);
        goto -> bb86;
    }

    bb38: {
        _108 = &_109;
        StorageDead(_110);
        _107 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _108) -> [return: bb39, unwind: bb95];
    }

    bb39: {
        _106 = &(*_107);
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_81;
        _122 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _123) -> [return: bb40, unwind: bb95];
    }

    bb40: {
        StorageDead(_123);
        _121 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _122) -> [return: bb41, unwind: bb95];
    }

    bb41: {
        _203 = const true;
        _204 = const true;
        StorageDead(_122);
        _124 = discriminant(_121);
        switchInt(move _124) -> [0: bb42, 1: bb43, otherwise: bb5];
    }

    bb42: {
        StorageLive(_128);
        _128 = move ((_121 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _120 = move _128;
        StorageDead(_128);
        _119 = &_120;
        _118 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _119) -> [return: bb45, unwind: bb94];
    }

    bb43: {
        StorageLive(_125);
        _125 = move ((_121 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _127) -> [return: bb44, unwind: bb106];
    }

    bb44: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb101;
    }

    bb45: {
        StorageDead(_119);
        _117 = ((*_118).1: u64);
        _116 = move _117 as u8 (IntToInt);
        StorageDead(_117);
        _115 = [move _116];
        _114 = &_115;
        StorageDead(_116);
        StorageLive(_129);
        _129 = RangeFull;
        _113 = <[u8; 1] as Index<RangeFull>>::index(move _114, move _129) -> [return: bb46, unwind: bb94];
    }

    bb46: {
        StorageDead(_129);
        StorageDead(_114);
        _112 = &(*_113);
        _111 = &(*_112);
        _103 = [move _104, move _106, move _111];
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = move _101 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_101);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_1;
        _202 = deref_copy (*_131);
        _130 = &(*_202);
        _99 = anchor_lang::prelude::Pubkey::create_program_address(move _100, move _130) -> [return: bb47, unwind: bb94];
    }

    bb47: {
        StorageDead(_130);
        StorageDead(_100);
        StorageLive(_132);
        _132 = {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18};
        _98 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:89:10: 89:18}>(move _99, move _132) -> [return: bb48, unwind: bb94];
    }

    bb48: {
        StorageDead(_132);
        StorageDead(_99);
        _97 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb49, unwind: bb94];
    }

    bb49: {
        StorageDead(_98);
        _133 = discriminant(_97);
        switchInt(move _133) -> [0: bb50, 1: bb51, otherwise: bb5];
    }

    bb50: {
        StorageLive(_137);
        _137 = ((_97 as Continue).0: anchor_lang::prelude::Pubkey);
        _96 = _137;
        StorageDead(_137);
        _220 = discriminant(_97);
        StorageDead(_131);
        drop(_120) -> [return: bb99, unwind: bb106];
    }

    bb51: {
        StorageLive(_134);
        _134 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _136) -> [return: bb52, unwind: bb105];
    }

    bb52: {
        StorageDead(_136);
        StorageDead(_134);
        _228 = discriminant(_97);
        StorageDead(_131);
        drop(_120) -> [return: bb101, unwind: bb106];
    }

    bb53: {
        _140 = &_141;
        StorageDead(_142);
        StorageLive(_143);
        _143 = &_96;
        _139 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _140, move _143) -> [return: bb54, unwind: bb95];
    }

    bb54: {
        switchInt(move _139) -> [0: bb60, otherwise: bb55];
    }

    bb55: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = ConstraintSeeds;
        _147 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _148) -> [return: bb56, unwind: bb95];
    }

    bb56: {
        StorageDead(_148);
        _146 = anchor_lang::error::Error::with_account_name::<&str>(move _147, const "lending_market_authority") -> [return: bb57, unwind: bb95];
    }

    bb57: {
        _207 = const true;
        StorageDead(_147);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_21;
        _150 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _151) -> [return: bb58, unwind: bb104];
    }

    bb58: {
        StorageDead(_151);
        StorageLive(_152);
        _152 = _96;
        _149 = (move _150, move _152);
        StorageDead(_152);
        StorageDead(_150);
        _207 = const false;
        _145 = anchor_lang::error::Error::with_pubkeys(move _146, move _149) -> [return: bb59, unwind: bb104];
    }

    bb59: {
        StorageDead(_149);
        _207 = const false;
        StorageDead(_146);
        _0 = std::result::Result::<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error>::Err(move _145);
        StorageDead(_145);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb85;
    }

    bb60: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        _138 = const ();
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_36;
        _159 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _160) -> [return: bb61, unwind: bb95];
    }

    bb61: {
        StorageDead(_160);
        _158 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _159) -> [return: bb62, unwind: bb95];
    }

    bb62: {
        _205 = const true;
        _206 = const true;
        StorageDead(_159);
        _161 = discriminant(_158);
        switchInt(move _161) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        StorageLive(_165);
        _165 = move ((_158 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _157 = move _165;
        StorageDead(_165);
        _156 = &_157;
        _155 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _156) -> [return: bb66, unwind: bb93];
    }

    bb64: {
        StorageLive(_162);
        _162 = move ((_158 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_164);
        _164 = move _162;
        _0 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _164) -> [return: bb65, unwind: bb102];
    }

    bb65: {
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_156);
        _226 = discriminant(_158);
        _205 = const false;
        _206 = const false;
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        goto -> bb84;
    }

    bb66: {
        StorageDead(_156);
        _154 = ((*_155).2: anchor_lang::prelude::Pubkey);
        drop(_157) -> [return: bb100, unwind: bb102];
    }

    bb67: {
        StorageDead(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_154;
        StorageLive(_170);
        _170 = &_166;
        _168 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _169, move _170) -> [return: bb68, unwind: bb95];
    }

    bb68: {
        switchInt(move _168) -> [0: bb73, otherwise: bb69];
    }

    bb69: {
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = ConstraintHasOne;
        _174 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _175) -> [return: bb70, unwind: bb95];
    }

    bb70: {
        StorageDead(_175);
        _173 = anchor_lang::error::Error::with_account_name::<&str>(move _174, const "reserve") -> [return: bb71, unwind: bb95];
    }

    bb71: {
        StorageDead(_174);
        StorageLive(_176);
        StorageLive(_177);
        _177 = _154;
        StorageLive(_178);
        _178 = _166;
        _176 = (move _177, move _178);
        StorageDead(_178);
        StorageDead(_177);
        _172 = anchor_lang::error::Error::with_pubkeys(move _173, move _176) -> [return: bb72, unwind: bb95];
    }

    bb72: {
        StorageDead(_176);
        StorageDead(_173);
        _0 = std::result::Result::<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error>::Err(move _172);
        StorageDead(_172);
        StorageDead(_168);
        StorageDead(_166);
        goto -> bb84;
    }

    bb73: {
        StorageDead(_170);
        StorageDead(_169);
        _153 = const ();
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &(_51.6: bool);
        _180 = <&bool as Not>::not(move _181) -> [return: bb74, unwind: bb95];
    }

    bb74: {
        switchInt(move _180) -> [0: bb78, otherwise: bb75];
    }

    bb75: {
        StorageDead(_181);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = ConstraintMut;
        _184 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _185) -> [return: bb76, unwind: bb95];
    }

    bb76: {
        StorageDead(_185);
        _183 = anchor_lang::error::Error::with_account_name::<&str>(move _184, const "reserve_farm_state") -> [return: bb77, unwind: bb95];
    }

    bb77: {
        StorageDead(_184);
        _0 = std::result::Result::<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error>::Err(move _183);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb85;
    }

    bb78: {
        StorageDead(_181);
        _179 = const ();
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_66;
        _189 = &(*_190);
        _188 = <anchor_lang::prelude::AccountLoader<'_, UserState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _189) -> [return: bb79, unwind: bb95];
    }

    bb79: {
        StorageDead(_189);
        _187 = ((*_188).6: bool);
        switchInt(move _187) -> [0: bb80, otherwise: bb83];
    }

    bb80: {
        StorageDead(_190);
        StorageDead(_188);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = ConstraintMut;
        _193 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _194) -> [return: bb81, unwind: bb95];
    }

    bb81: {
        StorageDead(_194);
        _192 = anchor_lang::error::Error::with_account_name::<&str>(move _193, const "obligation_farm_user_state") -> [return: bb82, unwind: bb95];
    }

    bb82: {
        StorageDead(_193);
        _0 = std::result::Result::<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error>::Err(move _192);
        StorageDead(_192);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb85;
    }

    bb83: {
        StorageDead(_190);
        StorageDead(_188);
        _186 = const ();
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_195);
        StorageLive(_196);
        _196 = move _6;
        StorageLive(_197);
        _197 = move _21;
        StorageLive(_198);
        _198 = move _36;
        StorageLive(_199);
        _199 = move _51;
        StorageLive(_200);
        _200 = move _66;
        StorageLive(_201);
        _201 = move _81;
        _195 = handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase::<'_> { obligation: move _196, lending_market_authority: move _197, reserve: move _198, reserve_farm_state: move _199, obligation_farm_user_state: move _200, lending_market: move _201 };
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        _0 = std::result::Result::<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, anchor_lang::error::Error>::Ok(move _195);
        StorageDead(_195);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb92;
    }

    bb84: {
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_96);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_81);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_66);
        drop(_51) -> [return: bb88, unwind: bb96];
    }

    bb88: {
        StorageDead(_51);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_36);
        drop(_21) -> [return: bb90, unwind: bb97];
    }

    bb90: {
        StorageDead(_21);
        drop(_6) -> [return: bb91, unwind: bb98];
    }

    bb91: {
        StorageDead(_6);
        goto -> bb92;
    }

    bb92: {
        return;
    }

    bb93 (cleanup): {
        drop(_157) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_120) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_51) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_21) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_6) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        resume;
    }

    bb99: {
        _222 = discriminant(_121);
        _203 = const false;
        _204 = const false;
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_97);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &_21;
        _141 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _142) -> [return: bb53, unwind: bb95];
    }

    bb100: {
        _224 = discriminant(_158);
        _205 = const false;
        _206 = const false;
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_81;
        _166 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _167) -> [return: bb67, unwind: bb95];
    }

    bb101: {
        _230 = discriminant(_121);
        _203 = const false;
        _204 = const false;
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_97);
        goto -> bb85;
    }

    bb102 (cleanup): {
        _244 = discriminant(_158);
        goto -> bb95;
    }

    bb103 (cleanup): {
        drop(_146) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_207) -> [0: bb95, otherwise: bb103];
    }

    bb105 (cleanup): {
        _245 = discriminant(_97);
        goto -> bb94;
    }

    bb106 (cleanup): {
        _246 = discriminant(_121);
        goto -> bb95;
    }

    bb107 (cleanup): {
        _247 = discriminant(_82);
        goto -> bb95;
    }

    bb108 (cleanup): {
        _248 = discriminant(_67);
        goto -> bb95;
    }

    bb109 (cleanup): {
        _249 = discriminant(_52);
        goto -> bb96;
    }

    bb110 (cleanup): {
        _250 = discriminant(_37);
        goto -> bb96;
    }

    bb111 (cleanup): {
        _251 = discriminant(_22);
        goto -> bb97;
    }

    bb112 (cleanup): {
        _252 = discriminant(_7);
        goto -> bb98;
    }
}
