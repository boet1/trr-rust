// MIR for `account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:50:1: 50:60>::load_init` before PreCodegen

fn account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:50:1: 50:60>::load_init(_1: &account_loader_trait::FatAccountLoader<'_, T>) -> std::result::Result<RefMut<'_, T>, anchor_lang::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::cell::RefMut<'_, T>, anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: !;
    let mut _5: anchor_lang::error::Error;
    let mut _6: anchor_lang::error::ErrorCode;
    let _7: std::cell::RefMut<'_, &mut [u8]>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::RefMut<'_, &mut [u8]>>;
    let mut _9: std::result::Result<std::cell::RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _10: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _15: std::cell::RefMut<'_, &mut [u8]>;
    let _17: ();
    let mut _18: &mut [u8];
    let mut _19: &mut [u8; 8];
    let mut _20: &[u8];
    let _21: &[u8];
    let _22: &[u8];
    let mut _23: &[u8];
    let _24: &&mut [u8];
    let mut _25: &std::cell::RefMut<'_, &mut [u8]>;
    let mut _26: std::ops::RangeTo<usize>;
    let mut _28: [u8; 8];
    let _29: ();
    let mut _30: bool;
    let mut _31: u64;
    let mut _32: !;
    let mut _33: anchor_lang::error::Error;
    let mut _34: anchor_lang::error::ErrorCode;
    let mut _35: std::cell::RefMut<'_, T>;
    let mut _36: std::cell::RefMut<'_, &mut [u8]>;
    let mut _37: {closure@programs\klend\src\utils\account_loader_trait.rs:151:30: 151:36};
    let mut _38: &mut [u8];
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    scope 1 {
        debug data => _7;
        let mut _16: [u8; 8];
        scope 6 {
            debug disc_bytes => _16;
            let _27: u64;
            scope 7 {
                debug discriminator => _27;
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        _39 = const false;
        StorageLive(_2);
        StorageLive(_3);
        _3 = (((*_1).0: anchor_lang::prelude::AccountInfo<'_>).6: bool);
        switchInt(move _3) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = AccountNotMutable;
        _5 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _0 = std::result::Result::<RefMut<'_, T>, anchor_lang::error::Error>::Err(move _5);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb19;
    }

    bb3: {
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _9 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_mut_data(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _8 = <std::result::Result<RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _9) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_15);
        _15 = move ((_8 as Continue).0: std::cell::RefMut<'_, &mut [u8]>);
        _39 = const true;
        _7 = move _15;
        StorageDead(_15);
        _40 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        _16 = [const 0_u8; 8];
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _16;
        _18 = move _19 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_7;
        _24 = <RefMut<'_, &mut [u8]> as Deref>::deref(move _25) -> [return: bb10, unwind: bb22];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<RefMut<'_, T>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _14) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        StorageDead(_14);
        StorageDead(_12);
        _42 = discriminant(_8);
        StorageDead(_8);
        goto -> bb18;
    }

    bb10: {
        _38 = deref_copy (*_24);
        _23 = &(*_38);
        StorageDead(_25);
        StorageLive(_26);
        _26 = RangeTo::<usize> { end: const 8_usize };
        _22 = <[u8] as Index<RangeTo<usize>>>::index(move _23, move _26) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_23);
        _21 = &(*_22);
        _20 = &(*_21);
        _17 = core::slice::<impl [u8]>::copy_from_slice(move _18, move _20) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _16;
        _27 = core::num::<impl u64>::from_le_bytes(move _28) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _27;
        _30 = Ne(move _31, const 0_u64);
        switchInt(move _30) -> [0: bb16, otherwise: bb14];
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = AccountDiscriminatorAlreadySet;
        _33 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _34) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        StorageDead(_34);
        _0 = std::result::Result::<RefMut<'_, T>, anchor_lang::error::Error>::Err(move _33);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_16);
        drop(_7) -> [return: bb18, unwind: bb20];
    }

    bb16: {
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_35);
        StorageLive(_36);
        _39 = const false;
        _36 = move _7;
        StorageLive(_37);
        _37 = {closure@programs\klend\src\utils\account_loader_trait.rs:151:30: 151:36};
        _35 = RefMut::<'_, &mut [u8]>::map::<T, {closure@programs\klend\src\utils\account_loader_trait.rs:151:30: 151:36}>(move _36, move _37) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_36);
        _0 = std::result::Result::<RefMut<'_, T>, anchor_lang::error::Error>::Ok(move _35);
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_16);
        _39 = const false;
        StorageDead(_7);
        goto -> bb19;
    }

    bb18: {
        _39 = const false;
        StorageDead(_7);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop(_7) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_39) -> [0: bb20, otherwise: bb21];
    }

    bb23 (cleanup): {
        _44 = discriminant(_8);
        goto -> bb20;
    }
}
