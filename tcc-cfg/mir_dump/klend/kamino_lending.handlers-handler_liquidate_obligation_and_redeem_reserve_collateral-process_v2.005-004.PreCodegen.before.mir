// MIR for `handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_v2` before PreCodegen

fn handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_v2(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>>, _2: u64, _3: u64, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    debug min_acceptable_received_liquidity_amount => _3;
    debug max_allowed_ltv_override_percent => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let _9: &handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _10: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: u64;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _18: ();
    let _19: ();
    let _20: ();
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _22: std::result::Result<(), anchor_lang::error::Error>;
    let mut _23: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams<'_, '_>;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _25: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _26: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _27: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _28: state::reserve::ReserveFarmKind;
    let mut _29: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _30: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _31: &anchor_lang::prelude::AccountInfo<'_>;
    let _32: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _33: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _34: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _39: ();
    let _40: ();
    let _41: ();
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _43: std::result::Result<(), anchor_lang::error::Error>;
    let mut _44: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams<'_, '_>;
    let mut _45: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _46: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _47: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _48: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _49: state::reserve::ReserveFarmKind;
    let mut _50: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _51: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let _53: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _55: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _60: ();
    let mut _61: ();
    let mut _62: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _63: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _65: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _66: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _67: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _68: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _69: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _70: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _71: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _72: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _73: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _36;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _39;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _57;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _60;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _62 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _9 = &((*_62).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _8 = &(*_9);
        StorageLive(_10);
        _63 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _10 = &(*_63);
        StorageLive(_11);
        _11 = _2;
        StorageLive(_12);
        _12 = _3;
        StorageLive(_13);
        _13 = _4;
        _7 = handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_impl(move _8, move _10, move _11, move _12, move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        StorageDead(_7);
        _14 = discriminant(_6);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = ((_6 as Continue).0: ());
        _5 = _18;
        StorageDead(_18);
        _74 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _64 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _25 = &(((*_64).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).7: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _24 = &(*_25);
        StorageLive(_26);
        StorageLive(_27);
        _65 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _27 = &((*_65).1: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _26 = &(*_27);
        StorageLive(_28);
        _28 = reserve::ReserveFarmKind::Collateral;
        _23 = RefreshFarmsParams::<'_, '_> { reserve: move _24, farms_accounts: move _26, farm_kind: move _28 };
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_29);
        StorageLive(_30);
        _66 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _30 = &(((*_66).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _29 = &(*_30);
        StorageLive(_31);
        StorageLive(_32);
        _67 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _32 = &(((*_67).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).3: anchor_lang::prelude::AccountInfo<'_>);
        _31 = &(*_32);
        StorageLive(_33);
        StorageLive(_34);
        _68 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _34 = &(((*_68).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _33 = &(*_34);
        _22 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::<'_, anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::prelude::AccountInfo<'_>>(move _23, move _29, move _31, move _33) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _17) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        _84 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        StorageDead(_22);
        _35 = discriminant(_21);
        switchInt(move _35) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_39);
        _39 = ((_21 as Continue).0: ());
        _20 = _39;
        StorageDead(_39);
        _76 = discriminant(_21);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _69 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _46 = &(((*_69).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _45 = &(*_46);
        StorageLive(_47);
        StorageLive(_48);
        _70 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _48 = &((*_70).2: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _47 = &(*_48);
        StorageLive(_49);
        _49 = reserve::ReserveFarmKind::Debt;
        _44 = RefreshFarmsParams::<'_, '_> { reserve: move _45, farms_accounts: move _47, farm_kind: move _49 };
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_50);
        StorageLive(_51);
        _71 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _51 = &(((*_71).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _50 = &(*_51);
        StorageLive(_52);
        StorageLive(_53);
        _72 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _53 = &(((*_72).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).3: anchor_lang::prelude::AccountInfo<'_>);
        _52 = &(*_53);
        StorageLive(_54);
        StorageLive(_55);
        _73 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _55 = &(((*_73).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _54 = &(*_55);
        _43 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::<'_, anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::prelude::AccountInfo<'_>>(move _44, move _50, move _52, move _54) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_36);
        _36 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _38) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_38);
        StorageDead(_36);
        _82 = discriminant(_21);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb17;
    }

    bb12: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_44);
        _42 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _43) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        StorageDead(_43);
        _56 = discriminant(_42);
        switchInt(move _56) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_60);
        _60 = ((_42 as Continue).0: ());
        _41 = _60;
        StorageDead(_60);
        _78 = discriminant(_42);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_41);
        _40 = const ();
        StorageDead(_40);
        _19 = const ();
        StorageDead(_19);
        StorageLive(_61);
        _61 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _61);
        StorageDead(_61);
        goto -> bb18;
    }

    bb15: {
        StorageLive(_57);
        _57 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _59) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_59);
        StorageDead(_57);
        _80 = discriminant(_42);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_19);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        _86 = discriminant(_42);
        goto -> bb19;
    }

    bb21 (cleanup): {
        _87 = discriminant(_21);
        goto -> bb19;
    }

    bb22 (cleanup): {
        _88 = discriminant(_6);
        goto -> bb19;
    }
}
