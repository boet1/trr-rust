digraph Mir_0_11942 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U128::from_little_endian(_1: &amp;ReErased [u8]) -&gt; utils::fraction::uint_types::U128<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: (usize, bool);<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: &amp;ReErased [u8];<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: [u8; 16_usize];<br align="left"/>let _10: ();<br align="left"/>let mut _11: &amp;ReErased mut [u8];<br align="left"/>let mut _12: &amp;ReErased mut [u8];<br align="left"/>let mut _13: &amp;ReErased mut [u8; 16_usize];<br align="left"/>let mut _14: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: &amp;ReErased [u8];<br align="left"/>let mut _17: &amp;ReErased [u8];<br align="left"/>let _18: &amp;ReErased &amp;ReErased [u8];<br align="left"/>let mut _19: [u64; 2_usize];<br align="left"/>let _20: ();<br align="left"/>let mut _21: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _22: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _23: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _24: ();<br align="left"/>let _25: ();<br align="left"/>let mut _26: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _27: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _28: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: !;<br align="left"/>let _31: usize;<br align="left"/>let mut _32: u64;<br align="left"/>let mut _33: &amp;ReErased [u8];<br align="left"/>let _34: &amp;ReErased [u8];<br align="left"/>let _35: &amp;ReErased [u8];<br align="left"/>let mut _36: &amp;ReErased [u8; 16_usize];<br align="left"/>let mut _37: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let mut _38: usize;<br align="left"/>let mut _39: usize;<br align="left"/>let mut _40: (usize, bool);<br align="left"/>let _41: usize;<br align="left"/>let mut _42: usize;<br align="left"/>let mut _43: bool;<br align="left"/>let mut _44: [u64; 2_usize];<br align="left"/>let mut _45: &amp;ReErased [u8];<br align="left"/>debug slice =&gt; _1;<br align="left"/>debug padded =&gt; _9;<br align="left"/>debug ret =&gt; _19;<br align="left"/>debug iter =&gt; _23;<br align="left"/>debug i =&gt; _31;<br align="left"/>>;
    bb0__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_5 = CheckedMul(const 2_usize, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_5.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 2_usize, const 8_usize)</td></tr></table>>];
    bb1__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = move (_5.0: usize)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/></td></tr><tr><td align="left">_6 = core::slice::&lt;impl [u8]&gt;::len(move _7)</td></tr></table>>];
    bb2__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_3 = Ge(move _4, move _6)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb3__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_9)<br/>_9 = [const 0_u8; 16]<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;mut _9<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;(*_1)<br/></td></tr><tr><td align="left">_15 = core::slice::&lt;impl [u8]&gt;::len(move _16)</td></tr></table>>];
    bb4__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_4)<br/>StorageLive(_8)<br/></td></tr><tr><td align="left">_8 = panic(const &quot;assertion failed: 2 * 8 &gt;= slice.len()&quot;)</td></tr></table>>];
    bb5__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_14 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: move _15 }<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_12 = &lt;[u8; 16] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _13, move _14)</td></tr></table>>];
    bb6__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_11 = &amp;mut (*_12)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;_1<br/>_45 = deref_copy (*_18)<br/>_17 = &amp;(*_45)<br/></td></tr><tr><td align="left">_10 = core::slice::&lt;impl [u8]&gt;::copy_from_slice(move _11, move _17)</td></tr></table>>];
    bb7__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_11)<br/>StorageDead(_18)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageLive(_19)<br/>_19 = [const 0_u64; 2]<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 2_usize }<br/></td></tr><tr><td align="left">_21 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _22)</td></tr></table>>];
    bb8__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageLive(_23)<br/>_23 = move _21<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;mut _23<br/>_27 = &amp;mut (*_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _27)</td></tr></table>>];
    bb10__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_29 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb11__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_26 as Some).0: usize)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;_9<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = _31<br/>_40 = CheckedMul(const 8_usize, _39)<br/></td></tr><tr><td align="left">assert(!move (_40.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 8_usize, move _39)</td></tr></table>>];
    bb12__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_20 = const ()<br/>StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageLive(_44)<br/>_44 = _19<br/>_0 = uint_types::U128(move _44)<br/>StorageDead(_44)<br/>StorageDead(_19)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb14__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_38 = move (_40.0: usize)<br/>StorageDead(_39)<br/>_37 = RangeFrom::&lt;usize&gt; { start: move _38 }<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_35 = &lt;[u8; 16] as Index&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index(move _36, move _37)</td></tr></table>>];
    bb15__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>_34 = &amp;(*_35)<br/>_33 = &amp;(*_34)<br/></td></tr><tr><td align="left">_32 = &lt;uint::byteorder::LittleEndian as ByteOrder&gt;::read_u64(move _33)</td></tr></table>>];
    bb16__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageLive(_41)<br/>_41 = _31<br/>_42 = Len(_19)<br/>_43 = Lt(_41, _42)<br/></td></tr><tr><td align="left">assert(move _43, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _42, _41)</td></tr></table>>];
    bb17__0_11942 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_19[_41] = move _32<br/>StorageDead(_32)<br/>StorageDead(_41)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>_25 = const ()<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>_24 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_11942 -> bb1__0_11942 [label="success"];
    bb1__0_11942 -> bb2__0_11942 [label="return"];
    bb2__0_11942 -> bb4__0_11942 [label="0"];
    bb2__0_11942 -> bb3__0_11942 [label="otherwise"];
    bb3__0_11942 -> bb5__0_11942 [label="return"];
    bb5__0_11942 -> bb6__0_11942 [label="return"];
    bb6__0_11942 -> bb7__0_11942 [label="return"];
    bb7__0_11942 -> bb8__0_11942 [label="return"];
    bb8__0_11942 -> bb9__0_11942 [label=""];
    bb9__0_11942 -> bb10__0_11942 [label="return"];
    bb10__0_11942 -> bb13__0_11942 [label="0"];
    bb10__0_11942 -> bb11__0_11942 [label="1"];
    bb10__0_11942 -> bb12__0_11942 [label="otherwise"];
    bb11__0_11942 -> bb14__0_11942 [label="success"];
    bb14__0_11942 -> bb15__0_11942 [label="return"];
    bb15__0_11942 -> bb16__0_11942 [label="return"];
    bb16__0_11942 -> bb17__0_11942 [label="success"];
    bb17__0_11942 -> bb9__0_11942 [label=""];
}
