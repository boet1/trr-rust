// MIR for `redeem_reserve_collateral_transfer` after PreCodegen

fn redeem_reserve_collateral_transfer(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: anchor_lang::prelude::AccountInfo<'_>, _6: anchor_lang::prelude::AccountInfo<'_>, _7: anchor_lang::prelude::AccountInfo<'_>, _8: anchor_lang::prelude::AccountInfo<'_>, _9: anchor_lang::prelude::AccountInfo<'_>, _10: &[&[u8]], _11: u64, _12: u64, _13: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug collateral_token_program => _1;
    debug liquidity_token_program => _2;
    debug reserve_liquidity_mint => _3;
    debug reserve_collateral_mint => _4;
    debug burn_source_collateral => _5;
    debug user_authority => _6;
    debug reserve_liquidity_supply => _7;
    debug destination_liquidity => _8;
    debug lending_market_authority => _9;
    debug authority_signer_seeds => _10;
    debug collateral_amount => _11;
    debug liquidity_amount => _12;
    debug liquidity_decimals => _13;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _16: std::result::Result<(), anchor_lang::error::Error>;
    let mut _17: anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: u64;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _27: ();
    let _28: ();
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _30: std::result::Result<(), anchor_lang::error::Error>;
    let mut _31: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _32: anchor_lang::prelude::AccountInfo<'_>;
    let mut _33: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _34: anchor_lang::prelude::AccountInfo<'_>;
    let mut _35: anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: anchor_lang::prelude::AccountInfo<'_>;
    let mut _37: anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: &[&[&[u8]]];
    let mut _39: &[&[&[u8]]; 1];
    let _40: &[&[&[u8]]; 1];
    let _41: [&[&[u8]]; 1];
    let mut _42: &[&[u8]];
    let mut _43: u64;
    let mut _44: u8;
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _49: ();
    let mut _50: ();
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    scope 1 {
        debug residual => _24;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _27;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _46;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _49;
        scope 8 {
        }
    }

    bb0: {
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const true;
        _54 = const true;
        _53 = const true;
        _52 = const true;
        _51 = const true;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _58 = const true;
        _17 = move _4;
        StorageLive(_18);
        _57 = const true;
        _18 = move _5;
        StorageLive(_19);
        _56 = const true;
        _19 = move _6;
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_1;
        _20 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _21) -> [return: bb1, unwind: bb37];
    }

    bb1: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = _11;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _16 = spltoken::burn(move _17, move _18, move _19, move _20, move _22) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        StorageDead(_22);
        StorageDead(_20);
        _56 = const false;
        StorageDead(_19);
        _57 = const false;
        StorageDead(_18);
        _58 = const false;
        StorageDead(_17);
        _15 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        StorageDead(_16);
        _23 = discriminant(_15);
        switchInt(move _23) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_27);
        _27 = ((_15 as Continue).0: ());
        _14 = _27;
        StorageDead(_27);
        _59 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _55 = const false;
        _32 = move _2;
        StorageLive(_33);
        StorageLive(_34);
        _53 = const false;
        _34 = move _7;
        StorageLive(_35);
        _52 = const false;
        _35 = move _8;
        StorageLive(_36);
        _51 = const false;
        _36 = move _9;
        StorageLive(_37);
        _54 = const false;
        _37 = move _3;
        _33 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _34, mint: move _37, to: move _35, authority: move _36 };
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &(*_10);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_39);
        _31 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new_with_signer(move _32, move _33, move _38) -> [return: bb8, unwind: bb41];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_24);
        _24 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _26) -> [return: bb7, unwind: bb35];
    }

    bb7: {
        StorageDead(_26);
        StorageDead(_24);
        _65 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb29;
    }

    bb8: {
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_43);
        _43 = _12;
        StorageLive(_44);
        _44 = _13;
        _30 = anchor_spl::token_2022::transfer_checked(move _31, move _43, move _44) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_31);
        _29 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _30) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        StorageDead(_30);
        _45 = discriminant(_29);
        switchInt(move _45) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_49);
        _49 = ((_29 as Continue).0: ());
        _28 = _49;
        StorageDead(_49);
        _61 = discriminant(_29);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_50);
        _50 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _50);
        StorageDead(_50);
        drop(_1) -> [return: bb19, unwind: bb27];
    }

    bb12: {
        StorageLive(_46);
        _46 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        StorageDead(_48);
        StorageDead(_46);
        _63 = discriminant(_29);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb29;
    }

    bb14: {
        switchInt(_52) -> [0: bb15, otherwise: bb30];
    }

    bb15: {
        switchInt(_53) -> [0: bb16, otherwise: bb31];
    }

    bb16: {
        switchInt(_54) -> [0: bb17, otherwise: bb32];
    }

    bb17: {
        switchInt(_55) -> [0: bb18, otherwise: bb33];
    }

    bb18: {
        drop(_1) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        switchInt(_57) -> [0: bb21, otherwise: bb38];
    }

    bb21 (cleanup): {
        switchInt(_58) -> [0: bb41, otherwise: bb39];
    }

    bb22 (cleanup): {
        switchInt(_52) -> [0: bb23, otherwise: bb42];
    }

    bb23 (cleanup): {
        switchInt(_53) -> [0: bb24, otherwise: bb43];
    }

    bb24 (cleanup): {
        switchInt(_54) -> [0: bb25, otherwise: bb44];
    }

    bb25 (cleanup): {
        switchInt(_55) -> [0: bb26, otherwise: bb45];
    }

    bb26 (cleanup): {
        drop(_1) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }

    bb28: {
        drop(_9) -> [return: bb14, unwind: bb22];
    }

    bb29: {
        switchInt(_51) -> [0: bb14, otherwise: bb28];
    }

    bb30: {
        drop(_8) -> [return: bb15, unwind: bb23];
    }

    bb31: {
        drop(_7) -> [return: bb16, unwind: bb24];
    }

    bb32: {
        drop(_3) -> [return: bb17, unwind: bb25];
    }

    bb33: {
        drop(_2) -> [return: bb18, unwind: bb26];
    }

    bb34 (cleanup): {
        _67 = discriminant(_29);
        goto -> bb41;
    }

    bb35 (cleanup): {
        _68 = discriminant(_15);
        goto -> bb41;
    }

    bb36 (cleanup): {
        drop(_19) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_56) -> [0: bb20, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_18) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_17) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_9) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_51) -> [0: bb22, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_7) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_2) -> [return: bb26, unwind terminate(cleanup)];
    }
}
