// MIR for `handlers::handler_withdraw_protocol_fees::<impl at programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18>::try_accounts` before PreCodegen

fn handlers::handler_withdraw_protocol_fees::<impl at programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut WithdrawProtocolFeesBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>>;
    let mut _8: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _113: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_withdraw_protocol_fees::WithdrawProtocolFeesBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _128: (anchor_lang::prelude::Pubkey, u8);
    let mut _129: &[&[u8]];
    let mut _130: &[&[u8]; 1];
    let _131: &[&[u8]; 1];
    let _132: [&[u8]; 1];
    let mut _133: &[u8];
    let _134: &[u8];
    let mut _135: &anchor_lang::prelude::Pubkey;
    let _136: &&anchor_lang::prelude::Pubkey;
    let mut _137: u8;
    let _138: ();
    let mut _139: bool;
    let mut _140: &anchor_lang::prelude::Pubkey;
    let _141: anchor_lang::prelude::Pubkey;
    let mut _142: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _143: &anchor_lang::prelude::Pubkey;
    let mut _144: !;
    let mut _145: anchor_lang::error::Error;
    let mut _146: anchor_lang::error::Error;
    let mut _147: anchor_lang::error::Error;
    let mut _148: anchor_lang::error::ErrorCode;
    let mut _149: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _150: anchor_lang::prelude::Pubkey;
    let mut _151: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _152: anchor_lang::prelude::Pubkey;
    let _153: ();
    let mut _155: &state::reserve::Reserve;
    let mut _156: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _157: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _159: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _161: isize;
    let mut _163: !;
    let mut _164: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _167: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _168: bool;
    let mut _169: &anchor_lang::prelude::Pubkey;
    let mut _170: &anchor_lang::prelude::Pubkey;
    let mut _171: !;
    let mut _172: anchor_lang::error::Error;
    let mut _173: anchor_lang::error::Error;
    let mut _174: anchor_lang::error::Error;
    let mut _175: anchor_lang::error::ErrorCode;
    let mut _176: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _177: anchor_lang::prelude::Pubkey;
    let mut _178: anchor_lang::prelude::Pubkey;
    let _179: ();
    let mut _181: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _183: &state::reserve::Reserve;
    let mut _184: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _185: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _187: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _188: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _194: bool;
    let mut _195: &anchor_lang::prelude::Pubkey;
    let mut _196: &anchor_lang::prelude::Pubkey;
    let mut _197: !;
    let mut _198: anchor_lang::error::Error;
    let mut _199: anchor_lang::error::Error;
    let mut _200: anchor_lang::error::Error;
    let mut _201: anchor_lang::error::ErrorCode;
    let mut _202: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _203: anchor_lang::prelude::Pubkey;
    let mut _204: anchor_lang::prelude::Pubkey;
    let _205: ();
    let mut _206: bool;
    let mut _207: &&anchor_lang::prelude::Pubkey;
    let _208: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _209: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _210: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _211: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _212: &&anchor_lang::prelude::Pubkey;
    let _213: &anchor_lang::prelude::Pubkey;
    let _214: anchor_lang::prelude::Pubkey;
    let mut _215: &anchor_lang::prelude::AccountInfo<'_>;
    let _216: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _217: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _218: !;
    let mut _219: anchor_lang::error::Error;
    let mut _220: anchor_lang::error::ErrorCode;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _223: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _224: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _225: &[&[u8]];
    let mut _226: &[&[u8]; 3];
    let _227: &[&[u8]; 3];
    let _228: [&[u8]; 3];
    let mut _229: &[u8];
    let _230: &[u8];
    let mut _231: &[u8];
    let _232: &[u8];
    let mut _233: &anchor_lang::prelude::Pubkey;
    let _234: anchor_lang::prelude::Pubkey;
    let mut _235: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _236: &[u8];
    let _237: &[u8];
    let _238: &[u8];
    let mut _239: &[u8; 1];
    let _240: [u8; 1];
    let mut _241: u8;
    let mut _242: u64;
    let mut _243: &state::lending_market::LendingMarket;
    let mut _244: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _245: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _247: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _248: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _254: std::ops::RangeFull;
    let mut _255: &anchor_lang::prelude::Pubkey;
    let _256: &&anchor_lang::prelude::Pubkey;
    let mut _257: {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
    let mut _258: isize;
    let mut _260: !;
    let mut _261: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _263: ();
    let mut _264: bool;
    let mut _265: &anchor_lang::prelude::Pubkey;
    let _266: anchor_lang::prelude::Pubkey;
    let mut _267: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _268: &anchor_lang::prelude::Pubkey;
    let mut _269: !;
    let mut _270: anchor_lang::error::Error;
    let mut _271: anchor_lang::error::Error;
    let mut _272: anchor_lang::error::Error;
    let mut _273: anchor_lang::error::ErrorCode;
    let mut _274: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _275: anchor_lang::prelude::Pubkey;
    let mut _276: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _277: anchor_lang::prelude::Pubkey;
    let _278: ();
    let mut _279: bool;
    let mut _280: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _281: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _282: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _283: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _284: !;
    let mut _285: anchor_lang::error::Error;
    let mut _286: anchor_lang::error::Error;
    let mut _287: anchor_lang::error::ErrorCode;
    let _288: ();
    let mut _290: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _292: &state::reserve::Reserve;
    let mut _293: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _294: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _295: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _296: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _297: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _303: bool;
    let mut _304: &anchor_lang::prelude::Pubkey;
    let mut _305: &anchor_lang::prelude::Pubkey;
    let mut _306: !;
    let mut _307: anchor_lang::error::Error;
    let mut _308: anchor_lang::error::Error;
    let mut _309: anchor_lang::error::Error;
    let mut _310: anchor_lang::error::ErrorCode;
    let mut _311: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _312: anchor_lang::prelude::Pubkey;
    let mut _313: anchor_lang::prelude::Pubkey;
    let _314: ();
    let mut _315: bool;
    let mut _316: &anchor_lang::prelude::Pubkey;
    let _317: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _318: &anchor_spl::token_interface::TokenAccount;
    let _319: &anchor_spl::token_interface::TokenAccount;
    let mut _320: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _321: &anchor_lang::prelude::Pubkey;
    let _322: anchor_lang::prelude::Pubkey;
    let mut _323: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _324: !;
    let mut _325: anchor_lang::error::Error;
    let mut _326: anchor_lang::error::ErrorCode;
    let _327: ();
    let mut _328: bool;
    let mut _329: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _330: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _331: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _332: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _333: !;
    let mut _334: anchor_lang::error::Error;
    let mut _335: anchor_lang::error::Error;
    let mut _336: anchor_lang::error::ErrorCode;
    let _337: ();
    let mut _338: bool;
    let mut _339: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _340: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _341: &anchor_spl::token_interface::TokenAccount;
    let _342: &anchor_spl::token_interface::TokenAccount;
    let mut _343: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _344: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _345: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let mut _346: !;
    let mut _347: anchor_lang::error::Error;
    let mut _348: anchor_lang::error::Error;
    let mut _349: anchor_lang::error::ErrorCode;
    let _350: ();
    let mut _352: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _354: &anchor_lang::prelude::Pubkey;
    let _355: &anchor_lang::prelude::Pubkey;
    let _356: &state::global_config::GlobalConfig;
    let mut _357: &std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let _358: std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let mut _359: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::global_config::GlobalConfig>>;
    let mut _360: std::result::Result<std::cell::Ref<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _361: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _362: isize;
    let mut _364: !;
    let mut _365: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _367: &anchor_lang::prelude::Pubkey;
    let _368: &anchor_lang::prelude::Pubkey;
    let _369: anchor_lang::prelude::Pubkey;
    let mut _370: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _371: &anchor_lang::prelude::Pubkey;
    let _372: &anchor_lang::prelude::Pubkey;
    let _373: anchor_lang::prelude::Pubkey;
    let mut _374: &anchor_lang::prelude::AccountInfo<'_>;
    let _375: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _376: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _377: bool;
    let mut _378: &anchor_lang::prelude::Pubkey;
    let mut _379: &anchor_lang::prelude::Pubkey;
    let mut _380: !;
    let mut _381: anchor_lang::error::Error;
    let mut _382: anchor_lang::error::Error;
    let mut _383: anchor_lang::error::Error;
    let mut _384: anchor_lang::error::ErrorCode;
    let mut _385: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _386: anchor_lang::prelude::Pubkey;
    let mut _387: anchor_lang::prelude::Pubkey;
    let _388: ();
    let _389: ();
    let mut _390: bool;
    let mut _391: &anchor_lang::prelude::Pubkey;
    let _392: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _393: &anchor_spl::token_interface::TokenAccount;
    let _394: &anchor_spl::token_interface::TokenAccount;
    let mut _395: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _396: &anchor_lang::prelude::Pubkey;
    let _397: anchor_lang::prelude::Pubkey;
    let mut _398: &anchor_lang::prelude::Pubkey;
    let _399: &state::global_config::GlobalConfig;
    let mut _400: &std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let _401: std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let mut _402: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::global_config::GlobalConfig>>;
    let mut _403: std::result::Result<std::cell::Ref<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _404: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _405: isize;
    let mut _407: !;
    let mut _408: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _410: !;
    let mut _411: anchor_lang::error::Error;
    let mut _412: anchor_lang::error::ErrorCode;
    let mut _413: bool;
    let mut _414: &anchor_lang::prelude::Pubkey;
    let _415: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _416: &anchor_spl::token_interface::TokenAccount;
    let _417: &anchor_spl::token_interface::TokenAccount;
    let mut _418: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _419: &anchor_lang::prelude::Pubkey;
    let _420: anchor_lang::prelude::Pubkey;
    let mut _421: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _422: !;
    let mut _423: anchor_lang::error::Error;
    let mut _424: anchor_lang::error::ErrorCode;
    let mut _425: handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>;
    let mut _426: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _427: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _428: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _429: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _430: anchor_lang::prelude::AccountInfo<'_>;
    let mut _431: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _432: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _433: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _436: &anchor_lang::prelude::Pubkey;
    let mut _437: &anchor_lang::prelude::Pubkey;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: bool;
    let mut _441: bool;
    let mut _442: bool;
    let mut _443: bool;
    let mut _444: bool;
    let mut _445: bool;
    let mut _446: bool;
    let mut _447: bool;
    let mut _448: bool;
    let mut _449: bool;
    let mut _450: bool;
    let mut _451: bool;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _530: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _531: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _532: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _533: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _534: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _535: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _536: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _537: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug global_config => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
        scope 6 {
            debug lending_market => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
            scope 11 {
                debug reserve => _36;
                let _51: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                scope 16 {
                    debug reserve_liquidity_mint => _51;
                    let _66: anchor_lang::prelude::AccountInfo<'_>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountInfo<'_>;
                    scope 21 {
                        debug lending_market_authority => _66;
                        let _81: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                        scope 26 {
                            debug fee_vault => _81;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 31 {
                                debug fee_collector_ata => _96;
                                let _111: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                scope 36 {
                                    debug token_program => _111;
                                    let _126: anchor_lang::prelude::Pubkey;
                                    let _127: u8;
                                    let mut _435: &[&[u8]; 1];
                                    scope 41 {
                                        debug __pda_address => _126;
                                        debug __bump => _127;
                                        let _154: anchor_lang::prelude::Pubkey;
                                        let _162: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _165: std::cell::Ref<'_, state::reserve::Reserve>;
                                        let _180: anchor_lang::prelude::Pubkey;
                                        let _221: anchor_lang::prelude::Pubkey;
                                        let _250: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _253: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                        let _259: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _262: anchor_lang::prelude::Pubkey;
                                        scope 42 {
                                            debug my_key => _154;
                                            let _166: anchor_lang::prelude::Pubkey;
                                            scope 47 {
                                                debug target_key => _166;
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _162;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _165;
                                            scope 46 {
                                            }
                                        }
                                        scope 48 {
                                            debug actual => _180;
                                            let _182: anchor_lang::prelude::Pubkey;
                                            let _190: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _193: std::cell::Ref<'_, state::reserve::Reserve>;
                                            scope 49 {
                                                debug expected => _182;
                                            }
                                            scope 50 {
                                                debug residual => _190;
                                                scope 51 {
                                                }
                                            }
                                            scope 52 {
                                                debug val => _193;
                                                scope 53 {
                                                }
                                            }
                                        }
                                        scope 54 {
                                            debug __pda_address => _221;
                                            let _289: anchor_lang::prelude::Pubkey;
                                            let _351: anchor_lang::prelude::Pubkey;
                                            let _406: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _409: std::cell::Ref<'_, state::global_config::GlobalConfig>;
                                            let mut _434: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
                                            scope 63 {
                                                debug actual => _289;
                                                let _291: anchor_lang::prelude::Pubkey;
                                                let _299: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _302: std::cell::Ref<'_, state::reserve::Reserve>;
                                                scope 64 {
                                                    debug expected => _291;
                                                }
                                                scope 65 {
                                                    debug residual => _299;
                                                    scope 66 {
                                                    }
                                                }
                                                scope 67 {
                                                    debug val => _302;
                                                    scope 68 {
                                                    }
                                                }
                                            }
                                            scope 69 {
                                                debug actual => _351;
                                                let _353: anchor_lang::prelude::Pubkey;
                                                let _363: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _366: std::cell::Ref<'_, state::global_config::GlobalConfig>;
                                                scope 70 {
                                                    debug expected => _353;
                                                }
                                                scope 71 {
                                                    debug residual => _363;
                                                    scope 72 {
                                                    }
                                                }
                                                scope 73 {
                                                    debug val => _366;
                                                    scope 74 {
                                                    }
                                                }
                                            }
                                            scope 75 {
                                                debug residual => _406;
                                                scope 76 {
                                                }
                                            }
                                            scope 77 {
                                                debug val => _409;
                                                scope 78 {
                                                }
                                            }
                                        }
                                        scope 55 {
                                            debug residual => _250;
                                            scope 56 {
                                            }
                                        }
                                        scope 57 {
                                            debug val => _253;
                                            scope 58 {
                                            }
                                        }
                                        scope 59 {
                                            debug residual => _259;
                                            scope 60 {
                                            }
                                        }
                                        scope 61 {
                                            debug val => _262;
                                            scope 62 {
                                            }
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _122;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _125;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _451 = const false;
        _446 = const false;
        _450 = const false;
        _449 = const false;
        _448 = const false;
        _447 = const false;
        _439 = const false;
        _438 = const false;
        _445 = const false;
        _444 = const false;
        _443 = const false;
        _442 = const false;
        _441 = const false;
        _440 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _8 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _9, move _15) -> [return: bb2, unwind: bb219];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb219];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _6 = move _20;
        StorageDead(_20);
        _452 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb246];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _512 = discriminant(_7);
        StorageDead(_7);
        goto -> bb207;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _24, move _30) -> [return: bb9, unwind: bb219];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb219];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _21 = move _35;
        StorageDead(_35);
        _454 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb245];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _510 = discriminant(_22);
        StorageDead(_22);
        goto -> bb206;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _39, move _45) -> [return: bb15, unwind: bb219];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb219];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _36 = move _50;
        StorageDead(_50);
        _456 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb244];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _508 = discriminant(_37);
        StorageDead(_37);
        goto -> bb205;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _53 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _54, move _60) -> [return: bb21, unwind: bb219];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb219];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _51 = move _65;
        StorageDead(_65);
        _458 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb218];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb243];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _506 = discriminant(_52);
        StorageDead(_52);
        goto -> bb204;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _69, move _75) -> [return: bb27, unwind: bb218];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb218];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _66 = move _80;
        StorageDead(_80);
        _460 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb217];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb242];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _504 = discriminant(_67);
        StorageDead(_67);
        goto -> bb203;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _84, move _90) -> [return: bb33, unwind: bb217];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb217];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _81 = move _95;
        StorageDead(_95);
        _462 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb216];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb241];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _502 = discriminant(_82);
        StorageDead(_82);
        goto -> bb202;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _99, move _105) -> [return: bb39, unwind: bb216];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb216];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _464 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, WithdrawProtocolFeesBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb215];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb240];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _500 = discriminant(_97);
        StorageDead(_97);
        goto -> bb201;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _113 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _114, move _120) -> [return: bb45, unwind: bb215];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb215];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _111 = move _125;
        StorageDead(_125);
        _466 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _435 = const _;
        _131 = &(*_435);
        _130 = &(*_131);
        _129 = move _130 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_130);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_1;
        _436 = deref_copy (*_136);
        _135 = &(*_436);
        _128 = anchor_lang::prelude::Pubkey::find_program_address(move _129, move _135) -> [return: bb50, unwind: bb215];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb239];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _498 = discriminant(_112);
        StorageDead(_112);
        goto -> bb200;
    }

    bb50: {
        StorageDead(_135);
        StorageDead(_129);
        StorageLive(_126);
        _126 = (_128.0: anchor_lang::prelude::Pubkey);
        StorageLive(_127);
        _127 = (_128.1: u8);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_128);
        StorageLive(_137);
        _137 = _127;
        ((*_4).0: u8) = move _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &_6;
        _141 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Key>::key(move _142) -> [return: bb51, unwind: bb215];
    }

    bb51: {
        _140 = &_141;
        StorageDead(_142);
        StorageLive(_143);
        _143 = &_126;
        _139 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _140, move _143) -> [return: bb52, unwind: bb215];
    }

    bb52: {
        switchInt(move _139) -> [0: bb58, otherwise: bb53];
    }

    bb53: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = ConstraintSeeds;
        _147 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _148) -> [return: bb54, unwind: bb215];
    }

    bb54: {
        StorageDead(_148);
        _146 = anchor_lang::error::Error::with_account_name::<&str>(move _147, const "global_config") -> [return: bb55, unwind: bb215];
    }

    bb55: {
        _451 = const true;
        StorageDead(_147);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_6;
        _150 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Key>::key(move _151) -> [return: bb56, unwind: bb238];
    }

    bb56: {
        StorageDead(_151);
        StorageLive(_152);
        _152 = _126;
        _149 = (move _150, move _152);
        StorageDead(_152);
        StorageDead(_150);
        _451 = const false;
        _145 = anchor_lang::error::Error::with_pubkeys(move _146, move _149) -> [return: bb57, unwind: bb238];
    }

    bb57: {
        StorageDead(_149);
        _451 = const false;
        StorageDead(_146);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _145);
        StorageDead(_145);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb199;
    }

    bb58: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        _138 = const ();
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_36;
        _159 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _160) -> [return: bb59, unwind: bb215];
    }

    bb59: {
        StorageDead(_160);
        _158 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _159) -> [return: bb60, unwind: bb215];
    }

    bb60: {
        _449 = const true;
        _450 = const true;
        StorageDead(_159);
        _161 = discriminant(_158);
        switchInt(move _161) -> [0: bb61, 1: bb62, otherwise: bb5];
    }

    bb61: {
        StorageLive(_165);
        _165 = move ((_158 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _157 = move _165;
        StorageDead(_165);
        _156 = &_157;
        _155 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _156) -> [return: bb64, unwind: bb214];
    }

    bb62: {
        StorageLive(_162);
        _162 = move ((_158 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_164);
        _164 = move _162;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _164) -> [return: bb63, unwind: bb236];
    }

    bb63: {
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_156);
        _496 = discriminant(_158);
        _449 = const false;
        _450 = const false;
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        goto -> bb198;
    }

    bb64: {
        StorageDead(_156);
        _154 = ((*_155).2: anchor_lang::prelude::Pubkey);
        drop(_157) -> [return: bb220, unwind: bb236];
    }

    bb65: {
        StorageDead(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_154;
        StorageLive(_170);
        _170 = &_166;
        _168 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _169, move _170) -> [return: bb66, unwind: bb215];
    }

    bb66: {
        switchInt(move _168) -> [0: bb71, otherwise: bb67];
    }

    bb67: {
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = ConstraintHasOne;
        _174 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _175) -> [return: bb68, unwind: bb215];
    }

    bb68: {
        StorageDead(_175);
        _173 = anchor_lang::error::Error::with_account_name::<&str>(move _174, const "reserve") -> [return: bb69, unwind: bb215];
    }

    bb69: {
        StorageDead(_174);
        StorageLive(_176);
        StorageLive(_177);
        _177 = _154;
        StorageLive(_178);
        _178 = _166;
        _176 = (move _177, move _178);
        StorageDead(_178);
        StorageDead(_177);
        _172 = anchor_lang::error::Error::with_pubkeys(move _173, move _176) -> [return: bb70, unwind: bb215];
    }

    bb70: {
        StorageDead(_176);
        StorageDead(_173);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _172);
        StorageDead(_172);
        StorageDead(_168);
        StorageDead(_166);
        goto -> bb198;
    }

    bb71: {
        StorageDead(_170);
        StorageDead(_169);
        _153 = const ();
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _529 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _181 = &(*_529);
        _180 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _181) -> [return: bb72, unwind: bb215];
    }

    bb72: {
        StorageDead(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_36;
        _187 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _188) -> [return: bb73, unwind: bb215];
    }

    bb73: {
        StorageDead(_188);
        _186 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _187) -> [return: bb74, unwind: bb215];
    }

    bb74: {
        _447 = const true;
        _448 = const true;
        StorageDead(_187);
        _189 = discriminant(_186);
        switchInt(move _189) -> [0: bb75, 1: bb76, otherwise: bb5];
    }

    bb75: {
        StorageLive(_193);
        _193 = move ((_186 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _185 = move _193;
        StorageDead(_193);
        _184 = &_185;
        _183 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _184) -> [return: bb78, unwind: bb213];
    }

    bb76: {
        StorageLive(_190);
        _190 = move ((_186 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_192);
        _192 = move _190;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _192) -> [return: bb77, unwind: bb235];
    }

    bb77: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_184);
        _494 = discriminant(_186);
        _447 = const false;
        _448 = const false;
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_183);
        goto -> bb197;
    }

    bb78: {
        StorageDead(_184);
        _182 = (((*_183).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        drop(_185) -> [return: bb221, unwind: bb235];
    }

    bb79: {
        switchInt(move _194) -> [0: bb84, otherwise: bb80];
    }

    bb80: {
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = ConstraintAddress;
        _200 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _201) -> [return: bb81, unwind: bb215];
    }

    bb81: {
        StorageDead(_201);
        _199 = anchor_lang::error::Error::with_account_name::<&str>(move _200, const "reserve_liquidity_mint") -> [return: bb82, unwind: bb215];
    }

    bb82: {
        StorageDead(_200);
        StorageLive(_202);
        StorageLive(_203);
        _203 = _180;
        StorageLive(_204);
        _204 = _182;
        _202 = (move _203, move _204);
        StorageDead(_204);
        StorageDead(_203);
        _198 = anchor_lang::error::Error::with_pubkeys(move _199, move _202) -> [return: bb83, unwind: bb215];
    }

    bb83: {
        StorageDead(_202);
        StorageDead(_199);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _198);
        StorageDead(_198);
        StorageDead(_194);
        goto -> bb197;
    }

    bb84: {
        StorageDead(_196);
        StorageDead(_195);
        _179 = const ();
        StorageDead(_194);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_51;
        _210 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _211) -> [return: bb85, unwind: bb215];
    }

    bb85: {
        _209 = &(*_210);
        StorageDead(_211);
        _208 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _209) -> [return: bb86, unwind: bb215];
    }

    bb86: {
        StorageDead(_209);
        _207 = &((*_208).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &_111;
        _216 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _217) -> [return: bb87, unwind: bb215];
    }

    bb87: {
        _215 = &(*_216);
        StorageDead(_217);
        _214 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _215) -> [return: bb88, unwind: bb215];
    }

    bb88: {
        StorageDead(_215);
        _213 = &_214;
        _212 = &_213;
        _206 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _207, move _212) -> [return: bb89, unwind: bb215];
    }

    bb89: {
        switchInt(move _206) -> [0: bb92, otherwise: bb90];
    }

    bb90: {
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_207);
        StorageLive(_219);
        StorageLive(_220);
        _220 = ConstraintMintTokenProgram;
        _219 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _220) -> [return: bb91, unwind: bb215];
    }

    bb91: {
        StorageDead(_220);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _219);
        StorageDead(_219);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb199;
    }

    bb92: {
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_207);
        _205 = const ();
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = const _;
        _229 = &(*_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_21;
        _234 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _235) -> [return: bb93, unwind: bb215];
    }

    bb93: {
        _233 = &_234;
        StorageDead(_235);
        _232 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _233) -> [return: bb94, unwind: bb215];
    }

    bb94: {
        _231 = &(*_232);
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_21;
        _247 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _248) -> [return: bb95, unwind: bb215];
    }

    bb95: {
        StorageDead(_248);
        _246 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _247) -> [return: bb96, unwind: bb215];
    }

    bb96: {
        _438 = const true;
        _439 = const true;
        StorageDead(_247);
        _249 = discriminant(_246);
        switchInt(move _249) -> [0: bb97, 1: bb98, otherwise: bb5];
    }

    bb97: {
        StorageLive(_253);
        _253 = move ((_246 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _245 = move _253;
        StorageDead(_253);
        _244 = &_245;
        _243 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _244) -> [return: bb100, unwind: bb212];
    }

    bb98: {
        StorageLive(_250);
        _250 = move ((_246 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_252);
        _252 = move _250;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _252) -> [return: bb99, unwind: bb234];
    }

    bb99: {
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_223);
        goto -> bb227;
    }

    bb100: {
        StorageDead(_244);
        _242 = ((*_243).1: u64);
        _241 = move _242 as u8 (IntToInt);
        StorageDead(_242);
        _240 = [move _241];
        _239 = &_240;
        StorageDead(_241);
        StorageLive(_254);
        _254 = RangeFull;
        _238 = <[u8; 1] as Index<RangeFull>>::index(move _239, move _254) -> [return: bb101, unwind: bb212];
    }

    bb101: {
        StorageDead(_254);
        StorageDead(_239);
        _237 = &(*_238);
        _236 = &(*_237);
        _228 = [move _229, move _231, move _236];
        StorageDead(_236);
        StorageDead(_231);
        StorageDead(_229);
        _227 = &_228;
        _226 = &(*_227);
        _225 = move _226 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_226);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_1;
        _437 = deref_copy (*_256);
        _255 = &(*_437);
        _224 = anchor_lang::prelude::Pubkey::create_program_address(move _225, move _255) -> [return: bb102, unwind: bb212];
    }

    bb102: {
        StorageDead(_255);
        StorageDead(_225);
        StorageLive(_257);
        _257 = {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18};
        _223 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_withdraw_protocol_fees.rs:46:10: 46:18}>(move _224, move _257) -> [return: bb103, unwind: bb212];
    }

    bb103: {
        StorageDead(_257);
        StorageDead(_224);
        _222 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _223) -> [return: bb104, unwind: bb212];
    }

    bb104: {
        StorageDead(_223);
        _258 = discriminant(_222);
        switchInt(move _258) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_262);
        _262 = ((_222 as Continue).0: anchor_lang::prelude::Pubkey);
        _221 = _262;
        StorageDead(_262);
        _472 = discriminant(_222);
        StorageDead(_256);
        drop(_245) -> [return: bb222, unwind: bb234];
    }

    bb106: {
        StorageLive(_259);
        _259 = move ((_222 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_261);
        _261 = move _259;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _261) -> [return: bb107, unwind: bb233];
    }

    bb107: {
        StorageDead(_261);
        StorageDead(_259);
        _490 = discriminant(_222);
        StorageDead(_256);
        drop(_245) -> [return: bb227, unwind: bb234];
    }

    bb108: {
        _265 = &_266;
        StorageDead(_267);
        StorageLive(_268);
        _268 = &_221;
        _264 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _265, move _268) -> [return: bb109, unwind: bb215];
    }

    bb109: {
        switchInt(move _264) -> [0: bb115, otherwise: bb110];
    }

    bb110: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = ConstraintSeeds;
        _272 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _273) -> [return: bb111, unwind: bb215];
    }

    bb111: {
        StorageDead(_273);
        _271 = anchor_lang::error::Error::with_account_name::<&str>(move _272, const "lending_market_authority") -> [return: bb112, unwind: bb215];
    }

    bb112: {
        _446 = const true;
        StorageDead(_272);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_66;
        _275 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _276) -> [return: bb113, unwind: bb232];
    }

    bb113: {
        StorageDead(_276);
        StorageLive(_277);
        _277 = _221;
        _274 = (move _275, move _277);
        StorageDead(_277);
        StorageDead(_275);
        _446 = const false;
        _270 = anchor_lang::error::Error::with_pubkeys(move _271, move _274) -> [return: bb114, unwind: bb232];
    }

    bb114: {
        StorageDead(_274);
        _446 = const false;
        StorageDead(_271);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _270);
        StorageDead(_270);
        StorageDead(_264);
        StorageDead(_263);
        goto -> bb196;
    }

    bb115: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        _263 = const ();
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_81;
        _282 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _283) -> [return: bb116, unwind: bb215];
    }

    bb116: {
        _281 = &(*_282);
        StorageDead(_283);
        _280 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _281) -> [return: bb117, unwind: bb215];
    }

    bb117: {
        StorageDead(_281);
        _279 = ((*_280).6: bool);
        switchInt(move _279) -> [0: bb118, otherwise: bb121];
    }

    bb118: {
        StorageDead(_282);
        StorageDead(_280);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = ConstraintMut;
        _286 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _287) -> [return: bb119, unwind: bb215];
    }

    bb119: {
        StorageDead(_287);
        _285 = anchor_lang::error::Error::with_account_name::<&str>(move _286, const "fee_vault") -> [return: bb120, unwind: bb215];
    }

    bb120: {
        StorageDead(_286);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _285);
        StorageDead(_285);
        StorageDead(_279);
        StorageDead(_278);
        goto -> bb196;
    }

    bb121: {
        StorageDead(_282);
        StorageDead(_280);
        _278 = const ();
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _530 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _290 = &(*_530);
        _289 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _290) -> [return: bb122, unwind: bb215];
    }

    bb122: {
        StorageDead(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &_36;
        _296 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _297) -> [return: bb123, unwind: bb215];
    }

    bb123: {
        StorageDead(_297);
        _295 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _296) -> [return: bb124, unwind: bb215];
    }

    bb124: {
        _444 = const true;
        _445 = const true;
        StorageDead(_296);
        _298 = discriminant(_295);
        switchInt(move _298) -> [0: bb125, 1: bb126, otherwise: bb5];
    }

    bb125: {
        StorageLive(_302);
        _302 = move ((_295 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _294 = move _302;
        StorageDead(_302);
        _293 = &_294;
        _292 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _293) -> [return: bb128, unwind: bb211];
    }

    bb126: {
        StorageLive(_299);
        _299 = move ((_295 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_301);
        _301 = move _299;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _301) -> [return: bb127, unwind: bb230];
    }

    bb127: {
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_293);
        _488 = discriminant(_295);
        _444 = const false;
        _445 = const false;
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_292);
        goto -> bb195;
    }

    bb128: {
        StorageDead(_293);
        _291 = (((*_292).5: state::reserve::ReserveLiquidity).2: anchor_lang::prelude::Pubkey);
        drop(_294) -> [return: bb223, unwind: bb230];
    }

    bb129: {
        switchInt(move _303) -> [0: bb134, otherwise: bb130];
    }

    bb130: {
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = ConstraintAddress;
        _309 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _310) -> [return: bb131, unwind: bb215];
    }

    bb131: {
        StorageDead(_310);
        _308 = anchor_lang::error::Error::with_account_name::<&str>(move _309, const "fee_vault") -> [return: bb132, unwind: bb215];
    }

    bb132: {
        StorageDead(_309);
        StorageLive(_311);
        StorageLive(_312);
        _312 = _289;
        StorageLive(_313);
        _313 = _291;
        _311 = (move _312, move _313);
        StorageDead(_313);
        StorageDead(_312);
        _307 = anchor_lang::error::Error::with_pubkeys(move _308, move _311) -> [return: bb133, unwind: bb215];
    }

    bb133: {
        StorageDead(_311);
        StorageDead(_308);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _307);
        StorageDead(_307);
        StorageDead(_303);
        goto -> bb195;
    }

    bb134: {
        StorageDead(_305);
        StorageDead(_304);
        _288 = const ();
        StorageDead(_303);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _531 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _320 = &(*_531);
        _319 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _320) -> [return: bb135, unwind: bb215];
    }

    bb135: {
        _318 = &(*_319);
        _317 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _318) -> [return: bb136, unwind: bb215];
    }

    bb136: {
        StorageDead(_320);
        StorageDead(_318);
        _316 = &((*_317).1: anchor_lang::prelude::Pubkey);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = &_66;
        _322 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _323) -> [return: bb137, unwind: bb215];
    }

    bb137: {
        _321 = &_322;
        StorageDead(_323);
        _315 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _316, move _321) -> [return: bb138, unwind: bb215];
    }

    bb138: {
        switchInt(move _315) -> [0: bb141, otherwise: bb139];
    }

    bb139: {
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_325);
        StorageLive(_326);
        _326 = ConstraintTokenOwner;
        _325 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _326) -> [return: bb140, unwind: bb215];
    }

    bb140: {
        StorageDead(_326);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _325);
        StorageDead(_325);
        StorageDead(_315);
        StorageDead(_314);
        goto -> bb196;
    }

    bb141: {
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        _314 = const ();
        StorageDead(_315);
        StorageDead(_314);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_96;
        _331 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _332) -> [return: bb142, unwind: bb215];
    }

    bb142: {
        _330 = &(*_331);
        StorageDead(_332);
        _329 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _330) -> [return: bb143, unwind: bb215];
    }

    bb143: {
        StorageDead(_330);
        _328 = ((*_329).6: bool);
        switchInt(move _328) -> [0: bb144, otherwise: bb147];
    }

    bb144: {
        StorageDead(_331);
        StorageDead(_329);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = ConstraintMut;
        _335 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _336) -> [return: bb145, unwind: bb215];
    }

    bb145: {
        StorageDead(_336);
        _334 = anchor_lang::error::Error::with_account_name::<&str>(move _335, const "fee_collector_ata") -> [return: bb146, unwind: bb215];
    }

    bb146: {
        StorageDead(_335);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _334);
        StorageDead(_334);
        StorageDead(_328);
        StorageDead(_327);
        goto -> bb196;
    }

    bb147: {
        StorageDead(_331);
        StorageDead(_329);
        _327 = const ();
        StorageDead(_328);
        StorageDead(_327);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _532 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _343 = &(*_532);
        _342 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _343) -> [return: bb148, unwind: bb215];
    }

    bb148: {
        _341 = &(*_342);
        _340 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _341) -> [return: bb149, unwind: bb215];
    }

    bb149: {
        StorageDead(_343);
        StorageDead(_341);
        _339 = &((*_340).3: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>);
        StorageLive(_344);
        _434 = const _;
        _344 = &(*_434);
        _338 = <COption<anchor_lang::prelude::Pubkey> as PartialEq>::eq(move _339, move _344) -> [return: bb150, unwind: bb215];
    }

    bb150: {
        switchInt(move _338) -> [0: bb152, otherwise: bb151];
    }

    bb151: {
        StorageDead(_344);
        StorageDead(_339);
        StorageDead(_342);
        StorageDead(_340);
        _337 = const ();
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        _533 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _352 = &(*_533);
        _351 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _352) -> [return: bb155, unwind: bb215];
    }

    bb152: {
        StorageDead(_344);
        StorageDead(_339);
        StorageDead(_342);
        StorageDead(_340);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = ConstraintRaw;
        _348 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _349) -> [return: bb153, unwind: bb215];
    }

    bb153: {
        StorageDead(_349);
        _347 = anchor_lang::error::Error::with_account_name::<&str>(move _348, const "fee_collector_ata") -> [return: bb154, unwind: bb215];
    }

    bb154: {
        StorageDead(_348);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _347);
        StorageDead(_347);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb196;
    }

    bb155: {
        StorageDead(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &_6;
        _360 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::load(move _361) -> [return: bb156, unwind: bb215];
    }

    bb156: {
        StorageDead(_361);
        _359 = <std::result::Result<Ref<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _360) -> [return: bb157, unwind: bb215];
    }

    bb157: {
        _442 = const true;
        _443 = const true;
        StorageDead(_360);
        _362 = discriminant(_359);
        switchInt(move _362) -> [0: bb158, 1: bb159, otherwise: bb5];
    }

    bb158: {
        StorageLive(_366);
        _366 = move ((_359 as Continue).0: std::cell::Ref<'_, state::global_config::GlobalConfig>);
        _358 = move _366;
        StorageDead(_366);
        _357 = &_358;
        _356 = <Ref<'_, global_config::GlobalConfig> as Deref>::deref(move _357) -> [return: bb161, unwind: bb210];
    }

    bb159: {
        StorageLive(_363);
        _363 = move ((_359 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_365);
        _365 = move _363;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _365) -> [return: bb160, unwind: bb229];
    }

    bb160: {
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_357);
        StorageDead(_354);
        _486 = discriminant(_359);
        _442 = const false;
        _443 = const false;
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb194;
    }

    bb161: {
        StorageDead(_357);
        _355 = &((*_356).2: anchor_lang::prelude::Pubkey);
        _354 = &(*_355);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _534 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _370 = &(*_534);
        _369 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _370) -> [return: bb162, unwind: bb210];
    }

    bb162: {
        StorageDead(_370);
        _368 = &_369;
        _367 = &(*_368);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = &_111;
        _375 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _376) -> [return: bb163, unwind: bb210];
    }

    bb163: {
        _374 = &(*_375);
        StorageDead(_376);
        _373 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _374) -> [return: bb164, unwind: bb210];
    }

    bb164: {
        StorageDead(_374);
        _372 = &_373;
        _371 = &(*_372);
        _353 = get_associated_token_address_with_program_id(move _354, move _367, move _371) -> [return: bb165, unwind: bb210];
    }

    bb165: {
        StorageDead(_371);
        StorageDead(_367);
        StorageDead(_354);
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_368);
        drop(_358) -> [return: bb224, unwind: bb229];
    }

    bb166: {
        switchInt(move _377) -> [0: bb171, otherwise: bb167];
    }

    bb167: {
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = ConstraintAddress;
        _383 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _384) -> [return: bb168, unwind: bb215];
    }

    bb168: {
        StorageDead(_384);
        _382 = anchor_lang::error::Error::with_account_name::<&str>(move _383, const "fee_collector_ata") -> [return: bb169, unwind: bb215];
    }

    bb169: {
        StorageDead(_383);
        StorageLive(_385);
        StorageLive(_386);
        _386 = _351;
        StorageLive(_387);
        _387 = _353;
        _385 = (move _386, move _387);
        StorageDead(_387);
        StorageDead(_386);
        _381 = anchor_lang::error::Error::with_pubkeys(move _382, move _385) -> [return: bb170, unwind: bb215];
    }

    bb170: {
        StorageDead(_385);
        StorageDead(_382);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _381);
        StorageDead(_381);
        StorageDead(_377);
        goto -> bb194;
    }

    bb171: {
        StorageDead(_379);
        StorageDead(_378);
        _350 = const ();
        StorageDead(_377);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _535 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _395 = &(*_535);
        _394 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _395) -> [return: bb172, unwind: bb215];
    }

    bb172: {
        _393 = &(*_394);
        _392 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _393) -> [return: bb173, unwind: bb215];
    }

    bb173: {
        StorageDead(_395);
        StorageDead(_393);
        _391 = &((*_392).1: anchor_lang::prelude::Pubkey);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &_6;
        _403 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::load(move _404) -> [return: bb174, unwind: bb215];
    }

    bb174: {
        StorageDead(_404);
        _402 = <std::result::Result<Ref<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _403) -> [return: bb175, unwind: bb215];
    }

    bb175: {
        _440 = const true;
        _441 = const true;
        StorageDead(_403);
        _405 = discriminant(_402);
        switchInt(move _405) -> [0: bb176, 1: bb177, otherwise: bb5];
    }

    bb176: {
        StorageLive(_409);
        _409 = move ((_402 as Continue).0: std::cell::Ref<'_, state::global_config::GlobalConfig>);
        _401 = move _409;
        StorageDead(_409);
        _400 = &_401;
        _399 = <Ref<'_, global_config::GlobalConfig> as Deref>::deref(move _400) -> [return: bb179, unwind: bb209];
    }

    bb177: {
        StorageLive(_406);
        _406 = move ((_402 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_408);
        _408 = move _406;
        _0 = <std::result::Result<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _408) -> [return: bb178, unwind: bb228];
    }

    bb178: {
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_400);
        StorageDead(_398);
        _484 = discriminant(_402);
        _440 = const false;
        _441 = const false;
        StorageDead(_402);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_391);
        goto -> bb192;
    }

    bb179: {
        StorageDead(_400);
        _398 = &((*_399).2: anchor_lang::prelude::Pubkey);
        _397 = <anchor_lang::prelude::Pubkey as anchor_lang::Key>::key(move _398) -> [return: bb180, unwind: bb209];
    }

    bb180: {
        _396 = &_397;
        StorageDead(_398);
        _390 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _391, move _396) -> [return: bb181, unwind: bb209];
    }

    bb181: {
        switchInt(move _390) -> [0: bb184, otherwise: bb182];
    }

    bb182: {
        drop(_401) -> [return: bb225, unwind: bb228];
    }

    bb183: {
        StorageDead(_412);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _411);
        StorageDead(_411);
        goto -> bb192;
    }

    bb184: {
        drop(_401) -> [return: bb226, unwind: bb228];
    }

    bb185: {
        _416 = &(*_417);
        _415 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _416) -> [return: bb186, unwind: bb215];
    }

    bb186: {
        StorageDead(_418);
        StorageDead(_416);
        _414 = &((*_415).0: anchor_lang::prelude::Pubkey);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _537 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _421 = &(*_537);
        _420 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _421) -> [return: bb187, unwind: bb215];
    }

    bb187: {
        _419 = &_420;
        StorageDead(_421);
        _413 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _414, move _419) -> [return: bb188, unwind: bb215];
    }

    bb188: {
        switchInt(move _413) -> [0: bb191, otherwise: bb189];
    }

    bb189: {
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_414);
        StorageLive(_423);
        StorageLive(_424);
        _424 = ConstraintTokenMint;
        _423 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _424) -> [return: bb190, unwind: bb215];
    }

    bb190: {
        StorageDead(_424);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Err(move _423);
        StorageDead(_423);
        StorageDead(_413);
        goto -> bb193;
    }

    bb191: {
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_414);
        _388 = const ();
        StorageDead(_413);
        StorageDead(_388);
        StorageLive(_425);
        StorageLive(_426);
        _426 = move _6;
        StorageLive(_427);
        _427 = move _21;
        StorageLive(_428);
        _428 = move _36;
        StorageLive(_429);
        _429 = move _51;
        StorageLive(_430);
        _430 = move _66;
        StorageLive(_431);
        _431 = move _81;
        StorageLive(_432);
        _432 = move _96;
        StorageLive(_433);
        _433 = move _111;
        _425 = handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees::<'_> { global_config: move _426, lending_market: move _427, reserve: move _428, reserve_liquidity_mint: move _429, lending_market_authority: move _430, fee_vault: move _431, fee_collector_ata: move _432, token_program: move _433 };
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        StorageDead(_430);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_426);
        _0 = std::result::Result::<handlers::handler_withdraw_protocol_fees::WithdrawProtocolFees<'_>, anchor_lang::error::Error>::Ok(move _425);
        StorageDead(_425);
        StorageDead(_221);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb208;
    }

    bb192: {
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb193;
    }

    bb193: {
        StorageDead(_388);
        goto -> bb196;
    }

    bb194: {
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        goto -> bb196;
    }

    bb195: {
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb196;
    }

    bb196: {
        StorageDead(_221);
        goto -> bb199;
    }

    bb197: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb199;
    }

    bb198: {
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb199;
    }

    bb199: {
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_111);
        drop(_96) -> [return: bb201, unwind: bb216];
    }

    bb201: {
        StorageDead(_96);
        drop(_81) -> [return: bb202, unwind: bb217];
    }

    bb202: {
        StorageDead(_81);
        drop(_66) -> [return: bb203, unwind: bb218];
    }

    bb203: {
        StorageDead(_66);
        drop(_51) -> [return: bb204, unwind: bb219];
    }

    bb204: {
        StorageDead(_51);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_36);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_21);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_6);
        goto -> bb208;
    }

    bb208: {
        return;
    }

    bb209 (cleanup): {
        drop(_401) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        drop(_358) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        drop(_294) -> [return: bb230, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_245) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_185) -> [return: bb235, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_157) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        drop(_96) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        drop(_81) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_66) -> [return: bb218, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        drop(_51) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        resume;
    }

    bb220: {
        _468 = discriminant(_158);
        _449 = const false;
        _450 = const false;
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_21;
        _166 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _167) -> [return: bb65, unwind: bb215];
    }

    bb221: {
        _470 = discriminant(_186);
        _447 = const false;
        _448 = const false;
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_183);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_180;
        StorageLive(_196);
        _196 = &_182;
        _194 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _195, move _196) -> [return: bb79, unwind: bb215];
    }

    bb222: {
        _474 = discriminant(_246);
        _438 = const false;
        _439 = const false;
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_227);
        StorageDead(_222);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_66;
        _266 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _267) -> [return: bb108, unwind: bb215];
    }

    bb223: {
        _476 = discriminant(_295);
        _444 = const false;
        _445 = const false;
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_292);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_289;
        StorageLive(_305);
        _305 = &_291;
        _303 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _304, move _305) -> [return: bb129, unwind: bb215];
    }

    bb224: {
        _478 = discriminant(_359);
        _442 = const false;
        _443 = const false;
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &_351;
        StorageLive(_379);
        _379 = &_353;
        _377 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _378, move _379) -> [return: bb166, unwind: bb215];
    }

    bb225: {
        _480 = discriminant(_402);
        _440 = const false;
        _441 = const false;
        StorageDead(_402);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_411);
        StorageLive(_412);
        _412 = ConstraintTokenOwner;
        _411 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _412) -> [return: bb183, unwind: bb215];
    }

    bb226: {
        _482 = discriminant(_402);
        _440 = const false;
        _441 = const false;
        StorageDead(_402);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_391);
        _389 = const ();
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _536 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _418 = &(*_536);
        _417 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _418) -> [return: bb185, unwind: bb215];
    }

    bb227: {
        _492 = discriminant(_246);
        _438 = const false;
        _439 = const false;
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_227);
        StorageDead(_222);
        goto -> bb196;
    }

    bb228 (cleanup): {
        _514 = discriminant(_402);
        goto -> bb215;
    }

    bb229 (cleanup): {
        _515 = discriminant(_359);
        goto -> bb215;
    }

    bb230 (cleanup): {
        _516 = discriminant(_295);
        goto -> bb215;
    }

    bb231 (cleanup): {
        drop(_271) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        switchInt(_446) -> [0: bb215, otherwise: bb231];
    }

    bb233 (cleanup): {
        _517 = discriminant(_222);
        goto -> bb212;
    }

    bb234 (cleanup): {
        _518 = discriminant(_246);
        goto -> bb215;
    }

    bb235 (cleanup): {
        _519 = discriminant(_186);
        goto -> bb215;
    }

    bb236 (cleanup): {
        _520 = discriminant(_158);
        goto -> bb215;
    }

    bb237 (cleanup): {
        drop(_146) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        switchInt(_451) -> [0: bb215, otherwise: bb237];
    }

    bb239 (cleanup): {
        _521 = discriminant(_112);
        goto -> bb215;
    }

    bb240 (cleanup): {
        _522 = discriminant(_97);
        goto -> bb216;
    }

    bb241 (cleanup): {
        _523 = discriminant(_82);
        goto -> bb217;
    }

    bb242 (cleanup): {
        _524 = discriminant(_67);
        goto -> bb218;
    }

    bb243 (cleanup): {
        _525 = discriminant(_52);
        goto -> bb219;
    }

    bb244 (cleanup): {
        _526 = discriminant(_37);
        goto -> bb219;
    }

    bb245 (cleanup): {
        _527 = discriminant(_22);
        goto -> bb219;
    }

    bb246 (cleanup): {
        _528 = discriminant(_7);
        goto -> bb219;
    }
}
