// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::fmt_hex` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::fmt_hex(_1: &uint_types::U128, _2: &mut Formatter<'_>, _3: bool) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    debug is_lower => _3;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[u64; 2];
    let _5: ();
    let mut _6: bool;
    let mut _7: &utils::fraction::uint_types::U128;
    let mut _8: !;
    let mut _9: &mut std::fmt::Formatter<'_>;
    let mut _10: &str;
    let _11: &str;
    let mut _12: &str;
    let _13: &str;
    let _17: ();
    let mut _18: std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _19: std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _20: std::slice::Iter<'_, u64>;
    let mut _21: &[u64];
    let mut _22: &[u64; 2];
    let mut _24: ();
    let _25: ();
    let mut _26: std::option::Option<&u64>;
    let mut _27: &mut std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _28: &mut std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _29: isize;
    let mut _30: !;
    let mut _32: std::ops::Range<i32>;
    let mut _33: std::ops::Range<i32>;
    let _35: ();
    let mut _36: std::option::Option<i32>;
    let mut _37: &mut std::ops::Range<i32>;
    let mut _38: &mut std::ops::Range<i32>;
    let mut _39: isize;
    let mut _40: !;
    let mut _43: u64;
    let mut _44: &u64;
    let mut _45: u64;
    let mut _46: u64;
    let mut _47: i32;
    let mut _48: i32;
    let mut _49: i32;
    let mut _50: (i32, bool);
    let mut _51: (i32, bool);
    let mut _52: bool;
    let mut _53: u64;
    let mut _54: i32;
    let mut _55: i32;
    let mut _56: i32;
    let mut _57: (i32, bool);
    let mut _58: (i32, bool);
    let mut _59: bool;
    let _60: ();
    let mut _61: bool;
    let mut _62: u64;
    let mut _63: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: &u64;
    let mut _68: u8;
    let mut _69: u64;
    let mut _70: (u8, bool);
    let mut _71: bool;
    let mut _72: u8;
    let mut _73: u8;
    let mut _74: u64;
    let mut _75: (u8, bool);
    let mut _76: (u8, bool);
    let mut _77: u8;
    let mut _78: u8;
    let mut _79: u64;
    let mut _80: (u8, bool);
    let mut _81: (u8, bool);
    let mut _82: u8;
    let _83: usize;
    let mut _84: usize;
    let mut _85: bool;
    let mut _86: (usize, bool);
    let mut _88: &[u8];
    let _89: &[u8];
    let _90: &[u8];
    let mut _91: &[u8; 32];
    let mut _92: std::ops::Range<usize>;
    let mut _93: usize;
    let mut _94: &mut std::fmt::Formatter<'_>;
    let mut _95: &str;
    let _96: &str;
    let mut _97: &str;
    scope 1 {
        debug data => _4;
        let mut _14: bool;
        scope 2 {
            debug latch => _14;
            let mut _15: [u8; 32];
            scope 3 {
                debug buf => _15;
                let mut _16: usize;
                scope 4 {
                    debug i => _16;
                    let mut _23: std::iter::Rev<std::slice::Iter<'_, u64>>;
                    let _87: &str;
                    scope 5 {
                        debug iter => _23;
                        let _31: &u64;
                        scope 6 {
                            debug ch => _31;
                            let mut _34: std::ops::Range<i32>;
                            scope 7 {
                                debug iter => _34;
                                let _41: i32;
                                scope 8 {
                                    debug x => _41;
                                    let _42: u64;
                                    scope 9 {
                                        debug nibble => _42;
                                        let _64: u8;
                                        scope 10 {
                                            debug nibble => _64;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 11 {
                        debug s => _87;
                    }
                    scope 12 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = &((*_1).0: [u64; 2]);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = uint_types::U128::is_zero(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = &mut (*_2);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "0x";
        _10 = &(*_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const "0";
        _12 = &(*_13);
        _0 = Formatter::<'_>::pad_integral(move _9, const true, move _10, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb47;
    }

    bb4: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_14);
        _14 = const false;
        StorageLive(_15);
        _15 = [const 0_u8; 32];
        StorageLive(_16);
        _16 = const 0_usize;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_4);
        _21 = move _22 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_22);
        _20 = core::slice::<impl [u64]>::iter(move _21) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_21);
        _19 = <std::slice::Iter<'_, u64> as Iterator>::rev(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        _18 = <Rev<std::slice::Iter<'_, u64>> as IntoIterator>::into_iter(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_23);
        _23 = move _18;
        goto -> bb8;
    }

    bb8: {
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut _23;
        _27 = &mut (*_28);
        _26 = <Rev<std::slice::Iter<'_, u64>> as Iterator>::next(move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        StorageLive(_31);
        _31 = ((_26 as Some).0: &u64);
        StorageLive(_32);
        StorageLive(_33);
        _33 = std::ops::Range::<i32> { start: const 0_i32, end: const 16_i32 };
        _32 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _33) -> [return: bb13, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _17 = const ();
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_15;
        StorageLive(_92);
        StorageLive(_93);
        _93 = _16;
        _92 = std::ops::Range::<usize> { start: const 0_usize, end: move _93 };
        StorageDead(_93);
        _90 = <[u8; 32] as Index<std::ops::Range<usize>>>::index(move _91, move _92) -> [return: bb44, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        StorageLive(_34);
        _34 = move _32;
        goto -> bb14;
    }

    bb14: {
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &mut _34;
        _37 = &mut (*_38);
        _36 = <std::ops::Range<i32> as Iterator>::next(move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb17, 1: bb16, otherwise: bb11];
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_36 as Some).0: i32);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _31;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _41;
        _50 = CheckedSub(const 15_i32, _49);
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const 15_i32, move _49) -> [success: bb18, unwind continue];
    }

    bb17: {
        _25 = const ();
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        _24 = const ();
        goto -> bb8;
    }

    bb18: {
        _48 = move (_50.0: i32);
        StorageDead(_49);
        _51 = CheckedMul(_48, const 4_i32);
        assert(!move (_51.1: bool), "attempt to compute `{} * {}`, which would overflow", move _48, const 4_i32) -> [success: bb19, unwind continue];
    }

    bb19: {
        _47 = move (_51.0: i32);
        StorageDead(_48);
        _46 = move _47 as u64 (IntToInt);
        StorageDead(_47);
        _52 = Lt(_46, const 64_u64);
        assert(move _52, "attempt to shift left by `{}`, which would overflow", _46) -> [success: bb20, unwind continue];
    }

    bb20: {
        _45 = Shl(const 15_u64, move _46);
        StorageDead(_46);
        _43 = <&u64 as BitAnd<u64>>::bitand(move _44, move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _41;
        _57 = CheckedSub(const 15_i32, _56);
        assert(!move (_57.1: bool), "attempt to compute `{} - {}`, which would overflow", const 15_i32, move _56) -> [success: bb22, unwind continue];
    }

    bb22: {
        _55 = move (_57.0: i32);
        StorageDead(_56);
        _58 = CheckedMul(_55, const 4_i32);
        assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", move _55, const 4_i32) -> [success: bb23, unwind continue];
    }

    bb23: {
        _54 = move (_58.0: i32);
        StorageDead(_55);
        _53 = move _54 as u64 (IntToInt);
        StorageDead(_54);
        _59 = Lt(_53, const 64_u64);
        assert(move _59, "attempt to shift right by `{}`, which would overflow", _53) -> [success: bb24, unwind continue];
    }

    bb24: {
        _42 = Shr(move _43, move _53);
        StorageDead(_53);
        StorageDead(_43);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _14;
        switchInt(move _61) -> [0: bb25, otherwise: bb26];
    }

    bb25: {
        StorageLive(_62);
        _62 = _42;
        _14 = Ne(move _62, const 0_u64);
        StorageDead(_62);
        _60 = const ();
        goto -> bb27;
    }

    bb26: {
        _60 = const ();
        goto -> bb27;
    }

    bb27: {
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_63);
        _63 = _14;
        switchInt(move _63) -> [0: bb42, otherwise: bb28];
    }

    bb28: {
        StorageLive(_64);
        _65 = Le(const 0_u64, _42);
        switchInt(move _65) -> [0: bb32, otherwise: bb29];
    }

    bb29: {
        _66 = Le(_42, const 9_u64);
        switchInt(move _66) -> [0: bb32, otherwise: bb30];
    }

    bb30: {
        StorageLive(_68);
        StorageLive(_69);
        _69 = _42;
        _68 = move _69 as u8 (IntToInt);
        StorageDead(_69);
        _70 = CheckedAdd(_68, const 48_u8);
        assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", move _68, const 48_u8) -> [success: bb31, unwind continue];
    }

    bb31: {
        _64 = move (_70.0: u8);
        StorageDead(_68);
        goto -> bb39;
    }

    bb32: {
        StorageLive(_71);
        _71 = _3;
        switchInt(move _71) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _42;
        _73 = move _74 as u8 (IntToInt);
        StorageDead(_74);
        _75 = CheckedSub(_73, const 10_u8);
        assert(!move (_75.1: bool), "attempt to compute `{} - {}`, which would overflow", move _73, const 10_u8) -> [success: bb35, unwind continue];
    }

    bb34: {
        StorageDead(_71);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _42;
        _78 = move _79 as u8 (IntToInt);
        StorageDead(_79);
        _80 = CheckedSub(_78, const 10_u8);
        assert(!move (_80.1: bool), "attempt to compute `{} - {}`, which would overflow", move _78, const 10_u8) -> [success: bb37, unwind continue];
    }

    bb35: {
        _72 = move (_75.0: u8);
        StorageDead(_73);
        _76 = CheckedAdd(_72, const 97_u8);
        assert(!move (_76.1: bool), "attempt to compute `{} + {}`, which would overflow", move _72, const 97_u8) -> [success: bb36, unwind continue];
    }

    bb36: {
        _64 = move (_76.0: u8);
        StorageDead(_72);
        goto -> bb39;
    }

    bb37: {
        _77 = move (_80.0: u8);
        StorageDead(_78);
        _81 = CheckedAdd(_77, const 65_u8);
        assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _77, const 65_u8) -> [success: bb38, unwind continue];
    }

    bb38: {
        _64 = move (_81.0: u8);
        StorageDead(_77);
        goto -> bb39;
    }

    bb39: {
        StorageLive(_82);
        _82 = _64;
        StorageLive(_83);
        _83 = _16;
        _84 = Len(_15);
        _85 = Lt(_83, _84);
        assert(move _85, "index out of bounds: the length is {} but the index is {}", move _84, _83) -> [success: bb40, unwind continue];
    }

    bb40: {
        _15[_83] = move _82;
        StorageDead(_82);
        StorageDead(_83);
        _86 = CheckedAdd(_16, const 1_usize);
        assert(!move (_86.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_usize) -> [success: bb41, unwind continue];
    }

    bb41: {
        _16 = move (_86.0: usize);
        _35 = const ();
        StorageDead(_64);
        goto -> bb43;
    }

    bb42: {
        _35 = const ();
        goto -> bb43;
    }

    bb43: {
        StorageDead(_63);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        _24 = const ();
        goto -> bb14;
    }

    bb44: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = &(*_90);
        _88 = &(*_89);
        _87 = from_utf8_unchecked(move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_94);
        _94 = &mut (*_2);
        StorageLive(_95);
        StorageLive(_96);
        _96 = const "0x";
        _95 = &(*_96);
        StorageLive(_97);
        _97 = &(*_87);
        _0 = Formatter::<'_>::pad_integral(move _94, const true, move _95, move _97) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_87);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_4);
        StorageDead(_96);
        goto -> bb47;
    }

    bb47: {
        return;
    }
}
