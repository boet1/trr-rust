// MIR for `handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::process_impl` before PreCodegen

fn handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::process_impl(_1: &handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, _2: u64, _3: state::types::MaxReservesAsCollateralCheck) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug liquidity_amount => _2;
    debug max_reserves_as_collateral_check => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let mut _7: &std::string::String;
    let _8: &std::string::String;
    let _9: std::string::String;
    let _10: std::string::String;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[&str; 2];
    let _14: &[&str; 2];
    let _15: [&str; 2];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let mut _17: &[core::fmt::rt::Argument<'_>; 2];
    let _18: &[core::fmt::rt::Argument<'_>; 2];
    let _19: [core::fmt::rt::Argument<'_>; 2];
    let mut _20: core::fmt::rt::Argument<'_>;
    let mut _21: &anchor_lang::prelude::Pubkey;
    let _22: &anchor_lang::prelude::Pubkey;
    let _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &u64;
    let _27: &u64;
    let _28: ();
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _30: std::result::Result<(), anchor_lang::error::Error>;
    let mut _31: &state::nested_accounts::DepositReserveLiquidityAndObligationCollateralAccounts<'_>;
    let _32: &state::nested_accounts::DepositReserveLiquidityAndObligationCollateralAccounts<'_>;
    let _33: state::nested_accounts::DepositReserveLiquidityAndObligationCollateralAccounts<'_>;
    let mut _34: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _35: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _36: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _37: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _38: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _39: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _44: ();
    let _45: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _46: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _48: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _49: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _54: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _56: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _58: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _59: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _66: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _68: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _76: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _79: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _86: [&[u8]; 3];
    let mut _87: &[u8];
    let mut _88: &[u8];
    let _89: &[u8];
    let mut _90: &[u8];
    let _91: &[u8];
    let mut _92: &anchor_lang::prelude::Pubkey;
    let mut _93: &[u8];
    let mut _94: &[u8; 1];
    let _95: &[u8; 1];
    let _96: [u8; 1];
    let mut _97: u8;
    let mut _98: u64;
    let mut _99: &state::lending_market::LendingMarket;
    let mut _100: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _103: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _104: &anchor_lang::prelude::AccountInfo<'_>;
    let _105: &anchor_lang::prelude::AccountInfo<'_>;
    let _106: anchor_lang::prelude::AccountInfo<'_>;
    let mut _107: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _114: &state::reserve::Reserve;
    let mut _115: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _118: state::types::DepositLiquidityResult;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::DepositLiquidityResult>;
    let mut _120: std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error>;
    let mut _121: &mut state::reserve::Reserve;
    let mut _122: &mut state::reserve::Reserve;
    let mut _123: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _124: &anchor_lang::prelude::Clock;
    let _125: &anchor_lang::prelude::Clock;
    let mut _126: u64;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _134: std::result::Result<(), anchor_lang::error::Error>;
    let mut _135: &mut state::reserve::Reserve;
    let mut _136: &mut state::reserve::Reserve;
    let mut _137: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _138: &anchor_lang::prelude::Clock;
    let _139: &anchor_lang::prelude::Clock;
    let mut _140: std::option::Option<utils::prices::GetPriceResult>;
    let mut _141: u16;
    let mut _142: &state::lending_market::LendingMarket;
    let mut _143: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _144: isize;
    let mut _146: !;
    let mut _147: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _149: ();
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _151: std::result::Result<(), anchor_lang::error::Error>;
    let mut _152: &state::lending_market::LendingMarket;
    let _153: &state::lending_market::LendingMarket;
    let mut _154: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _155: &mut state::reserve::Reserve;
    let mut _156: &mut state::reserve::Reserve;
    let mut _157: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _158: &mut state::obligation::Obligation;
    let mut _159: &mut state::obligation::Obligation;
    let mut _160: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _161: u64;
    let mut _162: u64;
    let mut _163: anchor_lang::prelude::Pubkey;
    let mut _164: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _165: state::types::MaxReservesAsCollateralCheck;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _171: ();
    let mut _172: &str;
    let _173: &str;
    let mut _174: &std::string::String;
    let _175: &std::string::String;
    let _176: std::string::String;
    let mut _178: std::fmt::Arguments<'_>;
    let mut _179: &[&str];
    let mut _180: &[&str; 2];
    let _181: &[&str; 2];
    let _182: [&str; 2];
    let mut _183: &[core::fmt::rt::Argument<'_>];
    let mut _184: &[core::fmt::rt::Argument<'_>; 2];
    let _185: &[core::fmt::rt::Argument<'_>; 2];
    let _186: [core::fmt::rt::Argument<'_>; 2];
    let mut _187: core::fmt::rt::Argument<'_>;
    let mut _188: &u64;
    let _189: &u64;
    let mut _190: core::fmt::rt::Argument<'_>;
    let mut _191: &u64;
    let _192: &u64;
    let _193: ();
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _195: std::result::Result<(), anchor_lang::error::Error>;
    let mut _196: anchor_lang::prelude::AccountInfo<'_>;
    let mut _197: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _198: anchor_lang::prelude::AccountInfo<'_>;
    let mut _199: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _200: anchor_lang::prelude::AccountInfo<'_>;
    let mut _201: &anchor_lang::prelude::Signer<'_>;
    let mut _202: anchor_lang::prelude::AccountInfo<'_>;
    let mut _203: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _204: anchor_lang::prelude::AccountInfo<'_>;
    let mut _205: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _206: anchor_lang::prelude::AccountInfo<'_>;
    let mut _207: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _208: anchor_lang::prelude::AccountInfo<'_>;
    let mut _209: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _210: anchor_lang::prelude::AccountInfo<'_>;
    let mut _211: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _212: anchor_lang::prelude::AccountInfo<'_>;
    let mut _213: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _214: &[&[u8]];
    let mut _215: &[&[u8]; 3];
    let mut _216: u64;
    let mut _217: u8;
    let mut _218: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _219: &anchor_spl::token_interface::Mint;
    let _220: &anchor_spl::token_interface::Mint;
    let mut _221: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _222: u64;
    let mut _223: isize;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _228: ();
    let mut _229: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _230: std::result::Result<(), anchor_lang::error::Error>;
    let mut _231: u64;
    let mut _232: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _233: &anchor_lang::prelude::AccountInfo<'_>;
    let _234: &anchor_lang::prelude::AccountInfo<'_>;
    let _235: anchor_lang::prelude::AccountInfo<'_>;
    let mut _236: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _237: u64;
    let mut _238: &state::reserve::Reserve;
    let mut _239: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _240: u64;
    let mut _241: u64;
    let mut _242: state::types::LendingAction;
    let mut _243: u64;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _249: ();
    let mut _251: &[&str; 2];
    let mut _252: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _253: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _254: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _255: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _256: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _257: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _258: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _259: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: bool;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _325: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _326: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _327: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _328: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _329: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _330: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _331: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug res => _10;
    }
    scope 2 {
        debug residual => _41;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _44;
        scope 5 {
        }
    }
    scope 6 {
        debug reserve => _45;
        let _55: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
        let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _64: std::cell::RefMut<'_, state::obligation::Obligation>;
        scope 11 {
            debug obligation => _55;
            let _65: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
            let _71: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _74: std::cell::Ref<'_, state::lending_market::LendingMarket>;
            scope 16 {
                debug lending_market => _65;
                let _75: anchor_lang::prelude::Pubkey;
                scope 21 {
                    debug lending_market_key => _75;
                    let _77: anchor_lang::prelude::Clock;
                    let _81: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _84: anchor_lang::prelude::Clock;
                    scope 22 {
                        debug clock => _77;
                        let _85: &[&[u8]; 3];
                        scope 27 {
                            debug authority_signer_seeds => _85;
                            let _101: u64;
                            let _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _112: u64;
                            scope 28 {
                                debug initial_reserve_token_balance => _101;
                                let _113: u64;
                                scope 33 {
                                    debug initial_reserve_available_liquidity => _113;
                                    let _116: u64;
                                    let _117: u64;
                                    let _128: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _131: state::types::DepositLiquidityResult;
                                    scope 34 {
                                        debug liquidity_amount => _116;
                                        debug collateral_amount => _117;
                                        let _145: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _148: ();
                                        let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _170: ();
                                        let _177: std::string::String;
                                        let _224: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _227: ();
                                        let _245: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _248: ();
                                        let mut _250: &[&str; 2];
                                        scope 39 {
                                            debug residual => _145;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _148;
                                            scope 42 {
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _167;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _170;
                                            scope 46 {
                                            }
                                        }
                                        scope 47 {
                                            debug res => _177;
                                        }
                                        scope 48 {
                                            debug residual => _224;
                                            scope 49 {
                                            }
                                        }
                                        scope 50 {
                                            debug val => _227;
                                            scope 51 {
                                            }
                                        }
                                        scope 52 {
                                            debug residual => _245;
                                            scope 53 {
                                            }
                                        }
                                        scope 54 {
                                            debug val => _248;
                                            scope 55 {
                                            }
                                        }
                                    }
                                    scope 35 {
                                        debug residual => _128;
                                        scope 36 {
                                        }
                                    }
                                    scope 37 {
                                        debug val => _131;
                                        scope 38 {
                                        }
                                    }
                                }
                            }
                            scope 29 {
                                debug residual => _109;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _112;
                                scope 32 {
                                }
                            }
                        }
                    }
                    scope 23 {
                        debug residual => _81;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _84;
                        scope 26 {
                        }
                    }
                }
            }
            scope 17 {
                debug residual => _71;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _74;
                scope 20 {
                }
            }
        }
        scope 12 {
            debug residual => _61;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _64;
            scope 15 {
            }
        }
    }
    scope 7 {
        debug residual => _51;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _54;
        scope 10 {
        }
    }

    bb0: {
        _268 = const false;
        _267 = const false;
        _266 = const false;
        _265 = const false;
        _264 = const false;
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _251 = const _;
        _14 = &(*_251);
        _13 = &(*_14);
        _12 = move _13 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _23 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _24) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _21) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_21);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_2;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        _19 = [move _20, move _25];
        StorageDead(_25);
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = move _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_17);
        _11 = Arguments::<'_>::new_v1(move _12, move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_16);
        StorageDead(_12);
        _10 = format(move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_14);
        _9 = move _10;
        StorageDead(_10);
        _8 = &_9;
        _7 = &(*_8);
        _6 = <std::string::String as Deref>::deref(move _7) -> [return: bb6, unwind: bb127];
    }

    bb6: {
        _5 = &(*_6);
        StorageDead(_7);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb7, unwind: bb127];
    }

    bb7: {
        StorageDead(_5);
        drop(_9) -> [return: bb8, unwind: bb128];
    }

    bb8: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_1).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _34 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as Clone>::clone(move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _36 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as Clone>::clone(move _37) -> [return: bb10, unwind: bb126];
    }

    bb10: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _38 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as Clone>::clone(move _39) -> [return: bb11, unwind: bb126];
    }

    bb11: {
        StorageDead(_39);
        _33 = nested_accounts::DepositReserveLiquidityAndObligationCollateralAccounts::<'_> { user_source_liquidity: move _34, reserve: move _36, reserve_liquidity_mint: move _38 };
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = deposit_reserve_liquidity_and_obligation_collateral_checks(move _31) -> [return: bb12, unwind: bb125];
    }

    bb12: {
        StorageDead(_31);
        _29 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _30) -> [return: bb13, unwind: bb125];
    }

    bb13: {
        StorageDead(_30);
        _40 = discriminant(_29);
        switchInt(move _40) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        StorageLive(_44);
        _44 = ((_29 as Continue).0: ());
        _28 = _44;
        StorageDead(_44);
        _269 = discriminant(_29);
        drop(_33) -> [return: bb18, unwind: bb128];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_41);
        _41 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _43) -> [return: bb17, unwind: bb157];
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_41);
        _311 = discriminant(_29);
        drop(_33) -> [return: bb117, unwind: bb128];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _48 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        _47 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _48) -> [return: bb20, unwind: bb128];
    }

    bb20: {
        StorageDead(_48);
        _50 = discriminant(_47);
        switchInt(move _50) -> [0: bb21, 1: bb22, otherwise: bb15];
    }

    bb21: {
        StorageLive(_54);
        _54 = move ((_47 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _46 = move _54;
        StorageDead(_54);
        _45 = &mut _46;
        _271 = discriminant(_47);
        StorageDead(_47);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _58 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _59) -> [return: bb24, unwind: bb124];
    }

    bb22: {
        StorageLive(_51);
        _51 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _53) -> [return: bb23, unwind: bb156];
    }

    bb23: {
        StorageDead(_53);
        StorageDead(_51);
        _309 = discriminant(_47);
        StorageDead(_47);
        goto -> bb116;
    }

    bb24: {
        StorageDead(_59);
        _57 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _58) -> [return: bb25, unwind: bb124];
    }

    bb25: {
        StorageDead(_58);
        _60 = discriminant(_57);
        switchInt(move _60) -> [0: bb26, 1: bb27, otherwise: bb15];
    }

    bb26: {
        StorageLive(_64);
        _64 = move ((_57 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _56 = move _64;
        StorageDead(_64);
        _55 = &mut _56;
        _273 = discriminant(_57);
        StorageDead(_57);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _68 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _69) -> [return: bb29, unwind: bb123];
    }

    bb27: {
        StorageLive(_61);
        _61 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb28, unwind: bb155];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_61);
        _307 = discriminant(_57);
        StorageDead(_57);
        goto -> bb115;
    }

    bb29: {
        StorageDead(_69);
        _67 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb30, unwind: bb123];
    }

    bb30: {
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb31, 1: bb32, otherwise: bb15];
    }

    bb31: {
        StorageLive(_74);
        _74 = move ((_67 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _66 = move _74;
        StorageDead(_74);
        _65 = &_66;
        _275 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _75 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _76) -> [return: bb34, unwind: bb122];
    }

    bb32: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _73) -> [return: bb33, unwind: bb154];
    }

    bb33: {
        StorageDead(_73);
        StorageDead(_71);
        _305 = discriminant(_67);
        StorageDead(_67);
        goto -> bb114;
    }

    bb34: {
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb35, unwind: bb122];
    }

    bb35: {
        _78 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _79) -> [return: bb36, unwind: bb122];
    }

    bb36: {
        StorageDead(_79);
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb37, 1: bb38, otherwise: bb15];
    }

    bb37: {
        StorageLive(_84);
        _84 = move ((_78 as Continue).0: anchor_lang::prelude::Clock);
        _77 = move _84;
        StorageDead(_84);
        _277 = discriminant(_78);
        StorageDead(_78);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = const _;
        _88 = &(*_89);
        _87 = _88;
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_75;
        _91 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _92) -> [return: bb40, unwind: bb122];
    }

    bb38: {
        StorageLive(_81);
        _81 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _83) -> [return: bb39, unwind: bb153];
    }

    bb39: {
        StorageDead(_83);
        StorageDead(_81);
        _303 = discriminant(_78);
        StorageDead(_78);
        goto -> bb113;
    }

    bb40: {
        _90 = &(*_91);
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_65);
        _99 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _100) -> [return: bb41, unwind: bb122];
    }

    bb41: {
        StorageDead(_100);
        _98 = ((*_99).1: u64);
        _97 = move _98 as u8 (IntToInt);
        StorageDead(_98);
        _96 = [move _97];
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_94);
        _86 = [move _87, move _90, move _93];
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        _85 = &_86;
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _252 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _324 = (((_252.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _107 = &(*_324);
        _106 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _107) -> [return: bb42, unwind: bb122];
    }

    bb42: {
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = amount(move _104) -> [return: bb43, unwind: bb121];
    }

    bb43: {
        StorageDead(_104);
        _102 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _103) -> [return: bb44, unwind: bb121];
    }

    bb44: {
        StorageDead(_103);
        _108 = discriminant(_102);
        switchInt(move _108) -> [0: bb45, 1: bb46, otherwise: bb15];
    }

    bb45: {
        StorageLive(_112);
        _112 = ((_102 as Continue).0: u64);
        _101 = _112;
        StorageDead(_112);
        _279 = discriminant(_102);
        drop(_106) -> [return: bb48, unwind: bb122];
    }

    bb46: {
        StorageLive(_109);
        _109 = move ((_102 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_111);
        _111 = move _109;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _111) -> [return: bb47, unwind: bb152];
    }

    bb47: {
        StorageDead(_111);
        StorageDead(_109);
        _301 = discriminant(_102);
        drop(_106) -> [return: bb111, unwind: bb122];
    }

    bb48: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_102);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_45);
        _114 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _115) -> [return: bb49, unwind: bb122];
    }

    bb49: {
        StorageDead(_115);
        _113 = (((*_114).5: state::reserve::ReserveLiquidity).3: u64);
        StorageDead(_114);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut (*_45);
        _122 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _123) -> [return: bb50, unwind: bb122];
    }

    bb50: {
        _121 = &mut (*_122);
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_77;
        _124 = &(*_125);
        StorageLive(_126);
        _126 = _2;
        _120 = lending_operations::deposit_reserve_liquidity(move _121, move _124, move _126) -> [return: bb51, unwind: bb122];
    }

    bb51: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_121);
        _119 = <std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> as Try>::branch(move _120) -> [return: bb52, unwind: bb122];
    }

    bb52: {
        StorageDead(_120);
        _127 = discriminant(_119);
        switchInt(move _127) -> [0: bb53, 1: bb54, otherwise: bb15];
    }

    bb53: {
        StorageLive(_131);
        _131 = move ((_119 as Continue).0: state::types::DepositLiquidityResult);
        _118 = move _131;
        StorageDead(_131);
        StorageLive(_116);
        _116 = (_118.0: u64);
        StorageLive(_117);
        _117 = (_118.1: u64);
        _281 = discriminant(_119);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &mut (*_45);
        _136 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _137) -> [return: bb56, unwind: bb122];
    }

    bb54: {
        StorageLive(_128);
        _128 = move ((_119 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _130) -> [return: bb55, unwind: bb151];
    }

    bb55: {
        StorageDead(_130);
        StorageDead(_128);
        _299 = discriminant(_119);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb110;
    }

    bb56: {
        _135 = &mut (*_136);
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_77;
        _138 = &(*_139);
        StorageLive(_140);
        _140 = std::option::Option::<prices::GetPriceResult>::None;
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &(*_65);
        _142 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _143) -> [return: bb57, unwind: bb122];
    }

    bb57: {
        StorageDead(_143);
        _141 = ((*_142).5: u16);
        _134 = lending_operations::refresh_reserve(move _135, move _138, move _140, move _141) -> [return: bb58, unwind: bb122];
    }

    bb58: {
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_135);
        _133 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _134) -> [return: bb59, unwind: bb122];
    }

    bb59: {
        StorageDead(_134);
        _144 = discriminant(_133);
        switchInt(move _144) -> [0: bb60, 1: bb61, otherwise: bb15];
    }

    bb60: {
        StorageLive(_148);
        _148 = ((_133 as Continue).0: ());
        _132 = _148;
        StorageDead(_148);
        _283 = discriminant(_133);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &(*_65);
        _153 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _154) -> [return: bb63, unwind: bb122];
    }

    bb61: {
        StorageLive(_145);
        _145 = move ((_133 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_147);
        _147 = move _145;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _147) -> [return: bb62, unwind: bb150];
    }

    bb62: {
        StorageDead(_147);
        StorageDead(_145);
        _297 = discriminant(_133);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb109;
    }

    bb63: {
        _152 = &(*_153);
        StorageDead(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &mut (*_45);
        _156 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _157) -> [return: bb64, unwind: bb122];
    }

    bb64: {
        _155 = &mut (*_156);
        StorageDead(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &mut (*_55);
        _159 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _160) -> [return: bb65, unwind: bb122];
    }

    bb65: {
        _158 = &mut (*_159);
        StorageDead(_160);
        StorageLive(_161);
        _161 = (_77.0: u64);
        StorageLive(_162);
        _162 = _117;
        StorageLive(_163);
        StorageLive(_164);
        _164 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _163 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _164) -> [return: bb66, unwind: bb122];
    }

    bb66: {
        StorageDead(_164);
        StorageLive(_165);
        _165 = move _3;
        _151 = lending_operations::deposit_obligation_collateral(move _152, move _155, move _158, move _161, move _162, move _163, move _165) -> [return: bb67, unwind: bb122];
    }

    bb67: {
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_152);
        _150 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _151) -> [return: bb68, unwind: bb122];
    }

    bb68: {
        StorageDead(_151);
        _166 = discriminant(_150);
        switchInt(move _166) -> [0: bb69, 1: bb70, otherwise: bb15];
    }

    bb69: {
        StorageLive(_170);
        _170 = ((_150 as Continue).0: ());
        _149 = _170;
        StorageDead(_170);
        _285 = discriminant(_150);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _250 = const _;
        _181 = &(*_250);
        _180 = &(*_181);
        _179 = move _180 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_180);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_116;
        _188 = &(*_189);
        _187 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _188) -> [return: bb72, unwind: bb122];
    }

    bb70: {
        StorageLive(_167);
        _167 = move ((_150 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb71, unwind: bb149];
    }

    bb71: {
        StorageDead(_169);
        StorageDead(_167);
        _295 = discriminant(_150);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb109;
    }

    bb72: {
        StorageDead(_188);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &_117;
        _191 = &(*_192);
        _190 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _191) -> [return: bb73, unwind: bb122];
    }

    bb73: {
        StorageDead(_191);
        _186 = [move _187, move _190];
        StorageDead(_190);
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _183 = move _184 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_184);
        _178 = Arguments::<'_>::new_v1(move _179, move _183) -> [return: bb74, unwind: bb122];
    }

    bb74: {
        StorageDead(_183);
        StorageDead(_179);
        _177 = format(move _178) -> [return: bb75, unwind: bb122];
    }

    bb75: {
        StorageDead(_178);
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_181);
        _176 = move _177;
        StorageDead(_177);
        _175 = &_176;
        _174 = &(*_175);
        _173 = <std::string::String as Deref>::deref(move _174) -> [return: bb76, unwind: bb120];
    }

    bb76: {
        _172 = &(*_173);
        StorageDead(_174);
        _171 = solana_program::log::sol_log(move _172) -> [return: bb77, unwind: bb120];
    }

    bb77: {
        StorageDead(_172);
        drop(_176) -> [return: bb78, unwind: bb122];
    }

    bb78: {
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_171);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _253 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _325 = (((_253.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _197 = &(*_325);
        _196 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _197) -> [return: bb79, unwind: bb122];
    }

    bb79: {
        _268 = const true;
        StorageDead(_197);
        StorageLive(_198);
        StorageLive(_199);
        _254 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _326 = (((_254.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _199 = &(*_326);
        _198 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _199) -> [return: bb80, unwind: bb148];
    }

    bb80: {
        _267 = const true;
        StorageDead(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _200 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _201) -> [return: bb81, unwind: bb146];
    }

    bb81: {
        _266 = const true;
        StorageDead(_201);
        StorageLive(_202);
        StorageLive(_203);
        _255 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _327 = (((_255.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _203 = &(*_327);
        _202 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _203) -> [return: bb82, unwind: bb144];
    }

    bb82: {
        _265 = const true;
        StorageDead(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &((*_1).12: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _204 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _205) -> [return: bb83, unwind: bb142];
    }

    bb83: {
        _264 = const true;
        StorageDead(_205);
        StorageLive(_206);
        StorageLive(_207);
        _256 = deref_copy ((*_1).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _328 = (((_256.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _207 = &(*_328);
        _206 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _207) -> [return: bb84, unwind: bb140];
    }

    bb84: {
        _263 = const true;
        StorageDead(_207);
        StorageLive(_208);
        StorageLive(_209);
        _257 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _329 = (((_257.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _209 = &(*_329);
        _208 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _209) -> [return: bb85, unwind: bb138];
    }

    bb85: {
        _262 = const true;
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &((*_1).11: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _210 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _211) -> [return: bb86, unwind: bb136];
    }

    bb86: {
        _261 = const true;
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _212 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _213) -> [return: bb87, unwind: bb134];
    }

    bb87: {
        _260 = const true;
        StorageDead(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &(*_85);
        _214 = move _215 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_215);
        StorageLive(_216);
        _216 = _116;
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _258 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _330 = (((_258.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _221 = &(*_330);
        _220 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _221) -> [return: bb88, unwind: bb132];
    }

    bb88: {
        _219 = &(*_220);
        _218 = <anchor_spl::token_interface::Mint as Deref>::deref(move _219) -> [return: bb89, unwind: bb132];
    }

    bb89: {
        StorageDead(_221);
        StorageDead(_219);
        _217 = ((*_218).2: u8);
        StorageLive(_222);
        _222 = _117;
        _268 = const false;
        _267 = const false;
        _266 = const false;
        _265 = const false;
        _264 = const false;
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        _195 = deposit_reserve_liquidity_and_obligation_collateral_transfer(move _196, move _198, move _200, move _202, move _204, move _206, move _208, move _210, move _212, move _214, move _216, move _217, move _222) -> [return: bb90, unwind: bb132];
    }

    bb90: {
        StorageDead(_222);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        _260 = const false;
        StorageDead(_212);
        _261 = const false;
        StorageDead(_210);
        _262 = const false;
        StorageDead(_208);
        _263 = const false;
        StorageDead(_206);
        _264 = const false;
        StorageDead(_204);
        _265 = const false;
        StorageDead(_202);
        _266 = const false;
        StorageDead(_200);
        _267 = const false;
        StorageDead(_198);
        _268 = const false;
        StorageDead(_196);
        _194 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _195) -> [return: bb91, unwind: bb122];
    }

    bb91: {
        StorageDead(_195);
        _223 = discriminant(_194);
        switchInt(move _223) -> [0: bb92, 1: bb93, otherwise: bb15];
    }

    bb92: {
        StorageLive(_227);
        _227 = ((_194 as Continue).0: ());
        _193 = _227;
        StorageDead(_227);
        _287 = discriminant(_194);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_194);
        StorageDead(_193);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _259 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _331 = (((_259.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _236 = &(*_331);
        _235 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _236) -> [return: bb95, unwind: bb122];
    }

    bb93: {
        StorageLive(_224);
        _224 = move ((_194 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_226);
        _226 = move _224;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _226) -> [return: bb94, unwind: bb130];
    }

    bb94: {
        StorageDead(_226);
        StorageDead(_224);
        _293 = discriminant(_194);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_194);
        StorageDead(_193);
        goto -> bb109;
    }

    bb95: {
        StorageDead(_236);
        _234 = &_235;
        _233 = &(*_234);
        _232 = amount(move _233) -> [return: bb96, unwind: bb119];
    }

    bb96: {
        StorageDead(_233);
        _231 = std::result::Result::<u64, anchor_lang::error::Error>::unwrap(move _232) -> [return: bb97, unwind: bb119];
    }

    bb97: {
        StorageDead(_232);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &(*_45);
        _238 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _239) -> [return: bb98, unwind: bb119];
    }

    bb98: {
        StorageDead(_239);
        _237 = (((*_238).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_240);
        _240 = _101;
        StorageLive(_241);
        _241 = _113;
        StorageLive(_242);
        StorageLive(_243);
        _243 = _116;
        _242 = state::types::LendingAction::Additive(move _243);
        StorageDead(_243);
        _230 = post_transfer_vault_balance_liquidity_reserve_checks(move _231, move _237, move _240, move _241, move _242) -> [return: bb99, unwind: bb119];
    }

    bb99: {
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_231);
        _229 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _230) -> [return: bb100, unwind: bb119];
    }

    bb100: {
        StorageDead(_230);
        _244 = discriminant(_229);
        switchInt(move _244) -> [0: bb101, 1: bb102, otherwise: bb15];
    }

    bb101: {
        StorageLive(_248);
        _248 = ((_229 as Continue).0: ());
        _228 = _248;
        StorageDead(_248);
        _289 = discriminant(_229);
        StorageDead(_238);
        drop(_235) -> [return: bb104, unwind: bb122];
    }

    bb102: {
        StorageLive(_245);
        _245 = move ((_229 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_247);
        _247 = move _245;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _247) -> [return: bb103, unwind: bb129];
    }

    bb103: {
        StorageDead(_247);
        StorageDead(_245);
        _291 = discriminant(_229);
        StorageDead(_238);
        drop(_235) -> [return: bb108, unwind: bb122];
    }

    bb104: {
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_229);
        StorageDead(_228);
        StorageLive(_249);
        _249 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _249);
        StorageDead(_249);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_101);
        StorageDead(_96);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_77);
        StorageDead(_75);
        drop(_66) -> [return: bb105, unwind: bb123];
    }

    bb105: {
        StorageDead(_66);
        StorageDead(_65);
        drop(_56) -> [return: bb106, unwind: bb124];
    }

    bb106: {
        StorageDead(_56);
        StorageDead(_55);
        drop(_46) -> [return: bb107, unwind: bb128];
    }

    bb107: {
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb118;
    }

    bb108: {
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_229);
        StorageDead(_228);
        goto -> bb109;
    }

    bb109: {
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb110;
    }

    bb110: {
        StorageDead(_113);
        goto -> bb112;
    }

    bb111: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_102);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_101);
        StorageDead(_96);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb113;
    }

    bb113: {
        StorageDead(_77);
        StorageDead(_75);
        drop(_66) -> [return: bb114, unwind: bb123];
    }

    bb114: {
        StorageDead(_66);
        StorageDead(_65);
        drop(_56) -> [return: bb115, unwind: bb124];
    }

    bb115: {
        StorageDead(_56);
        StorageDead(_55);
        drop(_46) -> [return: bb116, unwind: bb128];
    }

    bb116: {
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb118;
    }

    bb117: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb118;
    }

    bb118: {
        return;
    }

    bb119 (cleanup): {
        drop(_235) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_176) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_106) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_66) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_56) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_46) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_33) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_34) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_9) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        resume;
    }

    bb129 (cleanup): {
        _313 = discriminant(_229);
        goto -> bb119;
    }

    bb130 (cleanup): {
        _314 = discriminant(_194);
        goto -> bb122;
    }

    bb131 (cleanup): {
        drop(_212) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        switchInt(_260) -> [0: bb134, otherwise: bb131];
    }

    bb133 (cleanup): {
        drop(_210) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        switchInt(_261) -> [0: bb136, otherwise: bb133];
    }

    bb135 (cleanup): {
        drop(_208) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        switchInt(_262) -> [0: bb138, otherwise: bb135];
    }

    bb137 (cleanup): {
        drop(_206) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        switchInt(_263) -> [0: bb140, otherwise: bb137];
    }

    bb139 (cleanup): {
        drop(_204) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        switchInt(_264) -> [0: bb142, otherwise: bb139];
    }

    bb141 (cleanup): {
        drop(_202) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        switchInt(_265) -> [0: bb144, otherwise: bb141];
    }

    bb143 (cleanup): {
        drop(_200) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        switchInt(_266) -> [0: bb146, otherwise: bb143];
    }

    bb145 (cleanup): {
        drop(_198) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        switchInt(_267) -> [0: bb148, otherwise: bb145];
    }

    bb147 (cleanup): {
        drop(_196) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        switchInt(_268) -> [0: bb122, otherwise: bb147];
    }

    bb149 (cleanup): {
        _315 = discriminant(_150);
        goto -> bb122;
    }

    bb150 (cleanup): {
        _316 = discriminant(_133);
        goto -> bb122;
    }

    bb151 (cleanup): {
        _317 = discriminant(_119);
        goto -> bb122;
    }

    bb152 (cleanup): {
        _318 = discriminant(_102);
        goto -> bb121;
    }

    bb153 (cleanup): {
        _319 = discriminant(_78);
        goto -> bb122;
    }

    bb154 (cleanup): {
        _320 = discriminant(_67);
        goto -> bb123;
    }

    bb155 (cleanup): {
        _321 = discriminant(_57);
        goto -> bb124;
    }

    bb156 (cleanup): {
        _322 = discriminant(_47);
        goto -> bb128;
    }

    bb157 (cleanup): {
        _323 = discriminant(_29);
        goto -> bb125;
    }
}
