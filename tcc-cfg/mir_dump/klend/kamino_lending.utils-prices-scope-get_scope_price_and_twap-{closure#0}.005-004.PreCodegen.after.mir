// MIR for `get_scope_price_and_twap::{closure#0}` after PreCodegen

fn get_scope_price_and_twap::{closure#0}(_1: {closure@programs\klend\src\utils\prices\scope.rs:24:22: 24:25}, _2: anchor_lang::error::Error) -> () {
    debug e => _2;
    let mut _0: ();
    let mut _3: &str;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: &std::string::String;
    let _7: std::string::String;
    let _8: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[&str; 1];
    let _12: &[&str; 1];
    let _13: [&str; 1];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let mut _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let mut _19: &anchor_lang::error::Error;
    let _20: &anchor_lang::error::Error;
    let mut _21: &[&str; 1];
    scope 1 {
        debug res => _8;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _21 = const _;
        _12 = &(*_21);
        _11 = &(*_12);
        _10 = move _11 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_2;
        _19 = &(*_20);
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _19) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        StorageDead(_19);
        _17 = [move _18];
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = move _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_15);
        _9 = Arguments::<'_>::new_v1(move _10, move _14) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_10);
        _8 = format(move _9) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_12);
        _7 = move _8;
        StorageDead(_8);
        _6 = &_7;
        _5 = &(*_6);
        _4 = <std::string::String as Deref>::deref(move _5) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _3 = &(*_4);
        StorageDead(_5);
        _0 = solana_program::log::sol_log(move _3) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        drop(_2) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_7) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}
