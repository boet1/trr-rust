// MIR for `check_price_age` after PreCodegen

fn check_price_age(_1: u64, _2: u64, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug price_timestamp => _1;
    debug max_age_seconds => _2;
    debug current_timestamp => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: u64;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: u64;
    let _10: ();
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[&str; 3];
    let _15: &[&str; 3];
    let _16: [&str; 3];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let mut _18: &[core::fmt::rt::Argument<'_>; 2];
    let _19: &[core::fmt::rt::Argument<'_>; 2];
    let _20: [core::fmt::rt::Argument<'_>; 2];
    let mut _21: core::fmt::rt::Argument<'_>;
    let mut _22: &u64;
    let _23: &u64;
    let mut _24: core::fmt::rt::Argument<'_>;
    let mut _25: &u64;
    let _26: &u64;
    let mut _27: anchor_lang::error::Error;
    let mut _28: anchor_lang::error::AnchorError;
    let mut _29: std::string::String;
    let mut _30: &LendingError;
    let _31: LendingError;
    let mut _32: u32;
    let mut _33: LendingError;
    let mut _34: std::string::String;
    let mut _35: &LendingError;
    let _36: LendingError;
    let mut _37: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _38: anchor_lang::error::ErrorOrigin;
    let mut _39: anchor_lang::error::Source;
    let mut _40: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _41: ();
    scope 1 {
        debug age_seconds => _4;
        let mut _42: &LendingError;
        let mut _43: &LendingError;
        let mut _44: &[&str; 3];
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        StorageLive(_6);
        _6 = _1;
        _4 = core::num::<impl u64>::saturating_sub(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        StorageLive(_9);
        _9 = _2;
        _7 = Gt(move _8, move _9);
        switchInt(move _7) -> [0: bb11, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _44 = const _;
        _15 = &(*_44);
        _14 = &(*_15);
        _13 = move _14 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_4;
        _22 = &(*_23);
        _21 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _22) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &_2;
        _25 = &(*_26);
        _24 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _25) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_25);
        _20 = [move _21, move _24];
        StorageDead(_24);
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = move _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_18);
        _12 = Arguments::<'_>::new_v1(move _13, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_13);
        _11 = _print(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_11);
        _10 = const ();
        StorageDead(_10);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _43 = const _;
        _30 = &(*_43);
        _29 = LendingError::name(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        _33 = LendingError::PriceTooOld;
        _32 = <LendingError as Into<u32>>::into(move _33) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _42 = const _;
        _35 = &(*_42);
        _34 = <LendingError as ToString>::to_string(move _35) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\checks.rs", line: const 109_u32 };
        _38 = anchor_lang::error::ErrorOrigin::Source(move _39);
        StorageDead(_39);
        _37 = std::option::Option::<ErrorOrigin>::Some(move _38);
        StorageDead(_38);
        StorageLive(_40);
        _40 = std::option::Option::<ComparedValues>::None;
        _28 = anchor_lang::error::AnchorError { error_name: move _29, error_code_number: move _32, error_msg: move _34, error_origin: move _37, compared_values: move _40 };
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        _27 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _28) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        StorageDead(_28);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _27);
        StorageDead(_27);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_41);
        _41 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _41);
        StorageDead(_41);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_7);
        StorageDead(_4);
        return;
    }

    bb13 (cleanup): {
        drop(_29) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}
