// MIR for `handlers::handler_deposit_and_withdraw::process` after PreCodegen

fn handlers::handler_deposit_and_withdraw::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>>, _2: u64, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    debug withdraw_collateral_amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _5: std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _7: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _14: &state::obligation::Obligation;
    let _15: &state::obligation::Obligation;
    let mut _16: &std::cell::Ref<'_, state::obligation::Obligation>;
    let _17: ();
    let _18: ();
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _20: std::result::Result<(), anchor_lang::error::Error>;
    let mut _21: &handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>;
    let _22: &handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>;
    let mut _23: u64;
    let mut _24: state::types::MaxReservesAsCollateralCheck;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _30: ();
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _33: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _41: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _50: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _51: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _57: ();
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _59: std::result::Result<(), anchor_lang::error::Error>;
    let mut _60: &mut state::reserve::Reserve;
    let mut _61: &mut state::reserve::Reserve;
    let mut _62: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _63: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _64: &anchor_lang::prelude::Clock;
    let _65: &anchor_lang::prelude::Clock;
    let mut _66: std::option::Option<utils::prices::GetPriceResult>;
    let mut _67: u16;
    let mut _68: &state::lending_market::LendingMarket;
    let mut _69: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _76: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _77: i64;
    let _78: ();
    let mut _79: &mut state::reserve::Reserve;
    let mut _80: &mut state::reserve::Reserve;
    let mut _81: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _82: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _83: u64;
    let _84: ();
    let mut _86: &anchor_lang::prelude::Pubkey;
    let mut _87: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _88: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _89: handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _90: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _92: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _93: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _94: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _95: handlers::handler_refresh_obligation::RefreshObligationBumps;
    let _96: ();
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _98: std::result::Result<(), anchor_lang::error::Error>;
    let mut _99: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation::RefreshObligation<'_>>;
    let mut _100: state::types::MaxReservesAsCollateralCheck;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _108: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _109: &handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>;
    let _110: &handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>;
    let mut _111: u64;
    let mut _112: state::types::LtvMaxWithdrawalCheck;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _118: ();
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _121: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _129: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _138: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _139: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _145: ();
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _147: std::result::Result<(), anchor_lang::error::Error>;
    let mut _148: &mut state::reserve::Reserve;
    let mut _149: &mut state::reserve::Reserve;
    let mut _150: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _151: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _152: &anchor_lang::prelude::Clock;
    let _153: &anchor_lang::prelude::Clock;
    let mut _154: std::option::Option<utils::prices::GetPriceResult>;
    let mut _155: u16;
    let mut _156: &state::lending_market::LendingMarket;
    let mut _157: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _164: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _165: i64;
    let _166: ();
    let mut _167: &mut state::reserve::Reserve;
    let mut _168: &mut state::reserve::Reserve;
    let mut _169: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _170: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _171: u64;
    let _172: ();
    let mut _173: bool;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _177: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _178: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _185: std::result::Result<&state::obligation::ObligationCollateral, anchor_lang::error::Error>;
    let mut _186: &state::obligation::Obligation;
    let _187: &state::obligation::Obligation;
    let mut _188: &std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _189: anchor_lang::prelude::Pubkey;
    let mut _190: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _191: {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:91:28: 91:40};
    let mut _192: u64;
    let mut _194: bool;
    let mut _196: std::iter::FilterMap<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:99:29: 99:38}>;
    let mut _197: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _198: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _199: {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:99:29: 99:38};
    let mut _200: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _201: &mut bool;
    let mut _202: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _204: &anchor_lang::prelude::Pubkey;
    let mut _205: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _206: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _207: handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _208: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _209: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _210: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _211: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _212: &[anchor_lang::prelude::AccountInfo<'_>];
    let _213: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _214: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _215: handlers::handler_refresh_obligation::RefreshObligationBumps;
    let _216: ();
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _218: std::result::Result<(), anchor_lang::error::Error>;
    let mut _219: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation::RefreshObligation<'_>>;
    let mut _220: state::types::MaxReservesAsCollateralCheck;
    let mut _221: isize;
    let mut _223: !;
    let mut _224: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _227: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _228: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _229: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _235: ();
    let mut _236: &mut state::last_update::LastUpdate;
    let mut _237: &mut state::obligation::Obligation;
    let mut _238: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _241: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _242: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _248: ();
    let mut _249: &mut state::last_update::LastUpdate;
    let mut _250: &mut state::reserve::Reserve;
    let mut _251: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _254: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _255: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _256: isize;
    let mut _258: !;
    let mut _259: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _261: ();
    let mut _262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _263: std::result::Result<(), anchor_lang::error::Error>;
    let mut _264: &state::obligation::Obligation;
    let _265: &state::obligation::Obligation;
    let mut _266: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let _267: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _268: &state::reserve::Reserve;
    let _269: &state::reserve::Reserve;
    let mut _270: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _271: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _272: &state::lending_market::LendingMarket;
    let _273: &state::lending_market::LendingMarket;
    let mut _274: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _275: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _276: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _282: ();
    let _283: ();
    let mut _284: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _285: std::result::Result<(), anchor_lang::error::Error>;
    let mut _286: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams<'_, '_>;
    let mut _287: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _288: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _289: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _290: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _291: state::reserve::ReserveFarmKind;
    let mut _292: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _293: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _294: &anchor_lang::prelude::AccountInfo<'_>;
    let _295: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _296: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _297: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _303: ();
    let _304: ();
    let mut _305: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _306: std::result::Result<(), anchor_lang::error::Error>;
    let mut _307: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams<'_, '_>;
    let mut _308: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _309: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _310: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let _311: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _312: state::reserve::ReserveFarmKind;
    let mut _313: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _314: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _315: &anchor_lang::prelude::AccountInfo<'_>;
    let _316: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _317: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _318: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _319: isize;
    let mut _321: !;
    let mut _322: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _324: ();
    let mut _325: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _326: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _327: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _328: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _329: &anchor_lang::prelude::Pubkey;
    let mut _330: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _331: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _332: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _333: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _334: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _335: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _336: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _337: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _338: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _339: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _340: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _341: &anchor_lang::prelude::Pubkey;
    let mut _342: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _343: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _344: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _345: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _346: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _347: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _348: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _349: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _350: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _351: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _352: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _353: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _354: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _355: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _356: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    scope 1 {
        debug initial_ltv => _4;
        let _26: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _29: ();
        let _31: anchor_lang::prelude::Clock;
        let _35: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _38: anchor_lang::prelude::Clock;
        let _85: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation::RefreshObligation<'_>>;
        let _106: bool;
        let _114: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _117: bool;
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
        scope 11 {
            debug clock => _31;
            let _39: std::cell::Ref<'_, state::lending_market::LendingMarket>;
            let _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _47: std::cell::Ref<'_, state::lending_market::LendingMarket>;
            scope 16 {
                debug lending_market => _39;
                let mut _48: std::cell::RefMut<'_, state::reserve::Reserve>;
                let _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _56: std::cell::RefMut<'_, state::reserve::Reserve>;
                scope 21 {
                    debug reserve => _48;
                    let _71: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _74: ();
                    let _75: u64;
                    scope 26 {
                        debug residual => _71;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _74;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug timestamp => _75;
                    }
                }
                scope 22 {
                    debug residual => _53;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _56;
                    scope 25 {
                    }
                }
            }
            scope 17 {
                debug residual => _44;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _47;
                scope 20 {
                }
            }
        }
        scope 12 {
            debug residual => _35;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _38;
            scope 15 {
            }
        }
        scope 31 {
            debug refresh_obligation_ctx => _85;
            let _102: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _105: ();
            scope 32 {
                debug residual => _102;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _105;
                scope 35 {
                }
            }
        }
        scope 36 {
            debug is_obligation_closed => _106;
            let _119: anchor_lang::prelude::Clock;
            let _123: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _126: anchor_lang::prelude::Clock;
            let _174: bool;
            let _175: std::cell::Ref<'_, state::obligation::Obligation>;
            let _180: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _183: std::cell::Ref<'_, state::obligation::Obligation>;
            let _299: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _302: ();
            let _320: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _323: ();
            scope 41 {
                debug clock => _119;
                let _127: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                let _132: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _135: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                scope 46 {
                    debug lending_market => _127;
                    let mut _136: std::cell::RefMut<'_, state::reserve::Reserve>;
                    let _141: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _144: std::cell::RefMut<'_, state::reserve::Reserve>;
                    scope 51 {
                        debug reserve => _136;
                        let _159: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _162: ();
                        let _163: u64;
                        scope 56 {
                            debug residual => _159;
                            scope 57 {
                            }
                        }
                        scope 58 {
                            debug val => _162;
                            scope 59 {
                            }
                        }
                        scope 60 {
                            debug timestamp => _163;
                        }
                    }
                    scope 52 {
                        debug residual => _141;
                        scope 53 {
                        }
                    }
                    scope 54 {
                        debug val => _144;
                        scope 55 {
                        }
                    }
                }
                scope 47 {
                    debug residual => _132;
                    scope 48 {
                    }
                }
                scope 49 {
                    debug val => _135;
                    scope 50 {
                    }
                }
            }
            scope 42 {
                debug residual => _123;
                scope 43 {
                }
            }
            scope 44 {
                debug val => _126;
                scope 45 {
                }
            }
            scope 61 {
                debug is_full_withdrawal => _174;
                let _193: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
                let mut _195: bool;
                scope 68 {
                    debug remaining_accounts => _193;
                    let _203: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation::RefreshObligation<'_>>;
                    scope 70 {
                        debug refresh_obligation_ctx => _203;
                        let _222: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _225: ();
                        let mut _226: std::cell::RefMut<'_, state::obligation::Obligation>;
                        let _231: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _234: std::cell::RefMut<'_, state::obligation::Obligation>;
                        scope 71 {
                            debug residual => _222;
                            scope 72 {
                            }
                        }
                        scope 73 {
                            debug val => _225;
                            scope 74 {
                            }
                        }
                        scope 75 {
                            debug obligation => _226;
                            let mut _239: std::cell::RefMut<'_, state::reserve::Reserve>;
                            let _244: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _247: std::cell::RefMut<'_, state::reserve::Reserve>;
                            scope 80 {
                                debug withdraw_reserve => _239;
                                let _252: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                let _257: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _260: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                scope 85 {
                                    debug lending_market => _252;
                                    let _278: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _281: ();
                                    scope 90 {
                                        debug residual => _278;
                                        scope 91 {
                                        }
                                    }
                                    scope 92 {
                                        debug val => _281;
                                        scope 93 {
                                        }
                                    }
                                }
                                scope 86 {
                                    debug residual => _257;
                                    scope 87 {
                                    }
                                }
                                scope 88 {
                                    debug val => _260;
                                    scope 89 {
                                    }
                                }
                            }
                            scope 81 {
                                debug residual => _244;
                                scope 82 {
                                }
                            }
                            scope 83 {
                                debug val => _247;
                                scope 84 {
                                }
                            }
                        }
                        scope 76 {
                            debug residual => _231;
                            scope 77 {
                            }
                        }
                        scope 78 {
                            debug val => _234;
                            scope 79 {
                            }
                        }
                    }
                }
                scope 69 {
                    debug withdraw_reserve_found => _195;
                }
            }
            scope 62 {
                debug obligation => _175;
                let _184: u64;
                scope 67 {
                    debug final_deposit_amount => _184;
                }
            }
            scope 63 {
                debug residual => _180;
                scope 64 {
                }
            }
            scope 65 {
                debug val => _183;
                scope 66 {
                }
            }
            scope 94 {
                debug residual => _299;
                scope 95 {
                }
            }
            scope 96 {
                debug val => _302;
                scope 97 {
                }
            }
            scope 98 {
                debug residual => _320;
                scope 99 {
                }
            }
            scope 100 {
                debug val => _323;
                scope 101 {
                }
            }
        }
        scope 37 {
            debug residual => _114;
            scope 38 {
            }
        }
        scope 39 {
            debug val => _117;
            scope 40 {
            }
        }
    }
    scope 2 {
        debug obligation => _5;
    }
    scope 3 {
        debug residual => _10;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _13;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _325 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _8 = &(((*_325).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb178];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_6 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _5 = move _13;
        StorageDead(_13);
        _357 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_5;
        _15 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _16) -> [return: bb7, unwind: bb177];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb198];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _435 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb166;
    }

    bb7: {
        _14 = &(*_15);
        StorageDead(_16);
        _4 = obligation::Obligation::loan_to_value(move _14) -> [return: bb8, unwind: bb177];
    }

    bb8: {
        StorageDead(_14);
        drop(_5) -> [return: bb9, unwind: bb178];
    }

    bb9: {
        StorageDead(_5);
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _326 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _22 = &((*_326).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>);
        _21 = &(*_22);
        StorageLive(_23);
        _23 = _2;
        StorageLive(_24);
        _24 = state::types::MaxReservesAsCollateralCheck::Skip;
        _20 = handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::process_impl(move _21, move _23, move _24) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        _19 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _20) -> [return: bb11, unwind: bb178];
    }

    bb11: {
        StorageDead(_20);
        _25 = discriminant(_19);
        switchInt(move _25) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_19 as Continue).0: ());
        _18 = _29;
        StorageDead(_29);
        _359 = discriminant(_19);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        _17 = const ();
        StorageDead(_17);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_26);
        _26 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _28) -> [return: bb14, unwind: bb197];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_26);
        _433 = discriminant(_19);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb166;
    }

    bb15: {
        _32 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _33) -> [return: bb16, unwind: bb178];
    }

    bb16: {
        StorageDead(_33);
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_38);
        _38 = move ((_32 as Continue).0: anchor_lang::prelude::Clock);
        _31 = move _38;
        StorageDead(_38);
        _361 = discriminant(_32);
        StorageDead(_32);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _327 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _42 = &(((*_327).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _41 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _42) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_35);
        _35 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _37) -> [return: bb19, unwind: bb196];
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_35);
        _431 = discriminant(_32);
        StorageDead(_32);
        goto -> bb165;
    }

    bb20: {
        StorageDead(_42);
        _40 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _41) -> [return: bb21, unwind: bb178];
    }

    bb21: {
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_47);
        _47 = move ((_40 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _39 = move _47;
        StorageDead(_47);
        _363 = discriminant(_40);
        StorageDead(_40);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _328 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _51 = &(((*_328).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _50 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _51) -> [return: bb25, unwind: bb176];
    }

    bb23: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _46) -> [return: bb24, unwind: bb195];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        _429 = discriminant(_40);
        StorageDead(_40);
        goto -> bb164;
    }

    bb25: {
        StorageDead(_51);
        _49 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _50) -> [return: bb26, unwind: bb176];
    }

    bb26: {
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_56);
        _56 = move ((_49 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _48 = move _56;
        StorageDead(_56);
        _365 = discriminant(_49);
        StorageDead(_49);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &mut _48;
        _62 = &mut (*_63);
        _61 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _62) -> [return: bb30, unwind: bb175];
    }

    bb28: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _55) -> [return: bb29, unwind: bb194];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_53);
        _427 = discriminant(_49);
        StorageDead(_49);
        goto -> bb163;
    }

    bb30: {
        _60 = &mut (*_61);
        StorageDead(_62);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_31;
        _64 = &(*_65);
        StorageLive(_66);
        _66 = std::option::Option::<prices::GetPriceResult>::None;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_39;
        _68 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _69) -> [return: bb31, unwind: bb175];
    }

    bb31: {
        StorageDead(_69);
        _67 = ((*_68).5: u16);
        _59 = lending_operations::refresh_reserve(move _60, move _64, move _66, move _67) -> [return: bb32, unwind: bb175];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_60);
        _58 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _59) -> [return: bb33, unwind: bb175];
    }

    bb33: {
        StorageDead(_59);
        _70 = discriminant(_58);
        switchInt(move _70) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_74);
        _74 = ((_58 as Continue).0: ());
        _57 = _74;
        StorageDead(_74);
        _367 = discriminant(_58);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = (_31.4: i64);
        _76 = <u64 as TryFrom<i64>>::try_from(move _77) -> [return: bb37, unwind: bb175];
    }

    bb35: {
        StorageLive(_71);
        _71 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _73) -> [return: bb36, unwind: bb193];
    }

    bb36: {
        StorageDead(_73);
        StorageDead(_71);
        _425 = discriminant(_58);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        drop(_48) -> [return: bb163, unwind: bb176];
    }

    bb37: {
        StorageDead(_77);
        _75 = std::result::Result::<u64, TryFromIntError>::unwrap(move _76) -> [return: bb38, unwind: bb175];
    }

    bb38: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut _48;
        _81 = &mut (*_82);
        _80 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _81) -> [return: bb39, unwind: bb175];
    }

    bb39: {
        _79 = &mut (*_80);
        StorageDead(_81);
        StorageLive(_83);
        _83 = _75;
        _78 = refresh_reserve_limit_timestamps(move _79, move _83) -> [return: bb40, unwind: bb175];
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_79);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        _30 = const ();
        StorageDead(_75);
        drop(_48) -> [return: bb41, unwind: bb176];
    }

    bb41: {
        StorageDead(_48);
        drop(_39) -> [return: bb42, unwind: bb178];
    }

    bb42: {
        StorageDead(_39);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _329 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _86 = &(*_329);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _330 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _91 = &(((*_330).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _90 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as Clone>::clone(move _91) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        _331 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _93 = &(((*_331).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _92 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as Clone>::clone(move _93) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_93);
        _89 = handlers::handler_refresh_obligation::RefreshObligation::<'_> { lending_market: move _92, obligation: move _90 };
        StorageDead(_92);
        StorageDead(_90);
        _88 = &mut _89;
        _87 = &mut (*_88);
        StorageLive(_94);
        _332 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _94 = &(*_332);
        StorageLive(_95);
        _95 = handlers::handler_refresh_obligation::RefreshObligationBumps;
        _85 = anchor_lang::context::Context::<'_, '_, '_, '_, handlers::handler_refresh_obligation::RefreshObligation<'_>> { program_id: move _86, accounts: move _87, remaining_accounts: move _94, bumps: move _95 };
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_88);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = move _85;
        StorageLive(_100);
        _100 = state::types::MaxReservesAsCollateralCheck::Skip;
        _98 = handlers::handler_refresh_obligation::process(move _99, move _100) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_100);
        StorageDead(_99);
        _97 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb46, unwind: bb178];
    }

    bb46: {
        StorageDead(_98);
        _101 = discriminant(_97);
        switchInt(move _101) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_105);
        _105 = ((_97 as Continue).0: ());
        _96 = _105;
        StorageDead(_105);
        _369 = discriminant(_97);
        StorageDead(_97);
        StorageDead(_96);
        _84 = const ();
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _333 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _110 = &((*_333).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>);
        _109 = &(*_110);
        StorageLive(_111);
        _111 = _3;
        StorageLive(_112);
        _112 = state::types::LtvMaxWithdrawalCheck::LiquidationThreshold;
        _108 = handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::process_impl(move _109, move _111, move _112) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_102);
        _102 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_104);
        _104 = move _102;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _104) -> [return: bb49, unwind: bb192];
    }

    bb49: {
        StorageDead(_104);
        StorageDead(_102);
        _423 = discriminant(_97);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb166;
    }

    bb50: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        _107 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _108) -> [return: bb51, unwind: bb178];
    }

    bb51: {
        StorageDead(_108);
        _113 = discriminant(_107);
        switchInt(move _113) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_117);
        _117 = ((_107 as Continue).0: bool);
        _106 = _117;
        StorageDead(_117);
        _371 = discriminant(_107);
        StorageDead(_110);
        StorageDead(_107);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_114);
        _114 = move ((_107 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_116);
        _116 = move _114;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _116) -> [return: bb54, unwind: bb191];
    }

    bb54: {
        StorageDead(_116);
        StorageDead(_114);
        _421 = discriminant(_107);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb162;
    }

    bb55: {
        _120 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _121) -> [return: bb56, unwind: bb178];
    }

    bb56: {
        StorageDead(_121);
        _122 = discriminant(_120);
        switchInt(move _122) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_126);
        _126 = move ((_120 as Continue).0: anchor_lang::prelude::Clock);
        _119 = move _126;
        StorageDead(_126);
        _373 = discriminant(_120);
        StorageDead(_120);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _334 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _130 = &(((*_334).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _129 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _130) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_123);
        _123 = move ((_120 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_125);
        _125 = move _123;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _125) -> [return: bb59, unwind: bb190];
    }

    bb59: {
        StorageDead(_125);
        StorageDead(_123);
        _419 = discriminant(_120);
        StorageDead(_120);
        goto -> bb161;
    }

    bb60: {
        StorageDead(_130);
        _128 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _129) -> [return: bb61, unwind: bb178];
    }

    bb61: {
        StorageDead(_129);
        _131 = discriminant(_128);
        switchInt(move _131) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_135);
        _135 = move ((_128 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _127 = move _135;
        StorageDead(_135);
        _375 = discriminant(_128);
        StorageDead(_128);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _335 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _139 = &(((*_335).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _138 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _139) -> [return: bb65, unwind: bb174];
    }

    bb63: {
        StorageLive(_132);
        _132 = move ((_128 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_134);
        _134 = move _132;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _134) -> [return: bb64, unwind: bb189];
    }

    bb64: {
        StorageDead(_134);
        StorageDead(_132);
        _417 = discriminant(_128);
        StorageDead(_128);
        goto -> bb160;
    }

    bb65: {
        StorageDead(_139);
        _137 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _138) -> [return: bb66, unwind: bb174];
    }

    bb66: {
        StorageDead(_138);
        _140 = discriminant(_137);
        switchInt(move _140) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_144);
        _144 = move ((_137 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _136 = move _144;
        StorageDead(_144);
        _377 = discriminant(_137);
        StorageDead(_137);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &mut _136;
        _150 = &mut (*_151);
        _149 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _150) -> [return: bb70, unwind: bb173];
    }

    bb68: {
        StorageLive(_141);
        _141 = move ((_137 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_143);
        _143 = move _141;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _143) -> [return: bb69, unwind: bb188];
    }

    bb69: {
        StorageDead(_143);
        StorageDead(_141);
        _415 = discriminant(_137);
        StorageDead(_137);
        goto -> bb159;
    }

    bb70: {
        _148 = &mut (*_149);
        StorageDead(_150);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_119;
        _152 = &(*_153);
        StorageLive(_154);
        _154 = std::option::Option::<prices::GetPriceResult>::None;
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_127;
        _156 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _157) -> [return: bb71, unwind: bb173];
    }

    bb71: {
        StorageDead(_157);
        _155 = ((*_156).5: u16);
        _147 = lending_operations::refresh_reserve(move _148, move _152, move _154, move _155) -> [return: bb72, unwind: bb173];
    }

    bb72: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_148);
        _146 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _147) -> [return: bb73, unwind: bb173];
    }

    bb73: {
        StorageDead(_147);
        _158 = discriminant(_146);
        switchInt(move _158) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_162);
        _162 = ((_146 as Continue).0: ());
        _145 = _162;
        StorageDead(_162);
        _379 = discriminant(_146);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = (_119.4: i64);
        _164 = <u64 as TryFrom<i64>>::try_from(move _165) -> [return: bb77, unwind: bb173];
    }

    bb75: {
        StorageLive(_159);
        _159 = move ((_146 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_161);
        _161 = move _159;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _161) -> [return: bb76, unwind: bb187];
    }

    bb76: {
        StorageDead(_161);
        StorageDead(_159);
        _413 = discriminant(_146);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        drop(_136) -> [return: bb159, unwind: bb174];
    }

    bb77: {
        StorageDead(_165);
        _163 = std::result::Result::<u64, TryFromIntError>::unwrap(move _164) -> [return: bb78, unwind: bb173];
    }

    bb78: {
        StorageDead(_164);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &mut _136;
        _169 = &mut (*_170);
        _168 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _169) -> [return: bb79, unwind: bb173];
    }

    bb79: {
        _167 = &mut (*_168);
        StorageDead(_169);
        StorageLive(_171);
        _171 = _163;
        _166 = refresh_reserve_limit_timestamps(move _167, move _171) -> [return: bb80, unwind: bb173];
    }

    bb80: {
        StorageDead(_171);
        StorageDead(_167);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        _118 = const ();
        StorageDead(_163);
        drop(_136) -> [return: bb81, unwind: bb174];
    }

    bb81: {
        StorageDead(_136);
        drop(_127) -> [return: bb82, unwind: bb178];
    }

    bb82: {
        StorageDead(_127);
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _106;
        switchInt(move _173) -> [0: bb83, otherwise: bb140];
    }

    bb83: {
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _336 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _178 = &(((*_336).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _177 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load(move _178) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_178);
        _176 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _177) -> [return: bb85, unwind: bb178];
    }

    bb85: {
        StorageDead(_177);
        _179 = discriminant(_176);
        switchInt(move _179) -> [0: bb86, 1: bb87, otherwise: bb4];
    }

    bb86: {
        StorageLive(_183);
        _183 = move ((_176 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _175 = move _183;
        StorageDead(_183);
        _381 = discriminant(_176);
        StorageDead(_176);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_175;
        _187 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _188) -> [return: bb89, unwind: bb172];
    }

    bb87: {
        StorageLive(_180);
        _180 = move ((_176 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_182);
        _182 = move _180;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _182) -> [return: bb88, unwind: bb186];
    }

    bb88: {
        StorageDead(_182);
        StorageDead(_180);
        _411 = discriminant(_176);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb158;
    }

    bb89: {
        _186 = &(*_187);
        StorageDead(_188);
        StorageLive(_189);
        StorageLive(_190);
        _337 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _190 = &(((*_337).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _189 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _190) -> [return: bb90, unwind: bb172];
    }

    bb90: {
        StorageDead(_190);
        _185 = obligation::Obligation::find_collateral_in_deposits(move _186, move _189) -> [return: bb91, unwind: bb172];
    }

    bb91: {
        StorageDead(_189);
        StorageDead(_186);
        StorageLive(_191);
        _191 = {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:91:28: 91:40};
        _184 = std::result::Result::<&obligation::ObligationCollateral, anchor_lang::error::Error>::map_or::<u64, {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:91:28: 91:40}>(move _185, const 0_u64, move _191) -> [return: bb92, unwind: bb172];
    }

    bb92: {
        StorageDead(_191);
        StorageDead(_185);
        StorageDead(_187);
        StorageLive(_192);
        _192 = _184;
        _174 = Eq(move _192, const 0_u64);
        StorageDead(_192);
        StorageDead(_184);
        drop(_175) -> [return: bb93, unwind: bb178];
    }

    bb93: {
        StorageDead(_175);
        StorageLive(_193);
        StorageLive(_194);
        _194 = _174;
        switchInt(move _194) -> [0: bb98, otherwise: bb94];
    }

    bb94: {
        StorageLive(_195);
        _195 = const false;
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _338 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _198 = &(*_338);
        _197 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _198) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_198);
        StorageLive(_199);
        StorageLive(_200);
        _339 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _200 = &(((*_339).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        StorageLive(_201);
        _201 = &mut _195;
        _199 = {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:99:29: 99:38} { ctx: move _200, withdraw_reserve_found: move _201 };
        StorageDead(_201);
        StorageDead(_200);
        _196 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::filter_map::<anchor_lang::prelude::AccountInfo<'_>, {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:99:29: 99:38}>(move _197, move _199) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_199);
        StorageDead(_197);
        _193 = <FilterMap<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, {closure@programs\klend\src\handlers\handler_deposit_and_withdraw.rs:99:29: 99:38}> as Iterator>::collect::<Vec<anchor_lang::prelude::AccountInfo<'_>>>(move _196) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb100;
    }

    bb98: {
        StorageLive(_202);
        _340 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _202 = &(*_340);
        _193 = std::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::to_vec(move _202) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_202);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_194);
        StorageLive(_203);
        StorageLive(_204);
        _341 = deref_copy (_1.0: &anchor_lang::prelude::Pubkey);
        _204 = &(*_341);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _342 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _209 = &(((*_342).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _208 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as Clone>::clone(move _209) -> [return: bb101, unwind: bb171];
    }

    bb101: {
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        _343 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _211 = &(((*_343).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _210 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as Clone>::clone(move _211) -> [return: bb102, unwind: bb171];
    }

    bb102: {
        StorageDead(_211);
        _207 = handlers::handler_refresh_obligation::RefreshObligation::<'_> { lending_market: move _210, obligation: move _208 };
        StorageDead(_210);
        StorageDead(_208);
        _206 = &mut _207;
        _205 = &mut (*_206);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_193;
        _213 = Vec::<anchor_lang::prelude::AccountInfo<'_>>::as_slice(move _214) -> [return: bb103, unwind: bb171];
    }

    bb103: {
        _212 = &(*_213);
        StorageDead(_214);
        StorageLive(_215);
        _215 = handlers::handler_refresh_obligation::RefreshObligationBumps;
        _203 = anchor_lang::context::Context::<'_, '_, '_, '_, handlers::handler_refresh_obligation::RefreshObligation<'_>> { program_id: move _204, accounts: move _205, remaining_accounts: move _212, bumps: move _215 };
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_213);
        StorageDead(_206);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = move _203;
        StorageLive(_220);
        _220 = state::types::MaxReservesAsCollateralCheck::Perform;
        _218 = handlers::handler_refresh_obligation::process(move _219, move _220) -> [return: bb104, unwind: bb171];
    }

    bb104: {
        StorageDead(_220);
        StorageDead(_219);
        _217 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _218) -> [return: bb105, unwind: bb171];
    }

    bb105: {
        StorageDead(_218);
        _221 = discriminant(_217);
        switchInt(move _221) -> [0: bb106, 1: bb107, otherwise: bb4];
    }

    bb106: {
        StorageLive(_225);
        _225 = ((_217 as Continue).0: ());
        _216 = _225;
        StorageDead(_225);
        _383 = discriminant(_217);
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _344 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _229 = &(((*_344).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _228 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _229) -> [return: bb109, unwind: bb171];
    }

    bb107: {
        StorageLive(_222);
        _222 = move ((_217 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_224);
        _224 = move _222;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _224) -> [return: bb108, unwind: bb185];
    }

    bb108: {
        StorageDead(_224);
        StorageDead(_222);
        _409 = discriminant(_217);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb156;
    }

    bb109: {
        StorageDead(_229);
        _227 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _228) -> [return: bb110, unwind: bb171];
    }

    bb110: {
        StorageDead(_228);
        _230 = discriminant(_227);
        switchInt(move _230) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_234);
        _234 = move ((_227 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _226 = move _234;
        StorageDead(_234);
        _385 = discriminant(_227);
        StorageDead(_227);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &mut _226;
        _237 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _238) -> [return: bb114, unwind: bb170];
    }

    bb112: {
        StorageLive(_231);
        _231 = move ((_227 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_233);
        _233 = move _231;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _233) -> [return: bb113, unwind: bb184];
    }

    bb113: {
        StorageDead(_233);
        StorageDead(_231);
        _407 = discriminant(_227);
        StorageDead(_227);
        goto -> bb155;
    }

    bb114: {
        StorageDead(_238);
        _236 = &mut ((*_237).1: state::last_update::LastUpdate);
        _235 = last_update::LastUpdate::mark_stale(move _236) -> [return: bb115, unwind: bb170];
    }

    bb115: {
        StorageDead(_236);
        StorageDead(_237);
        StorageDead(_235);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _345 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _242 = &(((*_345).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _241 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _242) -> [return: bb116, unwind: bb170];
    }

    bb116: {
        StorageDead(_242);
        _240 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _241) -> [return: bb117, unwind: bb170];
    }

    bb117: {
        StorageDead(_241);
        _243 = discriminant(_240);
        switchInt(move _243) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_247);
        _247 = move ((_240 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _239 = move _247;
        StorageDead(_247);
        _387 = discriminant(_240);
        StorageDead(_240);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &mut _239;
        _250 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _251) -> [return: bb121, unwind: bb169];
    }

    bb119: {
        StorageLive(_244);
        _244 = move ((_240 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_246);
        _246 = move _244;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _246) -> [return: bb120, unwind: bb183];
    }

    bb120: {
        StorageDead(_246);
        StorageDead(_244);
        _405 = discriminant(_240);
        StorageDead(_240);
        goto -> bb154;
    }

    bb121: {
        StorageDead(_251);
        _249 = &mut ((*_250).1: state::last_update::LastUpdate);
        _248 = last_update::LastUpdate::mark_stale(move _249) -> [return: bb122, unwind: bb169];
    }

    bb122: {
        StorageDead(_249);
        StorageDead(_250);
        StorageDead(_248);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _346 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _255 = &(((*_346).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _254 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _255) -> [return: bb123, unwind: bb169];
    }

    bb123: {
        StorageDead(_255);
        _253 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _254) -> [return: bb124, unwind: bb169];
    }

    bb124: {
        StorageDead(_254);
        _256 = discriminant(_253);
        switchInt(move _256) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_260);
        _260 = move ((_253 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _252 = move _260;
        StorageDead(_260);
        _389 = discriminant(_253);
        StorageDead(_253);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_226;
        _266 = &(*_267);
        _265 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _266) -> [return: bb128, unwind: bb168];
    }

    bb126: {
        StorageLive(_257);
        _257 = move ((_253 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_259);
        _259 = move _257;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _259) -> [return: bb127, unwind: bb182];
    }

    bb127: {
        StorageDead(_259);
        StorageDead(_257);
        _403 = discriminant(_253);
        StorageDead(_253);
        goto -> bb153;
    }

    bb128: {
        _264 = &(*_265);
        StorageDead(_266);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &_239;
        _270 = &(*_271);
        _269 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _270) -> [return: bb129, unwind: bb168];
    }

    bb129: {
        _268 = &(*_269);
        StorageDead(_270);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_252;
        _274 = &(*_275);
        _273 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _274) -> [return: bb130, unwind: bb168];
    }

    bb130: {
        _272 = &(*_273);
        StorageDead(_274);
        StorageLive(_276);
        _276 = _4;
        _263 = post_deposit_and_withdraw_obligation_enforcements(move _264, move _268, move _272, move _276) -> [return: bb131, unwind: bb168];
    }

    bb131: {
        StorageDead(_276);
        StorageDead(_272);
        StorageDead(_268);
        StorageDead(_264);
        _262 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _263) -> [return: bb132, unwind: bb168];
    }

    bb132: {
        StorageDead(_263);
        _277 = discriminant(_262);
        switchInt(move _277) -> [0: bb133, 1: bb134, otherwise: bb4];
    }

    bb133: {
        StorageLive(_281);
        _281 = ((_262 as Continue).0: ());
        _261 = _281;
        StorageDead(_281);
        _391 = discriminant(_262);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_261);
        _172 = const ();
        drop(_252) -> [return: bb136, unwind: bb169];
    }

    bb134: {
        StorageLive(_278);
        _278 = move ((_262 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_280);
        _280 = move _278;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _280) -> [return: bb135, unwind: bb181];
    }

    bb135: {
        StorageDead(_280);
        StorageDead(_278);
        _401 = discriminant(_262);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_261);
        drop(_252) -> [return: bb153, unwind: bb169];
    }

    bb136: {
        StorageDead(_252);
        drop(_239) -> [return: bb137, unwind: bb170];
    }

    bb137: {
        StorageDead(_239);
        drop(_226) -> [return: bb138, unwind: bb171];
    }

    bb138: {
        StorageDead(_226);
        StorageDead(_207);
        StorageDead(_203);
        drop(_193) -> [return: bb139, unwind: bb178];
    }

    bb139: {
        StorageDead(_193);
        StorageDead(_174);
        goto -> bb141;
    }

    bb140: {
        _172 = const ();
        goto -> bb141;
    }

    bb141: {
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _347 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _288 = &(((*_347).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _287 = &(*_288);
        StorageLive(_289);
        StorageLive(_290);
        _348 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _290 = &((*_348).2: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _289 = &(*_290);
        StorageLive(_291);
        _291 = reserve::ReserveFarmKind::Collateral;
        _286 = RefreshFarmsParams::<'_, '_> { reserve: move _287, farms_accounts: move _289, farm_kind: move _291 };
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_287);
        StorageLive(_292);
        StorageLive(_293);
        _349 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _293 = &(((*_349).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _292 = &(*_293);
        StorageLive(_294);
        StorageLive(_295);
        _350 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _295 = &(((*_350).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).3: anchor_lang::prelude::AccountInfo<'_>);
        _294 = &(*_295);
        StorageLive(_296);
        StorageLive(_297);
        _351 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _297 = &(((*_351).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _296 = &(*_297);
        _285 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::<'_, anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::prelude::AccountInfo<'_>>(move _286, move _292, move _294, move _296) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_286);
        _284 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _285) -> [return: bb143, unwind: bb178];
    }

    bb143: {
        StorageDead(_285);
        _298 = discriminant(_284);
        switchInt(move _298) -> [0: bb144, 1: bb145, otherwise: bb4];
    }

    bb144: {
        StorageLive(_302);
        _302 = ((_284 as Continue).0: ());
        _283 = _302;
        StorageDead(_302);
        _393 = discriminant(_284);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _352 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _309 = &(((*_352).1: handlers::handler_withdraw_obligation_collateral_and_redeem_reserve_collateral::WithdrawObligationCollateralAndRedeemReserveCollateral<'_>).4: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _308 = &(*_309);
        StorageLive(_310);
        StorageLive(_311);
        _353 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _311 = &((*_353).3: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _310 = &(*_311);
        StorageLive(_312);
        _312 = reserve::ReserveFarmKind::Collateral;
        _307 = RefreshFarmsParams::<'_, '_> { reserve: move _308, farms_accounts: move _310, farm_kind: move _312 };
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_308);
        StorageLive(_313);
        StorageLive(_314);
        _354 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _314 = &(((*_354).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _313 = &(*_314);
        StorageLive(_315);
        StorageLive(_316);
        _355 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _316 = &(((*_355).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).3: anchor_lang::prelude::AccountInfo<'_>);
        _315 = &(*_316);
        StorageLive(_317);
        StorageLive(_318);
        _356 = deref_copy (_1.1: &mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw<'_>);
        _318 = &(((*_356).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _317 = &(*_318);
        _306 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::<'_, anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::prelude::AccountInfo<'_>>(move _307, move _313, move _315, move _317) -> [return: bb147, unwind continue];
    }

    bb145: {
        StorageLive(_299);
        _299 = move ((_284 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_301);
        _301 = move _299;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _301) -> [return: bb146, unwind: bb180];
    }

    bb146: {
        StorageDead(_301);
        StorageDead(_299);
        _399 = discriminant(_284);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_284);
        StorageDead(_283);
        goto -> bb152;
    }

    bb147: {
        StorageDead(_317);
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_307);
        _305 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _306) -> [return: bb148, unwind: bb178];
    }

    bb148: {
        StorageDead(_306);
        _319 = discriminant(_305);
        switchInt(move _319) -> [0: bb149, 1: bb150, otherwise: bb4];
    }

    bb149: {
        StorageLive(_323);
        _323 = ((_305 as Continue).0: ());
        _304 = _323;
        StorageDead(_323);
        _395 = discriminant(_305);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_305);
        StorageDead(_304);
        _303 = const ();
        StorageDead(_303);
        _282 = const ();
        StorageDead(_282);
        StorageLive(_324);
        _324 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _324);
        StorageDead(_324);
        StorageDead(_106);
        StorageDead(_4);
        goto -> bb167;
    }

    bb150: {
        StorageLive(_320);
        _320 = move ((_305 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_322);
        _322 = move _320;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _322) -> [return: bb151, unwind: bb179];
    }

    bb151: {
        StorageDead(_322);
        StorageDead(_320);
        _397 = discriminant(_305);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_303);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_282);
        goto -> bb162;
    }

    bb153: {
        StorageDead(_252);
        drop(_239) -> [return: bb154, unwind: bb170];
    }

    bb154: {
        StorageDead(_239);
        drop(_226) -> [return: bb155, unwind: bb171];
    }

    bb155: {
        StorageDead(_226);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_207);
        StorageDead(_203);
        drop(_193) -> [return: bb157, unwind: bb178];
    }

    bb157: {
        StorageDead(_193);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb162;
    }

    bb159: {
        StorageDead(_136);
        drop(_127) -> [return: bb160, unwind: bb178];
    }

    bb160: {
        StorageDead(_127);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb162;
    }

    bb162: {
        StorageDead(_106);
        goto -> bb166;
    }

    bb163: {
        StorageDead(_48);
        drop(_39) -> [return: bb164, unwind: bb178];
    }

    bb164: {
        StorageDead(_39);
        goto -> bb165;
    }

    bb165: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb166;
    }

    bb166: {
        StorageDead(_4);
        goto -> bb167;
    }

    bb167: {
        return;
    }

    bb168 (cleanup): {
        drop(_252) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_239) -> [return: bb170, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_226) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_193) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_175) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_136) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_127) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_48) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_39) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_5) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        resume;
    }

    bb179 (cleanup): {
        _437 = discriminant(_305);
        goto -> bb178;
    }

    bb180 (cleanup): {
        _438 = discriminant(_284);
        goto -> bb178;
    }

    bb181 (cleanup): {
        _439 = discriminant(_262);
        goto -> bb168;
    }

    bb182 (cleanup): {
        _440 = discriminant(_253);
        goto -> bb169;
    }

    bb183 (cleanup): {
        _441 = discriminant(_240);
        goto -> bb170;
    }

    bb184 (cleanup): {
        _442 = discriminant(_227);
        goto -> bb171;
    }

    bb185 (cleanup): {
        _443 = discriminant(_217);
        goto -> bb171;
    }

    bb186 (cleanup): {
        _444 = discriminant(_176);
        goto -> bb178;
    }

    bb187 (cleanup): {
        _445 = discriminant(_146);
        goto -> bb173;
    }

    bb188 (cleanup): {
        _446 = discriminant(_137);
        goto -> bb174;
    }

    bb189 (cleanup): {
        _447 = discriminant(_128);
        goto -> bb178;
    }

    bb190 (cleanup): {
        _448 = discriminant(_120);
        goto -> bb178;
    }

    bb191 (cleanup): {
        _449 = discriminant(_107);
        goto -> bb178;
    }

    bb192 (cleanup): {
        _450 = discriminant(_97);
        goto -> bb178;
    }

    bb193 (cleanup): {
        _451 = discriminant(_58);
        goto -> bb175;
    }

    bb194 (cleanup): {
        _452 = discriminant(_49);
        goto -> bb176;
    }

    bb195 (cleanup): {
        _453 = discriminant(_40);
        goto -> bb178;
    }

    bb196 (cleanup): {
        _454 = discriminant(_32);
        goto -> bb178;
    }

    bb197 (cleanup): {
        _455 = discriminant(_19);
        goto -> bb178;
    }

    bb198 (cleanup): {
        _456 = discriminant(_6);
        goto -> bb178;
    }
}
