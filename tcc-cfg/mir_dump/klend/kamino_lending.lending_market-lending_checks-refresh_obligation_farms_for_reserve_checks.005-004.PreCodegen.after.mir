// MIR for `refresh_obligation_farms_for_reserve_checks` after PreCodegen

fn refresh_obligation_farms_for_reserve_checks(_1: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::AccountInfo<'_>;
    let _5: utils::account_loader_trait::FatAccountLoader<'_, state::obligation::Obligation>;
    let mut _6: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let _8: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _11: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _12: &utils::account_loader_trait::FatAccountLoader<'_, state::obligation::Obligation>;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: bool;
    let mut _19: &anchor_lang::prelude::Pubkey;
    let _20: &state::obligation::Obligation;
    let mut _21: &std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _25: !;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: anchor_lang::error::Error;
    let mut _30: anchor_lang::error::Error;
    let mut _31: anchor_lang::error::AnchorError;
    let mut _32: std::string::String;
    let mut _33: &LendingError;
    let _34: LendingError;
    let mut _35: u32;
    let mut _36: LendingError;
    let mut _37: std::string::String;
    let mut _38: &LendingError;
    let _39: LendingError;
    let mut _40: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _41: anchor_lang::error::ErrorOrigin;
    let mut _42: anchor_lang::error::Source;
    let mut _43: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _44: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _45: anchor_lang::prelude::Pubkey;
    let mut _46: &state::obligation::Obligation;
    let mut _47: &std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _48: anchor_lang::prelude::Pubkey;
    let mut _49: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _50: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _52: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _53: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _54: isize;
    let _55: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _58: std::cell::Ref<'_, state::reserve::Reserve>;
    let _59: ();
    let mut _60: bool;
    let mut _61: &state::reserve::ReserveStatus;
    let _62: state::reserve::ReserveStatus;
    let mut _63: &state::reserve::ReserveConfig;
    let _64: &state::reserve::Reserve;
    let mut _65: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _66: &state::reserve::ReserveStatus;
    let _67: state::reserve::ReserveStatus;
    let mut _68: !;
    let _69: ();
    let mut _70: &str;
    let _71: &str;
    let mut _72: anchor_lang::error::Error;
    let mut _73: anchor_lang::error::AnchorError;
    let mut _74: std::string::String;
    let mut _75: &LendingError;
    let _76: LendingError;
    let mut _77: u32;
    let mut _78: LendingError;
    let mut _79: std::string::String;
    let mut _80: &LendingError;
    let _81: LendingError;
    let mut _82: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _83: anchor_lang::error::ErrorOrigin;
    let mut _84: anchor_lang::error::Source;
    let mut _85: std::option::Option<anchor_lang::error::ComparedValues>;
    let _86: ();
    let mut _87: bool;
    let mut _88: u64;
    let mut _89: &state::reserve::Reserve;
    let mut _90: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _91: u64;
    let mut _92: !;
    let _93: ();
    let mut _94: &str;
    let _95: &str;
    let mut _96: anchor_lang::error::Error;
    let mut _97: anchor_lang::error::AnchorError;
    let mut _98: std::string::String;
    let mut _99: &LendingError;
    let _100: LendingError;
    let mut _101: u32;
    let mut _102: LendingError;
    let mut _103: std::string::String;
    let mut _104: &LendingError;
    let _105: LendingError;
    let mut _106: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _107: anchor_lang::error::ErrorOrigin;
    let mut _108: anchor_lang::error::Source;
    let mut _109: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _110: ();
    let mut _118: bool;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    scope 1 {
        debug obligation_account => _5;
        let _9: std::cell::Ref<'_, state::obligation::Obligation>;
        let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _17: std::cell::Ref<'_, state::obligation::Obligation>;
        scope 2 {
            debug obligation => _9;
            let mut _116: &LendingError;
            let mut _117: &LendingError;
        }
        scope 3 {
            debug residual => _14;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _17;
            scope 6 {
            }
        }
    }
    scope 7 {
        debug reserve => _50;
        let mut _111: &LendingError;
        let mut _112: &LendingError;
        let mut _113: &LendingError;
        let mut _114: &LendingError;
        let mut _115: &state::reserve::ReserveStatus;
    }
    scope 8 {
        debug residual => _55;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _58;
        scope 11 {
        }
    }

    bb0: {
        _118 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _3 = anchor_lang::prelude::AccountInfo::<'_>::data_is_empty(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        _2 = const ();
        goto -> bb27;
    }

    bb3: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _7 = &(*_8);
        _6 = account_loader_trait::FatAccountLoader::<'_, obligation::Obligation>::try_from(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        _5 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error>::unwrap(move _6) -> [return: bb5, unwind: bb63];
    }

    bb5: {
        StorageDead(_6);
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_5;
        _11 = account_loader_trait::FatAccountLoader::<'_, obligation::Obligation>::load(move _12) -> [return: bb6, unwind: bb62];
    }

    bb6: {
        StorageDead(_12);
        _10 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _11) -> [return: bb7, unwind: bb62];
    }

    bb7: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_17);
        _17 = move ((_10 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _9 = move _17;
        StorageDead(_17);
        _119 = discriminant(_10);
        StorageDead(_10);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_9;
        _20 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _21) -> [return: bb12, unwind: bb61];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_14);
        _14 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _16) -> [return: bb11, unwind: bb67];
    }

    bb11: {
        StorageDead(_16);
        StorageDead(_14);
        _125 = discriminant(_10);
        StorageDead(_10);
        goto -> bb54;
    }

    bb12: {
        StorageDead(_21);
        _19 = &((*_20).2: anchor_lang::prelude::Pubkey);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).5: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _23 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _24) -> [return: bb13, unwind: bb61];
    }

    bb13: {
        _22 = &_23;
        StorageDead(_24);
        _18 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _19, move _22) -> [return: bb14, unwind: bb61];
    }

    bb14: {
        switchInt(move _18) -> [0: bb24, otherwise: bb15];
    }

    bb15: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const "Obligation lending market does not match the lending market provided";
        _27 = &(*_28);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb16, unwind: bb61];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _117 = const _;
        _33 = &(*_117);
        _32 = LendingError::name(move _33) -> [return: bb17, unwind: bb61];
    }

    bb17: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        _36 = LendingError::InvalidAccountInput;
        _35 = <LendingError as Into<u32>>::into(move _36) -> [return: bb18, unwind: bb60];
    }

    bb18: {
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _116 = const _;
        _38 = &(*_116);
        _37 = <LendingError as ToString>::to_string(move _38) -> [return: bb19, unwind: bb60];
    }

    bb19: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 326_u32 };
        _41 = anchor_lang::error::ErrorOrigin::Source(move _42);
        StorageDead(_42);
        _40 = std::option::Option::<ErrorOrigin>::Some(move _41);
        StorageDead(_41);
        StorageLive(_43);
        _43 = std::option::Option::<ComparedValues>::None;
        _31 = anchor_lang::error::AnchorError { error_name: move _32, error_code_number: move _35, error_msg: move _37, error_origin: move _40, compared_values: move _43 };
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_32);
        _30 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _31) -> [return: bb20, unwind: bb61];
    }

    bb20: {
        _118 = const true;
        StorageDead(_31);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_9;
        _46 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _47) -> [return: bb21, unwind: bb66];
    }

    bb21: {
        StorageDead(_47);
        _45 = ((*_46).2: anchor_lang::prelude::Pubkey);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &((*_1).5: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _48 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _49) -> [return: bb22, unwind: bb66];
    }

    bb22: {
        StorageDead(_49);
        _44 = (move _45, move _48);
        StorageDead(_48);
        StorageDead(_45);
        _118 = const false;
        _29 = anchor_lang::error::Error::with_pubkeys(move _30, move _44) -> [return: bb23, unwind: bb66];
    }

    bb23: {
        StorageDead(_44);
        _118 = const false;
        StorageDead(_30);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _29);
        StorageDead(_29);
        StorageDead(_46);
        StorageDead(_18);
        drop(_9) -> [return: bb54, unwind: bb62];
    }

    bb24: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        _2 = const ();
        StorageDead(_18);
        drop(_9) -> [return: bb25, unwind: bb62];
    }

    bb25: {
        StorageDead(_9);
        drop(_5) -> [return: bb26, unwind: bb63];
    }

    bb26: {
        StorageDead(_5);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _52 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _53) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_53);
        _51 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb29, unwind: bb63];
    }

    bb29: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb30, 1: bb31, otherwise: bb9];
    }

    bb30: {
        StorageLive(_58);
        _58 = move ((_51 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _50 = move _58;
        StorageDead(_58);
        _121 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_50;
        _64 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _65) -> [return: bb33, unwind: bb59];
    }

    bb31: {
        StorageLive(_55);
        _55 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_57);
        _57 = move _55;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _57) -> [return: bb32, unwind: bb64];
    }

    bb32: {
        StorageDead(_57);
        StorageDead(_55);
        _123 = discriminant(_51);
        StorageDead(_51);
        goto -> bb53;
    }

    bb33: {
        StorageDead(_65);
        _63 = &((*_64).9: state::reserve::ReserveConfig);
        _62 = reserve::ReserveConfig::status(move _63) -> [return: bb34, unwind: bb59];
    }

    bb34: {
        _61 = &_62;
        StorageDead(_63);
        StorageLive(_66);
        _115 = const _;
        _66 = &(*_115);
        _60 = <reserve::ReserveStatus as PartialEq>::eq(move _61, move _66) -> [return: bb35, unwind: bb59];
    }

    bb35: {
        switchInt(move _60) -> [0: bb42, otherwise: bb36];
    }

    bb36: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = const "Reserve is not active";
        _70 = &(*_71);
        _69 = solana_program::log::sol_log(move _70) -> [return: bb37, unwind: bb59];
    }

    bb37: {
        StorageDead(_70);
        StorageDead(_71);
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _112 = const _;
        _75 = &(*_112);
        _74 = LendingError::name(move _75) -> [return: bb38, unwind: bb59];
    }

    bb38: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _78 = LendingError::ReserveObsolete;
        _77 = <LendingError as Into<u32>>::into(move _78) -> [return: bb39, unwind: bb58];
    }

    bb39: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        _111 = const _;
        _80 = &(*_111);
        _79 = <LendingError as ToString>::to_string(move _80) -> [return: bb40, unwind: bb58];
    }

    bb40: {
        StorageDead(_80);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 335_u32 };
        _83 = anchor_lang::error::ErrorOrigin::Source(move _84);
        StorageDead(_84);
        _82 = std::option::Option::<ErrorOrigin>::Some(move _83);
        StorageDead(_83);
        StorageLive(_85);
        _85 = std::option::Option::<ComparedValues>::None;
        _73 = anchor_lang::error::AnchorError { error_name: move _74, error_code_number: move _77, error_msg: move _79, error_origin: move _82, compared_values: move _85 };
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_74);
        _72 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _73) -> [return: bb41, unwind: bb59];
    }

    bb41: {
        StorageDead(_73);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _72);
        StorageDead(_72);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb52;
    }

    bb42: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        _59 = const ();
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_50;
        _89 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _90) -> [return: bb43, unwind: bb59];
    }

    bb43: {
        StorageDead(_90);
        _88 = ((*_89).0: u64);
        StorageLive(_91);
        _91 = const _ as u64 (IntToInt);
        _87 = Ne(move _88, move _91);
        switchInt(move _87) -> [0: bb50, otherwise: bb44];
    }

    bb44: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = const "Reserve version does not match the program version";
        _94 = &(*_95);
        _93 = solana_program::log::sol_log(move _94) -> [return: bb45, unwind: bb59];
    }

    bb45: {
        StorageDead(_94);
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _114 = const _;
        _99 = &(*_114);
        _98 = LendingError::name(move _99) -> [return: bb46, unwind: bb59];
    }

    bb46: {
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        _102 = LendingError::ReserveDeprecated;
        _101 = <LendingError as Into<u32>>::into(move _102) -> [return: bb47, unwind: bb57];
    }

    bb47: {
        StorageDead(_102);
        StorageLive(_103);
        StorageLive(_104);
        _113 = const _;
        _104 = &(*_113);
        _103 = <LendingError as ToString>::to_string(move _104) -> [return: bb48, unwind: bb57];
    }

    bb48: {
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 340_u32 };
        _107 = anchor_lang::error::ErrorOrigin::Source(move _108);
        StorageDead(_108);
        _106 = std::option::Option::<ErrorOrigin>::Some(move _107);
        StorageDead(_107);
        StorageLive(_109);
        _109 = std::option::Option::<ComparedValues>::None;
        _97 = anchor_lang::error::AnchorError { error_name: move _98, error_code_number: move _101, error_msg: move _103, error_origin: move _106, compared_values: move _109 };
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_98);
        _96 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _97) -> [return: bb49, unwind: bb59];
    }

    bb49: {
        StorageDead(_97);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _96);
        StorageDead(_96);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb52;
    }

    bb50: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_88);
        _86 = const ();
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_110);
        _110 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _110);
        StorageDead(_110);
        drop(_50) -> [return: bb51, unwind: bb63];
    }

    bb51: {
        StorageDead(_50);
        goto -> bb56;
    }

    bb52: {
        drop(_50) -> [return: bb53, unwind: bb63];
    }

    bb53: {
        StorageDead(_50);
        goto -> bb56;
    }

    bb54: {
        StorageDead(_9);
        drop(_5) -> [return: bb55, unwind: bb63];
    }

    bb55: {
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb56;
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_98) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_74) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_50) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_32) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_9) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_5) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64 (cleanup): {
        _127 = discriminant(_51);
        goto -> bb63;
    }

    bb65 (cleanup): {
        drop(_30) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_118) -> [0: bb61, otherwise: bb65];
    }

    bb67 (cleanup): {
        _128 = discriminant(_10);
        goto -> bb62;
    }
}
