digraph Mir_0_11415 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U256::from_big_endian(_1: &amp;ReErased [u8]) -&gt; utils::fraction::uint_types::U256<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: (usize, bool);<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: &amp;ReErased [u8];<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: [u8; 32_usize];<br align="left"/>let _10: ();<br align="left"/>let mut _11: &amp;ReErased mut [u8];<br align="left"/>let mut _12: &amp;ReErased mut [u8];<br align="left"/>let mut _13: &amp;ReErased mut [u8; 32_usize];<br align="left"/>let mut _14: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: (usize, bool);<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: &amp;ReErased [u8];<br align="left"/>let mut _20: (usize, bool);<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: (usize, bool);<br align="left"/>let mut _23: &amp;ReErased [u8];<br align="left"/>let _24: &amp;ReErased &amp;ReErased [u8];<br align="left"/>let mut _25: [u64; 4_usize];<br align="left"/>let _26: ();<br align="left"/>let mut _27: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _28: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _29: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _30: ();<br align="left"/>let _31: ();<br align="left"/>let mut _32: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _33: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _34: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: !;<br align="left"/>let _37: usize;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: &amp;ReErased [u8];<br align="left"/>let _40: &amp;ReErased [u8];<br align="left"/>let _41: &amp;ReErased [u8];<br align="left"/>let mut _42: &amp;ReErased [u8; 32_usize];<br align="left"/>let mut _43: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let mut _44: usize;<br align="left"/>let mut _45: usize;<br align="left"/>let mut _46: (usize, bool);<br align="left"/>let _47: usize;<br align="left"/>let mut _48: usize;<br align="left"/>let mut _49: usize;<br align="left"/>let mut _50: (usize, bool);<br align="left"/>let mut _51: (usize, bool);<br align="left"/>let mut _52: usize;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: [u64; 4_usize];<br align="left"/>let mut _55: &amp;ReErased [u8];<br align="left"/>debug slice =&gt; _1;<br align="left"/>debug padded =&gt; _9;<br align="left"/>debug ret =&gt; _25;<br align="left"/>debug iter =&gt; _29;<br align="left"/>debug i =&gt; _37;<br align="left"/>>;
    bb0__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_5 = CheckedMul(const 4_usize, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_5.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 4_usize, const 8_usize)</td></tr></table>>];
    bb1__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = move (_5.0: usize)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/></td></tr><tr><td align="left">_6 = core::slice::&lt;impl [u8]&gt;::len(move _7)</td></tr></table>>];
    bb2__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_3 = Ge(move _4, move _6)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb3__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_9)<br/>_9 = [const 0_u8; 32]<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;mut _9<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_17 = CheckedMul(const 4_usize, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_17.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 4_usize, const 8_usize)</td></tr></table>>];
    bb4__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_4)<br/>StorageLive(_8)<br/></td></tr><tr><td align="left">_8 = panic(const &quot;assertion failed: 4 * 8 &gt;= slice.len()&quot;)</td></tr></table>>];
    bb5__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_16 = move (_17.0: usize)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;(*_1)<br/></td></tr><tr><td align="left">_18 = core::slice::&lt;impl [u8]&gt;::len(move _19)</td></tr></table>>];
    bb6__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_20 = CheckedSub(_16, _18)<br/></td></tr><tr><td align="left">assert(!move (_20.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _16, move _18)</td></tr></table>>];
    bb7__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = move (_20.0: usize)<br/>StorageDead(_18)<br/>StorageDead(_16)<br/>StorageLive(_21)<br/>_22 = CheckedMul(const 4_usize, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_22.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 4_usize, const 8_usize)</td></tr></table>>];
    bb8__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_21 = move (_22.0: usize)<br/>_14 = std::ops::Range::&lt;usize&gt; { start: move _15, end: move _21 }<br/>StorageDead(_21)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_12 = &lt;[u8; 32] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _13, move _14)</td></tr></table>>];
    bb9__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_11 = &amp;mut (*_12)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;_1<br/>_55 = deref_copy (*_24)<br/>_23 = &amp;(*_55)<br/></td></tr><tr><td align="left">_10 = core::slice::&lt;impl [u8]&gt;::copy_from_slice(move _11, move _23)</td></tr></table>>];
    bb10__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_11)<br/>StorageDead(_24)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageLive(_25)<br/>_25 = [const 0_u64; 4]<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 4_usize }<br/></td></tr><tr><td align="left">_27 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _28)</td></tr></table>>];
    bb11__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_29)<br/>_29 = move _27<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = &amp;mut _29<br/>_33 = &amp;mut (*_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _33)</td></tr></table>>];
    bb13__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_35 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb14__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_32 as Some).0: usize)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;_9<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _37<br/>_46 = CheckedMul(const 8_usize, _45)<br/></td></tr><tr><td align="left">assert(!move (_46.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 8_usize, move _45)</td></tr></table>>];
    bb15__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb16__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_26 = const ()<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_54)<br/>_54 = _25<br/>_0 = uint_types::U256(move _54)<br/>StorageDead(_54)<br/>StorageDead(_25)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb17__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_44 = move (_46.0: usize)<br/>StorageDead(_45)<br/>_43 = RangeFrom::&lt;usize&gt; { start: move _44 }<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">_41 = &lt;[u8; 32] as Index&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index(move _42, move _43)</td></tr></table>>];
    bb18__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/>_40 = &amp;(*_41)<br/>_39 = &amp;(*_40)<br/></td></tr><tr><td align="left">_38 = &lt;uint::byteorder::BigEndian as ByteOrder&gt;::read_u64(move _39)</td></tr></table>>];
    bb19__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _37<br/>_50 = CheckedSub(const 4_usize, _49)<br/></td></tr><tr><td align="left">assert(!move (_50.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 4_usize, move _49)</td></tr></table>>];
    bb20__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_48 = move (_50.0: usize)<br/>StorageDead(_49)<br/>_51 = CheckedSub(_48, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_51.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _48, const 1_usize)</td></tr></table>>];
    bb21__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_47 = move (_51.0: usize)<br/>StorageDead(_48)<br/>_52 = Len(_25)<br/>_53 = Lt(_47, _52)<br/></td></tr><tr><td align="left">assert(move _53, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _52, _47)</td></tr></table>>];
    bb22__0_11415 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_25[_47] = move _38<br/>StorageDead(_38)<br/>StorageDead(_47)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>_31 = const ()<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>_30 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_11415 -> bb1__0_11415 [label="success"];
    bb1__0_11415 -> bb2__0_11415 [label="return"];
    bb2__0_11415 -> bb4__0_11415 [label="0"];
    bb2__0_11415 -> bb3__0_11415 [label="otherwise"];
    bb3__0_11415 -> bb5__0_11415 [label="success"];
    bb5__0_11415 -> bb6__0_11415 [label="return"];
    bb6__0_11415 -> bb7__0_11415 [label="success"];
    bb7__0_11415 -> bb8__0_11415 [label="success"];
    bb8__0_11415 -> bb9__0_11415 [label="return"];
    bb9__0_11415 -> bb10__0_11415 [label="return"];
    bb10__0_11415 -> bb11__0_11415 [label="return"];
    bb11__0_11415 -> bb12__0_11415 [label=""];
    bb12__0_11415 -> bb13__0_11415 [label="return"];
    bb13__0_11415 -> bb16__0_11415 [label="0"];
    bb13__0_11415 -> bb14__0_11415 [label="1"];
    bb13__0_11415 -> bb15__0_11415 [label="otherwise"];
    bb14__0_11415 -> bb17__0_11415 [label="success"];
    bb17__0_11415 -> bb18__0_11415 [label="return"];
    bb18__0_11415 -> bb19__0_11415 [label="return"];
    bb19__0_11415 -> bb20__0_11415 [label="success"];
    bb20__0_11415 -> bb21__0_11415 [label="success"];
    bb21__0_11415 -> bb22__0_11415 [label="success"];
    bb22__0_11415 -> bb12__0_11415 [label=""];
}
