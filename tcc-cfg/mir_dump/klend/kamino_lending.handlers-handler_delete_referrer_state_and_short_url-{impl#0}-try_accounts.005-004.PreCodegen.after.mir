// MIR for `handlers::handler_delete_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18>::try_accounts` after PreCodegen

fn handlers::handler_delete_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut DeleteReferrerStateAndShortUrlBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrlBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrlBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Account<'_, state::referral::ShortUrl>>;
    let mut _38: std::result::Result<anchor_lang::prelude::Account<'_, state::referral::ShortUrl>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::Account<'_, state::referral::ShortUrl>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrlBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrlBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrlBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: &anchor_lang::prelude::Signer<'_>;
    let _85: &anchor_lang::prelude::Signer<'_>;
    let mut _86: !;
    let mut _87: anchor_lang::error::Error;
    let mut _88: anchor_lang::error::Error;
    let mut _89: anchor_lang::error::ErrorCode;
    let mut _92: (anchor_lang::prelude::Pubkey, u8);
    let mut _93: &[&[u8]];
    let mut _94: &[&[u8]; 2];
    let _95: &[&[u8]; 2];
    let _96: [&[u8]; 2];
    let mut _97: &[u8];
    let _98: &[u8];
    let mut _99: &[u8];
    let _100: &[u8];
    let mut _101: &anchor_lang::prelude::Pubkey;
    let _102: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _103: &anchor_lang::prelude::Signer<'_>;
    let mut _104: &anchor_lang::prelude::Pubkey;
    let _105: &&anchor_lang::prelude::Pubkey;
    let mut _106: u8;
    let _107: ();
    let mut _108: bool;
    let mut _109: &anchor_lang::prelude::Pubkey;
    let _110: anchor_lang::prelude::Pubkey;
    let mut _111: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _112: &anchor_lang::prelude::Pubkey;
    let mut _113: !;
    let mut _114: anchor_lang::error::Error;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::Error;
    let mut _117: anchor_lang::error::ErrorCode;
    let mut _118: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _119: anchor_lang::prelude::Pubkey;
    let mut _120: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _121: anchor_lang::prelude::Pubkey;
    let _122: ();
    let mut _123: bool;
    let mut _124: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _125: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let _126: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _127: !;
    let mut _128: anchor_lang::error::Error;
    let mut _129: anchor_lang::error::Error;
    let mut _130: anchor_lang::error::ErrorCode;
    let _131: ();
    let mut _133: &state::referral::ReferrerState;
    let mut _134: &std::cell::Ref<'_, state::referral::ReferrerState>;
    let _135: std::cell::Ref<'_, state::referral::ReferrerState>;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::referral::ReferrerState>>;
    let mut _137: std::result::Result<std::cell::Ref<'_, state::referral::ReferrerState>, anchor_lang::error::Error>;
    let mut _138: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _146: bool;
    let mut _147: &anchor_lang::prelude::Pubkey;
    let mut _148: &anchor_lang::prelude::Pubkey;
    let mut _149: !;
    let mut _150: anchor_lang::error::Error;
    let mut _151: anchor_lang::error::Error;
    let mut _152: anchor_lang::error::Error;
    let mut _153: anchor_lang::error::ErrorCode;
    let mut _154: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _155: anchor_lang::prelude::Pubkey;
    let mut _156: anchor_lang::prelude::Pubkey;
    let _157: ();
    let mut _158: bool;
    let mut _159: &anchor_lang::prelude::Pubkey;
    let _160: &state::referral::ReferrerState;
    let mut _161: &std::cell::Ref<'_, state::referral::ReferrerState>;
    let _162: std::cell::Ref<'_, state::referral::ReferrerState>;
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::referral::ReferrerState>>;
    let mut _164: std::result::Result<std::cell::Ref<'_, state::referral::ReferrerState>, anchor_lang::error::Error>;
    let mut _165: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _171: &anchor_lang::prelude::Pubkey;
    let _172: anchor_lang::prelude::Pubkey;
    let mut _173: &anchor_lang::prelude::Signer<'_>;
    let mut _174: !;
    let mut _175: anchor_lang::error::Error;
    let mut _176: anchor_lang::error::Error;
    let mut _177: LendingError;
    let _178: ();
    let mut _179: bool;
    let mut _180: &anchor_lang::prelude::Pubkey;
    let _181: anchor_lang::prelude::Pubkey;
    let mut _182: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _183: &anchor_lang::prelude::Pubkey;
    let _184: anchor_lang::prelude::Pubkey;
    let mut _185: &anchor_lang::prelude::Signer<'_>;
    let mut _186: !;
    let mut _187: anchor_lang::error::Error;
    let mut _188: anchor_lang::error::Error;
    let mut _189: anchor_lang::error::ErrorCode;
    let _190: ();
    let mut _191: bool;
    let mut _192: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _193: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let _194: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _195: !;
    let mut _196: anchor_lang::error::Error;
    let mut _197: anchor_lang::error::Error;
    let mut _198: anchor_lang::error::ErrorCode;
    let _199: ();
    let mut _201: &state::referral::ShortUrl;
    let mut _202: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _204: &anchor_lang::prelude::Signer<'_>;
    let mut _205: bool;
    let mut _206: &anchor_lang::prelude::Pubkey;
    let mut _207: &anchor_lang::prelude::Pubkey;
    let mut _208: !;
    let mut _209: anchor_lang::error::Error;
    let mut _210: anchor_lang::error::Error;
    let mut _211: anchor_lang::error::Error;
    let mut _212: anchor_lang::error::ErrorCode;
    let mut _213: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _214: anchor_lang::prelude::Pubkey;
    let mut _215: anchor_lang::prelude::Pubkey;
    let _216: ();
    let mut _217: bool;
    let mut _218: &anchor_lang::prelude::Pubkey;
    let _219: anchor_lang::prelude::Pubkey;
    let mut _220: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _221: &anchor_lang::prelude::Pubkey;
    let _222: anchor_lang::prelude::Pubkey;
    let mut _223: &anchor_lang::prelude::Signer<'_>;
    let mut _224: !;
    let mut _225: anchor_lang::error::Error;
    let mut _226: anchor_lang::error::Error;
    let mut _227: anchor_lang::error::ErrorCode;
    let mut _228: handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>;
    let mut _229: anchor_lang::prelude::Signer<'_>;
    let mut _230: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _231: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _232: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _233: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _234: &anchor_lang::prelude::Pubkey;
    let mut _235: &anchor_lang::prelude::Pubkey;
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: bool;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    scope 1 {
        debug referrer => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
        scope 6 {
            debug referrer_state => _21;
            let _36: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
            scope 11 {
                debug short_url => _36;
                let _51: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                scope 16 {
                    debug rent => _51;
                    let _66: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    scope 21 {
                        debug system_program => _66;
                        let _90: anchor_lang::prelude::Pubkey;
                        let _91: u8;
                        scope 26 {
                            debug __pda_address => _90;
                            debug __bump => _91;
                            let _132: anchor_lang::prelude::Pubkey;
                            let _140: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _143: std::cell::Ref<'_, state::referral::ReferrerState>;
                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _170: std::cell::Ref<'_, state::referral::ReferrerState>;
                            let _200: anchor_lang::prelude::Pubkey;
                            scope 27 {
                                debug my_key => _132;
                                let _144: anchor_lang::prelude::Pubkey;
                                scope 32 {
                                    debug target_key => _144;
                                }
                            }
                            scope 28 {
                                debug residual => _140;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _143;
                                scope 31 {
                                }
                            }
                            scope 33 {
                                debug residual => _167;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _170;
                                scope 36 {
                                }
                            }
                            scope 37 {
                                debug my_key => _200;
                                let _203: anchor_lang::prelude::Pubkey;
                                scope 38 {
                                    debug target_key => _203;
                                }
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _240 = const false;
        _239 = const false;
        _238 = const false;
        _237 = const false;
        _236 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, DeleteReferrerStateAndShortUrlBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _9, move _15) -> [return: bb2, unwind: bb117];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb117];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _241 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as anchor_lang::Accounts<'_, DeleteReferrerStateAndShortUrlBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb129];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _269 = discriminant(_7);
        StorageDead(_7);
        goto -> bb112;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _24, move _30) -> [return: bb9, unwind: bb117];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb117];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>);
        _21 = move _35;
        StorageDead(_35);
        _243 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as anchor_lang::Accounts<'_, DeleteReferrerStateAndShortUrlBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb128];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _267 = discriminant(_22);
        StorageDead(_22);
        goto -> bb111;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _38 = std::result::Result::<anchor_lang::prelude::Account<'_, referral::ShortUrl>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _39, move _45) -> [return: bb15, unwind: bb117];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::Account<'_, referral::ShortUrl>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb117];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>);
        _36 = move _50;
        StorageDead(_50);
        _245 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, DeleteReferrerStateAndShortUrlBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb116];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb127];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _265 = discriminant(_37);
        StorageDead(_37);
        goto -> bb110;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _53 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _54, move _60) -> [return: bb21, unwind: bb116];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb116];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _51 = move _65;
        StorageDead(_65);
        _247 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, DeleteReferrerStateAndShortUrlBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb116];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb126];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _263 = discriminant(_52);
        StorageDead(_52);
        goto -> bb109;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18};
        _68 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_delete_referrer_state_and_short_url.rs:9:10: 9:18}>(move _69, move _75) -> [return: bb27, unwind: bb116];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb116];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _66 = move _80;
        StorageDead(_80);
        _249 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_6;
        _84 = &(*_85);
        _83 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _84) -> [return: bb32, unwind: bb116];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb125];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _261 = discriminant(_67);
        StorageDead(_67);
        goto -> bb108;
    }

    bb32: {
        StorageDead(_84);
        _82 = ((*_83).6: bool);
        switchInt(move _82) -> [0: bb33, otherwise: bb36];
    }

    bb33: {
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = ConstraintMut;
        _88 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _89) -> [return: bb34, unwind: bb116];
    }

    bb34: {
        StorageDead(_89);
        _87 = anchor_lang::error::Error::with_account_name::<&str>(move _88, const "referrer") -> [return: bb35, unwind: bb116];
    }

    bb35: {
        StorageDead(_88);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _87);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb108;
    }

    bb36: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = const _;
        _97 = &(*_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &_6;
        _102 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _103) -> [return: bb37, unwind: bb116];
    }

    bb37: {
        StorageDead(_103);
        _234 = deref_copy ((*_102).0: &anchor_lang::prelude::Pubkey);
        _101 = &(*_234);
        _100 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _101) -> [return: bb38, unwind: bb116];
    }

    bb38: {
        _99 = &(*_100);
        StorageDead(_101);
        _96 = [move _97, move _99];
        StorageDead(_99);
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_94);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_1;
        _235 = deref_copy (*_105);
        _104 = &(*_235);
        _92 = anchor_lang::prelude::Pubkey::find_program_address(move _93, move _104) -> [return: bb39, unwind: bb116];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_93);
        StorageLive(_90);
        _90 = (_92.0: anchor_lang::prelude::Pubkey);
        StorageLive(_91);
        _91 = (_92.1: u8);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_92);
        StorageLive(_106);
        _106 = _91;
        ((*_4).0: u8) = move _106;
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_21;
        _110 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as anchor_lang::Key>::key(move _111) -> [return: bb40, unwind: bb116];
    }

    bb40: {
        _109 = &_110;
        StorageDead(_111);
        StorageLive(_112);
        _112 = &_90;
        _108 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _109, move _112) -> [return: bb41, unwind: bb116];
    }

    bb41: {
        switchInt(move _108) -> [0: bb47, otherwise: bb42];
    }

    bb42: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = ConstraintSeeds;
        _116 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _117) -> [return: bb43, unwind: bb116];
    }

    bb43: {
        StorageDead(_117);
        _115 = anchor_lang::error::Error::with_account_name::<&str>(move _116, const "referrer_state") -> [return: bb44, unwind: bb116];
    }

    bb44: {
        _240 = const true;
        StorageDead(_116);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_21;
        _119 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as anchor_lang::Key>::key(move _120) -> [return: bb45, unwind: bb124];
    }

    bb45: {
        StorageDead(_120);
        StorageLive(_121);
        _121 = _90;
        _118 = (move _119, move _121);
        StorageDead(_121);
        StorageDead(_119);
        _240 = const false;
        _114 = anchor_lang::error::Error::with_pubkeys(move _115, move _118) -> [return: bb46, unwind: bb124];
    }

    bb46: {
        StorageDead(_118);
        _240 = const false;
        StorageDead(_115);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _114);
        StorageDead(_114);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb107;
    }

    bb47: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_109);
        _107 = const ();
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_21;
        _125 = &(*_126);
        _124 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _125) -> [return: bb48, unwind: bb116];
    }

    bb48: {
        StorageDead(_125);
        _123 = ((*_124).6: bool);
        switchInt(move _123) -> [0: bb49, otherwise: bb52];
    }

    bb49: {
        StorageDead(_126);
        StorageDead(_124);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = ConstraintMut;
        _129 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _130) -> [return: bb50, unwind: bb116];
    }

    bb50: {
        StorageDead(_130);
        _128 = anchor_lang::error::Error::with_account_name::<&str>(move _129, const "referrer_state") -> [return: bb51, unwind: bb116];
    }

    bb51: {
        StorageDead(_129);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _128);
        StorageDead(_128);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb107;
    }

    bb52: {
        StorageDead(_126);
        StorageDead(_124);
        _122 = const ();
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_21;
        _137 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerState>::load(move _138) -> [return: bb53, unwind: bb116];
    }

    bb53: {
        StorageDead(_138);
        _136 = <std::result::Result<Ref<'_, referral::ReferrerState>, anchor_lang::error::Error> as Try>::branch(move _137) -> [return: bb54, unwind: bb116];
    }

    bb54: {
        _238 = const true;
        _239 = const true;
        StorageDead(_137);
        _139 = discriminant(_136);
        switchInt(move _139) -> [0: bb55, 1: bb56, otherwise: bb5];
    }

    bb55: {
        StorageLive(_143);
        _143 = move ((_136 as Continue).0: std::cell::Ref<'_, state::referral::ReferrerState>);
        _135 = move _143;
        StorageDead(_143);
        _134 = &_135;
        _133 = <Ref<'_, referral::ReferrerState> as Deref>::deref(move _134) -> [return: bb58, unwind: bb115];
    }

    bb56: {
        StorageLive(_140);
        _140 = move ((_136 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_142);
        _142 = move _140;
        _0 = <std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _142) -> [return: bb57, unwind: bb122];
    }

    bb57: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_134);
        _259 = discriminant(_136);
        _238 = const false;
        _239 = const false;
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        goto -> bb106;
    }

    bb58: {
        StorageDead(_134);
        _132 = ((*_133).0: anchor_lang::prelude::Pubkey);
        drop(_135) -> [return: bb118, unwind: bb122];
    }

    bb59: {
        StorageDead(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_132;
        StorageLive(_148);
        _148 = &_144;
        _146 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _147, move _148) -> [return: bb60, unwind: bb116];
    }

    bb60: {
        switchInt(move _146) -> [0: bb65, otherwise: bb61];
    }

    bb61: {
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = ConstraintHasOne;
        _152 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _153) -> [return: bb62, unwind: bb116];
    }

    bb62: {
        StorageDead(_153);
        _151 = anchor_lang::error::Error::with_account_name::<&str>(move _152, const "referrer_state") -> [return: bb63, unwind: bb116];
    }

    bb63: {
        StorageDead(_152);
        StorageLive(_154);
        StorageLive(_155);
        _155 = _132;
        StorageLive(_156);
        _156 = _144;
        _154 = (move _155, move _156);
        StorageDead(_156);
        StorageDead(_155);
        _150 = anchor_lang::error::Error::with_pubkeys(move _151, move _154) -> [return: bb64, unwind: bb116];
    }

    bb64: {
        StorageDead(_154);
        StorageDead(_151);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _150);
        StorageDead(_150);
        StorageDead(_146);
        StorageDead(_144);
        goto -> bb106;
    }

    bb65: {
        StorageDead(_148);
        StorageDead(_147);
        _131 = const ();
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_21;
        _164 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerState>::load(move _165) -> [return: bb66, unwind: bb116];
    }

    bb66: {
        StorageDead(_165);
        _163 = <std::result::Result<Ref<'_, referral::ReferrerState>, anchor_lang::error::Error> as Try>::branch(move _164) -> [return: bb67, unwind: bb116];
    }

    bb67: {
        _236 = const true;
        _237 = const true;
        StorageDead(_164);
        _166 = discriminant(_163);
        switchInt(move _166) -> [0: bb68, 1: bb69, otherwise: bb5];
    }

    bb68: {
        StorageLive(_170);
        _170 = move ((_163 as Continue).0: std::cell::Ref<'_, state::referral::ReferrerState>);
        _162 = move _170;
        StorageDead(_170);
        _161 = &_162;
        _160 = <Ref<'_, referral::ReferrerState> as Deref>::deref(move _161) -> [return: bb71, unwind: bb114];
    }

    bb69: {
        StorageLive(_167);
        _167 = move ((_163 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb70, unwind: bb121];
    }

    bb70: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_161);
        StorageDead(_159);
        _257 = discriminant(_163);
        _236 = const false;
        _237 = const false;
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        goto -> bb105;
    }

    bb71: {
        StorageDead(_161);
        _159 = &((*_160).1: anchor_lang::prelude::Pubkey);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_6;
        _172 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _173) -> [return: bb72, unwind: bb114];
    }

    bb72: {
        _171 = &_172;
        StorageDead(_173);
        _158 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _159, move _171) -> [return: bb73, unwind: bb114];
    }

    bb73: {
        switchInt(move _158) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        StorageDead(_171);
        StorageDead(_159);
        StorageDead(_172);
        drop(_162) -> [return: bb120, unwind: bb121];
    }

    bb75: {
        StorageDead(_171);
        StorageDead(_159);
        StorageDead(_172);
        drop(_162) -> [return: bb119, unwind: bb121];
    }

    bb76: {
        StorageDead(_177);
        _175 = anchor_lang::error::Error::with_account_name::<&str>(move _176, const "referrer_state") -> [return: bb77, unwind: bb116];
    }

    bb77: {
        StorageDead(_176);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _175);
        StorageDead(_175);
        goto -> bb105;
    }

    bb78: {
        _180 = &_181;
        StorageDead(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_6;
        _184 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _185) -> [return: bb79, unwind: bb116];
    }

    bb79: {
        _183 = &_184;
        StorageDead(_185);
        _179 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _180, move _183) -> [return: bb80, unwind: bb116];
    }

    bb80: {
        switchInt(move _179) -> [0: bb84, otherwise: bb81];
    }

    bb81: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = ConstraintClose;
        _188 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _189) -> [return: bb82, unwind: bb116];
    }

    bb82: {
        StorageDead(_189);
        _187 = anchor_lang::error::Error::with_account_name::<&str>(move _188, const "referrer_state") -> [return: bb83, unwind: bb116];
    }

    bb83: {
        StorageDead(_188);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _187);
        StorageDead(_187);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb107;
    }

    bb84: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_180);
        _178 = const ();
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &_36;
        _193 = &(*_194);
        _192 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _193) -> [return: bb85, unwind: bb116];
    }

    bb85: {
        StorageDead(_193);
        _191 = ((*_192).6: bool);
        switchInt(move _191) -> [0: bb86, otherwise: bb89];
    }

    bb86: {
        StorageDead(_194);
        StorageDead(_192);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = ConstraintMut;
        _197 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _198) -> [return: bb87, unwind: bb116];
    }

    bb87: {
        StorageDead(_198);
        _196 = anchor_lang::error::Error::with_account_name::<&str>(move _197, const "short_url") -> [return: bb88, unwind: bb116];
    }

    bb88: {
        StorageDead(_197);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _196);
        StorageDead(_196);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb107;
    }

    bb89: {
        StorageDead(_194);
        StorageDead(_192);
        _190 = const ();
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_36;
        _201 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as Deref>::deref(move _202) -> [return: bb90, unwind: bb116];
    }

    bb90: {
        StorageDead(_202);
        _200 = ((*_201).0: anchor_lang::prelude::Pubkey);
        StorageDead(_201);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_6;
        _203 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _204) -> [return: bb91, unwind: bb116];
    }

    bb91: {
        StorageDead(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_200;
        StorageLive(_207);
        _207 = &_203;
        _205 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _206, move _207) -> [return: bb92, unwind: bb116];
    }

    bb92: {
        switchInt(move _205) -> [0: bb97, otherwise: bb93];
    }

    bb93: {
        StorageDead(_207);
        StorageDead(_206);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = ConstraintHasOne;
        _211 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _212) -> [return: bb94, unwind: bb116];
    }

    bb94: {
        StorageDead(_212);
        _210 = anchor_lang::error::Error::with_account_name::<&str>(move _211, const "short_url") -> [return: bb95, unwind: bb116];
    }

    bb95: {
        StorageDead(_211);
        StorageLive(_213);
        StorageLive(_214);
        _214 = _200;
        StorageLive(_215);
        _215 = _203;
        _213 = (move _214, move _215);
        StorageDead(_215);
        StorageDead(_214);
        _209 = anchor_lang::error::Error::with_pubkeys(move _210, move _213) -> [return: bb96, unwind: bb116];
    }

    bb96: {
        StorageDead(_213);
        StorageDead(_210);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _209);
        StorageDead(_209);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb107;
    }

    bb97: {
        StorageDead(_207);
        StorageDead(_206);
        _199 = const ();
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_36;
        _219 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as anchor_lang::Key>::key(move _220) -> [return: bb98, unwind: bb116];
    }

    bb98: {
        _218 = &_219;
        StorageDead(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_6;
        _222 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _223) -> [return: bb99, unwind: bb116];
    }

    bb99: {
        _221 = &_222;
        StorageDead(_223);
        _217 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _218, move _221) -> [return: bb100, unwind: bb116];
    }

    bb100: {
        switchInt(move _217) -> [0: bb104, otherwise: bb101];
    }

    bb101: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = ConstraintClose;
        _226 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _227) -> [return: bb102, unwind: bb116];
    }

    bb102: {
        StorageDead(_227);
        _225 = anchor_lang::error::Error::with_account_name::<&str>(move _226, const "short_url") -> [return: bb103, unwind: bb116];
    }

    bb103: {
        StorageDead(_226);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _225);
        StorageDead(_225);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb107;
    }

    bb104: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_218);
        _216 = const ();
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_228);
        StorageLive(_229);
        _229 = move _6;
        StorageLive(_230);
        _230 = move _21;
        StorageLive(_231);
        _231 = move _36;
        StorageLive(_232);
        _232 = move _51;
        StorageLive(_233);
        _233 = move _66;
        _228 = handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl::<'_> { referrer: move _229, referrer_state: move _230, short_url: move _231, rent: move _232, system_program: move _233 };
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_229);
        _0 = std::result::Result::<handlers::handler_delete_referrer_state_and_short_url::DeleteReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Ok(move _228);
        StorageDead(_228);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb113;
    }

    bb105: {
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb107;
    }

    bb106: {
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_66);
        goto -> bb109;
    }

    bb109: {
        StorageDead(_51);
        drop(_36) -> [return: bb110, unwind: bb117];
    }

    bb110: {
        StorageDead(_36);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_21);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_6);
        goto -> bb113;
    }

    bb113: {
        return;
    }

    bb114 (cleanup): {
        drop(_162) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_135) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_36) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        resume;
    }

    bb118: {
        _251 = discriminant(_136);
        _238 = const false;
        _239 = const false;
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_36;
        _144 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as anchor_lang::Key>::key(move _145) -> [return: bb59, unwind: bb116];
    }

    bb119: {
        _253 = discriminant(_163);
        _236 = const false;
        _237 = const false;
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = LendingError::ReferrerStateOwnerMismatch;
        _176 = <anchor_lang::error::Error as From<LendingError>>::from(move _177) -> [return: bb76, unwind: bb116];
    }

    bb120: {
        _255 = discriminant(_163);
        _236 = const false;
        _237 = const false;
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        _157 = const ();
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_21;
        _181 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as anchor_lang::Key>::key(move _182) -> [return: bb78, unwind: bb116];
    }

    bb121 (cleanup): {
        _271 = discriminant(_163);
        goto -> bb116;
    }

    bb122 (cleanup): {
        _272 = discriminant(_136);
        goto -> bb116;
    }

    bb123 (cleanup): {
        drop(_115) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        switchInt(_240) -> [0: bb116, otherwise: bb123];
    }

    bb125 (cleanup): {
        _273 = discriminant(_67);
        goto -> bb116;
    }

    bb126 (cleanup): {
        _274 = discriminant(_52);
        goto -> bb116;
    }

    bb127 (cleanup): {
        _275 = discriminant(_37);
        goto -> bb117;
    }

    bb128 (cleanup): {
        _276 = discriminant(_22);
        goto -> bb117;
    }

    bb129 (cleanup): {
        _277 = discriminant(_7);
        goto -> bb117;
    }
}
