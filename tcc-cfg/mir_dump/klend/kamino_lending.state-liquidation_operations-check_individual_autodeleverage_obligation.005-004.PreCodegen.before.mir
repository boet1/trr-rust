// MIR for `check_individual_autodeleverage_obligation` before PreCodegen

fn check_individual_autodeleverage_obligation(_1: &state::types::LiquidationCheckInputs<'_>) -> std::option::Option<state::types::LiquidationParams> {
    let mut _0: std::option::Option<state::types::LiquidationParams>;
    let _2: &state::lending_market::LendingMarket;
    let _3: &state::reserve::Reserve;
    let _4: &state::reserve::Reserve;
    let _5: &state::obligation::Obligation;
    let _6: u64;
    let _7: ();
    let mut _8: bool;
    let mut _9: &state::obligation::Obligation;
    let mut _10: !;
    let _11: ();
    let mut _12: bool;
    let mut _13: &state::lending_market::LendingMarket;
    let mut _14: !;
    let _15: ();
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 1];
    let _20: &[&str; 1];
    let _21: [&str; 1];
    let _22: ();
    let mut _23: bool;
    let mut _24: u64;
    let mut _25: !;
    let _26: ();
    let _27: ();
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[&str; 1];
    let _31: &[&str; 1];
    let _32: [&str; 1];
    let mut _34: &state::obligation::Obligation;
    let mut _36: u8;
    let _37: ();
    let mut _38: bool;
    let mut _39: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _40: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _41: !;
    let _42: ();
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[&str; 1];
    let _47: &[&str; 1];
    let _48: [&str; 1];
    let mut _50: u64;
    let mut _51: u64;
    let mut _53: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u64>;
    let mut _54: std::option::Option<u64>;
    let mut _55: u64;
    let mut _56: u64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::option::Option<std::convert::Infallible>;
    let mut _63: u64;
    let mut _65: std::option::Option<&state::reserve::ReserveConfig>;
    let mut _66: std::array::IntoIter<&state::reserve::ReserveConfig, 2>;
    let mut _67: [&state::reserve::ReserveConfig; 2];
    let mut _68: &state::reserve::ReserveConfig;
    let mut _69: &state::reserve::ReserveConfig;
    let _70: &state::reserve::ReserveConfig;
    let mut _71: {closure@programs\klend\src\state\liquidation_operations.rs:481:21: 481:30};
    let mut _72: &str;
    let _73: &str;
    let mut _75: u64;
    let mut _76: u16;
    let mut _77: u16;
    let mut _78: &state::lending_market::LendingMarket;
    let mut _79: &state::reserve::ReserveConfig;
    let _80: &state::reserve::ReserveConfig;
    let mut _81: &state::reserve::ReserveConfig;
    let _82: &state::reserve::ReserveConfig;
    let mut _83: &state::obligation::Obligation;
    let mut _84: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _85: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _86: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _87: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _88: &state::obligation::Obligation;
    let _89: ();
    let _90: ();
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[&str; 6];
    let _94: &[&str; 6];
    let _95: [&str; 6];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let mut _97: &[core::fmt::rt::Argument<'_>; 5];
    let _98: &[core::fmt::rt::Argument<'_>; 5];
    let _99: [core::fmt::rt::Argument<'_>; 5];
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _102: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _103: core::fmt::rt::Argument<'_>;
    let mut _104: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _105: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &u64;
    let _108: &u64;
    let mut _109: core::fmt::rt::Argument<'_>;
    let mut _110: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _111: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _114: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _115: state::types::LiquidationParams;
    let mut _116: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _117: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _118: state::types::LiquidationReason;
    scope 1 {
        debug lending_market => _2;
        debug collateral_reserve => _3;
        debug debt_reserve => _4;
        debug obligation => _5;
        debug timestamp => _6;
        let _33: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        let mut _119: &[&str; 1];
        let mut _122: &[&str; 1];
        scope 2 {
            debug user_ltv => _33;
            let _35: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug autodeleverage_target_ltv => _35;
                let _49: u64;
                let mut _120: &[&str; 1];
                scope 4 {
                    debug secs_since_margin_call_started => _49;
                    let _52: u64;
                    let _58: std::option::Option<std::convert::Infallible>;
                    let _61: u64;
                    scope 5 {
                        debug secs_since_deleveraging_started => _52;
                        let _62: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        scope 10 {
                            debug days_since_deleveraging_started => _62;
                            let _64: &state::reserve::ReserveConfig;
                            scope 11 {
                                debug selected_reserve_config => _64;
                                let _74: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                scope 12 {
                                    debug liquidation_bonus_rate => _74;
                                    let mut _121: &[&str; 6];
                                }
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _58;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _61;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = ((*_1).0: &state::lending_market::LendingMarket);
        StorageLive(_3);
        _3 = ((*_1).1: &state::reserve::Reserve);
        StorageLive(_4);
        _4 = ((*_1).2: &state::reserve::Reserve);
        StorageLive(_5);
        _5 = ((*_1).3: &state::obligation::Obligation);
        StorageLive(_6);
        _6 = ((*_1).4: u64);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_5);
        _8 = obligation::Obligation::is_marked_for_deleveraging(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_2);
        _12 = state::lending_market::LendingMarket::is_autodeleverage_enabled(move _13) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _0 = std::option::Option::<state::types::LiquidationParams>::None;
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb42;
    }

    bb4: {
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((*_2).24: u64);
        _23 = Eq(move _24, const 0_u64);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb6: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _122 = const _;
        _20 = &(*_122);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        _16 = _print(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_20);
        StorageDead(_16);
        _15 = const ();
        StorageDead(_15);
        _0 = std::option::Option::<state::types::LiquidationParams>::None;
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb42;
    }

    bb9: {
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _119 = const _;
        _31 = &(*_119);
        _30 = &(*_31);
        _29 = move _30 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_30);
        _28 = Arguments::<'_>::new_const(move _29) -> [return: bb11, unwind continue];
    }

    bb10: {
        StorageDead(_24);
        _22 = const ();
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_5);
        _33 = obligation::Obligation::loan_to_value(move _34) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _27 = _print(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_31);
        StorageDead(_27);
        _26 = const ();
        StorageDead(_26);
        _0 = std::option::Option::<state::types::LiquidationParams>::None;
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb42;
    }

    bb13: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_5).19: u8);
        _35 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u8>(move _36) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_33;
        StorageLive(_40);
        _40 = &_35;
        _38 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::le(move _39, move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _38) -> [0: bb19, otherwise: bb16];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _120 = const _;
        _47 = &(*_120);
        _46 = &(*_47);
        _45 = move _46 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_46);
        _44 = Arguments::<'_>::new_const(move _45) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_45);
        _43 = _print(move _44) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_44);
        StorageDead(_47);
        StorageDead(_43);
        _42 = const ();
        StorageDead(_42);
        _0 = std::option::Option::<state::types::LiquidationParams>::None;
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb41;
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_39);
        _37 = const ();
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _6;
        StorageLive(_51);
        _51 = ((*_5).24: u64);
        _49 = core::num::<impl u64>::saturating_sub(move _50, move _51) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = ((*_2).24: u64);
        StorageLive(_56);
        _56 = _49;
        _54 = get_secs_since_deleveraging_started(move _55, move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = <std::option::Option<u64> as Try>::branch(move _54) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_54);
        _57 = discriminant(_53);
        switchInt(move _57) -> [0: bb23, 1: bb25, otherwise: bb24];
    }

    bb23: {
        StorageLive(_61);
        _61 = ((_53 as Continue).0: u64);
        _52 = _61;
        StorageDead(_61);
        StorageDead(_53);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _52;
        _62 = to_days_fractional(move _63) -> [return: bb27, unwind continue];
    }

    bb24: {
        unreachable;
    }

    bb25: {
        StorageLive(_58);
        _58 = ((_53 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::option::Option<state::types::LiquidationParams> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _60) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_49);
        goto -> bb41;
    }

    bb27: {
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &((*_3).9: state::reserve::ReserveConfig);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &((*_4).9: state::reserve::ReserveConfig);
        _69 = &(*_70);
        _67 = [move _68, move _69];
        StorageDead(_69);
        StorageDead(_68);
        _66 = <[&reserve::ReserveConfig; 2] as IntoIterator>::into_iter(move _67) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_67);
        StorageLive(_71);
        _71 = {closure@programs\klend\src\state\liquidation_operations.rs:481:21: 481:30};
        _65 = <std::array::IntoIter<&reserve::ReserveConfig, 2> as Iterator>::max_by_key::<(u16, u64), {closure@programs\klend\src\state\liquidation_operations.rs:481:21: 481:30}>(move _66, move _71) -> [return: bb29, unwind: bb44];
    }

    bb29: {
        StorageDead(_71);
        StorageDead(_66);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const "must exist for a statically-constructed non-empty array";
        _72 = &(*_73);
        _64 = std::option::Option::<&reserve::ReserveConfig>::expect(move _65, move _72) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_72);
        StorageDead(_65);
        StorageDead(_73);
        StorageDead(_70);
        StorageLive(_74);
        StorageLive(_75);
        _75 = ((*_64).29: u64);
        StorageLive(_76);
        _76 = ((*_64).10: u16);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_2);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((*_3).9: state::reserve::ReserveConfig);
        _79 = &(*_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &((*_4).9: state::reserve::ReserveConfig);
        _81 = &(*_82);
        StorageLive(_83);
        _83 = &(*_5);
        _77 = get_emode_max_liquidation_bonus(move _78, move _79, move _81, move _83) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_84);
        _84 = _62;
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_5);
        _87 = obligation::Obligation::no_bf_loan_to_value(move _88) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _74 = calculate_autodeleverage_bonus_rate(move _75, move _76, move _77, move _84, move _85) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _121 = const _;
        _94 = &(*_121);
        _93 = &(*_94);
        _92 = move _93 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_33;
        _101 = &(*_102);
        _100 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _101) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_35;
        _104 = &(*_105);
        _103 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _104) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_52;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _107) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_107);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_62;
        _110 = &(*_111);
        _109 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _110) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_110);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_74;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _113) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_113);
        _99 = [move _100, move _103, move _106, move _109, move _112];
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = move _97 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_97);
        _91 = Arguments::<'_>::new_v1(move _92, move _96) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_96);
        StorageDead(_92);
        _90 = _print(move _91) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_91);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        StorageDead(_90);
        _89 = const ();
        StorageDead(_89);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _33;
        StorageLive(_117);
        _117 = _74;
        StorageLive(_118);
        _118 = state::types::LiquidationReason::IndividualDeleveraging;
        _115 = state::types::LiquidationParams { user_ltv: move _116, liquidation_bonus_rate: move _117, liquidation_reason: move _118 };
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        _0 = std::option::Option::<state::types::LiquidationParams>::Some(move _115);
        StorageDead(_115);
        StorageDead(_74);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb43;
    }

    bb41: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        resume;
    }
}
