digraph Mir_0_333 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn handlers::handler_init_referrer_token_state::process(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, handlers::handler_init_referrer_token_state::InitReferrerTokenState&lt;ReErased&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let mut _2: std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;&gt;;<br align="left"/>let mut _4: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _10: std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let _11: std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;&gt;;<br align="left"/>let mut _13: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _14: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _19: std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let _20: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _21: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _22: u8;<br align="left"/>let mut _23: state::referral::ReferrerTokenState;<br align="left"/>let mut _24: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _25: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _26: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _27: &amp;ReErased std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: u8;<br align="left"/>let mut _30: [u64; 31_usize];<br align="left"/>let mut _31: &amp;ReErased mut state::referral::ReferrerTokenState;<br align="left"/>let mut _32: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _33: ();<br align="left"/>let mut _34: &amp;ReErased mut handlers::handler_init_referrer_token_state::InitReferrerTokenState&lt;ReErased&gt;;<br align="left"/>let mut _35: &amp;ReErased mut handlers::handler_init_referrer_token_state::InitReferrerTokenState&lt;ReErased&gt;;<br align="left"/>let mut _36: &amp;ReErased mut handlers::handler_init_referrer_token_state::InitReferrerTokenState&lt;ReErased&gt;;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>let mut _40: isize;<br align="left"/>let mut _41: isize;<br align="left"/>let mut _42: isize;<br align="left"/>let mut _43: isize;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: isize;<br align="left"/>let mut _46: isize;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug referrer_token_state =&gt; _2;<br align="left"/>debug residual =&gt; _7;<br align="left"/>debug val =&gt; _10;<br align="left"/>debug reserve =&gt; _11;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug referrer =&gt; _20;<br align="left"/>debug bump =&gt; _22;<br align="left"/>>;
    bb0__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_34 = deref_copy (_1.1: &amp;mut handlers::handler_init_referrer_token_state::InitReferrerTokenState&lt;'_&gt;)<br/>_5 = &amp;((*_34).4: anchor_lang::prelude::AccountLoader&lt;'_, state::referral::ReferrerTokenState&gt;)<br/></td></tr><tr><td align="left">_4 = anchor_lang::prelude::AccountLoader::&lt;'_, referral::ReferrerTokenState&gt;::load_init(move _5)</td></tr></table>>];
    bb1__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;RefMut&lt;'_, referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_3 as Continue).0: std::cell::RefMut&lt;'_, state::referral::ReferrerTokenState&gt;)<br/>_2 = move _10<br/>StorageDead(_10)<br/>_37 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_35 = deref_copy (_1.1: &amp;mut handlers::handler_init_referrer_token_state::InitReferrerTokenState&lt;'_&gt;)<br/>_14 = &amp;((*_35).2: anchor_lang::prelude::AccountLoader&lt;'_, state::reserve::Reserve&gt;)<br/></td></tr><tr><td align="left">_13 = anchor_lang::prelude::AccountLoader::&lt;'_, reserve::Reserve&gt;::load(move _14)</td></tr></table>>];
    bb4__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_9)<br/>_9 = move _7<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _9)</td></tr></table>>];
    bb6__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_43 = discriminant(_3)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;Ref&lt;'_, reserve::Reserve&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb8__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_15 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb9__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = move ((_12 as Continue).0: std::cell::Ref&lt;'_, state::reserve::Reserve&gt;)<br/>_11 = move _19<br/>StorageDead(_19)<br/>_39 = discriminant(_12)<br/>StorageDead(_12)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_36 = deref_copy (_1.1: &amp;mut handlers::handler_init_referrer_token_state::InitReferrerTokenState&lt;'_&gt;)<br/>_21 = &amp;((*_36).3: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/></td></tr><tr><td align="left">_20 = &lt;anchor_lang::prelude::AccountInfo&lt;'_&gt; as anchor_lang::Key&gt;::key(move _21)</td></tr></table>>];
    bb10__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = move ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_18)<br/>_18 = move _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb11__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>_41 = discriminant(_12)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb12__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_22)<br/>_22 = ((_1.3: handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps).0: u8)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _20<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;_11<br/></td></tr><tr><td align="left">_26 = &lt;Ref&lt;'_, reserve::Reserve&gt; as Deref&gt;::deref(move _27)</td></tr></table>>];
    bb13__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_25 = (((*_26).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _22<br/></td></tr><tr><td align="left">_28 = &lt;u8 as Into&lt;u64&gt;&gt;::into(move _29)</td></tr></table>>];
    bb14__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageLive(_30)<br/>_30 = [const 0_u64; 31]<br/>_23 = referral::ReferrerTokenState { referrer: move _24, mint: move _25, amount_unclaimed_sf: const 0_u128, amount_cumulative_sf: const 0_u128, bump: move _28, padding: move _30 }<br/>StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;mut _2<br/></td></tr><tr><td align="left">_31 = &lt;RefMut&lt;'_, referral::ReferrerTokenState&gt; as DerefMut&gt;::deref_mut(move _32)</td></tr></table>>];
    bb15__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>(*_31) = move _23<br/>StorageDead(_23)<br/>StorageDead(_31)<br/>StorageDead(_26)<br/>StorageLive(_33)<br/>_33 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _33)<br/>StorageDead(_33)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb16__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb17__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">return</td></tr></table>>];
    bb20__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb21__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb22__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb23__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left" balign="left">_45 = discriminant(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_333 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">24 (cleanup)</td></tr><tr><td align="left" balign="left">_46 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_333 -> bb1__0_333 [label="return"];
    bb1__0_333 -> bb2__0_333 [label="return"];
    bb1__0_333 -> bb22__0_333 [label="unwind"];
    bb2__0_333 -> bb3__0_333 [label="0"];
    bb2__0_333 -> bb5__0_333 [label="1"];
    bb2__0_333 -> bb4__0_333 [label="otherwise"];
    bb3__0_333 -> bb7__0_333 [label="return"];
    bb3__0_333 -> bb21__0_333 [label="unwind"];
    bb5__0_333 -> bb6__0_333 [label="return"];
    bb5__0_333 -> bb24__0_333 [label="unwind"];
    bb6__0_333 -> bb18__0_333 [label=""];
    bb7__0_333 -> bb8__0_333 [label="return"];
    bb7__0_333 -> bb21__0_333 [label="unwind"];
    bb8__0_333 -> bb9__0_333 [label="0"];
    bb8__0_333 -> bb10__0_333 [label="1"];
    bb8__0_333 -> bb4__0_333 [label="otherwise"];
    bb9__0_333 -> bb12__0_333 [label="return"];
    bb9__0_333 -> bb20__0_333 [label="unwind"];
    bb10__0_333 -> bb11__0_333 [label="return"];
    bb10__0_333 -> bb23__0_333 [label="unwind"];
    bb11__0_333 -> bb18__0_333 [label="return"];
    bb11__0_333 -> bb22__0_333 [label="unwind"];
    bb12__0_333 -> bb13__0_333 [label="return"];
    bb12__0_333 -> bb20__0_333 [label="unwind"];
    bb13__0_333 -> bb14__0_333 [label="return"];
    bb13__0_333 -> bb20__0_333 [label="unwind"];
    bb14__0_333 -> bb15__0_333 [label="return"];
    bb14__0_333 -> bb20__0_333 [label="unwind"];
    bb15__0_333 -> bb16__0_333 [label="return"];
    bb15__0_333 -> bb21__0_333 [label="unwind"];
    bb16__0_333 -> bb17__0_333 [label="return"];
    bb16__0_333 -> bb22__0_333 [label="unwind"];
    bb17__0_333 -> bb19__0_333 [label=""];
    bb18__0_333 -> bb19__0_333 [label=""];
    bb20__0_333 -> bb21__0_333 [label="return"];
    bb21__0_333 -> bb22__0_333 [label="return"];
    bb23__0_333 -> bb21__0_333 [label=""];
    bb24__0_333 -> bb22__0_333 [label=""];
}
