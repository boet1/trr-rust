// MIR for `__cpi_client_accounts_repay_obligation_liquidity_v2::<impl at programs\klend\src\handlers\handler_repay_obligation_liquidity.rs:155:10: 155:18>::to_account_metas` after PreCodegen

fn __cpi_client_accounts_repay_obligation_liquidity_v2::<impl at programs\klend\src\handlers\handler_repay_obligation_liquidity.rs:155:10: 155:18>::to_account_metas(_1: &__cpi_client_accounts_repay_obligation_liquidity_v2::RepayObligationLiquidityV2<'_>, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _7: &handlers::handler_repay_obligation_liquidity::__cpi_client_accounts_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _8: std::option::Option<bool>;
    let _9: ();
    let mut _10: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _11: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _12: &handlers::handler_refresh_obligation_farms_for_reserve::__cpi_client_accounts_optional_obligation_farms_accounts::OptionalObligationFarmsAccounts<'_>;
    let mut _13: std::option::Option<bool>;
    let _14: ();
    let mut _15: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _16: anchor_lang::prelude::AccountMeta;
    let mut _17: anchor_lang::prelude::Pubkey;
    let mut _18: &anchor_lang::prelude::AccountInfo<'_>;
    let _19: &anchor_lang::prelude::AccountInfo<'_>;
    let _20: ();
    let mut _21: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::AccountInfo<'_>;
    let _25: &anchor_lang::prelude::AccountInfo<'_>;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: handlers::handler_repay_obligation_liquidity::__cpi_client_accounts_repay_obligation_liquidity::RepayObligationLiquidity<'_>);
        StorageLive(_8);
        _8 = std::option::Option::<bool>::None;
        _6 = <handlers::handler_repay_obligation_liquidity::__cpi_client_accounts_repay_obligation_liquidity::RepayObligationLiquidity<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _7, move _8) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _4 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _5, move _6) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _3;
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).1: handlers::handler_refresh_obligation_farms_for_reserve::__cpi_client_accounts_optional_obligation_farms_accounts::OptionalObligationFarmsAccounts<'_>);
        StorageLive(_13);
        _13 = std::option::Option::<bool>::None;
        _11 = <handlers::handler_refresh_obligation_farms_for_reserve::__cpi_client_accounts_optional_obligation_farms_accounts::OptionalObligationFarmsAccounts<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _12, move _13) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        _9 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _10, move _11) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut _3;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).2: anchor_lang::prelude::AccountInfo<'_>);
        _18 = &(*_19);
        _17 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _18) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        StorageDead(_18);
        _16 = anchor_lang::prelude::AccountMeta::new_readonly(move _17, const false) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        StorageDead(_17);
        _14 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _15, move _16) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_19);
        StorageDead(_14);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _3;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _24 = &(*_25);
        _23 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _24) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        StorageDead(_24);
        _22 = anchor_lang::prelude::AccountMeta::new_readonly(move _23, const false) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        StorageDead(_23);
        _20 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _21, move _22) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_25);
        StorageDead(_20);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}
