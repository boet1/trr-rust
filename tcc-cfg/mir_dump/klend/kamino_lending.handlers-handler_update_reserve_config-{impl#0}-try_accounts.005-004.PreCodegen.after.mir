// MIR for `handlers::handler_update_reserve_config::<impl at programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18>::try_accounts` after PreCodegen

fn handlers::handler_update_reserve_config::<impl at programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdateReserveConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _10: <handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, handlers::handler_update_reserve_config::UpdateReserveConfigBumps>>::try_accounts::__Args;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, handlers::handler_update_reserve_config::UpdateReserveConfigBumps>>::try_accounts::__Args>;
    let mut _12: std::result::Result<<handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, handlers::handler_update_reserve_config::UpdateReserveConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _13: std::result::Result<<handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, handlers::handler_update_reserve_config::UpdateReserveConfigBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _14: &mut &[u8];
    let mut _15: &mut &[u8];
    let mut _16: {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _24: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _25: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::Pubkey;
    let mut _27: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _28: &[u8];
    let mut _29: &mut handlers::handler_update_reserve_config::UpdateReserveConfigBumps;
    let mut _30: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _31: {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _40: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _41: &anchor_lang::prelude::Pubkey;
    let mut _42: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _43: &[u8];
    let mut _44: &mut handlers::handler_update_reserve_config::UpdateReserveConfigBumps;
    let mut _45: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _46: {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _55: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _56: &anchor_lang::prelude::Pubkey;
    let mut _57: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _58: &[u8];
    let mut _59: &mut handlers::handler_update_reserve_config::UpdateReserveConfigBumps;
    let mut _60: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _61: {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _70: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _71: &anchor_lang::prelude::Pubkey;
    let mut _72: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _73: &[u8];
    let mut _74: &mut handlers::handler_update_reserve_config::UpdateReserveConfigBumps;
    let mut _75: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _76: {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _82: ();
    let mut _84: &anchor_lang::prelude::Signer<'_>;
    let mut _86: state::UpdateConfigMode;
    let mut _87: anchor_lang::prelude::Pubkey;
    let mut _88: &state::lending_market::LendingMarket;
    let mut _89: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _90: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _92: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _93: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _99: anchor_lang::prelude::Pubkey;
    let mut _100: &state::global_config::GlobalConfig;
    let mut _101: &std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let _102: std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::global_config::GlobalConfig>>;
    let mut _104: std::result::Result<std::cell::Ref<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _105: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: bool;
    let mut _112: &anchor_lang::prelude::Pubkey;
    let mut _113: &anchor_lang::prelude::Pubkey;
    let mut _114: !;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::Error;
    let mut _117: anchor_lang::error::Error;
    let mut _118: anchor_lang::error::ErrorCode;
    let mut _119: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _120: anchor_lang::prelude::Pubkey;
    let mut _121: anchor_lang::prelude::Pubkey;
    let mut _124: (anchor_lang::prelude::Pubkey, u8);
    let mut _125: &[&[u8]];
    let mut _126: &[&[u8]; 1];
    let _127: &[&[u8]; 1];
    let _128: [&[u8]; 1];
    let mut _129: &[u8];
    let _130: &[u8];
    let mut _131: &anchor_lang::prelude::Pubkey;
    let _132: &&anchor_lang::prelude::Pubkey;
    let mut _133: u8;
    let _134: ();
    let mut _135: bool;
    let mut _136: &anchor_lang::prelude::Pubkey;
    let _137: anchor_lang::prelude::Pubkey;
    let mut _138: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _139: &anchor_lang::prelude::Pubkey;
    let mut _140: !;
    let mut _141: anchor_lang::error::Error;
    let mut _142: anchor_lang::error::Error;
    let mut _143: anchor_lang::error::Error;
    let mut _144: anchor_lang::error::ErrorCode;
    let mut _145: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _146: anchor_lang::prelude::Pubkey;
    let mut _147: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _148: anchor_lang::prelude::Pubkey;
    let _149: ();
    let mut _150: bool;
    let mut _151: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _152: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _153: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _154: !;
    let mut _155: anchor_lang::error::Error;
    let mut _156: anchor_lang::error::Error;
    let mut _157: anchor_lang::error::ErrorCode;
    let _158: ();
    let mut _160: &state::reserve::Reserve;
    let mut _161: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _162: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _164: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _165: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _173: bool;
    let mut _174: &anchor_lang::prelude::Pubkey;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: !;
    let mut _177: anchor_lang::error::Error;
    let mut _178: anchor_lang::error::Error;
    let mut _179: anchor_lang::error::Error;
    let mut _180: anchor_lang::error::ErrorCode;
    let mut _181: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _182: anchor_lang::prelude::Pubkey;
    let mut _183: anchor_lang::prelude::Pubkey;
    let mut _184: handlers::handler_update_reserve_config::UpdateReserveConfig<'_>;
    let mut _185: anchor_lang::prelude::Signer<'_>;
    let mut _186: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _187: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _188: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: state::UpdateConfigMode;
        let _8: std::vec::Vec<u8>;
        let _9: bool;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _21: <handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, handlers::handler_update_reserve_config::UpdateReserveConfigBumps>>::try_accounts::__Args;
        scope 2 {
            debug mode => _7;
            debug value => _8;
            debug skip_config_integrity_validation => _9;
            let _22: anchor_lang::prelude::Signer<'_>;
            let _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _36: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug signer => _22;
                let _37: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
                let _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _51: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
                scope 12 {
                    debug global_config => _37;
                    let _52: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                    let _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _66: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                    scope 17 {
                        debug lending_market => _52;
                        let _67: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                        let _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _81: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                        scope 22 {
                            debug reserve => _67;
                            let _83: anchor_lang::prelude::Pubkey;
                            let _122: anchor_lang::prelude::Pubkey;
                            let _123: u8;
                            let mut _189: &[&[u8]; 1];
                            scope 27 {
                                debug actual => _83;
                                let _85: anchor_lang::prelude::Pubkey;
                                let _95: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _98: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _110: std::cell::Ref<'_, state::global_config::GlobalConfig>;
                                scope 28 {
                                    debug expected => _85;
                                }
                                scope 29 {
                                    debug residual => _95;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _98;
                                    scope 32 {
                                    }
                                }
                                scope 33 {
                                    debug residual => _107;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _110;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 37 {
                                debug __pda_address => _122;
                                debug __bump => _123;
                                let _159: anchor_lang::prelude::Pubkey;
                                let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _170: std::cell::Ref<'_, state::reserve::Reserve>;
                                scope 38 {
                                    debug my_key => _159;
                                    let _171: anchor_lang::prelude::Pubkey;
                                    scope 43 {
                                        debug target_key => _171;
                                    }
                                }
                                scope 39 {
                                    debug residual => _167;
                                    scope 40 {
                                    }
                                }
                                scope 41 {
                                    debug val => _170;
                                    scope 42 {
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _78;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _81;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _63;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _66;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _48;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _51;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _33;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _36;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        _195 = const false;
        _192 = const false;
        _191 = const false;
        _197 = const false;
        _196 = const false;
        _194 = const false;
        _193 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut _6;
        _14 = &mut (*_15);
        _13 = <<handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, UpdateReserveConfigBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageLive(_16);
        _16 = {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
        _12 = std::result::Result::<<handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, UpdateReserveConfigBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18}>(move _13, move _16) -> [return: bb2, unwind: bb94];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_13);
        _11 = <std::result::Result<<handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, UpdateReserveConfigBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _12) -> [return: bb3, unwind: bb94];
    }

    bb3: {
        StorageDead(_12);
        _17 = discriminant(_11);
        switchInt(move _17) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_21);
        _21 = move ((_11 as Continue).0: <handlers::handler_update_reserve_config::UpdateReserveConfig<'info> as anchor_lang::Accounts<'info, handlers::handler_update_reserve_config::UpdateReserveConfigBumps>>::try_accounts::__Args);
        _10 = move _21;
        StorageDead(_21);
        StorageLive(_7);
        _7 = (_10.0: state::UpdateConfigMode);
        StorageLive(_8);
        _8 = move (_10.1: std::vec::Vec<u8>);
        StorageLive(_9);
        _9 = (_10.2: bool);
        _200 = discriminant(_11);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        StorageLive(_27);
        _27 = &mut (*_2);
        StorageLive(_28);
        _28 = &(*_6);
        StorageLive(_29);
        _29 = &mut (*_4);
        StorageLive(_30);
        _30 = &mut (*_5);
        _25 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdateReserveConfigBumps>>::try_accounts(move _26, move _27, move _28, move _29, move _30) -> [return: bb8, unwind: bb93];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_18);
        _18 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _20) -> [return: bb7, unwind: bb108];
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_18);
        _198 = discriminant(_11);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb88;
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_31);
        _31 = {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
        _24 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18}>(move _25, move _31) -> [return: bb9, unwind: bb93];
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_25);
        _23 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _24) -> [return: bb10, unwind: bb93];
    }

    bb10: {
        StorageDead(_24);
        _32 = discriminant(_23);
        switchInt(move _32) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_36);
        _36 = move ((_23 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _22 = move _36;
        StorageDead(_36);
        _202 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_1);
        StorageLive(_42);
        _42 = &mut (*_2);
        StorageLive(_43);
        _43 = &(*_6);
        StorageLive(_44);
        _44 = &mut (*_4);
        StorageLive(_45);
        _45 = &mut (*_5);
        _40 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Accounts<'_, UpdateReserveConfigBumps>>::try_accounts(move _41, move _42, move _43, move _44, move _45) -> [return: bb14, unwind: bb93];
    }

    bb12: {
        StorageLive(_33);
        _33 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _35) -> [return: bb13, unwind: bb107];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_33);
        _228 = discriminant(_23);
        StorageDead(_23);
        goto -> bb86;
    }

    bb14: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_46);
        _46 = {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
        _39 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18}>(move _40, move _46) -> [return: bb15, unwind: bb93];
    }

    bb15: {
        StorageDead(_46);
        StorageDead(_40);
        _38 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _39) -> [return: bb16, unwind: bb93];
    }

    bb16: {
        StorageDead(_39);
        _47 = discriminant(_38);
        switchInt(move _47) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_51);
        _51 = move ((_38 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _37 = move _51;
        StorageDead(_51);
        _204 = discriminant(_38);
        StorageDead(_38);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &(*_1);
        StorageLive(_57);
        _57 = &mut (*_2);
        StorageLive(_58);
        _58 = &(*_6);
        StorageLive(_59);
        _59 = &mut (*_4);
        StorageLive(_60);
        _60 = &mut (*_5);
        _55 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, UpdateReserveConfigBumps>>::try_accounts(move _56, move _57, move _58, move _59, move _60) -> [return: bb20, unwind: bb93];
    }

    bb18: {
        StorageLive(_48);
        _48 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _50) -> [return: bb19, unwind: bb106];
    }

    bb19: {
        StorageDead(_50);
        StorageDead(_48);
        _226 = discriminant(_38);
        StorageDead(_38);
        goto -> bb85;
    }

    bb20: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_61);
        _61 = {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
        _54 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18}>(move _55, move _61) -> [return: bb21, unwind: bb93];
    }

    bb21: {
        StorageDead(_61);
        StorageDead(_55);
        _53 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _54) -> [return: bb22, unwind: bb93];
    }

    bb22: {
        StorageDead(_54);
        _62 = discriminant(_53);
        switchInt(move _62) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_66);
        _66 = move ((_53 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _52 = move _66;
        StorageDead(_66);
        _206 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_1);
        StorageLive(_72);
        _72 = &mut (*_2);
        StorageLive(_73);
        _73 = &(*_6);
        StorageLive(_74);
        _74 = &mut (*_4);
        StorageLive(_75);
        _75 = &mut (*_5);
        _70 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, UpdateReserveConfigBumps>>::try_accounts(move _71, move _72, move _73, move _74, move _75) -> [return: bb26, unwind: bb93];
    }

    bb24: {
        StorageLive(_63);
        _63 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _65) -> [return: bb25, unwind: bb105];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_63);
        _224 = discriminant(_53);
        StorageDead(_53);
        goto -> bb84;
    }

    bb26: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_76);
        _76 = {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18};
        _69 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_update_reserve_config.rs:64:10: 64:18}>(move _70, move _76) -> [return: bb27, unwind: bb93];
    }

    bb27: {
        StorageDead(_76);
        StorageDead(_70);
        _68 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _69) -> [return: bb28, unwind: bb93];
    }

    bb28: {
        StorageDead(_69);
        _77 = discriminant(_68);
        switchInt(move _77) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_81);
        _81 = move ((_68 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _67 = move _81;
        StorageDead(_81);
        _208 = discriminant(_68);
        StorageDead(_68);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_22;
        _83 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _84) -> [return: bb32, unwind: bb93];
    }

    bb30: {
        StorageLive(_78);
        _78 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_80);
        _80 = move _78;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _80) -> [return: bb31, unwind: bb104];
    }

    bb31: {
        StorageDead(_80);
        StorageDead(_78);
        _222 = discriminant(_68);
        StorageDead(_68);
        goto -> bb83;
    }

    bb32: {
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _7;
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_52;
        _92 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _93) -> [return: bb33, unwind: bb93];
    }

    bb33: {
        StorageDead(_93);
        _91 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _92) -> [return: bb34, unwind: bb93];
    }

    bb34: {
        _191 = const true;
        _192 = const true;
        StorageDead(_92);
        _94 = discriminant(_91);
        switchInt(move _94) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_98);
        _98 = move ((_91 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _90 = move _98;
        StorageDead(_98);
        _89 = &_90;
        _88 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _89) -> [return: bb38, unwind: bb92];
    }

    bb36: {
        StorageLive(_95);
        _95 = move ((_91 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_97);
        _97 = move _95;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _97) -> [return: bb37, unwind: bb103];
    }

    bb37: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb98;
    }

    bb38: {
        StorageDead(_89);
        _87 = ((*_88).2: anchor_lang::prelude::Pubkey);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_37;
        _104 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::load(move _105) -> [return: bb39, unwind: bb92];
    }

    bb39: {
        StorageDead(_105);
        _103 = <std::result::Result<Ref<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _104) -> [return: bb40, unwind: bb92];
    }

    bb40: {
        _196 = const true;
        _197 = const true;
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_103 as Continue).0: std::cell::Ref<'_, state::global_config::GlobalConfig>);
        _102 = move _110;
        StorageDead(_110);
        _101 = &_102;
        _100 = <Ref<'_, global_config::GlobalConfig> as Deref>::deref(move _101) -> [return: bb44, unwind: bb91];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb102];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_87);
        StorageDead(_86);
        _218 = discriminant(_103);
        _196 = const false;
        _197 = const false;
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        drop(_90) -> [return: bb98, unwind: bb103];
    }

    bb44: {
        StorageDead(_101);
        _99 = ((*_100).0: anchor_lang::prelude::Pubkey);
        _85 = allowed_signer_update_reserve_config(move _86, move _87, move _99) -> [return: bb45, unwind: bb91];
    }

    bb45: {
        StorageDead(_99);
        StorageDead(_87);
        StorageDead(_86);
        drop(_102) -> [return: bb95, unwind: bb102];
    }

    bb46: {
        switchInt(move _111) -> [0: bb51, otherwise: bb47];
    }

    bb47: {
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = ConstraintAddress;
        _117 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _118) -> [return: bb48, unwind: bb93];
    }

    bb48: {
        StorageDead(_118);
        _116 = anchor_lang::error::Error::with_account_name::<&str>(move _117, const "signer") -> [return: bb49, unwind: bb93];
    }

    bb49: {
        StorageDead(_117);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _83;
        StorageLive(_121);
        _121 = _85;
        _119 = (move _120, move _121);
        StorageDead(_121);
        StorageDead(_120);
        _115 = anchor_lang::error::Error::with_pubkeys(move _116, move _119) -> [return: bb50, unwind: bb93];
    }

    bb50: {
        StorageDead(_119);
        StorageDead(_116);
        _0 = std::result::Result::<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error>::Err(move _115);
        StorageDead(_115);
        StorageDead(_111);
        goto -> bb82;
    }

    bb51: {
        StorageDead(_113);
        StorageDead(_112);
        _82 = const ();
        StorageDead(_111);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _189 = const _;
        _127 = &(*_189);
        _126 = &(*_127);
        _125 = move _126 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_126);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_1;
        _190 = deref_copy (*_132);
        _131 = &(*_190);
        _124 = anchor_lang::prelude::Pubkey::find_program_address(move _125, move _131) -> [return: bb52, unwind: bb93];
    }

    bb52: {
        StorageDead(_131);
        StorageDead(_125);
        StorageLive(_122);
        _122 = (_124.0: anchor_lang::prelude::Pubkey);
        StorageLive(_123);
        _123 = (_124.1: u8);
        StorageDead(_132);
        StorageDead(_127);
        StorageDead(_124);
        StorageLive(_133);
        _133 = _123;
        ((*_4).0: u8) = move _133;
        StorageDead(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_37;
        _137 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Key>::key(move _138) -> [return: bb53, unwind: bb93];
    }

    bb53: {
        _136 = &_137;
        StorageDead(_138);
        StorageLive(_139);
        _139 = &_122;
        _135 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _136, move _139) -> [return: bb54, unwind: bb93];
    }

    bb54: {
        switchInt(move _135) -> [0: bb60, otherwise: bb55];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = ConstraintSeeds;
        _143 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _144) -> [return: bb56, unwind: bb93];
    }

    bb56: {
        StorageDead(_144);
        _142 = anchor_lang::error::Error::with_account_name::<&str>(move _143, const "global_config") -> [return: bb57, unwind: bb93];
    }

    bb57: {
        _195 = const true;
        StorageDead(_143);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_37;
        _146 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Key>::key(move _147) -> [return: bb58, unwind: bb101];
    }

    bb58: {
        StorageDead(_147);
        StorageLive(_148);
        _148 = _122;
        _145 = (move _146, move _148);
        StorageDead(_148);
        StorageDead(_146);
        _195 = const false;
        _141 = anchor_lang::error::Error::with_pubkeys(move _142, move _145) -> [return: bb59, unwind: bb101];
    }

    bb59: {
        StorageDead(_145);
        _195 = const false;
        StorageDead(_142);
        _0 = std::result::Result::<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error>::Err(move _141);
        StorageDead(_141);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb81;
    }

    bb60: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        _134 = const ();
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_67;
        _152 = &(*_153);
        _151 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _152) -> [return: bb61, unwind: bb93];
    }

    bb61: {
        StorageDead(_152);
        _150 = ((*_151).6: bool);
        switchInt(move _150) -> [0: bb62, otherwise: bb65];
    }

    bb62: {
        StorageDead(_153);
        StorageDead(_151);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = ConstraintMut;
        _156 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _157) -> [return: bb63, unwind: bb93];
    }

    bb63: {
        StorageDead(_157);
        _155 = anchor_lang::error::Error::with_account_name::<&str>(move _156, const "reserve") -> [return: bb64, unwind: bb93];
    }

    bb64: {
        StorageDead(_156);
        _0 = std::result::Result::<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error>::Err(move _155);
        StorageDead(_155);
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb81;
    }

    bb65: {
        StorageDead(_153);
        StorageDead(_151);
        _149 = const ();
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_67;
        _164 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _165) -> [return: bb66, unwind: bb93];
    }

    bb66: {
        StorageDead(_165);
        _163 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _164) -> [return: bb67, unwind: bb93];
    }

    bb67: {
        _193 = const true;
        _194 = const true;
        StorageDead(_164);
        _166 = discriminant(_163);
        switchInt(move _166) -> [0: bb68, 1: bb69, otherwise: bb5];
    }

    bb68: {
        StorageLive(_170);
        _170 = move ((_163 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _162 = move _170;
        StorageDead(_170);
        _161 = &_162;
        _160 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _161) -> [return: bb71, unwind: bb90];
    }

    bb69: {
        StorageLive(_167);
        _167 = move ((_163 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb70, unwind: bb99];
    }

    bb70: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_161);
        _216 = discriminant(_163);
        _193 = const false;
        _194 = const false;
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        goto -> bb80;
    }

    bb71: {
        StorageDead(_161);
        _159 = ((*_160).2: anchor_lang::prelude::Pubkey);
        drop(_162) -> [return: bb97, unwind: bb99];
    }

    bb72: {
        StorageDead(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_159;
        StorageLive(_175);
        _175 = &_171;
        _173 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _174, move _175) -> [return: bb73, unwind: bb93];
    }

    bb73: {
        switchInt(move _173) -> [0: bb78, otherwise: bb74];
    }

    bb74: {
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = ConstraintHasOne;
        _179 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _180) -> [return: bb75, unwind: bb93];
    }

    bb75: {
        StorageDead(_180);
        _178 = anchor_lang::error::Error::with_account_name::<&str>(move _179, const "reserve") -> [return: bb76, unwind: bb93];
    }

    bb76: {
        StorageDead(_179);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _159;
        StorageLive(_183);
        _183 = _171;
        _181 = (move _182, move _183);
        StorageDead(_183);
        StorageDead(_182);
        _177 = anchor_lang::error::Error::with_pubkeys(move _178, move _181) -> [return: bb77, unwind: bb93];
    }

    bb77: {
        StorageDead(_181);
        StorageDead(_178);
        _0 = std::result::Result::<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error>::Err(move _177);
        StorageDead(_177);
        StorageDead(_173);
        StorageDead(_171);
        goto -> bb80;
    }

    bb78: {
        StorageDead(_175);
        StorageDead(_174);
        _158 = const ();
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_184);
        StorageLive(_185);
        _185 = move _22;
        StorageLive(_186);
        _186 = move _37;
        StorageLive(_187);
        _187 = move _52;
        StorageLive(_188);
        _188 = move _67;
        _184 = handlers::handler_update_reserve_config::UpdateReserveConfig::<'_> { signer: move _185, global_config: move _186, lending_market: move _187, reserve: move _188 };
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_185);
        _0 = std::result::Result::<handlers::handler_update_reserve_config::UpdateReserveConfig<'_>, anchor_lang::error::Error>::Ok(move _184);
        StorageDead(_184);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_67);
        StorageDead(_52);
        StorageDead(_37);
        StorageDead(_22);
        StorageDead(_9);
        drop(_8) -> [return: bb79, unwind: bb94];
    }

    bb79: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb89;
    }

    bb80: {
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb83;
    }

    bb82: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_67);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_52);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_37);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_22);
        StorageDead(_9);
        drop(_8) -> [return: bb87, unwind: bb94];
    }

    bb87: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_6);
        goto -> bb89;
    }

    bb89: {
        return;
    }

    bb90 (cleanup): {
        drop(_162) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_102) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_90) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_8) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        resume;
    }

    bb95: {
        _210 = discriminant(_103);
        _196 = const false;
        _197 = const false;
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        drop(_90) -> [return: bb96, unwind: bb103];
    }

    bb96: {
        _212 = discriminant(_91);
        _191 = const false;
        _192 = const false;
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_83;
        StorageLive(_113);
        _113 = &_85;
        _111 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _112, move _113) -> [return: bb46, unwind: bb93];
    }

    bb97: {
        _214 = discriminant(_163);
        _193 = const false;
        _194 = const false;
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_52;
        _171 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _172) -> [return: bb72, unwind: bb93];
    }

    bb98: {
        _220 = discriminant(_91);
        _191 = const false;
        _192 = const false;
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        goto -> bb82;
    }

    bb99 (cleanup): {
        _230 = discriminant(_163);
        goto -> bb93;
    }

    bb100 (cleanup): {
        drop(_142) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_195) -> [0: bb93, otherwise: bb100];
    }

    bb102 (cleanup): {
        _231 = discriminant(_103);
        goto -> bb92;
    }

    bb103 (cleanup): {
        _232 = discriminant(_91);
        goto -> bb93;
    }

    bb104 (cleanup): {
        _233 = discriminant(_68);
        goto -> bb93;
    }

    bb105 (cleanup): {
        _234 = discriminant(_53);
        goto -> bb93;
    }

    bb106 (cleanup): {
        _235 = discriminant(_38);
        goto -> bb93;
    }

    bb107 (cleanup): {
        _236 = discriminant(_23);
        goto -> bb93;
    }

    bb108 (cleanup): {
        _238 = discriminant(_11);
        goto -> bb94;
    }
}
