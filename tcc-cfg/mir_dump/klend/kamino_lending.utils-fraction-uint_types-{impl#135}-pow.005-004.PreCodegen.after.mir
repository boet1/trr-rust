// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::pow` after PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::pow(_1: uint_types::U128, _2: uint_types::U128) -> uint_types::U128 {
    debug self => _1;
    debug expon => _2;
    let mut _0: utils::fraction::uint_types::U128;
    let _3: ();
    let mut _4: bool;
    let mut _5: &utils::fraction::uint_types::U128;
    let mut _6: !;
    let _7: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:995:19: 995:30};
    let _12: ();
    let mut _13: ();
    let mut _14: bool;
    let mut _15: &utils::fraction::uint_types::U128;
    let mut _16: &utils::fraction::uint_types::U128;
    let mut _17: bool;
    let mut _18: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:995:19: 995:30};
    let mut _19: (&utils::fraction::uint_types::U128,);
    let mut _20: &utils::fraction::uint_types::U128;
    let _21: &utils::fraction::uint_types::U128;
    let mut _22: utils::fraction::uint_types::U128;
    let mut _23: utils::fraction::uint_types::U128;
    let mut _24: utils::fraction::uint_types::U128;
    let mut _25: utils::fraction::uint_types::U128;
    let mut _26: utils::fraction::uint_types::U128;
    let mut _27: utils::fraction::uint_types::U128;
    let mut _28: utils::fraction::uint_types::U128;
    let mut _29: utils::fraction::uint_types::U128;
    let mut _30: utils::fraction::uint_types::U128;
    let mut _31: utils::fraction::uint_types::U128;
    let mut _32: utils::fraction::uint_types::U128;
    let mut _33: u64;
    let _34: usize;
    let mut _35: (usize, bool);
    let mut _36: usize;
    let mut _37: bool;
    let mut _38: u64;
    let mut _39: u64;
    let mut _40: u32;
    let mut _41: bool;
    let _42: usize;
    let mut _43: (usize, bool);
    let mut _44: usize;
    let mut _45: bool;
    let mut _46: utils::fraction::uint_types::U128;
    let mut _47: utils::fraction::uint_types::U128;
    let mut _48: !;
    let _49: ();
    let mut _50: !;
    let mut _51: utils::fraction::uint_types::U128;
    let mut _52: utils::fraction::uint_types::U128;
    scope 1 {
        debug is_even => _7;
        let _8: utils::fraction::uint_types::U128;
        scope 2 {
            debug u_one => _8;
            let mut _9: utils::fraction::uint_types::U128;
            scope 3 {
                debug y => _9;
                let mut _10: utils::fraction::uint_types::U128;
                scope 4 {
                    debug n => _10;
                    let mut _11: utils::fraction::uint_types::U128;
                    scope 5 {
                        debug x => _11;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_2;
        _4 = uint_types::U128::is_zero(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        _0 = uint_types::U128::one() -> [return: bb24, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        _7 = {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:995:19: 995:30};
        StorageLive(_8);
        _8 = uint_types::U128::one() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_9);
        _9 = _8;
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = _1;
        StorageLive(_12);
        goto -> bb5;
    }

    bb5: {
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_10;
        StorageLive(_16);
        _16 = &_8;
        _14 = <uint_types::U128 as PartialOrd>::gt(move _15, move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _14) -> [0: bb22, otherwise: bb7];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_7;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_10;
        _20 = &(*_21);
        _19 = (move _20,);
        _17 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:995:19: 995:30} as Fn<(&uint_types::U128,)>>::call(move _18, move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _17) -> [0: bb12, otherwise: bb9];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _11;
        StorageLive(_24);
        _24 = _11;
        _22 = <uint_types::U128 as std::ops::Mul>::mul(move _23, move _24) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_23);
        _11 = move _22;
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _10;
        _25 = <uint_types::U128 as Shr<usize>>::shr(move _26, const 1_usize) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        _10 = move _25;
        StorageDead(_25);
        _13 = const ();
        goto -> bb21;
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _11;
        StorageLive(_29);
        _29 = _9;
        _27 = <uint_types::U128 as std::ops::Mul>::mul(move _28, move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_28);
        _9 = move _27;
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _11;
        StorageLive(_32);
        _32 = _11;
        _30 = <uint_types::U128 as std::ops::Mul>::mul(move _31, move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_31);
        _11 = move _30;
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        _35 = CheckedSub(const 2_usize, const 1_usize);
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_usize, const 1_usize) -> [success: bb15, unwind continue];
    }

    bb15: {
        _34 = move (_35.0: usize);
        _36 = Len((_10.0: [u64; 2]));
        _37 = Lt(_34, _36);
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _34) -> [success: bb16, unwind continue];
    }

    bb16: {
        _33 = (_10.0: [u64; 2])[_34];
        StorageLive(_38);
        StorageLive(_39);
        _39 = Not(const 0_u64);
        _40 = const 1_i32 as u32 (IntToInt);
        _41 = Lt(move _40, const 64_u32);
        assert(move _41, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb17, unwind continue];
    }

    bb17: {
        _38 = Shr(move _39, const 1_i32);
        StorageDead(_39);
        StorageLive(_42);
        _43 = CheckedSub(const 2_usize, const 1_usize);
        assert(!move (_43.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_usize, const 1_usize) -> [success: bb18, unwind continue];
    }

    bb18: {
        _42 = move (_43.0: usize);
        _44 = Len((_10.0: [u64; 2]));
        _45 = Lt(_42, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _42) -> [success: bb19, unwind continue];
    }

    bb19: {
        (_10.0: [u64; 2])[_42] = BitAnd(move _33, move _38);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_42);
        StorageDead(_34);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _10;
        _46 = <uint_types::U128 as Shr<usize>>::shr(move _47, const 1_usize) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_47);
        _10 = move _46;
        StorageDead(_46);
        _13 = const ();
        goto -> bb21;
    }

    bb21: {
        StorageDead(_17);
        StorageDead(_14);
        goto -> bb5;
    }

    bb22: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_49);
        _12 = const ();
        StorageDead(_49);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_51);
        _51 = _11;
        StorageLive(_52);
        _52 = _9;
        _0 = <uint_types::U128 as std::ops::Mul>::mul(move _51, move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb25;
    }

    bb24: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb25;
    }

    bb25: {
        return;
    }
}
