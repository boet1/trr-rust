// MIR for `last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\public.rs:455:9: 455:94>::from_iter` after PreCodegen

fn last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\public.rs:455:9: 455:94>::from_iter(_1: T) -> last_update::PriceStatusFlags {
    debug iterator => _1;
    let mut _0: state::last_update::PriceStatusFlags;
    let mut _2: state::last_update::PriceStatusFlags;
    let _3: ();
    let mut _4: &mut state::last_update::PriceStatusFlags;
    let mut _5: T;
    let mut _6: bool;
    scope 1 {
        debug result => _2;
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        StorageLive(_2);
        _2 = last_update::_::<impl last_update::PriceStatusFlags>::empty() -> [return: bb1, unwind: bb5];
    }

    bb1: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut _2;
        StorageLive(_5);
        _6 = const false;
        _5 = move _1;
        _3 = <last_update::PriceStatusFlags as Extend<last_update::PriceStatusFlags>>::extend::<T>(move _4, move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        _0 = _2;
        StorageDead(_2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}
