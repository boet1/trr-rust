// MIR for `state::<impl at programs\klend\src\state\mod.rs:146:27: 146:44>::deserialize_variant` before PreCodegen

fn state::<impl at programs\klend\src\state\mod.rs:146:27: 146:44>::deserialize_variant(_1: &mut R, _2: u8) -> std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> {
    debug reader => _1;
    debug variant_idx => _2;
    let mut _0: std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error>;
    let mut _3: state::UpdateLendingMarketConfigValue;
    let mut _4: bool;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, bool>;
    let mut _6: std::result::Result<bool, std::io::Error>;
    let mut _7: &mut R;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _12: bool;
    let mut _13: u8;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _15: std::result::Result<u8, std::io::Error>;
    let mut _16: &mut R;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _21: u8;
    let mut _22: [u8; 8];
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [u8; 8]>;
    let mut _24: std::result::Result<[u8; 8], std::io::Error>;
    let mut _25: &mut R;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _30: [u8; 8];
    let mut _31: u16;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _33: std::result::Result<u16, std::io::Error>;
    let mut _34: &mut R;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _39: u16;
    let mut _40: u64;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _42: std::result::Result<u64, std::io::Error>;
    let mut _43: &mut R;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _48: u64;
    let mut _49: u128;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u128>;
    let mut _51: std::result::Result<u128, std::io::Error>;
    let mut _52: &mut R;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _57: u128;
    let mut _58: anchor_lang::prelude::Pubkey;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _60: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _61: &mut R;
    let mut _62: isize;
    let _63: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _66: anchor_lang::prelude::Pubkey;
    let mut _67: state::lending_market::ElevationGroup;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::lending_market::ElevationGroup>;
    let mut _69: std::result::Result<state::lending_market::ElevationGroup, std::io::Error>;
    let mut _70: &mut R;
    let mut _71: isize;
    let _72: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _75: state::lending_market::ElevationGroup;
    let mut _76: [u8; 32];
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [u8; 32]>;
    let mut _78: std::result::Result<[u8; 32], std::io::Error>;
    let mut _79: &mut R;
    let mut _80: isize;
    let _81: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _84: [u8; 32];
    let mut _85: !;
    let mut _86: std::io::Error;
    let mut _87: std::io::ErrorKind;
    let mut _88: std::string::String;
    let _89: std::string::String;
    let mut _90: std::fmt::Arguments<'_>;
    let mut _91: &[&str];
    let mut _92: &[&str; 1];
    let _93: &[&str; 1];
    let _94: [&str; 1];
    let mut _95: &[core::fmt::rt::Argument<'_>];
    let mut _96: &[core::fmt::rt::Argument<'_>; 1];
    let _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: [core::fmt::rt::Argument<'_>; 1];
    let mut _99: core::fmt::rt::Argument<'_>;
    let mut _100: &u8;
    let _101: &u8;
    let mut _102: state::UpdateLendingMarketConfigValue;
    let mut _103: &[&str; 1];
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    scope 1 {
        debug return_value => _3;
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _27;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _30;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _36;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _39;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _45;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _48;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _54;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _57;
        scope 25 {
        }
    }
    scope 26 {
        debug residual => _63;
        scope 27 {
        }
    }
    scope 28 {
        debug val => _66;
        scope 29 {
        }
    }
    scope 30 {
        debug residual => _72;
        scope 31 {
        }
    }
    scope 32 {
        debug val => _75;
        scope 33 {
        }
    }
    scope 34 {
        debug residual => _81;
        scope 35 {
        }
    }
    scope 36 {
        debug val => _84;
        scope 37 {
        }
    }
    scope 38 {
        debug res => _89;
    }

    bb0: {
        StorageLive(_3);
        switchInt(_2) -> [0: bb2, 1: bb9, 2: bb15, 3: bb21, 4: bb27, 5: bb33, 6: bb39, 7: bb45, 8: bb51, otherwise: bb1];
    }

    bb1: {
        StorageLive(_86);
        StorageLive(_87);
        _87 = InvalidInput;
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _103 = const _;
        _93 = &(*_103);
        _92 = &(*_93);
        _91 = move _92 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_2;
        _100 = &(*_101);
        _99 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _100) -> [return: bb57, unwind continue];
    }

    bb2: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        _6 = <bool as BorshDeserialize>::deserialize_reader::<R>(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_7);
        _5 = <std::result::Result<bool, std::io::Error> as Try>::branch(move _6) -> [return: bb4, unwind: bb64];
    }

    bb4: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: bool);
        _4 = _12;
        StorageDead(_12);
        _3 = state::UpdateLendingMarketConfigValue::Bool(move _4);
        _104 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb61;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb8, unwind: bb73];
    }

    bb8: {
        StorageDead(_11);
        StorageDead(_9);
        _138 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb62;
    }

    bb9: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut (*_1);
        _15 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _16) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_16);
        _14 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _15) -> [return: bb11, unwind: bb64];
    }

    bb11: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: u8);
        _13 = _21;
        StorageDead(_21);
        _3 = state::UpdateLendingMarketConfigValue::U8(move _13);
        _106 = discriminant(_14);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb61;
    }

    bb13: {
        StorageLive(_18);
        _18 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _20) -> [return: bb14, unwind: bb72];
    }

    bb14: {
        StorageDead(_20);
        StorageDead(_18);
        _136 = discriminant(_14);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb62;
    }

    bb15: {
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut (*_1);
        _24 = <[u8; 8] as BorshDeserialize>::deserialize_reader::<R>(move _25) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_25);
        _23 = <std::result::Result<[u8; 8], std::io::Error> as Try>::branch(move _24) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb18, 1: bb19, otherwise: bb6];
    }

    bb18: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: [u8; 8]);
        _22 = _30;
        StorageDead(_30);
        _3 = state::UpdateLendingMarketConfigValue::U8Array(move _22);
        _108 = discriminant(_23);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb61;
    }

    bb19: {
        StorageLive(_27);
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _29) -> [return: bb20, unwind: bb71];
    }

    bb20: {
        StorageDead(_29);
        StorageDead(_27);
        _134 = discriminant(_23);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb62;
    }

    bb21: {
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut (*_1);
        _33 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _34) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_34);
        _32 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _33) -> [return: bb23, unwind: bb64];
    }

    bb23: {
        StorageDead(_33);
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb24, 1: bb25, otherwise: bb6];
    }

    bb24: {
        StorageLive(_39);
        _39 = ((_32 as Continue).0: u16);
        _31 = _39;
        StorageDead(_39);
        _3 = state::UpdateLendingMarketConfigValue::U16(move _31);
        _110 = discriminant(_32);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb61;
    }

    bb25: {
        StorageLive(_36);
        _36 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _38) -> [return: bb26, unwind: bb70];
    }

    bb26: {
        StorageDead(_38);
        StorageDead(_36);
        _132 = discriminant(_32);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb62;
    }

    bb27: {
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut (*_1);
        _42 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _43) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_43);
        _41 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _42) -> [return: bb29, unwind: bb64];
    }

    bb29: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb30, 1: bb31, otherwise: bb6];
    }

    bb30: {
        StorageLive(_48);
        _48 = ((_41 as Continue).0: u64);
        _40 = _48;
        StorageDead(_48);
        _3 = state::UpdateLendingMarketConfigValue::U64(move _40);
        _112 = discriminant(_41);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb61;
    }

    bb31: {
        StorageLive(_45);
        _45 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_47);
        _47 = move _45;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _47) -> [return: bb32, unwind: bb69];
    }

    bb32: {
        StorageDead(_47);
        StorageDead(_45);
        _130 = discriminant(_41);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb62;
    }

    bb33: {
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &mut (*_1);
        _51 = <u128 as BorshDeserialize>::deserialize_reader::<R>(move _52) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_52);
        _50 = <std::result::Result<u128, std::io::Error> as Try>::branch(move _51) -> [return: bb35, unwind: bb64];
    }

    bb35: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb36, 1: bb37, otherwise: bb6];
    }

    bb36: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: u128);
        _49 = _57;
        StorageDead(_57);
        _3 = state::UpdateLendingMarketConfigValue::U128(move _49);
        _114 = discriminant(_50);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb61;
    }

    bb37: {
        StorageLive(_54);
        _54 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _56) -> [return: bb38, unwind: bb68];
    }

    bb38: {
        StorageDead(_56);
        StorageDead(_54);
        _128 = discriminant(_50);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb62;
    }

    bb39: {
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut (*_1);
        _60 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _61) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_61);
        _59 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _60) -> [return: bb41, unwind: bb64];
    }

    bb41: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb42, 1: bb43, otherwise: bb6];
    }

    bb42: {
        StorageLive(_66);
        _66 = ((_59 as Continue).0: anchor_lang::prelude::Pubkey);
        _58 = _66;
        StorageDead(_66);
        _3 = state::UpdateLendingMarketConfigValue::Pubkey(move _58);
        _116 = discriminant(_59);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb61;
    }

    bb43: {
        StorageLive(_63);
        _63 = move ((_59 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _65) -> [return: bb44, unwind: bb67];
    }

    bb44: {
        StorageDead(_65);
        StorageDead(_63);
        _126 = discriminant(_59);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb62;
    }

    bb45: {
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut (*_1);
        _69 = <state::lending_market::ElevationGroup as BorshDeserialize>::deserialize_reader::<R>(move _70) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_70);
        _68 = <std::result::Result<state::lending_market::ElevationGroup, std::io::Error> as Try>::branch(move _69) -> [return: bb47, unwind: bb64];
    }

    bb47: {
        StorageDead(_69);
        _71 = discriminant(_68);
        switchInt(move _71) -> [0: bb48, 1: bb49, otherwise: bb6];
    }

    bb48: {
        StorageLive(_75);
        _75 = ((_68 as Continue).0: state::lending_market::ElevationGroup);
        _67 = _75;
        StorageDead(_75);
        _3 = state::UpdateLendingMarketConfigValue::ElevationGroup(move _67);
        _118 = discriminant(_68);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb61;
    }

    bb49: {
        StorageLive(_72);
        _72 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_74);
        _74 = move _72;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _74) -> [return: bb50, unwind: bb66];
    }

    bb50: {
        StorageDead(_74);
        StorageDead(_72);
        _124 = discriminant(_68);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb62;
    }

    bb51: {
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &mut (*_1);
        _78 = <[u8; 32] as BorshDeserialize>::deserialize_reader::<R>(move _79) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_79);
        _77 = <std::result::Result<[u8; 32], std::io::Error> as Try>::branch(move _78) -> [return: bb53, unwind: bb64];
    }

    bb53: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb54, 1: bb55, otherwise: bb6];
    }

    bb54: {
        StorageLive(_84);
        _84 = ((_77 as Continue).0: [u8; 32]);
        _76 = _84;
        StorageDead(_84);
        _3 = state::UpdateLendingMarketConfigValue::Name(move _76);
        _120 = discriminant(_77);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb61;
    }

    bb55: {
        StorageLive(_81);
        _81 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<state::UpdateLendingMarketConfigValue, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _83) -> [return: bb56, unwind: bb65];
    }

    bb56: {
        StorageDead(_83);
        StorageDead(_81);
        _122 = discriminant(_77);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb62;
    }

    bb57: {
        StorageDead(_100);
        _98 = [move _99];
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = move _96 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_96);
        _90 = Arguments::<'_>::new_v1(move _91, move _95) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_95);
        StorageDead(_91);
        _89 = format(move _90) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_90);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_93);
        _88 = move _89;
        StorageDead(_89);
        _86 = std::io::Error::new::<std::string::String>(move _87, move _88) -> [return: bb60, unwind: bb64];
    }

    bb60: {
        StorageDead(_88);
        StorageDead(_87);
        _0 = std::result::Result::<state::UpdateLendingMarketConfigValue, std::io::Error>::Err(move _86);
        StorageDead(_86);
        goto -> bb62;
    }

    bb61: {
        StorageLive(_102);
        _102 = move _3;
        _0 = std::result::Result::<state::UpdateLendingMarketConfigValue, std::io::Error>::Ok(move _102);
        StorageDead(_102);
        StorageDead(_3);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_3);
        goto -> bb63;
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        resume;
    }

    bb65 (cleanup): {
        _140 = discriminant(_77);
        goto -> bb64;
    }

    bb66 (cleanup): {
        _141 = discriminant(_68);
        goto -> bb64;
    }

    bb67 (cleanup): {
        _142 = discriminant(_59);
        goto -> bb64;
    }

    bb68 (cleanup): {
        _143 = discriminant(_50);
        goto -> bb64;
    }

    bb69 (cleanup): {
        _144 = discriminant(_41);
        goto -> bb64;
    }

    bb70 (cleanup): {
        _145 = discriminant(_32);
        goto -> bb64;
    }

    bb71 (cleanup): {
        _146 = discriminant(_23);
        goto -> bb64;
    }

    bb72 (cleanup): {
        _147 = discriminant(_14);
        goto -> bb64;
    }

    bb73 (cleanup): {
        _148 = discriminant(_5);
        goto -> bb64;
    }
}
