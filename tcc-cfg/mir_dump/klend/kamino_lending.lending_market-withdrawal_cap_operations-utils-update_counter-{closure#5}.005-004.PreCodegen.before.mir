// MIR for `update_counter::{closure#5}` before PreCodegen

fn update_counter::{closure#5}(_1: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:92:37: 92:39}) -> LendingError {
    debug caps => (*(_1.0: &state::reserve::WithdrawalCaps));
    debug requested_amount => (*(_1.1: &u64));
    let mut _0: LendingError;
    let _2: (&str, state::reserve::WithdrawalCaps, u64);
    let mut _3: &str;
    let mut _4: &str;
    let _5: &str;
    let _6: ();
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[&str; 2];
    let _11: &[&str; 2];
    let _12: [&str; 2];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let mut _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let mut _18: &&&str;
    let _19: &&&str;
    let _20: &&str;
    let mut _21: &[core::fmt::rt::Placeholder];
    let mut _22: &[core::fmt::rt::Placeholder; 1];
    let _23: &[core::fmt::rt::Placeholder; 1];
    let _24: [core::fmt::rt::Placeholder; 1];
    let mut _25: core::fmt::rt::Placeholder;
    let mut _26: core::fmt::rt::Alignment;
    let mut _27: core::fmt::rt::Count;
    let mut _28: core::fmt::rt::Count;
    let mut _29: core::fmt::rt::UnsafeArg;
    let mut _30: state::reserve::WithdrawalCaps;
    let _31: state::reserve::WithdrawalCaps;
    let _32: ();
    let _33: ();
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 2];
    let _37: &[&str; 2];
    let _38: [&str; 2];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &&state::reserve::WithdrawalCaps;
    let _45: &&state::reserve::WithdrawalCaps;
    let _46: &state::reserve::WithdrawalCaps;
    let mut _47: &[core::fmt::rt::Placeholder];
    let mut _48: &[core::fmt::rt::Placeholder; 1];
    let _49: &[core::fmt::rt::Placeholder; 1];
    let _50: [core::fmt::rt::Placeholder; 1];
    let mut _51: core::fmt::rt::Placeholder;
    let mut _52: core::fmt::rt::Alignment;
    let mut _53: core::fmt::rt::Count;
    let mut _54: core::fmt::rt::Count;
    let mut _55: core::fmt::rt::UnsafeArg;
    let mut _56: u64;
    let _57: u64;
    let _58: ();
    let _59: ();
    let mut _60: std::fmt::Arguments<'_>;
    let mut _61: &[&str];
    let mut _62: &[&str; 2];
    let _63: &[&str; 2];
    let _64: [&str; 2];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let mut _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let mut _70: &&u64;
    let _71: &&u64;
    let _72: &u64;
    let mut _73: &[core::fmt::rt::Placeholder];
    let mut _74: &[core::fmt::rt::Placeholder; 1];
    let _75: &[core::fmt::rt::Placeholder; 1];
    let _76: [core::fmt::rt::Placeholder; 1];
    let mut _77: core::fmt::rt::Placeholder;
    let mut _78: core::fmt::rt::Alignment;
    let mut _79: core::fmt::rt::Count;
    let mut _80: core::fmt::rt::Count;
    let mut _81: core::fmt::rt::UnsafeArg;
    let mut _85: &state::reserve::WithdrawalCaps;
    let mut _86: &state::reserve::WithdrawalCaps;
    let mut _87: &u64;
    let mut _88: &u64;
    scope 1 {
        debug tmp => _5;
        let mut _84: &[&str; 2];
        scope 2 {
        }
    }
    scope 3 {
        debug tmp => _31;
        let mut _83: &[&str; 2];
        scope 4 {
        }
    }
    scope 5 {
        debug tmp => _57;
        let mut _82: &[&str; 2];
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const "MathOverflow subbing {:?} and {:?}";
        StorageLive(_5);
        _5 = _4;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _84 = const _;
        _11 = &(*_84);
        _10 = &(*_11);
        _9 = move _10 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_5;
        _19 = &_20;
        _18 = &(*_19);
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<&&str>(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_18);
        _16 = [move _17];
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = move _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_14);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_27);
        _27 = core::fmt::rt::Count::Implied;
        StorageLive(_28);
        _28 = core::fmt::rt::Count::Implied;
        _25 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _26, const 4_u32, move _27, move _28) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_29);
        _29 = core::fmt::rt::UnsafeArg::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = Arguments::<'_>::new_v1_formatted(move _9, move _13, move _21, move _29) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_29);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_9);
        _7 = _print(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_7);
        _6 = const ();
        StorageDead(_6);
        _3 = _5;
        StorageDead(_5);
        StorageLive(_30);
        _85 = deref_copy (_1.0: &state::reserve::WithdrawalCaps);
        StorageLive(_31);
        _86 = deref_copy (_1.0: &state::reserve::WithdrawalCaps);
        _31 = (*_86);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _83 = const _;
        _37 = &(*_83);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_31;
        _45 = &_46;
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_debug::<&reserve::WithdrawalCaps>(move _44) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_53);
        _53 = core::fmt::rt::Count::Implied;
        StorageLive(_54);
        _54 = core::fmt::rt::Count::Implied;
        _51 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _52, const 4_u32, move _53, move _54) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        _50 = [move _51];
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = move _48 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_48);
        StorageLive(_55);
        _55 = core::fmt::rt::UnsafeArg::new() -> [return: bb8, unwind continue];
    }

    bb8: {
        _34 = Arguments::<'_>::new_v1_formatted(move _35, move _39, move _47, move _55) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_55);
        StorageDead(_47);
        StorageDead(_39);
        StorageDead(_35);
        _33 = _print(move _34) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_34);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        StorageDead(_33);
        _32 = const ();
        StorageDead(_32);
        _30 = _31;
        StorageDead(_31);
        StorageLive(_56);
        _87 = deref_copy (_1.1: &u64);
        StorageLive(_57);
        _88 = deref_copy (_1.1: &u64);
        _57 = (*_88);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _82 = const _;
        _63 = &(*_82);
        _62 = &(*_63);
        _61 = move _62 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_57;
        _71 = &_72;
        _70 = &(*_71);
        _69 = core::fmt::rt::Argument::<'_>::new_debug::<&u64>(move _70) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_70);
        _68 = [move _69];
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = move _66 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_79);
        _79 = core::fmt::rt::Count::Implied;
        StorageLive(_80);
        _80 = core::fmt::rt::Count::Implied;
        _77 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _78, const 4_u32, move _79, move _80) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_81);
        _81 = core::fmt::rt::UnsafeArg::new() -> [return: bb13, unwind continue];
    }

    bb13: {
        _60 = Arguments::<'_>::new_v1_formatted(move _61, move _65, move _73, move _81) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_81);
        StorageDead(_73);
        StorageDead(_65);
        StorageDead(_61);
        _59 = _print(move _60) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_60);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_59);
        _58 = const ();
        StorageDead(_58);
        _56 = _57;
        StorageDead(_57);
        _2 = (move _3, move _30, move _56);
        StorageDead(_56);
        StorageDead(_30);
        StorageDead(_3);
        StorageDead(_4);
        StorageDead(_2);
        _0 = LendingError::MathOverflow;
        return;
    }
}
