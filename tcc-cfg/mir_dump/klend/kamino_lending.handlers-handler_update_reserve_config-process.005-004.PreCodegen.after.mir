// MIR for `handlers::handler_update_reserve_config::process` after PreCodegen

fn handlers::handler_update_reserve_config::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_reserve_config::UpdateReserveConfig<'_>>, _2: state::UpdateConfigMode, _3: &[u8], _4: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug mode => _2;
    debug value => _3;
    debug skip_config_integrity_validation => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _6: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _17: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _25: &state::token_info::TokenInfo;
    let _26: &state::reserve::Reserve;
    let mut _27: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 3];
    let _38: &[&str; 3];
    let _39: [&str; 3];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 3];
    let _42: &[core::fmt::rt::Argument<'_>; 3];
    let _43: [core::fmt::rt::Argument<'_>; 3];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &anchor_lang::prelude::Pubkey;
    let _46: &anchor_lang::prelude::Pubkey;
    let _47: anchor_lang::prelude::Pubkey;
    let mut _48: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _49: core::fmt::rt::Argument<'_>;
    let mut _50: &&str;
    let _51: &&str;
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &state::UpdateConfigMode;
    let _54: &state::UpdateConfigMode;
    let _55: ();
    let mut _56: bool;
    let mut _57: &state::lending_market::LendingMarket;
    let _58: &state::lending_market::LendingMarket;
    let mut _59: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _60: bool;
    let mut _61: state::UpdateConfigMode;
    let mut _62: !;
    let mut _63: anchor_lang::error::Error;
    let mut _64: anchor_lang::error::AnchorError;
    let mut _65: std::string::String;
    let mut _66: &LendingError;
    let _67: LendingError;
    let mut _68: u32;
    let mut _69: LendingError;
    let mut _70: std::string::String;
    let mut _71: &LendingError;
    let _72: LendingError;
    let mut _73: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _74: anchor_lang::error::ErrorOrigin;
    let mut _75: anchor_lang::error::Source;
    let mut _76: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _79: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _85: ();
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _87: std::result::Result<(), anchor_lang::error::Error>;
    let mut _88: &mut state::reserve::Reserve;
    let mut _89: &mut state::reserve::Reserve;
    let mut _90: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _91: &anchor_lang::prelude::Clock;
    let _92: &anchor_lang::prelude::Clock;
    let mut _93: std::option::Option<utils::prices::GetPriceResult>;
    let mut _94: u16;
    let mut _95: &state::lending_market::LendingMarket;
    let mut _96: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _102: ();
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _104: std::result::Result<(), anchor_lang::error::Error>;
    let mut _105: &mut state::reserve::Reserve;
    let mut _106: &mut state::reserve::Reserve;
    let mut _107: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _108: state::UpdateConfigMode;
    let mut _109: &[u8];
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _115: ();
    let mut _116: bool;
    let mut _118: bool;
    let mut _119: u64;
    let mut _120: &state::reserve::Reserve;
    let mut _121: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _122: u64;
    let mut _123: &state::lending_market::LendingMarket;
    let mut _124: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _125: bool;
    let mut _126: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _127: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _128: &state::reserve::ReserveLiquidity;
    let _129: &state::reserve::Reserve;
    let mut _130: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _131: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _132: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _133: u64;
    let mut _134: &state::reserve::Reserve;
    let mut _135: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _136: u64;
    let mut _137: &state::lending_market::LendingMarket;
    let mut _138: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _140: u64;
    let mut _141: &state::reserve::Reserve;
    let mut _142: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _144: u64;
    let mut _145: &state::reserve::Reserve;
    let mut _146: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _147: ();
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: !;
    let mut _152: anchor_lang::error::Error;
    let mut _153: anchor_lang::error::AnchorError;
    let mut _154: std::string::String;
    let mut _155: &LendingError;
    let _156: LendingError;
    let mut _157: u32;
    let mut _158: LendingError;
    let mut _159: std::string::String;
    let mut _160: &LendingError;
    let _161: LendingError;
    let mut _162: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _163: anchor_lang::error::ErrorOrigin;
    let mut _164: anchor_lang::error::Source;
    let mut _165: std::option::Option<anchor_lang::error::ComparedValues>;
    let _166: ();
    let mut _167: &str;
    let _168: &str;
    let _169: ();
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _171: std::result::Result<(), anchor_lang::error::Error>;
    let mut _172: &state::reserve::ReserveConfig;
    let _173: &state::reserve::ReserveConfig;
    let _174: &state::reserve::Reserve;
    let mut _175: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _176: &state::lending_market::LendingMarket;
    let _177: &state::lending_market::LendingMarket;
    let mut _178: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _179: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _180: anchor_lang::prelude::Pubkey;
    let mut _181: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _187: ();
    let mut _194: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>;
    let mut _195: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>;
    let mut _196: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>;
    let mut _197: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    scope 1 {
        debug reserve => _5;
        let _15: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _23: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        scope 6 {
            debug market => _15;
            let _24: &str;
            scope 11 {
                debug name => _24;
                let _34: std::string::String;
                let _77: anchor_lang::prelude::Clock;
                let _81: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _84: anchor_lang::prelude::Clock;
                let mut _191: &LendingError;
                let mut _192: &LendingError;
                let mut _193: &[&str; 3];
                scope 12 {
                    debug res => _34;
                }
                scope 13 {
                    debug clock => _77;
                    let _98: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _101: ();
                    let _111: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _114: ();
                    let _117: bool;
                    let _183: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _186: ();
                    let mut _190: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 18 {
                        debug residual => _98;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _101;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _111;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _114;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug reserve_is_used => _117;
                        let _139: bool;
                        scope 27 {
                            debug reserve_blocks_deposits => _139;
                            let _143: bool;
                            scope 28 {
                                debug reserve_blocks_borrows => _143;
                                let mut _188: &LendingError;
                                let mut _189: &LendingError;
                            }
                        }
                    }
                    scope 29 {
                        debug residual => _183;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _186;
                        scope 32 {
                        }
                    }
                }
                scope 14 {
                    debug residual => _81;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _84;
                    scope 17 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _194 = deref_copy (_1.1: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>);
        _9 = &((*_194).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb99];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = move ((_7 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _6 = move _14;
        StorageDead(_14);
        _5 = &mut _6;
        _198 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _195 = deref_copy (_1.1: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>);
        _18 = &((*_195).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _18) -> [return: bb7, unwind: bb98];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb105];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _220 = discriminant(_7);
        StorageDead(_7);
        goto -> bb92;
    }

    bb7: {
        StorageDead(_18);
        _16 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb8, unwind: bb98];
    }

    bb8: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_16 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _15 = move _23;
        StorageDead(_23);
        _200 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_5);
        _26 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _27) -> [return: bb12, unwind: bb97];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb104];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _218 = discriminant(_16);
        StorageDead(_16);
        goto -> bb91;
    }

    bb12: {
        StorageDead(_27);
        _25 = &(((*_26).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        _24 = token_info::TokenInfo::symbol(move _25) -> [return: bb13, unwind: bb97];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _193 = const _;
        _38 = &(*_193);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _196 = deref_copy (_1.1: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>);
        _48 = &((*_196).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _47 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _48) -> [return: bb14, unwind: bb97];
    }

    bb14: {
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _45) -> [return: bb15, unwind: bb97];
    }

    bb15: {
        StorageDead(_45);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_24;
        _50 = &(*_51);
        _49 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _50) -> [return: bb16, unwind: bb97];
    }

    bb16: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_2;
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_debug::<state::UpdateConfigMode>(move _53) -> [return: bb17, unwind: bb97];
    }

    bb17: {
        StorageDead(_53);
        _43 = [move _44, move _49, move _52];
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb18, unwind: bb97];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb19, unwind: bb97];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <std::string::String as Deref>::deref(move _31) -> [return: bb20, unwind: bb96];
    }

    bb20: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb21, unwind: bb96];
    }

    bb21: {
        StorageDead(_29);
        drop(_33) -> [return: bb22, unwind: bb97];
    }

    bb22: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_15;
        _58 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _59) -> [return: bb23, unwind: bb97];
    }

    bb23: {
        _57 = &(*_58);
        StorageDead(_59);
        _56 = state::lending_market::LendingMarket::is_immutable(move _57) -> [return: bb24, unwind: bb97];
    }

    bb24: {
        switchInt(move _56) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _2;
        _60 = is_update_reserve_config_mode_global_admin_only(move _61) -> [return: bb27, unwind: bb97];
    }

    bb26: {
        StorageDead(_57);
        StorageDead(_58);
        goto -> bb28;
    }

    bb27: {
        switchInt(move _60) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageDead(_61);
        _55 = const ();
        StorageDead(_60);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb34, unwind: bb97];
    }

    bb29: {
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _192 = const _;
        _66 = &(*_192);
        _65 = LendingError::name(move _66) -> [return: bb30, unwind: bb97];
    }

    bb30: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        _69 = LendingError::OperationNotPermittedMarketImmutable;
        _68 = <LendingError as Into<u32>>::into(move _69) -> [return: bb31, unwind: bb95];
    }

    bb31: {
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        _191 = const _;
        _71 = &(*_191);
        _70 = <LendingError as ToString>::to_string(move _71) -> [return: bb32, unwind: bb95];
    }

    bb32: {
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_reserve_config.rs", line: const 28_u32 };
        _74 = anchor_lang::error::ErrorOrigin::Source(move _75);
        StorageDead(_75);
        _73 = std::option::Option::<ErrorOrigin>::Some(move _74);
        StorageDead(_74);
        StorageLive(_76);
        _76 = std::option::Option::<ComparedValues>::None;
        _64 = anchor_lang::error::AnchorError { error_name: move _65, error_code_number: move _68, error_msg: move _70, error_origin: move _73, compared_values: move _76 };
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_65);
        _63 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _64) -> [return: bb33, unwind: bb97];
    }

    bb33: {
        StorageDead(_64);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _63);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb90;
    }

    bb34: {
        _78 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _79) -> [return: bb35, unwind: bb97];
    }

    bb35: {
        StorageDead(_79);
        _80 = discriminant(_78);
        switchInt(move _80) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_84);
        _84 = move ((_78 as Continue).0: anchor_lang::prelude::Clock);
        _77 = move _84;
        StorageDead(_84);
        _202 = discriminant(_78);
        StorageDead(_78);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &mut (*_5);
        _89 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _90) -> [return: bb39, unwind: bb97];
    }

    bb37: {
        StorageLive(_81);
        _81 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _83) -> [return: bb38, unwind: bb103];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_81);
        _216 = discriminant(_78);
        StorageDead(_78);
        goto -> bb89;
    }

    bb39: {
        _88 = &mut (*_89);
        StorageDead(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_77;
        _91 = &(*_92);
        StorageLive(_93);
        _93 = std::option::Option::<prices::GetPriceResult>::None;
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_15;
        _95 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _96) -> [return: bb40, unwind: bb97];
    }

    bb40: {
        StorageDead(_96);
        _94 = ((*_95).5: u16);
        _87 = lending_operations::refresh_reserve(move _88, move _91, move _93, move _94) -> [return: bb41, unwind: bb97];
    }

    bb41: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_88);
        _86 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _87) -> [return: bb42, unwind: bb97];
    }

    bb42: {
        StorageDead(_87);
        _97 = discriminant(_86);
        switchInt(move _97) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_101);
        _101 = ((_86 as Continue).0: ());
        _85 = _101;
        StorageDead(_101);
        _204 = discriminant(_86);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &mut (*_5);
        _106 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _107) -> [return: bb46, unwind: bb97];
    }

    bb44: {
        StorageLive(_98);
        _98 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _100) -> [return: bb45, unwind: bb102];
    }

    bb45: {
        StorageDead(_100);
        StorageDead(_98);
        _214 = discriminant(_86);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb89;
    }

    bb46: {
        _105 = &mut (*_106);
        StorageDead(_107);
        StorageLive(_108);
        _108 = _2;
        StorageLive(_109);
        _109 = &(*_3);
        _104 = lending_operations::update_reserve_config(move _105, move _108, move _109) -> [return: bb47, unwind: bb97];
    }

    bb47: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        _103 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _104) -> [return: bb48, unwind: bb97];
    }

    bb48: {
        StorageDead(_104);
        _110 = discriminant(_103);
        switchInt(move _110) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_114);
        _114 = ((_103 as Continue).0: ());
        _102 = _114;
        StorageDead(_114);
        _206 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _4;
        switchInt(move _116) -> [0: bb76, otherwise: bb52];
    }

    bb50: {
        StorageLive(_111);
        _111 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_113);
        _113 = move _111;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _113) -> [return: bb51, unwind: bb101];
    }

    bb51: {
        StorageDead(_113);
        StorageDead(_111);
        _212 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb89;
    }

    bb52: {
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &(*_5);
        _120 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _121) -> [return: bb53, unwind: bb97];
    }

    bb53: {
        StorageDead(_121);
        _119 = (((*_120).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_15;
        _123 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _124) -> [return: bb54, unwind: bb97];
    }

    bb54: {
        StorageDead(_124);
        _122 = ((*_123).25: u64);
        _118 = Gt(move _119, move _122);
        switchInt(move _118) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb60;
    }

    bb56: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_5);
        _129 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _130) -> [return: bb57, unwind: bb97];
    }

    bb57: {
        StorageDead(_130);
        _128 = &((*_129).5: state::reserve::ReserveLiquidity);
        _127 = ReserveLiquidity::total_borrow(move _128) -> [return: bb58, unwind: bb97];
    }

    bb58: {
        _126 = &_127;
        StorageDead(_128);
        StorageLive(_131);
        _190 = const _;
        _131 = &(*_190);
        _125 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _126, move _131) -> [return: bb59, unwind: bb97];
    }

    bb59: {
        switchInt(move _125) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        _117 = const true;
        goto -> bb64;
    }

    bb61: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &(*_5);
        _134 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _135) -> [return: bb62, unwind: bb97];
    }

    bb62: {
        StorageDead(_135);
        _133 = (((*_134).7: state::reserve::ReserveCollateral).1: u64);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_15;
        _137 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _138) -> [return: bb63, unwind: bb97];
    }

    bb63: {
        StorageDead(_138);
        _136 = ((*_137).25: u64);
        _117 = Gt(move _133, move _136);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_125);
        StorageDead(_118);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &(*_5);
        _141 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _142) -> [return: bb65, unwind: bb97];
    }

    bb65: {
        StorageDead(_142);
        _140 = (((*_141).9: state::reserve::ReserveConfig).17: u64);
        _139 = Eq(move _140, const 0_u64);
        StorageDead(_140);
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &(*_5);
        _145 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _146) -> [return: bb66, unwind: bb97];
    }

    bb66: {
        StorageDead(_146);
        _144 = (((*_145).9: state::reserve::ReserveConfig).18: u64);
        _143 = Eq(move _144, const 0_u64);
        StorageDead(_144);
        StorageDead(_145);
        StorageLive(_147);
        StorageLive(_148);
        _148 = _117;
        switchInt(move _148) -> [0: bb67, otherwise: bb69];
    }

    bb67: {
        StorageLive(_149);
        _149 = _139;
        switchInt(move _149) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        StorageLive(_150);
        _150 = _143;
        switchInt(move _150) -> [0: bb69, otherwise: bb74];
    }

    bb69: {
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _189 = const _;
        _155 = &(*_189);
        _154 = LendingError::name(move _155) -> [return: bb70, unwind: bb97];
    }

    bb70: {
        StorageDead(_155);
        StorageLive(_157);
        StorageLive(_158);
        _158 = LendingError::InvalidConfig;
        _157 = <LendingError as Into<u32>>::into(move _158) -> [return: bb71, unwind: bb94];
    }

    bb71: {
        StorageDead(_158);
        StorageLive(_159);
        StorageLive(_160);
        _188 = const _;
        _160 = &(*_188);
        _159 = <LendingError as ToString>::to_string(move _160) -> [return: bb72, unwind: bb94];
    }

    bb72: {
        StorageDead(_160);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_reserve_config.rs", line: const 47_u32 };
        _163 = anchor_lang::error::ErrorOrigin::Source(move _164);
        StorageDead(_164);
        _162 = std::option::Option::<ErrorOrigin>::Some(move _163);
        StorageDead(_163);
        StorageLive(_165);
        _165 = std::option::Option::<ComparedValues>::None;
        _153 = anchor_lang::error::AnchorError { error_name: move _154, error_code_number: move _157, error_msg: move _159, error_origin: move _162, compared_values: move _165 };
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_154);
        _152 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _153) -> [return: bb73, unwind: bb97];
    }

    bb73: {
        StorageDead(_153);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _152);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        StorageDead(_139);
        StorageDead(_117);
        goto -> bb88;
    }

    bb74: {
        _147 = const ();
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = const "WARNING! Skipping validation of the config";
        _167 = &(*_168);
        _166 = solana_program::log::sol_log(move _167) -> [return: bb75, unwind: bb97];
    }

    bb75: {
        StorageDead(_167);
        StorageDead(_168);
        StorageDead(_166);
        _115 = const ();
        StorageDead(_143);
        StorageDead(_139);
        StorageDead(_117);
        goto -> bb85;
    }

    bb76: {
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_5);
        _174 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _175) -> [return: bb77, unwind: bb97];
    }

    bb77: {
        StorageDead(_175);
        _173 = &((*_174).9: state::reserve::ReserveConfig);
        _172 = &(*_173);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_15;
        _178 = &(*_179);
        _177 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _178) -> [return: bb78, unwind: bb97];
    }

    bb78: {
        _176 = &(*_177);
        StorageDead(_178);
        StorageLive(_180);
        StorageLive(_181);
        _197 = deref_copy (_1.1: &mut handlers::handler_update_reserve_config::UpdateReserveConfig<'_>);
        _181 = &((*_197).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _180 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _181) -> [return: bb79, unwind: bb97];
    }

    bb79: {
        StorageDead(_181);
        _171 = validate_reserve_config_integrity(move _172, move _176, move _180) -> [return: bb80, unwind: bb97];
    }

    bb80: {
        StorageDead(_180);
        StorageDead(_176);
        StorageDead(_172);
        _170 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _171) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        StorageDead(_171);
        _182 = discriminant(_170);
        switchInt(move _182) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_186);
        _186 = ((_170 as Continue).0: ());
        _169 = _186;
        StorageDead(_186);
        _208 = discriminant(_170);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_169);
        _115 = const ();
        goto -> bb85;
    }

    bb83: {
        StorageLive(_183);
        _183 = move ((_170 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_185);
        _185 = move _183;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _185) -> [return: bb84, unwind: bb100];
    }

    bb84: {
        StorageDead(_185);
        StorageDead(_183);
        _210 = discriminant(_170);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_169);
        goto -> bb88;
    }

    bb85: {
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_187);
        _187 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _187);
        StorageDead(_187);
        StorageDead(_77);
        StorageDead(_24);
        drop(_15) -> [return: bb86, unwind: bb98];
    }

    bb86: {
        StorageDead(_15);
        drop(_6) -> [return: bb87, unwind: bb99];
    }

    bb87: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb93;
    }

    bb88: {
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_77);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_24);
        drop(_15) -> [return: bb91, unwind: bb98];
    }

    bb91: {
        StorageDead(_15);
        drop(_6) -> [return: bb92, unwind: bb99];
    }

    bb92: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb93;
    }

    bb93: {
        return;
    }

    bb94 (cleanup): {
        drop(_154) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_65) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_33) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_15) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_6) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        resume;
    }

    bb100 (cleanup): {
        _222 = discriminant(_170);
        goto -> bb97;
    }

    bb101 (cleanup): {
        _223 = discriminant(_103);
        goto -> bb97;
    }

    bb102 (cleanup): {
        _224 = discriminant(_86);
        goto -> bb97;
    }

    bb103 (cleanup): {
        _225 = discriminant(_78);
        goto -> bb97;
    }

    bb104 (cleanup): {
        _226 = discriminant(_16);
        goto -> bb98;
    }

    bb105 (cleanup): {
        _227 = discriminant(_7);
        goto -> bb99;
    }
}
