// MIR for `maybe_null_pk` before PreCodegen

fn maybe_null_pk(_1: anchor_lang::prelude::Pubkey) -> std::option::Option<anchor_lang::prelude::Pubkey> {
    debug pubkey => _1;
    let mut _0: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _2: bool;
    let mut _3: &anchor_lang::prelude::Pubkey;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let _5: anchor_lang::prelude::Pubkey;
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let _9: anchor_lang::prelude::Pubkey;
    let mut _10: anchor_lang::prelude::Pubkey;
    let mut _11: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &_1;
        StorageLive(_4);
        StorageLive(_5);
        _5 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _2 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb6;
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_1;
        StorageLive(_8);
        _11 = const _;
        _8 = &(*_11);
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _6) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_7);
        _0 = std::option::Option::<anchor_lang::prelude::Pubkey>::None;
        goto -> bb8;
    }

    bb7: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        _10 = _1;
        _0 = std::option::Option::<anchor_lang::prelude::Pubkey>::Some(move _10);
        StorageDead(_10);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_6);
        StorageDead(_2);
        return;
    }
}
