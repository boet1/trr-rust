// MIR for `get_price` before PreCodegen

fn get_price(_1: &token_info::TokenInfo, _2: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _3: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _4: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _5: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _6: &anchor_lang::prelude::Clock) -> std::result::Result<std::option::Option<prices::GetPriceResult>, anchor_lang::error::Error> {
    debug token_info => _1;
    debug pyth_price_account_info => _2;
    debug switchboard_price_feed_info => _3;
    debug switchboard_price_twap_info => _4;
    debug scope_prices_info => _5;
    debug clock => _6;
    let mut _0: std::result::Result<std::option::Option<utils::prices::GetPriceResult>, anchor_lang::error::Error>;
    let _7: utils::prices::types::TimestampedPriceWithTwap;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, utils::prices::types::TimestampedPriceWithTwap>;
    let mut _9: std::result::Result<utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error>;
    let mut _10: &state::token_info::TokenInfo;
    let mut _11: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _12: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _14: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _15: &anchor_lang::prelude::Clock;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: utils::prices::types::TimestampedPriceWithTwap;
    let mut _21: std::option::Option<utils::prices::GetPriceResult>;
    let mut _22: utils::prices::types::TimestampedPriceWithTwap;
    let mut _23: &state::token_info::TokenInfo;
    let mut _24: i64;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    scope 1 {
        debug price => _7;
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _25 = const false;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = _2;
        StorageLive(_12);
        _12 = _3;
        StorageLive(_13);
        _13 = _4;
        StorageLive(_14);
        _14 = _5;
        StorageLive(_15);
        _15 = &(*_6);
        _9 = get_most_recent_price_and_twap(move _10, move _11, move _12, move _13, move _14, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<TimestampedPriceWithTwap, anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_9);
        _16 = discriminant(_8);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = move ((_8 as Continue).0: utils::prices::types::TimestampedPriceWithTwap);
        _25 = const true;
        _7 = move _20;
        StorageDead(_20);
        _26 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_21);
        StorageLive(_22);
        _25 = const false;
        _22 = move _7;
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = ((*_6).4: i64);
        _21 = get_validated_price(move _22, move _23, move _24) -> [return: bb7, unwind: bb11];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<std::option::Option<prices::GetPriceResult>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        _28 = discriminant(_8);
        StorageDead(_8);
        _25 = const false;
        StorageDead(_7);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        _0 = std::result::Result::<std::option::Option<prices::GetPriceResult>, anchor_lang::error::Error>::Ok(move _21);
        StorageDead(_21);
        _25 = const false;
        StorageDead(_7);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_25) -> [0: bb9, otherwise: bb10];
    }

    bb12 (cleanup): {
        _30 = discriminant(_8);
        goto -> bb9;
    }
}
