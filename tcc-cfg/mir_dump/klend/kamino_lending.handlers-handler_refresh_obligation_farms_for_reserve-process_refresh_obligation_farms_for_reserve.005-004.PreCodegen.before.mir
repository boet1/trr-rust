// MIR for `process_refresh_obligation_farms_for_reserve` before PreCodegen

fn process_refresh_obligation_farms_for_reserve(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug mode => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>>;
    let _7: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: state::reserve::ReserveFarmKind;
    let mut _14: std::result::Result<state::reserve::ReserveFarmKind, num_enum::TryFromPrimitiveError<state::reserve::ReserveFarmKind>>;
    let mut _15: u8;
    let mut _16: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let _17: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let mut _18: state::reserve::ReserveFarmKind;
    let mut _19: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug farm_kind => _13;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_1;
        _6 = &(*_7);
        _5 = utils::constraints::check_remaining_accounts::<handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _20 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        _14 = <u8 as TryInto<reserve::ReserveFarmKind>>::try_into(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _22 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb10;
    }

    bb7: {
        StorageDead(_15);
        _13 = std::result::Result::<reserve::ReserveFarmKind, TryFromPrimitiveError<reserve::ReserveFarmKind>>::unwrap(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _19 = deref_copy (_1.1: &mut handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>);
        _17 = &((*_19).1: handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>);
        _16 = &(*_17);
        StorageLive(_18);
        _18 = _13;
        _0 = handlers::handler_refresh_obligation_farms_for_reserve::process_impl_refresh_obligation_farms_for_reserve(move _16, move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_17);
        goto -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        _24 = discriminant(_4);
        goto -> bb11;
    }
}
