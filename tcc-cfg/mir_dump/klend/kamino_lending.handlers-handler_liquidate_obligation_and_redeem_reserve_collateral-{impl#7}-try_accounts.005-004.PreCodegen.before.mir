// MIR for `handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:338:10: 338:18>::try_accounts` before PreCodegen

fn handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:338:10: 338:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut LiquidateObligationAndRedeemReserveCollateralV2Bumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>, anchor_lang::error::Error>;
    let _6: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>>;
    let mut _8: std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: &[u8];
    let mut _12: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _13: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>>;
    let mut _22: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _25: &[u8];
    let mut _26: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _27: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>>;
    let mut _36: std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error>;
    let mut _37: &anchor_lang::prelude::Pubkey;
    let mut _38: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _39: &[u8];
    let mut _40: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _41: &mut handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps;
    let mut _42: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, farms::program::Farms>>;
    let mut _50: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _51: std::result::Result<anchor_lang::prelude::Program<'_, farms::program::Farms>, anchor_lang::error::Error>;
    let mut _52: &anchor_lang::prelude::Pubkey;
    let mut _53: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _54: &[u8];
    let mut _55: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2Bumps;
    let mut _56: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _57: {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:338:10: 338:18};
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _63: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _64: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>;
    let mut _65: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _66: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
    let mut _67: anchor_lang::prelude::Program<'_, farms::program::Farms>;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    scope 1 {
        debug liquidation_accounts => _6;
        let _20: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
        let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _33: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
        scope 6 {
            debug collateral_farms_accounts => _20;
            let _34: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
            let _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _47: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>;
            scope 11 {
                debug debt_farms_accounts => _34;
                let _48: anchor_lang::prelude::Program<'_, farms::program::Farms>;
                let _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _62: anchor_lang::prelude::Program<'_, farms::program::Farms>;
                scope 16 {
                    debug farms_program => _48;
                }
                scope 17 {
                    debug residual => _59;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _62;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _44;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _47;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _30;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _33;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = &mut (*_2);
        StorageLive(_11);
        _11 = &(*_3);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut ((*_4).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralBumps);
        _12 = &mut (*_13);
        StorageLive(_14);
        _14 = &mut (*_5);
        _8 = <handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralBumps>>::try_accounts(move _9, move _10, move _11, move _12, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        StorageDead(_8);
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = move ((_7 as Continue).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>);
        _6 = move _19;
        StorageDead(_19);
        _68 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &mut (*_2);
        StorageLive(_25);
        _25 = &(*_3);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut ((*_4).1: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps);
        _26 = &mut (*_27);
        StorageLive(_28);
        _28 = &mut (*_5);
        _22 = <handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_> as anchor_lang::Accounts<'_, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps>>::try_accounts(move _23, move _24, move _25, move _26, move _28) -> [return: bb7, unwind: bb29];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _18) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        _82 = discriminant(_7);
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb25;
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        StorageDead(_22);
        _29 = discriminant(_21);
        switchInt(move _29) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_33);
        _33 = move ((_21 as Continue).0: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _20 = move _33;
        StorageDead(_33);
        _70 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_1);
        StorageLive(_38);
        _38 = &mut (*_2);
        StorageLive(_39);
        _39 = &(*_3);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut ((*_4).2: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps);
        _40 = &mut (*_41);
        StorageLive(_42);
        _42 = &mut (*_5);
        _36 = <handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_> as anchor_lang::Accounts<'_, handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccountsBumps>>::try_accounts(move _37, move _38, move _39, move _40, move _42) -> [return: bb12, unwind: bb28];
    }

    bb10: {
        StorageLive(_30);
        _30 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        _80 = discriminant(_21);
        StorageDead(_27);
        StorageDead(_21);
        goto -> bb24;
    }

    bb12: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        StorageDead(_36);
        _43 = discriminant(_35);
        switchInt(move _43) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_47);
        _47 = move ((_35 as Continue).0: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>);
        _34 = move _47;
        StorageDead(_47);
        _72 = discriminant(_35);
        StorageDead(_41);
        StorageDead(_35);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_1);
        StorageLive(_53);
        _53 = &mut (*_2);
        StorageLive(_54);
        _54 = &(*_3);
        StorageLive(_55);
        _55 = &mut (*_4);
        StorageLive(_56);
        _56 = &mut (*_5);
        _51 = <anchor_lang::prelude::Program<'_, Farms> as anchor_lang::Accounts<'_, LiquidateObligationAndRedeemReserveCollateralV2Bumps>>::try_accounts(move _52, move _53, move _54, move _55, move _56) -> [return: bb17, unwind: bb27];
    }

    bb15: {
        StorageLive(_44);
        _44 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _46) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        StorageDead(_46);
        StorageDead(_44);
        _78 = discriminant(_35);
        StorageDead(_41);
        StorageDead(_35);
        goto -> bb23;
    }

    bb17: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_57);
        _57 = {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:338:10: 338:18};
        _50 = std::result::Result::<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:338:10: 338:18}>(move _51, move _57) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        StorageDead(_57);
        StorageDead(_51);
        _49 = <std::result::Result<anchor_lang::prelude::Program<'_, Farms>, anchor_lang::error::Error> as Try>::branch(move _50) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        StorageDead(_50);
        _58 = discriminant(_49);
        switchInt(move _58) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_62);
        _62 = move ((_49 as Continue).0: anchor_lang::prelude::Program<'_, farms::program::Farms>);
        _48 = move _62;
        StorageDead(_62);
        _74 = discriminant(_49);
        StorageDead(_49);
        StorageLive(_63);
        StorageLive(_64);
        _64 = move _6;
        StorageLive(_65);
        _65 = move _20;
        StorageLive(_66);
        _66 = move _34;
        StorageLive(_67);
        _67 = move _48;
        _63 = handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2::<'_> { liquidation_accounts: move _64, collateral_farms_accounts: move _65, debt_farms_accounts: move _66, farms_program: move _67 };
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        _0 = std::result::Result::<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>, anchor_lang::error::Error>::Ok(move _63);
        StorageDead(_63);
        StorageDead(_48);
        StorageDead(_34);
        StorageDead(_20);
        StorageDead(_6);
        goto -> bb26;
    }

    bb21: {
        StorageLive(_59);
        _59 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <std::result::Result<handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _61) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        StorageDead(_61);
        StorageDead(_59);
        _76 = discriminant(_49);
        StorageDead(_49);
        StorageDead(_48);
        drop(_34) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        StorageDead(_34);
        drop(_20) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        StorageDead(_20);
        drop(_6) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        StorageDead(_6);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_34) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_20) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_6) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }

    bb31 (cleanup): {
        _84 = discriminant(_49);
        goto -> bb27;
    }

    bb32 (cleanup): {
        _85 = discriminant(_35);
        goto -> bb28;
    }

    bb33 (cleanup): {
        _86 = discriminant(_21);
        goto -> bb29;
    }

    bb34 (cleanup): {
        _87 = discriminant(_7);
        goto -> bb30;
    }
}
