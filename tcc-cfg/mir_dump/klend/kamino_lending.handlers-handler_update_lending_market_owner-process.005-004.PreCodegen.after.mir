// MIR for `handlers::handler_update_lending_market_owner::process` after PreCodegen

fn handlers::handler_update_lending_market_owner::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_lending_market_owner::UpdateLendingMarketOwner<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _3: std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::lending_market::LendingMarket>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let _12: ();
    let mut _13: bool;
    let mut _14: &state::lending_market::LendingMarket;
    let _15: &state::lending_market::LendingMarket;
    let mut _16: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _17: !;
    let mut _18: anchor_lang::error::Error;
    let mut _19: anchor_lang::error::AnchorError;
    let mut _20: std::string::String;
    let mut _21: &LendingError;
    let _22: LendingError;
    let mut _23: u32;
    let mut _24: LendingError;
    let mut _25: std::string::String;
    let mut _26: &LendingError;
    let _27: LendingError;
    let mut _28: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _29: anchor_lang::error::ErrorOrigin;
    let mut _30: anchor_lang::error::Source;
    let mut _31: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: &state::lending_market::LendingMarket;
    let mut _34: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _35: &mut state::lending_market::LendingMarket;
    let mut _36: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _37: ();
    let mut _40: &mut handlers::handler_update_lending_market_owner::UpdateLendingMarketOwner<'_>;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    scope 1 {
        debug market => _2;
        let mut _38: &LendingError;
        let mut _39: &LendingError;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _40 = deref_copy (_1.1: &mut handlers::handler_update_lending_market_owner::UpdateLendingMarketOwner<'_>);
        _6 = &((*_40).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::lending_market::LendingMarket>);
        _3 = move _11;
        StorageDead(_11);
        _2 = &mut _3;
        _41 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_2);
        _15 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _16) -> [return: bb7, unwind: bb21];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _43 = discriminant(_4);
        StorageDead(_4);
        goto -> bb18;
    }

    bb7: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = state::lending_market::LendingMarket::is_immutable(move _14) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        switchInt(move _13) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_14);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _39 = const _;
        _21 = &(*_39);
        _20 = LendingError::name(move _21) -> [return: bb11, unwind: bb21];
    }

    bb10: {
        StorageDead(_14);
        StorageDead(_15);
        _12 = const ();
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_2);
        _33 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _34) -> [return: bb15, unwind: bb21];
    }

    bb11: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        _24 = LendingError::OperationNotPermittedMarketImmutable;
        _23 = <LendingError as Into<u32>>::into(move _24) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _38 = const _;
        _26 = &(*_38);
        _25 = <LendingError as ToString>::to_string(move _26) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_lending_market_owner.rs", line: const 8_u32 };
        _29 = anchor_lang::error::ErrorOrigin::Source(move _30);
        StorageDead(_30);
        _28 = std::option::Option::<ErrorOrigin>::Some(move _29);
        StorageDead(_29);
        StorageLive(_31);
        _31 = std::option::Option::<ComparedValues>::None;
        _19 = anchor_lang::error::AnchorError { error_name: move _20, error_code_number: move _23, error_msg: move _25, error_origin: move _28, compared_values: move _31 };
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        _18 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _19) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        StorageDead(_19);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _18);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_12);
        drop(_3) -> [return: bb18, unwind: bb22];
    }

    bb15: {
        StorageDead(_34);
        _32 = ((*_33).3: anchor_lang::prelude::Pubkey);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &mut (*_2);
        _35 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _36) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        StorageDead(_36);
        ((*_35).2: anchor_lang::prelude::Pubkey) = move _32;
        StorageDead(_32);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_37);
        _37 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _37);
        StorageDead(_37);
        drop(_3) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_20) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _45 = discriminant(_4);
        goto -> bb22;
    }
}
