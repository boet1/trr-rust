// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_add` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_add(_1: uint_types::U128, _2: uint_types::U128) -> (uint_types::U128, bool) {
    debug self => _1;
    debug other => _2;
    let mut _0: (utils::fraction::uint_types::U128, bool);
    let _3: &[u64; 2];
    let _7: ();
    let _8: ();
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u64;
    let mut _14: (u64, bool);
    let mut _15: u64;
    let _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: u64;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _25: (u64, bool);
    let mut _26: u64;
    let mut _27: u64;
    let mut _28: u64;
    let _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    let mut _32: u8;
    let mut _33: u8;
    let mut _34: bool;
    let mut _35: u8;
    let mut _36: bool;
    let mut _37: (u8, bool);
    let mut _40: (u64, bool);
    let mut _41: u64;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: u64;
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _49: u64;
    let _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    let mut _53: bool;
    let _54: ();
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: u64;
    let mut _60: (u64, bool);
    let mut _61: u64;
    let _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let mut _65: u64;
    let _66: usize;
    let mut _67: usize;
    let mut _68: bool;
    let mut _71: (u64, bool);
    let mut _72: u64;
    let mut _73: u64;
    let mut _74: u64;
    let _75: usize;
    let mut _76: usize;
    let mut _77: bool;
    let mut _78: u8;
    let mut _79: u8;
    let mut _80: bool;
    let mut _81: u8;
    let mut _82: bool;
    let mut _83: (u8, bool);
    let mut _86: (u64, bool);
    let mut _87: u64;
    let _88: usize;
    let mut _89: usize;
    let mut _90: bool;
    let mut _91: u64;
    let _92: usize;
    let mut _93: usize;
    let mut _94: bool;
    let mut _95: u64;
    let _96: usize;
    let mut _97: usize;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: utils::fraction::uint_types::U128;
    let mut _101: [u64; 2];
    let mut _102: bool;
    let mut _103: u64;
    scope 1 {
        debug me => _3;
        let _4: &[u64; 2];
        scope 2 {
            debug you => _4;
            let mut _5: [u64; 2];
            scope 3 {
                debug ret => _5;
                let mut _6: u64;
                scope 4 {
                    debug carry => _6;
                    scope 5 {
                        let _12: u64;
                        let _13: bool;
                        let _38: u64;
                        let _39: bool;
                        let _58: u64;
                        let _59: bool;
                        let _84: u64;
                        let _85: bool;
                        scope 6 {
                            debug res1 => _12;
                            debug overflow1 => _13;
                            let _23: u64;
                            let _24: bool;
                            scope 7 {
                                debug res2 => _23;
                                debug overflow2 => _24;
                            }
                        }
                        scope 8 {
                            debug res => _38;
                            debug overflow => _39;
                        }
                        scope 9 {
                            debug res1 => _58;
                            debug overflow1 => _59;
                            let _69: u64;
                            let _70: bool;
                            scope 10 {
                                debug res2 => _69;
                                debug overflow2 => _70;
                            }
                        }
                        scope 11 {
                            debug res => _84;
                            debug overflow => _85;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &(_1.0: [u64; 2]);
        StorageLive(_4);
        _4 = &(_2.0: [u64; 2]);
        StorageLive(_5);
        _5 = [const 0_u64; 2];
        StorageLive(_6);
        _6 = const 0_u64;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = Ge(const _, const 0_usize);
        switchInt(move _9) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        _10 = Ne(move _11, const 0_u64);
        switchInt(move _10) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = const _;
        _17 = Len((*_3));
        _18 = Lt(_16, _17);
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb3, unwind continue];
    }

    bb3: {
        _15 = (*_3)[_16];
        StorageLive(_19);
        StorageLive(_20);
        _20 = const _;
        _21 = Len((*_4));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb4, unwind continue];
    }

    bb4: {
        _19 = (*_4)[_20];
        _14 = core::num::<impl u64>::overflowing_add(move _15, move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_19);
        StorageDead(_15);
        StorageLive(_12);
        _12 = (_14.0: u64);
        StorageLive(_13);
        _13 = (_14.1: bool);
        StorageDead(_20);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _12;
        StorageLive(_27);
        _27 = _6;
        _25 = core::num::<impl u64>::overflowing_add(move _26, move _27) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_23);
        _23 = (_25.0: u64);
        StorageLive(_24);
        _24 = (_25.1: bool);
        StorageDead(_25);
        StorageLive(_28);
        _28 = _23;
        StorageLive(_29);
        _29 = const _;
        _30 = Len(_5);
        _31 = Lt(_29, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> [success: bb7, unwind continue];
    }

    bb7: {
        _5[_29] = move _28;
        StorageDead(_28);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _13;
        _33 = move _34 as u8 (IntToInt);
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _24;
        _35 = move _36 as u8 (IntToInt);
        StorageDead(_36);
        _37 = CheckedAdd(_33, _35);
        assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", move _33, move _35) -> [success: bb8, unwind continue];
    }

    bb8: {
        _32 = move (_37.0: u8);
        StorageDead(_35);
        StorageDead(_33);
        _6 = move _32 as u64 (IntToInt);
        StorageDead(_32);
        _8 = const ();
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb14;
    }

    bb9: {
        StorageDead(_11);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const _;
        _43 = Len((*_3));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb10, unwind continue];
    }

    bb10: {
        _41 = (*_3)[_42];
        StorageLive(_45);
        StorageLive(_46);
        _46 = const _;
        _47 = Len((*_4));
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> [success: bb11, unwind continue];
    }

    bb11: {
        _45 = (*_4)[_46];
        _40 = core::num::<impl u64>::overflowing_add(move _41, move _45) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_45);
        StorageDead(_41);
        StorageLive(_38);
        _38 = (_40.0: u64);
        StorageLive(_39);
        _39 = (_40.1: bool);
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_49);
        _49 = _38;
        StorageLive(_50);
        _50 = const _;
        _51 = Len(_5);
        _52 = Lt(_50, _51);
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> [success: bb13, unwind continue];
    }

    bb13: {
        _5[_50] = move _49;
        StorageDead(_49);
        StorageDead(_50);
        StorageLive(_53);
        _53 = _39;
        _6 = move _53 as u64 (IntToInt);
        StorageDead(_53);
        _8 = const ();
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_10);
        goto -> bb16;
    }

    bb15: {
        _8 = const ();
        goto -> bb16;
    }

    bb16: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_54);
        StorageLive(_55);
        _55 = Ge(const _, const 0_usize);
        switchInt(move _55) -> [0: bb31, otherwise: bb17];
    }

    bb17: {
        StorageLive(_56);
        StorageLive(_57);
        _57 = _6;
        _56 = Ne(move _57, const 0_u64);
        switchInt(move _56) -> [0: bb25, otherwise: bb18];
    }

    bb18: {
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = const _;
        _63 = Len((*_3));
        _64 = Lt(_62, _63);
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> [success: bb19, unwind continue];
    }

    bb19: {
        _61 = (*_3)[_62];
        StorageLive(_65);
        StorageLive(_66);
        _66 = const _;
        _67 = Len((*_4));
        _68 = Lt(_66, _67);
        assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _66) -> [success: bb20, unwind continue];
    }

    bb20: {
        _65 = (*_4)[_66];
        _60 = core::num::<impl u64>::overflowing_add(move _61, move _65) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_65);
        StorageDead(_61);
        StorageLive(_58);
        _58 = (_60.0: u64);
        StorageLive(_59);
        _59 = (_60.1: bool);
        StorageDead(_66);
        StorageDead(_62);
        StorageDead(_60);
        StorageLive(_71);
        StorageLive(_72);
        _72 = _58;
        StorageLive(_73);
        _73 = _6;
        _71 = core::num::<impl u64>::overflowing_add(move _72, move _73) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_69);
        _69 = (_71.0: u64);
        StorageLive(_70);
        _70 = (_71.1: bool);
        StorageDead(_71);
        StorageLive(_74);
        _74 = _69;
        StorageLive(_75);
        _75 = const _;
        _76 = Len(_5);
        _77 = Lt(_75, _76);
        assert(move _77, "index out of bounds: the length is {} but the index is {}", move _76, _75) -> [success: bb23, unwind continue];
    }

    bb23: {
        _5[_75] = move _74;
        StorageDead(_74);
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _59;
        _79 = move _80 as u8 (IntToInt);
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _70;
        _81 = move _82 as u8 (IntToInt);
        StorageDead(_82);
        _83 = CheckedAdd(_79, _81);
        assert(!move (_83.1: bool), "attempt to compute `{} + {}`, which would overflow", move _79, move _81) -> [success: bb24, unwind continue];
    }

    bb24: {
        _78 = move (_83.0: u8);
        StorageDead(_81);
        StorageDead(_79);
        _6 = move _78 as u64 (IntToInt);
        StorageDead(_78);
        _54 = const ();
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb30;
    }

    bb25: {
        StorageDead(_57);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = const _;
        _89 = Len((*_3));
        _90 = Lt(_88, _89);
        assert(move _90, "index out of bounds: the length is {} but the index is {}", move _89, _88) -> [success: bb26, unwind continue];
    }

    bb26: {
        _87 = (*_3)[_88];
        StorageLive(_91);
        StorageLive(_92);
        _92 = const _;
        _93 = Len((*_4));
        _94 = Lt(_92, _93);
        assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _92) -> [success: bb27, unwind continue];
    }

    bb27: {
        _91 = (*_4)[_92];
        _86 = core::num::<impl u64>::overflowing_add(move _87, move _91) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_91);
        StorageDead(_87);
        StorageLive(_84);
        _84 = (_86.0: u64);
        StorageLive(_85);
        _85 = (_86.1: bool);
        StorageDead(_92);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_95);
        _95 = _84;
        StorageLive(_96);
        _96 = const _;
        _97 = Len(_5);
        _98 = Lt(_96, _97);
        assert(move _98, "index out of bounds: the length is {} but the index is {}", move _97, _96) -> [success: bb29, unwind continue];
    }

    bb29: {
        _5[_96] = move _95;
        StorageDead(_95);
        StorageDead(_96);
        StorageLive(_99);
        _99 = _85;
        _6 = move _99 as u64 (IntToInt);
        StorageDead(_99);
        _54 = const ();
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_56);
        goto -> bb32;
    }

    bb31: {
        _54 = const ();
        goto -> bb32;
    }

    bb32: {
        StorageDead(_55);
        StorageDead(_54);
        _7 = const ();
        StorageDead(_7);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _5;
        _100 = uint_types::U128(move _101);
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _6;
        _102 = Gt(move _103, const 0_u64);
        StorageDead(_103);
        _0 = (move _100, move _102);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
