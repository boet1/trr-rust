// MIR for `state::<impl at programs\klend\src\state\mod.rs:159:1: 159:36>::to_bytes` before PreCodegen

fn state::<impl at programs\klend\src\state\mod.rs:159:1: 159:36>::to_bytes(_1: &state::UpdateLendingMarketConfigValue) -> [u8; 72] {
    debug self => _1;
    let mut _0: [u8; 72];
    let mut _2: [u8; 72];
    let _3: ();
    let mut _4: isize;
    let mut _6: bool;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _11: u8;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _16: ();
    let mut _17: &mut [u8];
    let mut _18: &mut [u8];
    let mut _19: &mut [u8; 72];
    let mut _20: std::ops::RangeTo<usize>;
    let mut _21: &[u8];
    let mut _22: &[u8; 2];
    let _23: &[u8; 2];
    let _24: [u8; 2];
    let mut _25: u16;
    let _27: ();
    let mut _28: &mut [u8];
    let mut _29: &mut [u8];
    let mut _30: &mut [u8; 72];
    let mut _31: std::ops::RangeTo<usize>;
    let mut _32: &[u8];
    let mut _33: &[u8; 8];
    let _34: &[u8; 8];
    let _35: [u8; 8];
    let mut _36: u64;
    let _38: ();
    let mut _39: &mut [u8];
    let mut _40: &mut [u8];
    let mut _41: &mut [u8; 72];
    let mut _42: std::ops::RangeTo<usize>;
    let mut _43: &[u8];
    let mut _44: &[u8; 16];
    let _45: &[u8; 16];
    let _46: [u8; 16];
    let mut _47: u128;
    let _49: ();
    let mut _50: &mut [u8];
    let mut _51: &mut [u8];
    let mut _52: &mut [u8; 72];
    let mut _53: std::ops::RangeTo<usize>;
    let mut _54: &[u8];
    let _55: &[u8];
    let mut _56: &anchor_lang::prelude::Pubkey;
    let _58: ();
    let mut _59: &mut [u8];
    let mut _60: &mut [u8];
    let mut _61: &mut [u8; 72];
    let mut _62: std::ops::RangeTo<usize>;
    let mut _63: &[u8];
    let _64: &[u8];
    let mut _65: &std::vec::Vec<u8>;
    let _66: std::vec::Vec<u8>;
    let mut _67: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _68: &state::lending_market::ElevationGroup;
    let _70: ();
    let mut _71: &mut [u8];
    let mut _72: &mut [u8];
    let mut _73: &mut [u8; 72];
    let mut _74: std::ops::RangeTo<usize>;
    let mut _75: &[u8];
    let mut _76: &[u8; 8];
    let _78: ();
    let mut _79: &mut [u8];
    let mut _80: &mut [u8];
    let mut _81: &mut [u8; 72];
    let mut _82: std::ops::RangeTo<usize>;
    let mut _83: usize;
    let mut _84: &[u8];
    let mut _85: &[u8; 32];
    let mut _86: &[u8];
    let mut _87: &[u8; 32];
    scope 1 {
        debug val => _2;
        let _5: &bool;
        let _10: &u8;
        let _15: &u16;
        let _26: &u64;
        let _37: &u128;
        let _48: &anchor_lang::prelude::Pubkey;
        let _57: &state::lending_market::ElevationGroup;
        let _69: &[u8; 8];
        let _77: &[u8; 32];
        scope 2 {
            debug v => _5;
        }
        scope 3 {
            debug v => _10;
        }
        scope 4 {
            debug v => _15;
        }
        scope 5 {
            debug v => _26;
        }
        scope 6 {
            debug v => _37;
        }
        scope 7 {
            debug v => _48;
        }
        scope 8 {
            debug v => _57;
        }
        scope 9 {
            debug value => _69;
        }
        scope 10 {
            debug v => _77;
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = [const 0_u8; 72];
        StorageLive(_3);
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb5, 2: bb30, 3: bb7, 4: bb11, 5: bb15, 6: bb19, 7: bb23, 8: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_77);
        _77 = &(((*_1) as Name).0: [u8; 32]);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &mut _2;
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_77);
        _84 = move _85 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_85);
        _83 = core::slice::<impl [u8]>::len(move _84) -> [return: bb33, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_5);
        _5 = &(((*_1) as Bool).0: bool);
        StorageLive(_6);
        _6 = (*_5);
        StorageLive(_7);
        _7 = const 0_usize;
        _8 = Len(_2);
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb4, unwind continue];
    }

    bb4: {
        _2[_7] = move _6 as u8 (IntToInt);
        StorageDead(_6);
        StorageDead(_7);
        _3 = const ();
        StorageDead(_5);
        goto -> bb36;
    }

    bb5: {
        StorageLive(_10);
        _10 = &(((*_1) as U8).0: u8);
        StorageLive(_11);
        _11 = (*_10);
        StorageLive(_12);
        _12 = const 0_usize;
        _13 = Len(_2);
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb6, unwind continue];
    }

    bb6: {
        _2[_12] = move _11;
        StorageDead(_11);
        StorageDead(_12);
        _3 = const ();
        StorageDead(_10);
        goto -> bb36;
    }

    bb7: {
        StorageLive(_15);
        _15 = &(((*_1) as U16).0: u16);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _2;
        StorageLive(_20);
        _20 = RangeTo::<usize> { end: const 2_usize };
        _18 = <[u8; 72] as IndexMut<RangeTo<usize>>>::index_mut(move _19, move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = &mut (*_18);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = (*_15);
        _24 = core::num::<impl u16>::to_le_bytes(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = core::slice::<impl [u8]>::copy_from_slice(move _17, move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_16);
        _3 = const ();
        StorageDead(_15);
        goto -> bb36;
    }

    bb11: {
        StorageLive(_26);
        _26 = &(((*_1) as U64).0: u64);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &mut _2;
        StorageLive(_31);
        _31 = RangeTo::<usize> { end: const 8_usize };
        _29 = <[u8; 72] as IndexMut<RangeTo<usize>>>::index_mut(move _30, move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        _28 = &mut (*_29);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = (*_26);
        _35 = core::num::<impl u64>::to_le_bytes(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = move _33 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_33);
        _27 = core::slice::<impl [u8]>::copy_from_slice(move _28, move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_27);
        _3 = const ();
        StorageDead(_26);
        goto -> bb36;
    }

    bb15: {
        StorageLive(_37);
        _37 = &(((*_1) as U128).0: u128);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _2;
        StorageLive(_42);
        _42 = RangeTo::<usize> { end: const 16_usize };
        _40 = <[u8; 72] as IndexMut<RangeTo<usize>>>::index_mut(move _41, move _42) -> [return: bb16, unwind continue];
    }

    bb16: {
        _39 = &mut (*_40);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = (*_37);
        _46 = core::num::<impl u128>::to_le_bytes(move _47) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = core::slice::<impl [u8]>::copy_from_slice(move _39, move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_38);
        _3 = const ();
        StorageDead(_37);
        goto -> bb36;
    }

    bb19: {
        StorageLive(_48);
        _48 = &(((*_1) as Pubkey).0: anchor_lang::prelude::Pubkey);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &mut _2;
        StorageLive(_53);
        _53 = RangeTo::<usize> { end: const 32_usize };
        _51 = <[u8; 72] as IndexMut<RangeTo<usize>>>::index_mut(move _52, move _53) -> [return: bb20, unwind continue];
    }

    bb20: {
        _50 = &mut (*_51);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &(*_48);
        _55 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        _54 = &(*_55);
        StorageDead(_56);
        _49 = core::slice::<impl [u8]>::copy_from_slice(move _50, move _54) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_54);
        StorageDead(_50);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_49);
        _3 = const ();
        StorageDead(_48);
        goto -> bb36;
    }

    bb23: {
        StorageLive(_57);
        _57 = &(((*_1) as ElevationGroup).0: state::lending_market::ElevationGroup);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _2;
        StorageLive(_62);
        _62 = RangeTo::<usize> { end: const 72_usize };
        _60 = <[u8; 72] as IndexMut<RangeTo<usize>>>::index_mut(move _61, move _62) -> [return: bb24, unwind continue];
    }

    bb24: {
        _59 = &mut (*_60);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &(*_57);
        _67 = <state::lending_market::ElevationGroup as BorshSerialize>::try_to_vec(move _68) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_68);
        _66 = std::result::Result::<Vec<u8>, std::io::Error>::unwrap(move _67) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        _65 = &_66;
        StorageDead(_67);
        _64 = Vec::<u8>::as_slice(move _65) -> [return: bb27, unwind: bb37];
    }

    bb27: {
        _63 = &(*_64);
        StorageDead(_65);
        _58 = core::slice::<impl [u8]>::copy_from_slice(move _59, move _63) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_59);
        drop(_66) -> [return: bb29, unwind: bb38];
    }

    bb29: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_58);
        _3 = const ();
        StorageDead(_57);
        goto -> bb36;
    }

    bb30: {
        StorageLive(_69);
        _69 = &(((*_1) as U8Array).0: [u8; 8]);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &mut _2;
        StorageLive(_74);
        _74 = RangeTo::<usize> { end: const 8_usize };
        _72 = <[u8; 72] as IndexMut<RangeTo<usize>>>::index_mut(move _73, move _74) -> [return: bb31, unwind continue];
    }

    bb31: {
        _71 = &mut (*_72);
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_69);
        _75 = move _76 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = core::slice::<impl [u8]>::copy_from_slice(move _71, move _75) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_72);
        StorageDead(_70);
        _3 = const ();
        StorageDead(_69);
        goto -> bb36;
    }

    bb33: {
        StorageDead(_84);
        _82 = RangeTo::<usize> { end: move _83 };
        StorageDead(_83);
        _80 = <[u8; 72] as IndexMut<RangeTo<usize>>>::index_mut(move _81, move _82) -> [return: bb34, unwind continue];
    }

    bb34: {
        _79 = &mut (*_80);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_77);
        _86 = move _87 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_87);
        _78 = core::slice::<impl [u8]>::copy_from_slice(move _79, move _86) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_86);
        StorageDead(_79);
        StorageDead(_80);
        StorageDead(_78);
        _3 = const ();
        StorageDead(_77);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_3);
        _0 = _2;
        StorageDead(_2);
        return;
    }

    bb37 (cleanup): {
        drop(_66) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        resume;
    }
}
