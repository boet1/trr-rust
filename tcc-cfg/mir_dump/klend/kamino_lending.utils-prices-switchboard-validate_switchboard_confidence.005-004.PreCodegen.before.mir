// MIR for `validate_switchboard_confidence` before PreCodegen

fn validate_switchboard_confidence(_1: u128, _2: u32, _3: u128, _4: u32, _5: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug price_mantissa => _1;
    debug price_scale => _2;
    debug stdev_mantissa => _3;
    debug stdev_scale => _4;
    debug oracle_confidence_factor => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: &dyn std::ops::Fn(u128, u128) -> std::option::Option<u128>;
    let _7: u32;
    let mut _8: (&dyn std::ops::Fn(u128, u128) -> std::option::Option<u128>, u32);
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let mut _12: &dyn std::ops::Fn(u128, u128) -> std::option::Option<u128>;
    let mut _13: &fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_mul};
    let _14: &fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_mul};
    let _15: fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_mul};
    let mut _16: u32;
    let mut _17: std::option::Option<u32>;
    let mut _18: u32;
    let mut _19: u32;
    let mut _20: &dyn std::ops::Fn(u128, u128) -> std::option::Option<u128>;
    let mut _21: &fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_div};
    let _22: &fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_div};
    let _23: fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_div};
    let mut _24: u32;
    let mut _25: std::option::Option<u32>;
    let mut _26: u32;
    let mut _27: u32;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u128>;
    let mut _30: std::result::Result<u128, anchor_lang::error::Error>;
    let mut _31: std::option::Option<u128>;
    let mut _32: u32;
    let mut _33: {closure@programs\klend\src\utils\prices\switchboard.rs:124:21: 124:23};
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u128>;
    let mut _41: std::result::Result<u128, anchor_lang::error::Error>;
    let mut _42: std::option::Option<u128>;
    let mut _43: std::option::Option<u128>;
    let mut _44: u128;
    let mut _45: u128;
    let mut _46: u64;
    let mut _47: {closure@programs\klend\src\utils\prices\switchboard.rs:130:19: 130:22};
    let mut _48: &dyn std::ops::Fn(u128, u128) -> std::option::Option<u128>;
    let mut _49: &u128;
    let mut _50: {closure@programs\klend\src\utils\prices\switchboard.rs:131:21: 131:23};
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _56: bool;
    let mut _57: u128;
    let mut _58: u128;
    let _59: ();
    let mut _60: &str;
    let _61: &str;
    let mut _62: &std::string::String;
    let _63: &std::string::String;
    let _64: std::string::String;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[&str; 4];
    let _69: &[&str; 4];
    let _70: [&str; 4];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let mut _72: &[core::fmt::rt::Argument<'_>; 4];
    let _73: &[core::fmt::rt::Argument<'_>; 4];
    let _74: [core::fmt::rt::Argument<'_>; 4];
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &u128;
    let _77: &u128;
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &u32;
    let _80: &u32;
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &u128;
    let _83: &u128;
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &u32;
    let _86: &u32;
    let mut _87: anchor_lang::error::Error;
    let mut _88: anchor_lang::error::AnchorError;
    let mut _89: std::string::String;
    let mut _90: &LendingError;
    let _91: LendingError;
    let mut _92: u32;
    let mut _93: LendingError;
    let mut _94: std::string::String;
    let mut _95: &LendingError;
    let _96: LendingError;
    let mut _97: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _98: anchor_lang::error::ErrorOrigin;
    let mut _99: anchor_lang::error::Source;
    let mut _100: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _101: ();
    let mut _105: &fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_mul};
    let mut _106: &fn(u128, u128) -> std::option::Option<u128> {core::num::<impl u128>::checked_div};
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    scope 1 {
        debug scale_op => _6;
        debug scale_diff => _7;
        let _28: u128;
        let _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _38: u128;
        scope 2 {
            debug scaling_factor => _28;
            let _39: u128;
            let _52: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _55: u128;
            scope 7 {
                debug stdev_x_confidence_factor_scaled => _39;
                let _65: std::string::String;
                let mut _102: &LendingError;
                let mut _103: &LendingError;
                let mut _104: &[&str; 4];
                scope 12 {
                    debug res => _65;
                }
            }
            scope 8 {
                debug residual => _52;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _55;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _35;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _38;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = _4;
        _9 = Ge(move _10, move _11);
        switchInt(move _9) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _105 = const _;
        _14 = &(*_105);
        _13 = &(*_14);
        _12 = move _13 as &dyn std::ops::Fn(u128, u128) -> std::option::Option<u128> (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        _19 = _4;
        _17 = core::num::<impl u32>::checked_sub(move _18, move _19) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = std::option::Option::<u32>::unwrap(move _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_17);
        _8 = (move _12, move _16);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_14);
        goto -> bb7;
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _106 = const _;
        _22 = &(*_106);
        _21 = &(*_22);
        _20 = move _21 as &dyn std::ops::Fn(u128, u128) -> std::option::Option<u128> (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _4;
        StorageLive(_27);
        _27 = _2;
        _25 = core::num::<impl u32>::checked_sub(move _26, move _27) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = std::option::Option::<u32>::unwrap(move _25) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_25);
        _8 = (move _20, move _24);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_22);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_9);
        StorageLive(_6);
        _6 = (_8.0: &dyn std::ops::Fn(u128, u128) -> std::option::Option<u128>);
        StorageLive(_7);
        _7 = (_8.1: u32);
        StorageDead(_8);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _7;
        _31 = core::num::<impl u128>::checked_pow(const 10_u128, move _32) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_32);
        StorageLive(_33);
        _33 = {closure@programs\klend\src\utils\prices\switchboard.rs:124:21: 124:23};
        _30 = std::option::Option::<u128>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\utils\prices\switchboard.rs:124:21: 124:23}>(move _31, move _33) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_33);
        StorageDead(_31);
        _29 = <std::result::Result<u128, anchor_lang::error::Error> as Try>::branch(move _30) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_38);
        _38 = ((_29 as Continue).0: u128);
        _28 = _38;
        StorageDead(_38);
        _107 = discriminant(_29);
        StorageDead(_29);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _3;
        StorageLive(_45);
        StorageLive(_46);
        _46 = _5;
        _45 = <u64 as Into<u128>>::into(move _46) -> [return: bb15, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_35);
        _35 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _37) -> [return: bb14, unwind: bb45];
    }

    bb14: {
        StorageDead(_37);
        StorageDead(_35);
        _113 = discriminant(_29);
        StorageDead(_29);
        goto -> bb39;
    }

    bb15: {
        StorageDead(_46);
        _43 = core::num::<impl u128>::checked_mul(move _44, move _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_6);
        StorageLive(_49);
        _49 = &_28;
        _47 = {closure@programs\klend\src\utils\prices\switchboard.rs:130:19: 130:22} { scale_op: move _48, scaling_factor: move _49 };
        StorageDead(_49);
        StorageDead(_48);
        _42 = std::option::Option::<u128>::and_then::<u128, {closure@programs\klend\src\utils\prices\switchboard.rs:130:19: 130:22}>(move _43, move _47) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_47);
        StorageDead(_43);
        StorageLive(_50);
        _50 = {closure@programs\klend\src\utils\prices\switchboard.rs:131:21: 131:23};
        _41 = std::option::Option::<u128>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\utils\prices\switchboard.rs:131:21: 131:23}>(move _42, move _50) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_50);
        StorageDead(_42);
        _40 = <std::result::Result<u128, anchor_lang::error::Error> as Try>::branch(move _41) -> [return: bb19, unwind: bb43];
    }

    bb19: {
        StorageDead(_41);
        _51 = discriminant(_40);
        switchInt(move _51) -> [0: bb20, 1: bb21, otherwise: bb12];
    }

    bb20: {
        StorageLive(_55);
        _55 = ((_40 as Continue).0: u128);
        _39 = _55;
        StorageDead(_55);
        _109 = discriminant(_40);
        StorageDead(_40);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _39;
        StorageLive(_58);
        _58 = _1;
        _56 = Ge(move _57, move _58);
        switchInt(move _56) -> [0: bb37, otherwise: bb23];
    }

    bb21: {
        StorageLive(_52);
        _52 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _54) -> [return: bb22, unwind: bb44];
    }

    bb22: {
        StorageDead(_54);
        StorageDead(_52);
        _111 = discriminant(_40);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb39;
    }

    bb23: {
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _104 = const _;
        _69 = &(*_104);
        _68 = &(*_69);
        _67 = move _68 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_1;
        _76 = &(*_77);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _76) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_2;
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _79) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_3;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _82) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_4;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _85) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_85);
        _74 = [move _75, move _78, move _81, move _84];
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = move _72 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_72);
        _66 = Arguments::<'_>::new_v1(move _67, move _71) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_71);
        StorageDead(_67);
        _65 = format(move _66) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_66);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_69);
        _64 = move _65;
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <std::string::String as Deref>::deref(move _62) -> [return: bb30, unwind: bb42];
    }

    bb30: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = solana_program::log::sol_log(move _60) -> [return: bb31, unwind: bb42];
    }

    bb31: {
        StorageDead(_60);
        drop(_64) -> [return: bb32, unwind: bb43];
    }

    bb32: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _103 = const _;
        _90 = &(*_103);
        _89 = LendingError::name(move _90) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        _93 = LendingError::PriceConfidenceTooWide;
        _92 = <LendingError as Into<u32>>::into(move _93) -> [return: bb34, unwind: bb41];
    }

    bb34: {
        StorageDead(_93);
        StorageLive(_94);
        StorageLive(_95);
        _102 = const _;
        _95 = &(*_102);
        _94 = <LendingError as ToString>::to_string(move _95) -> [return: bb35, unwind: bb41];
    }

    bb35: {
        StorageDead(_95);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\switchboard.rs", line: const 139_u32 };
        _98 = anchor_lang::error::ErrorOrigin::Source(move _99);
        StorageDead(_99);
        _97 = std::option::Option::<ErrorOrigin>::Some(move _98);
        StorageDead(_98);
        StorageLive(_100);
        _100 = std::option::Option::<ComparedValues>::None;
        _88 = anchor_lang::error::AnchorError { error_name: move _89, error_code_number: move _92, error_msg: move _94, error_origin: move _97, compared_values: move _100 };
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_89);
        _87 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _88) -> [return: bb36, unwind: bb43];
    }

    bb36: {
        StorageDead(_88);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _87);
        StorageDead(_87);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_101);
        _101 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _101);
        StorageDead(_101);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_56);
        StorageDead(_39);
        StorageDead(_28);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_28);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb40;
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_89) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_64) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        _115 = discriminant(_40);
        goto -> bb43;
    }

    bb45 (cleanup): {
        _116 = discriminant(_29);
        goto -> bb43;
    }
}
