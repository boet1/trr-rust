// MIR for `get_price_usd::{closure#4}::{closure#1}` after PreCodegen

fn get_price_usd::{closure#4}::{closure#1}(_1: &mut {closure@programs\klend\src\utils\prices\scope.rs:124:35: 124:43}, _2: prices::types::Price<uint_types::U256>, _3: prices::types::Price<uint_types::U256>) -> std::option::Option<prices::types::Price<uint_types::U256>> {
    debug acc => _2;
    debug x => _3;
    let mut _0: std::option::Option<utils::prices::types::Price<utils::fraction::uint_types::U256>>;
    let _4: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let _5: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _6: (utils::prices::types::Price<utils::fraction::uint_types::U256>, utils::prices::types::Price<utils::fraction::uint_types::U256>);
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: (u32, bool);
    let mut _12: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _13: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, utils::prices::types::Price<utils::fraction::uint_types::U256>>;
    let mut _14: std::option::Option<utils::prices::types::Price<utils::fraction::uint_types::U256>>;
    let mut _15: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _16: isize;
    let _17: std::option::Option<std::convert::Infallible>;
    let mut _18: !;
    let mut _19: std::option::Option<std::convert::Infallible>;
    let _20: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _21: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _22: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, utils::prices::types::Price<utils::fraction::uint_types::U256>>;
    let mut _23: std::option::Option<utils::prices::types::Price<utils::fraction::uint_types::U256>>;
    let mut _24: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _25: isize;
    let _26: std::option::Option<std::convert::Infallible>;
    let mut _27: !;
    let mut _28: std::option::Option<std::convert::Infallible>;
    let _29: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _30: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _31: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _33: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, utils::fraction::uint_types::U256>;
    let mut _34: std::option::Option<utils::fraction::uint_types::U256>;
    let mut _35: utils::fraction::uint_types::U256;
    let mut _36: utils::fraction::uint_types::U256;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::option::Option<std::convert::Infallible>;
    let mut _43: u32;
    let mut _44: u32;
    let mut _45: (u32, bool);
    let mut _46: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _47: utils::fraction::uint_types::U256;
    let mut _48: u32;
    scope 1 {
        debug current_price => _4;
        debug next_price => _5;
        let _32: utils::fraction::uint_types::U256;
        let _38: std::option::Option<std::convert::Infallible>;
        let _41: utils::fraction::uint_types::U256;
        scope 10 {
            debug value => _32;
            let _42: u32;
            scope 15 {
                debug exp => _42;
            }
        }
        scope 11 {
            debug residual => _38;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _41;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _26;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _29;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = (_2.1: u32);
        StorageLive(_10);
        _10 = (_3.1: u32);
        _11 = CheckedAdd(_9, _10);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _10) -> [success: bb1, unwind continue];
    }

    bb1: {
        _8 = move (_11.0: u32);
        StorageDead(_10);
        StorageDead(_9);
        _7 = Gt(move _8, const _);
        switchInt(move _7) -> [0: bb14, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        _14 = prices::types::Price::<uint_types::U256>::reduce_exp_lossy(move _15, const _) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _13 = <std::option::Option<prices::types::Price<uint_types::U256>> as Try>::branch(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: utils::prices::types::Price<utils::fraction::uint_types::U256>);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _3;
        _23 = prices::types::Price::<uint_types::U256>::reduce_exp_lossy(move _24, const _) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::option::Option<prices::types::Price<uint_types::U256>> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        goto -> bb22;
    }

    bb9: {
        StorageDead(_24);
        _22 = <std::option::Option<prices::types::Price<uint_types::U256>> as Try>::branch(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: utils::prices::types::Price<utils::fraction::uint_types::U256>);
        _21 = _29;
        StorageDead(_29);
        _6 = (move _12, move _21);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_22);
        StorageDead(_13);
        goto -> bb15;
    }

    bb12: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::option::Option<prices::types::Price<uint_types::U256>> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_22);
        goto -> bb22;
    }

    bb14: {
        StorageDead(_8);
        StorageLive(_30);
        _30 = _2;
        StorageLive(_31);
        _31 = _3;
        _6 = (move _30, move _31);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_7);
        StorageLive(_4);
        _4 = (_6.0: utils::prices::types::Price<utils::fraction::uint_types::U256>);
        StorageLive(_5);
        _5 = (_6.1: utils::prices::types::Price<utils::fraction::uint_types::U256>);
        StorageDead(_6);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = (_4.0: utils::fraction::uint_types::U256);
        StorageLive(_36);
        _36 = (_5.0: utils::fraction::uint_types::U256);
        _34 = uint_types::U256::checked_mul(move _35, move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::option::Option<uint_types::U256> as Try>::branch(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb18, 1: bb19, otherwise: bb6];
    }

    bb18: {
        StorageLive(_41);
        _41 = ((_33 as Continue).0: utils::fraction::uint_types::U256);
        _32 = _41;
        StorageDead(_41);
        StorageDead(_33);
        StorageLive(_42);
        StorageLive(_43);
        _43 = (_4.1: u32);
        StorageLive(_44);
        _44 = (_5.1: u32);
        _45 = CheckedAdd(_43, _44);
        assert(!move (_45.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, move _44) -> [success: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_33 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::option::Option<prices::types::Price<uint_types::U256>> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb23;
    }

    bb21: {
        _42 = move (_45.0: u32);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _32;
        StorageLive(_48);
        _48 = _42;
        _46 = prices::types::Price::<uint_types::U256> { value: move _47, exp: move _48 };
        StorageDead(_48);
        StorageDead(_47);
        _0 = std::option::Option::<prices::types::Price<uint_types::U256>>::Some(move _46);
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_32);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}
