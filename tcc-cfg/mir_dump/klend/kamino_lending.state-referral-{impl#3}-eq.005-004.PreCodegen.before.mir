// MIR for `referral::<impl at programs\klend\src\state\referral.rs:34:10: 34:19>::eq` before PreCodegen

fn referral::<impl at programs\klend\src\state\referral.rs:34:10: 34:19>::eq(_1: &referral::ReferrerTokenState, _2: &referral::ReferrerTokenState) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let mut _9: bool;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: bool;
    let mut _13: u128;
    let mut _14: u128;
    let mut _15: bool;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: &[u64; 31];
    let mut _19: &[u64; 31];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        _5 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb12, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_8);
        _8 = &((*_2).1: anchor_lang::prelude::Pubkey);
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb11, otherwise: bb4];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: u128);
        StorageLive(_11);
        _11 = ((*_2).2: u128);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb10, otherwise: bb5];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).3: u128);
        StorageLive(_14);
        _14 = ((*_2).3: u128);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb9, otherwise: bb6];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).4: u64);
        StorageLive(_17);
        _17 = ((*_2).4: u64);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        _18 = &((*_1).5: [u64; 31]);
        StorageLive(_19);
        _19 = &((*_2).5: [u64; 31]);
        _0 = <[u64; 31] as PartialEq>::eq(move _18, move _19) -> [return: bb14, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb13;
    }

    bb9: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb13;
    }

    bb10: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb13;
    }

    bb11: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb13;
    }

    bb13: {
        _0 = const false;
        goto -> bb15;
    }

    bb14: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
