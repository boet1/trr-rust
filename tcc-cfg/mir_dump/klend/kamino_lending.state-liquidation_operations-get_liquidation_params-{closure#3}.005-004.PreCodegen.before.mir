// MIR for `get_liquidation_params::{closure#3}` before PreCodegen

fn get_liquidation_params::{closure#3}(_1: {closure@programs\klend\src\state\liquidation_operations.rs:205:21: 205:23}) -> LendingError {
    debug obligation => (*(_1.0: &state::obligation::Obligation));
    let mut _0: LendingError;
    let _2: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[&str; 2];
    let _7: &[&str; 2];
    let _8: [&str; 2];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let mut _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let mut _14: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _15: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _16: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _17: &state::obligation::Obligation;
    let mut _18: &[&str; 2];
    let mut _19: &state::obligation::Obligation;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _18 = const _;
        _7 = &(*_18);
        _6 = &(*_7);
        _5 = move _6 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _19 = deref_copy (_1.0: &state::obligation::Obligation);
        _17 = &(*_19);
        _16 = obligation::Obligation::loan_to_value(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        _12 = [move _13];
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _9 = move _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_10);
        _4 = Arguments::<'_>::new_v1(move _5, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_5);
        _3 = _print(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_4);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_3);
        _2 = const ();
        StorageDead(_2);
        _0 = LendingError::ObligationHealthy;
        return;
    }
}
