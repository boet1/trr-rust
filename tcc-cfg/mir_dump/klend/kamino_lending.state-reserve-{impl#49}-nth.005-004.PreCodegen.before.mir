// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:131:5: 131:20>::nth` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:131:5: 131:20>::nth(_1: &mut ReserveFarmKindIter, _2: usize) -> std::option::Option<reserve::ReserveFarmKind> {
    debug self => _1;
    debug n => _2;
    let mut _0: std::option::Option<state::reserve::ReserveFarmKind>;
    let _3: usize;
    let mut _4: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, usize>;
    let mut _5: std::option::Option<usize>;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: isize;
    let _9: std::option::Option<std::convert::Infallible>;
    let mut _10: !;
    let mut _11: std::option::Option<std::convert::Infallible>;
    let _12: usize;
    let mut _14: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, usize>;
    let mut _15: std::option::Option<usize>;
    let mut _16: usize;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::option::Option<std::convert::Infallible>;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, usize>;
    let mut _25: std::option::Option<usize>;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::option::Option<std::convert::Infallible>;
    let mut _33: usize;
    let mut _34: &state::reserve::ReserveFarmKindIter;
    let mut _35: usize;
    scope 1 {
        debug prev_idx => _3;
        let _13: usize;
        let _18: std::option::Option<std::convert::Infallible>;
        let _21: usize;
        scope 6 {
            debug idx => _13;
            let _29: std::option::Option<std::convert::Infallible>;
            let _32: usize;
            scope 11 {
                debug residual => _29;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _32;
                scope 14 {
                }
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).0: usize);
        StorageLive(_7);
        _7 = _2;
        _5 = core::num::<impl usize>::checked_add(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::option::Option<usize> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: usize);
        _3 = _12;
        StorageDead(_12);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _3;
        _15 = core::num::<impl usize>::checked_add(move _16, const 1_usize) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::option::Option<reserve::ReserveFarmKind> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb22;
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::option::Option<usize> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: usize);
        _13 = _21;
        StorageDead(_21);
        StorageDead(_14);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _13;
        StorageLive(_27);
        _27 = ((*_1).1: usize);
        _25 = core::num::<impl usize>::checked_add(move _26, move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::option::Option<reserve::ReserveFarmKind> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_14);
        goto -> bb21;
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::option::Option<usize> as Try>::branch(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_32);
        _32 = ((_24 as Continue).0: usize);
        _23 = _32;
        StorageDead(_32);
        _22 = Gt(move _23, const 2_usize);
        switchInt(move _22) -> [0: bb18, otherwise: bb17];
    }

    bb15: {
        StorageLive(_29);
        _29 = ((_24 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::option::Option<reserve::ReserveFarmKind> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb21;
    }

    bb17: {
        StorageDead(_24);
        StorageDead(_23);
        ((*_1).0: usize) = const 2_usize;
        _0 = std::option::Option::<reserve::ReserveFarmKind>::None;
        goto -> bb20;
    }

    bb18: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_33);
        _33 = _13;
        ((*_1).0: usize) = move _33;
        StorageDead(_33);
        StorageLive(_34);
        _34 = &(*_1);
        StorageLive(_35);
        _35 = _3;
        _0 = ReserveFarmKindIter::get(move _34, move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_3);
        goto -> bb23;
    }

    bb21: {
        StorageDead(_13);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_3);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}
