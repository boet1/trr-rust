// MIR for `handlers::handler_refresh_obligation_farms_for_reserve::process_impl_refresh_obligation_farms_for_reserve` after PreCodegen

fn handlers::handler_refresh_obligation_farms_for_reserve::process_impl_refresh_obligation_farms_for_reserve(_1: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>, _2: reserve::ReserveFarmKind) -> std::result::Result<(), anchor_lang::error::Error> {
    debug account_ctx => _1;
    debug farm_kind => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: ();
    let mut _13: bool;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let _15: &farms::state::UserState;
    let mut _16: &std::cell::Ref<'_, farms::state::UserState>;
    let _17: std::cell::Ref<'_, farms::state::UserState>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, farms::state::UserState>>;
    let mut _19: std::result::Result<std::cell::Ref<'_, farms::state::UserState>, anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _25: std::cell::Ref<'_, farms::state::UserState>;
    let mut _26: &anchor_lang::prelude::Pubkey;
    let _27: anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _29: !;
    let mut _30: anchor_lang::error::Error;
    let mut _31: anchor_lang::error::Error;
    let mut _32: anchor_lang::error::AnchorError;
    let mut _33: std::string::String;
    let mut _34: &LendingError;
    let _35: LendingError;
    let mut _36: u32;
    let mut _37: LendingError;
    let mut _38: std::string::String;
    let mut _39: &LendingError;
    let _40: LendingError;
    let mut _41: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _42: anchor_lang::error::ErrorOrigin;
    let mut _43: anchor_lang::error::Source;
    let mut _44: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _45: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _46: anchor_lang::prelude::Pubkey;
    let mut _47: &farms::state::UserState;
    let mut _48: &std::cell::Ref<'_, farms::state::UserState>;
    let _49: std::cell::Ref<'_, farms::state::UserState>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, farms::state::UserState>>;
    let mut _51: std::result::Result<std::cell::Ref<'_, farms::state::UserState>, anchor_lang::error::Error>;
    let mut _52: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _57: std::cell::Ref<'_, farms::state::UserState>;
    let mut _58: anchor_lang::prelude::Pubkey;
    let mut _59: &anchor_lang::prelude::AccountInfo<'_>;
    let _60: ();
    let mut _61: &str;
    let _62: &str;
    let mut _63: &std::string::String;
    let _64: &std::string::String;
    let _65: std::string::String;
    let _66: std::string::String;
    let mut _67: std::fmt::Arguments<'_>;
    let mut _68: &[&str];
    let mut _69: &[&str; 1];
    let _70: &[&str; 1];
    let _71: [&str; 1];
    let mut _72: &[core::fmt::rt::Argument<'_>];
    let mut _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: &state::reserve::ReserveFarmKind;
    let _78: &state::reserve::ReserveFarmKind;
    let _79: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _80: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _82: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _83: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _84: isize;
    let _85: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _88: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _90: anchor_lang::prelude::AccountInfo<'_>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _93: &state::reserve::Reserve;
    let _94: &state::reserve::Reserve;
    let mut _95: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _96: state::reserve::ReserveFarmKind;
    let _97: ();
    let mut _98: bool;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let _101: anchor_lang::prelude::Pubkey;
    let mut _102: !;
    let mut _103: anchor_lang::error::Error;
    let mut _104: LendingError;
    let _105: ();
    let mut _106: bool;
    let mut _107: &anchor_lang::prelude::Pubkey;
    let mut _108: &anchor_lang::prelude::Pubkey;
    let _109: anchor_lang::prelude::Pubkey;
    let mut _110: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _111: !;
    let mut _112: anchor_lang::error::Error;
    let mut _113: anchor_lang::error::Error;
    let mut _114: anchor_lang::error::AnchorError;
    let mut _115: std::string::String;
    let mut _116: &LendingError;
    let _117: LendingError;
    let mut _118: u32;
    let mut _119: LendingError;
    let mut _120: std::string::String;
    let mut _121: &LendingError;
    let _122: LendingError;
    let mut _123: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _124: anchor_lang::error::ErrorOrigin;
    let mut _125: anchor_lang::error::Source;
    let mut _126: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _127: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _128: anchor_lang::prelude::Pubkey;
    let mut _129: anchor_lang::prelude::Pubkey;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _132: bool;
    let mut _133: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _135: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _136: &anchor_lang::prelude::AccountInfo<'_>;
    let _137: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _140: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _141: &utils::account_loader_trait::FatAccountLoader<'_, state::obligation::Obligation>;
    let mut _142: isize;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _147: &state::obligation::Obligation;
    let _148: &state::obligation::Obligation;
    let mut _149: &std::cell::Ref<'_, state::obligation::Obligation>;
    let _150: &std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _151: &anchor_lang::prelude::Pubkey;
    let _152: &anchor_lang::prelude::Pubkey;
    let mut _153: state::reserve::ReserveFarmKind;
    let _154: ();
    let mut _155: &str;
    let _156: &str;
    let mut _157: &std::string::String;
    let _158: &std::string::String;
    let _159: std::string::String;
    let mut _161: std::fmt::Arguments<'_>;
    let mut _162: &[&str];
    let mut _163: &[&str; 2];
    let _164: &[&str; 2];
    let _165: [&str; 2];
    let mut _166: &[core::fmt::rt::Argument<'_>];
    let mut _167: &[core::fmt::rt::Argument<'_>; 2];
    let _168: &[core::fmt::rt::Argument<'_>; 2];
    let _169: [core::fmt::rt::Argument<'_>; 2];
    let mut _170: core::fmt::rt::Argument<'_>;
    let mut _171: &u64;
    let _172: &u64;
    let mut _173: core::fmt::rt::Argument<'_>;
    let mut _174: &u64;
    let _175: &u64;
    let _176: anchor_lang::prelude::Clock;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _178: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _184: ();
    let mut _185: bool;
    let mut _186: u128;
    let mut _187: &farms::state::UserState;
    let mut _188: &std::cell::Ref<'_, farms::state::UserState>;
    let _189: std::cell::Ref<'_, farms::state::UserState>;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, farms::state::UserState>>;
    let mut _191: std::result::Result<std::cell::Ref<'_, farms::state::UserState>, anchor_lang::error::Error>;
    let mut _192: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _198: u128;
    let mut _199: u64;
    let _200: ();
    let mut _201: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _202: std::result::Result<(), anchor_lang::error::Error>;
    let mut _203: &handlers::handler_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserveBase<'_>;
    let mut _204: &state::reserve::Reserve;
    let _205: &state::reserve::Reserve;
    let mut _206: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _207: state::reserve::ReserveFarmKind;
    let mut _208: u64;
    let mut _209: isize;
    let mut _211: !;
    let mut _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _214: ();
    let mut _215: &str;
    let _216: &str;
    let mut _217: ();
    let mut _218: &LendingError;
    let mut _219: &LendingError;
    let mut _223: &[&str; 1];
    let mut _224: &anchor_lang::prelude::Pubkey;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _54;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _57;
        scope 12 {
        }
    }
    scope 13 {
        debug res => _66;
    }
    scope 14 {
        debug reserve => _79;
        let _89: anchor_lang::prelude::Pubkey;
        scope 19 {
            debug reserve_address => _89;
            let _92: anchor_lang::prelude::Pubkey;
            scope 20 {
                debug farm_address => _92;
                let _131: u64;
                let _134: utils::account_loader_trait::FatAccountLoader<'_, state::obligation::Obligation>;
                let mut _220: &LendingError;
                let mut _221: &LendingError;
                scope 21 {
                    debug amount => _131;
                    let _160: std::string::String;
                    let _180: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _183: anchor_lang::prelude::Clock;
                    let _194: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _197: std::cell::Ref<'_, farms::state::UserState>;
                    let _210: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _213: ();
                    let mut _222: &[&str; 2];
                    scope 28 {
                        debug res => _160;
                    }
                    scope 29 {
                        debug residual => _180;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _183;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug residual => _194;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _197;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug residual => _210;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _213;
                        scope 40 {
                        }
                    }
                }
                scope 22 {
                    debug obligation_account => _134;
                    let _138: std::cell::Ref<'_, state::obligation::Obligation>;
                    let _143: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _146: std::cell::Ref<'_, state::obligation::Obligation>;
                    scope 23 {
                        debug obligation => _138;
                    }
                    scope 24 {
                        debug residual => _143;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _146;
                        scope 27 {
                        }
                    }
                }
            }
        }
    }
    scope 15 {
        debug residual => _85;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _88;
        scope 18 {
        }
    }

    bb0: {
        _232 = const false;
        _231 = const false;
        _234 = const false;
        _233 = const false;
        _226 = const false;
        _225 = const false;
        _230 = const false;
        _229 = const false;
        _228 = const false;
        _227 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = refresh_obligation_farms_for_reserve_checks(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb124];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: ());
        _3 = _11;
        StorageDead(_11);
        _235 = discriminant(_4);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>);
        _19 = anchor_lang::prelude::AccountLoader::<'_, UserState>::load(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb141];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _267 = discriminant(_4);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb111;
    }

    bb7: {
        StorageDead(_20);
        _18 = <std::result::Result<Ref<'_, UserState>, anchor_lang::error::Error> as Try>::branch(move _19) -> [return: bb8, unwind: bb124];
    }

    bb8: {
        _233 = const true;
        _234 = const true;
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = move ((_18 as Continue).0: std::cell::Ref<'_, farms::state::UserState>);
        _17 = move _25;
        StorageDead(_25);
        _16 = &_17;
        _15 = <Ref<'_, UserState> as Deref>::deref(move _16) -> [return: bb12, unwind: bb123];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_24);
        _24 = move _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _24) -> [return: bb11, unwind: bb140];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_16);
        _265 = discriminant(_18);
        _233 = const false;
        _234 = const false;
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb110;
    }

    bb12: {
        StorageDead(_16);
        _14 = &((*_15).14: anchor_lang::prelude::Pubkey);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _27 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _28) -> [return: bb13, unwind: bb123];
    }

    bb13: {
        _26 = &_27;
        StorageDead(_28);
        _13 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _14, move _26) -> [return: bb14, unwind: bb123];
    }

    bb14: {
        switchInt(move _13) -> [0: bb28, otherwise: bb15];
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_26);
        drop(_17) -> [return: bb125, unwind: bb140];
    }

    bb16: {
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        _37 = LendingError::InvalidAccountInput;
        _36 = <LendingError as Into<u32>>::into(move _37) -> [return: bb17, unwind: bb122];
    }

    bb17: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _218 = const _;
        _39 = &(*_218);
        _38 = <LendingError as ToString>::to_string(move _39) -> [return: bb18, unwind: bb122];
    }

    bb18: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_obligation_farms_for_reserve.rs", line: const 26_u32 };
        _42 = anchor_lang::error::ErrorOrigin::Source(move _43);
        StorageDead(_43);
        _41 = std::option::Option::<ErrorOrigin>::Some(move _42);
        StorageDead(_42);
        StorageLive(_44);
        _44 = std::option::Option::<ComparedValues>::None;
        _32 = anchor_lang::error::AnchorError { error_name: move _33, error_code_number: move _36, error_msg: move _38, error_origin: move _41, compared_values: move _44 };
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_33);
        _31 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _32) -> [return: bb19, unwind: bb124];
    }

    bb19: {
        _232 = const true;
        StorageDead(_32);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>);
        _51 = anchor_lang::prelude::AccountLoader::<'_, UserState>::load(move _52) -> [return: bb20, unwind: bb121];
    }

    bb20: {
        StorageDead(_52);
        _50 = <std::result::Result<Ref<'_, UserState>, anchor_lang::error::Error> as Try>::branch(move _51) -> [return: bb21, unwind: bb121];
    }

    bb21: {
        _225 = const true;
        _226 = const true;
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_57);
        _57 = move ((_50 as Continue).0: std::cell::Ref<'_, farms::state::UserState>);
        _49 = move _57;
        StorageDead(_57);
        _48 = &_49;
        _47 = <Ref<'_, UserState> as Deref>::deref(move _48) -> [return: bb25, unwind: bb138];
    }

    bb23: {
        StorageLive(_54);
        _54 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _56) -> [return: bb24, unwind: bb120];
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_45);
        drop(_31) -> [return: bb109, unwind: bb139];
    }

    bb25: {
        StorageDead(_48);
        _46 = ((*_47).14: anchor_lang::prelude::Pubkey);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _58 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _59) -> [return: bb26, unwind: bb138];
    }

    bb26: {
        StorageDead(_59);
        _45 = (move _46, move _58);
        StorageDead(_58);
        StorageDead(_46);
        _232 = const false;
        _30 = anchor_lang::error::Error::with_pubkeys(move _31, move _45) -> [return: bb27, unwind: bb138];
    }

    bb27: {
        StorageDead(_45);
        _232 = const false;
        StorageDead(_31);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _30);
        StorageDead(_30);
        drop(_49) -> [return: bb129, unwind: bb139];
    }

    bb28: {
        StorageDead(_27);
        StorageDead(_26);
        drop(_17) -> [return: bb126, unwind: bb140];
    }

    bb29: {
        StorageDead(_77);
        _75 = [move _76];
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = move _73 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_73);
        _67 = Arguments::<'_>::new_v1(move _68, move _72) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_72);
        StorageDead(_68);
        _66 = format(move _67) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_70);
        _65 = move _66;
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = <std::string::String as Deref>::deref(move _63) -> [return: bb32, unwind: bb118];
    }

    bb32: {
        _61 = &(*_62);
        StorageDead(_63);
        _60 = solana_program::log::sol_log(move _61) -> [return: bb33, unwind: bb118];
    }

    bb33: {
        StorageDead(_61);
        drop(_65) -> [return: bb34, unwind: bb124];
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _82 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _83) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_83);
        _81 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb36, unwind: bb124];
    }

    bb36: {
        StorageDead(_82);
        _84 = discriminant(_81);
        switchInt(move _84) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_88);
        _88 = move ((_81 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _80 = move _88;
        StorageDead(_88);
        _79 = &_80;
        _241 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _90 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _91) -> [return: bb40, unwind: bb117];
    }

    bb38: {
        StorageLive(_85);
        _85 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _87) -> [return: bb39, unwind: bb136];
    }

    bb39: {
        StorageDead(_87);
        StorageDead(_85);
        _261 = discriminant(_81);
        StorageDead(_81);
        goto -> bb108;
    }

    bb40: {
        StorageDead(_91);
        _224 = deref_copy (_90.0: &anchor_lang::prelude::Pubkey);
        _89 = (*_224);
        drop(_90) -> [return: bb41, unwind: bb117];
    }

    bb41: {
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &(*_79);
        _94 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _95) -> [return: bb42, unwind: bb117];
    }

    bb42: {
        _93 = &(*_94);
        StorageDead(_95);
        StorageLive(_96);
        _96 = _2;
        _92 = reserve::Reserve::get_farm(move _93, move _96) -> [return: bb43, unwind: bb117];
    }

    bb43: {
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_92;
        StorageLive(_100);
        StorageLive(_101);
        _101 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb44, unwind: bb117];
    }

    bb44: {
        _100 = &_101;
        _98 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _99, move _100) -> [return: bb45, unwind: bb117];
    }

    bb45: {
        switchInt(move _98) -> [0: bb48, otherwise: bb46];
    }

    bb46: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_103);
        StorageLive(_104);
        _104 = LendingError::NoFarmForReserve;
        _103 = <LendingError as Into<anchor_lang::error::Error>>::into(move _104) -> [return: bb47, unwind: bb117];
    }

    bb47: {
        StorageDead(_104);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _103);
        StorageDead(_103);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb107;
    }

    bb48: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        _97 = const ();
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_92;
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _109 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _110) -> [return: bb49, unwind: bb117];
    }

    bb49: {
        _108 = &_109;
        StorageDead(_110);
        _106 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _107, move _108) -> [return: bb50, unwind: bb117];
    }

    bb50: {
        switchInt(move _106) -> [0: bb58, otherwise: bb51];
    }

    bb51: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _221 = const _;
        _116 = &(*_221);
        _115 = LendingError::name(move _116) -> [return: bb52, unwind: bb117];
    }

    bb52: {
        StorageDead(_116);
        StorageLive(_118);
        StorageLive(_119);
        _119 = LendingError::InvalidAccountInput;
        _118 = <LendingError as Into<u32>>::into(move _119) -> [return: bb53, unwind: bb116];
    }

    bb53: {
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        _220 = const _;
        _121 = &(*_220);
        _120 = <LendingError as ToString>::to_string(move _121) -> [return: bb54, unwind: bb116];
    }

    bb54: {
        StorageDead(_121);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_obligation_farms_for_reserve.rs", line: const 41_u32 };
        _124 = anchor_lang::error::ErrorOrigin::Source(move _125);
        StorageDead(_125);
        _123 = std::option::Option::<ErrorOrigin>::Some(move _124);
        StorageDead(_124);
        StorageLive(_126);
        _126 = std::option::Option::<ComparedValues>::None;
        _114 = anchor_lang::error::AnchorError { error_name: move _115, error_code_number: move _118, error_msg: move _120, error_origin: move _123, compared_values: move _126 };
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_115);
        _113 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _114) -> [return: bb55, unwind: bb117];
    }

    bb55: {
        _231 = const true;
        StorageDead(_114);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _92;
        StorageLive(_129);
        StorageLive(_130);
        _130 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _129 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _130) -> [return: bb56, unwind: bb135];
    }

    bb56: {
        StorageDead(_130);
        _127 = (move _128, move _129);
        StorageDead(_129);
        StorageDead(_128);
        _231 = const false;
        _112 = anchor_lang::error::Error::with_pubkeys(move _113, move _127) -> [return: bb57, unwind: bb135];
    }

    bb57: {
        StorageDead(_127);
        _231 = const false;
        StorageDead(_113);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _112);
        StorageDead(_112);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb107;
    }

    bb58: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        _105 = const ();
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _132 = anchor_lang::prelude::AccountInfo::<'_>::data_is_empty(move _133) -> [return: bb59, unwind: bb117];
    }

    bb59: {
        switchInt(move _132) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        StorageDead(_133);
        _131 = const 0_u64;
        goto -> bb73;
    }

    bb61: {
        StorageDead(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _136 = &(*_137);
        _135 = account_loader_trait::FatAccountLoader::<'_, obligation::Obligation>::try_from(move _136) -> [return: bb62, unwind: bb117];
    }

    bb62: {
        StorageDead(_136);
        _134 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error>::unwrap(move _135) -> [return: bb63, unwind: bb117];
    }

    bb63: {
        StorageDead(_135);
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_134;
        _140 = account_loader_trait::FatAccountLoader::<'_, obligation::Obligation>::load(move _141) -> [return: bb64, unwind: bb115];
    }

    bb64: {
        StorageDead(_141);
        _139 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _140) -> [return: bb65, unwind: bb115];
    }

    bb65: {
        StorageDead(_140);
        _142 = discriminant(_139);
        switchInt(move _142) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_146);
        _146 = move ((_139 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _138 = move _146;
        StorageDead(_146);
        _243 = discriminant(_139);
        StorageDead(_139);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_138;
        _149 = &(*_150);
        _148 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _149) -> [return: bb69, unwind: bb114];
    }

    bb67: {
        StorageLive(_143);
        _143 = move ((_139 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_145);
        _145 = move _143;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _145) -> [return: bb68, unwind: bb133];
    }

    bb68: {
        StorageDead(_145);
        StorageDead(_143);
        _259 = discriminant(_139);
        StorageDead(_139);
        StorageDead(_138);
        drop(_134) -> [return: bb105, unwind: bb117];
    }

    bb69: {
        _147 = &(*_148);
        StorageDead(_149);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_89;
        _151 = &(*_152);
        StorageLive(_153);
        _153 = _2;
        _131 = amount_for_obligation(move _147, move _151, move _153) -> [return: bb70, unwind: bb114];
    }

    bb70: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_147);
        drop(_138) -> [return: bb71, unwind: bb115];
    }

    bb71: {
        StorageDead(_138);
        drop(_134) -> [return: bb72, unwind: bb117];
    }

    bb72: {
        StorageDead(_134);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_148);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_132);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _222 = const _;
        _164 = &(*_222);
        _163 = &(*_164);
        _162 = move _163 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_163);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_131;
        _171 = &(*_172);
        _170 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _171) -> [return: bb74, unwind: bb117];
    }

    bb74: {
        StorageDead(_171);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb75, unwind: bb117];
    }

    bb75: {
        _177 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _178) -> [return: bb76, unwind: bb117];
    }

    bb76: {
        _229 = const true;
        _230 = const true;
        StorageDead(_178);
        _179 = discriminant(_177);
        switchInt(move _179) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        StorageLive(_183);
        _183 = move ((_177 as Continue).0: anchor_lang::prelude::Clock);
        _176 = move _183;
        StorageDead(_183);
        _175 = &(_176.0: u64);
        _174 = &(*_175);
        _173 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _174) -> [return: bb80, unwind: bb132];
    }

    bb78: {
        StorageLive(_180);
        _180 = move ((_177 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_182);
        _182 = move _180;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _182) -> [return: bb79, unwind: bb132];
    }

    bb79: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_162);
        StorageDead(_161);
        _257 = discriminant(_177);
        _229 = const false;
        _230 = const false;
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_164);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        goto -> bb106;
    }

    bb80: {
        StorageDead(_174);
        _169 = [move _170, move _173];
        StorageDead(_173);
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = move _167 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_167);
        _161 = Arguments::<'_>::new_v1(move _162, move _166) -> [return: bb81, unwind: bb132];
    }

    bb81: {
        StorageDead(_166);
        StorageDead(_162);
        _160 = format(move _161) -> [return: bb82, unwind: bb132];
    }

    bb82: {
        StorageDead(_161);
        _245 = discriminant(_177);
        _229 = const false;
        _230 = const false;
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_164);
        _159 = move _160;
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = <std::string::String as Deref>::deref(move _157) -> [return: bb83, unwind: bb113];
    }

    bb83: {
        _155 = &(*_156);
        StorageDead(_157);
        _154 = solana_program::log::sol_log(move _155) -> [return: bb84, unwind: bb113];
    }

    bb84: {
        StorageDead(_155);
        drop(_159) -> [return: bb85, unwind: bb117];
    }

    bb85: {
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &((*_1).4: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>);
        _191 = anchor_lang::prelude::AccountLoader::<'_, UserState>::load(move _192) -> [return: bb86, unwind: bb117];
    }

    bb86: {
        StorageDead(_192);
        _190 = <std::result::Result<Ref<'_, UserState>, anchor_lang::error::Error> as Try>::branch(move _191) -> [return: bb87, unwind: bb117];
    }

    bb87: {
        _227 = const true;
        _228 = const true;
        StorageDead(_191);
        _193 = discriminant(_190);
        switchInt(move _193) -> [0: bb88, 1: bb89, otherwise: bb4];
    }

    bb88: {
        StorageLive(_197);
        _197 = move ((_190 as Continue).0: std::cell::Ref<'_, farms::state::UserState>);
        _189 = move _197;
        StorageDead(_197);
        _188 = &_189;
        _187 = <Ref<'_, UserState> as Deref>::deref(move _188) -> [return: bb91, unwind: bb112];
    }

    bb89: {
        StorageLive(_194);
        _194 = move ((_190 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_196);
        _196 = move _194;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _196) -> [return: bb90, unwind: bb131];
    }

    bb90: {
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_188);
        _255 = discriminant(_190);
        _227 = const false;
        _228 = const false;
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb104;
    }

    bb91: {
        StorageDead(_188);
        _186 = ((*_187).8: u128);
        StorageLive(_198);
        StorageLive(_199);
        _199 = _131;
        _198 = <u128 as From<u64>>::from(move _199) -> [return: bb92, unwind: bb112];
    }

    bb92: {
        StorageDead(_199);
        _185 = Ne(move _186, move _198);
        switchInt(move _185) -> [0: bb100, otherwise: bb93];
    }

    bb93: {
        StorageDead(_198);
        drop(_189) -> [return: bb127, unwind: bb131];
    }

    bb94: {
        _204 = &(*_205);
        StorageDead(_206);
        StorageLive(_207);
        _207 = _2;
        StorageLive(_208);
        _208 = _131;
        _202 = cpi_set_stake_delegated(move _203, move _204, move _207, move _208) -> [return: bb95, unwind: bb117];
    }

    bb95: {
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        _201 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _202) -> [return: bb96, unwind: bb117];
    }

    bb96: {
        StorageDead(_202);
        _209 = discriminant(_201);
        switchInt(move _209) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        StorageLive(_213);
        _213 = ((_201 as Continue).0: ());
        _200 = _213;
        StorageDead(_213);
        _249 = discriminant(_201);
        StorageDead(_205);
        StorageDead(_201);
        StorageDead(_200);
        _184 = const ();
        goto -> bb102;
    }

    bb98: {
        StorageLive(_210);
        _210 = move ((_201 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_212);
        _212 = move _210;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _212) -> [return: bb99, unwind: bb130];
    }

    bb99: {
        StorageDead(_212);
        StorageDead(_210);
        _253 = discriminant(_201);
        StorageDead(_205);
        StorageDead(_201);
        StorageDead(_200);
        goto -> bb104;
    }

    bb100: {
        StorageDead(_198);
        drop(_189) -> [return: bb128, unwind: bb131];
    }

    bb101: {
        StorageDead(_215);
        StorageDead(_216);
        StorageDead(_214);
        _184 = const ();
        goto -> bb102;
    }

    bb102: {
        StorageDead(_185);
        StorageDead(_184);
        StorageLive(_217);
        _217 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _217);
        StorageDead(_217);
        StorageDead(_131);
        StorageDead(_92);
        StorageDead(_89);
        drop(_80) -> [return: bb103, unwind: bb124];
    }

    bb103: {
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb111;
    }

    bb104: {
        StorageDead(_185);
        StorageDead(_184);
        goto -> bb106;
    }

    bb105: {
        StorageDead(_134);
        StorageDead(_132);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_131);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_92);
        StorageDead(_89);
        drop(_80) -> [return: bb108, unwind: bb124];
    }

    bb108: {
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb111;
    }

    bb109: {
        _232 = const false;
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb129;
    }

    bb110: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb111;
    }

    bb111: {
        return;
    }

    bb112 (cleanup): {
        drop(_189) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_159) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_138) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_134) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_115) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_80) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_65) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_49) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_31) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_31) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_33) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_17) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        resume;
    }

    bb125: {
        _237 = discriminant(_18);
        _233 = const false;
        _234 = const false;
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _219 = const _;
        _34 = &(*_219);
        _33 = LendingError::name(move _34) -> [return: bb16, unwind continue];
    }

    bb126: {
        _239 = discriminant(_18);
        _233 = const false;
        _234 = const false;
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        _12 = const ();
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _223 = const _;
        _70 = &(*_223);
        _69 = &(*_70);
        _68 = move _69 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_2;
        _77 = &(*_78);
        _76 = core::fmt::rt::Argument::<'_>::new_debug::<reserve::ReserveFarmKind>(move _77) -> [return: bb29, unwind continue];
    }

    bb127: {
        _247 = discriminant(_190);
        _227 = const false;
        _228 = const false;
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &(*_1);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &(*_79);
        _205 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _206) -> [return: bb94, unwind: bb117];
    }

    bb128: {
        _251 = discriminant(_190);
        _227 = const false;
        _228 = const false;
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = const "Farm stake is unchanged, skipping update";
        _215 = &(*_216);
        _214 = solana_program::log::sol_log(move _215) -> [return: bb101, unwind: bb117];
    }

    bb129: {
        _263 = discriminant(_50);
        _225 = const false;
        _226 = const false;
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb110;
    }

    bb130 (cleanup): {
        _269 = discriminant(_201);
        goto -> bb117;
    }

    bb131 (cleanup): {
        _270 = discriminant(_190);
        goto -> bb117;
    }

    bb132 (cleanup): {
        _271 = discriminant(_177);
        goto -> bb117;
    }

    bb133 (cleanup): {
        _272 = discriminant(_139);
        goto -> bb115;
    }

    bb134 (cleanup): {
        drop(_113) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        switchInt(_231) -> [0: bb117, otherwise: bb134];
    }

    bb136 (cleanup): {
        _273 = discriminant(_81);
        goto -> bb124;
    }

    bb137 (cleanup): {
        drop(_31) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        switchInt(_232) -> [0: bb119, otherwise: bb137];
    }

    bb139 (cleanup): {
        _274 = discriminant(_50);
        goto -> bb124;
    }

    bb140 (cleanup): {
        _275 = discriminant(_18);
        goto -> bb124;
    }

    bb141 (cleanup): {
        _276 = discriminant(_4);
        goto -> bb124;
    }
}
