// MIR for `get_elevation_group` before PreCodegen

fn get_elevation_group(_1: u8, _2: &state::lending_market::LendingMarket) -> std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> {
    debug elevation_group_id => _1;
    debug market => _2;
    let mut _0: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u8;
    let mut _6: !;
    let mut _7: anchor_lang::error::Error;
    let mut _8: anchor_lang::error::AnchorError;
    let mut _9: std::string::String;
    let mut _10: &LendingError;
    let _11: LendingError;
    let mut _12: u32;
    let mut _13: LendingError;
    let mut _14: std::string::String;
    let mut _15: &LendingError;
    let _16: LendingError;
    let mut _17: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _18: anchor_lang::error::ErrorOrigin;
    let mut _19: anchor_lang::error::Source;
    let mut _20: std::option::Option<anchor_lang::error::ComparedValues>;
    let _21: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&state::lending_market::ElevationGroup>>;
    let mut _23: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _24: &state::lending_market::LendingMarket;
    let mut _25: u8;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _30: std::option::Option<&state::lending_market::ElevationGroup>;
    let _31: ();
    let mut _32: isize;
    let _34: ();
    let mut _35: bool;
    let mut _36: u8;
    let mut _37: !;
    let mut _38: anchor_lang::error::Error;
    let mut _39: anchor_lang::error::Error;
    let mut _40: anchor_lang::error::AnchorError;
    let mut _41: std::string::String;
    let mut _42: &LendingError;
    let _43: LendingError;
    let mut _44: u32;
    let mut _45: LendingError;
    let mut _46: std::string::String;
    let mut _47: &LendingError;
    let _48: LendingError;
    let mut _49: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _50: anchor_lang::error::ErrorOrigin;
    let mut _51: anchor_lang::error::Source;
    let mut _52: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _53: (u8, i32);
    let mut _54: u8;
    let _55: ();
    let mut _56: bool;
    let mut _57: u8;
    let mut _58: !;
    let mut _59: anchor_lang::error::Error;
    let mut _60: anchor_lang::error::Error;
    let mut _61: anchor_lang::error::AnchorError;
    let mut _62: std::string::String;
    let mut _63: &LendingError;
    let _64: LendingError;
    let mut _65: u32;
    let mut _66: LendingError;
    let mut _67: std::string::String;
    let mut _68: &LendingError;
    let _69: LendingError;
    let mut _70: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _71: anchor_lang::error::ErrorOrigin;
    let mut _72: anchor_lang::error::Source;
    let mut _73: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _74: (u8, i32);
    let mut _75: u8;
    let mut _76: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _77: &LendingError;
    let mut _78: &LendingError;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    scope 1 {
        debug elevation_group => _21;
        scope 6 {
            debug elevation_group => _33;
            let _33: &state::lending_market::ElevationGroup;
            let mut _79: &LendingError;
            let mut _80: &LendingError;
            let mut _81: &LendingError;
            let mut _82: &LendingError;
        }
    }
    scope 2 {
        debug residual => _27;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _30;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _4 = Gt(move _5, const _);
        switchInt(move _4) -> [0: bb6, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _78 = const _;
        _10 = &(*_78);
        _9 = LendingError::name(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = LendingError::InvalidElevationGroup;
        _12 = <LendingError as Into<u32>>::into(move _13) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _77 = const _;
        _15 = &(*_77);
        _14 = <LendingError as ToString>::to_string(move _15) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3103_u32 };
        _18 = anchor_lang::error::ErrorOrigin::Source(move _19);
        StorageDead(_19);
        _17 = std::option::Option::<ErrorOrigin>::Some(move _18);
        StorageDead(_18);
        StorageLive(_20);
        _20 = std::option::Option::<ComparedValues>::None;
        _8 = anchor_lang::error::AnchorError { error_name: move _9, error_code_number: move _12, error_msg: move _14, error_origin: move _17, compared_values: move _20 };
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_9);
        _7 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _8) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        StorageDead(_8);
        _0 = std::result::Result::<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>::Err(move _7);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb32;
    }

    bb6: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_2);
        StorageLive(_25);
        _25 = _1;
        _23 = state::lending_market::LendingMarket::get_elevation_group(move _24, move _25) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: std::option::Option<&state::lending_market::ElevationGroup>);
        _21 = _30;
        StorageDead(_30);
        _83 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_31);
        _32 = discriminant(_21);
        switchInt(move _32) -> [1: bb13, otherwise: bb28];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_27);
        _27 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _29) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_27);
        _85 = discriminant(_22);
        StorageDead(_22);
        goto -> bb31;
    }

    bb13: {
        StorageLive(_33);
        _33 = ((_21 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_33).3: u8);
        _35 = Eq(move _36, const 0_u8);
        switchInt(move _35) -> [0: bb20, otherwise: bb14];
    }

    bb14: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _80 = const _;
        _42 = &(*_80);
        _41 = LendingError::name(move _42) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        _45 = LendingError::InvalidElevationGroup;
        _44 = <LendingError as Into<u32>>::into(move _45) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _79 = const _;
        _47 = &(*_79);
        _46 = <LendingError as ToString>::to_string(move _47) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3110_u32 };
        _50 = anchor_lang::error::ErrorOrigin::Source(move _51);
        StorageDead(_51);
        _49 = std::option::Option::<ErrorOrigin>::Some(move _50);
        StorageDead(_50);
        StorageLive(_52);
        _52 = std::option::Option::<ComparedValues>::None;
        _40 = anchor_lang::error::AnchorError { error_name: move _41, error_code_number: move _44, error_msg: move _46, error_origin: move _49, compared_values: move _52 };
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_41);
        _39 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _40) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        StorageDead(_40);
        StorageLive(_53);
        StorageLive(_54);
        _54 = ((*_33).3: u8);
        _53 = (move _54, const 0_i32);
        StorageDead(_54);
        _38 = anchor_lang::error::Error::with_values::<u8, i32>(move _39, move _53) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_39);
        _0 = std::result::Result::<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>::Err(move _38);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb30;
    }

    bb20: {
        StorageDead(_36);
        _34 = const ();
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = ((*_33).2: u8);
        _56 = Eq(move _57, const 0_u8);
        switchInt(move _56) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_57);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _82 = const _;
        _63 = &(*_82);
        _62 = LendingError::name(move _63) -> [return: bb23, unwind continue];
    }

    bb22: {
        StorageDead(_57);
        _55 = const ();
        StorageDead(_56);
        StorageDead(_55);
        _31 = const ();
        StorageDead(_33);
        goto -> bb29;
    }

    bb23: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        _66 = LendingError::InvalidElevationGroup;
        _65 = <LendingError as Into<u32>>::into(move _66) -> [return: bb24, unwind: bb33];
    }

    bb24: {
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _81 = const _;
        _68 = &(*_81);
        _67 = <LendingError as ToString>::to_string(move _68) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3115_u32 };
        _71 = anchor_lang::error::ErrorOrigin::Source(move _72);
        StorageDead(_72);
        _70 = std::option::Option::<ErrorOrigin>::Some(move _71);
        StorageDead(_71);
        StorageLive(_73);
        _73 = std::option::Option::<ComparedValues>::None;
        _61 = anchor_lang::error::AnchorError { error_name: move _62, error_code_number: move _65, error_msg: move _67, error_origin: move _70, compared_values: move _73 };
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_62);
        _60 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _61) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_61);
        StorageLive(_74);
        StorageLive(_75);
        _75 = ((*_33).2: u8);
        _74 = (move _75, const 0_i32);
        StorageDead(_75);
        _59 = anchor_lang::error::Error::with_values::<u8, i32>(move _60, move _74) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_60);
        _0 = std::result::Result::<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>::Err(move _59);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb30;
    }

    bb28: {
        _31 = const ();
        goto -> bb29;
    }

    bb29: {
        StorageDead(_31);
        StorageLive(_76);
        _76 = _21;
        _0 = std::result::Result::<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>::Ok(move _76);
        StorageDead(_76);
        StorageDead(_21);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_21);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_62) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_41) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_9) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }

    bb37 (cleanup): {
        _87 = discriminant(_22);
        goto -> bb36;
    }
}
