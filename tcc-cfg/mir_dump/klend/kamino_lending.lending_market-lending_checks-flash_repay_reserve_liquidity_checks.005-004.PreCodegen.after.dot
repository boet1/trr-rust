digraph Mir_0_1188 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn flash_repay_reserve_liquidity_checks(_1: &amp;ReErased anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity&lt;ReErased&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _2: std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;&gt;;<br align="left"/>let mut _4: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _10: std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let _11: ();<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _14: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _15: &amp;ReErased std::cell::Ref&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let mut _16: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _17: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _18: &amp;ReErased anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;;<br align="left"/>let mut _19: !;<br align="left"/>let _20: ();<br align="left"/>let mut _21: &amp;ReErased str;<br align="left"/>let _22: &amp;ReErased str;<br align="left"/>let mut _23: anchor_lang::error::Error;<br align="left"/>let mut _24: anchor_lang::error::AnchorError;<br align="left"/>let mut _25: std::string::String;<br align="left"/>let mut _26: &amp;ReErased LendingError;<br align="left"/>let _27: LendingError;<br align="left"/>let mut _28: u32;<br align="left"/>let mut _29: LendingError;<br align="left"/>let mut _30: std::string::String;<br align="left"/>let mut _31: &amp;ReErased LendingError;<br align="left"/>let _32: LendingError;<br align="left"/>let mut _33: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _34: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _35: anchor_lang::error::Source;<br align="left"/>let mut _36: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _37: ();<br align="left"/>let mut _38: &amp;ReErased LendingError;<br align="left"/>let mut _39: &amp;ReErased LendingError;<br align="left"/>let mut _40: &amp;ReErased mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity&lt;ReErased&gt;;<br align="left"/>let mut _41: &amp;ReErased mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity&lt;ReErased&gt;;<br align="left"/>let mut _42: std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _43: isize;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: isize;<br align="left"/>let mut _46: isize;<br align="left"/>let mut _47: isize;<br align="left"/>let mut _48: *const anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug reserve =&gt; _2;<br align="left"/>debug residual =&gt; _7;<br align="left"/>debug val =&gt; _10;<br align="left"/>>;
    bb0__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_40 = deref_copy ((*_1).1: &amp;mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity&lt;'_&gt;)<br/>_5 = &amp;((*_40).3: anchor_lang::prelude::AccountLoader&lt;'_, state::reserve::Reserve&gt;)<br/></td></tr><tr><td align="left">_4 = anchor_lang::prelude::AccountLoader::&lt;'_, reserve::Reserve&gt;::load(move _5)</td></tr></table>>];
    bb1__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;Ref&lt;'_, reserve::Reserve&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_3 as Continue).0: std::cell::Ref&lt;'_, state::reserve::Reserve&gt;)<br/>_2 = move _10<br/>StorageDead(_10)<br/>_43 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;_2<br/></td></tr><tr><td align="left">_14 = &lt;Ref&lt;'_, reserve::Reserve&gt; as Deref&gt;::deref(move _15)</td></tr></table>>];
    bb4__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_9)<br/>_9 = move _7<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _9)</td></tr></table>>];
    bb6__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_45 = discriminant(_3)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_13 = &amp;(((*_14).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_41 = deref_copy ((*_1).1: &amp;mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity&lt;'_&gt;)<br/>_42 = deref_copy ((*_41).6: std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;)<br/>_48 = (((_42.0: std::ptr::Unique&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;).0: *const anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;)<br/>_18 = &amp;(*_48)<br/></td></tr><tr><td align="left">_17 = &lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt; as anchor_lang::Key&gt;::key(move _18)</td></tr></table>>];
    bb8__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_16 = &amp;_17<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_12 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _13, move _16)</td></tr></table>>];
    bb9__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb10__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = const &quot;Reserve liquidity supply cannot be used as the source liquidity provided&quot;<br/>_21 = &amp;(*_22)<br/></td></tr><tr><td align="left">_20 = solana_program::log::sol_log(move _21)</td></tr></table>>];
    bb11__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_39 = const _<br/>_26 = &amp;(*_39)<br/></td></tr><tr><td align="left">_25 = LendingError::name(move _26)</td></tr></table>>];
    bb12__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = LendingError::InvalidAccountInput<br/></td></tr><tr><td align="left">_28 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _29)</td></tr></table>>];
    bb13__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_38 = const _<br/>_31 = &amp;(*_38)<br/></td></tr><tr><td align="left">_30 = &lt;LendingError as ToString&gt;::to_string(move _31)</td></tr></table>>];
    bb14__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\lending_market\\lending_checks.rs&quot;, line: const 310_u32 }<br/>_34 = anchor_lang::error::ErrorOrigin::Source(move _35)<br/>StorageDead(_35)<br/>_33 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _34)<br/>StorageDead(_34)<br/>StorageLive(_36)<br/>_36 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_24 = anchor_lang::error::AnchorError { error_name: move _25, error_code_number: move _28, error_msg: move _30, error_origin: move _33, compared_values: move _36 }<br/>StorageDead(_36)<br/>StorageDead(_33)<br/>StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _24)</td></tr></table>>];
    bb15__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _23)<br/>StorageDead(_23)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb16__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>_11 = const ()<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_37)<br/>_37 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _37)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb17__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">return</td></tr></table>>];
    bb20__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_25)</td></tr></table>>];
    bb21__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb22__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb23__0_1188 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left" balign="left">_47 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1188 -> bb1__0_1188 [label="return"];
    bb1__0_1188 -> bb2__0_1188 [label="return"];
    bb1__0_1188 -> bb22__0_1188 [label="unwind"];
    bb2__0_1188 -> bb3__0_1188 [label="0"];
    bb2__0_1188 -> bb5__0_1188 [label="1"];
    bb2__0_1188 -> bb4__0_1188 [label="otherwise"];
    bb3__0_1188 -> bb7__0_1188 [label="return"];
    bb3__0_1188 -> bb21__0_1188 [label="unwind"];
    bb5__0_1188 -> bb6__0_1188 [label="return"];
    bb5__0_1188 -> bb23__0_1188 [label="unwind"];
    bb6__0_1188 -> bb18__0_1188 [label=""];
    bb7__0_1188 -> bb8__0_1188 [label="return"];
    bb7__0_1188 -> bb21__0_1188 [label="unwind"];
    bb8__0_1188 -> bb9__0_1188 [label="return"];
    bb8__0_1188 -> bb21__0_1188 [label="unwind"];
    bb9__0_1188 -> bb16__0_1188 [label="0"];
    bb9__0_1188 -> bb10__0_1188 [label="otherwise"];
    bb10__0_1188 -> bb11__0_1188 [label="return"];
    bb10__0_1188 -> bb21__0_1188 [label="unwind"];
    bb11__0_1188 -> bb12__0_1188 [label="return"];
    bb11__0_1188 -> bb21__0_1188 [label="unwind"];
    bb12__0_1188 -> bb13__0_1188 [label="return"];
    bb12__0_1188 -> bb20__0_1188 [label="unwind"];
    bb13__0_1188 -> bb14__0_1188 [label="return"];
    bb13__0_1188 -> bb20__0_1188 [label="unwind"];
    bb14__0_1188 -> bb15__0_1188 [label="return"];
    bb14__0_1188 -> bb21__0_1188 [label="unwind"];
    bb15__0_1188 -> bb18__0_1188 [label="return"];
    bb15__0_1188 -> bb22__0_1188 [label="unwind"];
    bb16__0_1188 -> bb17__0_1188 [label="return"];
    bb16__0_1188 -> bb22__0_1188 [label="unwind"];
    bb17__0_1188 -> bb19__0_1188 [label=""];
    bb18__0_1188 -> bb19__0_1188 [label=""];
    bb20__0_1188 -> bb21__0_1188 [label="return"];
    bb21__0_1188 -> bb22__0_1188 [label="return"];
    bb23__0_1188 -> bb22__0_1188 [label=""];
}
