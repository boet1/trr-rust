digraph Mir_0_11347 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U256::as_u32(_1: &amp;ReErased utils::fraction::uint_types::U256) -&gt; u32<br align="left"/>let _2: &amp;ReErased [u64; 4_usize];<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: u64;<br align="left"/>let _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: !;<br align="left"/>let _14: !;<br align="left"/>let mut _15: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _16: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _17: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _18: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _19: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _20: u64;<br align="left"/>let mut _21: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let mut _22: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>>;
    bb0__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = &amp;((*_1).0: [u64; 4])<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = uint_types::U256::fits_word(move _5)</td></tr></table>>];
    bb1__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = const 0_usize<br/>_9 = Len((*_2))<br/>_10 = Lt(_8, _9)<br/></td></tr><tr><td align="left">assert(move _10, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _9, _8)</td></tr></table>>];
    bb3__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_7 = (*_2)[_8]<br/>StorageLive(_11)<br/>StorageLive(_12)<br/></td></tr><tr><td align="left">_12 = core::num::&lt;impl u32&gt;::max_value()</td></tr></table>>];
    bb5__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_11 = move _12 as u64 (IntToInt)<br/>StorageDead(_12)<br/>_6 = Gt(move _7, move _11)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb6__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_22 = const _<br/>_18 = &amp;(*_22)<br/>_17 = &amp;(*_18)<br/>_16 = move _17 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = Arguments::&lt;'_&gt;::new_const(move _16)</td></tr></table>>];
    bb7__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = panic_fmt(move _15)</td></tr></table>>];
    bb8__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>_3 = const ()<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;(*_1)<br/></td></tr><tr><td align="left">_20 = uint_types::U256::as_u64(move _21)</td></tr></table>>];
    bb9__0_11347 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_0 = move _20 as u32 (IntToInt)<br/>StorageDead(_20)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11347 -> bb1__0_11347 [label="return"];
    bb1__0_11347 -> bb3__0_11347 [label="0"];
    bb1__0_11347 -> bb2__0_11347 [label="otherwise"];
    bb2__0_11347 -> bb4__0_11347 [label="success"];
    bb3__0_11347 -> bb6__0_11347 [label=""];
    bb4__0_11347 -> bb5__0_11347 [label="return"];
    bb5__0_11347 -> bb8__0_11347 [label="0"];
    bb5__0_11347 -> bb6__0_11347 [label="otherwise"];
    bb6__0_11347 -> bb7__0_11347 [label="return"];
    bb8__0_11347 -> bb9__0_11347 [label="return"];
}
