// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::deposit_liquidity` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::deposit_liquidity(_1: &mut reserve::Reserve, _2: u64, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug liquidity_amount => _2;
    debug collateral_amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &mut state::reserve::ReserveLiquidity;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _16: std::result::Result<(), anchor_lang::error::Error>;
    let mut _17: &mut state::reserve::ReserveCollateral;
    let mut _18: u64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _23: ();
    let mut _24: ();
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _20;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _23;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut ((*_1).5: state::reserve::ReserveLiquidity);
        StorageLive(_8);
        _8 = _2;
        _6 = ReserveLiquidity::deposit(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _25 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut ((*_1).7: state::reserve::ReserveCollateral);
        StorageLive(_18);
        _18 = _3;
        _16 = ReserveCollateral::mint(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _31 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        StorageDead(_16);
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_15 as Continue).0: ());
        _14 = _23;
        StorageDead(_23);
        _27 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_24);
        _24 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _24);
        StorageDead(_24);
        goto -> bb12;
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _29 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        _33 = discriminant(_15);
        goto -> bb13;
    }

    bb15 (cleanup): {
        _34 = discriminant(_5);
        goto -> bb13;
    }
}
