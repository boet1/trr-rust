// MIR for `post_deposit_and_withdraw_obligation_enforcements` after PreCodegen

fn post_deposit_and_withdraw_obligation_enforcements(_1: &obligation::Obligation, _2: &reserve::Reserve, _3: &state::lending_market::LendingMarket, _4: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug obligation => _1;
    debug withdraw_reserve => _2;
    debug lending_market => _3;
    debug initial_ltv => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _6: u128;
    let mut _8: u128;
    let _9: ();
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: bool;
    let mut _13: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: &i32;
    let _15: i32;
    let mut _16: !;
    let mut _17: anchor_lang::error::Error;
    let mut _18: anchor_lang::error::AnchorError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: u32;
    let mut _23: LendingError;
    let mut _24: std::string::String;
    let mut _25: &LendingError;
    let _26: LendingError;
    let mut _27: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _28: anchor_lang::error::ErrorOrigin;
    let mut _29: anchor_lang::error::Source;
    let mut _30: std::option::Option<anchor_lang::error::ComparedValues>;
    let _31: ();
    let mut _32: bool;
    let mut _33: u8;
    let mut _34: u8;
    let mut _35: bool;
    let mut _36: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _37: &i32;
    let _38: i32;
    let mut _39: !;
    let mut _40: anchor_lang::error::Error;
    let mut _41: anchor_lang::error::AnchorError;
    let mut _42: std::string::String;
    let mut _43: &LendingError;
    let _44: LendingError;
    let mut _45: u32;
    let mut _46: LendingError;
    let mut _47: std::string::String;
    let mut _48: &LendingError;
    let _49: LendingError;
    let mut _50: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _51: anchor_lang::error::ErrorOrigin;
    let mut _52: anchor_lang::error::Source;
    let mut _53: std::option::Option<anchor_lang::error::ComparedValues>;
    let _54: ();
    let mut _55: bool;
    let mut _56: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _57: &i32;
    let _58: i32;
    let mut _60: &state::obligation::Obligation;
    let mut _62: &state::obligation::Obligation;
    let _63: ();
    let mut _64: bool;
    let mut _65: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _66: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _67: !;
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 2];
    let _78: &[&str; 2];
    let _79: [&str; 2];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 2];
    let _82: &[core::fmt::rt::Argument<'_>; 2];
    let _83: [core::fmt::rt::Argument<'_>; 2];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &utils::fraction::FractionDisplay<'_>;
    let _86: &utils::fraction::FractionDisplay<'_>;
    let _87: utils::fraction::FractionDisplay<'_>;
    let mut _88: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &utils::fraction::FractionDisplay<'_>;
    let _91: &utils::fraction::FractionDisplay<'_>;
    let _92: utils::fraction::FractionDisplay<'_>;
    let mut _93: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _94: anchor_lang::error::Error;
    let mut _95: anchor_lang::error::AnchorError;
    let mut _96: std::string::String;
    let mut _97: &LendingError;
    let _98: LendingError;
    let mut _99: u32;
    let mut _100: LendingError;
    let mut _101: std::string::String;
    let mut _102: &LendingError;
    let _103: LendingError;
    let mut _104: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _105: anchor_lang::error::ErrorOrigin;
    let mut _106: anchor_lang::error::Source;
    let mut _107: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _108: bool;
    let mut _109: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _110: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _111: !;
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: &std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[&str; 2];
    let _122: &[&str; 2];
    let _123: [&str; 2];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let mut _125: &[core::fmt::rt::Argument<'_>; 2];
    let _126: &[core::fmt::rt::Argument<'_>; 2];
    let _127: [core::fmt::rt::Argument<'_>; 2];
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &utils::fraction::FractionDisplay<'_>;
    let _130: &utils::fraction::FractionDisplay<'_>;
    let _131: utils::fraction::FractionDisplay<'_>;
    let mut _132: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _133: core::fmt::rt::Argument<'_>;
    let mut _134: &utils::fraction::FractionDisplay<'_>;
    let _135: &utils::fraction::FractionDisplay<'_>;
    let _136: utils::fraction::FractionDisplay<'_>;
    let mut _137: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _138: anchor_lang::error::Error;
    let mut _139: anchor_lang::error::AnchorError;
    let mut _140: std::string::String;
    let mut _141: &LendingError;
    let _142: LendingError;
    let mut _143: u32;
    let mut _144: LendingError;
    let mut _145: std::string::String;
    let mut _146: &LendingError;
    let _147: LendingError;
    let mut _148: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _149: anchor_lang::error::ErrorOrigin;
    let mut _150: anchor_lang::error::Source;
    let mut _151: std::option::Option<anchor_lang::error::ComparedValues>;
    let _152: ();
    let mut _153: bool;
    let mut _154: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _155: &i32;
    let _156: i32;
    let mut _157: bool;
    let mut _158: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _159: &i32;
    let _160: i32;
    let mut _161: !;
    let _162: ();
    let mut _163: &str;
    let _164: &str;
    let mut _165: &std::string::String;
    let _166: &std::string::String;
    let _167: std::string::String;
    let mut _169: std::fmt::Arguments<'_>;
    let mut _170: &[&str];
    let mut _171: &[&str; 2];
    let _172: &[&str; 2];
    let _173: [&str; 2];
    let mut _174: &[core::fmt::rt::Argument<'_>];
    let mut _175: &[core::fmt::rt::Argument<'_>; 2];
    let _176: &[core::fmt::rt::Argument<'_>; 2];
    let _177: [core::fmt::rt::Argument<'_>; 2];
    let mut _178: core::fmt::rt::Argument<'_>;
    let mut _179: &utils::fraction::FractionDisplay<'_>;
    let _180: &utils::fraction::FractionDisplay<'_>;
    let _181: utils::fraction::FractionDisplay<'_>;
    let mut _182: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _183: core::fmt::rt::Argument<'_>;
    let mut _184: &utils::fraction::FractionDisplay<'_>;
    let _185: &utils::fraction::FractionDisplay<'_>;
    let _186: utils::fraction::FractionDisplay<'_>;
    let mut _187: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _188: anchor_lang::error::Error;
    let mut _189: anchor_lang::error::AnchorError;
    let mut _190: std::string::String;
    let mut _191: &LendingError;
    let _192: LendingError;
    let mut _193: u32;
    let mut _194: LendingError;
    let mut _195: std::string::String;
    let mut _196: &LendingError;
    let _197: LendingError;
    let mut _198: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _199: anchor_lang::error::ErrorOrigin;
    let mut _200: anchor_lang::error::Source;
    let mut _201: std::option::Option<anchor_lang::error::ComparedValues>;
    let _202: ();
    let mut _203: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&state::lending_market::ElevationGroup>>;
    let mut _205: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _206: u8;
    let mut _207: &state::lending_market::LendingMarket;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _213: isize;
    let _215: ();
    let mut _216: bool;
    let mut _217: usize;
    let mut _218: u8;
    let mut _219: usize;
    let mut _220: &state::obligation::Obligation;
    let mut _221: !;
    let mut _222: anchor_lang::error::Error;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::AnchorError;
    let mut _225: std::string::String;
    let mut _226: &LendingError;
    let _227: LendingError;
    let mut _228: u32;
    let mut _229: LendingError;
    let mut _230: std::string::String;
    let mut _231: &LendingError;
    let _232: LendingError;
    let mut _233: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _234: anchor_lang::error::ErrorOrigin;
    let mut _235: anchor_lang::error::Source;
    let mut _236: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _237: (usize, usize);
    let mut _238: usize;
    let mut _239: u8;
    let mut _240: usize;
    let mut _241: &state::obligation::Obligation;
    let mut _242: ();
    let mut _263: bool;
    let mut _264: bool;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    scope 1 {
        debug debt_value => _5;
        let _7: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug new_total_deposited_mv => _7;
            let _59: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            let _168: std::string::String;
            let mut _243: &LendingError;
            let mut _244: &LendingError;
            let mut _245: &LendingError;
            let mut _246: &LendingError;
            let mut _253: &LendingError;
            let mut _254: &LendingError;
            let mut _255: &[&str; 2];
            let mut _258: &i32;
            let mut _259: &i32;
            let mut _260: &i32;
            let mut _261: &i32;
            let mut _262: &i32;
            scope 3 {
                debug new_unhealthy_ltv => _59;
                let _61: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug new_ltv => _61;
                    let _74: std::string::String;
                    let _118: std::string::String;
                    let mut _247: &LendingError;
                    let mut _248: &LendingError;
                    let mut _249: &[&str; 2];
                    let mut _250: &LendingError;
                    let mut _251: &LendingError;
                    let mut _252: &[&str; 2];
                    scope 5 {
                        debug res => _74;
                    }
                    scope 6 {
                        debug res => _118;
                    }
                }
            }
            scope 7 {
                debug res => _168;
            }
            scope 8 {
                debug elevation_group => _214;
                let _209: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _212: std::option::Option<&state::lending_market::ElevationGroup>;
                let _214: &state::lending_market::ElevationGroup;
                let mut _256: &LendingError;
                let mut _257: &LendingError;
                scope 9 {
                    debug residual => _209;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _212;
                    scope 12 {
                    }
                }
            }
        }
    }

    bb0: {
        _264 = const false;
        _263 = const false;
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).8: u128);
        _5 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).6: u128);
        _7 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).20: u8);
        _10 = Eq(move _11, const 0_u8);
        switchInt(move _10) -> [0: bb11, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_5;
        StorageLive(_14);
        _262 = const _;
        _14 = &(*_262);
        _12 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _12) -> [0: bb10, otherwise: bb5];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _244 = const _;
        _20 = &(*_244);
        _19 = LendingError::name(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = LendingError::ZeroMaxLtvAssetsInDeposits;
        _22 = <LendingError as Into<u32>>::into(move _23) -> [return: bb7, unwind: bb112];
    }

    bb7: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _243 = const _;
        _25 = &(*_243);
        _24 = <LendingError as ToString>::to_string(move _25) -> [return: bb8, unwind: bb112];
    }

    bb8: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2943_u32 };
        _28 = anchor_lang::error::ErrorOrigin::Source(move _29);
        StorageDead(_29);
        _27 = std::option::Option::<ErrorOrigin>::Some(move _28);
        StorageDead(_28);
        StorageLive(_30);
        _30 = std::option::Option::<ComparedValues>::None;
        _18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 };
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        _17 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _18) -> [return: bb9, unwind: bb113];
    }

    bb9: {
        StorageDead(_18);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _17);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb102;
    }

    bb10: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_11);
        goto -> bb12;
    }

    bb12: {
        _9 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = ((*_1).20: u8);
        StorageLive(_34);
        _34 = (((*_2).9: state::reserve::ReserveConfig).7: u8);
        _32 = Lt(move _33, move _34);
        switchInt(move _32) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_5;
        StorageLive(_37);
        _261 = const _;
        _37 = &(*_261);
        _35 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _36, move _37) -> [return: bb15, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb22;
    }

    bb15: {
        switchInt(move _35) -> [0: bb21, otherwise: bb16];
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _246 = const _;
        _43 = &(*_246);
        _42 = LendingError::name(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        _46 = LendingError::LowestLtvAssetsPriority;
        _45 = <LendingError as Into<u32>>::into(move _46) -> [return: bb18, unwind: bb111];
    }

    bb18: {
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _245 = const _;
        _48 = &(*_245);
        _47 = <LendingError as ToString>::to_string(move _48) -> [return: bb19, unwind: bb111];
    }

    bb19: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2950_u32 };
        _51 = anchor_lang::error::ErrorOrigin::Source(move _52);
        StorageDead(_52);
        _50 = std::option::Option::<ErrorOrigin>::Some(move _51);
        StorageDead(_51);
        StorageLive(_53);
        _53 = std::option::Option::<ComparedValues>::None;
        _41 = anchor_lang::error::AnchorError { error_name: move _42, error_code_number: move _45, error_msg: move _47, error_origin: move _50, compared_values: move _53 };
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_42);
        _40 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _41) -> [return: bb20, unwind: bb113];
    }

    bb20: {
        StorageDead(_41);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _40);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb102;
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb22;
    }

    bb22: {
        _31 = const ();
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_7;
        StorageLive(_57);
        _260 = const _;
        _57 = &(*_260);
        _55 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::ne(move _56, move _57) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _55) -> [0: bb59, otherwise: bb24];
    }

    bb24: {
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_1);
        _59 = obligation::Obligation::unhealthy_loan_to_value(move _60) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &(*_1);
        _61 = obligation::Obligation::loan_to_value(move _62) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_61;
        StorageLive(_66);
        _66 = &_4;
        _64 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _65, move _66) -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _64) -> [0: bb42, otherwise: bb28];
    }

    bb28: {
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _249 = const _;
        _78 = &(*_249);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_61;
        _87 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _88) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _85) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_85);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_4;
        _92 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _93) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_93);
        _91 = &_92;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _90) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_90);
        _83 = [move _84, move _89];
        StorageDead(_89);
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_75);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <std::string::String as Deref>::deref(move _71) -> [return: bb35, unwind: bb110];
    }

    bb35: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb36, unwind: bb110];
    }

    bb36: {
        StorageDead(_69);
        drop(_73) -> [return: bb37, unwind: bb113];
    }

    bb37: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _248 = const _;
        _97 = &(*_248);
        _96 = LendingError::name(move _97) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_97);
        StorageLive(_99);
        StorageLive(_100);
        _100 = LendingError::WorseLtvBlocked;
        _99 = <LendingError as Into<u32>>::into(move _100) -> [return: bb39, unwind: bb109];
    }

    bb39: {
        StorageDead(_100);
        StorageLive(_101);
        StorageLive(_102);
        _247 = const _;
        _102 = &(*_247);
        _101 = <LendingError as ToString>::to_string(move _102) -> [return: bb40, unwind: bb109];
    }

    bb40: {
        StorageDead(_102);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2963_u32 };
        _105 = anchor_lang::error::ErrorOrigin::Source(move _106);
        StorageDead(_106);
        _104 = std::option::Option::<ErrorOrigin>::Some(move _105);
        StorageDead(_105);
        StorageLive(_107);
        _107 = std::option::Option::<ComparedValues>::None;
        _95 = anchor_lang::error::AnchorError { error_name: move _96, error_code_number: move _99, error_msg: move _101, error_origin: move _104, compared_values: move _107 };
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_96);
        _94 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _95) -> [return: bb41, unwind: bb113];
    }

    bb41: {
        StorageDead(_95);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _94);
        StorageDead(_94);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb101;
    }

    bb42: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = const ();
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_61;
        StorageLive(_110);
        _110 = &_59;
        _108 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _109, move _110) -> [return: bb43, unwind continue];
    }

    bb43: {
        switchInt(move _108) -> [0: bb58, otherwise: bb44];
    }

    bb44: {
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _252 = const _;
        _122 = &(*_252);
        _121 = &(*_122);
        _120 = move _121 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_61;
        _131 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _132) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _129) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_129);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_59;
        _136 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _137) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _134) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_134);
        _127 = [move _128, move _133];
        StorageDead(_133);
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_125);
        _119 = Arguments::<'_>::new_v1(move _120, move _124) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_120);
        _118 = format(move _119) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_119);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        _117 = move _118;
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = <std::string::String as Deref>::deref(move _115) -> [return: bb51, unwind: bb108];
    }

    bb51: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb52, unwind: bb108];
    }

    bb52: {
        StorageDead(_113);
        drop(_117) -> [return: bb53, unwind: bb113];
    }

    bb53: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _251 = const _;
        _141 = &(*_251);
        _140 = LendingError::name(move _141) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        _144 = LendingError::WorseLtvThanUnhealthyLtv;
        _143 = <LendingError as Into<u32>>::into(move _144) -> [return: bb55, unwind: bb107];
    }

    bb55: {
        StorageDead(_144);
        StorageLive(_145);
        StorageLive(_146);
        _250 = const _;
        _146 = &(*_250);
        _145 = <LendingError as ToString>::to_string(move _146) -> [return: bb56, unwind: bb107];
    }

    bb56: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2972_u32 };
        _149 = anchor_lang::error::ErrorOrigin::Source(move _150);
        StorageDead(_150);
        _148 = std::option::Option::<ErrorOrigin>::Some(move _149);
        StorageDead(_149);
        StorageLive(_151);
        _151 = std::option::Option::<ComparedValues>::None;
        _139 = anchor_lang::error::AnchorError { error_name: move _140, error_code_number: move _143, error_msg: move _145, error_origin: move _148, compared_values: move _151 };
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_140);
        _138 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _139) -> [return: bb57, unwind: bb113];
    }

    bb57: {
        StorageDead(_139);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _138);
        StorageDead(_138);
        StorageDead(_108);
        goto -> bb101;
    }

    bb58: {
        StorageDead(_110);
        StorageDead(_109);
        _54 = const ();
        StorageDead(_108);
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = const ();
        goto -> bb60;
    }

    bb60: {
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &_7;
        StorageLive(_155);
        _259 = const _;
        _155 = &(*_259);
        _153 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::eq(move _154, move _155) -> [return: bb61, unwind continue];
    }

    bb61: {
        switchInt(move _153) -> [0: bb79, otherwise: bb62];
    }

    bb62: {
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_5;
        StorageLive(_159);
        _258 = const _;
        _159 = &(*_258);
        _157 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _158, move _159) -> [return: bb63, unwind continue];
    }

    bb63: {
        switchInt(move _157) -> [0: bb78, otherwise: bb64];
    }

    bb64: {
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _255 = const _;
        _172 = &(*_255);
        _171 = &(*_172);
        _170 = move _171 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_171);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_5;
        _181 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _182) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_182);
        _180 = &_181;
        _179 = &(*_180);
        _178 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _179) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_179);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_7;
        _186 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _187) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _183 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _184) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_184);
        _177 = [move _178, move _183];
        StorageDead(_183);
        StorageDead(_178);
        _176 = &_177;
        _175 = &(*_176);
        _174 = move _175 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_175);
        _169 = Arguments::<'_>::new_v1(move _170, move _174) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_174);
        StorageDead(_170);
        _168 = format(move _169) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_169);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_172);
        _167 = move _168;
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = <std::string::String as Deref>::deref(move _165) -> [return: bb71, unwind: bb106];
    }

    bb71: {
        _163 = &(*_164);
        StorageDead(_165);
        _162 = solana_program::log::sol_log(move _163) -> [return: bb72, unwind: bb106];
    }

    bb72: {
        StorageDead(_163);
        drop(_167) -> [return: bb73, unwind: bb113];
    }

    bb73: {
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _254 = const _;
        _191 = &(*_254);
        _190 = LendingError::name(move _191) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_191);
        StorageLive(_193);
        StorageLive(_194);
        _194 = LendingError::LiabilitiesBiggerThanAssets;
        _193 = <LendingError as Into<u32>>::into(move _194) -> [return: bb75, unwind: bb105];
    }

    bb75: {
        StorageDead(_194);
        StorageLive(_195);
        StorageLive(_196);
        _253 = const _;
        _196 = &(*_253);
        _195 = <LendingError as ToString>::to_string(move _196) -> [return: bb76, unwind: bb105];
    }

    bb76: {
        StorageDead(_196);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2983_u32 };
        _199 = anchor_lang::error::ErrorOrigin::Source(move _200);
        StorageDead(_200);
        _198 = std::option::Option::<ErrorOrigin>::Some(move _199);
        StorageDead(_199);
        StorageLive(_201);
        _201 = std::option::Option::<ComparedValues>::None;
        _189 = anchor_lang::error::AnchorError { error_name: move _190, error_code_number: move _193, error_msg: move _195, error_origin: move _198, compared_values: move _201 };
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_190);
        _188 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _189) -> [return: bb77, unwind: bb113];
    }

    bb77: {
        StorageDead(_189);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _188);
        StorageDead(_188);
        StorageDead(_157);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb102;
    }

    bb78: {
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb80;
    }

    bb80: {
        _152 = const ();
        StorageDead(_157);
        StorageDead(_153);
        StorageDead(_152);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = ((*_1).14: u8);
        StorageLive(_207);
        _207 = &(*_3);
        _205 = get_elevation_group(move _206, move _207) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_207);
        StorageDead(_206);
        _204 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as Try>::branch(move _205) -> [return: bb82, unwind: bb113];
    }

    bb82: {
        _263 = const true;
        StorageDead(_205);
        _208 = discriminant(_204);
        switchInt(move _208) -> [0: bb83, 1: bb85, otherwise: bb84];
    }

    bb83: {
        StorageLive(_212);
        _212 = ((_204 as Continue).0: std::option::Option<&state::lending_market::ElevationGroup>);
        _203 = _212;
        StorageDead(_212);
        _213 = discriminant(_203);
        switchInt(move _213) -> [1: bb88, otherwise: bb87];
    }

    bb84: {
        unreachable;
    }

    bb85: {
        StorageLive(_209);
        _209 = move ((_204 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_211);
        _211 = move _209;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _211) -> [return: bb86, unwind: bb117];
    }

    bb86: {
        StorageDead(_211);
        StorageDead(_209);
        goto -> bb100;
    }

    bb87: {
        _202 = const ();
        goto -> bb114;
    }

    bb88: {
        StorageLive(_214);
        _214 = ((_203 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = ((*_214).5: u8);
        _217 = <usize as From<u8>>::from(move _218) -> [return: bb89, unwind: bb117];
    }

    bb89: {
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &(*_1);
        _219 = obligation::Obligation::active_deposits_count(move _220) -> [return: bb90, unwind: bb117];
    }

    bb90: {
        StorageDead(_220);
        _216 = Lt(move _217, move _219);
        switchInt(move _216) -> [0: bb99, otherwise: bb91];
    }

    bb91: {
        StorageDead(_219);
        StorageDead(_217);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _257 = const _;
        _226 = &(*_257);
        _225 = LendingError::name(move _226) -> [return: bb92, unwind: bb117];
    }

    bb92: {
        StorageDead(_226);
        StorageLive(_228);
        StorageLive(_229);
        _229 = LendingError::ObligationCollateralExceedsElevationGroupLimit;
        _228 = <LendingError as Into<u32>>::into(move _229) -> [return: bb93, unwind: bb104];
    }

    bb93: {
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        _256 = const _;
        _231 = &(*_256);
        _230 = <LendingError as ToString>::to_string(move _231) -> [return: bb94, unwind: bb104];
    }

    bb94: {
        StorageDead(_231);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2991_u32 };
        _234 = anchor_lang::error::ErrorOrigin::Source(move _235);
        StorageDead(_235);
        _233 = std::option::Option::<ErrorOrigin>::Some(move _234);
        StorageDead(_234);
        StorageLive(_236);
        _236 = std::option::Option::<ComparedValues>::None;
        _224 = anchor_lang::error::AnchorError { error_name: move _225, error_code_number: move _228, error_msg: move _230, error_origin: move _233, compared_values: move _236 };
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_225);
        _223 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _224) -> [return: bb95, unwind: bb117];
    }

    bb95: {
        _264 = const true;
        StorageDead(_224);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = ((*_214).5: u8);
        _238 = <usize as From<u8>>::from(move _239) -> [return: bb96, unwind: bb116];
    }

    bb96: {
        StorageDead(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &(*_1);
        _240 = obligation::Obligation::active_deposits_count(move _241) -> [return: bb97, unwind: bb116];
    }

    bb97: {
        StorageDead(_241);
        _237 = (move _238, move _240);
        StorageDead(_240);
        StorageDead(_238);
        _264 = const false;
        _222 = anchor_lang::error::Error::with_values::<usize, usize>(move _223, move _237) -> [return: bb98, unwind: bb116];
    }

    bb98: {
        StorageDead(_237);
        _264 = const false;
        StorageDead(_223);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _222);
        StorageDead(_222);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb100;
    }

    bb99: {
        StorageDead(_219);
        StorageDead(_217);
        _215 = const ();
        StorageDead(_216);
        StorageDead(_215);
        _202 = const ();
        StorageDead(_214);
        goto -> bb114;
    }

    bb100: {
        _267 = discriminant(_204);
        _263 = const false;
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_202);
        goto -> bb102;
    }

    bb101: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb103;
    }

    bb103: {
        return;
    }

    bb104 (cleanup): {
        drop(_225) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_190) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_167) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_140) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_117) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_96) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_73) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_42) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_19) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        resume;
    }

    bb114: {
        _265 = discriminant(_204);
        _263 = const false;
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_242);
        _242 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _242);
        StorageDead(_242);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb103;
    }

    bb115 (cleanup): {
        drop(_223) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_264) -> [0: bb117, otherwise: bb115];
    }

    bb117 (cleanup): {
        _269 = discriminant(_204);
        goto -> bb113;
    }
}
