// MIR for `kamino_lending::liquidate_obligation_and_redeem_reserve_collateral_v2` after PreCodegen

fn kamino_lending::liquidate_obligation_and_redeem_reserve_collateral_v2(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>>, _2: u64, _3: u64, _4: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    debug min_acceptable_received_liquidity_amount => _3;
    debug max_allowed_ltv_override_percent => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _9: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let mut _15: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>>;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _19 = deref_copy (_1.1: &mut handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateralV2<'_>);
        _9 = &(((*_19).0: handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _8 = &(*_9);
        _7 = utils::constraints::emergency_mode_disabled(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _20 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        _15 = move _1;
        StorageLive(_16);
        _16 = _2;
        StorageLive(_17);
        _17 = _3;
        StorageLive(_18);
        _18 = _4;
        _0 = handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_v2(move _15, move _16, move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _22 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _24 = discriminant(_6);
        goto -> bb9;
    }
}
