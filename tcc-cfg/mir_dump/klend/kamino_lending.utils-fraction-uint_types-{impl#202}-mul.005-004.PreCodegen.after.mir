// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:374:3: 374:57>::mul` after PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:374:3: 374:57>::mul(_1: uint_types::U128, _2: &uint_types::U128) -> uint_types::U128 {
    debug self => _1;
    debug other => _2;
    let mut _0: utils::fraction::uint_types::U128;
    let _3: utils::fraction::uint_types::U128;
    let mut _4: utils::fraction::uint_types::U128;
    let mut _7: (utils::fraction::uint_types::U128, bool);
    let mut _8: utils::fraction::uint_types::U128;
    let mut _9: utils::fraction::uint_types::U128;
    let _10: ();
    let mut _11: bool;
    let mut _12: !;
    let _13: !;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[&str; 1];
    let _17: &[&str; 1];
    let _18: [&str; 1];
    scope 1 {
        debug bignum => _3;
        let _5: utils::fraction::uint_types::U128;
        let _6: bool;
        scope 2 {
            debug result => _5;
            debug overflow => _6;
            let mut _19: &[&str; 1];
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = (*_2);
        _3 = <uint_types::U128 as Into<uint_types::U128>>::into(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = _3;
        _7 = uint_types::U128::overflowing_mul(move _8, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_5);
        _5 = (_7.0: utils::fraction::uint_types::U128);
        StorageLive(_6);
        _6 = (_7.1: bool);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        switchInt(move _11) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _19 = const _;
        _17 = &(*_19);
        _16 = &(*_17);
        _15 = move _16 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_16);
        _14 = Arguments::<'_>::new_const(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        _13 = panic_fmt(move _14) -> unwind continue;
    }

    bb5: {
        _10 = const ();
        StorageDead(_11);
        StorageDead(_10);
        _0 = _5;
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }
}
