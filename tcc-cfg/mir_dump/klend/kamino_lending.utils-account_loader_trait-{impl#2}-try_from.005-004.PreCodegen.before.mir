// MIR for `account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:50:1: 50:60>::try_from` before PreCodegen

fn account_loader_trait::<impl at programs\klend\src\utils\account_loader_trait.rs:50:1: 50:60>::try_from(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error> {
    debug acc_info => _1;
    let mut _0: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &&anchor_lang::prelude::Pubkey;
    let mut _5: &&anchor_lang::prelude::Pubkey;
    let _6: &anchor_lang::prelude::Pubkey;
    let _7: anchor_lang::prelude::Pubkey;
    let mut _8: !;
    let mut _9: anchor_lang::error::Error;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::ErrorCode;
    let mut _12: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: anchor_lang::prelude::Pubkey;
    let _15: &[u8];
    let _16: &&mut [u8];
    let mut _17: &std::cell::Ref<'_, &mut [u8]>;
    let _18: &std::cell::Ref<'_, &mut [u8]>;
    let _19: std::cell::Ref<'_, &mut [u8]>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _21: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _22: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _27: std::cell::Ref<'_, &mut [u8]>;
    let _28: ();
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: &[u8];
    let mut _32: usize;
    let mut _33: &[u8];
    let mut _34: &[u8; 8];
    let _35: [u8; 8];
    let mut _36: !;
    let mut _37: anchor_lang::error::Error;
    let mut _38: anchor_lang::error::ErrorCode;
    let _39: ();
    let mut _40: bool;
    let mut _41: &[u8];
    let _42: &[u8];
    let mut _43: &[u8];
    let mut _44: std::ops::Range<usize>;
    let mut _45: &[u8; 8];
    let _46: [u8; 8];
    let mut _47: !;
    let mut _48: anchor_lang::error::Error;
    let mut _49: anchor_lang::error::ErrorCode;
    let mut _50: utils::account_loader_trait::FatAccountLoader<'_, T>;
    let mut _51: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _52: &anchor_lang::prelude::Pubkey;
    let mut _53: &mut [u8];
    let mut _54: bool;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    scope 1 {
        debug data => _15;
    }
    scope 2 {
        debug residual => _24;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _27;
        scope 5 {
        }
    }

    bb0: {
        _54 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = <T as anchor_lang::Owner>::owner() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _5 = &_6;
        _3 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb7, otherwise: bb3];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = AccountOwnedByWrongProgram;
        _54 = const true;
        _10 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _52 = deref_copy ((*_1).3: &anchor_lang::prelude::Pubkey);
        _13 = (*_52);
        StorageLive(_14);
        _14 = <T as anchor_lang::Owner>::owner() -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _12 = (move _13, move _14);
        StorageDead(_14);
        StorageDead(_13);
        _54 = const false;
        _9 = anchor_lang::error::Error::with_pubkeys(move _10, move _12) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        StorageDead(_12);
        _54 = const false;
        StorageDead(_10);
        _0 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>::Err(move _9);
        StorageDead(_9);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb31;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_1);
        _21 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        _20 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _21) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_27);
        _27 = move ((_20 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _19 = move _27;
        StorageDead(_27);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <Ref<'_, &mut [u8]> as Deref>::deref(move _17) -> [return: bb14, unwind: bb32];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_24);
        _24 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <std::result::Result<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _26) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_17);
        _57 = discriminant(_20);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        goto -> bb30;
    }

    bb14: {
        _53 = deref_copy (*_16);
        _15 = &(*_53);
        StorageDead(_17);
        _55 = discriminant(_20);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_15);
        _30 = core::slice::<impl [u8]>::len(move _31) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = <T as Discriminator>::discriminator() -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _34 = &_35;
        _33 = move _34 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_34);
        _32 = core::slice::<impl [u8]>::len(move _33) -> [return: bb17, unwind: bb33];
    }

    bb17: {
        StorageDead(_33);
        _29 = Lt(move _30, move _32);
        switchInt(move _29) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_37);
        StorageLive(_38);
        _38 = AccountDiscriminatorNotFound;
        _37 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _38) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        StorageDead(_38);
        _0 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>::Err(move _37);
        StorageDead(_37);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb29;
    }

    bb20: {
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_30);
        _28 = const ();
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(*_15);
        StorageLive(_44);
        _44 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _42 = <[u8] as Index<std::ops::Range<usize>>>::index(move _43, move _44) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        _41 = &(*_42);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        _46 = <T as Discriminator>::discriminator() -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _45 = &_46;
        _40 = <[u8] as PartialEq<[u8; 8]>>::ne(move _41, move _45) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        switchInt(move _40) -> [0: bb26, otherwise: bb24];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_48);
        StorageLive(_49);
        _49 = AccountDiscriminatorMismatch;
        _48 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _49) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        StorageDead(_49);
        _0 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>::Err(move _48);
        StorageDead(_48);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb29;
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        _39 = const ();
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_1);
        _50 = account_loader_trait::FatAccountLoader::<'_, T>::new(move _51) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        StorageDead(_51);
        _0 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, T>, anchor_lang::error::Error>::Ok(move _50);
        StorageDead(_50);
        drop(_19) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_19);
        StorageDead(_15);
        goto -> bb31;
    }

    bb29: {
        drop(_19) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        StorageDead(_19);
        StorageDead(_15);
        goto -> bb31;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        _59 = discriminant(_20);
        goto -> bb33;
    }

    bb33 (cleanup): {
        drop(_19) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        _60 = discriminant(_20);
        goto -> bb34;
    }

    bb36 (cleanup): {
        drop(_10) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_54) -> [0: bb34, otherwise: bb36];
    }
}
