// MIR for `InstructionLoader::is_forbidden_cpi_call` before PreCodegen

fn InstructionLoader::is_forbidden_cpi_call(_1: &Self) -> std::result::Result<bool, anchor_lang::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<bool, anchor_lang::error::Error>;
    let _2: usize;
    let mut _3: u16;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _5: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _6: &Self;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: u16;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _14: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _15: &Self;
    let mut _16: usize;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _22: bool;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _27: &mut std::slice::Iter<'_, utils::consts::CpiWhitelistedAccount>;
    let mut _28: std::slice::Iter<'_, utils::consts::CpiWhitelistedAccount>;
    let mut _29: &[utils::consts::CpiWhitelistedAccount];
    let mut _30: &[utils::consts::CpiWhitelistedAccount; 16];
    let _31: [utils::consts::CpiWhitelistedAccount; 16];
    let mut _32: {closure@programs\klend\src\lending_market\ix_utils.rs:62:23: 62:32};
    let mut _33: &anchor_lang::prelude::Pubkey;
    let mut _34: isize;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: (usize, bool);
    let mut _41: bool;
    let mut _42: usize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    scope 1 {
        debug current_index => _2;
        let _12: solana_program::instruction::Instruction;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _21: solana_program::instruction::Instruction;
        scope 6 {
            debug current_ixn => _12;
            let _26: std::option::Option<&utils::consts::CpiWhitelistedAccount>;
            let mut _43: &[utils::consts::CpiWhitelistedAccount; 16];
            scope 11 {
                debug whitelisted_account => _26;
                let _35: &utils::consts::CpiWhitelistedAccount;
                scope 12 {
                    debug whitelisted_account => _35;
                }
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = <Self as InstructionLoader>::load_current_index(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u16);
        _3 = _11;
        StorageDead(_11);
        _2 = move _3 as usize (IntToInt);
        StorageDead(_3);
        _44 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_1);
        StorageLive(_16);
        _16 = _2;
        _14 = <Self as InstructionLoader>::load_instruction_at(move _15, move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<bool, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb36];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        _50 = discriminant(_4);
        StorageDead(_4);
        goto -> bb31;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _14) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        StorageDead(_14);
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_13 as Continue).0: solana_program::instruction::Instruction);
        _12 = move _21;
        StorageDead(_21);
        _46 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _23 = &(*_24);
        StorageLive(_25);
        _25 = &(_12.0: anchor_lang::prelude::Pubkey);
        _22 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _23, move _25) -> [return: bb12, unwind: bb33];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<bool, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb35];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _48 = discriminant(_13);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb31;
    }

    bb12: {
        switchInt(move _22) -> [0: bb24, otherwise: bb13];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _43 = const _;
        _30 = &(*_43);
        _29 = move _30 as &[utils::consts::CpiWhitelistedAccount] (PointerCoercion(Unsize));
        StorageDead(_30);
        _28 = core::slice::<impl [CpiWhitelistedAccount]>::iter(move _29) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _27 = &mut _28;
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &(_12.0: anchor_lang::prelude::Pubkey);
        _32 = {closure@programs\klend\src\lending_market\ix_utils.rs:62:23: 62:32} { current_ixn: move _33 };
        StorageDead(_33);
        _26 = <std::slice::Iter<'_, CpiWhitelistedAccount> as Iterator>::find::<{closure@programs\klend\src\lending_market\ix_utils.rs:62:23: 62:32}>(move _27, move _32) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_28);
        _34 = discriminant(_26);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const true);
        goto -> bb23;
    }

    bb17: {
        StorageLive(_35);
        _35 = ((_26 as Some).0: &utils::consts::CpiWhitelistedAccount);
        StorageLive(_36);
        StorageLive(_37);
        _37 = get_stack_height() -> [return: bb18, unwind: bb33];
    }

    bb18: {
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((*_35).1: usize);
        _40 = CheckedAdd(const _, _39);
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, move _39) -> [success: bb19, unwind: bb33];
    }

    bb19: {
        _38 = move (_40.0: usize);
        StorageDead(_39);
        _36 = Gt(move _37, move _38);
        switchInt(move _36) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_37);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const true);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_37);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const false);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_26);
        goto -> bb29;
    }

    bb24: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_41);
        StorageLive(_42);
        _42 = get_stack_height() -> [return: bb25, unwind: bb33];
    }

    bb25: {
        _41 = Gt(move _42, const _);
        switchInt(move _41) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_42);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const true);
        goto -> bb28;
    }

    bb27: {
        StorageDead(_42);
        _0 = std::result::Result::<bool, anchor_lang::error::Error>::Ok(const false);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_41);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_22);
        drop(_12) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        StorageDead(_12);
        StorageDead(_2);
        goto -> bb32;
    }

    bb31: {
        StorageDead(_2);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_12) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        _52 = discriminant(_13);
        goto -> bb34;
    }

    bb36 (cleanup): {
        _53 = discriminant(_4);
        goto -> bb34;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
