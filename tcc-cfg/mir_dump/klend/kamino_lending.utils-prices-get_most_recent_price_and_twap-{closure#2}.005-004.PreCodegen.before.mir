// MIR for `get_most_recent_price_and_twap::{closure#2}` before PreCodegen

fn get_most_recent_price_and_twap::{closure#2}(_1: {closure@programs\klend\src\utils\prices\mod.rs:82:23: 82:26}, _2: &anchor_lang::prelude::AccountInfo<'_>) -> std::option::Option<TimestampedPriceWithTwap> {
    debug a => _2;
    debug token_info => (*(_1.0: &state::token_info::TokenInfo));
    let mut _0: std::option::Option<utils::prices::types::TimestampedPriceWithTwap>;
    let mut _3: std::result::Result<utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error>;
    let mut _4: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: &state::token_info::ScopeConfiguration;
    let _6: &state::token_info::ScopeConfiguration;
    let mut _7: &state::token_info::TokenInfo;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_2);
        StorageLive(_5);
        StorageLive(_6);
        _7 = deref_copy (_1.0: &state::token_info::TokenInfo);
        _6 = &((*_7).5: state::token_info::ScopeConfiguration);
        _5 = &(*_6);
        _3 = get_scope_price_and_twap(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = std::result::Result::<TimestampedPriceWithTwap, anchor_lang::error::Error>::ok(move _3) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_3);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
