digraph Mir_0_609 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn handlers::handler_repay_obligation_liquidity::process_v2(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;ReErased&gt;&gt;, _2: u64) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _5: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity&lt;ReErased&gt;;<br align="left"/>let _7: &amp;ReErased handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity&lt;ReErased&gt;;<br align="left"/>let mut _8: std::slice::Iter&lt;ReErased, anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _9: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _15: ();<br align="left"/>let _16: ();<br align="left"/>let _17: ();<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _19: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _20: utils::refresh_ix_utils::cpi_refresh_farms::RefreshFarmsParams&lt;ReErased, ReErased&gt;;<br align="left"/>let mut _21: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let _22: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::reserve::Reserve&gt;;<br align="left"/>let mut _23: &amp;ReErased handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts&lt;ReErased&gt;;<br align="left"/>let _24: &amp;ReErased handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts&lt;ReErased&gt;;<br align="left"/>let mut _25: state::reserve::ReserveFarmKind;<br align="left"/>let mut _26: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::obligation::Obligation&gt;;<br align="left"/>let _27: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::obligation::Obligation&gt;;<br align="left"/>let mut _28: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let _29: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _30: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::lending_market::LendingMarket&gt;;<br align="left"/>let _31: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::lending_market::LendingMarket&gt;;<br align="left"/>let mut _32: isize;<br align="left"/>let _33: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _36: ();<br align="left"/>let mut _37: ();<br align="left"/>let mut _38: &amp;ReErased mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;ReErased&gt;;<br align="left"/>let mut _39: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _40: &amp;ReErased mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;ReErased&gt;;<br align="left"/>let mut _41: &amp;ReErased mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;ReErased&gt;;<br align="left"/>let mut _42: &amp;ReErased mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;ReErased&gt;;<br align="left"/>let mut _43: &amp;ReErased mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;ReErased&gt;;<br align="left"/>let mut _44: &amp;ReErased mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;ReErased&gt;;<br align="left"/>let mut _45: isize;<br align="left"/>let mut _46: isize;<br align="left"/>let mut _47: isize;<br align="left"/>let mut _48: isize;<br align="left"/>let mut _49: isize;<br align="left"/>let mut _50: isize;<br align="left"/>let mut _51: isize;<br align="left"/>let mut _52: isize;<br align="left"/>let mut _53: isize;<br align="left"/>let mut _54: isize;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug liquidity_amount =&gt; _2;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug residual =&gt; _33;<br align="left"/>debug val =&gt; _36;<br align="left"/>>;
    bb0__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_38 = deref_copy (_1.1: &amp;mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;'_&gt;)<br/>_7 = &amp;((*_38).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity&lt;'_&gt;)<br/>_6 = &amp;(*_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_39 = deref_copy (_1.2: &amp;[anchor_lang::prelude::AccountInfo&lt;'_&gt;])<br/>_9 = &amp;(*_39)<br/></td></tr><tr><td align="left">_8 = core::slice::&lt;impl [anchor_lang::prelude::AccountInfo&lt;'_&gt;]&gt;::iter(move _9)</td></tr></table>>];
    bb1__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>_10 = _2<br/></td></tr><tr><td align="left">_5 = handlers::handler_repay_obligation_liquidity::process_impl::&lt;'_, '_, std::slice::Iter&lt;'_, anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;(move _6, move _8, move _10)</td></tr></table>>];
    bb2__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb3__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_11 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_4 as Continue).0: ())<br/>_3 = _15<br/>StorageDead(_15)<br/>_45 = discriminant(_4)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_40 = deref_copy (_1.1: &amp;mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;'_&gt;)<br/>_22 = &amp;(((*_40).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity&lt;'_&gt;).3: anchor_lang::prelude::AccountLoader&lt;'_, state::reserve::Reserve&gt;)<br/>_21 = &amp;(*_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_41 = deref_copy (_1.1: &amp;mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;'_&gt;)<br/>_24 = &amp;((*_41).1: handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts&lt;'_&gt;)<br/>_23 = &amp;(*_24)<br/>StorageLive(_25)<br/>_25 = reserve::ReserveFarmKind::Debt<br/>_20 = RefreshFarmsParams::&lt;'_, '_&gt; { reserve: move _21, farms_accounts: move _23, farm_kind: move _25 }<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_42 = deref_copy (_1.1: &amp;mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;'_&gt;)<br/>_27 = &amp;(((*_42).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity&lt;'_&gt;).1: anchor_lang::prelude::AccountLoader&lt;'_, state::obligation::Obligation&gt;)<br/>_26 = &amp;(*_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_43 = deref_copy (_1.1: &amp;mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;'_&gt;)<br/>_29 = &amp;((*_43).2: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_28 = &amp;(*_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_44 = deref_copy (_1.1: &amp;mut handlers::handler_repay_obligation_liquidity::RepayObligationLiquidityV2&lt;'_&gt;)<br/>_31 = &amp;(((*_44).0: handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity&lt;'_&gt;).2: anchor_lang::prelude::AccountLoader&lt;'_, state::lending_market::LendingMarket&gt;)<br/>_30 = &amp;(*_31)<br/></td></tr><tr><td align="left">_19 = refresh_ix_utils::cpi_refresh_farms::refresh_obligation_farms_for_reserve::&lt;'_, anchor_lang::prelude::AccountLoader&lt;'_, obligation::Obligation&gt;, anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;(move _20, move _26, move _28, move _30)</td></tr></table>>];
    bb5__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_14)<br/>_14 = move _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb7__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>_51 = discriminant(_4)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb9__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_32 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb10__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_18 as Continue).0: ())<br/>_17 = _36<br/>StorageDead(_36)<br/>_47 = discriminant(_18)<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>_16 = const ()<br/>StorageDead(_16)<br/>StorageLive(_37)<br/>_37 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _37)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = move ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_35)<br/>_35 = move _33<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _35)</td></tr></table>>];
    bb12__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_33)<br/>_49 = discriminant(_18)<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb14__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb15__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left" balign="left">_53 = discriminant(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_609 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left" balign="left">_54 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_609 -> bb1__0_609 [label="return"];
    bb1__0_609 -> bb2__0_609 [label="return"];
    bb2__0_609 -> bb3__0_609 [label="return"];
    bb2__0_609 -> bb14__0_609 [label="unwind"];
    bb3__0_609 -> bb4__0_609 [label="0"];
    bb3__0_609 -> bb6__0_609 [label="1"];
    bb3__0_609 -> bb5__0_609 [label="otherwise"];
    bb4__0_609 -> bb8__0_609 [label="return"];
    bb6__0_609 -> bb7__0_609 [label="return"];
    bb6__0_609 -> bb16__0_609 [label="unwind"];
    bb7__0_609 -> bb13__0_609 [label=""];
    bb8__0_609 -> bb9__0_609 [label="return"];
    bb8__0_609 -> bb14__0_609 [label="unwind"];
    bb9__0_609 -> bb10__0_609 [label="0"];
    bb9__0_609 -> bb11__0_609 [label="1"];
    bb9__0_609 -> bb5__0_609 [label="otherwise"];
    bb10__0_609 -> bb13__0_609 [label=""];
    bb11__0_609 -> bb12__0_609 [label="return"];
    bb11__0_609 -> bb15__0_609 [label="unwind"];
    bb12__0_609 -> bb13__0_609 [label=""];
    bb15__0_609 -> bb14__0_609 [label=""];
    bb16__0_609 -> bb14__0_609 [label=""];
}
