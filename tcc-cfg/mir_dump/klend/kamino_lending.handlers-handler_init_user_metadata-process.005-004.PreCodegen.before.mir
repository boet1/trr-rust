// MIR for `handlers::handler_init_user_metadata::process` before PreCodegen

fn handlers::handler_init_user_metadata::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_user_metadata::InitUserMetadata<'_>>, _2: anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug user_lookup_table => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: anchor_lang::prelude::Pubkey;
    let mut _4: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>;
    let mut _5: isize;
    let _6: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::referral::UserMetadata>>;
    let mut _9: std::result::Result<std::cell::Ref<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _16: &state::referral::UserMetadata;
    let mut _17: &std::cell::Ref<'_, state::referral::UserMetadata>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::referral::UserMetadata>>;
    let mut _20: std::result::Result<std::cell::RefMut<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _21: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _28: state::referral::UserMetadata;
    let mut _29: anchor_lang::prelude::Pubkey;
    let mut _30: u64;
    let mut _31: u8;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: anchor_lang::prelude::Pubkey;
    let mut _34: &anchor_lang::prelude::Signer<'_>;
    let mut _35: [u64; 51];
    let mut _36: [u64; 64];
    let mut _37: &mut state::referral::UserMetadata;
    let mut _38: &mut std::cell::RefMut<'_, state::referral::UserMetadata>;
    let mut _39: ();
    let mut _40: &mut handlers::handler_init_user_metadata::InitUserMetadata<'_>;
    let mut _41: &mut handlers::handler_init_user_metadata::InitUserMetadata<'_>;
    let mut _42: &mut handlers::handler_init_user_metadata::InitUserMetadata<'_>;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    scope 1 {
        debug referrer => _3;
        let mut _18: std::cell::RefMut<'_, state::referral::UserMetadata>;
        let _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _26: std::cell::RefMut<'_, state::referral::UserMetadata>;
        scope 8 {
            debug user_metadata => _18;
            let _27: u8;
            scope 13 {
                debug bump => _27;
            }
        }
        scope 9 {
            debug residual => _23;
            scope 10 {
            }
        }
        scope 11 {
            debug val => _26;
            scope 12 {
            }
        }
    }
    scope 2 {
        debug referrer_user_metadata => _6;
        let _7: std::cell::Ref<'_, state::referral::UserMetadata>;
        let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _15: std::cell::Ref<'_, state::referral::UserMetadata>;
        scope 3 {
            debug referrer_user_metadata => _7;
        }
        scope 4 {
            debug residual => _12;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _15;
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _40 = deref_copy (_1.1: &mut handlers::handler_init_user_metadata::InitUserMetadata<'_>);
        _4 = &((*_40).3: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>);
        _5 = discriminant((*_4));
        switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _3 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb11, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_6);
        _6 = &(((*_4) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_6);
        _9 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::load(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _8 = <std::result::Result<Ref<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_15);
        _15 = move ((_8 as Continue).0: std::cell::Ref<'_, state::referral::UserMetadata>);
        _7 = move _15;
        StorageDead(_15);
        _43 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_7;
        _16 = <Ref<'_, referral::UserMetadata> as Deref>::deref(move _17) -> [return: bb9, unwind: bb24];
    }

    bb7: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        _49 = discriminant(_8);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb21;
    }

    bb9: {
        StorageDead(_17);
        _3 = ((*_16).3: anchor_lang::prelude::Pubkey);
        drop(_7) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        StorageDead(_7);
        StorageDead(_16);
        StorageDead(_6);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_4);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _41 = deref_copy (_1.1: &mut handlers::handler_init_user_metadata::InitUserMetadata<'_>);
        _21 = &((*_41).2: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        _20 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::load_init(move _21) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_21);
        _19 = <std::result::Result<RefMut<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _20) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb14, 1: bb15, otherwise: bb2];
    }

    bb14: {
        StorageLive(_26);
        _26 = move ((_19 as Continue).0: std::cell::RefMut<'_, state::referral::UserMetadata>);
        _18 = move _26;
        StorageDead(_26);
        _45 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_27);
        _27 = ((_1.3: handlers::handler_init_user_metadata::InitUserMetadataBumps).0: u8);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _3;
        StorageLive(_30);
        StorageLive(_31);
        _31 = _27;
        _30 = <u8 as Into<u64>>::into(move _31) -> [return: bb17, unwind: bb23];
    }

    bb15: {
        StorageLive(_23);
        _23 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _25) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        StorageDead(_25);
        StorageDead(_23);
        _47 = discriminant(_19);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb21;
    }

    bb17: {
        StorageDead(_31);
        StorageLive(_32);
        _32 = _2;
        StorageLive(_33);
        StorageLive(_34);
        _42 = deref_copy (_1.1: &mut handlers::handler_init_user_metadata::InitUserMetadata<'_>);
        _34 = &((*_42).0: anchor_lang::prelude::Signer<'_>);
        _33 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _34) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        StorageDead(_34);
        StorageLive(_35);
        _35 = [const 0_u64; 51];
        StorageLive(_36);
        _36 = [const 0_u64; 64];
        _28 = referral::UserMetadata { referrer: move _29, bump: move _30, user_lookup_table: move _32, owner: move _33, padding_1: move _35, padding_2: move _36 };
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &mut _18;
        _37 = <RefMut<'_, referral::UserMetadata> as DerefMut>::deref_mut(move _38) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        StorageDead(_38);
        (*_37) = move _28;
        StorageDead(_28);
        StorageDead(_37);
        StorageLive(_39);
        _39 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _39);
        StorageDead(_39);
        StorageDead(_27);
        drop(_18) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        StorageDead(_18);
        StorageDead(_3);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_3);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_18) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_7) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        _51 = discriminant(_19);
        goto -> bb25;
    }

    bb27 (cleanup): {
        _52 = discriminant(_8);
        goto -> bb25;
    }
}
