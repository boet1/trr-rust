digraph Mir_0_2603 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_price_usd::{closure#4}::{closure#1}(_1: &amp;ReErased mut Closure(DefId(0:2603 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}::{closure#1}), [i16, Binder(extern &quot;RustCall&quot; fn((utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)) -&gt; std::option::Option&lt;utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;, []), ()]), _2: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, _3: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;) -&gt; std::option::Option&lt;utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;<br align="left"/>let _4: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let _5: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _6: (utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;);<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: u32;<br align="left"/>let mut _10: u32;<br align="left"/>let mut _11: (u32, bool);<br align="left"/>let mut _12: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::option::Option&lt;std::convert::Infallible&gt;, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;;<br align="left"/>let mut _14: std::option::Option&lt;utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;;<br align="left"/>let mut _15: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let _20: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _21: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::option::Option&lt;std::convert::Infallible&gt;, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;;<br align="left"/>let mut _23: std::option::Option&lt;utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;;<br align="left"/>let mut _24: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _25: isize;<br align="left"/>let _26: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let _29: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _30: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _31: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let _32: utils::fraction::uint_types::U256;<br align="left"/>let mut _33: std::ops::ControlFlow&lt;std::option::Option&lt;std::convert::Infallible&gt;, utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _34: std::option::Option&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _35: utils::fraction::uint_types::U256;<br align="left"/>let mut _36: utils::fraction::uint_types::U256;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::option::Option&lt;std::convert::Infallible&gt;;<br align="left"/>let _41: utils::fraction::uint_types::U256;<br align="left"/>let _42: u32;<br align="left"/>let mut _43: u32;<br align="left"/>let mut _44: u32;<br align="left"/>let mut _45: (u32, bool);<br align="left"/>let mut _46: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _47: utils::fraction::uint_types::U256;<br align="left"/>let mut _48: u32;<br align="left"/>debug acc =&gt; _2;<br align="left"/>debug x =&gt; _3;<br align="left"/>debug current_price =&gt; _4;<br align="left"/>debug next_price =&gt; _5;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug residual =&gt; _26;<br align="left"/>debug val =&gt; _29;<br align="left"/>debug value =&gt; _32;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>debug exp =&gt; _42;<br align="left"/>>;
    bb0__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = (_2.1: u32)<br/>StorageLive(_10)<br/>_10 = (_3.1: u32)<br/>_11 = CheckedAdd(_9, _10)<br/></td></tr><tr><td align="left">assert(!move (_11.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _9, move _10)</td></tr></table>>];
    bb1__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_8 = move (_11.0: u32)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>_7 = Gt(move _8, const _)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb2__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _2<br/></td></tr><tr><td align="left">_14 = prices::types::Price::&lt;uint_types::U256&gt;::reduce_exp_lossy(move _15, const _)</td></tr></table>>];
    bb3__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::option::Option&lt;prices::types::Price&lt;uint_types::U256&gt;&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb4__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_16 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb5__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_13 as Continue).0: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)<br/>_12 = _20<br/>StorageDead(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _3<br/></td></tr><tr><td align="left">_23 = prices::types::Price::&lt;uint_types::U256&gt;::reduce_exp_lossy(move _24, const _)</td></tr></table>>];
    bb6__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_13 as Break).0: std::option::Option&lt;std::convert::Infallible&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::option::Option&lt;prices::types::Price&lt;uint_types::U256&gt;&gt; as FromResidual&lt;std::option::Option&lt;Infallible&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb8__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::option::Option&lt;prices::types::Price&lt;uint_types::U256&gt;&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb10__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_25 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb11__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_22 as Continue).0: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)<br/>_21 = _29<br/>StorageDead(_29)<br/>_6 = (move _12, move _21)<br/>StorageDead(_21)<br/>StorageDead(_12)<br/>StorageDead(_22)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_22 as Break).0: std::option::Option&lt;std::convert::Infallible&gt;)<br/>StorageLive(_28)<br/>_28 = _26<br/></td></tr><tr><td align="left">_0 = &lt;std::option::Option&lt;prices::types::Price&lt;uint_types::U256&gt;&gt; as FromResidual&lt;std::option::Option&lt;Infallible&gt;&gt;&gt;::from_residual(move _28)</td></tr></table>>];
    bb13__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_21)<br/>StorageDead(_12)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_30)<br/>_30 = _2<br/>StorageLive(_31)<br/>_31 = _3<br/>_6 = (move _30, move _31)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_4)<br/>_4 = (_6.0: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)<br/>StorageLive(_5)<br/>_5 = (_6.1: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)<br/>StorageDead(_6)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = (_4.0: utils::fraction::uint_types::U256)<br/>StorageLive(_36)<br/>_36 = (_5.0: utils::fraction::uint_types::U256)<br/></td></tr><tr><td align="left">_34 = uint_types::U256::checked_mul(move _35, move _36)</td></tr></table>>];
    bb16__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = &lt;std::option::Option&lt;uint_types::U256&gt; as Try&gt;::branch(move _34)</td></tr></table>>];
    bb17__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_37 = discriminant(_33)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb18__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_33 as Continue).0: utils::fraction::uint_types::U256)<br/>_32 = _41<br/>StorageDead(_41)<br/>StorageDead(_33)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = (_4.1: u32)<br/>StorageLive(_44)<br/>_44 = (_5.1: u32)<br/>_45 = CheckedAdd(_43, _44)<br/></td></tr><tr><td align="left">assert(!move (_45.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _43, move _44)</td></tr></table>>];
    bb19__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_33 as Break).0: std::option::Option&lt;std::convert::Infallible&gt;)<br/>StorageLive(_40)<br/>_40 = _38<br/></td></tr><tr><td align="left">_0 = &lt;std::option::Option&lt;prices::types::Price&lt;uint_types::U256&gt;&gt; as FromResidual&lt;std::option::Option&lt;Infallible&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb20__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_42 = move (_45.0: u32)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = _32<br/>StorageLive(_48)<br/>_48 = _42<br/>_46 = prices::types::Price::&lt;uint_types::U256&gt; { value: move _47, exp: move _48 }<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>_0 = std::option::Option::&lt;prices::types::Price&lt;uint_types::U256&gt;&gt;::Some(move _46)<br/>StorageDead(_46)<br/>StorageDead(_42)<br/>StorageDead(_32)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2603 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2603 -> bb1__0_2603 [label="success"];
    bb1__0_2603 -> bb14__0_2603 [label="0"];
    bb1__0_2603 -> bb2__0_2603 [label="otherwise"];
    bb2__0_2603 -> bb3__0_2603 [label="return"];
    bb3__0_2603 -> bb4__0_2603 [label="return"];
    bb4__0_2603 -> bb5__0_2603 [label="0"];
    bb4__0_2603 -> bb7__0_2603 [label="1"];
    bb4__0_2603 -> bb6__0_2603 [label="otherwise"];
    bb5__0_2603 -> bb9__0_2603 [label="return"];
    bb7__0_2603 -> bb8__0_2603 [label="return"];
    bb8__0_2603 -> bb22__0_2603 [label=""];
    bb9__0_2603 -> bb10__0_2603 [label="return"];
    bb10__0_2603 -> bb11__0_2603 [label="0"];
    bb10__0_2603 -> bb12__0_2603 [label="1"];
    bb10__0_2603 -> bb6__0_2603 [label="otherwise"];
    bb11__0_2603 -> bb15__0_2603 [label=""];
    bb12__0_2603 -> bb13__0_2603 [label="return"];
    bb13__0_2603 -> bb22__0_2603 [label=""];
    bb14__0_2603 -> bb15__0_2603 [label=""];
    bb15__0_2603 -> bb16__0_2603 [label="return"];
    bb16__0_2603 -> bb17__0_2603 [label="return"];
    bb17__0_2603 -> bb18__0_2603 [label="0"];
    bb17__0_2603 -> bb19__0_2603 [label="1"];
    bb17__0_2603 -> bb6__0_2603 [label="otherwise"];
    bb18__0_2603 -> bb21__0_2603 [label="success"];
    bb19__0_2603 -> bb20__0_2603 [label="return"];
    bb20__0_2603 -> bb23__0_2603 [label=""];
    bb21__0_2603 -> bb23__0_2603 [label=""];
    bb22__0_2603 -> bb23__0_2603 [label=""];
}
