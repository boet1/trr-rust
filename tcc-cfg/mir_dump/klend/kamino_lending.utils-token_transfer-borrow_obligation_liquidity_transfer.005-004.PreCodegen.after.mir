// MIR for `borrow_obligation_liquidity_transfer` after PreCodegen

fn borrow_obligation_liquidity_transfer(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: anchor_lang::prelude::AccountInfo<'_>, _6: &[&[u8]], _7: u64, _8: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug token_program => _1;
    debug liquidity_mint => _2;
    debug reserve_liquidity => _3;
    debug user_liquidity => _4;
    debug lending_market_authority => _5;
    debug authority_signer_seeds => _6;
    debug liquidity_amount => _7;
    debug liquidity_decimals => _8;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _11: std::result::Result<(), anchor_lang::error::Error>;
    let mut _12: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _13: anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _15: anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: &[&[&[u8]]];
    let mut _20: &[&[&[u8]]; 1];
    let _21: &[&[&[u8]]; 1];
    let _22: [&[&[u8]]; 1];
    let mut _23: &[&[u8]];
    let mut _24: u64;
    let mut _25: u8;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _30: ();
    let mut _31: ();
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    scope 1 {
        debug residual => _27;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _30;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = move _1;
        StorageLive(_14);
        StorageLive(_15);
        _15 = move _3;
        StorageLive(_16);
        _16 = move _4;
        StorageLive(_17);
        _17 = move _5;
        StorageLive(_18);
        _18 = move _2;
        _14 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _15, mint: move _18, to: move _16, authority: move _17 };
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_6);
        _22 = [move _23];
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = move _20 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_20);
        _12 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new_with_signer(move _13, move _14, move _19) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_24);
        _24 = _7;
        StorageLive(_25);
        _25 = _8;
        _11 = anchor_spl::token_2022::transfer_checked(move _12, move _24, move _25) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_12);
        _10 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _11) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_11);
        _26 = discriminant(_10);
        switchInt(move _26) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_30);
        _30 = ((_10 as Continue).0: ());
        _9 = _30;
        StorageDead(_30);
        _32 = discriminant(_10);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_31);
        _31 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _31);
        StorageDead(_31);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_27);
        _27 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _29) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_29);
        StorageDead(_27);
        _34 = discriminant(_10);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _36 = discriminant(_10);
        goto -> bb9;
    }
}
