// MIR for `token_info::<impl at programs\klend\src\state\token_info.rs:17:59: 17:66>::default` before PreCodegen

fn token_info::<impl at programs\klend\src\state\token_info.rs:17:59: 17:66>::default() -> token_info::TokenInfo {
    let mut _0: state::token_info::TokenInfo;
    let mut _1: [u8; 32];
    let mut _2: state::token_info::PriceHeuristic;
    let mut _3: u64;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: state::token_info::ScopeConfiguration;
    let mut _7: state::token_info::SwitchboardConfiguration;
    let mut _8: state::token_info::PythConfiguration;
    let mut _9: u8;
    let mut _10: [u8; 7];
    let mut _11: [u64; 19];

    bb0: {
        StorageLive(_1);
        _1 = <[u8; 32] as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <token_info::PriceHeuristic as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <u64 as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <u64 as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <u64 as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <token_info::ScopeConfiguration as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <SwitchboardConfiguration as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <PythConfiguration as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <u8 as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <[u8; 7] as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <[u64; 19] as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        _0 = token_info::TokenInfo { name: move _1, heuristic: move _2, max_twap_divergence_bps: move _3, max_age_price_seconds: move _4, max_age_twap_seconds: move _5, scope_configuration: move _6, switchboard_configuration: move _7, pyth_configuration: move _8, block_price_usage: move _9, reserved: move _10, _padding: move _11 };
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
