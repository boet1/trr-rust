// MIR for `referral::<impl at programs\klend\src\state\referral.rs:115:1: 118:25>::fmt` before PreCodegen

fn referral::<impl at programs\klend\src\state\referral.rs:115:1: 118:25>::fmt(_1: &referral::ReferrerState, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &anchor_lang::prelude::Pubkey;
    let _4: &anchor_lang::prelude::Pubkey;
    let mut _6: &mut std::fmt::Formatter<'_>;
    let mut _7: &str;
    let _8: &str;
    let mut _9: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _10: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _11: &str;
    let _12: &str;
    let mut _13: &dyn std::fmt::Debug;
    let mut _14: &&anchor_lang::prelude::Pubkey;
    let _15: &&anchor_lang::prelude::Pubkey;
    let _16: &anchor_lang::prelude::Pubkey;
    let mut _17: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _18: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _19: &str;
    let _20: &str;
    let mut _21: &dyn std::fmt::Debug;
    let mut _22: &&anchor_lang::prelude::Pubkey;
    let _23: &&anchor_lang::prelude::Pubkey;
    let _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut std::fmt::DebugStruct<'_, '_>;
    scope 1 {
        debug __arg_0 => _3;
        debug __arg_1 => _4;
        let mut _5: std::fmt::DebugStruct<'_, '_>;
        scope 2 {
            debug __debug_trait_builder => _5;
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        _4 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_2);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const "ReferrerState";
        _7 = &(*_8);
        _5 = Formatter::<'_>::debug_struct(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _5;
        StorageLive(_11);
        StorageLive(_12);
        _12 = const "short_url";
        _11 = &(*_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_3);
        _15 = &_16;
        _14 = &(*_15);
        _13 = move _14 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_14);
        _9 = DebugStruct::<'_, '_>::field(move _10, move _11, move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &mut _5;
        StorageLive(_19);
        StorageLive(_20);
        _20 = const "owner";
        _19 = &(*_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_4);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_22);
        _17 = DebugStruct::<'_, '_>::field(move _18, move _19, move _21) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_25);
        _25 = &mut _5;
        _0 = DebugStruct::<'_, '_>::finish(move _25) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_25);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
