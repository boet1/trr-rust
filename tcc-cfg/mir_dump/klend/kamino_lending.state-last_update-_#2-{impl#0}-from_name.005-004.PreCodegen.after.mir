// MIR for `last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\lib.rs:618:9: 618:29>::from_name` after PreCodegen

fn last_update::_::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\bitflags-2.4.1\src\lib.rs:618:9: 618:29>::from_name(_1: &str) -> std::option::Option<last_update::PriceStatusFlags> {
    debug name => _1;
    let mut _0: std::option::Option<state::last_update::PriceStatusFlags>;
    let _2: &str;
    let _3: ();
    let mut _4: bool;
    let mut _5: &&str;
    let mut _6: &&str;
    let _7: &str;
    let mut _8: !;
    let mut _9: state::last_update::PriceStatusFlags;
    let mut _10: u8;
    let mut _11: &state::last_update::PriceStatusFlags;
    let _12: state::last_update::PriceStatusFlags;
    let _13: ();
    let mut _14: bool;
    let mut _15: &&str;
    let mut _16: &&str;
    let _17: &str;
    let mut _18: !;
    let mut _19: state::last_update::PriceStatusFlags;
    let mut _20: u8;
    let mut _21: &state::last_update::PriceStatusFlags;
    let _22: state::last_update::PriceStatusFlags;
    let _23: ();
    let mut _24: bool;
    let mut _25: &&str;
    let mut _26: &&str;
    let _27: &str;
    let mut _28: !;
    let mut _29: state::last_update::PriceStatusFlags;
    let mut _30: u8;
    let mut _31: &state::last_update::PriceStatusFlags;
    let _32: state::last_update::PriceStatusFlags;
    let _33: ();
    let mut _34: bool;
    let mut _35: &&str;
    let mut _36: &&str;
    let _37: &str;
    let mut _38: !;
    let mut _39: state::last_update::PriceStatusFlags;
    let mut _40: u8;
    let mut _41: &state::last_update::PriceStatusFlags;
    let _42: state::last_update::PriceStatusFlags;
    let _43: ();
    let mut _44: bool;
    let mut _45: &&str;
    let mut _46: &&str;
    let _47: &str;
    let mut _48: !;
    let mut _49: state::last_update::PriceStatusFlags;
    let mut _50: u8;
    let mut _51: &state::last_update::PriceStatusFlags;
    let _52: state::last_update::PriceStatusFlags;
    let _53: ();
    let mut _54: bool;
    let mut _55: &&str;
    let mut _56: &&str;
    let _57: &str;
    let mut _58: !;
    let mut _59: state::last_update::PriceStatusFlags;
    let mut _60: u8;
    let mut _61: &state::last_update::PriceStatusFlags;
    let _62: state::last_update::PriceStatusFlags;
    scope 1 {
        debug name => _2;
        let mut _63: &state::last_update::PriceStatusFlags;
        let mut _64: &state::last_update::PriceStatusFlags;
        let mut _65: &state::last_update::PriceStatusFlags;
        let mut _66: &state::last_update::PriceStatusFlags;
        let mut _67: &state::last_update::PriceStatusFlags;
        let mut _68: &state::last_update::PriceStatusFlags;
        let mut _69: &&str;
        let mut _70: &&str;
        let mut _71: &&str;
        let mut _72: &&str;
        let mut _73: &&str;
        let mut _74: &&str;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = _1;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_2;
        StorageLive(_6);
        _74 = const _;
        _6 = &(*_74);
        _4 = <&str as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _63 = const _;
        _11 = &(*_63);
        _10 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _9 = last_update::PriceStatusFlags(move _10);
        StorageDead(_10);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::Some(move _9);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb25;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_2;
        StorageLive(_16);
        _73 = const _;
        _16 = &(*_73);
        _14 = <&str as PartialEq>::eq(move _15, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _14) -> [0: bb8, otherwise: bb6];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _64 = const _;
        _21 = &(*_64);
        _20 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        _19 = last_update::PriceStatusFlags(move _20);
        StorageDead(_20);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::Some(move _19);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb25;
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = const ();
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_2;
        StorageLive(_26);
        _72 = const _;
        _26 = &(*_72);
        _24 = <&str as PartialEq>::eq(move _25, move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _24) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _65 = const _;
        _31 = &(*_65);
        _30 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        _29 = last_update::PriceStatusFlags(move _30);
        StorageDead(_30);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::Some(move _29);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb25;
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = const ();
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_2;
        StorageLive(_36);
        _71 = const _;
        _36 = &(*_71);
        _34 = <&str as PartialEq>::eq(move _35, move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _34) -> [0: bb16, otherwise: bb14];
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _66 = const _;
        _41 = &(*_66);
        _40 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _41) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_41);
        _39 = last_update::PriceStatusFlags(move _40);
        StorageDead(_40);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::Some(move _39);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb25;
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = const ();
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &_2;
        StorageLive(_46);
        _70 = const _;
        _46 = &(*_70);
        _44 = <&str as PartialEq>::eq(move _45, move _46) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _44) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _67 = const _;
        _51 = &(*_67);
        _50 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _51) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_51);
        _49 = last_update::PriceStatusFlags(move _50);
        StorageDead(_50);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::Some(move _49);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb25;
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_45);
        _43 = const ();
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_2;
        StorageLive(_56);
        _69 = const _;
        _56 = &(*_69);
        _54 = <&str as PartialEq>::eq(move _55, move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _54) -> [0: bb24, otherwise: bb22];
    }

    bb22: {
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _68 = const _;
        _61 = &(*_68);
        _60 = last_update::_::<impl last_update::PriceStatusFlags>::bits(move _61) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_61);
        _59 = last_update::PriceStatusFlags(move _60);
        StorageDead(_60);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::Some(move _59);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb25;
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = const ();
        StorageDead(_54);
        StorageDead(_53);
        _0 = std::option::Option::<last_update::PriceStatusFlags>::None;
        StorageDead(_2);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_2);
        goto -> bb26;
    }

    bb26: {
        return;
    }
}
