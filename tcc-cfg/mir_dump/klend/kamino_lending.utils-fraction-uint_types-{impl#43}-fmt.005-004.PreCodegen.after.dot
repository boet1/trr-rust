digraph Mir_0_11553 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;uint_types::U256 as std::fmt::Display&gt;::fmt(_1: &amp;ReErased utils::fraction::uint_types::U256, _2: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let mut _6: !;<br align="left"/>let mut _7: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _8: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _9: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _10: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _11: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _12: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _13: [u8; 80_usize];<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: &amp;ReErased [u8];<br align="left"/>let mut _17: &amp;ReErased [u8; 80_usize];<br align="left"/>let mut _18: (usize, bool);<br align="left"/>let mut _19: utils::fraction::uint_types::U256;<br align="left"/>let _20: utils::fraction::uint_types::U256;<br align="left"/>let _21: ();<br align="left"/>let mut _22: ();<br align="left"/>let _23: u8;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let _26: utils::fraction::uint_types::U256;<br align="left"/>let mut _27: utils::fraction::uint_types::U256;<br align="left"/>let mut _28: utils::fraction::uint_types::U256;<br align="left"/>let mut _29: u8;<br align="left"/>let mut _30: (u8, bool);<br align="left"/>let _31: usize;<br align="left"/>let mut _32: usize;<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: utils::fraction::uint_types::U256;<br align="left"/>let mut _35: utils::fraction::uint_types::U256;<br align="left"/>let mut _36: utils::fraction::uint_types::U256;<br align="left"/>let _37: ();<br align="left"/>let mut _38: bool;<br align="left"/>let mut _39: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: (usize, bool);<br align="left"/>let _42: &amp;ReErased str;<br align="left"/>let mut _43: &amp;ReErased [u8];<br align="left"/>let _44: &amp;ReErased [u8];<br align="left"/>let _45: &amp;ReErased [u8];<br align="left"/>let mut _46: &amp;ReErased [u8; 80_usize];<br align="left"/>let mut _47: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let mut _48: usize;<br align="left"/>let mut _49: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _50: &amp;ReErased str;<br align="left"/>let _51: &amp;ReErased str;<br align="left"/>let mut _52: &amp;ReErased str;<br align="left"/>let mut _53: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug f =&gt; _2;<br align="left"/>debug buf =&gt; _13;<br align="left"/>debug i =&gt; _14;<br align="left"/>debug current =&gt; _19;<br align="left"/>debug ten =&gt; _20;<br align="left"/>debug digit =&gt; _23;<br align="left"/>debug s =&gt; _42;<br align="left"/>>;
    bb0__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = uint_types::U256::is_zero(move _5)</td></tr></table>>];
    bb1__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_7)<br/>_7 = &amp;mut (*_2)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_53 = const _<br/>_11 = &amp;(*_53)<br/>_10 = &amp;(*_11)<br/>_9 = move _10 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = Arguments::&lt;'_&gt;::new_const(move _9)</td></tr></table>>];
    bb3__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_fmt(move _7, move _8)</td></tr></table>>];
    bb4__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_11)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_13)<br/>_13 = [const 0_u8; 80]<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;_13<br/>_16 = move _17 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = core::slice::&lt;impl [u8]&gt;::len(move _16)</td></tr></table>>];
    bb6__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_18 = CheckedSub(_15, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_18.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _15, const 1_usize)</td></tr></table>>];
    bb7__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_14 = move (_18.0: usize)<br/>StorageDead(_15)<br/>StorageLive(_19)<br/>_19 = (*_1)<br/>StorageLive(_20)<br/></td></tr><tr><td align="left">_20 = &lt;uint_types::U256 as From&lt;i32&gt;&gt;::from(const 10_i32)</td></tr></table>>];
    bb8__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _19<br/>StorageLive(_28)<br/>_28 = _20<br/></td></tr><tr><td align="left">_26 = &lt;uint_types::U256 as Rem&gt;::rem(move _27, move _28)</td></tr></table>>];
    bb10__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_25 = &amp;_26<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_24 = uint_types::U256::low_u64(move _25)</td></tr></table>>];
    bb11__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_23 = move _24 as u8 (IntToInt)<br/>StorageDead(_24)<br/>StorageDead(_26)<br/>StorageLive(_29)<br/>_29 = _23<br/>_30 = CheckedAdd(_29, const 48_u8)<br/></td></tr><tr><td align="left">assert(!move (_30.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _29, const 48_u8)</td></tr></table>>];
    bb12__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = _14<br/>_32 = Len(_13)<br/>_33 = Lt(_31, _32)<br/></td></tr><tr><td align="left">assert(move _33, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _32, _31)</td></tr></table>>];
    bb13__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_13[_31] = move (_30.0: u8)<br/>StorageDead(_29)<br/>StorageDead(_31)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = _19<br/>StorageLive(_36)<br/>_36 = _20<br/></td></tr><tr><td align="left">_34 = &lt;uint_types::U256 as std::ops::Div&gt;::div(move _35, move _36)</td></tr></table>>];
    bb14__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/>_19 = move _34<br/>StorageDead(_34)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;_19<br/></td></tr><tr><td align="left">_38 = uint_types::U256::is_zero(move _39)</td></tr></table>>];
    bb15__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb16__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_21 = const ()<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = &amp;_13<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = _14<br/>_47 = RangeFrom::&lt;usize&gt; { start: move _48 }<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_45 = &lt;[u8; 80] as Index&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index(move _46, move _47)</td></tr></table>>];
    bb17__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_37 = const ()<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>_41 = CheckedSub(_14, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_41.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _14, const 1_usize)</td></tr></table>>];
    bb18__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_14 = move (_41.0: usize)<br/>_22 = const ()<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/>_44 = &amp;(*_45)<br/>_43 = &amp;(*_44)<br/></td></tr><tr><td align="left">_42 = from_utf8_unchecked(move _43)</td></tr></table>>];
    bb20__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageLive(_49)<br/>_49 = &amp;mut (*_2)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = const &quot;&quot;<br/>_50 = &amp;(*_51)<br/>StorageLive(_52)<br/>_52 = &amp;(*_42)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::pad_integral(move _49, const true, move _50, move _52)</td></tr></table>>];
    bb21__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_42)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_11553 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11553 -> bb1__0_11553 [label="return"];
    bb1__0_11553 -> bb5__0_11553 [label="0"];
    bb1__0_11553 -> bb2__0_11553 [label="otherwise"];
    bb2__0_11553 -> bb3__0_11553 [label="return"];
    bb3__0_11553 -> bb4__0_11553 [label="return"];
    bb4__0_11553 -> bb22__0_11553 [label=""];
    bb5__0_11553 -> bb6__0_11553 [label="return"];
    bb6__0_11553 -> bb7__0_11553 [label="success"];
    bb7__0_11553 -> bb8__0_11553 [label="return"];
    bb8__0_11553 -> bb9__0_11553 [label=""];
    bb9__0_11553 -> bb10__0_11553 [label="return"];
    bb10__0_11553 -> bb11__0_11553 [label="return"];
    bb11__0_11553 -> bb12__0_11553 [label="success"];
    bb12__0_11553 -> bb13__0_11553 [label="success"];
    bb13__0_11553 -> bb14__0_11553 [label="return"];
    bb14__0_11553 -> bb15__0_11553 [label="return"];
    bb15__0_11553 -> bb17__0_11553 [label="0"];
    bb15__0_11553 -> bb16__0_11553 [label="otherwise"];
    bb16__0_11553 -> bb19__0_11553 [label="return"];
    bb17__0_11553 -> bb18__0_11553 [label="success"];
    bb18__0_11553 -> bb9__0_11553 [label=""];
    bb19__0_11553 -> bb20__0_11553 [label="return"];
    bb20__0_11553 -> bb21__0_11553 [label="return"];
    bb21__0_11553 -> bb22__0_11553 [label=""];
}
