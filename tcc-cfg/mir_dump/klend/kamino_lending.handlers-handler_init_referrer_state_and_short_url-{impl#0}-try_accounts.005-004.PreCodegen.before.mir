// MIR for `handlers::handler_init_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18>::try_accounts` before PreCodegen

fn handlers::handler_init_referrer_state_and_short_url::<impl at programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitReferrerStateAndShortUrlBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _35: ();
    let mut _36: bool;
    let mut _37: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _38: !;
    let mut _39: anchor_lang::error::Error;
    let mut _40: anchor_lang::error::ErrorCode;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: &[anchor_lang::prelude::AccountInfo<'_>];
    let _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: std::ops::RangeFrom<usize>;
    let _50: ();
    let mut _51: bool;
    let mut _52: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _53: !;
    let mut _54: anchor_lang::error::Error;
    let mut _55: anchor_lang::error::ErrorCode;
    let _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: &[anchor_lang::prelude::AccountInfo<'_>];
    let _61: &[anchor_lang::prelude::AccountInfo<'_>];
    let _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _63: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: std::ops::RangeFrom<usize>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>;
    let mut _67: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _97: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _112: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _120: (anchor_lang::prelude::Pubkey, u8);
    let mut _121: &[&[u8]];
    let mut _122: &[&[u8]; 2];
    let _123: &[&[u8]; 2];
    let _124: [&[u8]; 2];
    let mut _125: &[u8];
    let _126: &[u8];
    let mut _127: &[u8];
    let _128: &[u8];
    let mut _129: &anchor_lang::prelude::Pubkey;
    let _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _131: &anchor_lang::prelude::Signer<'_>;
    let mut _132: &anchor_lang::prelude::Pubkey;
    let mut _133: u8;
    let _134: ();
    let mut _135: bool;
    let mut _136: &anchor_lang::prelude::Pubkey;
    let _137: anchor_lang::prelude::Pubkey;
    let mut _138: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _139: &anchor_lang::prelude::Pubkey;
    let mut _140: !;
    let mut _141: anchor_lang::error::Error;
    let mut _142: anchor_lang::error::Error;
    let mut _143: anchor_lang::error::Error;
    let mut _144: anchor_lang::error::ErrorCode;
    let mut _145: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _146: anchor_lang::prelude::Pubkey;
    let mut _147: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _148: anchor_lang::prelude::Pubkey;
    let mut _151: &&anchor_lang::prelude::AccountInfo<'_>;
    let _152: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _155: (usize, bool);
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: &&anchor_lang::prelude::Pubkey;
    let mut _160: &&anchor_lang::prelude::Pubkey;
    let _161: &anchor_lang::prelude::Pubkey;
    let _162: anchor_lang::prelude::Pubkey;
    let mut _164: &anchor_lang::prelude::AccountInfo<'_>;
    let _165: ();
    let mut _166: bool;
    let mut _167: u64;
    let mut _170: &anchor_lang::prelude::Rent;
    let mut _171: usize;
    let mut _173: anchor_lang::prelude::AccountInfo<'_>;
    let mut _174: &anchor_lang::prelude::Signer<'_>;
    let mut _175: anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _178: anchor_lang::prelude::AccountInfo<'_>;
    let mut _179: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _180: anchor_lang::system_program::CreateAccount<'_>;
    let _181: ();
    let mut _182: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _183: std::result::Result<(), anchor_lang::error::Error>;
    let mut _184: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _185: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _186: &[&[&[u8]]];
    let mut _187: &[&[&[u8]]; 1];
    let _188: &[&[&[u8]]; 1];
    let _189: [&[&[u8]]; 1];
    let mut _190: &[&[u8]];
    let _191: &[&[u8]];
    let _192: &[&[u8]];
    let mut _193: &[&[u8]; 3];
    let _194: [&[u8]; 3];
    let mut _195: &[u8];
    let _196: &[u8];
    let mut _197: &anchor_lang::prelude::Pubkey;
    let _198: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _199: &anchor_lang::prelude::Signer<'_>;
    let mut _200: &[u8];
    let _201: &[u8];
    let _202: &[u8];
    let mut _203: &[u8; 1];
    let _204: [u8; 1];
    let mut _205: u8;
    let mut _206: std::ops::RangeFull;
    let mut _207: std::ops::RangeFull;
    let mut _208: u64;
    let mut _209: u64;
    let mut _210: usize;
    let mut _211: &anchor_lang::prelude::Pubkey;
    let mut _212: isize;
    let mut _214: !;
    let mut _215: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _217: ();
    let mut _218: bool;
    let mut _219: &anchor_lang::prelude::Pubkey;
    let _220: anchor_lang::prelude::Pubkey;
    let mut _221: &anchor_lang::prelude::Signer<'_>;
    let mut _222: &anchor_lang::prelude::Pubkey;
    let _223: anchor_lang::prelude::Pubkey;
    let mut _224: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _225: !;
    let mut _226: anchor_lang::error::Error;
    let mut _227: anchor_lang::error::Error;
    let mut _228: anchor_lang::error::AnchorError;
    let mut _229: std::string::String;
    let mut _230: &anchor_lang::error::ErrorCode;
    let _231: anchor_lang::error::ErrorCode;
    let mut _232: u32;
    let mut _233: anchor_lang::error::ErrorCode;
    let mut _234: std::string::String;
    let mut _235: &anchor_lang::error::ErrorCode;
    let _236: anchor_lang::error::ErrorCode;
    let mut _237: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _238: anchor_lang::error::ErrorOrigin;
    let mut _239: anchor_lang::error::Source;
    let mut _240: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _241: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _242: anchor_lang::prelude::Pubkey;
    let mut _243: &anchor_lang::prelude::Signer<'_>;
    let mut _244: anchor_lang::prelude::Pubkey;
    let mut _245: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _247: u64;
    let mut _248: u64;
    let mut _249: &anchor_lang::prelude::Rent;
    let mut _250: usize;
    let mut _251: u64;
    let _252: ();
    let mut _253: bool;
    let mut _254: u64;
    let mut _256: anchor_lang::prelude::AccountInfo<'_>;
    let mut _257: &anchor_lang::prelude::Signer<'_>;
    let mut _258: anchor_lang::prelude::AccountInfo<'_>;
    let mut _259: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _261: anchor_lang::prelude::AccountInfo<'_>;
    let mut _262: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _263: anchor_lang::system_program::Transfer<'_>;
    let _264: ();
    let mut _265: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _266: std::result::Result<(), anchor_lang::error::Error>;
    let mut _267: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _268: u64;
    let mut _269: isize;
    let mut _271: !;
    let mut _272: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _275: anchor_lang::prelude::AccountInfo<'_>;
    let mut _276: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _278: anchor_lang::prelude::AccountInfo<'_>;
    let mut _279: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _280: anchor_lang::system_program::Allocate<'_>;
    let _281: ();
    let mut _282: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _283: std::result::Result<(), anchor_lang::error::Error>;
    let mut _284: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _285: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _286: &[&[&[u8]]];
    let mut _287: &[&[&[u8]]; 1];
    let _288: &[&[&[u8]]; 1];
    let _289: [&[&[u8]]; 1];
    let mut _290: &[&[u8]];
    let _291: &[&[u8]];
    let _292: &[&[u8]];
    let mut _293: &[&[u8]; 3];
    let _294: [&[u8]; 3];
    let mut _295: &[u8];
    let _296: &[u8];
    let mut _297: &anchor_lang::prelude::Pubkey;
    let _298: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _299: &anchor_lang::prelude::Signer<'_>;
    let mut _300: &[u8];
    let _301: &[u8];
    let _302: &[u8];
    let mut _303: &[u8; 1];
    let _304: [u8; 1];
    let mut _305: u8;
    let mut _306: std::ops::RangeFull;
    let mut _307: std::ops::RangeFull;
    let mut _308: u64;
    let mut _309: usize;
    let mut _310: isize;
    let mut _312: !;
    let mut _313: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _316: anchor_lang::prelude::AccountInfo<'_>;
    let mut _317: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _319: anchor_lang::prelude::AccountInfo<'_>;
    let mut _320: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _321: anchor_lang::system_program::Assign<'_>;
    let _322: ();
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _324: std::result::Result<(), anchor_lang::error::Error>;
    let mut _325: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _326: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _327: &[&[&[u8]]];
    let mut _328: &[&[&[u8]]; 1];
    let _329: &[&[&[u8]]; 1];
    let _330: [&[&[u8]]; 1];
    let mut _331: &[&[u8]];
    let _332: &[&[u8]];
    let _333: &[&[u8]];
    let mut _334: &[&[u8]; 3];
    let _335: [&[u8]; 3];
    let mut _336: &[u8];
    let _337: &[u8];
    let mut _338: &anchor_lang::prelude::Pubkey;
    let _339: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _340: &anchor_lang::prelude::Signer<'_>;
    let mut _341: &[u8];
    let _342: &[u8];
    let _343: &[u8];
    let mut _344: &[u8; 1];
    let _345: [u8; 1];
    let mut _346: u8;
    let mut _347: std::ops::RangeFull;
    let mut _348: std::ops::RangeFull;
    let mut _349: &anchor_lang::prelude::Pubkey;
    let mut _350: isize;
    let mut _352: !;
    let mut _353: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _355: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>, anchor_lang::error::Error>;
    let mut _356: &anchor_lang::prelude::Pubkey;
    let mut _357: &anchor_lang::prelude::AccountInfo<'_>;
    let _358: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _359: isize;
    let mut _362: !;
    let mut _363: anchor_lang::error::Error;
    let mut _364: anchor_lang::error::Error;
    let mut _365: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>, anchor_lang::error::Error>;
    let mut _366: &anchor_lang::prelude::AccountInfo<'_>;
    let _367: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _368: isize;
    let mut _371: !;
    let mut _372: anchor_lang::error::Error;
    let mut _373: anchor_lang::error::Error;
    let _374: ();
    let mut _375: bool;
    let _376: ();
    let mut _377: bool;
    let mut _378: usize;
    let mut _379: usize;
    let mut _380: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _381: !;
    let mut _382: anchor_lang::error::Error;
    let mut _383: anchor_lang::error::Error;
    let mut _384: anchor_lang::error::Error;
    let mut _385: anchor_lang::error::ErrorCode;
    let mut _386: (usize, usize);
    let mut _387: usize;
    let mut _388: usize;
    let mut _389: &anchor_lang::prelude::AccountInfo<'_>;
    let _390: ();
    let mut _391: bool;
    let mut _392: &&anchor_lang::prelude::Pubkey;
    let mut _393: &&anchor_lang::prelude::Pubkey;
    let mut _394: !;
    let mut _395: anchor_lang::error::Error;
    let mut _396: anchor_lang::error::Error;
    let mut _397: anchor_lang::error::Error;
    let mut _398: anchor_lang::error::ErrorCode;
    let mut _399: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _400: anchor_lang::prelude::Pubkey;
    let mut _401: anchor_lang::prelude::Pubkey;
    let mut _403: &anchor_lang::prelude::Rent;
    let mut _404: usize;
    let mut _405: bool;
    let mut _406: u64;
    let mut _407: &anchor_lang::prelude::AccountInfo<'_>;
    let _408: anchor_lang::prelude::AccountInfo<'_>;
    let mut _409: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _410: u64;
    let mut _411: !;
    let mut _412: anchor_lang::error::Error;
    let mut _413: anchor_lang::error::Error;
    let mut _414: anchor_lang::error::ErrorCode;
    let _415: ();
    let mut _416: bool;
    let mut _417: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _418: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let _419: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _420: !;
    let mut _421: anchor_lang::error::Error;
    let mut _422: anchor_lang::error::Error;
    let mut _423: anchor_lang::error::ErrorCode;
    let _424: ();
    let mut _425: bool;
    let mut _426: &anchor_lang::prelude::Rent;
    let mut _427: u64;
    let mut _428: &anchor_lang::prelude::AccountInfo<'_>;
    let _429: anchor_lang::prelude::AccountInfo<'_>;
    let mut _430: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _431: usize;
    let mut _432: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _433: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _434: &anchor_lang::prelude::AccountInfo<'_>;
    let _435: anchor_lang::prelude::AccountInfo<'_>;
    let mut _436: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _437: isize;
    let mut _439: !;
    let mut _440: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _442: !;
    let mut _443: anchor_lang::error::Error;
    let mut _444: anchor_lang::error::Error;
    let mut _445: anchor_lang::error::ErrorCode;
    let mut _447: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _448: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _449: isize;
    let mut _451: !;
    let mut _452: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _456: (anchor_lang::prelude::Pubkey, u8);
    let mut _457: &[&[u8]];
    let mut _458: &[&[u8]; 2];
    let _459: &[&[u8]; 2];
    let _460: [&[u8]; 2];
    let mut _461: &[u8];
    let _462: &[u8];
    let mut _463: &[u8];
    let _464: &[u8];
    let mut _465: &std::string::String;
    let mut _466: &anchor_lang::prelude::Pubkey;
    let mut _467: u8;
    let _468: ();
    let mut _469: bool;
    let mut _470: &anchor_lang::prelude::Pubkey;
    let _471: anchor_lang::prelude::Pubkey;
    let mut _472: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _473: &anchor_lang::prelude::Pubkey;
    let mut _474: !;
    let mut _475: anchor_lang::error::Error;
    let mut _476: anchor_lang::error::Error;
    let mut _477: anchor_lang::error::Error;
    let mut _478: anchor_lang::error::ErrorCode;
    let mut _479: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _480: anchor_lang::prelude::Pubkey;
    let mut _481: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _482: anchor_lang::prelude::Pubkey;
    let mut _485: &&anchor_lang::prelude::AccountInfo<'_>;
    let _486: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _489: (usize, bool);
    let mut _491: bool;
    let mut _492: bool;
    let mut _493: &&anchor_lang::prelude::Pubkey;
    let mut _494: &&anchor_lang::prelude::Pubkey;
    let _495: &anchor_lang::prelude::Pubkey;
    let _496: anchor_lang::prelude::Pubkey;
    let mut _498: &anchor_lang::prelude::AccountInfo<'_>;
    let _499: ();
    let mut _500: bool;
    let mut _501: u64;
    let mut _504: &anchor_lang::prelude::Rent;
    let mut _505: usize;
    let mut _507: anchor_lang::prelude::AccountInfo<'_>;
    let mut _508: &anchor_lang::prelude::Signer<'_>;
    let mut _509: anchor_lang::prelude::AccountInfo<'_>;
    let mut _510: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _512: anchor_lang::prelude::AccountInfo<'_>;
    let mut _513: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _514: anchor_lang::system_program::CreateAccount<'_>;
    let _515: ();
    let mut _516: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _517: std::result::Result<(), anchor_lang::error::Error>;
    let mut _518: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _519: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _520: &[&[&[u8]]];
    let mut _521: &[&[&[u8]]; 1];
    let _522: &[&[&[u8]]; 1];
    let _523: [&[&[u8]]; 1];
    let mut _524: &[&[u8]];
    let _525: &[&[u8]];
    let _526: &[&[u8]];
    let mut _527: &[&[u8]; 3];
    let _528: [&[u8]; 3];
    let mut _529: &[u8];
    let _530: &[u8];
    let mut _531: &std::string::String;
    let mut _532: &[u8];
    let _533: &[u8];
    let _534: &[u8];
    let mut _535: &[u8; 1];
    let _536: [u8; 1];
    let mut _537: u8;
    let mut _538: std::ops::RangeFull;
    let mut _539: std::ops::RangeFull;
    let mut _540: u64;
    let mut _541: u64;
    let mut _542: usize;
    let mut _543: &anchor_lang::prelude::Pubkey;
    let mut _544: isize;
    let mut _546: !;
    let mut _547: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _549: ();
    let mut _550: bool;
    let mut _551: &anchor_lang::prelude::Pubkey;
    let _552: anchor_lang::prelude::Pubkey;
    let mut _553: &anchor_lang::prelude::Signer<'_>;
    let mut _554: &anchor_lang::prelude::Pubkey;
    let _555: anchor_lang::prelude::Pubkey;
    let mut _556: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _557: !;
    let mut _558: anchor_lang::error::Error;
    let mut _559: anchor_lang::error::Error;
    let mut _560: anchor_lang::error::AnchorError;
    let mut _561: std::string::String;
    let mut _562: &anchor_lang::error::ErrorCode;
    let _563: anchor_lang::error::ErrorCode;
    let mut _564: u32;
    let mut _565: anchor_lang::error::ErrorCode;
    let mut _566: std::string::String;
    let mut _567: &anchor_lang::error::ErrorCode;
    let _568: anchor_lang::error::ErrorCode;
    let mut _569: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _570: anchor_lang::error::ErrorOrigin;
    let mut _571: anchor_lang::error::Source;
    let mut _572: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _573: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _574: anchor_lang::prelude::Pubkey;
    let mut _575: &anchor_lang::prelude::Signer<'_>;
    let mut _576: anchor_lang::prelude::Pubkey;
    let mut _577: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _579: u64;
    let mut _580: u64;
    let mut _581: &anchor_lang::prelude::Rent;
    let mut _582: usize;
    let mut _583: u64;
    let _584: ();
    let mut _585: bool;
    let mut _586: u64;
    let mut _588: anchor_lang::prelude::AccountInfo<'_>;
    let mut _589: &anchor_lang::prelude::Signer<'_>;
    let mut _590: anchor_lang::prelude::AccountInfo<'_>;
    let mut _591: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _593: anchor_lang::prelude::AccountInfo<'_>;
    let mut _594: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _595: anchor_lang::system_program::Transfer<'_>;
    let _596: ();
    let mut _597: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _598: std::result::Result<(), anchor_lang::error::Error>;
    let mut _599: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _600: u64;
    let mut _601: isize;
    let mut _603: !;
    let mut _604: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _607: anchor_lang::prelude::AccountInfo<'_>;
    let mut _608: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _610: anchor_lang::prelude::AccountInfo<'_>;
    let mut _611: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _612: anchor_lang::system_program::Allocate<'_>;
    let _613: ();
    let mut _614: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _615: std::result::Result<(), anchor_lang::error::Error>;
    let mut _616: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _617: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _618: &[&[&[u8]]];
    let mut _619: &[&[&[u8]]; 1];
    let _620: &[&[&[u8]]; 1];
    let _621: [&[&[u8]]; 1];
    let mut _622: &[&[u8]];
    let _623: &[&[u8]];
    let _624: &[&[u8]];
    let mut _625: &[&[u8]; 3];
    let _626: [&[u8]; 3];
    let mut _627: &[u8];
    let _628: &[u8];
    let mut _629: &std::string::String;
    let mut _630: &[u8];
    let _631: &[u8];
    let _632: &[u8];
    let mut _633: &[u8; 1];
    let _634: [u8; 1];
    let mut _635: u8;
    let mut _636: std::ops::RangeFull;
    let mut _637: std::ops::RangeFull;
    let mut _638: u64;
    let mut _639: usize;
    let mut _640: isize;
    let mut _642: !;
    let mut _643: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _646: anchor_lang::prelude::AccountInfo<'_>;
    let mut _647: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _649: anchor_lang::prelude::AccountInfo<'_>;
    let mut _650: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _651: anchor_lang::system_program::Assign<'_>;
    let _652: ();
    let mut _653: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _654: std::result::Result<(), anchor_lang::error::Error>;
    let mut _655: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _656: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _657: &[&[&[u8]]];
    let mut _658: &[&[&[u8]]; 1];
    let _659: &[&[&[u8]]; 1];
    let _660: [&[&[u8]]; 1];
    let mut _661: &[&[u8]];
    let _662: &[&[u8]];
    let _663: &[&[u8]];
    let mut _664: &[&[u8]; 3];
    let _665: [&[u8]; 3];
    let mut _666: &[u8];
    let _667: &[u8];
    let mut _668: &std::string::String;
    let mut _669: &[u8];
    let _670: &[u8];
    let _671: &[u8];
    let mut _672: &[u8; 1];
    let _673: [u8; 1];
    let mut _674: u8;
    let mut _675: std::ops::RangeFull;
    let mut _676: std::ops::RangeFull;
    let mut _677: &anchor_lang::prelude::Pubkey;
    let mut _678: isize;
    let mut _680: !;
    let mut _681: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _683: std::result::Result<anchor_lang::prelude::Account<'_, state::referral::ShortUrl>, anchor_lang::error::Error>;
    let mut _684: &anchor_lang::prelude::AccountInfo<'_>;
    let _685: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _686: isize;
    let mut _689: !;
    let mut _690: anchor_lang::error::Error;
    let mut _691: anchor_lang::error::Error;
    let mut _692: std::result::Result<anchor_lang::prelude::Account<'_, state::referral::ShortUrl>, anchor_lang::error::Error>;
    let mut _693: &anchor_lang::prelude::AccountInfo<'_>;
    let _694: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _695: isize;
    let mut _698: !;
    let mut _699: anchor_lang::error::Error;
    let mut _700: anchor_lang::error::Error;
    let _701: ();
    let mut _702: bool;
    let _703: ();
    let mut _704: bool;
    let mut _705: usize;
    let mut _706: usize;
    let mut _707: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _708: !;
    let mut _709: anchor_lang::error::Error;
    let mut _710: anchor_lang::error::Error;
    let mut _711: anchor_lang::error::Error;
    let mut _712: anchor_lang::error::ErrorCode;
    let mut _713: (usize, usize);
    let mut _714: usize;
    let mut _715: usize;
    let mut _716: &anchor_lang::prelude::AccountInfo<'_>;
    let _717: ();
    let mut _718: bool;
    let mut _719: &&anchor_lang::prelude::Pubkey;
    let mut _720: &&anchor_lang::prelude::Pubkey;
    let mut _721: !;
    let mut _722: anchor_lang::error::Error;
    let mut _723: anchor_lang::error::Error;
    let mut _724: anchor_lang::error::Error;
    let mut _725: anchor_lang::error::ErrorCode;
    let mut _726: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _727: anchor_lang::prelude::Pubkey;
    let mut _728: anchor_lang::prelude::Pubkey;
    let mut _730: &anchor_lang::prelude::Rent;
    let mut _731: usize;
    let mut _732: bool;
    let mut _733: u64;
    let mut _734: &anchor_lang::prelude::AccountInfo<'_>;
    let _735: anchor_lang::prelude::AccountInfo<'_>;
    let mut _736: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _737: u64;
    let mut _738: !;
    let mut _739: anchor_lang::error::Error;
    let mut _740: anchor_lang::error::Error;
    let mut _741: anchor_lang::error::ErrorCode;
    let _742: ();
    let mut _743: bool;
    let mut _744: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _745: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let _746: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _747: !;
    let mut _748: anchor_lang::error::Error;
    let mut _749: anchor_lang::error::Error;
    let mut _750: anchor_lang::error::ErrorCode;
    let _751: ();
    let mut _752: bool;
    let mut _753: &anchor_lang::prelude::Rent;
    let mut _754: u64;
    let mut _755: &anchor_lang::prelude::AccountInfo<'_>;
    let _756: anchor_lang::prelude::AccountInfo<'_>;
    let mut _757: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _758: usize;
    let mut _759: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _760: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _761: &anchor_lang::prelude::AccountInfo<'_>;
    let _762: anchor_lang::prelude::AccountInfo<'_>;
    let mut _763: &anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _764: isize;
    let mut _766: !;
    let mut _767: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _769: !;
    let mut _770: anchor_lang::error::Error;
    let mut _771: anchor_lang::error::Error;
    let mut _772: anchor_lang::error::ErrorCode;
    let _773: ();
    let mut _774: bool;
    let mut _775: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _776: &anchor_lang::prelude::Signer<'_>;
    let _777: &anchor_lang::prelude::Signer<'_>;
    let mut _778: !;
    let mut _779: anchor_lang::error::Error;
    let mut _780: anchor_lang::error::Error;
    let mut _781: anchor_lang::error::ErrorCode;
    let mut _783: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _784: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _785: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _786: &[&[u8]];
    let mut _787: &[&[u8]; 3];
    let _788: &[&[u8]; 3];
    let _789: [&[u8]; 3];
    let mut _790: &[u8];
    let _791: &[u8];
    let mut _792: &[u8];
    let _793: &[u8];
    let mut _794: &anchor_lang::prelude::Pubkey;
    let _795: anchor_lang::prelude::Pubkey;
    let mut _796: &anchor_lang::prelude::Signer<'_>;
    let mut _797: &[u8];
    let _798: &[u8];
    let _799: &[u8];
    let mut _800: &[u8; 1];
    let _801: [u8; 1];
    let mut _802: u8;
    let mut _803: u64;
    let mut _804: &state::referral::UserMetadata;
    let mut _805: &std::cell::Ref<'_, state::referral::UserMetadata>;
    let _806: std::cell::Ref<'_, state::referral::UserMetadata>;
    let mut _807: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::referral::UserMetadata>>;
    let mut _808: std::result::Result<std::cell::Ref<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _809: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _810: isize;
    let mut _812: !;
    let mut _813: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _815: std::ops::RangeFull;
    let mut _816: &anchor_lang::prelude::Pubkey;
    let _817: &&anchor_lang::prelude::Pubkey;
    let mut _818: {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
    let mut _819: isize;
    let mut _821: !;
    let mut _822: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _824: ();
    let mut _825: bool;
    let mut _826: &anchor_lang::prelude::Pubkey;
    let _827: anchor_lang::prelude::Pubkey;
    let mut _828: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _829: &anchor_lang::prelude::Pubkey;
    let mut _830: !;
    let mut _831: anchor_lang::error::Error;
    let mut _832: anchor_lang::error::Error;
    let mut _833: anchor_lang::error::Error;
    let mut _834: anchor_lang::error::ErrorCode;
    let mut _835: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _836: anchor_lang::prelude::Pubkey;
    let mut _837: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _838: anchor_lang::prelude::Pubkey;
    let _839: ();
    let mut _840: bool;
    let mut _841: &anchor_lang::prelude::Pubkey;
    let _842: &state::referral::UserMetadata;
    let mut _843: &std::cell::Ref<'_, state::referral::UserMetadata>;
    let _844: std::cell::Ref<'_, state::referral::UserMetadata>;
    let mut _845: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::referral::UserMetadata>>;
    let mut _846: std::result::Result<std::cell::Ref<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _847: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _848: isize;
    let mut _850: !;
    let mut _851: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _853: &anchor_lang::prelude::Pubkey;
    let _854: anchor_lang::prelude::Pubkey;
    let mut _855: &anchor_lang::prelude::Signer<'_>;
    let mut _856: !;
    let mut _857: anchor_lang::error::Error;
    let mut _858: anchor_lang::error::Error;
    let mut _859: anchor_lang::error::ErrorCode;
    let mut _860: handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>;
    let mut _861: anchor_lang::prelude::Signer<'_>;
    let mut _862: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
    let mut _863: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
    let mut _864: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _865: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _866: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _873: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _874: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _875: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _876: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _877: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _878: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _879: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _880: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _881: &anchor_lang::prelude::Pubkey;
    let mut _882: &anchor_lang::prelude::Pubkey;
    let mut _883: &anchor_lang::prelude::Pubkey;
    let mut _884: &anchor_lang::prelude::Pubkey;
    let mut _885: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _886: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _887: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _888: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _889: &anchor_lang::prelude::Pubkey;
    let mut _890: bool;
    let mut _891: bool;
    let mut _892: bool;
    let mut _893: bool;
    let mut _894: bool;
    let mut _895: bool;
    let mut _896: bool;
    let mut _897: bool;
    let mut _898: bool;
    let mut _899: bool;
    let mut _900: bool;
    let mut _901: bool;
    let mut _902: bool;
    let mut _903: bool;
    let mut _904: bool;
    let mut _905: bool;
    let mut _906: bool;
    let mut _907: bool;
    let mut _908: bool;
    let mut _909: bool;
    let mut _910: bool;
    let mut _911: bool;
    let mut _912: bool;
    let mut _913: bool;
    let mut _914: bool;
    let mut _915: bool;
    let mut _916: bool;
    let mut _917: isize;
    let mut _918: isize;
    let mut _919: isize;
    let mut _920: isize;
    let mut _921: isize;
    let mut _922: isize;
    let mut _923: isize;
    let mut _924: isize;
    let mut _925: isize;
    let mut _926: isize;
    let mut _927: isize;
    let mut _928: isize;
    let mut _929: isize;
    let mut _930: isize;
    let mut _931: isize;
    let mut _932: isize;
    let mut _933: isize;
    let mut _934: isize;
    let mut _935: isize;
    let mut _936: isize;
    let mut _937: isize;
    let mut _938: isize;
    let mut _939: isize;
    let mut _940: isize;
    let mut _941: isize;
    let mut _942: isize;
    let mut _943: isize;
    let mut _944: isize;
    let mut _945: isize;
    let mut _946: isize;
    let mut _947: isize;
    let mut _948: isize;
    let mut _949: isize;
    let mut _950: isize;
    let mut _951: isize;
    let mut _952: isize;
    let mut _953: isize;
    let mut _954: isize;
    let mut _955: isize;
    let mut _956: isize;
    let mut _957: isize;
    let mut _958: isize;
    let mut _959: isize;
    let mut _960: isize;
    let mut _961: isize;
    let mut _962: isize;
    let mut _963: isize;
    let mut _964: isize;
    let mut _965: isize;
    let mut _966: isize;
    let mut _967: isize;
    let mut _968: isize;
    let mut _969: isize;
    let mut _970: isize;
    let mut _971: isize;
    let mut _972: isize;
    let mut _973: isize;
    let mut _974: isize;
    let mut _975: isize;
    let mut _976: isize;
    let mut _977: isize;
    let mut _978: isize;
    let mut _979: isize;
    let mut _980: isize;
    let mut _981: isize;
    let mut _982: isize;
    let mut _983: isize;
    let mut _984: isize;
    let mut _985: isize;
    let mut _986: isize;
    let mut _987: isize;
    let mut _988: isize;
    let mut _989: isize;
    let mut _990: isize;
    let mut _991: isize;
    let mut _992: isize;
    let mut _993: isize;
    let mut _994: isize;
    let mut _995: isize;
    let mut _996: isize;
    let mut _997: isize;
    let mut _998: isize;
    let mut _999: isize;
    let mut _1000: isize;
    let mut _1001: isize;
    let mut _1002: isize;
    let mut _1003: isize;
    let mut _1004: isize;
    let mut _1005: isize;
    let mut _1006: isize;
    let mut _1007: isize;
    let mut _1008: isize;
    let mut _1009: isize;
    let mut _1010: isize;
    let mut _1011: isize;
    let mut _1012: isize;
    let mut _1013: isize;
    let mut _1014: isize;
    let mut _1015: isize;
    let mut _1016: isize;
    let mut _1017: isize;
    let mut _1018: isize;
    let mut _1019: isize;
    let mut _1020: isize;
    let mut _1021: isize;
    let mut _1022: isize;
    let mut _1023: isize;
    let mut _1024: isize;
    let mut _1025: isize;
    let mut _1026: isize;
    let mut _1027: isize;
    let mut _1028: isize;
    let mut _1029: isize;
    let mut _1030: isize;
    let mut _1031: isize;
    let mut _1032: isize;
    let mut _1033: isize;
    let mut _1034: isize;
    let mut _1035: isize;
    let mut _1036: isize;
    let mut _1037: isize;
    let mut _1038: isize;
    let mut _1039: isize;
    let mut _1040: isize;
    let mut _1041: isize;
    let mut _1042: isize;
    let mut _1043: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: std::string::String;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args;
        scope 2 {
            debug short_url => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug referrer => _20;
                let _41: &anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug referrer_state => _41;
                    let _56: &anchor_lang::prelude::AccountInfo<'_>;
                    scope 13 {
                        debug referrer_short_url => _56;
                        let _65: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                        scope 14 {
                            debug referrer_user_metadata => _65;
                            let _80: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                            scope 19 {
                                debug rent => _80;
                                let _95: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                scope 24 {
                                    debug system_program => _95;
                                    let _110: anchor_lang::prelude::Rent;
                                    let _114: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                    let _117: anchor_lang::prelude::Rent;
                                    scope 29 {
                                        debug __anchor_rent => _110;
                                        let _118: anchor_lang::prelude::Pubkey;
                                        let _119: u8;
                                        scope 34 {
                                            debug __pda_address => _118;
                                            debug __bump => _119;
                                            let _149: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
                                            let _150: &anchor_lang::prelude::AccountInfo<'_>;
                                            scope 35 {
                                                debug referrer_state => _149;
                                                let _438: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _441: usize;
                                                let _446: anchor_lang::prelude::Rent;
                                                let _450: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _453: anchor_lang::prelude::Rent;
                                                scope 73 {
                                                    debug residual => _438;
                                                    scope 74 {
                                                    }
                                                }
                                                scope 75 {
                                                    debug val => _441;
                                                    scope 76 {
                                                    }
                                                }
                                                scope 77 {
                                                    debug __anchor_rent => _446;
                                                    let _454: anchor_lang::prelude::Pubkey;
                                                    let _455: u8;
                                                    scope 82 {
                                                        debug __pda_address => _454;
                                                        debug __bump => _455;
                                                        let _483: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
                                                        let _484: &anchor_lang::prelude::AccountInfo<'_>;
                                                        scope 83 {
                                                            debug referrer_short_url => _483;
                                                            let _765: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _768: usize;
                                                            let _782: anchor_lang::prelude::Pubkey;
                                                            let _811: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _814: std::cell::Ref<'_, state::referral::UserMetadata>;
                                                            let _820: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _823: anchor_lang::prelude::Pubkey;
                                                            scope 121 {
                                                                debug residual => _765;
                                                                scope 122 {
                                                                }
                                                            }
                                                            scope 123 {
                                                                debug val => _768;
                                                                scope 124 {
                                                                }
                                                            }
                                                            scope 125 {
                                                                debug __pda_address => _782;
                                                                let _849: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _852: std::cell::Ref<'_, state::referral::UserMetadata>;
                                                                scope 134 {
                                                                    debug residual => _849;
                                                                    scope 135 {
                                                                    }
                                                                }
                                                                scope 136 {
                                                                    debug val => _852;
                                                                    scope 137 {
                                                                    }
                                                                }
                                                            }
                                                            scope 126 {
                                                                debug residual => _811;
                                                                scope 127 {
                                                                }
                                                            }
                                                            scope 128 {
                                                                debug val => _814;
                                                                scope 129 {
                                                                }
                                                            }
                                                            scope 130 {
                                                                debug residual => _820;
                                                                scope 131 {
                                                                }
                                                            }
                                                            scope 132 {
                                                                debug val => _823;
                                                                scope 133 {
                                                                }
                                                            }
                                                        }
                                                        scope 84 {
                                                            debug actual_field => _484;
                                                            let _487: &anchor_lang::prelude::Pubkey;
                                                            scope 85 {
                                                                debug actual_owner => _487;
                                                                let _488: usize;
                                                                scope 86 {
                                                                    debug space => _488;
                                                                    let _490: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
                                                                    let _497: u64;
                                                                    let _696: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
                                                                    let _697: anchor_lang::error::Error;
                                                                    let mut _869: &&anchor_lang::prelude::Pubkey;
                                                                    scope 87 {
                                                                        debug pa => _490;
                                                                        let _729: u64;
                                                                        scope 120 {
                                                                            debug required_lamports => _729;
                                                                        }
                                                                    }
                                                                    scope 88 {
                                                                        debug __current_lamports => _497;
                                                                        let _502: usize;
                                                                        let _578: u64;
                                                                        let _687: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>;
                                                                        let _688: anchor_lang::error::Error;
                                                                        let mut _867: &anchor_lang::error::ErrorCode;
                                                                        let mut _868: &anchor_lang::error::ErrorCode;
                                                                        scope 89 {
                                                                            debug space => _502;
                                                                            let _503: u64;
                                                                            scope 90 {
                                                                                debug lamports => _503;
                                                                                let _506: anchor_lang::system_program::CreateAccount<'_>;
                                                                                scope 91 {
                                                                                    debug cpi_accounts => _506;
                                                                                    let _511: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                    scope 92 {
                                                                                        debug cpi_context => _511;
                                                                                        let _545: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _548: ();
                                                                                        scope 93 {
                                                                                            debug residual => _545;
                                                                                            scope 94 {
                                                                                            }
                                                                                        }
                                                                                        scope 95 {
                                                                                            debug val => _548;
                                                                                            scope 96 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 97 {
                                                                            debug required_lamports => _578;
                                                                            let _587: anchor_lang::system_program::Transfer<'_>;
                                                                            let _606: anchor_lang::system_program::Allocate<'_>;
                                                                            scope 98 {
                                                                                debug cpi_accounts => _587;
                                                                                let _592: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                scope 99 {
                                                                                    debug cpi_context => _592;
                                                                                    let _602: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _605: ();
                                                                                    scope 100 {
                                                                                        debug residual => _602;
                                                                                        scope 101 {
                                                                                        }
                                                                                    }
                                                                                    scope 102 {
                                                                                        debug val => _605;
                                                                                        scope 103 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 104 {
                                                                                debug cpi_accounts => _606;
                                                                                let _609: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                scope 105 {
                                                                                    debug cpi_context => _609;
                                                                                    let _641: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _644: ();
                                                                                    let _645: anchor_lang::system_program::Assign<'_>;
                                                                                    scope 106 {
                                                                                        debug residual => _641;
                                                                                        scope 107 {
                                                                                        }
                                                                                    }
                                                                                    scope 108 {
                                                                                        debug val => _644;
                                                                                        scope 109 {
                                                                                        }
                                                                                    }
                                                                                    scope 110 {
                                                                                        debug cpi_accounts => _645;
                                                                                        let _648: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                        scope 111 {
                                                                                            debug cpi_context => _648;
                                                                                            let _679: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _682: ();
                                                                                            scope 112 {
                                                                                                debug residual => _679;
                                                                                                scope 113 {
                                                                                                }
                                                                                            }
                                                                                            scope 114 {
                                                                                                debug val => _682;
                                                                                                scope 115 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 116 {
                                                                            debug val => _687;
                                                                        }
                                                                        scope 117 {
                                                                            debug e => _688;
                                                                        }
                                                                    }
                                                                    scope 118 {
                                                                        debug val => _696;
                                                                    }
                                                                    scope 119 {
                                                                        debug e => _697;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 78 {
                                                    debug residual => _450;
                                                    scope 79 {
                                                    }
                                                }
                                                scope 80 {
                                                    debug val => _453;
                                                    scope 81 {
                                                    }
                                                }
                                            }
                                            scope 36 {
                                                debug actual_field => _150;
                                                let _153: &anchor_lang::prelude::Pubkey;
                                                scope 37 {
                                                    debug actual_owner => _153;
                                                    let _154: usize;
                                                    scope 38 {
                                                        debug space => _154;
                                                        let _156: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
                                                        let _163: u64;
                                                        let _369: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
                                                        let _370: anchor_lang::error::Error;
                                                        let mut _872: &&anchor_lang::prelude::Pubkey;
                                                        scope 39 {
                                                            debug pa => _156;
                                                            let _402: u64;
                                                            scope 72 {
                                                                debug required_lamports => _402;
                                                            }
                                                        }
                                                        scope 40 {
                                                            debug __current_lamports => _163;
                                                            let _168: usize;
                                                            let _246: u64;
                                                            let _360: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>;
                                                            let _361: anchor_lang::error::Error;
                                                            let mut _870: &anchor_lang::error::ErrorCode;
                                                            let mut _871: &anchor_lang::error::ErrorCode;
                                                            scope 41 {
                                                                debug space => _168;
                                                                let _169: u64;
                                                                scope 42 {
                                                                    debug lamports => _169;
                                                                    let _172: anchor_lang::system_program::CreateAccount<'_>;
                                                                    scope 43 {
                                                                        debug cpi_accounts => _172;
                                                                        let _177: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                        scope 44 {
                                                                            debug cpi_context => _177;
                                                                            let _213: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _216: ();
                                                                            scope 45 {
                                                                                debug residual => _213;
                                                                                scope 46 {
                                                                                }
                                                                            }
                                                                            scope 47 {
                                                                                debug val => _216;
                                                                                scope 48 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 49 {
                                                                debug required_lamports => _246;
                                                                let _255: anchor_lang::system_program::Transfer<'_>;
                                                                let _274: anchor_lang::system_program::Allocate<'_>;
                                                                scope 50 {
                                                                    debug cpi_accounts => _255;
                                                                    let _260: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                    scope 51 {
                                                                        debug cpi_context => _260;
                                                                        let _270: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _273: ();
                                                                        scope 52 {
                                                                            debug residual => _270;
                                                                            scope 53 {
                                                                            }
                                                                        }
                                                                        scope 54 {
                                                                            debug val => _273;
                                                                            scope 55 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 56 {
                                                                    debug cpi_accounts => _274;
                                                                    let _277: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                    scope 57 {
                                                                        debug cpi_context => _277;
                                                                        let _311: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _314: ();
                                                                        let _315: anchor_lang::system_program::Assign<'_>;
                                                                        scope 58 {
                                                                            debug residual => _311;
                                                                            scope 59 {
                                                                            }
                                                                        }
                                                                        scope 60 {
                                                                            debug val => _314;
                                                                            scope 61 {
                                                                            }
                                                                        }
                                                                        scope 62 {
                                                                            debug cpi_accounts => _315;
                                                                            let _318: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                            scope 63 {
                                                                                debug cpi_context => _318;
                                                                                let _351: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _354: ();
                                                                                scope 64 {
                                                                                    debug residual => _351;
                                                                                    scope 65 {
                                                                                    }
                                                                                }
                                                                                scope 66 {
                                                                                    debug val => _354;
                                                                                    scope 67 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 68 {
                                                                debug val => _360;
                                                            }
                                                            scope 69 {
                                                                debug e => _361;
                                                            }
                                                        }
                                                        scope 70 {
                                                            debug val => _369;
                                                        }
                                                        scope 71 {
                                                            debug e => _370;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _114;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _117;
                                        scope 33 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _106;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _109;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _91;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _94;
                                scope 23 {
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _76;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _79;
                            scope 18 {
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _916 = const false;
        _915 = const false;
        _914 = const false;
        _913 = const false;
        _912 = const false;
        _911 = const false;
        _910 = const false;
        _909 = const false;
        _908 = const false;
        _907 = const false;
        _905 = const false;
        _904 = const false;
        _903 = const false;
        _902 = const false;
        _901 = const false;
        _900 = const false;
        _899 = const false;
        _898 = const false;
        _897 = const false;
        _896 = const false;
        _894 = const false;
        _906 = const false;
        _895 = const false;
        _891 = const false;
        _890 = const false;
        _893 = const false;
        _892 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
        _10 = std::result::Result::<<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18}>(move _11, move _14) -> [return: bb2, unwind: bb433];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind: bb433];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'info> as anchor_lang::Accounts<'info, handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrlBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = move (_8.0: std::string::String);
        _919 = discriminant(_9);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitReferrerStateAndShortUrlBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind: bb432];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind: bb503];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        _917 = discriminant(_9);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb414;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18}>(move _23, move _29) -> [return: bb9, unwind: bb432];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb432];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _921 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _873 = deref_copy (*_2);
        _37 = &(*_873);
        _36 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _37) -> [return: bb14, unwind: bb432];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb502];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _1017 = discriminant(_21);
        StorageDead(_21);
        goto -> bb412;
    }

    bb14: {
        switchInt(move _36) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = AccountNotEnoughKeys;
        _39 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _40) -> [return: bb16, unwind: bb432];
    }

    bb16: {
        StorageDead(_40);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _39);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb412;
    }

    bb17: {
        StorageDead(_37);
        _35 = const ();
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _874 = deref_copy (*_2);
        _43 = Len((*_874));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb18, unwind: bb432];
    }

    bb18: {
        _875 = deref_copy (*_2);
        _41 = &(*_875)[_42];
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _876 = deref_copy (*_2);
        _48 = &(*_876);
        StorageLive(_49);
        _49 = RangeFrom::<usize> { start: const 1_usize };
        _47 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _48, move _49) -> [return: bb19, unwind: bb432];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = &(*_47);
        _45 = &(*_46);
        (*_2) = move _45;
        StorageDead(_45);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _877 = deref_copy (*_2);
        _52 = &(*_877);
        _51 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _52) -> [return: bb20, unwind: bb432];
    }

    bb20: {
        switchInt(move _51) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        _55 = AccountNotEnoughKeys;
        _54 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _55) -> [return: bb22, unwind: bb432];
    }

    bb22: {
        StorageDead(_55);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _54);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb411;
    }

    bb23: {
        StorageDead(_52);
        _50 = const ();
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const 0_usize;
        _878 = deref_copy (*_2);
        _58 = Len((*_878));
        _59 = Lt(_57, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb24, unwind: bb432];
    }

    bb24: {
        _879 = deref_copy (*_2);
        _56 = &(*_879)[_57];
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _880 = deref_copy (*_2);
        _63 = &(*_880);
        StorageLive(_64);
        _64 = RangeFrom::<usize> { start: const 1_usize };
        _62 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _63, move _64) -> [return: bb25, unwind: bb432];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = &(*_62);
        _60 = &(*_61);
        (*_2) = move _60;
        StorageDead(_60);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::Accounts<'_, InitReferrerStateAndShortUrlBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb432];
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
        _67 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18}>(move _68, move _74) -> [return: bb27, unwind: bb432];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb432];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        _65 = move _79;
        StorageDead(_79);
        _923 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitReferrerStateAndShortUrlBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb432];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb501];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _1015 = discriminant(_66);
        StorageDead(_66);
        goto -> bb410;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
        _82 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18}>(move _83, move _89) -> [return: bb33, unwind: bb432];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb432];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _80 = move _94;
        StorageDead(_94);
        _925 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitReferrerStateAndShortUrlBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb432];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb500];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _1013 = discriminant(_81);
        StorageDead(_81);
        goto -> bb409;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
        _97 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18}>(move _98, move _104) -> [return: bb39, unwind: bb432];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb432];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _95 = move _109;
        StorageDead(_109);
        _927 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb44, unwind: bb432];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb499];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _1011 = discriminant(_96);
        StorageDead(_96);
        goto -> bb408;
    }

    bb44: {
        _111 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _112) -> [return: bb45, unwind: bb432];
    }

    bb45: {
        StorageDead(_112);
        _113 = discriminant(_111);
        switchInt(move _113) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        StorageLive(_117);
        _117 = ((_111 as Continue).0: anchor_lang::prelude::Rent);
        _110 = _117;
        StorageDead(_117);
        _929 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = const _;
        _125 = &(*_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_20;
        _130 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _131) -> [return: bb49, unwind: bb432];
    }

    bb47: {
        StorageLive(_114);
        _114 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_116);
        _116 = move _114;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _116) -> [return: bb48, unwind: bb498];
    }

    bb48: {
        StorageDead(_116);
        StorageDead(_114);
        _1009 = discriminant(_111);
        StorageDead(_111);
        goto -> bb407;
    }

    bb49: {
        StorageDead(_131);
        _881 = deref_copy ((*_130).0: &anchor_lang::prelude::Pubkey);
        _129 = &(*_881);
        _128 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _129) -> [return: bb50, unwind: bb432];
    }

    bb50: {
        _127 = &(*_128);
        StorageDead(_129);
        _124 = [move _125, move _127];
        StorageDead(_127);
        StorageDead(_125);
        _123 = &_124;
        _122 = &(*_123);
        _121 = move _122 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_122);
        StorageLive(_132);
        _132 = &(*_1);
        _120 = anchor_lang::prelude::Pubkey::find_program_address(move _121, move _132) -> [return: bb51, unwind: bb432];
    }

    bb51: {
        StorageDead(_132);
        StorageDead(_121);
        StorageLive(_118);
        _118 = (_120.0: anchor_lang::prelude::Pubkey);
        StorageLive(_119);
        _119 = (_120.1: u8);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_120);
        StorageLive(_133);
        _133 = _119;
        ((*_4).0: u8) = move _133;
        StorageDead(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &(*_41);
        _137 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _138) -> [return: bb52, unwind: bb432];
    }

    bb52: {
        _136 = &_137;
        StorageDead(_138);
        StorageLive(_139);
        _139 = &_118;
        _135 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _136, move _139) -> [return: bb53, unwind: bb432];
    }

    bb53: {
        switchInt(move _135) -> [0: bb59, otherwise: bb54];
    }

    bb54: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = ConstraintSeeds;
        _143 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _144) -> [return: bb55, unwind: bb432];
    }

    bb55: {
        StorageDead(_144);
        _142 = anchor_lang::error::Error::with_account_name::<&str>(move _143, const "referrer_state") -> [return: bb56, unwind: bb432];
    }

    bb56: {
        _916 = const true;
        StorageDead(_143);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(*_41);
        _146 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _147) -> [return: bb57, unwind: bb497];
    }

    bb57: {
        StorageDead(_147);
        StorageLive(_148);
        _148 = _118;
        _145 = (move _146, move _148);
        StorageDead(_148);
        StorageDead(_146);
        _916 = const false;
        _141 = anchor_lang::error::Error::with_pubkeys(move _142, move _145) -> [return: bb58, unwind: bb497];
    }

    bb58: {
        StorageDead(_145);
        _916 = const false;
        StorageDead(_142);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _141);
        StorageDead(_141);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb406;
    }

    bb59: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        _134 = const ();
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_41;
        _151 = &(*_152);
        _150 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _151) -> [return: bb60, unwind: bb432];
    }

    bb60: {
        StorageDead(_151);
        StorageDead(_152);
        StorageLive(_153);
        _153 = ((*_150).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_154);
        _155 = CheckedAdd(const _, const 8_usize);
        assert(!move (_155.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 8_usize) -> [success: bb61, unwind: bb432];
    }

    bb61: {
        _154 = move (_155.0: usize);
        StorageLive(_156);
        StorageLive(_157);
        _157 = const false;
        switchInt(move _157) -> [0: bb64, otherwise: bb62];
    }

    bb62: {
        StorageLive(_158);
        StorageLive(_159);
        _159 = &_153;
        StorageLive(_160);
        _872 = const _;
        _160 = &(*_872);
        _158 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _159, move _160) -> [return: bb63, unwind: bb432];
    }

    bb63: {
        switchInt(move _158) -> [0: bb141, otherwise: bb64];
    }

    bb64: {
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &(*_41);
        _163 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _164) -> [return: bb65, unwind: bb432];
    }

    bb65: {
        StorageDead(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = _163;
        _166 = Eq(move _167, const 0_u64);
        switchInt(move _166) -> [0: bb82, otherwise: bb66];
    }

    bb66: {
        StorageDead(_167);
        StorageLive(_168);
        _168 = _154;
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_110;
        StorageLive(_171);
        _171 = _168;
        _169 = anchor_lang::prelude::Rent::minimum_balance(move _170, move _171) -> [return: bb67, unwind: bb432];
    }

    bb67: {
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_20;
        _173 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _174) -> [return: bb68, unwind: bb432];
    }

    bb68: {
        StorageDead(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &(*_41);
        _175 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _176) -> [return: bb69, unwind: bb431];
    }

    bb69: {
        StorageDead(_176);
        _915 = const true;
        _172 = anchor_lang::system_program::CreateAccount::<'_> { from: move _173, to: move _175 };
        StorageDead(_175);
        StorageDead(_173);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_95;
        _178 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _179) -> [return: bb70, unwind: bb495];
    }

    bb70: {
        StorageDead(_179);
        StorageLive(_180);
        _915 = const false;
        _180 = move _172;
        _177 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _178, move _180) -> [return: bb71, unwind: bb495];
    }

    bb71: {
        StorageDead(_180);
        StorageDead(_178);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _914 = const true;
        _185 = move _177;
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_20;
        _198 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _199) -> [return: bb72, unwind: bb493];
    }

    bb72: {
        StorageDead(_199);
        _882 = deref_copy ((*_198).0: &anchor_lang::prelude::Pubkey);
        _197 = &(*_882);
        _196 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _197) -> [return: bb73, unwind: bb493];
    }

    bb73: {
        _195 = &(*_196);
        StorageDead(_197);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _119;
        _204 = [move _205];
        _203 = &_204;
        StorageDead(_205);
        StorageLive(_206);
        _206 = RangeFull;
        _202 = <[u8; 1] as Index<RangeFull>>::index(move _203, move _206) -> [return: bb74, unwind: bb493];
    }

    bb74: {
        StorageDead(_206);
        StorageDead(_203);
        _201 = &(*_202);
        _200 = &(*_201);
        _194 = [const _, move _195, move _200];
        _193 = &_194;
        StorageDead(_200);
        StorageDead(_195);
        StorageLive(_207);
        _207 = RangeFull;
        _192 = <[&[u8]; 3] as Index<RangeFull>>::index(move _193, move _207) -> [return: bb75, unwind: bb493];
    }

    bb75: {
        StorageDead(_207);
        StorageDead(_193);
        _191 = &(*_192);
        _190 = &(*_191);
        _189 = [move _190];
        StorageDead(_190);
        _188 = &_189;
        _187 = &(*_188);
        _186 = move _187 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_187);
        _914 = const false;
        _184 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _185, move _186) -> [return: bb76, unwind: bb493];
    }

    bb76: {
        StorageDead(_186);
        _914 = const false;
        StorageDead(_185);
        StorageLive(_208);
        _208 = _169;
        StorageLive(_209);
        StorageLive(_210);
        _210 = _168;
        _209 = move _210 as u64 (IntToInt);
        StorageDead(_210);
        StorageLive(_211);
        _211 = &(*_1);
        _183 = anchor_lang::system_program::create_account(move _184, move _208, move _209, move _211) -> [return: bb77, unwind: bb495];
    }

    bb77: {
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_184);
        _182 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _183) -> [return: bb78, unwind: bb495];
    }

    bb78: {
        StorageDead(_183);
        _212 = discriminant(_182);
        switchInt(move _212) -> [0: bb79, 1: bb80, otherwise: bb5];
    }

    bb79: {
        StorageLive(_216);
        _216 = ((_182 as Continue).0: ());
        _181 = _216;
        StorageDead(_216);
        _931 = discriminant(_182);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_182);
        StorageDead(_181);
        _165 = const ();
        StorageDead(_177);
        _915 = const false;
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb136;
    }

    bb80: {
        StorageLive(_213);
        _213 = move ((_182 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_215);
        _215 = move _213;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _215) -> [return: bb81, unwind: bb491];
    }

    bb81: {
        StorageDead(_215);
        StorageDead(_213);
        _1007 = discriminant(_182);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_177);
        _915 = const false;
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb402;
    }

    bb82: {
        StorageDead(_167);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &_20;
        _220 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _221) -> [return: bb83, unwind: bb432];
    }

    bb83: {
        _219 = &_220;
        StorageDead(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &(*_41);
        _223 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _224) -> [return: bb84, unwind: bb432];
    }

    bb84: {
        _222 = &_223;
        StorageDead(_224);
        _218 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _219, move _222) -> [return: bb85, unwind: bb432];
    }

    bb85: {
        switchInt(move _218) -> [0: bb94, otherwise: bb86];
    }

    bb86: {
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _871 = const _;
        _230 = &(*_871);
        _229 = anchor_lang::error::ErrorCode::name(move _230) -> [return: bb87, unwind: bb432];
    }

    bb87: {
        StorageDead(_230);
        StorageLive(_232);
        StorageLive(_233);
        _233 = TryingToInitPayerAsProgramAccount;
        _232 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _233) -> [return: bb88, unwind: bb430];
    }

    bb88: {
        StorageDead(_233);
        StorageLive(_234);
        StorageLive(_235);
        _870 = const _;
        _235 = &(*_870);
        _234 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _235) -> [return: bb89, unwind: bb430];
    }

    bb89: {
        StorageDead(_235);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_referrer_state_and_short_url.rs", line: const 30_u32 };
        _238 = anchor_lang::error::ErrorOrigin::Source(move _239);
        StorageDead(_239);
        _237 = std::option::Option::<ErrorOrigin>::Some(move _238);
        StorageDead(_238);
        StorageLive(_240);
        _240 = std::option::Option::<ComparedValues>::None;
        _228 = anchor_lang::error::AnchorError { error_name: move _229, error_code_number: move _232, error_msg: move _234, error_origin: move _237, compared_values: move _240 };
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_229);
        _227 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _228) -> [return: bb90, unwind: bb432];
    }

    bb90: {
        _913 = const true;
        StorageDead(_228);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &_20;
        _242 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _243) -> [return: bb91, unwind: bb490];
    }

    bb91: {
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &(*_41);
        _244 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _245) -> [return: bb92, unwind: bb490];
    }

    bb92: {
        StorageDead(_245);
        _241 = (move _242, move _244);
        StorageDead(_244);
        StorageDead(_242);
        _913 = const false;
        _226 = anchor_lang::error::Error::with_pubkeys(move _227, move _241) -> [return: bb93, unwind: bb490];
    }

    bb93: {
        StorageDead(_241);
        _913 = const false;
        StorageDead(_227);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _226);
        StorageDead(_226);
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb402;
    }

    bb94: {
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_219);
        _217 = const ();
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &_110;
        StorageLive(_250);
        _250 = _154;
        _248 = anchor_lang::prelude::Rent::minimum_balance(move _249, move _250) -> [return: bb95, unwind: bb432];
    }

    bb95: {
        StorageDead(_250);
        StorageDead(_249);
        _247 = <u64 as Ord>::max(move _248, const 1_u64) -> [return: bb96, unwind: bb432];
    }

    bb96: {
        StorageDead(_248);
        StorageLive(_251);
        _251 = _163;
        _246 = core::num::<impl u64>::saturating_sub(move _247, move _251) -> [return: bb97, unwind: bb432];
    }

    bb97: {
        StorageDead(_251);
        StorageDead(_247);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = _246;
        _253 = Gt(move _254, const 0_u64);
        switchInt(move _253) -> [0: bb108, otherwise: bb98];
    }

    bb98: {
        StorageDead(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &_20;
        _256 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _257) -> [return: bb99, unwind: bb432];
    }

    bb99: {
        StorageDead(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &(*_41);
        _258 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _259) -> [return: bb100, unwind: bb429];
    }

    bb100: {
        StorageDead(_259);
        _912 = const true;
        _255 = anchor_lang::system_program::Transfer::<'_> { from: move _256, to: move _258 };
        StorageDead(_258);
        StorageDead(_256);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_95;
        _261 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _262) -> [return: bb101, unwind: bb488];
    }

    bb101: {
        StorageDead(_262);
        StorageLive(_263);
        _912 = const false;
        _263 = move _255;
        _260 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _261, move _263) -> [return: bb102, unwind: bb488];
    }

    bb102: {
        StorageDead(_263);
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = move _260;
        StorageLive(_268);
        _268 = _246;
        _266 = anchor_lang::system_program::transfer(move _267, move _268) -> [return: bb103, unwind: bb488];
    }

    bb103: {
        StorageDead(_268);
        StorageDead(_267);
        _265 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _266) -> [return: bb104, unwind: bb488];
    }

    bb104: {
        StorageDead(_266);
        _269 = discriminant(_265);
        switchInt(move _269) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_273);
        _273 = ((_265 as Continue).0: ());
        _264 = _273;
        StorageDead(_273);
        _933 = discriminant(_265);
        StorageDead(_265);
        StorageDead(_264);
        _252 = const ();
        StorageDead(_260);
        _912 = const false;
        StorageDead(_255);
        goto -> bb109;
    }

    bb106: {
        StorageLive(_270);
        _270 = move ((_265 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_272);
        _272 = move _270;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _272) -> [return: bb107, unwind: bb486];
    }

    bb107: {
        StorageDead(_272);
        StorageDead(_270);
        _1005 = discriminant(_265);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_260);
        _912 = const false;
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb401;
    }

    bb108: {
        StorageDead(_254);
        _252 = const ();
        goto -> bb109;
    }

    bb109: {
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &(*_41);
        _275 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _276) -> [return: bb110, unwind: bb432];
    }

    bb110: {
        StorageDead(_276);
        _911 = const true;
        _274 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _275 };
        StorageDead(_275);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _279 = &_95;
        _278 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _279) -> [return: bb111, unwind: bb485];
    }

    bb111: {
        StorageDead(_279);
        StorageLive(_280);
        _911 = const false;
        _280 = move _274;
        _277 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _278, move _280) -> [return: bb112, unwind: bb485];
    }

    bb112: {
        StorageDead(_280);
        StorageDead(_278);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _910 = const true;
        _285 = move _277;
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = &_20;
        _298 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _299) -> [return: bb113, unwind: bb483];
    }

    bb113: {
        StorageDead(_299);
        _883 = deref_copy ((*_298).0: &anchor_lang::prelude::Pubkey);
        _297 = &(*_883);
        _296 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _297) -> [return: bb114, unwind: bb483];
    }

    bb114: {
        _295 = &(*_296);
        StorageDead(_297);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = _119;
        _304 = [move _305];
        _303 = &_304;
        StorageDead(_305);
        StorageLive(_306);
        _306 = RangeFull;
        _302 = <[u8; 1] as Index<RangeFull>>::index(move _303, move _306) -> [return: bb115, unwind: bb483];
    }

    bb115: {
        StorageDead(_306);
        StorageDead(_303);
        _301 = &(*_302);
        _300 = &(*_301);
        _294 = [const _, move _295, move _300];
        _293 = &_294;
        StorageDead(_300);
        StorageDead(_295);
        StorageLive(_307);
        _307 = RangeFull;
        _292 = <[&[u8]; 3] as Index<RangeFull>>::index(move _293, move _307) -> [return: bb116, unwind: bb483];
    }

    bb116: {
        StorageDead(_307);
        StorageDead(_293);
        _291 = &(*_292);
        _290 = &(*_291);
        _289 = [move _290];
        StorageDead(_290);
        _288 = &_289;
        _287 = &(*_288);
        _286 = move _287 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_287);
        _910 = const false;
        _284 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _285, move _286) -> [return: bb117, unwind: bb483];
    }

    bb117: {
        StorageDead(_286);
        _910 = const false;
        StorageDead(_285);
        StorageLive(_308);
        StorageLive(_309);
        _309 = _154;
        _308 = move _309 as u64 (IntToInt);
        StorageDead(_309);
        _283 = anchor_lang::system_program::allocate(move _284, move _308) -> [return: bb118, unwind: bb485];
    }

    bb118: {
        StorageDead(_308);
        StorageDead(_284);
        _282 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _283) -> [return: bb119, unwind: bb485];
    }

    bb119: {
        StorageDead(_283);
        _310 = discriminant(_282);
        switchInt(move _310) -> [0: bb120, 1: bb121, otherwise: bb5];
    }

    bb120: {
        StorageLive(_314);
        _314 = ((_282 as Continue).0: ());
        _281 = _314;
        StorageDead(_314);
        _935 = discriminant(_282);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_282);
        StorageDead(_281);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _317 = &(*_41);
        _316 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _317) -> [return: bb123, unwind: bb485];
    }

    bb121: {
        StorageLive(_311);
        _311 = move ((_282 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_313);
        _313 = move _311;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _313) -> [return: bb122, unwind: bb481];
    }

    bb122: {
        StorageDead(_313);
        StorageDead(_311);
        _1003 = discriminant(_282);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_282);
        StorageDead(_281);
        goto -> bb400;
    }

    bb123: {
        StorageDead(_317);
        _909 = const true;
        _315 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _316 };
        StorageDead(_316);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &_95;
        _319 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _320) -> [return: bb124, unwind: bb480];
    }

    bb124: {
        StorageDead(_320);
        StorageLive(_321);
        _909 = const false;
        _321 = move _315;
        _318 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _319, move _321) -> [return: bb125, unwind: bb480];
    }

    bb125: {
        StorageDead(_321);
        StorageDead(_319);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _908 = const true;
        _326 = move _318;
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _340 = &_20;
        _339 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _340) -> [return: bb126, unwind: bb478];
    }

    bb126: {
        StorageDead(_340);
        _884 = deref_copy ((*_339).0: &anchor_lang::prelude::Pubkey);
        _338 = &(*_884);
        _337 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _338) -> [return: bb127, unwind: bb478];
    }

    bb127: {
        _336 = &(*_337);
        StorageDead(_338);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = _119;
        _345 = [move _346];
        _344 = &_345;
        StorageDead(_346);
        StorageLive(_347);
        _347 = RangeFull;
        _343 = <[u8; 1] as Index<RangeFull>>::index(move _344, move _347) -> [return: bb128, unwind: bb478];
    }

    bb128: {
        StorageDead(_347);
        StorageDead(_344);
        _342 = &(*_343);
        _341 = &(*_342);
        _335 = [const _, move _336, move _341];
        _334 = &_335;
        StorageDead(_341);
        StorageDead(_336);
        StorageLive(_348);
        _348 = RangeFull;
        _333 = <[&[u8]; 3] as Index<RangeFull>>::index(move _334, move _348) -> [return: bb129, unwind: bb478];
    }

    bb129: {
        StorageDead(_348);
        StorageDead(_334);
        _332 = &(*_333);
        _331 = &(*_332);
        _330 = [move _331];
        StorageDead(_331);
        _329 = &_330;
        _328 = &(*_329);
        _327 = move _328 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_328);
        _908 = const false;
        _325 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _326, move _327) -> [return: bb130, unwind: bb478];
    }

    bb130: {
        StorageDead(_327);
        _908 = const false;
        StorageDead(_326);
        StorageLive(_349);
        _349 = &(*_1);
        _324 = anchor_lang::system_program::assign(move _325, move _349) -> [return: bb131, unwind: bb480];
    }

    bb131: {
        StorageDead(_349);
        StorageDead(_325);
        _323 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _324) -> [return: bb132, unwind: bb480];
    }

    bb132: {
        StorageDead(_324);
        _350 = discriminant(_323);
        switchInt(move _350) -> [0: bb133, 1: bb134, otherwise: bb5];
    }

    bb133: {
        StorageLive(_354);
        _354 = ((_323 as Continue).0: ());
        _322 = _354;
        StorageDead(_354);
        _937 = discriminant(_323);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_323);
        StorageDead(_322);
        _165 = const ();
        StorageDead(_318);
        _909 = const false;
        StorageDead(_315);
        StorageDead(_277);
        _911 = const false;
        StorageDead(_274);
        StorageDead(_246);
        goto -> bb136;
    }

    bb134: {
        StorageLive(_351);
        _351 = move ((_323 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_353);
        _353 = move _351;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _353) -> [return: bb135, unwind: bb476];
    }

    bb135: {
        StorageDead(_353);
        StorageDead(_351);
        _1001 = discriminant(_323);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_318);
        _909 = const false;
        StorageDead(_315);
        goto -> bb400;
    }

    bb136: {
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &(*_1);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &_41;
        _885 = deref_copy (*_358);
        _357 = &(*_885);
        _355 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerState>::try_from_unchecked(move _356, move _357) -> [return: bb137, unwind: bb432];
    }

    bb137: {
        StorageDead(_357);
        StorageDead(_356);
        _359 = discriminant(_355);
        switchInt(move _359) -> [0: bb139, 1: bb138, otherwise: bb5];
    }

    bb138: {
        StorageLive(_361);
        _361 = move ((_355 as Err).0: anchor_lang::error::Error);
        StorageLive(_363);
        StorageLive(_364);
        _364 = move _361;
        _363 = anchor_lang::error::Error::with_account_name::<&str>(move _364, const "referrer_state") -> [return: bb140, unwind: bb475];
    }

    bb139: {
        StorageLive(_360);
        _360 = move ((_355 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>);
        _156 = move _360;
        StorageDead(_360);
        StorageDead(_163);
        _939 = discriminant(_355);
        StorageDead(_358);
        StorageDead(_355);
        goto -> bb146;
    }

    bb140: {
        StorageDead(_364);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _363);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_163);
        _999 = discriminant(_355);
        StorageDead(_358);
        StorageDead(_355);
        goto -> bb403;
    }

    bb141: {
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &_41;
        _886 = deref_copy (*_367);
        _366 = &(*_886);
        _365 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerState>::try_from(move _366) -> [return: bb142, unwind: bb432];
    }

    bb142: {
        StorageDead(_366);
        _368 = discriminant(_365);
        switchInt(move _368) -> [0: bb144, 1: bb143, otherwise: bb5];
    }

    bb143: {
        StorageLive(_370);
        _370 = move ((_365 as Err).0: anchor_lang::error::Error);
        StorageLive(_372);
        StorageLive(_373);
        _373 = move _370;
        _372 = anchor_lang::error::Error::with_account_name::<&str>(move _373, const "referrer_state") -> [return: bb145, unwind: bb474];
    }

    bb144: {
        StorageLive(_369);
        _369 = move ((_365 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerState>);
        _156 = move _369;
        StorageDead(_369);
        _941 = discriminant(_365);
        StorageDead(_367);
        StorageDead(_365);
        goto -> bb146;
    }

    bb145: {
        StorageDead(_373);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _372);
        StorageDead(_372);
        StorageDead(_370);
        _997 = discriminant(_365);
        StorageDead(_367);
        StorageDead(_365);
        goto -> bb403;
    }

    bb146: {
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_374);
        StorageLive(_375);
        _375 = const false;
        switchInt(move _375) -> [0: bb170, otherwise: bb147];
    }

    bb147: {
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = _154;
        StorageLive(_379);
        StorageLive(_380);
        _380 = &(*_150);
        _379 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _380) -> [return: bb148, unwind: bb432];
    }

    bb148: {
        StorageDead(_380);
        _377 = Ne(move _378, move _379);
        switchInt(move _377) -> [0: bb154, otherwise: bb149];
    }

    bb149: {
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = ConstraintSpace;
        _384 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _385) -> [return: bb150, unwind: bb432];
    }

    bb150: {
        StorageDead(_385);
        _383 = anchor_lang::error::Error::with_account_name::<&str>(move _384, const "referrer_state") -> [return: bb151, unwind: bb432];
    }

    bb151: {
        _907 = const true;
        StorageDead(_384);
        StorageLive(_386);
        StorageLive(_387);
        _387 = _154;
        StorageLive(_388);
        StorageLive(_389);
        _389 = &(*_150);
        _388 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _389) -> [return: bb152, unwind: bb473];
    }

    bb152: {
        StorageDead(_389);
        _386 = (move _387, move _388);
        StorageDead(_388);
        StorageDead(_387);
        _907 = const false;
        _382 = anchor_lang::error::Error::with_values::<usize, usize>(move _383, move _386) -> [return: bb153, unwind: bb473];
    }

    bb153: {
        StorageDead(_386);
        _907 = const false;
        StorageDead(_383);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _382);
        StorageDead(_382);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb399;
    }

    bb154: {
        StorageDead(_379);
        StorageDead(_378);
        _376 = const ();
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &_153;
        StorageLive(_393);
        _393 = &_1;
        _391 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _392, move _393) -> [return: bb155, unwind: bb432];
    }

    bb155: {
        switchInt(move _391) -> [0: bb160, otherwise: bb156];
    }

    bb156: {
        StorageDead(_393);
        StorageDead(_392);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = ConstraintOwner;
        _397 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _398) -> [return: bb157, unwind: bb432];
    }

    bb157: {
        StorageDead(_398);
        _396 = anchor_lang::error::Error::with_account_name::<&str>(move _397, const "referrer_state") -> [return: bb158, unwind: bb432];
    }

    bb158: {
        StorageDead(_397);
        StorageLive(_399);
        StorageLive(_400);
        _400 = (*_153);
        StorageLive(_401);
        _401 = (*_1);
        _399 = (move _400, move _401);
        StorageDead(_401);
        StorageDead(_400);
        _395 = anchor_lang::error::Error::with_pubkeys(move _396, move _399) -> [return: bb159, unwind: bb432];
    }

    bb159: {
        StorageDead(_399);
        StorageDead(_396);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _395);
        StorageDead(_395);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb399;
    }

    bb160: {
        StorageDead(_393);
        StorageDead(_392);
        _390 = const ();
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_402);
        StorageLive(_403);
        _403 = &_110;
        StorageLive(_404);
        _404 = _154;
        _402 = anchor_lang::prelude::Rent::minimum_balance(move _403, move _404) -> [return: bb161, unwind: bb432];
    }

    bb161: {
        StorageDead(_404);
        StorageDead(_403);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = &_156;
        _408 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _409) -> [return: bb162, unwind: bb432];
    }

    bb162: {
        _407 = &_408;
        StorageDead(_409);
        _406 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _407) -> [return: bb163, unwind: bb428];
    }

    bb163: {
        StorageDead(_407);
        StorageLive(_410);
        _410 = _402;
        _405 = Lt(move _406, move _410);
        switchInt(move _405) -> [0: bb168, otherwise: bb164];
    }

    bb164: {
        StorageDead(_410);
        drop(_408) -> [return: bb165, unwind: bb432];
    }

    bb165: {
        StorageDead(_408);
        StorageDead(_406);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = ConstraintRentExempt;
        _413 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _414) -> [return: bb166, unwind: bb432];
    }

    bb166: {
        StorageDead(_414);
        _412 = anchor_lang::error::Error::with_account_name::<&str>(move _413, const "referrer_state") -> [return: bb167, unwind: bb432];
    }

    bb167: {
        StorageDead(_413);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _412);
        StorageDead(_412);
        StorageDead(_405);
        StorageDead(_402);
        goto -> bb399;
    }

    bb168: {
        StorageDead(_410);
        drop(_408) -> [return: bb169, unwind: bb432];
    }

    bb169: {
        StorageDead(_408);
        StorageDead(_406);
        _374 = const ();
        StorageDead(_405);
        StorageDead(_402);
        goto -> bb171;
    }

    bb170: {
        _374 = const ();
        goto -> bb171;
    }

    bb171: {
        StorageDead(_375);
        StorageDead(_374);
        _149 = move _156;
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_150);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = &_149;
        _418 = &(*_419);
        _417 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _418) -> [return: bb172, unwind: bb432];
    }

    bb172: {
        StorageDead(_418);
        _416 = ((*_417).6: bool);
        switchInt(move _416) -> [0: bb173, otherwise: bb176];
    }

    bb173: {
        StorageDead(_419);
        StorageDead(_417);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = ConstraintMut;
        _422 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _423) -> [return: bb174, unwind: bb432];
    }

    bb174: {
        StorageDead(_423);
        _421 = anchor_lang::error::Error::with_account_name::<&str>(move _422, const "referrer_state") -> [return: bb175, unwind: bb432];
    }

    bb175: {
        StorageDead(_422);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _421);
        StorageDead(_421);
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb405;
    }

    bb176: {
        StorageDead(_419);
        StorageDead(_417);
        _415 = const ();
        StorageDead(_416);
        StorageDead(_415);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = &_110;
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = &_149;
        _429 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _430) -> [return: bb177, unwind: bb432];
    }

    bb177: {
        _428 = &_429;
        StorageDead(_430);
        _427 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _428) -> [return: bb178, unwind: bb427];
    }

    bb178: {
        StorageDead(_428);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &_149;
        _435 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _436) -> [return: bb179, unwind: bb427];
    }

    bb179: {
        _434 = &_435;
        StorageDead(_436);
        _433 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _434) -> [return: bb180, unwind: bb426];
    }

    bb180: {
        StorageDead(_434);
        _432 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _433) -> [return: bb181, unwind: bb426];
    }

    bb181: {
        _906 = const true;
        StorageDead(_433);
        _437 = discriminant(_432);
        switchInt(move _437) -> [0: bb182, 1: bb183, otherwise: bb5];
    }

    bb182: {
        StorageLive(_441);
        _441 = ((_432 as Continue).0: usize);
        _431 = _441;
        StorageDead(_441);
        _425 = anchor_lang::prelude::Rent::is_exempt(move _426, move _427, move _431) -> [return: bb185, unwind: bb471];
    }

    bb183: {
        StorageLive(_438);
        _438 = move ((_432 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_440);
        _440 = move _438;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _440) -> [return: bb184, unwind: bb471];
    }

    bb184: {
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_426);
        _995 = discriminant(_432);
        drop(_435) -> [return: bb396, unwind: bb427];
    }

    bb185: {
        switchInt(move _425) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_426);
        _943 = discriminant(_432);
        drop(_435) -> [return: bb192, unwind: bb427];
    }

    bb187: {
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_426);
        _945 = discriminant(_432);
        drop(_435) -> [return: bb188, unwind: bb427];
    }

    bb188: {
        StorageDead(_435);
        _906 = const false;
        StorageDead(_432);
        drop(_429) -> [return: bb189, unwind: bb432];
    }

    bb189: {
        StorageDead(_429);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = ConstraintRentExempt;
        _444 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _445) -> [return: bb190, unwind: bb432];
    }

    bb190: {
        StorageDead(_445);
        _443 = anchor_lang::error::Error::with_account_name::<&str>(move _444, const "referrer_state") -> [return: bb191, unwind: bb432];
    }

    bb191: {
        StorageDead(_444);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _443);
        StorageDead(_443);
        goto -> bb398;
    }

    bb192: {
        StorageDead(_435);
        _906 = const false;
        StorageDead(_432);
        drop(_429) -> [return: bb193, unwind: bb432];
    }

    bb193: {
        StorageDead(_429);
        _424 = const ();
        StorageDead(_425);
        StorageDead(_424);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        _448 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb194, unwind: bb432];
    }

    bb194: {
        _447 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _448) -> [return: bb195, unwind: bb432];
    }

    bb195: {
        StorageDead(_448);
        _449 = discriminant(_447);
        switchInt(move _449) -> [0: bb196, 1: bb197, otherwise: bb5];
    }

    bb196: {
        StorageLive(_453);
        _453 = ((_447 as Continue).0: anchor_lang::prelude::Rent);
        _446 = _453;
        StorageDead(_453);
        _947 = discriminant(_447);
        StorageDead(_447);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = const _;
        _461 = &(*_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &_7;
        _464 = std::string::String::as_bytes(move _465) -> [return: bb199, unwind: bb432];
    }

    bb197: {
        StorageLive(_450);
        _450 = move ((_447 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_452);
        _452 = move _450;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _452) -> [return: bb198, unwind: bb470];
    }

    bb198: {
        StorageDead(_452);
        StorageDead(_450);
        _993 = discriminant(_447);
        StorageDead(_447);
        goto -> bb395;
    }

    bb199: {
        _463 = &(*_464);
        StorageDead(_465);
        _460 = [move _461, move _463];
        StorageDead(_463);
        StorageDead(_461);
        _459 = &_460;
        _458 = &(*_459);
        _457 = move _458 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_458);
        StorageLive(_466);
        _466 = &(*_1);
        _456 = anchor_lang::prelude::Pubkey::find_program_address(move _457, move _466) -> [return: bb200, unwind: bb432];
    }

    bb200: {
        StorageDead(_466);
        StorageDead(_457);
        StorageLive(_454);
        _454 = (_456.0: anchor_lang::prelude::Pubkey);
        StorageLive(_455);
        _455 = (_456.1: u8);
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_456);
        StorageLive(_467);
        _467 = _455;
        ((*_4).1: u8) = move _467;
        StorageDead(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _472 = &(*_56);
        _471 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _472) -> [return: bb201, unwind: bb432];
    }

    bb201: {
        _470 = &_471;
        StorageDead(_472);
        StorageLive(_473);
        _473 = &_454;
        _469 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _470, move _473) -> [return: bb202, unwind: bb432];
    }

    bb202: {
        switchInt(move _469) -> [0: bb208, otherwise: bb203];
    }

    bb203: {
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_470);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = ConstraintSeeds;
        _477 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _478) -> [return: bb204, unwind: bb432];
    }

    bb204: {
        StorageDead(_478);
        _476 = anchor_lang::error::Error::with_account_name::<&str>(move _477, const "referrer_short_url") -> [return: bb205, unwind: bb432];
    }

    bb205: {
        _905 = const true;
        StorageDead(_477);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        _481 = &(*_56);
        _480 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _481) -> [return: bb206, unwind: bb469];
    }

    bb206: {
        StorageDead(_481);
        StorageLive(_482);
        _482 = _454;
        _479 = (move _480, move _482);
        StorageDead(_482);
        StorageDead(_480);
        _905 = const false;
        _475 = anchor_lang::error::Error::with_pubkeys(move _476, move _479) -> [return: bb207, unwind: bb469];
    }

    bb207: {
        StorageDead(_479);
        _905 = const false;
        StorageDead(_476);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _475);
        StorageDead(_475);
        StorageDead(_469);
        StorageDead(_468);
        goto -> bb394;
    }

    bb208: {
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_470);
        _468 = const ();
        StorageDead(_469);
        StorageDead(_468);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_56;
        _485 = &(*_486);
        _484 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _485) -> [return: bb209, unwind: bb432];
    }

    bb209: {
        StorageDead(_485);
        StorageDead(_486);
        StorageLive(_487);
        _487 = ((*_484).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_488);
        _489 = CheckedAdd(const _, const 8_usize);
        assert(!move (_489.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 8_usize) -> [success: bb210, unwind: bb432];
    }

    bb210: {
        _488 = move (_489.0: usize);
        StorageLive(_490);
        StorageLive(_491);
        _491 = const false;
        switchInt(move _491) -> [0: bb213, otherwise: bb211];
    }

    bb211: {
        StorageLive(_492);
        StorageLive(_493);
        _493 = &_487;
        StorageLive(_494);
        _869 = const _;
        _494 = &(*_869);
        _492 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _493, move _494) -> [return: bb212, unwind: bb432];
    }

    bb212: {
        switchInt(move _492) -> [0: bb287, otherwise: bb213];
    }

    bb213: {
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_497);
        StorageLive(_498);
        _498 = &(*_56);
        _497 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _498) -> [return: bb214, unwind: bb432];
    }

    bb214: {
        StorageDead(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = _497;
        _500 = Eq(move _501, const 0_u64);
        switchInt(move _500) -> [0: bb230, otherwise: bb215];
    }

    bb215: {
        StorageDead(_501);
        StorageLive(_502);
        _502 = _488;
        StorageLive(_503);
        StorageLive(_504);
        _504 = &_446;
        StorageLive(_505);
        _505 = _502;
        _503 = anchor_lang::prelude::Rent::minimum_balance(move _504, move _505) -> [return: bb216, unwind: bb432];
    }

    bb216: {
        StorageDead(_505);
        StorageDead(_504);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &_20;
        _507 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _508) -> [return: bb217, unwind: bb432];
    }

    bb217: {
        StorageDead(_508);
        StorageLive(_509);
        StorageLive(_510);
        _510 = &(*_56);
        _509 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _510) -> [return: bb218, unwind: bb425];
    }

    bb218: {
        StorageDead(_510);
        _904 = const true;
        _506 = anchor_lang::system_program::CreateAccount::<'_> { from: move _507, to: move _509 };
        StorageDead(_509);
        StorageDead(_507);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        _513 = &_95;
        _512 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _513) -> [return: bb219, unwind: bb467];
    }

    bb219: {
        StorageDead(_513);
        StorageLive(_514);
        _904 = const false;
        _514 = move _506;
        _511 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _512, move _514) -> [return: bb220, unwind: bb467];
    }

    bb220: {
        StorageDead(_514);
        StorageDead(_512);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        _903 = const true;
        _519 = move _511;
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        _531 = &_7;
        _530 = std::string::String::as_bytes(move _531) -> [return: bb221, unwind: bb465];
    }

    bb221: {
        _529 = &(*_530);
        StorageDead(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = _455;
        _536 = [move _537];
        _535 = &_536;
        StorageDead(_537);
        StorageLive(_538);
        _538 = RangeFull;
        _534 = <[u8; 1] as Index<RangeFull>>::index(move _535, move _538) -> [return: bb222, unwind: bb465];
    }

    bb222: {
        StorageDead(_538);
        StorageDead(_535);
        _533 = &(*_534);
        _532 = &(*_533);
        _528 = [const _, move _529, move _532];
        _527 = &_528;
        StorageDead(_532);
        StorageDead(_529);
        StorageLive(_539);
        _539 = RangeFull;
        _526 = <[&[u8]; 3] as Index<RangeFull>>::index(move _527, move _539) -> [return: bb223, unwind: bb465];
    }

    bb223: {
        StorageDead(_539);
        StorageDead(_527);
        _525 = &(*_526);
        _524 = &(*_525);
        _523 = [move _524];
        StorageDead(_524);
        _522 = &_523;
        _521 = &(*_522);
        _520 = move _521 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_521);
        _903 = const false;
        _518 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _519, move _520) -> [return: bb224, unwind: bb465];
    }

    bb224: {
        StorageDead(_520);
        _903 = const false;
        StorageDead(_519);
        StorageLive(_540);
        _540 = _503;
        StorageLive(_541);
        StorageLive(_542);
        _542 = _502;
        _541 = move _542 as u64 (IntToInt);
        StorageDead(_542);
        StorageLive(_543);
        _543 = &(*_1);
        _517 = anchor_lang::system_program::create_account(move _518, move _540, move _541, move _543) -> [return: bb225, unwind: bb467];
    }

    bb225: {
        StorageDead(_543);
        StorageDead(_541);
        StorageDead(_540);
        StorageDead(_518);
        _516 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _517) -> [return: bb226, unwind: bb467];
    }

    bb226: {
        StorageDead(_517);
        _544 = discriminant(_516);
        switchInt(move _544) -> [0: bb227, 1: bb228, otherwise: bb5];
    }

    bb227: {
        StorageLive(_548);
        _548 = ((_516 as Continue).0: ());
        _515 = _548;
        StorageDead(_548);
        _949 = discriminant(_516);
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_528);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_516);
        StorageDead(_515);
        _499 = const ();
        StorageDead(_511);
        _904 = const false;
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_502);
        goto -> bb282;
    }

    bb228: {
        StorageLive(_545);
        _545 = move ((_516 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_547);
        _547 = move _545;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _547) -> [return: bb229, unwind: bb463];
    }

    bb229: {
        StorageDead(_547);
        StorageDead(_545);
        _991 = discriminant(_516);
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_528);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_511);
        _904 = const false;
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_502);
        goto -> bb390;
    }

    bb230: {
        StorageDead(_501);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        _553 = &_20;
        _552 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _553) -> [return: bb231, unwind: bb432];
    }

    bb231: {
        _551 = &_552;
        StorageDead(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        _556 = &(*_56);
        _555 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _556) -> [return: bb232, unwind: bb432];
    }

    bb232: {
        _554 = &_555;
        StorageDead(_556);
        _550 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _551, move _554) -> [return: bb233, unwind: bb432];
    }

    bb233: {
        switchInt(move _550) -> [0: bb242, otherwise: bb234];
    }

    bb234: {
        StorageDead(_555);
        StorageDead(_554);
        StorageDead(_552);
        StorageDead(_551);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        _868 = const _;
        _562 = &(*_868);
        _561 = anchor_lang::error::ErrorCode::name(move _562) -> [return: bb235, unwind: bb432];
    }

    bb235: {
        StorageDead(_562);
        StorageLive(_564);
        StorageLive(_565);
        _565 = TryingToInitPayerAsProgramAccount;
        _564 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _565) -> [return: bb236, unwind: bb424];
    }

    bb236: {
        StorageDead(_565);
        StorageLive(_566);
        StorageLive(_567);
        _867 = const _;
        _567 = &(*_867);
        _566 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _567) -> [return: bb237, unwind: bb424];
    }

    bb237: {
        StorageDead(_567);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        _571 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_referrer_state_and_short_url.rs", line: const 30_u32 };
        _570 = anchor_lang::error::ErrorOrigin::Source(move _571);
        StorageDead(_571);
        _569 = std::option::Option::<ErrorOrigin>::Some(move _570);
        StorageDead(_570);
        StorageLive(_572);
        _572 = std::option::Option::<ComparedValues>::None;
        _560 = anchor_lang::error::AnchorError { error_name: move _561, error_code_number: move _564, error_msg: move _566, error_origin: move _569, compared_values: move _572 };
        StorageDead(_572);
        StorageDead(_569);
        StorageDead(_566);
        StorageDead(_564);
        StorageDead(_561);
        _559 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _560) -> [return: bb238, unwind: bb432];
    }

    bb238: {
        _902 = const true;
        StorageDead(_560);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _575 = &_20;
        _574 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _575) -> [return: bb239, unwind: bb462];
    }

    bb239: {
        StorageDead(_575);
        StorageLive(_576);
        StorageLive(_577);
        _577 = &(*_56);
        _576 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _577) -> [return: bb240, unwind: bb462];
    }

    bb240: {
        StorageDead(_577);
        _573 = (move _574, move _576);
        StorageDead(_576);
        StorageDead(_574);
        _902 = const false;
        _558 = anchor_lang::error::Error::with_pubkeys(move _559, move _573) -> [return: bb241, unwind: bb462];
    }

    bb241: {
        StorageDead(_573);
        _902 = const false;
        StorageDead(_559);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _558);
        StorageDead(_558);
        StorageDead(_550);
        StorageDead(_549);
        goto -> bb390;
    }

    bb242: {
        StorageDead(_555);
        StorageDead(_554);
        StorageDead(_552);
        StorageDead(_551);
        _549 = const ();
        StorageDead(_550);
        StorageDead(_549);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        _581 = &_446;
        StorageLive(_582);
        _582 = _488;
        _580 = anchor_lang::prelude::Rent::minimum_balance(move _581, move _582) -> [return: bb243, unwind: bb432];
    }

    bb243: {
        StorageDead(_582);
        StorageDead(_581);
        _579 = <u64 as Ord>::max(move _580, const 1_u64) -> [return: bb244, unwind: bb432];
    }

    bb244: {
        StorageDead(_580);
        StorageLive(_583);
        _583 = _497;
        _578 = core::num::<impl u64>::saturating_sub(move _579, move _583) -> [return: bb245, unwind: bb432];
    }

    bb245: {
        StorageDead(_583);
        StorageDead(_579);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = _578;
        _585 = Gt(move _586, const 0_u64);
        switchInt(move _585) -> [0: bb256, otherwise: bb246];
    }

    bb246: {
        StorageDead(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        _589 = &_20;
        _588 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _589) -> [return: bb247, unwind: bb432];
    }

    bb247: {
        StorageDead(_589);
        StorageLive(_590);
        StorageLive(_591);
        _591 = &(*_56);
        _590 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _591) -> [return: bb248, unwind: bb423];
    }

    bb248: {
        StorageDead(_591);
        _901 = const true;
        _587 = anchor_lang::system_program::Transfer::<'_> { from: move _588, to: move _590 };
        StorageDead(_590);
        StorageDead(_588);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = &_95;
        _593 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _594) -> [return: bb249, unwind: bb460];
    }

    bb249: {
        StorageDead(_594);
        StorageLive(_595);
        _901 = const false;
        _595 = move _587;
        _592 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _593, move _595) -> [return: bb250, unwind: bb460];
    }

    bb250: {
        StorageDead(_595);
        StorageDead(_593);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _599 = move _592;
        StorageLive(_600);
        _600 = _578;
        _598 = anchor_lang::system_program::transfer(move _599, move _600) -> [return: bb251, unwind: bb460];
    }

    bb251: {
        StorageDead(_600);
        StorageDead(_599);
        _597 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _598) -> [return: bb252, unwind: bb460];
    }

    bb252: {
        StorageDead(_598);
        _601 = discriminant(_597);
        switchInt(move _601) -> [0: bb253, 1: bb254, otherwise: bb5];
    }

    bb253: {
        StorageLive(_605);
        _605 = ((_597 as Continue).0: ());
        _596 = _605;
        StorageDead(_605);
        _951 = discriminant(_597);
        StorageDead(_597);
        StorageDead(_596);
        _584 = const ();
        StorageDead(_592);
        _901 = const false;
        StorageDead(_587);
        goto -> bb257;
    }

    bb254: {
        StorageLive(_602);
        _602 = move ((_597 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_604);
        _604 = move _602;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _604) -> [return: bb255, unwind: bb458];
    }

    bb255: {
        StorageDead(_604);
        StorageDead(_602);
        _989 = discriminant(_597);
        StorageDead(_597);
        StorageDead(_596);
        StorageDead(_592);
        _901 = const false;
        StorageDead(_587);
        StorageDead(_585);
        StorageDead(_584);
        goto -> bb389;
    }

    bb256: {
        StorageDead(_586);
        _584 = const ();
        goto -> bb257;
    }

    bb257: {
        StorageDead(_585);
        StorageDead(_584);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        _608 = &(*_56);
        _607 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _608) -> [return: bb258, unwind: bb432];
    }

    bb258: {
        StorageDead(_608);
        _900 = const true;
        _606 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _607 };
        StorageDead(_607);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        _611 = &_95;
        _610 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _611) -> [return: bb259, unwind: bb457];
    }

    bb259: {
        StorageDead(_611);
        StorageLive(_612);
        _900 = const false;
        _612 = move _606;
        _609 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _610, move _612) -> [return: bb260, unwind: bb457];
    }

    bb260: {
        StorageDead(_612);
        StorageDead(_610);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        _899 = const true;
        _617 = move _609;
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        _629 = &_7;
        _628 = std::string::String::as_bytes(move _629) -> [return: bb261, unwind: bb455];
    }

    bb261: {
        _627 = &(*_628);
        StorageDead(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        _635 = _455;
        _634 = [move _635];
        _633 = &_634;
        StorageDead(_635);
        StorageLive(_636);
        _636 = RangeFull;
        _632 = <[u8; 1] as Index<RangeFull>>::index(move _633, move _636) -> [return: bb262, unwind: bb455];
    }

    bb262: {
        StorageDead(_636);
        StorageDead(_633);
        _631 = &(*_632);
        _630 = &(*_631);
        _626 = [const _, move _627, move _630];
        _625 = &_626;
        StorageDead(_630);
        StorageDead(_627);
        StorageLive(_637);
        _637 = RangeFull;
        _624 = <[&[u8]; 3] as Index<RangeFull>>::index(move _625, move _637) -> [return: bb263, unwind: bb455];
    }

    bb263: {
        StorageDead(_637);
        StorageDead(_625);
        _623 = &(*_624);
        _622 = &(*_623);
        _621 = [move _622];
        StorageDead(_622);
        _620 = &_621;
        _619 = &(*_620);
        _618 = move _619 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_619);
        _899 = const false;
        _616 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _617, move _618) -> [return: bb264, unwind: bb455];
    }

    bb264: {
        StorageDead(_618);
        _899 = const false;
        StorageDead(_617);
        StorageLive(_638);
        StorageLive(_639);
        _639 = _488;
        _638 = move _639 as u64 (IntToInt);
        StorageDead(_639);
        _615 = anchor_lang::system_program::allocate(move _616, move _638) -> [return: bb265, unwind: bb457];
    }

    bb265: {
        StorageDead(_638);
        StorageDead(_616);
        _614 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _615) -> [return: bb266, unwind: bb457];
    }

    bb266: {
        StorageDead(_615);
        _640 = discriminant(_614);
        switchInt(move _640) -> [0: bb267, 1: bb268, otherwise: bb5];
    }

    bb267: {
        StorageLive(_644);
        _644 = ((_614 as Continue).0: ());
        _613 = _644;
        StorageDead(_644);
        _953 = discriminant(_614);
        StorageDead(_634);
        StorageDead(_632);
        StorageDead(_631);
        StorageDead(_628);
        StorageDead(_626);
        StorageDead(_624);
        StorageDead(_623);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_614);
        StorageDead(_613);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        _647 = &(*_56);
        _646 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _647) -> [return: bb270, unwind: bb457];
    }

    bb268: {
        StorageLive(_641);
        _641 = move ((_614 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_643);
        _643 = move _641;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _643) -> [return: bb269, unwind: bb453];
    }

    bb269: {
        StorageDead(_643);
        StorageDead(_641);
        _987 = discriminant(_614);
        StorageDead(_634);
        StorageDead(_632);
        StorageDead(_631);
        StorageDead(_628);
        StorageDead(_626);
        StorageDead(_624);
        StorageDead(_623);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_614);
        StorageDead(_613);
        goto -> bb388;
    }

    bb270: {
        StorageDead(_647);
        _898 = const true;
        _645 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _646 };
        StorageDead(_646);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        _650 = &_95;
        _649 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _650) -> [return: bb271, unwind: bb452];
    }

    bb271: {
        StorageDead(_650);
        StorageLive(_651);
        _898 = const false;
        _651 = move _645;
        _648 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _649, move _651) -> [return: bb272, unwind: bb452];
    }

    bb272: {
        StorageDead(_651);
        StorageDead(_649);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        _897 = const true;
        _656 = move _648;
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        _668 = &_7;
        _667 = std::string::String::as_bytes(move _668) -> [return: bb273, unwind: bb450];
    }

    bb273: {
        _666 = &(*_667);
        StorageDead(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        _674 = _455;
        _673 = [move _674];
        _672 = &_673;
        StorageDead(_674);
        StorageLive(_675);
        _675 = RangeFull;
        _671 = <[u8; 1] as Index<RangeFull>>::index(move _672, move _675) -> [return: bb274, unwind: bb450];
    }

    bb274: {
        StorageDead(_675);
        StorageDead(_672);
        _670 = &(*_671);
        _669 = &(*_670);
        _665 = [const _, move _666, move _669];
        _664 = &_665;
        StorageDead(_669);
        StorageDead(_666);
        StorageLive(_676);
        _676 = RangeFull;
        _663 = <[&[u8]; 3] as Index<RangeFull>>::index(move _664, move _676) -> [return: bb275, unwind: bb450];
    }

    bb275: {
        StorageDead(_676);
        StorageDead(_664);
        _662 = &(*_663);
        _661 = &(*_662);
        _660 = [move _661];
        StorageDead(_661);
        _659 = &_660;
        _658 = &(*_659);
        _657 = move _658 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_658);
        _897 = const false;
        _655 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _656, move _657) -> [return: bb276, unwind: bb450];
    }

    bb276: {
        StorageDead(_657);
        _897 = const false;
        StorageDead(_656);
        StorageLive(_677);
        _677 = &(*_1);
        _654 = anchor_lang::system_program::assign(move _655, move _677) -> [return: bb277, unwind: bb452];
    }

    bb277: {
        StorageDead(_677);
        StorageDead(_655);
        _653 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _654) -> [return: bb278, unwind: bb452];
    }

    bb278: {
        StorageDead(_654);
        _678 = discriminant(_653);
        switchInt(move _678) -> [0: bb279, 1: bb280, otherwise: bb5];
    }

    bb279: {
        StorageLive(_682);
        _682 = ((_653 as Continue).0: ());
        _652 = _682;
        StorageDead(_682);
        _955 = discriminant(_653);
        StorageDead(_673);
        StorageDead(_671);
        StorageDead(_670);
        StorageDead(_667);
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_662);
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_653);
        StorageDead(_652);
        _499 = const ();
        StorageDead(_648);
        _898 = const false;
        StorageDead(_645);
        StorageDead(_609);
        _900 = const false;
        StorageDead(_606);
        StorageDead(_578);
        goto -> bb282;
    }

    bb280: {
        StorageLive(_679);
        _679 = move ((_653 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_681);
        _681 = move _679;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _681) -> [return: bb281, unwind: bb448];
    }

    bb281: {
        StorageDead(_681);
        StorageDead(_679);
        _985 = discriminant(_653);
        StorageDead(_673);
        StorageDead(_671);
        StorageDead(_670);
        StorageDead(_667);
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_662);
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_653);
        StorageDead(_652);
        StorageDead(_648);
        _898 = const false;
        StorageDead(_645);
        goto -> bb388;
    }

    bb282: {
        StorageDead(_500);
        StorageDead(_499);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        _685 = &_56;
        _887 = deref_copy (*_685);
        _684 = &(*_887);
        _683 = anchor_lang::prelude::Account::<'_, referral::ShortUrl>::try_from_unchecked(move _684) -> [return: bb283, unwind: bb432];
    }

    bb283: {
        StorageDead(_684);
        _686 = discriminant(_683);
        switchInt(move _686) -> [0: bb285, 1: bb284, otherwise: bb5];
    }

    bb284: {
        StorageLive(_688);
        _688 = move ((_683 as Err).0: anchor_lang::error::Error);
        StorageLive(_690);
        StorageLive(_691);
        _691 = move _688;
        _690 = anchor_lang::error::Error::with_account_name::<&str>(move _691, const "referrer_short_url") -> [return: bb286, unwind: bb447];
    }

    bb285: {
        StorageLive(_687);
        _687 = move ((_683 as Ok).0: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>);
        _490 = move _687;
        StorageDead(_687);
        StorageDead(_497);
        _957 = discriminant(_683);
        StorageDead(_685);
        StorageDead(_683);
        goto -> bb292;
    }

    bb286: {
        StorageDead(_691);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _690);
        StorageDead(_690);
        StorageDead(_688);
        StorageDead(_497);
        _983 = discriminant(_683);
        StorageDead(_685);
        StorageDead(_683);
        goto -> bb391;
    }

    bb287: {
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = &_56;
        _888 = deref_copy (*_694);
        _693 = &(*_888);
        _692 = anchor_lang::prelude::Account::<'_, referral::ShortUrl>::try_from(move _693) -> [return: bb288, unwind: bb432];
    }

    bb288: {
        StorageDead(_693);
        _695 = discriminant(_692);
        switchInt(move _695) -> [0: bb290, 1: bb289, otherwise: bb5];
    }

    bb289: {
        StorageLive(_697);
        _697 = move ((_692 as Err).0: anchor_lang::error::Error);
        StorageLive(_699);
        StorageLive(_700);
        _700 = move _697;
        _699 = anchor_lang::error::Error::with_account_name::<&str>(move _700, const "referrer_short_url") -> [return: bb291, unwind: bb446];
    }

    bb290: {
        StorageLive(_696);
        _696 = move ((_692 as Ok).0: anchor_lang::prelude::Account<'_, state::referral::ShortUrl>);
        _490 = move _696;
        StorageDead(_696);
        _959 = discriminant(_692);
        StorageDead(_694);
        StorageDead(_692);
        goto -> bb292;
    }

    bb291: {
        StorageDead(_700);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _699);
        StorageDead(_699);
        StorageDead(_697);
        _981 = discriminant(_692);
        StorageDead(_694);
        StorageDead(_692);
        goto -> bb391;
    }

    bb292: {
        StorageDead(_492);
        StorageDead(_491);
        StorageLive(_701);
        StorageLive(_702);
        _702 = const false;
        switchInt(move _702) -> [0: bb316, otherwise: bb293];
    }

    bb293: {
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        _705 = _488;
        StorageLive(_706);
        StorageLive(_707);
        _707 = &(*_484);
        _706 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _707) -> [return: bb294, unwind: bb422];
    }

    bb294: {
        StorageDead(_707);
        _704 = Ne(move _705, move _706);
        switchInt(move _704) -> [0: bb300, otherwise: bb295];
    }

    bb295: {
        StorageDead(_706);
        StorageDead(_705);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        _712 = ConstraintSpace;
        _711 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _712) -> [return: bb296, unwind: bb422];
    }

    bb296: {
        StorageDead(_712);
        _710 = anchor_lang::error::Error::with_account_name::<&str>(move _711, const "referrer_short_url") -> [return: bb297, unwind: bb422];
    }

    bb297: {
        _896 = const true;
        StorageDead(_711);
        StorageLive(_713);
        StorageLive(_714);
        _714 = _488;
        StorageLive(_715);
        StorageLive(_716);
        _716 = &(*_484);
        _715 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _716) -> [return: bb298, unwind: bb445];
    }

    bb298: {
        StorageDead(_716);
        _713 = (move _714, move _715);
        StorageDead(_715);
        StorageDead(_714);
        _896 = const false;
        _709 = anchor_lang::error::Error::with_values::<usize, usize>(move _710, move _713) -> [return: bb299, unwind: bb445];
    }

    bb299: {
        StorageDead(_713);
        _896 = const false;
        StorageDead(_710);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _709);
        StorageDead(_709);
        StorageDead(_704);
        StorageDead(_703);
        goto -> bb387;
    }

    bb300: {
        StorageDead(_706);
        StorageDead(_705);
        _703 = const ();
        StorageDead(_704);
        StorageDead(_703);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        _719 = &_487;
        StorageLive(_720);
        _720 = &_1;
        _718 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _719, move _720) -> [return: bb301, unwind: bb422];
    }

    bb301: {
        switchInt(move _718) -> [0: bb306, otherwise: bb302];
    }

    bb302: {
        StorageDead(_720);
        StorageDead(_719);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        _725 = ConstraintOwner;
        _724 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _725) -> [return: bb303, unwind: bb422];
    }

    bb303: {
        StorageDead(_725);
        _723 = anchor_lang::error::Error::with_account_name::<&str>(move _724, const "referrer_short_url") -> [return: bb304, unwind: bb422];
    }

    bb304: {
        StorageDead(_724);
        StorageLive(_726);
        StorageLive(_727);
        _727 = (*_487);
        StorageLive(_728);
        _728 = (*_1);
        _726 = (move _727, move _728);
        StorageDead(_728);
        StorageDead(_727);
        _722 = anchor_lang::error::Error::with_pubkeys(move _723, move _726) -> [return: bb305, unwind: bb422];
    }

    bb305: {
        StorageDead(_726);
        StorageDead(_723);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _722);
        StorageDead(_722);
        StorageDead(_718);
        StorageDead(_717);
        goto -> bb387;
    }

    bb306: {
        StorageDead(_720);
        StorageDead(_719);
        _717 = const ();
        StorageDead(_718);
        StorageDead(_717);
        StorageLive(_729);
        StorageLive(_730);
        _730 = &_446;
        StorageLive(_731);
        _731 = _488;
        _729 = anchor_lang::prelude::Rent::minimum_balance(move _730, move _731) -> [return: bb307, unwind: bb422];
    }

    bb307: {
        StorageDead(_731);
        StorageDead(_730);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        _736 = &_490;
        _735 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _736) -> [return: bb308, unwind: bb422];
    }

    bb308: {
        _734 = &_735;
        StorageDead(_736);
        _733 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _734) -> [return: bb309, unwind: bb421];
    }

    bb309: {
        StorageDead(_734);
        StorageLive(_737);
        _737 = _729;
        _732 = Lt(move _733, move _737);
        switchInt(move _732) -> [0: bb314, otherwise: bb310];
    }

    bb310: {
        StorageDead(_737);
        drop(_735) -> [return: bb311, unwind: bb422];
    }

    bb311: {
        StorageDead(_735);
        StorageDead(_733);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = ConstraintRentExempt;
        _740 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _741) -> [return: bb312, unwind: bb422];
    }

    bb312: {
        StorageDead(_741);
        _739 = anchor_lang::error::Error::with_account_name::<&str>(move _740, const "referrer_short_url") -> [return: bb313, unwind: bb422];
    }

    bb313: {
        StorageDead(_740);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _739);
        StorageDead(_739);
        StorageDead(_732);
        StorageDead(_729);
        goto -> bb387;
    }

    bb314: {
        StorageDead(_737);
        drop(_735) -> [return: bb315, unwind: bb422];
    }

    bb315: {
        StorageDead(_735);
        StorageDead(_733);
        _701 = const ();
        StorageDead(_732);
        StorageDead(_729);
        goto -> bb317;
    }

    bb316: {
        _701 = const ();
        goto -> bb317;
    }

    bb317: {
        StorageDead(_702);
        StorageDead(_701);
        _483 = move _490;
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_487);
        StorageDead(_484);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = &_483;
        _745 = &(*_746);
        _744 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _745) -> [return: bb318, unwind: bb420];
    }

    bb318: {
        StorageDead(_745);
        _743 = ((*_744).6: bool);
        switchInt(move _743) -> [0: bb319, otherwise: bb322];
    }

    bb319: {
        StorageDead(_746);
        StorageDead(_744);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = ConstraintMut;
        _749 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _750) -> [return: bb320, unwind: bb420];
    }

    bb320: {
        StorageDead(_750);
        _748 = anchor_lang::error::Error::with_account_name::<&str>(move _749, const "referrer_short_url") -> [return: bb321, unwind: bb420];
    }

    bb321: {
        StorageDead(_749);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _748);
        StorageDead(_748);
        StorageDead(_743);
        StorageDead(_742);
        goto -> bb386;
    }

    bb322: {
        StorageDead(_746);
        StorageDead(_744);
        _742 = const ();
        StorageDead(_743);
        StorageDead(_742);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        _753 = &_446;
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &_483;
        _756 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _757) -> [return: bb323, unwind: bb420];
    }

    bb323: {
        _755 = &_756;
        StorageDead(_757);
        _754 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _755) -> [return: bb324, unwind: bb419];
    }

    bb324: {
        StorageDead(_755);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        _763 = &_483;
        _762 = <anchor_lang::prelude::Account<'_, referral::ShortUrl> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _763) -> [return: bb325, unwind: bb419];
    }

    bb325: {
        _761 = &_762;
        StorageDead(_763);
        _760 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _761) -> [return: bb326, unwind: bb418];
    }

    bb326: {
        StorageDead(_761);
        _759 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _760) -> [return: bb327, unwind: bb418];
    }

    bb327: {
        _895 = const true;
        StorageDead(_760);
        _764 = discriminant(_759);
        switchInt(move _764) -> [0: bb328, 1: bb329, otherwise: bb5];
    }

    bb328: {
        StorageLive(_768);
        _768 = ((_759 as Continue).0: usize);
        _758 = _768;
        StorageDead(_768);
        _752 = anchor_lang::prelude::Rent::is_exempt(move _753, move _754, move _758) -> [return: bb331, unwind: bb443];
    }

    bb329: {
        StorageLive(_765);
        _765 = move ((_759 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_767);
        _767 = move _765;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _767) -> [return: bb330, unwind: bb443];
    }

    bb330: {
        StorageDead(_767);
        StorageDead(_765);
        StorageDead(_758);
        StorageDead(_754);
        StorageDead(_753);
        _979 = discriminant(_759);
        drop(_762) -> [return: bb383, unwind: bb419];
    }

    bb331: {
        switchInt(move _752) -> [0: bb333, otherwise: bb332];
    }

    bb332: {
        StorageDead(_758);
        StorageDead(_754);
        StorageDead(_753);
        _961 = discriminant(_759);
        drop(_762) -> [return: bb338, unwind: bb419];
    }

    bb333: {
        StorageDead(_758);
        StorageDead(_754);
        StorageDead(_753);
        _963 = discriminant(_759);
        drop(_762) -> [return: bb334, unwind: bb419];
    }

    bb334: {
        StorageDead(_762);
        _895 = const false;
        StorageDead(_759);
        drop(_756) -> [return: bb335, unwind: bb420];
    }

    bb335: {
        StorageDead(_756);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        _772 = ConstraintRentExempt;
        _771 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _772) -> [return: bb336, unwind: bb420];
    }

    bb336: {
        StorageDead(_772);
        _770 = anchor_lang::error::Error::with_account_name::<&str>(move _771, const "referrer_short_url") -> [return: bb337, unwind: bb420];
    }

    bb337: {
        StorageDead(_771);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _770);
        StorageDead(_770);
        goto -> bb385;
    }

    bb338: {
        StorageDead(_762);
        _895 = const false;
        StorageDead(_759);
        drop(_756) -> [return: bb339, unwind: bb420];
    }

    bb339: {
        StorageDead(_756);
        _751 = const ();
        StorageDead(_752);
        StorageDead(_751);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        _777 = &_20;
        _776 = &(*_777);
        _775 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _776) -> [return: bb340, unwind: bb420];
    }

    bb340: {
        StorageDead(_776);
        _774 = ((*_775).6: bool);
        switchInt(move _774) -> [0: bb341, otherwise: bb344];
    }

    bb341: {
        StorageDead(_777);
        StorageDead(_775);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        _781 = ConstraintMut;
        _780 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _781) -> [return: bb342, unwind: bb420];
    }

    bb342: {
        StorageDead(_781);
        _779 = anchor_lang::error::Error::with_account_name::<&str>(move _780, const "referrer") -> [return: bb343, unwind: bb420];
    }

    bb343: {
        StorageDead(_780);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _779);
        StorageDead(_779);
        StorageDead(_774);
        StorageDead(_773);
        goto -> bb386;
    }

    bb344: {
        StorageDead(_777);
        StorageDead(_775);
        _773 = const ();
        StorageDead(_774);
        StorageDead(_773);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        _791 = const _;
        _790 = &(*_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        _796 = &_20;
        _795 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _796) -> [return: bb345, unwind: bb420];
    }

    bb345: {
        _794 = &_795;
        StorageDead(_796);
        _793 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _794) -> [return: bb346, unwind: bb420];
    }

    bb346: {
        _792 = &(*_793);
        StorageDead(_794);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        _809 = &_65;
        _808 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::load(move _809) -> [return: bb347, unwind: bb420];
    }

    bb347: {
        StorageDead(_809);
        _807 = <std::result::Result<Ref<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _808) -> [return: bb348, unwind: bb420];
    }

    bb348: {
        _890 = const true;
        _891 = const true;
        StorageDead(_808);
        _810 = discriminant(_807);
        switchInt(move _810) -> [0: bb349, 1: bb350, otherwise: bb5];
    }

    bb349: {
        StorageLive(_814);
        _814 = move ((_807 as Continue).0: std::cell::Ref<'_, state::referral::UserMetadata>);
        _806 = move _814;
        StorageDead(_814);
        _805 = &_806;
        _804 = <Ref<'_, referral::UserMetadata> as Deref>::deref(move _805) -> [return: bb352, unwind: bb417];
    }

    bb350: {
        StorageLive(_811);
        _811 = move ((_807 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_813);
        _813 = move _811;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _813) -> [return: bb351, unwind: bb442];
    }

    bb351: {
        StorageDead(_813);
        StorageDead(_811);
        StorageDead(_805);
        StorageDead(_803);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_797);
        StorageDead(_792);
        StorageDead(_790);
        StorageDead(_787);
        StorageDead(_786);
        StorageDead(_785);
        StorageDead(_784);
        goto -> bb437;
    }

    bb352: {
        StorageDead(_805);
        _803 = ((*_804).1: u64);
        _802 = move _803 as u8 (IntToInt);
        StorageDead(_803);
        _801 = [move _802];
        _800 = &_801;
        StorageDead(_802);
        StorageLive(_815);
        _815 = RangeFull;
        _799 = <[u8; 1] as Index<RangeFull>>::index(move _800, move _815) -> [return: bb353, unwind: bb417];
    }

    bb353: {
        StorageDead(_815);
        StorageDead(_800);
        _798 = &(*_799);
        _797 = &(*_798);
        _789 = [move _790, move _792, move _797];
        StorageDead(_797);
        StorageDead(_792);
        StorageDead(_790);
        _788 = &_789;
        _787 = &(*_788);
        _786 = move _787 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_787);
        StorageLive(_816);
        StorageLive(_817);
        _817 = &_1;
        _889 = deref_copy (*_817);
        _816 = &(*_889);
        _785 = anchor_lang::prelude::Pubkey::create_program_address(move _786, move _816) -> [return: bb354, unwind: bb417];
    }

    bb354: {
        StorageDead(_816);
        StorageDead(_786);
        StorageLive(_818);
        _818 = {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18};
        _784 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_state_and_short_url.rs:30:10: 30:18}>(move _785, move _818) -> [return: bb355, unwind: bb417];
    }

    bb355: {
        StorageDead(_818);
        StorageDead(_785);
        _783 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _784) -> [return: bb356, unwind: bb417];
    }

    bb356: {
        StorageDead(_784);
        _819 = discriminant(_783);
        switchInt(move _819) -> [0: bb357, 1: bb358, otherwise: bb5];
    }

    bb357: {
        StorageLive(_823);
        _823 = ((_783 as Continue).0: anchor_lang::prelude::Pubkey);
        _782 = _823;
        StorageDead(_823);
        _965 = discriminant(_783);
        StorageDead(_817);
        drop(_806) -> [return: bb434, unwind: bb442];
    }

    bb358: {
        StorageLive(_820);
        _820 = move ((_783 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_822);
        _822 = move _820;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _822) -> [return: bb359, unwind: bb441];
    }

    bb359: {
        StorageDead(_822);
        StorageDead(_820);
        _975 = discriminant(_783);
        StorageDead(_817);
        drop(_806) -> [return: bb437, unwind: bb442];
    }

    bb360: {
        _826 = &_827;
        StorageDead(_828);
        StorageLive(_829);
        _829 = &_782;
        _825 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _826, move _829) -> [return: bb361, unwind: bb420];
    }

    bb361: {
        switchInt(move _825) -> [0: bb367, otherwise: bb362];
    }

    bb362: {
        StorageDead(_829);
        StorageDead(_827);
        StorageDead(_826);
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        _834 = ConstraintSeeds;
        _833 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _834) -> [return: bb363, unwind: bb420];
    }

    bb363: {
        StorageDead(_834);
        _832 = anchor_lang::error::Error::with_account_name::<&str>(move _833, const "referrer_user_metadata") -> [return: bb364, unwind: bb420];
    }

    bb364: {
        _894 = const true;
        StorageDead(_833);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        _837 = &_65;
        _836 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::Key>::key(move _837) -> [return: bb365, unwind: bb440];
    }

    bb365: {
        StorageDead(_837);
        StorageLive(_838);
        _838 = _782;
        _835 = (move _836, move _838);
        StorageDead(_838);
        StorageDead(_836);
        _894 = const false;
        _831 = anchor_lang::error::Error::with_pubkeys(move _832, move _835) -> [return: bb366, unwind: bb440];
    }

    bb366: {
        StorageDead(_835);
        _894 = const false;
        StorageDead(_832);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _831);
        StorageDead(_831);
        StorageDead(_825);
        StorageDead(_824);
        goto -> bb382;
    }

    bb367: {
        StorageDead(_829);
        StorageDead(_827);
        StorageDead(_826);
        _824 = const ();
        StorageDead(_825);
        StorageDead(_824);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        _847 = &_65;
        _846 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::load(move _847) -> [return: bb368, unwind: bb420];
    }

    bb368: {
        StorageDead(_847);
        _845 = <std::result::Result<Ref<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _846) -> [return: bb369, unwind: bb420];
    }

    bb369: {
        _892 = const true;
        _893 = const true;
        StorageDead(_846);
        _848 = discriminant(_845);
        switchInt(move _848) -> [0: bb370, 1: bb371, otherwise: bb5];
    }

    bb370: {
        StorageLive(_852);
        _852 = move ((_845 as Continue).0: std::cell::Ref<'_, state::referral::UserMetadata>);
        _844 = move _852;
        StorageDead(_852);
        _843 = &_844;
        _842 = <Ref<'_, referral::UserMetadata> as Deref>::deref(move _843) -> [return: bb373, unwind: bb416];
    }

    bb371: {
        StorageLive(_849);
        _849 = move ((_845 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_851);
        _851 = move _849;
        _0 = <std::result::Result<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _851) -> [return: bb372, unwind: bb438];
    }

    bb372: {
        StorageDead(_851);
        StorageDead(_849);
        StorageDead(_843);
        StorageDead(_841);
        _973 = discriminant(_845);
        _892 = const false;
        _893 = const false;
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_842);
        goto -> bb381;
    }

    bb373: {
        StorageDead(_843);
        _841 = &((*_842).3: anchor_lang::prelude::Pubkey);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        _855 = &_20;
        _854 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _855) -> [return: bb374, unwind: bb416];
    }

    bb374: {
        _853 = &_854;
        StorageDead(_855);
        _840 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _841, move _853) -> [return: bb375, unwind: bb416];
    }

    bb375: {
        switchInt(move _840) -> [0: bb377, otherwise: bb376];
    }

    bb376: {
        StorageDead(_853);
        StorageDead(_841);
        StorageDead(_854);
        drop(_844) -> [return: bb436, unwind: bb438];
    }

    bb377: {
        StorageDead(_853);
        StorageDead(_841);
        StorageDead(_854);
        drop(_844) -> [return: bb435, unwind: bb438];
    }

    bb378: {
        StorageDead(_859);
        _857 = anchor_lang::error::Error::with_account_name::<&str>(move _858, const "referrer_user_metadata") -> [return: bb379, unwind: bb420];
    }

    bb379: {
        StorageDead(_858);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Err(move _857);
        StorageDead(_857);
        goto -> bb381;
    }

    bb380: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb415;
    }

    bb381: {
        StorageDead(_840);
        StorageDead(_839);
        goto -> bb382;
    }

    bb382: {
        StorageDead(_782);
        goto -> bb386;
    }

    bb383: {
        StorageDead(_762);
        _895 = const false;
        StorageDead(_759);
        drop(_756) -> [return: bb384, unwind: bb420];
    }

    bb384: {
        StorageDead(_756);
        goto -> bb385;
    }

    bb385: {
        StorageDead(_752);
        StorageDead(_751);
        goto -> bb386;
    }

    bb386: {
        drop(_483) -> [return: bb393, unwind: bb432];
    }

    bb387: {
        StorageDead(_702);
        StorageDead(_701);
        drop(_490) -> [return: bb392, unwind: bb432];
    }

    bb388: {
        StorageDead(_609);
        _900 = const false;
        StorageDead(_606);
        goto -> bb389;
    }

    bb389: {
        StorageDead(_578);
        goto -> bb390;
    }

    bb390: {
        StorageDead(_500);
        StorageDead(_499);
        StorageDead(_497);
        goto -> bb391;
    }

    bb391: {
        StorageDead(_492);
        StorageDead(_491);
        goto -> bb392;
    }

    bb392: {
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_487);
        StorageDead(_484);
        goto -> bb393;
    }

    bb393: {
        StorageDead(_483);
        goto -> bb394;
    }

    bb394: {
        StorageDead(_455);
        StorageDead(_454);
        goto -> bb395;
    }

    bb395: {
        StorageDead(_446);
        goto -> bb405;
    }

    bb396: {
        StorageDead(_435);
        _906 = const false;
        StorageDead(_432);
        drop(_429) -> [return: bb397, unwind: bb432];
    }

    bb397: {
        StorageDead(_429);
        goto -> bb398;
    }

    bb398: {
        StorageDead(_425);
        StorageDead(_424);
        goto -> bb405;
    }

    bb399: {
        StorageDead(_375);
        StorageDead(_374);
        goto -> bb404;
    }

    bb400: {
        StorageDead(_277);
        _911 = const false;
        StorageDead(_274);
        goto -> bb401;
    }

    bb401: {
        StorageDead(_246);
        goto -> bb402;
    }

    bb402: {
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_163);
        goto -> bb403;
    }

    bb403: {
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb404;
    }

    bb404: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_150);
        goto -> bb405;
    }

    bb405: {
        StorageDead(_149);
        goto -> bb406;
    }

    bb406: {
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb407;
    }

    bb407: {
        StorageDead(_110);
        goto -> bb408;
    }

    bb408: {
        StorageDead(_95);
        goto -> bb409;
    }

    bb409: {
        StorageDead(_80);
        goto -> bb410;
    }

    bb410: {
        StorageDead(_65);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb411;
    }

    bb411: {
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb412;
    }

    bb412: {
        StorageDead(_20);
        drop(_7) -> [return: bb413, unwind: bb433];
    }

    bb413: {
        StorageDead(_7);
        goto -> bb414;
    }

    bb414: {
        StorageDead(_6);
        goto -> bb415;
    }

    bb415: {
        return;
    }

    bb416 (cleanup): {
        drop(_844) -> [return: bb438, unwind terminate(cleanup)];
    }

    bb417 (cleanup): {
        drop(_806) -> [return: bb442, unwind terminate(cleanup)];
    }

    bb418 (cleanup): {
        drop(_762) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb419 (cleanup): {
        drop(_756) -> [return: bb420, unwind terminate(cleanup)];
    }

    bb420 (cleanup): {
        drop(_483) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb421 (cleanup): {
        drop(_735) -> [return: bb422, unwind terminate(cleanup)];
    }

    bb422 (cleanup): {
        drop(_490) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb423 (cleanup): {
        drop(_588) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb424 (cleanup): {
        drop(_561) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb425 (cleanup): {
        drop(_507) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb426 (cleanup): {
        drop(_435) -> [return: bb427, unwind terminate(cleanup)];
    }

    bb427 (cleanup): {
        drop(_429) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb428 (cleanup): {
        drop(_408) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb429 (cleanup): {
        drop(_256) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb430 (cleanup): {
        drop(_229) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb431 (cleanup): {
        drop(_173) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb432 (cleanup): {
        drop(_7) -> [return: bb433, unwind terminate(cleanup)];
    }

    bb433 (cleanup): {
        resume;
    }

    bb434: {
        _967 = discriminant(_807);
        _890 = const false;
        _891 = const false;
        StorageDead(_807);
        StorageDead(_806);
        StorageDead(_804);
        StorageDead(_801);
        StorageDead(_799);
        StorageDead(_798);
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_788);
        StorageDead(_783);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        _828 = &_65;
        _827 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::Key>::key(move _828) -> [return: bb360, unwind: bb420];
    }

    bb435: {
        _969 = discriminant(_845);
        _892 = const false;
        _893 = const false;
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_842);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        _859 = ConstraintRaw;
        _858 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _859) -> [return: bb378, unwind: bb420];
    }

    bb436: {
        _971 = discriminant(_845);
        _892 = const false;
        _893 = const false;
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_842);
        _839 = const ();
        StorageDead(_840);
        StorageDead(_839);
        StorageLive(_860);
        StorageLive(_861);
        _861 = move _20;
        StorageLive(_862);
        _862 = move _149;
        StorageLive(_863);
        _863 = move _483;
        StorageLive(_864);
        _864 = move _65;
        StorageLive(_865);
        _865 = move _80;
        StorageLive(_866);
        _866 = move _95;
        _860 = handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl::<'_> { referrer: move _861, referrer_state: move _862, referrer_short_url: move _863, referrer_user_metadata: move _864, rent: move _865, system_program: move _866 };
        StorageDead(_866);
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_863);
        StorageDead(_862);
        StorageDead(_861);
        _0 = std::result::Result::<handlers::handler_init_referrer_state_and_short_url::InitReferrerStateAndShortUrl<'_>, anchor_lang::error::Error>::Ok(move _860);
        StorageDead(_860);
        StorageDead(_782);
        StorageDead(_483);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_446);
        StorageDead(_149);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_20);
        drop(_7) -> [return: bb380, unwind: bb433];
    }

    bb437: {
        _977 = discriminant(_807);
        _890 = const false;
        _891 = const false;
        StorageDead(_807);
        StorageDead(_806);
        StorageDead(_804);
        StorageDead(_801);
        StorageDead(_799);
        StorageDead(_798);
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_788);
        StorageDead(_783);
        goto -> bb382;
    }

    bb438 (cleanup): {
        _1019 = discriminant(_845);
        goto -> bb420;
    }

    bb439 (cleanup): {
        drop(_832) -> [return: bb420, unwind terminate(cleanup)];
    }

    bb440 (cleanup): {
        switchInt(_894) -> [0: bb420, otherwise: bb439];
    }

    bb441 (cleanup): {
        _1020 = discriminant(_783);
        goto -> bb417;
    }

    bb442 (cleanup): {
        _1021 = discriminant(_807);
        goto -> bb420;
    }

    bb443 (cleanup): {
        _1022 = discriminant(_759);
        goto -> bb418;
    }

    bb444 (cleanup): {
        drop(_710) -> [return: bb422, unwind terminate(cleanup)];
    }

    bb445 (cleanup): {
        switchInt(_896) -> [0: bb422, otherwise: bb444];
    }

    bb446 (cleanup): {
        _1023 = discriminant(_692);
        goto -> bb432;
    }

    bb447 (cleanup): {
        _1024 = discriminant(_683);
        goto -> bb432;
    }

    bb448 (cleanup): {
        _1025 = discriminant(_653);
        goto -> bb452;
    }

    bb449 (cleanup): {
        drop(_656) -> [return: bb452, unwind terminate(cleanup)];
    }

    bb450 (cleanup): {
        switchInt(_897) -> [0: bb452, otherwise: bb449];
    }

    bb451 (cleanup): {
        drop(_645) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb452 (cleanup): {
        switchInt(_898) -> [0: bb457, otherwise: bb451];
    }

    bb453 (cleanup): {
        _1026 = discriminant(_614);
        goto -> bb457;
    }

    bb454 (cleanup): {
        drop(_617) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb455 (cleanup): {
        switchInt(_899) -> [0: bb457, otherwise: bb454];
    }

    bb456 (cleanup): {
        drop(_606) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb457 (cleanup): {
        switchInt(_900) -> [0: bb432, otherwise: bb456];
    }

    bb458 (cleanup): {
        _1027 = discriminant(_597);
        goto -> bb460;
    }

    bb459 (cleanup): {
        drop(_587) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb460 (cleanup): {
        switchInt(_901) -> [0: bb432, otherwise: bb459];
    }

    bb461 (cleanup): {
        drop(_559) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb462 (cleanup): {
        switchInt(_902) -> [0: bb432, otherwise: bb461];
    }

    bb463 (cleanup): {
        _1028 = discriminant(_516);
        goto -> bb467;
    }

    bb464 (cleanup): {
        drop(_519) -> [return: bb467, unwind terminate(cleanup)];
    }

    bb465 (cleanup): {
        switchInt(_903) -> [0: bb467, otherwise: bb464];
    }

    bb466 (cleanup): {
        drop(_506) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb467 (cleanup): {
        switchInt(_904) -> [0: bb432, otherwise: bb466];
    }

    bb468 (cleanup): {
        drop(_476) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb469 (cleanup): {
        switchInt(_905) -> [0: bb432, otherwise: bb468];
    }

    bb470 (cleanup): {
        _1029 = discriminant(_447);
        goto -> bb432;
    }

    bb471 (cleanup): {
        _1030 = discriminant(_432);
        goto -> bb426;
    }

    bb472 (cleanup): {
        drop(_383) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb473 (cleanup): {
        switchInt(_907) -> [0: bb432, otherwise: bb472];
    }

    bb474 (cleanup): {
        _1031 = discriminant(_365);
        goto -> bb432;
    }

    bb475 (cleanup): {
        _1032 = discriminant(_355);
        goto -> bb432;
    }

    bb476 (cleanup): {
        _1033 = discriminant(_323);
        goto -> bb480;
    }

    bb477 (cleanup): {
        drop(_326) -> [return: bb480, unwind terminate(cleanup)];
    }

    bb478 (cleanup): {
        switchInt(_908) -> [0: bb480, otherwise: bb477];
    }

    bb479 (cleanup): {
        drop(_315) -> [return: bb485, unwind terminate(cleanup)];
    }

    bb480 (cleanup): {
        switchInt(_909) -> [0: bb485, otherwise: bb479];
    }

    bb481 (cleanup): {
        _1034 = discriminant(_282);
        goto -> bb485;
    }

    bb482 (cleanup): {
        drop(_285) -> [return: bb485, unwind terminate(cleanup)];
    }

    bb483 (cleanup): {
        switchInt(_910) -> [0: bb485, otherwise: bb482];
    }

    bb484 (cleanup): {
        drop(_274) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb485 (cleanup): {
        switchInt(_911) -> [0: bb432, otherwise: bb484];
    }

    bb486 (cleanup): {
        _1035 = discriminant(_265);
        goto -> bb488;
    }

    bb487 (cleanup): {
        drop(_255) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb488 (cleanup): {
        switchInt(_912) -> [0: bb432, otherwise: bb487];
    }

    bb489 (cleanup): {
        drop(_227) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb490 (cleanup): {
        switchInt(_913) -> [0: bb432, otherwise: bb489];
    }

    bb491 (cleanup): {
        _1036 = discriminant(_182);
        goto -> bb495;
    }

    bb492 (cleanup): {
        drop(_185) -> [return: bb495, unwind terminate(cleanup)];
    }

    bb493 (cleanup): {
        switchInt(_914) -> [0: bb495, otherwise: bb492];
    }

    bb494 (cleanup): {
        drop(_172) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb495 (cleanup): {
        switchInt(_915) -> [0: bb432, otherwise: bb494];
    }

    bb496 (cleanup): {
        drop(_142) -> [return: bb432, unwind terminate(cleanup)];
    }

    bb497 (cleanup): {
        switchInt(_916) -> [0: bb432, otherwise: bb496];
    }

    bb498 (cleanup): {
        _1037 = discriminant(_111);
        goto -> bb432;
    }

    bb499 (cleanup): {
        _1038 = discriminant(_96);
        goto -> bb432;
    }

    bb500 (cleanup): {
        _1039 = discriminant(_81);
        goto -> bb432;
    }

    bb501 (cleanup): {
        _1040 = discriminant(_66);
        goto -> bb432;
    }

    bb502 (cleanup): {
        _1041 = discriminant(_21);
        goto -> bb432;
    }

    bb503 (cleanup): {
        _1043 = discriminant(_9);
        goto -> bb433;
    }
}
