// MIR for `handlers::handler_request_elevation_group::process` after PreCodegen

fn handlers::handler_request_elevation_group::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_request_elevation_group::RequestElevationGroup<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug new_elevation_group => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _4: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _15: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _23: anchor_lang::prelude::Clock;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _25: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _32: &state::obligation::Obligation;
    let _33: &state::obligation::Obligation;
    let mut _34: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _36: &state::obligation::Obligation;
    let _37: &state::obligation::Obligation;
    let mut _38: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: (usize, bool);
    let mut _44: bool;
    let mut _45: &state::obligation::Obligation;
    let _46: &state::obligation::Obligation;
    let mut _47: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _48: usize;
    let mut _49: usize;
    let mut _50: (usize, bool);
    let _51: ();
    let mut _52: bool;
    let mut _53: usize;
    let mut _54: &std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let _55: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _56: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: usize;
    let mut _58: !;
    let mut _59: anchor_lang::error::Error;
    let mut _60: anchor_lang::error::AnchorError;
    let mut _61: std::string::String;
    let mut _62: &LendingError;
    let _63: LendingError;
    let mut _64: u32;
    let mut _65: LendingError;
    let mut _66: std::string::String;
    let mut _67: &LendingError;
    let _68: LendingError;
    let mut _69: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _70: anchor_lang::error::ErrorOrigin;
    let mut _71: anchor_lang::error::Source;
    let mut _72: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _74: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _75: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _76: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _77: usize;
    let mut _78: {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:30:14: 30:28};
    let mut _80: std::iter::Take<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _81: std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _82: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _83: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _84: usize;
    let mut _85: usize;
    let mut _86: {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:37:14: 37:28};
    let mut _88: std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _89: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _90: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _91: usize;
    let mut _92: {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:43:18: 43:32};
    let _93: ();
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _95: std::result::Result<(), anchor_lang::error::Error>;
    let mut _96: &anchor_lang::prelude::Pubkey;
    let _97: &anchor_lang::prelude::Pubkey;
    let _98: &anchor_lang::prelude::Pubkey;
    let mut _99: &mut state::obligation::Obligation;
    let mut _100: &mut state::obligation::Obligation;
    let mut _101: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _102: &state::lending_market::LendingMarket;
    let _103: &state::lending_market::LendingMarket;
    let mut _104: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _105: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _106: u64;
    let mut _107: u8;
    let mut _108: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:30:14: 30:28}>;
    let mut _109: std::iter::Map<std::iter::Take<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:37:14: 37:28}>;
    let mut _110: std::iter::Map<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:43:18: 43:32}>;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _116: ();
    let mut _119: &mut handlers::handler_request_elevation_group::RequestElevationGroup<'_>;
    let mut _120: &mut handlers::handler_request_elevation_group::RequestElevationGroup<'_>;
    let mut _121: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _122: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _123: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _124: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    scope 1 {
        debug obligation => _3;
        let _13: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _21: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        scope 6 {
            debug lending_market => _13;
            let _22: u64;
            let _27: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _30: anchor_lang::prelude::Clock;
            scope 11 {
                debug slot => _22;
                let _31: usize;
                scope 16 {
                    debug deposit_count => _31;
                    let _35: usize;
                    scope 17 {
                        debug borrow_count => _35;
                        let _39: usize;
                        scope 18 {
                            debug reserves_count => _39;
                            let _43: usize;
                            scope 19 {
                                debug expected_remaining_accounts => _43;
                                let _73: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:30:14: 30:28}>;
                                let mut _117: &LendingError;
                                let mut _118: &LendingError;
                                scope 20 {
                                    debug deposit_reserves_iter => _73;
                                    let _79: std::iter::Map<std::iter::Take<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:37:14: 37:28}>;
                                    scope 21 {
                                        debug borrow_reserves_iter => _79;
                                        let _87: std::iter::Map<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:43:18: 43:32}>;
                                        scope 22 {
                                            debug referrer_token_states_iter => _87;
                                            let _112: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _115: ();
                                            scope 23 {
                                                debug residual => _112;
                                                scope 24 {
                                                }
                                            }
                                            scope 25 {
                                                debug val => _115;
                                                scope 26 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _27;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _30;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _119 = deref_copy (_1.1: &mut handlers::handler_request_elevation_group::RequestElevationGroup<'_>);
        _7 = &((*_119).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb63];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _4 = move _12;
        StorageDead(_12);
        _3 = &mut _4;
        _125 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _120 = deref_copy (_1.1: &mut handlers::handler_request_elevation_group::RequestElevationGroup<'_>);
        _16 = &((*_120).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _15 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _16) -> [return: bb7, unwind: bb62];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb67];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _139 = discriminant(_5);
        StorageDead(_5);
        goto -> bb58;
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb62];
    }

    bb8: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_14 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _13 = move _21;
        StorageDead(_21);
        _127 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb12, unwind: bb61];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _20) -> [return: bb11, unwind: bb66];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _137 = discriminant(_14);
        StorageDead(_14);
        goto -> bb57;
    }

    bb12: {
        _24 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _25) -> [return: bb13, unwind: bb61];
    }

    bb13: {
        StorageDead(_25);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = move ((_24 as Continue).0: anchor_lang::prelude::Clock);
        _23 = move _30;
        StorageDead(_30);
        _22 = (_23.0: u64);
        _129 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_3);
        _33 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _34) -> [return: bb17, unwind: bb61];
    }

    bb15: {
        StorageLive(_27);
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _29) -> [return: bb16, unwind: bb65];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        _135 = discriminant(_24);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb56;
    }

    bb17: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = obligation::Obligation::active_deposits_count(move _32) -> [return: bb18, unwind: bb61];
    }

    bb18: {
        StorageDead(_32);
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_3);
        _37 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _38) -> [return: bb19, unwind: bb61];
    }

    bb19: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = obligation::Obligation::active_borrows_count(move _36) -> [return: bb20, unwind: bb61];
    }

    bb20: {
        StorageDead(_36);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _35;
        StorageLive(_41);
        _41 = _31;
        _42 = CheckedAdd(_40, _41);
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", move _40, move _41) -> [success: bb21, unwind: bb61];
    }

    bb21: {
        _39 = move (_42.0: usize);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_3);
        _46 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _47) -> [return: bb22, unwind: bb61];
    }

    bb22: {
        _45 = &(*_46);
        StorageDead(_47);
        _44 = obligation::Obligation::has_referrer(move _45) -> [return: bb23, unwind: bb61];
    }

    bb23: {
        switchInt(move _44) -> [0: bb26, otherwise: bb24];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_48);
        _48 = _39;
        StorageLive(_49);
        _49 = _35;
        _50 = CheckedAdd(_48, _49);
        assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", move _48, move _49) -> [success: bb25, unwind: bb61];
    }

    bb25: {
        _43 = move (_50.0: usize);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_45);
        _43 = _39;
        goto -> bb27;
    }

    bb27: {
        StorageDead(_44);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _121 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _56 = &(*_121);
        _55 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _56) -> [return: bb28, unwind: bb61];
    }

    bb28: {
        _54 = &_55;
        StorageDead(_56);
        _53 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as ExactSizeIterator>::len(move _54) -> [return: bb29, unwind: bb61];
    }

    bb29: {
        StorageDead(_54);
        StorageLive(_57);
        _57 = _43;
        _52 = Ne(move _53, move _57);
        switchInt(move _52) -> [0: bb35, otherwise: bb30];
    }

    bb30: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _118 = const _;
        _62 = &(*_118);
        _61 = LendingError::name(move _62) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        StorageDead(_62);
        StorageLive(_64);
        StorageLive(_65);
        _65 = LendingError::InvalidAccountInput;
        _64 = <LendingError as Into<u32>>::into(move _65) -> [return: bb32, unwind: bb60];
    }

    bb32: {
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        _117 = const _;
        _67 = &(*_117);
        _66 = <LendingError as ToString>::to_string(move _67) -> [return: bb33, unwind: bb60];
    }

    bb33: {
        StorageDead(_67);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_request_elevation_group.rs", line: const 23_u32 };
        _70 = anchor_lang::error::ErrorOrigin::Source(move _71);
        StorageDead(_71);
        _69 = std::option::Option::<ErrorOrigin>::Some(move _70);
        StorageDead(_70);
        StorageLive(_72);
        _72 = std::option::Option::<ComparedValues>::None;
        _60 = anchor_lang::error::AnchorError { error_name: move _61, error_code_number: move _64, error_msg: move _66, error_origin: move _69, compared_values: move _72 };
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_61);
        _59 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _60) -> [return: bb34, unwind: bb61];
    }

    bb34: {
        StorageDead(_60);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _59);
        StorageDead(_59);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb55;
    }

    bb35: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _122 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _76 = &(*_122);
        _75 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _76) -> [return: bb36, unwind: bb61];
    }

    bb36: {
        StorageDead(_76);
        StorageLive(_77);
        _77 = _31;
        _74 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _75, move _77) -> [return: bb37, unwind: bb61];
    }

    bb37: {
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_78);
        _78 = {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:30:14: 30:28};
        _73 = <std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:30:14: 30:28}>(move _74, move _78) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        StorageDead(_78);
        StorageDead(_74);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _123 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _83 = &(*_123);
        _82 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _83) -> [return: bb39, unwind: bb61];
    }

    bb39: {
        StorageDead(_83);
        StorageLive(_84);
        _84 = _31;
        _81 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::skip(move _82, move _84) -> [return: bb40, unwind: bb61];
    }

    bb40: {
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_85);
        _85 = _35;
        _80 = <Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::take(move _81, move _85) -> [return: bb41, unwind: bb61];
    }

    bb41: {
        StorageDead(_85);
        StorageDead(_81);
        StorageLive(_86);
        _86 = {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:37:14: 37:28};
        _79 = <std::iter::Take<Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:37:14: 37:28}>(move _80, move _86) -> [return: bb42, unwind: bb61];
    }

    bb42: {
        StorageDead(_86);
        StorageDead(_80);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _124 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _90 = &(*_124);
        _89 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _90) -> [return: bb43, unwind: bb61];
    }

    bb43: {
        StorageDead(_90);
        StorageLive(_91);
        _91 = _39;
        _88 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::skip(move _89, move _91) -> [return: bb44, unwind: bb61];
    }

    bb44: {
        StorageDead(_91);
        StorageDead(_89);
        StorageLive(_92);
        _92 = {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:43:18: 43:32};
        _87 = <Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, referral::ReferrerTokenState>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:43:18: 43:32}>(move _88, move _92) -> [return: bb45, unwind: bb61];
    }

    bb45: {
        StorageDead(_92);
        StorageDead(_88);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _97 = &(*_98);
        _96 = &(*_97);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &mut (*_3);
        _100 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _101) -> [return: bb46, unwind: bb61];
    }

    bb46: {
        _99 = &mut (*_100);
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_13;
        _104 = &(*_105);
        _103 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _104) -> [return: bb47, unwind: bb61];
    }

    bb47: {
        _102 = &(*_103);
        StorageDead(_104);
        StorageLive(_106);
        _106 = _22;
        StorageLive(_107);
        _107 = _2;
        StorageLive(_108);
        _108 = move _73;
        StorageLive(_109);
        _109 = move _79;
        StorageLive(_110);
        _110 = move _87;
        _95 = lending_operations::request_elevation_group::<'_, account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, account_loader_trait::FatAccountLoader<'_, referral::ReferrerTokenState>, std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:30:14: 30:28}>, std::iter::Map<std::iter::Take<Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:37:14: 37:28}>, std::iter::Map<Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_request_elevation_group.rs:43:18: 43:32}>>(move _96, move _99, move _102, move _106, move _107, move _108, move _109, move _110) -> [return: bb48, unwind: bb61];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        _94 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _95) -> [return: bb49, unwind: bb61];
    }

    bb49: {
        StorageDead(_95);
        _111 = discriminant(_94);
        switchInt(move _111) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_115);
        _115 = ((_94 as Continue).0: ());
        _93 = _115;
        StorageDead(_115);
        _131 = discriminant(_94);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_116);
        _116 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _116);
        StorageDead(_116);
        StorageDead(_87);
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_22);
        drop(_13) -> [return: bb53, unwind: bb62];
    }

    bb51: {
        StorageLive(_112);
        _112 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_114);
        _114 = move _112;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _114) -> [return: bb52, unwind: bb64];
    }

    bb52: {
        StorageDead(_114);
        StorageDead(_112);
        _133 = discriminant(_94);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_87);
        StorageDead(_79);
        StorageDead(_73);
        goto -> bb55;
    }

    bb53: {
        StorageDead(_13);
        drop(_4) -> [return: bb54, unwind: bb63];
    }

    bb54: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb59;
    }

    bb55: {
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_31);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_22);
        drop(_13) -> [return: bb57, unwind: bb62];
    }

    bb57: {
        StorageDead(_13);
        drop(_4) -> [return: bb58, unwind: bb63];
    }

    bb58: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb59;
    }

    bb59: {
        return;
    }

    bb60 (cleanup): {
        drop(_61) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_13) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_4) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64 (cleanup): {
        _141 = discriminant(_94);
        goto -> bb61;
    }

    bb65 (cleanup): {
        _142 = discriminant(_24);
        goto -> bb61;
    }

    bb66 (cleanup): {
        _143 = discriminant(_14);
        goto -> bb62;
    }

    bb67 (cleanup): {
        _144 = discriminant(_5);
        goto -> bb63;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
