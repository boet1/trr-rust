// MIR for `state::<impl at programs\klend\src\state\mod.rs:146:10: 146:25>::serialize` after PreCodegen

fn state::<impl at programs\klend\src\state\mod.rs:146:10: 146:25>::serialize(_1: &state::UpdateLendingMarketConfigValue, _2: &mut W) -> std::result::Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: u8;
    let mut _4: isize;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _7: std::result::Result<(), std::io::Error>;
    let mut _8: &mut W;
    let mut _9: &[u8];
    let mut _10: &[u8; 1];
    let _11: &[u8; 1];
    let _12: [u8; 1];
    let mut _13: u8;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _19: ();
    let mut _20: isize;
    let _22: ();
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _24: std::result::Result<(), std::io::Error>;
    let mut _25: &bool;
    let mut _26: &mut W;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _33: ();
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _35: std::result::Result<(), std::io::Error>;
    let mut _36: &u8;
    let mut _37: &mut W;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _44: ();
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _46: std::result::Result<(), std::io::Error>;
    let mut _47: &[u8; 8];
    let mut _48: &mut W;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _55: ();
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _57: std::result::Result<(), std::io::Error>;
    let mut _58: &u16;
    let mut _59: &mut W;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _66: ();
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _68: std::result::Result<(), std::io::Error>;
    let mut _69: &u64;
    let mut _70: &mut W;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _77: ();
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _79: std::result::Result<(), std::io::Error>;
    let mut _80: &u128;
    let mut _81: &mut W;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _88: ();
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _90: std::result::Result<(), std::io::Error>;
    let mut _91: &anchor_lang::prelude::Pubkey;
    let mut _92: &mut W;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _99: ();
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _101: std::result::Result<(), std::io::Error>;
    let mut _102: &state::lending_market::ElevationGroup;
    let mut _103: &mut W;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _110: ();
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _112: std::result::Result<(), std::io::Error>;
    let mut _113: &[u8; 32];
    let mut _114: &mut W;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _120: ();
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    scope 1 {
        debug variant_idx => _3;
        let _15: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _18: ();
        let _21: &bool;
        let _32: &u8;
        let _43: &[u8; 8];
        let _54: &u16;
        let _65: &u64;
        let _76: &u128;
        let _87: &anchor_lang::prelude::Pubkey;
        let _98: &state::lending_market::ElevationGroup;
        let _109: &[u8; 32];
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _18;
            scope 5 {
            }
        }
        scope 6 {
            debug id0 => _21;
            let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _31: ();
            scope 7 {
                debug residual => _28;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _31;
                scope 10 {
                }
            }
        }
        scope 11 {
            debug id0 => _32;
            let _39: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _42: ();
            scope 12 {
                debug residual => _39;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _42;
                scope 15 {
                }
            }
        }
        scope 16 {
            debug id0 => _43;
            let _50: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _53: ();
            scope 17 {
                debug residual => _50;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _53;
                scope 20 {
                }
            }
        }
        scope 21 {
            debug id0 => _54;
            let _61: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _64: ();
            scope 22 {
                debug residual => _61;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _64;
                scope 25 {
                }
            }
        }
        scope 26 {
            debug id0 => _65;
            let _72: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _75: ();
            scope 27 {
                debug residual => _72;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _75;
                scope 30 {
                }
            }
        }
        scope 31 {
            debug id0 => _76;
            let _83: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _86: ();
            scope 32 {
                debug residual => _83;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _86;
                scope 35 {
                }
            }
        }
        scope 36 {
            debug id0 => _87;
            let _94: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _97: ();
            scope 37 {
                debug residual => _94;
                scope 38 {
                }
            }
            scope 39 {
                debug val => _97;
                scope 40 {
                }
            }
        }
        scope 41 {
            debug id0 => _98;
            let _105: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _108: ();
            scope 42 {
                debug residual => _105;
                scope 43 {
                }
            }
            scope 44 {
                debug val => _108;
                scope 45 {
                }
            }
        }
        scope 46 {
            debug id0 => _109;
            let _116: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _119: ();
            scope 47 {
                debug residual => _116;
                scope 48 {
                }
            }
            scope 49 {
                debug val => _119;
                scope 50 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = const 8_u8;
        goto -> bb11;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = const 0_u8;
        goto -> bb11;
    }

    bb4: {
        _3 = const 1_u8;
        goto -> bb11;
    }

    bb5: {
        _3 = const 2_u8;
        goto -> bb11;
    }

    bb6: {
        _3 = const 3_u8;
        goto -> bb11;
    }

    bb7: {
        _3 = const 4_u8;
        goto -> bb11;
    }

    bb8: {
        _3 = const 5_u8;
        goto -> bb11;
    }

    bb9: {
        _3 = const 6_u8;
        goto -> bb11;
    }

    bb10: {
        _3 = const 7_u8;
        goto -> bb11;
    }

    bb11: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut (*_2);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _3;
        _12 = core::num::<impl u8>::to_le_bytes(move _13) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _9 = move _10 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_10);
        _7 = <W as std::io::Write>::write_all(move _8, move _9) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(), std::io::Error> as Try>::branch(move _7) -> [return: bb14, unwind: bb76];
    }

    bb14: {
        StorageDead(_7);
        _14 = discriminant(_6);
        switchInt(move _14) -> [0: bb15, 1: bb16, otherwise: bb2];
    }

    bb15: {
        StorageLive(_18);
        _18 = ((_6 as Continue).0: ());
        _5 = _18;
        StorageDead(_18);
        _121 = discriminant(_6);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_19);
        _20 = discriminant((*_1));
        switchInt(move _20) -> [0: bb19, 1: bb25, 2: bb31, 3: bb37, 4: bb43, 5: bb49, 6: bb55, 7: bb61, 8: bb18, otherwise: bb2];
    }

    bb16: {
        StorageLive(_15);
        _15 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb17, unwind: bb86];
    }

    bb17: {
        StorageDead(_17);
        StorageDead(_15);
        _159 = discriminant(_6);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb74;
    }

    bb18: {
        StorageLive(_109);
        _109 = &(((*_1) as Name).0: [u8; 32]);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_109);
        StorageLive(_114);
        _114 = &mut (*_2);
        _112 = <[u8; 32] as BorshSerialize>::serialize::<W>(move _113, move _114) -> [return: bb67, unwind continue];
    }

    bb19: {
        StorageLive(_21);
        _21 = &(((*_1) as Bool).0: bool);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_21);
        StorageLive(_26);
        _26 = &mut (*_2);
        _24 = <bool as BorshSerialize>::serialize::<W>(move _25, move _26) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<(), std::io::Error> as Try>::branch(move _24) -> [return: bb21, unwind: bb76];
    }

    bb21: {
        StorageDead(_24);
        _27 = discriminant(_23);
        switchInt(move _27) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        StorageLive(_31);
        _31 = ((_23 as Continue).0: ());
        _22 = _31;
        StorageDead(_31);
        _123 = discriminant(_23);
        StorageDead(_23);
        StorageDead(_22);
        _19 = const ();
        StorageDead(_21);
        goto -> bb72;
    }

    bb23: {
        StorageLive(_28);
        _28 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _30) -> [return: bb24, unwind: bb85];
    }

    bb24: {
        StorageDead(_30);
        StorageDead(_28);
        _157 = discriminant(_23);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb73;
    }

    bb25: {
        StorageLive(_32);
        _32 = &(((*_1) as U8).0: u8);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_32);
        StorageLive(_37);
        _37 = &mut (*_2);
        _35 = <u8 as BorshSerialize>::serialize::<W>(move _36, move _37) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<(), std::io::Error> as Try>::branch(move _35) -> [return: bb27, unwind: bb76];
    }

    bb27: {
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb28, 1: bb29, otherwise: bb2];
    }

    bb28: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: ());
        _33 = _42;
        StorageDead(_42);
        _125 = discriminant(_34);
        StorageDead(_34);
        StorageDead(_33);
        _19 = const ();
        StorageDead(_32);
        goto -> bb72;
    }

    bb29: {
        StorageLive(_39);
        _39 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _41) -> [return: bb30, unwind: bb84];
    }

    bb30: {
        StorageDead(_41);
        StorageDead(_39);
        _155 = discriminant(_34);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb73;
    }

    bb31: {
        StorageLive(_43);
        _43 = &(((*_1) as U8Array).0: [u8; 8]);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_43);
        StorageLive(_48);
        _48 = &mut (*_2);
        _46 = <[u8; 8] as BorshSerialize>::serialize::<W>(move _47, move _48) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_48);
        StorageDead(_47);
        _45 = <std::result::Result<(), std::io::Error> as Try>::branch(move _46) -> [return: bb33, unwind: bb76];
    }

    bb33: {
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb34, 1: bb35, otherwise: bb2];
    }

    bb34: {
        StorageLive(_53);
        _53 = ((_45 as Continue).0: ());
        _44 = _53;
        StorageDead(_53);
        _127 = discriminant(_45);
        StorageDead(_45);
        StorageDead(_44);
        _19 = const ();
        StorageDead(_43);
        goto -> bb72;
    }

    bb35: {
        StorageLive(_50);
        _50 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _52) -> [return: bb36, unwind: bb83];
    }

    bb36: {
        StorageDead(_52);
        StorageDead(_50);
        _153 = discriminant(_45);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb73;
    }

    bb37: {
        StorageLive(_54);
        _54 = &(((*_1) as U16).0: u16);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &(*_54);
        StorageLive(_59);
        _59 = &mut (*_2);
        _57 = <u16 as BorshSerialize>::serialize::<W>(move _58, move _59) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<(), std::io::Error> as Try>::branch(move _57) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        StorageDead(_57);
        _60 = discriminant(_56);
        switchInt(move _60) -> [0: bb40, 1: bb41, otherwise: bb2];
    }

    bb40: {
        StorageLive(_64);
        _64 = ((_56 as Continue).0: ());
        _55 = _64;
        StorageDead(_64);
        _129 = discriminant(_56);
        StorageDead(_56);
        StorageDead(_55);
        _19 = const ();
        StorageDead(_54);
        goto -> bb72;
    }

    bb41: {
        StorageLive(_61);
        _61 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _63) -> [return: bb42, unwind: bb82];
    }

    bb42: {
        StorageDead(_63);
        StorageDead(_61);
        _151 = discriminant(_56);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb73;
    }

    bb43: {
        StorageLive(_65);
        _65 = &(((*_1) as U64).0: u64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_65);
        StorageLive(_70);
        _70 = &mut (*_2);
        _68 = <u64 as BorshSerialize>::serialize::<W>(move _69, move _70) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = <std::result::Result<(), std::io::Error> as Try>::branch(move _68) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        StorageDead(_68);
        _71 = discriminant(_67);
        switchInt(move _71) -> [0: bb46, 1: bb47, otherwise: bb2];
    }

    bb46: {
        StorageLive(_75);
        _75 = ((_67 as Continue).0: ());
        _66 = _75;
        StorageDead(_75);
        _131 = discriminant(_67);
        StorageDead(_67);
        StorageDead(_66);
        _19 = const ();
        StorageDead(_65);
        goto -> bb72;
    }

    bb47: {
        StorageLive(_72);
        _72 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_74);
        _74 = move _72;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _74) -> [return: bb48, unwind: bb81];
    }

    bb48: {
        StorageDead(_74);
        StorageDead(_72);
        _149 = discriminant(_67);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb73;
    }

    bb49: {
        StorageLive(_76);
        _76 = &(((*_1) as U128).0: u128);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &(*_76);
        StorageLive(_81);
        _81 = &mut (*_2);
        _79 = <u128 as BorshSerialize>::serialize::<W>(move _80, move _81) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_81);
        StorageDead(_80);
        _78 = <std::result::Result<(), std::io::Error> as Try>::branch(move _79) -> [return: bb51, unwind: bb76];
    }

    bb51: {
        StorageDead(_79);
        _82 = discriminant(_78);
        switchInt(move _82) -> [0: bb52, 1: bb53, otherwise: bb2];
    }

    bb52: {
        StorageLive(_86);
        _86 = ((_78 as Continue).0: ());
        _77 = _86;
        StorageDead(_86);
        _133 = discriminant(_78);
        StorageDead(_78);
        StorageDead(_77);
        _19 = const ();
        StorageDead(_76);
        goto -> bb72;
    }

    bb53: {
        StorageLive(_83);
        _83 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_85);
        _85 = move _83;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _85) -> [return: bb54, unwind: bb80];
    }

    bb54: {
        StorageDead(_85);
        StorageDead(_83);
        _147 = discriminant(_78);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb73;
    }

    bb55: {
        StorageLive(_87);
        _87 = &(((*_1) as Pubkey).0: anchor_lang::prelude::Pubkey);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_87);
        StorageLive(_92);
        _92 = &mut (*_2);
        _90 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _91, move _92) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<(), std::io::Error> as Try>::branch(move _90) -> [return: bb57, unwind: bb76];
    }

    bb57: {
        StorageDead(_90);
        _93 = discriminant(_89);
        switchInt(move _93) -> [0: bb58, 1: bb59, otherwise: bb2];
    }

    bb58: {
        StorageLive(_97);
        _97 = ((_89 as Continue).0: ());
        _88 = _97;
        StorageDead(_97);
        _135 = discriminant(_89);
        StorageDead(_89);
        StorageDead(_88);
        _19 = const ();
        StorageDead(_87);
        goto -> bb72;
    }

    bb59: {
        StorageLive(_94);
        _94 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _96) -> [return: bb60, unwind: bb79];
    }

    bb60: {
        StorageDead(_96);
        StorageDead(_94);
        _145 = discriminant(_89);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb73;
    }

    bb61: {
        StorageLive(_98);
        _98 = &(((*_1) as ElevationGroup).0: state::lending_market::ElevationGroup);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &(*_98);
        StorageLive(_103);
        _103 = &mut (*_2);
        _101 = <state::lending_market::ElevationGroup as BorshSerialize>::serialize::<W>(move _102, move _103) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_103);
        StorageDead(_102);
        _100 = <std::result::Result<(), std::io::Error> as Try>::branch(move _101) -> [return: bb63, unwind: bb76];
    }

    bb63: {
        StorageDead(_101);
        _104 = discriminant(_100);
        switchInt(move _104) -> [0: bb64, 1: bb65, otherwise: bb2];
    }

    bb64: {
        StorageLive(_108);
        _108 = ((_100 as Continue).0: ());
        _99 = _108;
        StorageDead(_108);
        _137 = discriminant(_100);
        StorageDead(_100);
        StorageDead(_99);
        _19 = const ();
        StorageDead(_98);
        goto -> bb72;
    }

    bb65: {
        StorageLive(_105);
        _105 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_107);
        _107 = move _105;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _107) -> [return: bb66, unwind: bb78];
    }

    bb66: {
        StorageDead(_107);
        StorageDead(_105);
        _143 = discriminant(_100);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb73;
    }

    bb67: {
        StorageDead(_114);
        StorageDead(_113);
        _111 = <std::result::Result<(), std::io::Error> as Try>::branch(move _112) -> [return: bb68, unwind: bb76];
    }

    bb68: {
        StorageDead(_112);
        _115 = discriminant(_111);
        switchInt(move _115) -> [0: bb69, 1: bb70, otherwise: bb2];
    }

    bb69: {
        StorageLive(_119);
        _119 = ((_111 as Continue).0: ());
        _110 = _119;
        StorageDead(_119);
        _139 = discriminant(_111);
        StorageDead(_111);
        StorageDead(_110);
        _19 = const ();
        StorageDead(_109);
        goto -> bb72;
    }

    bb70: {
        StorageLive(_116);
        _116 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_118);
        _118 = move _116;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _118) -> [return: bb71, unwind: bb77];
    }

    bb71: {
        StorageDead(_118);
        StorageDead(_116);
        _141 = discriminant(_111);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb73;
    }

    bb72: {
        StorageDead(_19);
        StorageLive(_120);
        _120 = ();
        _0 = std::result::Result::<(), std::io::Error>::Ok(move _120);
        StorageDead(_120);
        StorageDead(_3);
        goto -> bb75;
    }

    bb73: {
        StorageDead(_19);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_3);
        goto -> bb75;
    }

    bb75: {
        return;
    }

    bb76 (cleanup): {
        resume;
    }

    bb77 (cleanup): {
        _161 = discriminant(_111);
        goto -> bb76;
    }

    bb78 (cleanup): {
        _162 = discriminant(_100);
        goto -> bb76;
    }

    bb79 (cleanup): {
        _163 = discriminant(_89);
        goto -> bb76;
    }

    bb80 (cleanup): {
        _164 = discriminant(_78);
        goto -> bb76;
    }

    bb81 (cleanup): {
        _165 = discriminant(_67);
        goto -> bb76;
    }

    bb82 (cleanup): {
        _166 = discriminant(_56);
        goto -> bb76;
    }

    bb83 (cleanup): {
        _167 = discriminant(_45);
        goto -> bb76;
    }

    bb84 (cleanup): {
        _168 = discriminant(_34);
        goto -> bb76;
    }

    bb85 (cleanup): {
        _169 = discriminant(_23);
        goto -> bb76;
    }

    bb86 (cleanup): {
        _170 = discriminant(_6);
        goto -> bb76;
    }
}
