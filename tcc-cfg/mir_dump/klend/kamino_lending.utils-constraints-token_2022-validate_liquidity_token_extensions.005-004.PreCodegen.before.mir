// MIR for `validate_liquidity_token_extensions` before PreCodegen

fn validate_liquidity_token_extensions(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug mint_acc_info => _1;
    debug token_acc_info => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &&anchor_lang::prelude::Pubkey;
    let mut _6: &&anchor_lang::prelude::Pubkey;
    let _7: &anchor_lang::prelude::Pubkey;
    let _8: anchor_lang::prelude::Pubkey;
    let mut _9: !;
    let mut _10: ();
    let _11: ();
    let mut _12: bool;
    let mut _13: &&anchor_lang::prelude::Pubkey;
    let mut _14: &&anchor_lang::prelude::Pubkey;
    let _15: &anchor_lang::prelude::Pubkey;
    let _16: anchor_lang::prelude::Pubkey;
    let mut _17: !;
    let mut _18: anchor_lang::error::Error;
    let mut _19: anchor_lang::error::AnchorError;
    let mut _20: std::string::String;
    let mut _21: &LendingError;
    let _22: LendingError;
    let mut _23: u32;
    let mut _24: LendingError;
    let mut _25: std::string::String;
    let mut _26: &LendingError;
    let _27: LendingError;
    let mut _28: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _29: anchor_lang::error::ErrorOrigin;
    let mut _30: anchor_lang::error::Source;
    let mut _31: std::option::Option<anchor_lang::error::ComparedValues>;
    let _32: std::cell::Ref<'_, &mut [u8]>;
    let mut _33: &std::cell::RefCell<&mut [u8]>;
    let _34: &std::cell::RefCell<&mut [u8]>;
    let mut _35: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _38: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _39: &[u8];
    let _40: &&mut [u8];
    let mut _41: &std::cell::Ref<'_, &mut [u8]>;
    let _42: &std::cell::Ref<'_, &mut [u8]>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _49: &std::cell::RefCell<&mut [u8]>;
    let _50: &std::cell::RefCell<&mut [u8]>;
    let mut _51: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account>>;
    let mut _54: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account>, anchor_lang::prelude::ProgramError>;
    let mut _55: &[u8];
    let _56: &&mut [u8];
    let mut _57: &std::cell::Ref<'_, &mut [u8]>;
    let _58: &std::cell::Ref<'_, &mut [u8]>;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _64: ();
    let mut _65: std::vec::IntoIter<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _66: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _68: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _69: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _76: ();
    let _77: ();
    let mut _78: std::option::Option<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _79: &mut std::vec::IntoIter<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _80: &mut std::vec::IntoIter<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _81: isize;
    let mut _82: !;
    let _84: ();
    let mut _85: bool;
    let mut _86: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _87: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _88: &anchor_spl::token_2022::spl_token_2022::extension::ExtensionType;
    let _89: &anchor_spl::token_2022::spl_token_2022::extension::ExtensionType;
    let mut _90: !;
    let _91: ();
    let _92: ();
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 3];
    let _96: &[&str; 3];
    let _97: [&str; 3];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 2];
    let _100: &[core::fmt::rt::Argument<'_>; 2];
    let _101: [core::fmt::rt::Argument<'_>; 2];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &anchor_spl::token_2022::spl_token_2022::extension::ExtensionType;
    let _104: &anchor_spl::token_2022::spl_token_2022::extension::ExtensionType;
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &&[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _107: &&[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _108: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _109: anchor_lang::error::Error;
    let mut _110: anchor_lang::error::AnchorError;
    let mut _111: std::string::String;
    let mut _112: &LendingError;
    let _113: LendingError;
    let mut _114: u32;
    let mut _115: LendingError;
    let mut _116: std::string::String;
    let mut _117: &LendingError;
    let _118: LendingError;
    let mut _119: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _120: anchor_lang::error::ErrorOrigin;
    let mut _121: anchor_lang::error::Source;
    let mut _122: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _123: u16;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig>;
    let mut _126: std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig, anchor_lang::prelude::ProgramError>;
    let mut _127: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _133: bool;
    let mut _134: u16;
    let mut _135: spl_pod::primitives::PodU16;
    let mut _136: bool;
    let mut _137: u16;
    let mut _138: spl_pod::primitives::PodU16;
    let mut _139: !;
    let _140: ();
    let _141: ();
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let mut _144: &[&str; 2];
    let _145: &[&str; 2];
    let _146: [&str; 2];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let mut _148: &[core::fmt::rt::Argument<'_>; 1];
    let _149: &[core::fmt::rt::Argument<'_>; 1];
    let _150: [core::fmt::rt::Argument<'_>; 1];
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &&anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig;
    let _153: &&anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig;
    let mut _154: anchor_lang::error::Error;
    let mut _155: anchor_lang::error::AnchorError;
    let mut _156: std::string::String;
    let mut _157: &LendingError;
    let _158: LendingError;
    let mut _159: u32;
    let mut _160: LendingError;
    let mut _161: std::string::String;
    let mut _162: &LendingError;
    let _163: LendingError;
    let mut _164: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _165: anchor_lang::error::ErrorOrigin;
    let mut _166: anchor_lang::error::Source;
    let mut _167: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, &anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook>;
    let mut _170: std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook, anchor_lang::prelude::ProgramError>;
    let mut _171: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _178: spl_pod::optional_keys::OptionalNonZeroPubkey;
    let mut _179: bool;
    let mut _180: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _181: !;
    let _182: ();
    let _183: ();
    let mut _184: std::fmt::Arguments<'_>;
    let mut _185: &[&str];
    let mut _186: &[&str; 2];
    let _187: &[&str; 2];
    let _188: [&str; 2];
    let mut _189: &[core::fmt::rt::Argument<'_>];
    let mut _190: &[core::fmt::rt::Argument<'_>; 1];
    let _191: &[core::fmt::rt::Argument<'_>; 1];
    let _192: [core::fmt::rt::Argument<'_>; 1];
    let mut _193: core::fmt::rt::Argument<'_>;
    let mut _194: &&anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook;
    let _195: &&anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook;
    let mut _196: anchor_lang::error::Error;
    let mut _197: anchor_lang::error::AnchorError;
    let mut _198: std::string::String;
    let mut _199: &LendingError;
    let _200: LendingError;
    let mut _201: u32;
    let mut _202: LendingError;
    let mut _203: std::string::String;
    let mut _204: &LendingError;
    let _205: LendingError;
    let mut _206: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _207: anchor_lang::error::ErrorOrigin;
    let mut _208: anchor_lang::error::Source;
    let mut _209: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, &anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint>;
    let mut _212: std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint, anchor_lang::prelude::ProgramError>;
    let mut _213: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _214: isize;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _219: ();
    let mut _220: bool;
    let mut _221: spl_pod::primitives::PodBool;
    let mut _222: !;
    let _223: ();
    let _224: ();
    let mut _225: std::fmt::Arguments<'_>;
    let mut _226: &[&str];
    let mut _227: &[&str; 2];
    let _228: &[&str; 2];
    let _229: [&str; 2];
    let mut _230: &[core::fmt::rt::Argument<'_>];
    let mut _231: &[core::fmt::rt::Argument<'_>; 1];
    let _232: &[core::fmt::rt::Argument<'_>; 1];
    let _233: [core::fmt::rt::Argument<'_>; 1];
    let mut _234: core::fmt::rt::Argument<'_>;
    let mut _235: &&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint;
    let _236: &&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint;
    let mut _237: anchor_lang::error::Error;
    let mut _238: anchor_lang::error::AnchorError;
    let mut _239: std::string::String;
    let mut _240: &LendingError;
    let _241: LendingError;
    let mut _242: u32;
    let mut _243: LendingError;
    let mut _244: std::string::String;
    let mut _245: &LendingError;
    let _246: LendingError;
    let mut _247: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _248: anchor_lang::error::ErrorOrigin;
    let mut _249: anchor_lang::error::Source;
    let mut _250: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _251: std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount, anchor_lang::prelude::ProgramError>;
    let mut _252: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account>;
    let mut _253: isize;
    let _255: ();
    let mut _256: bool;
    let mut _257: spl_pod::primitives::PodBool;
    let mut _258: !;
    let _259: ();
    let _260: ();
    let mut _261: std::fmt::Arguments<'_>;
    let mut _262: &[&str];
    let mut _263: &[&str; 2];
    let _264: &[&str; 2];
    let _265: [&str; 2];
    let mut _266: &[core::fmt::rt::Argument<'_>];
    let mut _267: &[core::fmt::rt::Argument<'_>; 1];
    let _268: &[core::fmt::rt::Argument<'_>; 1];
    let _269: [core::fmt::rt::Argument<'_>; 1];
    let mut _270: core::fmt::rt::Argument<'_>;
    let mut _271: &&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount;
    let _272: &&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount;
    let mut _273: anchor_lang::error::Error;
    let mut _274: anchor_lang::error::AnchorError;
    let mut _275: std::string::String;
    let mut _276: &LendingError;
    let _277: LendingError;
    let mut _278: u32;
    let mut _279: LendingError;
    let mut _280: std::string::String;
    let mut _281: &LendingError;
    let _282: LendingError;
    let mut _283: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _284: anchor_lang::error::ErrorOrigin;
    let mut _285: anchor_lang::error::Source;
    let mut _286: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _287: bool;
    let mut _288: &anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext;
    let mut _289: &anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext;
    let _290: anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext;
    let mut _291: bool;
    let mut _292: &anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext;
    let mut _293: &anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext;
    let _294: anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext;
    let mut _295: !;
    let _296: ();
    let _297: ();
    let mut _298: std::fmt::Arguments<'_>;
    let mut _299: &[&str];
    let mut _300: &[&str; 2];
    let _301: &[&str; 2];
    let _302: [&str; 2];
    let mut _303: &[core::fmt::rt::Argument<'_>];
    let mut _304: &[core::fmt::rt::Argument<'_>; 1];
    let _305: &[core::fmt::rt::Argument<'_>; 1];
    let _306: [core::fmt::rt::Argument<'_>; 1];
    let mut _307: core::fmt::rt::Argument<'_>;
    let mut _308: &&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount;
    let _309: &&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount;
    let mut _310: anchor_lang::error::Error;
    let mut _311: anchor_lang::error::AnchorError;
    let mut _312: std::string::String;
    let mut _313: &LendingError;
    let _314: LendingError;
    let mut _315: u32;
    let mut _316: LendingError;
    let mut _317: std::string::String;
    let mut _318: &LendingError;
    let _319: LendingError;
    let mut _320: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _321: anchor_lang::error::ErrorOrigin;
    let mut _322: anchor_lang::error::Source;
    let mut _323: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, &anchor_spl::token_2022::spl_token_2022::extension::default_account_state::DefaultAccountState>;
    let mut _326: std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::default_account_state::DefaultAccountState, anchor_lang::prelude::ProgramError>;
    let mut _327: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _328: isize;
    let mut _330: !;
    let mut _331: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _333: bool;
    let mut _334: u8;
    let mut _335: u8;
    let mut _336: !;
    let _337: ();
    let _338: ();
    let mut _339: std::fmt::Arguments<'_>;
    let mut _340: &[&str];
    let mut _341: &[&str; 1];
    let _342: &[&str; 1];
    let _343: [&str; 1];
    let mut _344: anchor_lang::error::Error;
    let mut _345: anchor_lang::error::AnchorError;
    let mut _346: std::string::String;
    let mut _347: &LendingError;
    let _348: LendingError;
    let mut _349: u32;
    let mut _350: LendingError;
    let mut _351: std::string::String;
    let mut _352: &LendingError;
    let _353: LendingError;
    let mut _354: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _355: anchor_lang::error::ErrorOrigin;
    let mut _356: anchor_lang::error::Source;
    let mut _357: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _359: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, &anchor_spl::token_2022::spl_token_2022::extension::pausable::PausableConfig>;
    let mut _360: std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::pausable::PausableConfig, anchor_lang::prelude::ProgramError>;
    let mut _361: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _362: isize;
    let mut _364: !;
    let mut _365: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _367: bool;
    let mut _368: spl_pod::primitives::PodBool;
    let mut _369: !;
    let _370: ();
    let _371: ();
    let mut _372: std::fmt::Arguments<'_>;
    let mut _373: &[&str];
    let mut _374: &[&str; 1];
    let _375: &[&str; 1];
    let _376: [&str; 1];
    let mut _377: anchor_lang::error::Error;
    let mut _378: anchor_lang::error::AnchorError;
    let mut _379: std::string::String;
    let mut _380: &LendingError;
    let _381: LendingError;
    let mut _382: u32;
    let mut _383: LendingError;
    let mut _384: std::string::String;
    let mut _385: &LendingError;
    let _386: LendingError;
    let mut _387: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _388: anchor_lang::error::ErrorOrigin;
    let mut _389: anchor_lang::error::Source;
    let mut _390: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _391: ();
    let mut _392: &LendingError;
    let mut _393: &LendingError;
    let mut _419: &mut [u8];
    let mut _420: &mut [u8];
    let mut _421: bool;
    let mut _422: bool;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    scope 1 {
        debug mint_data => _32;
        let _36: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
        let _44: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _47: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
        scope 2 {
            debug mint => _36;
            let _48: std::cell::Ref<'_, &mut [u8]>;
            scope 7 {
                debug token_acc_data => _48;
                let _52: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account>;
                let _60: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _63: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account>;
                scope 8 {
                    debug token_acc => _52;
                    let _71: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _74: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                    let mut _75: std::vec::IntoIter<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                    scope 13 {
                        debug residual => _71;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _74;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug iter => _75;
                        let _83: anchor_spl::token_2022::spl_token_2022::extension::ExtensionType;
                        scope 18 {
                            debug mint_ext => _83;
                            let _124: &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig;
                            let _129: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _132: &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig;
                            let _168: &anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook;
                            let _173: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _176: &anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook;
                            let _210: &anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint;
                            let _215: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _218: &anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint;
                            let _324: &anchor_spl::token_2022::spl_token_2022::extension::default_account_state::DefaultAccountState;
                            let _329: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _332: &anchor_spl::token_2022::spl_token_2022::extension::default_account_state::DefaultAccountState;
                            let _358: &anchor_spl::token_2022::spl_token_2022::extension::pausable::PausableConfig;
                            let _363: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _366: &anchor_spl::token_2022::spl_token_2022::extension::pausable::PausableConfig;
                            let mut _415: &LendingError;
                            let mut _416: &LendingError;
                            let mut _417: &&[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
                            let mut _418: &[&str; 3];
                            scope 19 {
                                debug ext => _124;
                                let mut _412: &LendingError;
                                let mut _413: &LendingError;
                                let mut _414: &[&str; 2];
                            }
                            scope 20 {
                                debug residual => _129;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _132;
                                scope 23 {
                                }
                            }
                            scope 24 {
                                debug ext => _168;
                                let _177: std::option::Option<anchor_lang::prelude::Pubkey>;
                                scope 29 {
                                    debug hook_program_id => _177;
                                    let mut _409: &LendingError;
                                    let mut _410: &LendingError;
                                    let mut _411: &[&str; 2];
                                }
                            }
                            scope 25 {
                                debug residual => _173;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _176;
                                scope 28 {
                                }
                            }
                            scope 30 {
                                debug ext => _210;
                                let mut _400: &LendingError;
                                let mut _401: &LendingError;
                                let mut _402: &[&str; 2];
                                scope 35 {
                                    debug token_acc_ext => _254;
                                    let _254: &anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount;
                                    let mut _403: &LendingError;
                                    let mut _404: &LendingError;
                                    let mut _405: &[&str; 2];
                                    let mut _406: &LendingError;
                                    let mut _407: &LendingError;
                                    let mut _408: &[&str; 2];
                                }
                            }
                            scope 31 {
                                debug residual => _215;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _218;
                                scope 34 {
                                }
                            }
                            scope 36 {
                                debug ext => _324;
                                let mut _397: &LendingError;
                                let mut _398: &LendingError;
                                let mut _399: &[&str; 1];
                            }
                            scope 37 {
                                debug residual => _329;
                                scope 38 {
                                }
                            }
                            scope 39 {
                                debug val => _332;
                                scope 40 {
                                }
                            }
                            scope 41 {
                                debug ext => _358;
                                let mut _394: &LendingError;
                                let mut _395: &LendingError;
                                let mut _396: &[&str; 1];
                            }
                            scope 42 {
                                debug residual => _363;
                                scope 43 {
                                }
                            }
                            scope 44 {
                                debug val => _366;
                                scope 45 {
                                }
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _60;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _63;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _44;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _47;
            scope 6 {
            }
        }
    }

    bb0: {
        _422 = const false;
        _421 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = anchor_spl::token::spl_token::id() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _6 = &_7;
        _4 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_10);
        _10 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _10);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb181;
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_2).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = anchor_spl::token::spl_token::id() -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = &_16;
        _14 = &_15;
        _12 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _12) -> [0: bb12, otherwise: bb7];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _393 = const _;
        _21 = &(*_393);
        _20 = LendingError::name(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        _24 = LendingError::InvalidTokenAccount;
        _23 = <LendingError as Into<u32>>::into(move _24) -> [return: bb9, unwind: bb194];
    }

    bb9: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _392 = const _;
        _26 = &(*_392);
        _25 = <LendingError as ToString>::to_string(move _26) -> [return: bb10, unwind: bb194];
    }

    bb10: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 68_u32 };
        _29 = anchor_lang::error::ErrorOrigin::Source(move _30);
        StorageDead(_30);
        _28 = std::option::Option::<ErrorOrigin>::Some(move _29);
        StorageDead(_29);
        StorageLive(_31);
        _31 = std::option::Option::<ComparedValues>::None;
        _19 = anchor_lang::error::AnchorError { error_name: move _20, error_code_number: move _23, error_msg: move _25, error_origin: move _28, compared_values: move _31 };
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        _18 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _19) -> [return: bb11, unwind: bb195];
    }

    bb11: {
        StorageDead(_19);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _18);
        StorageDead(_18);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb181;
    }

    bb12: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_1).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _34 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = RefCell::<&mut [u8]>::borrow(move _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_32;
        _41 = &(*_42);
        _40 = <Ref<'_, &mut [u8]> as Deref>::deref(move _41) -> [return: bb15, unwind: bb193];
    }

    bb15: {
        _419 = deref_copy (*_40);
        _39 = &(*_419);
        StorageDead(_41);
        _38 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _39) -> [return: bb16, unwind: bb193];
    }

    bb16: {
        StorageDead(_39);
        _37 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _38) -> [return: bb17, unwind: bb193];
    }

    bb17: {
        StorageDead(_38);
        _43 = discriminant(_37);
        switchInt(move _43) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _36 = move _47;
        StorageDead(_47);
        _423 = discriminant(_37);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_37);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_2).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _50 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _51) -> [return: bb22, unwind: bb193];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_44);
        _44 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _46) -> [return: bb21, unwind: bb204];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        _453 = discriminant(_37);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_37);
        goto -> bb179;
    }

    bb22: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = RefCell::<&mut [u8]>::borrow(move _49) -> [return: bb23, unwind: bb193];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_48;
        _57 = &(*_58);
        _56 = <Ref<'_, &mut [u8]> as Deref>::deref(move _57) -> [return: bb24, unwind: bb192];
    }

    bb24: {
        _420 = deref_copy (*_56);
        _55 = &(*_420);
        StorageDead(_57);
        _54 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Account>::unpack(move _55) -> [return: bb25, unwind: bb192];
    }

    bb25: {
        StorageDead(_55);
        _53 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account>, anchor_lang::prelude::ProgramError> as Try>::branch(move _54) -> [return: bb26, unwind: bb192];
    }

    bb26: {
        StorageDead(_54);
        _59 = discriminant(_53);
        switchInt(move _59) -> [0: bb27, 1: bb28, otherwise: bb19];
    }

    bb27: {
        StorageLive(_63);
        _63 = move ((_53 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account>);
        _52 = move _63;
        StorageDead(_63);
        _425 = discriminant(_53);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_36;
        _68 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _69) -> [return: bb30, unwind: bb192];
    }

    bb28: {
        StorageLive(_60);
        _60 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _62) -> [return: bb29, unwind: bb203];
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_60);
        _451 = discriminant(_53);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_53);
        goto -> bb177;
    }

    bb30: {
        StorageDead(_69);
        _67 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _68) -> [return: bb31, unwind: bb192];
    }

    bb31: {
        _421 = const true;
        _422 = const true;
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb32, 1: bb33, otherwise: bb19];
    }

    bb32: {
        StorageLive(_74);
        _74 = move ((_67 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _66 = move _74;
        StorageDead(_74);
        _65 = <Vec<ExtensionType> as IntoIterator>::into_iter(move _66) -> [return: bb35, unwind: bb202];
    }

    bb33: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _73) -> [return: bb34, unwind: bb202];
    }

    bb34: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        goto -> bb196;
    }

    bb35: {
        StorageDead(_66);
        StorageLive(_75);
        _75 = move _65;
        goto -> bb36;
    }

    bb36: {
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut _75;
        _79 = &mut (*_80);
        _78 = <std::vec::IntoIter<ExtensionType> as Iterator>::next(move _79) -> [return: bb37, unwind: bb191];
    }

    bb37: {
        StorageDead(_79);
        _81 = discriminant(_78);
        switchInt(move _81) -> [0: bb39, 1: bb38, otherwise: bb19];
    }

    bb38: {
        StorageLive(_83);
        _83 = ((_78 as Some).0: anchor_spl::token_2022::spl_token_2022::extension::ExtensionType);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = const _;
        _86 = &(*_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_83;
        _88 = &(*_89);
        _85 = core::slice::<impl [ExtensionType]>::contains(move _86, move _88) -> [return: bb40, unwind: bb191];
    }

    bb39: {
        _64 = const ();
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_77);
        drop(_75) -> [return: bb165, unwind: bb202];
    }

    bb40: {
        switchInt(move _85) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_89);
        StorageDead(_87);
        _84 = const ();
        StorageDead(_85);
        StorageDead(_84);
        _123 = discriminant(_83);
        switchInt(move _123) -> [1: bb52, 4: bb88, 6: bb135, 14: bb71, 26: bb149, otherwise: bb51];
    }

    bb42: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _418 = const _;
        _96 = &(*_418);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_83;
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_debug::<ExtensionType>(move _103) -> [return: bb43, unwind: bb191];
    }

    bb43: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _417 = const _;
        _107 = &(*_417);
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_debug::<&[ExtensionType]>(move _106) -> [return: bb44, unwind: bb191];
    }

    bb44: {
        StorageDead(_106);
        _101 = [move _102, move _105];
        StorageDead(_105);
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb45, unwind: bb191];
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = _print(move _93) -> [return: bb46, unwind: bb191];
    }

    bb46: {
        StorageDead(_93);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        StorageDead(_92);
        _91 = const ();
        StorageDead(_91);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _416 = const _;
        _112 = &(*_416);
        _111 = LendingError::name(move _112) -> [return: bb47, unwind: bb191];
    }

    bb47: {
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        _115 = LendingError::UnsupportedTokenExtension;
        _114 = <LendingError as Into<u32>>::into(move _115) -> [return: bb48, unwind: bb190];
    }

    bb48: {
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        _415 = const _;
        _117 = &(*_415);
        _116 = <LendingError as ToString>::to_string(move _117) -> [return: bb49, unwind: bb190];
    }

    bb49: {
        StorageDead(_117);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 85_u32 };
        _120 = anchor_lang::error::ErrorOrigin::Source(move _121);
        StorageDead(_121);
        _119 = std::option::Option::<ErrorOrigin>::Some(move _120);
        StorageDead(_120);
        StorageLive(_122);
        _122 = std::option::Option::<ComparedValues>::None;
        _110 = anchor_lang::error::AnchorError { error_name: move _111, error_code_number: move _114, error_msg: move _116, error_origin: move _119, compared_values: move _122 };
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_111);
        _109 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _110) -> [return: bb50, unwind: bb191];
    }

    bb50: {
        StorageDead(_110);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _109);
        StorageDead(_109);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb175;
    }

    bb51: {
        _77 = const ();
        goto -> bb164;
    }

    bb52: {
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_36;
        _126 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension::<anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig>(move _127) -> [return: bb53, unwind: bb191];
    }

    bb53: {
        StorageDead(_127);
        _125 = <std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig, anchor_lang::prelude::ProgramError> as Try>::branch(move _126) -> [return: bb54, unwind: bb191];
    }

    bb54: {
        StorageDead(_126);
        _128 = discriminant(_125);
        switchInt(move _128) -> [0: bb55, 1: bb56, otherwise: bb19];
    }

    bb55: {
        StorageLive(_132);
        _132 = ((_125 as Continue).0: &anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig);
        _124 = _132;
        StorageDead(_132);
        _427 = discriminant(_125);
        StorageDead(_125);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = (((*_124).3: anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFee).2: spl_pod::primitives::PodU16);
        _134 = <u16 as From<spl_pod::primitives::PodU16>>::from(move _135) -> [return: bb58, unwind: bb191];
    }

    bb56: {
        StorageLive(_129);
        _129 = move ((_125 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_131);
        _131 = move _129;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _131) -> [return: bb57, unwind: bb201];
    }

    bb57: {
        StorageDead(_131);
        StorageDead(_129);
        _447 = discriminant(_125);
        StorageDead(_125);
        goto -> bb174;
    }

    bb58: {
        StorageDead(_135);
        _133 = Ne(move _134, const 0_u16);
        switchInt(move _133) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        StorageDead(_134);
        goto -> bb62;
    }

    bb60: {
        StorageDead(_134);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = (((*_124).4: anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFee).2: spl_pod::primitives::PodU16);
        _137 = <u16 as From<spl_pod::primitives::PodU16>>::from(move _138) -> [return: bb61, unwind: bb191];
    }

    bb61: {
        StorageDead(_138);
        _136 = Ne(move _137, const 0_u16);
        switchInt(move _136) -> [0: bb70, otherwise: bb62];
    }

    bb62: {
        StorageDead(_137);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _414 = const _;
        _145 = &(*_414);
        _144 = &(*_145);
        _143 = move _144 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_124;
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_spl::token_2022::spl_token_2022::extension::transfer_fee::TransferFeeConfig>(move _152) -> [return: bb63, unwind: bb191];
    }

    bb63: {
        StorageDead(_152);
        _150 = [move _151];
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = move _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_148);
        _142 = Arguments::<'_>::new_v1(move _143, move _147) -> [return: bb64, unwind: bb191];
    }

    bb64: {
        StorageDead(_147);
        StorageDead(_143);
        _141 = _print(move _142) -> [return: bb65, unwind: bb191];
    }

    bb65: {
        StorageDead(_142);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_145);
        StorageDead(_141);
        _140 = const ();
        StorageDead(_140);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _413 = const _;
        _157 = &(*_413);
        _156 = LendingError::name(move _157) -> [return: bb66, unwind: bb191];
    }

    bb66: {
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        _160 = LendingError::UnsupportedTokenExtension;
        _159 = <LendingError as Into<u32>>::into(move _160) -> [return: bb67, unwind: bb189];
    }

    bb67: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _412 = const _;
        _162 = &(*_412);
        _161 = <LendingError as ToString>::to_string(move _162) -> [return: bb68, unwind: bb189];
    }

    bb68: {
        StorageDead(_162);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 98_u32 };
        _165 = anchor_lang::error::ErrorOrigin::Source(move _166);
        StorageDead(_166);
        _164 = std::option::Option::<ErrorOrigin>::Some(move _165);
        StorageDead(_165);
        StorageLive(_167);
        _167 = std::option::Option::<ComparedValues>::None;
        _155 = anchor_lang::error::AnchorError { error_name: move _156, error_code_number: move _159, error_msg: move _161, error_origin: move _164, compared_values: move _167 };
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_156);
        _154 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _155) -> [return: bb69, unwind: bb191];
    }

    bb69: {
        StorageDead(_155);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _154);
        StorageDead(_154);
        StorageDead(_136);
        StorageDead(_133);
        goto -> bb174;
    }

    bb70: {
        StorageDead(_137);
        _77 = const ();
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_124);
        goto -> bb164;
    }

    bb71: {
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &_36;
        _170 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension::<anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook>(move _171) -> [return: bb72, unwind: bb191];
    }

    bb72: {
        StorageDead(_171);
        _169 = <std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook, anchor_lang::prelude::ProgramError> as Try>::branch(move _170) -> [return: bb73, unwind: bb191];
    }

    bb73: {
        StorageDead(_170);
        _172 = discriminant(_169);
        switchInt(move _172) -> [0: bb74, 1: bb75, otherwise: bb19];
    }

    bb74: {
        StorageLive(_176);
        _176 = ((_169 as Continue).0: &anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook);
        _168 = _176;
        StorageDead(_176);
        _429 = discriminant(_169);
        StorageDead(_169);
        StorageLive(_177);
        StorageLive(_178);
        _178 = ((*_168).1: spl_pod::optional_keys::OptionalNonZeroPubkey);
        _177 = <spl_pod::optional_keys::OptionalNonZeroPubkey as Into<std::option::Option<anchor_lang::prelude::Pubkey>>>::into(move _178) -> [return: bb77, unwind: bb191];
    }

    bb75: {
        StorageLive(_173);
        _173 = move ((_169 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_175);
        _175 = move _173;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _175) -> [return: bb76, unwind: bb200];
    }

    bb76: {
        StorageDead(_175);
        StorageDead(_173);
        _445 = discriminant(_169);
        StorageDead(_169);
        goto -> bb173;
    }

    bb77: {
        StorageDead(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_177;
        _179 = std::option::Option::<anchor_lang::prelude::Pubkey>::is_some(move _180) -> [return: bb78, unwind: bb191];
    }

    bb78: {
        switchInt(move _179) -> [0: bb87, otherwise: bb79];
    }

    bb79: {
        StorageDead(_180);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _411 = const _;
        _187 = &(*_411);
        _186 = &(*_187);
        _185 = move _186 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_168;
        _194 = &(*_195);
        _193 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_spl::token_2022::spl_token_2022::extension::transfer_hook::TransferHook>(move _194) -> [return: bb80, unwind: bb191];
    }

    bb80: {
        StorageDead(_194);
        _192 = [move _193];
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _189 = move _190 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_190);
        _184 = Arguments::<'_>::new_v1(move _185, move _189) -> [return: bb81, unwind: bb191];
    }

    bb81: {
        StorageDead(_189);
        StorageDead(_185);
        _183 = _print(move _184) -> [return: bb82, unwind: bb191];
    }

    bb82: {
        StorageDead(_184);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_187);
        StorageDead(_183);
        _182 = const ();
        StorageDead(_182);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _410 = const _;
        _199 = &(*_410);
        _198 = LendingError::name(move _199) -> [return: bb83, unwind: bb191];
    }

    bb83: {
        StorageDead(_199);
        StorageLive(_201);
        StorageLive(_202);
        _202 = LendingError::UnsupportedTokenExtension;
        _201 = <LendingError as Into<u32>>::into(move _202) -> [return: bb84, unwind: bb188];
    }

    bb84: {
        StorageDead(_202);
        StorageLive(_203);
        StorageLive(_204);
        _409 = const _;
        _204 = &(*_409);
        _203 = <LendingError as ToString>::to_string(move _204) -> [return: bb85, unwind: bb188];
    }

    bb85: {
        StorageDead(_204);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 111_u32 };
        _207 = anchor_lang::error::ErrorOrigin::Source(move _208);
        StorageDead(_208);
        _206 = std::option::Option::<ErrorOrigin>::Some(move _207);
        StorageDead(_207);
        StorageLive(_209);
        _209 = std::option::Option::<ComparedValues>::None;
        _197 = anchor_lang::error::AnchorError { error_name: move _198, error_code_number: move _201, error_msg: move _203, error_origin: move _206, compared_values: move _209 };
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_198);
        _196 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _197) -> [return: bb86, unwind: bb191];
    }

    bb86: {
        StorageDead(_197);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _196);
        StorageDead(_196);
        StorageDead(_179);
        StorageDead(_177);
        goto -> bb173;
    }

    bb87: {
        StorageDead(_180);
        _77 = const ();
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_168);
        goto -> bb164;
    }

    bb88: {
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_36;
        _212 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension::<anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint>(move _213) -> [return: bb89, unwind: bb191];
    }

    bb89: {
        StorageDead(_213);
        _211 = <std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint, anchor_lang::prelude::ProgramError> as Try>::branch(move _212) -> [return: bb90, unwind: bb191];
    }

    bb90: {
        StorageDead(_212);
        _214 = discriminant(_211);
        switchInt(move _214) -> [0: bb91, 1: bb92, otherwise: bb19];
    }

    bb91: {
        StorageLive(_218);
        _218 = ((_211 as Continue).0: &anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint);
        _210 = _218;
        StorageDead(_218);
        _431 = discriminant(_211);
        StorageDead(_211);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = ((*_210).1: spl_pod::primitives::PodBool);
        _220 = <bool as From<spl_pod::primitives::PodBool>>::from(move _221) -> [return: bb94, unwind: bb191];
    }

    bb92: {
        StorageLive(_215);
        _215 = move ((_211 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_217);
        _217 = move _215;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _217) -> [return: bb93, unwind: bb199];
    }

    bb93: {
        StorageDead(_217);
        StorageDead(_215);
        _443 = discriminant(_211);
        StorageDead(_211);
        goto -> bb172;
    }

    bb94: {
        switchInt(move _220) -> [0: bb103, otherwise: bb95];
    }

    bb95: {
        StorageDead(_221);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _402 = const _;
        _228 = &(*_402);
        _227 = &(*_228);
        _226 = move _227 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_227);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &_210;
        _235 = &(*_236);
        _234 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferMint>(move _235) -> [return: bb96, unwind: bb191];
    }

    bb96: {
        StorageDead(_235);
        _233 = [move _234];
        StorageDead(_234);
        _232 = &_233;
        _231 = &(*_232);
        _230 = move _231 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_231);
        _225 = Arguments::<'_>::new_v1(move _226, move _230) -> [return: bb97, unwind: bb191];
    }

    bb97: {
        StorageDead(_230);
        StorageDead(_226);
        _224 = _print(move _225) -> [return: bb98, unwind: bb191];
    }

    bb98: {
        StorageDead(_225);
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_228);
        StorageDead(_224);
        _223 = const ();
        StorageDead(_223);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _401 = const _;
        _240 = &(*_401);
        _239 = LendingError::name(move _240) -> [return: bb99, unwind: bb191];
    }

    bb99: {
        StorageDead(_240);
        StorageLive(_242);
        StorageLive(_243);
        _243 = LendingError::UnsupportedTokenExtension;
        _242 = <LendingError as Into<u32>>::into(move _243) -> [return: bb100, unwind: bb187];
    }

    bb100: {
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        _400 = const _;
        _245 = &(*_400);
        _244 = <LendingError as ToString>::to_string(move _245) -> [return: bb101, unwind: bb187];
    }

    bb101: {
        StorageDead(_245);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 121_u32 };
        _248 = anchor_lang::error::ErrorOrigin::Source(move _249);
        StorageDead(_249);
        _247 = std::option::Option::<ErrorOrigin>::Some(move _248);
        StorageDead(_248);
        StorageLive(_250);
        _250 = std::option::Option::<ComparedValues>::None;
        _238 = anchor_lang::error::AnchorError { error_name: move _239, error_code_number: move _242, error_msg: move _244, error_origin: move _247, compared_values: move _250 };
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_239);
        _237 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _238) -> [return: bb102, unwind: bb191];
    }

    bb102: {
        StorageDead(_238);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _237);
        StorageDead(_237);
        StorageDead(_220);
        StorageDead(_219);
        goto -> bb172;
    }

    bb103: {
        StorageDead(_221);
        _219 = const ();
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &_52;
        _251 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Account> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Account>>::get_extension::<anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount>(move _252) -> [return: bb104, unwind: bb191];
    }

    bb104: {
        StorageDead(_252);
        _253 = discriminant(_251);
        switchInt(move _253) -> [0: bb105, otherwise: bb132];
    }

    bb105: {
        StorageLive(_254);
        _254 = ((_251 as Ok).0: &anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = ((*_254).6: spl_pod::primitives::PodBool);
        _256 = <bool as From<spl_pod::primitives::PodBool>>::from(move _257) -> [return: bb106, unwind: bb186];
    }

    bb106: {
        switchInt(move _256) -> [0: bb115, otherwise: bb107];
    }

    bb107: {
        StorageDead(_257);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _405 = const _;
        _264 = &(*_405);
        _263 = &(*_264);
        _262 = move _263 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_263);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &_254;
        _271 = &(*_272);
        _270 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount>(move _271) -> [return: bb108, unwind: bb186];
    }

    bb108: {
        StorageDead(_271);
        _269 = [move _270];
        StorageDead(_270);
        _268 = &_269;
        _267 = &(*_268);
        _266 = move _267 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_267);
        _261 = Arguments::<'_>::new_v1(move _262, move _266) -> [return: bb109, unwind: bb186];
    }

    bb109: {
        StorageDead(_266);
        StorageDead(_262);
        _260 = _print(move _261) -> [return: bb110, unwind: bb186];
    }

    bb110: {
        StorageDead(_261);
        StorageDead(_272);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_264);
        StorageDead(_260);
        _259 = const ();
        StorageDead(_259);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _404 = const _;
        _276 = &(*_404);
        _275 = LendingError::name(move _276) -> [return: bb111, unwind: bb186];
    }

    bb111: {
        StorageDead(_276);
        StorageLive(_278);
        StorageLive(_279);
        _279 = LendingError::UnsupportedTokenExtension;
        _278 = <LendingError as Into<u32>>::into(move _279) -> [return: bb112, unwind: bb185];
    }

    bb112: {
        StorageDead(_279);
        StorageLive(_280);
        StorageLive(_281);
        _403 = const _;
        _281 = &(*_403);
        _280 = <LendingError as ToString>::to_string(move _281) -> [return: bb113, unwind: bb185];
    }

    bb113: {
        StorageDead(_281);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 130_u32 };
        _284 = anchor_lang::error::ErrorOrigin::Source(move _285);
        StorageDead(_285);
        _283 = std::option::Option::<ErrorOrigin>::Some(move _284);
        StorageDead(_284);
        StorageLive(_286);
        _286 = std::option::Option::<ComparedValues>::None;
        _274 = anchor_lang::error::AnchorError { error_name: move _275, error_code_number: move _278, error_msg: move _280, error_origin: move _283, compared_values: move _286 };
        StorageDead(_286);
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_275);
        _273 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _274) -> [return: bb114, unwind: bb186];
    }

    bb114: {
        StorageDead(_274);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _273);
        StorageDead(_273);
        StorageDead(_256);
        StorageDead(_255);
        goto -> bb170;
    }

    bb115: {
        StorageDead(_257);
        _255 = const ();
        StorageDead(_256);
        StorageDead(_255);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &((*_254).2: anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext);
        StorageLive(_289);
        StorageLive(_290);
        _290 = <anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext as Zeroable>::zeroed() -> [return: bb116, unwind: bb186];
    }

    bb116: {
        _289 = &_290;
        _287 = <anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext as PartialEq>::ne(move _288, move _289) -> [return: bb117, unwind: bb186];
    }

    bb117: {
        switchInt(move _287) -> [0: bb130, otherwise: bb118];
    }

    bb118: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_291);
        StorageLive(_292);
        _292 = &((*_254).3: anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext);
        StorageLive(_293);
        StorageLive(_294);
        _294 = <anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext as Zeroable>::zeroed() -> [return: bb119, unwind: bb186];
    }

    bb119: {
        _293 = &_294;
        _291 = <anchor_spl::token_2022::spl_token_2022::solana_zk_token_sdk::zk_token_elgamal::pod::ElGamalCiphertext as PartialEq>::ne(move _292, move _293) -> [return: bb120, unwind: bb186];
    }

    bb120: {
        switchInt(move _291) -> [0: bb129, otherwise: bb121];
    }

    bb121: {
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_292);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _408 = const _;
        _301 = &(*_408);
        _300 = &(*_301);
        _299 = move _300 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_300);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &_254;
        _308 = &(*_309);
        _307 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_spl::token_2022::spl_token_2022::extension::confidential_transfer::ConfidentialTransferAccount>(move _308) -> [return: bb122, unwind: bb186];
    }

    bb122: {
        StorageDead(_308);
        _306 = [move _307];
        StorageDead(_307);
        _305 = &_306;
        _304 = &(*_305);
        _303 = move _304 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_304);
        _298 = Arguments::<'_>::new_v1(move _299, move _303) -> [return: bb123, unwind: bb186];
    }

    bb123: {
        StorageDead(_303);
        StorageDead(_299);
        _297 = _print(move _298) -> [return: bb124, unwind: bb186];
    }

    bb124: {
        StorageDead(_298);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_301);
        StorageDead(_297);
        _296 = const ();
        StorageDead(_296);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _407 = const _;
        _313 = &(*_407);
        _312 = LendingError::name(move _313) -> [return: bb125, unwind: bb186];
    }

    bb125: {
        StorageDead(_313);
        StorageLive(_315);
        StorageLive(_316);
        _316 = LendingError::UnsupportedTokenExtension;
        _315 = <LendingError as Into<u32>>::into(move _316) -> [return: bb126, unwind: bb184];
    }

    bb126: {
        StorageDead(_316);
        StorageLive(_317);
        StorageLive(_318);
        _406 = const _;
        _318 = &(*_406);
        _317 = <LendingError as ToString>::to_string(move _318) -> [return: bb127, unwind: bb184];
    }

    bb127: {
        StorageDead(_318);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 139_u32 };
        _321 = anchor_lang::error::ErrorOrigin::Source(move _322);
        StorageDead(_322);
        _320 = std::option::Option::<ErrorOrigin>::Some(move _321);
        StorageDead(_321);
        StorageLive(_323);
        _323 = std::option::Option::<ComparedValues>::None;
        _311 = anchor_lang::error::AnchorError { error_name: move _312, error_code_number: move _315, error_msg: move _317, error_origin: move _320, compared_values: move _323 };
        StorageDead(_323);
        StorageDead(_320);
        StorageDead(_317);
        StorageDead(_315);
        StorageDead(_312);
        _310 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _311) -> [return: bb128, unwind: bb186];
    }

    bb128: {
        StorageDead(_311);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _310);
        StorageDead(_310);
        StorageDead(_291);
        StorageDead(_287);
        goto -> bb170;
    }

    bb129: {
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_292);
        goto -> bb131;
    }

    bb130: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb131;
    }

    bb131: {
        _77 = const ();
        StorageDead(_291);
        StorageDead(_287);
        StorageDead(_254);
        goto -> bb133;
    }

    bb132: {
        _77 = const ();
        goto -> bb133;
    }

    bb133: {
        StorageDead(_210);
        drop(_251) -> [return: bb134, unwind: bb191];
    }

    bb134: {
        StorageDead(_251);
        goto -> bb164;
    }

    bb135: {
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &_36;
        _326 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension::<anchor_spl::token_2022::spl_token_2022::extension::default_account_state::DefaultAccountState>(move _327) -> [return: bb136, unwind: bb191];
    }

    bb136: {
        StorageDead(_327);
        _325 = <std::result::Result<&anchor_spl::token_2022::spl_token_2022::extension::default_account_state::DefaultAccountState, anchor_lang::prelude::ProgramError> as Try>::branch(move _326) -> [return: bb137, unwind: bb191];
    }

    bb137: {
        StorageDead(_326);
        _328 = discriminant(_325);
        switchInt(move _328) -> [0: bb138, 1: bb139, otherwise: bb19];
    }

    bb138: {
        StorageLive(_332);
        _332 = ((_325 as Continue).0: &anchor_spl::token_2022::spl_token_2022::extension::default_account_state::DefaultAccountState);
        _324 = _332;
        StorageDead(_332);
        _433 = discriminant(_325);
        StorageDead(_325);
        StorageLive(_333);
        StorageLive(_334);
        _334 = ((*_324).0: u8);
        StorageLive(_335);
        _335 = const 1_u8 as u8 (IntToInt);
        _333 = Ne(move _334, move _335);
        switchInt(move _333) -> [0: bb148, otherwise: bb141];
    }

    bb139: {
        StorageLive(_329);
        _329 = move ((_325 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_331);
        _331 = move _329;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _331) -> [return: bb140, unwind: bb198];
    }

    bb140: {
        StorageDead(_331);
        StorageDead(_329);
        _441 = discriminant(_325);
        StorageDead(_325);
        goto -> bb169;
    }

    bb141: {
        StorageDead(_335);
        StorageDead(_334);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _399 = const _;
        _342 = &(*_399);
        _341 = &(*_342);
        _340 = move _341 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_341);
        _339 = Arguments::<'_>::new_const(move _340) -> [return: bb142, unwind: bb191];
    }

    bb142: {
        StorageDead(_340);
        _338 = _print(move _339) -> [return: bb143, unwind: bb191];
    }

    bb143: {
        StorageDead(_339);
        StorageDead(_342);
        StorageDead(_338);
        _337 = const ();
        StorageDead(_337);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _398 = const _;
        _347 = &(*_398);
        _346 = LendingError::name(move _347) -> [return: bb144, unwind: bb191];
    }

    bb144: {
        StorageDead(_347);
        StorageLive(_349);
        StorageLive(_350);
        _350 = LendingError::UnsupportedTokenExtension;
        _349 = <LendingError as Into<u32>>::into(move _350) -> [return: bb145, unwind: bb183];
    }

    bb145: {
        StorageDead(_350);
        StorageLive(_351);
        StorageLive(_352);
        _397 = const _;
        _352 = &(*_397);
        _351 = <LendingError as ToString>::to_string(move _352) -> [return: bb146, unwind: bb183];
    }

    bb146: {
        StorageDead(_352);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 149_u32 };
        _355 = anchor_lang::error::ErrorOrigin::Source(move _356);
        StorageDead(_356);
        _354 = std::option::Option::<ErrorOrigin>::Some(move _355);
        StorageDead(_355);
        StorageLive(_357);
        _357 = std::option::Option::<ComparedValues>::None;
        _345 = anchor_lang::error::AnchorError { error_name: move _346, error_code_number: move _349, error_msg: move _351, error_origin: move _354, compared_values: move _357 };
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_346);
        _344 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _345) -> [return: bb147, unwind: bb191];
    }

    bb147: {
        StorageDead(_345);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _344);
        StorageDead(_344);
        StorageDead(_333);
        goto -> bb169;
    }

    bb148: {
        StorageDead(_335);
        StorageDead(_334);
        _77 = const ();
        StorageDead(_333);
        StorageDead(_324);
        goto -> bb164;
    }

    bb149: {
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &_36;
        _360 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension::<PausableConfig>(move _361) -> [return: bb150, unwind: bb191];
    }

    bb150: {
        StorageDead(_361);
        _359 = <std::result::Result<&PausableConfig, anchor_lang::prelude::ProgramError> as Try>::branch(move _360) -> [return: bb151, unwind: bb191];
    }

    bb151: {
        StorageDead(_360);
        _362 = discriminant(_359);
        switchInt(move _362) -> [0: bb152, 1: bb153, otherwise: bb19];
    }

    bb152: {
        StorageLive(_366);
        _366 = ((_359 as Continue).0: &anchor_spl::token_2022::spl_token_2022::extension::pausable::PausableConfig);
        _358 = _366;
        StorageDead(_366);
        _435 = discriminant(_359);
        StorageDead(_359);
        StorageLive(_367);
        StorageLive(_368);
        _368 = ((*_358).1: spl_pod::primitives::PodBool);
        _367 = <spl_pod::primitives::PodBool as Into<bool>>::into(move _368) -> [return: bb155, unwind: bb191];
    }

    bb153: {
        StorageLive(_363);
        _363 = move ((_359 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_365);
        _365 = move _363;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _365) -> [return: bb154, unwind: bb197];
    }

    bb154: {
        StorageDead(_365);
        StorageDead(_363);
        _439 = discriminant(_359);
        StorageDead(_359);
        goto -> bb168;
    }

    bb155: {
        switchInt(move _367) -> [0: bb163, otherwise: bb156];
    }

    bb156: {
        StorageDead(_368);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _396 = const _;
        _375 = &(*_396);
        _374 = &(*_375);
        _373 = move _374 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_374);
        _372 = Arguments::<'_>::new_const(move _373) -> [return: bb157, unwind: bb191];
    }

    bb157: {
        StorageDead(_373);
        _371 = _print(move _372) -> [return: bb158, unwind: bb191];
    }

    bb158: {
        StorageDead(_372);
        StorageDead(_375);
        StorageDead(_371);
        _370 = const ();
        StorageDead(_370);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _395 = const _;
        _380 = &(*_395);
        _379 = LendingError::name(move _380) -> [return: bb159, unwind: bb191];
    }

    bb159: {
        StorageDead(_380);
        StorageLive(_382);
        StorageLive(_383);
        _383 = LendingError::UnsupportedTokenExtension;
        _382 = <LendingError as Into<u32>>::into(move _383) -> [return: bb160, unwind: bb182];
    }

    bb160: {
        StorageDead(_383);
        StorageLive(_384);
        StorageLive(_385);
        _394 = const _;
        _385 = &(*_394);
        _384 = <LendingError as ToString>::to_string(move _385) -> [return: bb161, unwind: bb182];
    }

    bb161: {
        StorageDead(_385);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\constraints.rs", line: const 157_u32 };
        _388 = anchor_lang::error::ErrorOrigin::Source(move _389);
        StorageDead(_389);
        _387 = std::option::Option::<ErrorOrigin>::Some(move _388);
        StorageDead(_388);
        StorageLive(_390);
        _390 = std::option::Option::<ComparedValues>::None;
        _378 = anchor_lang::error::AnchorError { error_name: move _379, error_code_number: move _382, error_msg: move _384, error_origin: move _387, compared_values: move _390 };
        StorageDead(_390);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_379);
        _377 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _378) -> [return: bb162, unwind: bb191];
    }

    bb162: {
        StorageDead(_378);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _377);
        StorageDead(_377);
        StorageDead(_367);
        goto -> bb168;
    }

    bb163: {
        StorageDead(_368);
        _77 = const ();
        StorageDead(_367);
        StorageDead(_358);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_77);
        _76 = const ();
        goto -> bb36;
    }

    bb165: {
        StorageDead(_75);
        _437 = discriminant(_67);
        _421 = const false;
        _422 = const false;
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_391);
        _391 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _391);
        StorageDead(_391);
        StorageDead(_52);
        drop(_48) -> [return: bb166, unwind: bb193];
    }

    bb166: {
        StorageDead(_48);
        StorageDead(_36);
        drop(_32) -> [return: bb167, unwind: bb195];
    }

    bb167: {
        StorageDead(_32);
        goto -> bb181;
    }

    bb168: {
        StorageDead(_358);
        goto -> bb175;
    }

    bb169: {
        StorageDead(_324);
        goto -> bb175;
    }

    bb170: {
        StorageDead(_254);
        StorageDead(_210);
        drop(_251) -> [return: bb171, unwind: bb191];
    }

    bb171: {
        StorageDead(_251);
        goto -> bb175;
    }

    bb172: {
        StorageDead(_210);
        goto -> bb175;
    }

    bb173: {
        StorageDead(_168);
        goto -> bb175;
    }

    bb174: {
        StorageDead(_124);
        goto -> bb175;
    }

    bb175: {
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_77);
        drop(_75) -> [return: bb176, unwind: bb202];
    }

    bb176: {
        StorageDead(_75);
        goto -> bb196;
    }

    bb177: {
        StorageDead(_52);
        drop(_48) -> [return: bb178, unwind: bb193];
    }

    bb178: {
        StorageDead(_48);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_36);
        drop(_32) -> [return: bb180, unwind: bb195];
    }

    bb180: {
        StorageDead(_32);
        goto -> bb181;
    }

    bb181: {
        return;
    }

    bb182 (cleanup): {
        drop(_379) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_346) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_312) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_275) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_251) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_239) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_198) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_156) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_111) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_75) -> [return: bb202, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_48) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_32) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_20) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        resume;
    }

    bb196: {
        _449 = discriminant(_67);
        _421 = const false;
        _422 = const false;
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb177;
    }

    bb197 (cleanup): {
        _455 = discriminant(_359);
        goto -> bb191;
    }

    bb198 (cleanup): {
        _456 = discriminant(_325);
        goto -> bb191;
    }

    bb199 (cleanup): {
        _457 = discriminant(_211);
        goto -> bb191;
    }

    bb200 (cleanup): {
        _458 = discriminant(_169);
        goto -> bb191;
    }

    bb201 (cleanup): {
        _459 = discriminant(_125);
        goto -> bb191;
    }

    bb202 (cleanup): {
        _460 = discriminant(_67);
        goto -> bb192;
    }

    bb203 (cleanup): {
        _461 = discriminant(_53);
        goto -> bb192;
    }

    bb204 (cleanup): {
        _462 = discriminant(_37);
        goto -> bb193;
    }
}
