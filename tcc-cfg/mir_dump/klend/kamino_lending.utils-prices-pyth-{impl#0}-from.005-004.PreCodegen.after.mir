// MIR for `pyth::<impl at programs\klend\src\utils\prices\pyth.rs:93:1: 93:42>::from` after PreCodegen

fn pyth::<impl at programs\klend\src\utils\prices\pyth.rs:93:1: 93:42>::from(_1: pyth_solana_receiver_sdk::price_update::Price) -> TimestampedPrice {
    debug pyth_price => _1;
    let mut _0: utils::prices::types::TimestampedPrice;
    let _2: u64;
    let mut _3: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _4: i64;
    let mut _6: i32;
    let mut _7: std::option::Option<i32>;
    let mut _8: i32;
    let mut _10: u64;
    let mut _11: u32;
    let mut _13: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _14: i64;
    let mut _16: {closure@programs\klend\src\utils\prices\pyth.rs:102:35: 102:42};
    let mut _17: std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>>;
    let mut _18: std::boxed::Box<{closure@programs\klend\src\utils\prices\pyth.rs:102:35: 102:42}>;
    let mut _19: u64;
    scope 1 {
        debug value => _2;
        let _5: u32;
        scope 2 {
            debug exp => _5;
            let _9: utils::prices::types::Price<u64>;
            scope 3 {
                debug price => _9;
                let _12: u64;
                scope 4 {
                    debug timestamp => _12;
                    let _15: std::boxed::Box<{closure@programs\klend\src\utils\prices\pyth.rs:102:35: 102:42}>;
                    scope 5 {
                        debug price_load => _15;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = (_1.0: i64);
        _3 = <u64 as TryFrom<i64>>::try_from(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _2 = std::result::Result::<u64, TryFromIntError>::unwrap(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = (_1.2: i32);
        _7 = core::num::<impl i32>::checked_abs(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        _6 = std::option::Option::<i32>::unwrap(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        _5 = move _6 as u32 (IntToInt);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = _5;
        _9 = prices::types::Price::<u64> { value: move _10, exp: move _11 };
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = (_1.3: i64);
        _13 = <i64 as TryInto<u64>>::try_into(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_14);
        _12 = std::result::Result::<u64, TryFromIntError>::unwrap(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = {closure@programs\klend\src\utils\prices\pyth.rs:102:35: 102:42} { price: _9 };
        _15 = Box::<{closure@programs\klend\src\utils\prices\pyth.rs:102:35: 102:42}>::new(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = move _15;
        _17 = move _18 as std::boxed::Box<dyn std::ops::FnOnce() -> std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>> (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_19);
        _19 = _12;
        _0 = TimestampedPrice { price_load: move _17, timestamp: move _19 };
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}
