// MIR for `handlers::handler_repay_and_withdraw_redeem::process_impl::{closure#0}` before PreCodegen

fn handlers::handler_repay_and_withdraw_redeem::process_impl::{closure#0}(_1: &mut {closure@programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:128:30: 128:60}, _2: &mut bool, _3: &anchor_lang::prelude::AccountInfo<'_>) -> std::option::Option<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>> {
    debug found_repay_reserve => _2;
    debug account => _3;
    debug repay_reserve_key => (*((*_1).0: &anchor_lang::prelude::Pubkey));
    debug referrer_to_skip => (*((*_1).1: &anchor_lang::prelude::Pubkey));
    let mut _0: std::option::Option<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>>;
    let _4: bool;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let mut _10: bool;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let _12: anchor_lang::prelude::Pubkey;
    let mut _13: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _20: anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug is_repay_reserve => _4;
        let _9: bool;
        scope 2 {
            debug accounts_to_include => _9;
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_3);
        _6 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        StorageDead(_7);
        StorageLive(_8);
        _23 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _8 = &(*_23);
        _4 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _5, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_3);
        _12 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = &_12;
        StorageDead(_13);
        StorageLive(_14);
        _24 = deref_copy ((*_1).1: &anchor_lang::prelude::Pubkey);
        _14 = &(*_24);
        _10 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _11, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_15);
        _15 = _4;
        switchInt(move _15) -> [0: bb7, otherwise: bb8];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _9 = const false;
        goto -> bb10;
    }

    bb7: {
        _9 = const true;
        goto -> bb9;
    }

    bb8: {
        _9 = (*_2);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_15);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_10);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (*_2);
        switchInt(move _17) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _16 = const true;
        goto -> bb13;
    }

    bb12: {
        _16 = _4;
        goto -> bb13;
    }

    bb13: {
        StorageDead(_17);
        (*_2) = move _16;
        StorageDead(_16);
        StorageLive(_18);
        _18 = _9;
        switchInt(move _18) -> [0: bb16, otherwise: bb14];
    }

    bb14: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_3);
        _20 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _21) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_21);
        _19 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::Some(move _20);
        StorageDead(_20);
        _0 = std::option::Option::<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>>::Some(move _19);
        StorageDead(_19);
        goto -> bb17;
    }

    bb16: {
        StorageLive(_22);
        _22 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::None;
        _0 = std::option::Option::<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>>::Some(move _22);
        StorageDead(_22);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_4);
        return;
    }
}
