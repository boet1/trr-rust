// MIR for `__cpi_client_accounts_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18>::to_account_metas` after PreCodegen

fn __cpi_client_accounts_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:77:10: 77:18>::to_account_metas(_1: &__cpi_client_accounts_refresh_obligation_farms_for_reserve::RefreshObligationFarmsForReserve<'_>, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::AccountInfo<'_>;
    let _9: &anchor_lang::prelude::AccountInfo<'_>;
    let _10: ();
    let mut _11: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _12: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _13: &handlers::handler_refresh_obligation_farms_for_reserve::__cpi_client_accounts_refresh_obligation_farms_for_reserve_base::RefreshObligationFarmsForReserveBase<'_>;
    let mut _14: std::option::Option<bool>;
    let _15: ();
    let mut _16: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _17: anchor_lang::prelude::AccountMeta;
    let mut _18: anchor_lang::prelude::Pubkey;
    let mut _19: &anchor_lang::prelude::AccountInfo<'_>;
    let _20: &anchor_lang::prelude::AccountInfo<'_>;
    let _21: ();
    let mut _22: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _23: anchor_lang::prelude::AccountMeta;
    let mut _24: anchor_lang::prelude::Pubkey;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let _26: &anchor_lang::prelude::AccountInfo<'_>;
    let _27: ();
    let mut _28: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _29: anchor_lang::prelude::AccountMeta;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: &anchor_lang::prelude::AccountInfo<'_>;
    let _32: &anchor_lang::prelude::AccountInfo<'_>;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _8 = &(*_9);
        _7 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _8) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        StorageDead(_8);
        _6 = anchor_lang::prelude::AccountMeta::new_readonly(move _7, const true) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_4);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut _3;
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).1: handlers::handler_refresh_obligation_farms_for_reserve::__cpi_client_accounts_refresh_obligation_farms_for_reserve_base::RefreshObligationFarmsForReserveBase<'_>);
        StorageLive(_14);
        _14 = std::option::Option::<bool>::None;
        _12 = <handlers::handler_refresh_obligation_farms_for_reserve::__cpi_client_accounts_refresh_obligation_farms_for_reserve_base::RefreshObligationFarmsForReserveBase<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _13, move _14) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_13);
        _10 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _11, move _12) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _3;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).2: anchor_lang::prelude::AccountInfo<'_>);
        _19 = &(*_20);
        _18 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _19) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        StorageDead(_19);
        _17 = anchor_lang::prelude::AccountMeta::new_readonly(move _18, const false) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        StorageDead(_18);
        _15 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _16, move _17) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_20);
        StorageDead(_15);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut _3;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _25 = &(*_26);
        _24 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _25) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_25);
        _23 = anchor_lang::prelude::AccountMeta::new_readonly(move _24, const false) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageDead(_24);
        _21 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _22, move _23) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_26);
        StorageDead(_21);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut _3;
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &((*_1).4: anchor_lang::prelude::AccountInfo<'_>);
        _31 = &(*_32);
        _30 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _31) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        StorageDead(_31);
        _29 = anchor_lang::prelude::AccountMeta::new_readonly(move _30, const false) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        StorageDead(_30);
        _27 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _28, move _29) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_32);
        StorageDead(_27);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb16 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}
