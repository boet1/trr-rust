// MIR for `find_applicable_obligation_order` before PreCodegen

fn find_applicable_obligation_order(_1: &reserve::Reserve, _2: &reserve::Reserve, _3: &obligation::Obligation) -> std::option::Option<(usize, ConditionHit)> {
    debug collateral_reserve => _1;
    debug debt_reserve => _2;
    debug obligation => _3;
    let mut _0: std::option::Option<(usize, state::order_operations::ConditionHit)>;
    let _4: ();
    let mut _5: std::iter::Enumerate<std::slice::Iter<'_, state::obligation::ObligationOrder>>;
    let mut _6: std::iter::Enumerate<std::slice::Iter<'_, state::obligation::ObligationOrder>>;
    let mut _7: std::slice::Iter<'_, state::obligation::ObligationOrder>;
    let mut _8: &[state::obligation::ObligationOrder];
    let mut _9: &[state::obligation::ObligationOrder; 2];
    let mut _10: std::iter::Enumerate<std::slice::Iter<'_, state::obligation::ObligationOrder>>;
    let mut _11: ();
    let _12: ();
    let mut _13: std::option::Option<(usize, &state::obligation::ObligationOrder)>;
    let mut _14: &mut std::iter::Enumerate<std::slice::Iter<'_, state::obligation::ObligationOrder>>;
    let mut _15: &mut std::iter::Enumerate<std::slice::Iter<'_, state::obligation::ObligationOrder>>;
    let mut _16: isize;
    let mut _17: !;
    let mut _20: std::option::Option<state::order_operations::ConditionHit>;
    let mut _21: &state::reserve::Reserve;
    let mut _22: &state::reserve::Reserve;
    let mut _23: &state::obligation::Obligation;
    let mut _24: &state::obligation::ObligationOrder;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: (usize, state::order_operations::ConditionHit);
    let mut _29: usize;
    let mut _30: state::order_operations::ConditionHit;
    scope 1 {
        debug iter => _10;
        let _18: usize;
        let _19: &state::obligation::ObligationOrder;
        scope 2 {
            debug order_index => _18;
            debug order => _19;
            scope 3 {
                debug met_condition => _26;
                let _26: state::order_operations::ConditionHit;
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_3).25: [state::obligation::ObligationOrder; 2]);
        _8 = move _9 as &[state::obligation::ObligationOrder] (PointerCoercion(Unsize));
        StorageDead(_9);
        _7 = core::slice::<impl [obligation::ObligationOrder]>::iter(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::slice::Iter<'_, obligation::ObligationOrder> as Iterator>::enumerate(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _5 = <Enumerate<std::slice::Iter<'_, obligation::ObligationOrder>> as IntoIterator>::into_iter(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_10);
        _10 = move _5;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut _10;
        _14 = &mut (*_15);
        _13 = <Enumerate<std::slice::Iter<'_, obligation::ObligationOrder>> as Iterator>::next(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        StorageLive(_18);
        _18 = (((_13 as Some).0: (usize, &state::obligation::ObligationOrder)).0: usize);
        StorageLive(_19);
        _19 = (((_13 as Some).0: (usize, &state::obligation::ObligationOrder)).1: &state::obligation::ObligationOrder);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_1);
        StorageLive(_22);
        _22 = &(*_2);
        StorageLive(_23);
        _23 = &(*_3);
        StorageLive(_24);
        _24 = &(*_19);
        _20 = evaluate_order_condition(move _21, move _22, move _23, move _24) -> [return: bb9, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _4 = const ();
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        _0 = std::option::Option::<(usize, ConditionHit)>::None;
        goto -> bb12;
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        _25 = discriminant(_20);
        switchInt(move _25) -> [1: bb10, otherwise: bb11];
    }

    bb10: {
        StorageLive(_26);
        _26 = move ((_20 as Some).0: state::order_operations::ConditionHit);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _18;
        StorageLive(_30);
        _30 = move _26;
        _28 = (move _29, move _30);
        StorageDead(_30);
        StorageDead(_29);
        _0 = std::option::Option::<(usize, ConditionHit)>::Some(move _28);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb12;
    }

    bb11: {
        _12 = const ();
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        _11 = const ();
        goto -> bb4;
    }

    bb12: {
        return;
    }
}
