digraph Mir_0_6680 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::contains(_1: &amp;ReErased state::last_update::PriceStatusFlags, _2: state::last_update::PriceStatusFlags) -&gt; bool<br align="left"/>let _3: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let _4: state::last_update::PriceStatusFlags;<br align="left"/>let mut _5: u8;<br align="left"/>let mut _6: u8;<br align="left"/>let mut _7: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _8: u8;<br align="left"/>let mut _9: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>let mut _10: u8;<br align="left"/>let mut _11: &amp;ReErased state::last_update::PriceStatusFlags;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug other =&gt; _2;<br align="left"/>debug f =&gt; _3;<br align="left"/>debug other =&gt; _4;<br align="left"/>>;
    bb0__0_6680 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = _1<br/>StorageLive(_4)<br/>_4 = _2<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_3)<br/></td></tr><tr><td align="left">_6 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _7)</td></tr></table>>];
    bb1__0_6680 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;_4<br/></td></tr><tr><td align="left">_8 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _9)</td></tr></table>>];
    bb2__0_6680 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_5 = BitAnd(move _6, move _8)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;_4<br/></td></tr><tr><td align="left">_10 = last_update::_::&lt;impl last_update::PriceStatusFlags&gt;::bits(move _11)</td></tr></table>>];
    bb3__0_6680 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_0 = Eq(move _5, move _10)<br/>StorageDead(_10)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_6680 -> bb1__0_6680 [label="return"];
    bb1__0_6680 -> bb2__0_6680 [label="return"];
    bb2__0_6680 -> bb3__0_6680 [label="return"];
}
