digraph Mir_0_2637 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn validate_switchboard_confidence::{closure#1}(_1: Closure(DefId(0:2637 ~ kamino_lending[6389]::utils::prices::switchboard::validate_switchboard_confidence::{closure#1}), [i32, Binder(extern &quot;RustCall&quot; fn((u128,)) -&gt; std::option::Option&lt;u128&gt;, []), (&amp;ReErased dyn [Binder(Trait(std::ops::Fn&lt;(u128, u128)&gt;), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:3085 ~ core[c321]::ops::function::FnOnce::Output), args: [(u128, u128)], term: Term::Ty(std::option::Option&lt;u128&gt;) }), [])] + ReErased, &amp;ReErased u128)]), _2: u128) -&gt; std::option::Option&lt;u128&gt;<br align="left"/>let mut _3: &amp;ReErased dyn [Binder(Trait(std::ops::Fn&lt;(u128, u128)&gt;), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:3085 ~ core[c321]::ops::function::FnOnce::Output), args: [(u128, u128)], term: Term::Ty(std::option::Option&lt;u128&gt;) }), [])] + ReErased;<br align="left"/>let mut _4: (u128, u128);<br align="left"/>let mut _5: u128;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: &amp;ReErased dyn [Binder(Trait(std::ops::Fn&lt;(u128, u128)&gt;), []), Binder(Projection(ExistentialProjection { def_id: DefId(2:3085 ~ core[c321]::ops::function::FnOnce::Output), args: [(u128, u128)], term: Term::Ty(std::option::Option&lt;u128&gt;) }), [])] + ReErased;<br align="left"/>let mut _8: &amp;ReErased u128;<br align="left"/>debug a =&gt; _2;<br align="left"/>debug scale_op =&gt; (*(_1.0: &amp;dyn std::ops::Fn(u128, u128) -&gt; std::option::Option&lt;u128&gt;));<br align="left"/>debug scaling_factor =&gt; (*(_1.1: &amp;u128));<br align="left"/>>;
    bb0__0_2637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_7 = deref_copy (_1.0: &amp;dyn std::ops::Fn(u128, u128) -&gt; std::option::Option&lt;u128&gt;)<br/>_3 = &amp;(*_7)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/>StorageLive(_6)<br/>_8 = deref_copy (_1.1: &amp;u128)<br/>_6 = (*_8)<br/>_4 = (move _5, move _6)<br/></td></tr><tr><td align="left">_0 = &lt;dyn Fn(u128, u128) -&gt; std::option::Option&lt;u128&gt; as Fn&lt;(u128, u128)&gt;&gt;::call(move _3, move _4)</td></tr></table>>];
    bb1__0_2637 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2637 -> bb1__0_2637 [label="return"];
}
