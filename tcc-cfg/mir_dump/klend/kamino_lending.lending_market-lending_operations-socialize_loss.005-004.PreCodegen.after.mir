// MIR for `lending_operations::socialize_loss` after PreCodegen

fn lending_operations::socialize_loss(_1: &mut reserve::Reserve, _2: &anchor_lang::prelude::Pubkey, _3: &mut obligation::Obligation, _4: u64, _5: u64, _6: impl Iterator<Item = T>) -> std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> {
    debug reserve => _1;
    debug reserve_pk => _2;
    debug obligation => _3;
    debug liquidity_amount => _4;
    debug slot => _5;
    debug deposit_reserves_iter => _6;
    let mut _0: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let _7: ();
    let mut _8: bool;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _10: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _11: &state::last_update::LastUpdate;
    let mut _12: u64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _17: bool;
    let mut _18: !;
    let _19: ();
    let mut _20: &str;
    let _21: &str;
    let mut _22: &std::string::String;
    let _23: &std::string::String;
    let _24: std::string::String;
    let _25: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[&str; 1];
    let _29: &[&str; 1];
    let _30: [&str; 1];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let mut _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &u8;
    let _37: &u8;
    let _38: state::last_update::PriceStatusFlags;
    let mut _39: &state::last_update::LastUpdate;
    let mut _40: &[core::fmt::rt::Placeholder];
    let mut _41: &[core::fmt::rt::Placeholder; 1];
    let _42: &[core::fmt::rt::Placeholder; 1];
    let _43: [core::fmt::rt::Placeholder; 1];
    let mut _44: core::fmt::rt::Placeholder;
    let mut _45: core::fmt::rt::Alignment;
    let mut _46: core::fmt::rt::Count;
    let mut _47: core::fmt::rt::Count;
    let mut _48: core::fmt::rt::UnsafeArg;
    let mut _49: anchor_lang::error::Error;
    let mut _50: LendingError;
    let _51: ();
    let mut _52: bool;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _54: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _55: &state::last_update::LastUpdate;
    let mut _56: u64;
    let mut _57: isize;
    let _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _61: bool;
    let mut _62: !;
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let _69: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 1];
    let _73: &[&str; 1];
    let _74: [&str; 1];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &u8;
    let _81: &u8;
    let _82: state::last_update::PriceStatusFlags;
    let mut _83: &state::last_update::LastUpdate;
    let mut _84: &[core::fmt::rt::Placeholder];
    let mut _85: &[core::fmt::rt::Placeholder; 1];
    let _86: &[core::fmt::rt::Placeholder; 1];
    let _87: [core::fmt::rt::Placeholder; 1];
    let mut _88: core::fmt::rt::Placeholder;
    let mut _89: core::fmt::rt::Alignment;
    let mut _90: core::fmt::rt::Count;
    let mut _91: core::fmt::rt::Count;
    let mut _92: core::fmt::rt::UnsafeArg;
    let mut _93: anchor_lang::error::Error;
    let mut _94: LendingError;
    let _95: ();
    let mut _96: bool;
    let mut _97: &state::obligation::Obligation;
    let mut _98: !;
    let _99: ();
    let mut _100: &str;
    let _101: &str;
    let mut _102: anchor_lang::error::Error;
    let mut _103: LendingError;
    let _104: ();
    let mut _105: bool;
    let mut _106: &state::obligation::Obligation;
    let mut _107: bool;
    let mut _108: &state::obligation::Obligation;
    let mut _109: !;
    let _110: ();
    let mut _111: &str;
    let _112: &str;
    let mut _113: anchor_lang::error::Error;
    let mut _114: LendingError;
    let _115: &state::obligation::ObligationLiquidity;
    let _116: usize;
    let mut _117: (&state::obligation::ObligationLiquidity, usize);
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&state::obligation::ObligationLiquidity, usize)>;
    let mut _119: std::result::Result<(&state::obligation::ObligationLiquidity, usize), anchor_lang::error::Error>;
    let mut _120: &state::obligation::Obligation;
    let mut _121: anchor_lang::prelude::Pubkey;
    let mut _122: isize;
    let _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _126: (&state::obligation::ObligationLiquidity, usize);
    let mut _128: u64;
    let mut _130: &state::obligation::ObligationLiquidity;
    let mut _132: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _133: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _134: ();
    let mut _135: bool;
    let mut _136: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _137: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _138: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _139: &state::reserve::ReserveLiquidity;
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let _143: ();
    let mut _144: &str;
    let _145: &str;
    let mut _146: &std::string::String;
    let _147: &std::string::String;
    let _148: std::string::String;
    let mut _150: std::fmt::Arguments<'_>;
    let mut _151: &[&str];
    let mut _152: &[&str; 1];
    let _153: &[&str; 1];
    let _154: [&str; 1];
    let mut _155: &[core::fmt::rt::Argument<'_>];
    let mut _156: &[core::fmt::rt::Argument<'_>; 1];
    let _157: &[core::fmt::rt::Argument<'_>; 1];
    let _158: [core::fmt::rt::Argument<'_>; 1];
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _161: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _162: ();
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _164: std::result::Result<(), anchor_lang::error::Error>;
    let mut _165: u64;
    let mut _166: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _167: &mut state::obligation::Obligation;
    let mut _168: usize;
    let mut _169: &mut state::reserve::Reserve;
    let mut _170: impl Iterator<Item = T>;
    let mut _171: isize;
    let mut _173: !;
    let mut _174: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _176: ();
    let mut _177: &mut state::reserve::ReserveLiquidity;
    let mut _178: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _179: ();
    let mut _180: &mut state::last_update::LastUpdate;
    let _181: ();
    let mut _182: &mut state::obligation::Obligation;
    let mut _183: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _184: usize;
    let _185: ();
    let mut _186: &mut state::obligation::Obligation;
    let _187: ();
    let mut _188: bool;
    let mut _189: &state::obligation::Obligation;
    let mut _191: &mut state::obligation::Obligation;
    let mut _192: bool;
    let _193: ();
    let mut _194: &str;
    let _195: &str;
    let _196: ();
    let mut _197: &mut state::last_update::LastUpdate;
    let mut _198: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _199: &[&str; 1];
    let mut _200: &[&str; 1];
    let mut _202: bool;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    scope 1 {
        debug residual => _14;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _17;
        scope 4 {
        }
    }
    scope 5 {
        debug res => _25;
    }
    scope 6 {
    }
    scope 7 {
        debug residual => _58;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _61;
        scope 10 {
        }
    }
    scope 11 {
        debug res => _69;
    }
    scope 12 {
    }
    scope 13 {
        debug liquidity => _115;
        debug liquidity_index => _116;
        let _127: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 18 {
            debug liquidity_amount_f => _127;
            let _129: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 19 {
                debug borrowed_amount_f => _129;
                let _131: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 20 {
                    debug forgive_amount_f => _131;
                    let _149: std::string::String;
                    let _172: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _175: ();
                    let _190: bool;
                    let mut _201: &[&str; 1];
                    scope 21 {
                        debug res => _149;
                    }
                    scope 22 {
                        debug residual => _172;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _175;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug obligation_had_orders => _190;
                    }
                }
            }
        }
    }
    scope 14 {
        debug residual => _123;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _126;
        scope 17 {
        }
    }

    bb0: {
        _202 = const false;
        _202 = const true;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_12);
        _12 = _5;
        _10 = last_update::LastUpdate::is_stale(move _11, move _12, const _) -> [return: bb1, unwind: bb104];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _10) -> [return: bb2, unwind: bb104];
    }

    bb2: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: bool);
        _8 = _17;
        StorageDead(_17);
        switchInt(move _8) -> [0: bb94, otherwise: bb93];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _16) -> [return: bb6, unwind: bb102];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        _221 = discriminant(_9);
        StorageDead(_9);
        goto -> bb87;
    }

    bb7: {
        StorageDead(_39);
        _37 = &(_38.0: u8);
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _36) -> [return: bb8, unwind: bb104];
    }

    bb8: {
        StorageDead(_36);
        _34 = [move _35];
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = move _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_46);
        _46 = core::fmt::rt::Count::Implied;
        StorageLive(_47);
        _47 = core::fmt::rt::Count::Is(const 8_usize);
        _44 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _45, const 8_u32, move _46, move _47) -> [return: bb9, unwind: bb104];
    }

    bb9: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_48);
        _48 = core::fmt::rt::UnsafeArg::new() -> [return: bb10, unwind: bb104];
    }

    bb10: {
        _26 = Arguments::<'_>::new_v1_formatted(move _27, move _31, move _40, move _48) -> [return: bb11, unwind: bb104];
    }

    bb11: {
        StorageDead(_48);
        StorageDead(_40);
        StorageDead(_31);
        StorageDead(_27);
        _25 = format(move _26) -> [return: bb12, unwind: bb104];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_29);
        _24 = move _25;
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = <std::string::String as Deref>::deref(move _22) -> [return: bb13, unwind: bb91];
    }

    bb13: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = solana_program::log::sol_log(move _20) -> [return: bb14, unwind: bb91];
    }

    bb14: {
        StorageDead(_20);
        drop(_24) -> [return: bb15, unwind: bb104];
    }

    bb15: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_49);
        StorageLive(_50);
        _50 = LendingError::ReserveStale;
        _49 = <LendingError as Into<anchor_lang::error::Error>>::into(move _50) -> [return: bb16, unwind: bb104];
    }

    bb16: {
        StorageDead(_50);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Err(move _49);
        StorageDead(_49);
        goto -> bb87;
    }

    bb17: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _54) -> [return: bb18, unwind: bb104];
    }

    bb18: {
        StorageDead(_54);
        _57 = discriminant(_53);
        switchInt(move _57) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_61);
        _61 = ((_53 as Continue).0: bool);
        _52 = _61;
        StorageDead(_61);
        switchInt(move _52) -> [0: bb96, otherwise: bb95];
    }

    bb20: {
        StorageLive(_58);
        _58 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _60) -> [return: bb21, unwind: bb101];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_58);
        _219 = discriminant(_53);
        StorageDead(_53);
        goto -> bb86;
    }

    bb22: {
        StorageDead(_83);
        _81 = &(_82.0: u8);
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _80) -> [return: bb23, unwind: bb104];
    }

    bb23: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_90);
        _90 = core::fmt::rt::Count::Implied;
        StorageLive(_91);
        _91 = core::fmt::rt::Count::Is(const 8_usize);
        _88 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _89, const 8_u32, move _90, move _91) -> [return: bb24, unwind: bb104];
    }

    bb24: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        _87 = [move _88];
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = move _85 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_85);
        StorageLive(_92);
        _92 = core::fmt::rt::UnsafeArg::new() -> [return: bb25, unwind: bb104];
    }

    bb25: {
        _70 = Arguments::<'_>::new_v1_formatted(move _71, move _75, move _84, move _92) -> [return: bb26, unwind: bb104];
    }

    bb26: {
        StorageDead(_92);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb27, unwind: bb104];
    }

    bb27: {
        StorageDead(_70);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <std::string::String as Deref>::deref(move _66) -> [return: bb28, unwind: bb90];
    }

    bb28: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb29, unwind: bb90];
    }

    bb29: {
        StorageDead(_64);
        drop(_68) -> [return: bb30, unwind: bb104];
    }

    bb30: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_93);
        StorageLive(_94);
        _94 = LendingError::ObligationStale;
        _93 = <LendingError as Into<anchor_lang::error::Error>>::into(move _94) -> [return: bb31, unwind: bb104];
    }

    bb31: {
        StorageDead(_94);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Err(move _93);
        StorageDead(_93);
        goto -> bb86;
    }

    bb32: {
        switchInt(move _96) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_97);
        _95 = const ();
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_3);
        _105 = obligation::Obligation::active_deposits_empty(move _106) -> [return: bb37, unwind: bb104];
    }

    bb34: {
        StorageDead(_97);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = const "Obligation hasn't been fully liquidated!";
        _100 = &(*_101);
        _99 = solana_program::log::sol_log(move _100) -> [return: bb35, unwind: bb104];
    }

    bb35: {
        StorageDead(_100);
        StorageDead(_101);
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        _103 = LendingError::CannotSocializeObligationWithCollateral;
        _102 = <LendingError as Into<anchor_lang::error::Error>>::into(move _103) -> [return: bb36, unwind: bb104];
    }

    bb36: {
        StorageDead(_103);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Err(move _102);
        StorageDead(_102);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb98;
    }

    bb37: {
        switchInt(move _105) -> [0: bb44, otherwise: bb38];
    }

    bb38: {
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &(*_3);
        _107 = obligation::Obligation::active_borrows_empty(move _108) -> [return: bb39, unwind: bb104];
    }

    bb39: {
        switchInt(move _107) -> [0: bb43, otherwise: bb40];
    }

    bb40: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = const "Obligation has no deposits or borrows";
        _111 = &(*_112);
        _110 = solana_program::log::sol_log(move _111) -> [return: bb41, unwind: bb104];
    }

    bb41: {
        StorageDead(_111);
        StorageDead(_112);
        StorageDead(_110);
        StorageLive(_113);
        StorageLive(_114);
        _114 = LendingError::ObligationEmpty;
        _113 = <LendingError as Into<anchor_lang::error::Error>>::into(move _114) -> [return: bb42, unwind: bb104];
    }

    bb42: {
        StorageDead(_114);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Err(move _113);
        StorageDead(_113);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb98;
    }

    bb43: {
        StorageDead(_108);
        goto -> bb45;
    }

    bb44: {
        StorageDead(_106);
        goto -> bb45;
    }

    bb45: {
        _104 = const ();
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_3);
        StorageLive(_121);
        _121 = (*_2);
        _119 = obligation::Obligation::find_liquidity_in_borrows(move _120, move _121) -> [return: bb46, unwind: bb104];
    }

    bb46: {
        StorageDead(_121);
        StorageDead(_120);
        _118 = <std::result::Result<(&obligation::ObligationLiquidity, usize), anchor_lang::error::Error> as Try>::branch(move _119) -> [return: bb47, unwind: bb104];
    }

    bb47: {
        StorageDead(_119);
        _122 = discriminant(_118);
        switchInt(move _122) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_126);
        _126 = ((_118 as Continue).0: (&state::obligation::ObligationLiquidity, usize));
        _117 = _126;
        StorageDead(_126);
        StorageLive(_115);
        _115 = (_117.0: &state::obligation::ObligationLiquidity);
        StorageLive(_116);
        _116 = (_117.1: usize);
        _211 = discriminant(_118);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _4;
        _127 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _128) -> [return: bb51, unwind: bb104];
    }

    bb49: {
        StorageLive(_123);
        _123 = move ((_118 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_125);
        _125 = move _123;
        _0 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _125) -> [return: bb50, unwind: bb100];
    }

    bb50: {
        StorageDead(_125);
        StorageDead(_123);
        _217 = discriminant(_118);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb98;
    }

    bb51: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_115);
        _129 = obligation::ObligationLiquidity::borrowed_amount(move _130) -> [return: bb52, unwind: bb104];
    }

    bb52: {
        StorageDead(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _127;
        StorageLive(_133);
        _133 = _129;
        _131 = std::cmp::min::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _132, move _133) -> [return: bb53, unwind: bb104];
    }

    bb53: {
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_131;
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &((*_1).5: state::reserve::ReserveLiquidity);
        _138 = ReserveLiquidity::total_supply(move _139) -> [return: bb54, unwind: bb104];
    }

    bb54: {
        _137 = &_138;
        StorageDead(_139);
        _135 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _136, move _137) -> [return: bb55, unwind: bb104];
    }

    bb55: {
        switchInt(move _135) -> [0: bb58, otherwise: bb56];
    }

    bb56: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = const "Reserve becomes deprecated";
        _141 = &(*_142);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb57, unwind: bb104];
    }

    bb57: {
        StorageDead(_141);
        StorageDead(_142);
        StorageDead(_140);
        ((*_1).0: u64) = const _;
        _134 = const ();
        goto -> bb59;
    }

    bb58: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        _134 = const ();
        goto -> bb59;
    }

    bb59: {
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _201 = const _;
        _153 = &(*_201);
        _152 = &(*_153);
        _151 = move _152 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_152);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_131;
        _160 = &(*_161);
        _159 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _160) -> [return: bb60, unwind: bb104];
    }

    bb60: {
        StorageDead(_160);
        _158 = [move _159];
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = move _156 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_156);
        _150 = Arguments::<'_>::new_v1(move _151, move _155) -> [return: bb61, unwind: bb104];
    }

    bb61: {
        StorageDead(_155);
        StorageDead(_151);
        _149 = format(move _150) -> [return: bb62, unwind: bb104];
    }

    bb62: {
        StorageDead(_150);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        _148 = move _149;
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = <std::string::String as Deref>::deref(move _146) -> [return: bb63, unwind: bb89];
    }

    bb63: {
        _144 = &(*_145);
        StorageDead(_146);
        _143 = solana_program::log::sol_log(move _144) -> [return: bb64, unwind: bb89];
    }

    bb64: {
        StorageDead(_144);
        drop(_148) -> [return: bb65, unwind: bb104];
    }

    bb65: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &_131;
        _165 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_ceil::<u64>(move _166) -> [return: bb66, unwind: bb104];
    }

    bb66: {
        StorageDead(_166);
        StorageLive(_167);
        _167 = &mut (*_3);
        StorageLive(_168);
        _168 = _116;
        StorageLive(_169);
        _169 = &mut (*_1);
        StorageLive(_170);
        _202 = const false;
        _170 = move _6;
        _164 = update_elevation_group_debt_trackers_on_repay::<'_, T, impl Iterator<Item = T>>(move _165, move _167, move _168, move _169, move _170) -> [return: bb67, unwind: bb104];
    }

    bb67: {
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_165);
        _163 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _164) -> [return: bb68, unwind: bb104];
    }

    bb68: {
        StorageDead(_164);
        _171 = discriminant(_163);
        switchInt(move _171) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_175);
        _175 = ((_163 as Continue).0: ());
        _162 = _175;
        StorageDead(_175);
        _213 = discriminant(_163);
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &mut ((*_1).5: state::reserve::ReserveLiquidity);
        StorageLive(_178);
        _178 = _131;
        _176 = ReserveLiquidity::forgive_debt(move _177, move _178) -> [return: bb72, unwind: bb104];
    }

    bb70: {
        StorageLive(_172);
        _172 = move ((_163 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_174);
        _174 = move _172;
        _0 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _174) -> [return: bb71, unwind: bb99];
    }

    bb71: {
        StorageDead(_174);
        StorageDead(_172);
        _215 = discriminant(_163);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb98;
    }

    bb72: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &mut ((*_1).1: state::last_update::LastUpdate);
        _179 = last_update::LastUpdate::mark_stale(move _180) -> [return: bb73, unwind: bb104];
    }

    bb73: {
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &mut (*_3);
        StorageLive(_183);
        _183 = _131;
        StorageLive(_184);
        _184 = _116;
        _181 = obligation::Obligation::repay(move _182, move _183, move _184) -> [return: bb74, unwind: bb104];
    }

    bb74: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &mut (*_3);
        _185 = obligation::Obligation::update_has_debt(move _186) -> [return: bb75, unwind: bb104];
    }

    bb75: {
        StorageDead(_186);
        StorageDead(_185);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &(*_3);
        _188 = obligation::Obligation::has_debt(move _189) -> [return: bb76, unwind: bb104];
    }

    bb76: {
        switchInt(move _188) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        StorageDead(_189);
        _187 = const ();
        goto -> bb84;
    }

    bb78: {
        StorageDead(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &mut (*_3);
        _190 = remove_all_orders(move _191) -> [return: bb79, unwind: bb104];
    }

    bb79: {
        StorageDead(_191);
        StorageLive(_192);
        _192 = _190;
        switchInt(move _192) -> [0: bb82, otherwise: bb80];
    }

    bb80: {
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = const "Socializing loss has left the obligation with no debt; removing all its orders";
        _194 = &(*_195);
        _193 = solana_program::log::sol_log(move _194) -> [return: bb81, unwind: bb104];
    }

    bb81: {
        StorageDead(_194);
        StorageDead(_195);
        StorageDead(_193);
        _187 = const ();
        goto -> bb83;
    }

    bb82: {
        _187 = const ();
        goto -> bb83;
    }

    bb83: {
        StorageDead(_192);
        StorageDead(_190);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &mut ((*_3).1: state::last_update::LastUpdate);
        _196 = last_update::LastUpdate::mark_stale(move _197) -> [return: bb85, unwind: bb104];
    }

    bb85: {
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_198);
        _198 = _131;
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Ok(move _198);
        StorageDead(_198);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb88;
    }

    bb86: {
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb98;
    }

    bb87: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb98;
    }

    bb88: {
        return;
    }

    bb89 (cleanup): {
        drop(_148) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_68) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_24) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        resume;
    }

    bb93: {
        _203 = discriminant(_9);
        StorageDead(_9);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _199 = const _;
        _29 = &(*_199);
        _28 = &(*_29);
        _27 = move _28 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_1).1: state::last_update::LastUpdate);
        _38 = last_update::LastUpdate::get_price_status(move _39) -> [return: bb7, unwind: bb104];
    }

    bb94: {
        _205 = discriminant(_9);
        StorageDead(_9);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &((*_3).1: state::last_update::LastUpdate);
        StorageLive(_56);
        _56 = _5;
        _54 = last_update::LastUpdate::is_stale(move _55, move _56, const _) -> [return: bb17, unwind: bb104];
    }

    bb95: {
        _207 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _200 = const _;
        _73 = &(*_200);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &((*_3).1: state::last_update::LastUpdate);
        _82 = last_update::LastUpdate::get_price_status(move _83) -> [return: bb22, unwind: bb104];
    }

    bb96: {
        _209 = discriminant(_53);
        StorageDead(_53);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(*_3);
        _96 = obligation::Obligation::active_deposits_empty(move _97) -> [return: bb32, unwind: bb104];
    }

    bb97: {
        drop(_6) -> [return: bb88, unwind: bb92];
    }

    bb98: {
        switchInt(_202) -> [0: bb88, otherwise: bb97];
    }

    bb99 (cleanup): {
        _223 = discriminant(_163);
        goto -> bb104;
    }

    bb100 (cleanup): {
        _224 = discriminant(_118);
        goto -> bb104;
    }

    bb101 (cleanup): {
        _225 = discriminant(_53);
        goto -> bb104;
    }

    bb102 (cleanup): {
        _226 = discriminant(_9);
        goto -> bb104;
    }

    bb103 (cleanup): {
        drop(_6) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_202) -> [0: bb92, otherwise: bb103];
    }
}
