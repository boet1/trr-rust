// MIR for `post_repay_and_withdraw_obligation_enforcements` after PreCodegen

fn post_repay_and_withdraw_obligation_enforcements(_1: &obligation::Obligation, _2: &reserve::Reserve, _3: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug obligation => _1;
    debug withdraw_reserve => _2;
    debug initial_ltv_before_repay => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _5: u128;
    let mut _7: u128;
    let _8: ();
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: bool;
    let mut _12: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: &i32;
    let _14: i32;
    let mut _15: !;
    let mut _16: anchor_lang::error::Error;
    let mut _17: anchor_lang::error::AnchorError;
    let mut _18: std::string::String;
    let mut _19: &LendingError;
    let _20: LendingError;
    let mut _21: u32;
    let mut _22: LendingError;
    let mut _23: std::string::String;
    let mut _24: &LendingError;
    let _25: LendingError;
    let mut _26: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _27: anchor_lang::error::ErrorOrigin;
    let mut _28: anchor_lang::error::Source;
    let mut _29: std::option::Option<anchor_lang::error::ComparedValues>;
    let _30: ();
    let mut _31: bool;
    let mut _32: u8;
    let mut _33: u8;
    let mut _34: bool;
    let mut _35: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _36: &i32;
    let _37: i32;
    let mut _38: !;
    let mut _39: anchor_lang::error::Error;
    let mut _40: anchor_lang::error::AnchorError;
    let mut _41: std::string::String;
    let mut _42: &LendingError;
    let _43: LendingError;
    let mut _44: u32;
    let mut _45: LendingError;
    let mut _46: std::string::String;
    let mut _47: &LendingError;
    let _48: LendingError;
    let mut _49: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _50: anchor_lang::error::ErrorOrigin;
    let mut _51: anchor_lang::error::Source;
    let mut _52: std::option::Option<anchor_lang::error::ComparedValues>;
    let _53: ();
    let mut _54: bool;
    let mut _55: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _56: &i32;
    let _57: i32;
    let mut _59: &state::obligation::Obligation;
    let mut _61: &state::obligation::Obligation;
    let _62: ();
    let mut _63: bool;
    let mut _64: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _65: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _66: !;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 2];
    let _81: &[core::fmt::rt::Argument<'_>; 2];
    let _82: [core::fmt::rt::Argument<'_>; 2];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &utils::fraction::FractionDisplay<'_>;
    let _85: &utils::fraction::FractionDisplay<'_>;
    let _86: utils::fraction::FractionDisplay<'_>;
    let mut _87: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &utils::fraction::FractionDisplay<'_>;
    let _90: &utils::fraction::FractionDisplay<'_>;
    let _91: utils::fraction::FractionDisplay<'_>;
    let mut _92: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _93: anchor_lang::error::Error;
    let mut _94: anchor_lang::error::AnchorError;
    let mut _95: std::string::String;
    let mut _96: &LendingError;
    let _97: LendingError;
    let mut _98: u32;
    let mut _99: LendingError;
    let mut _100: std::string::String;
    let mut _101: &LendingError;
    let _102: LendingError;
    let mut _103: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _104: anchor_lang::error::ErrorOrigin;
    let mut _105: anchor_lang::error::Source;
    let mut _106: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _107: bool;
    let mut _108: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _109: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _110: !;
    let _111: ();
    let mut _112: &str;
    let _113: &str;
    let mut _114: &std::string::String;
    let _115: &std::string::String;
    let _116: std::string::String;
    let mut _118: std::fmt::Arguments<'_>;
    let mut _119: &[&str];
    let mut _120: &[&str; 2];
    let _121: &[&str; 2];
    let _122: [&str; 2];
    let mut _123: &[core::fmt::rt::Argument<'_>];
    let mut _124: &[core::fmt::rt::Argument<'_>; 2];
    let _125: &[core::fmt::rt::Argument<'_>; 2];
    let _126: [core::fmt::rt::Argument<'_>; 2];
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &utils::fraction::FractionDisplay<'_>;
    let _129: &utils::fraction::FractionDisplay<'_>;
    let _130: utils::fraction::FractionDisplay<'_>;
    let mut _131: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _132: core::fmt::rt::Argument<'_>;
    let mut _133: &utils::fraction::FractionDisplay<'_>;
    let _134: &utils::fraction::FractionDisplay<'_>;
    let _135: utils::fraction::FractionDisplay<'_>;
    let mut _136: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _137: anchor_lang::error::Error;
    let mut _138: anchor_lang::error::AnchorError;
    let mut _139: std::string::String;
    let mut _140: &LendingError;
    let _141: LendingError;
    let mut _142: u32;
    let mut _143: LendingError;
    let mut _144: std::string::String;
    let mut _145: &LendingError;
    let _146: LendingError;
    let mut _147: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _148: anchor_lang::error::ErrorOrigin;
    let mut _149: anchor_lang::error::Source;
    let mut _150: std::option::Option<anchor_lang::error::ComparedValues>;
    let _151: ();
    let mut _152: bool;
    let mut _153: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _154: &i32;
    let _155: i32;
    let mut _156: bool;
    let mut _157: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _158: &i32;
    let _159: i32;
    let mut _160: !;
    let _161: ();
    let mut _162: &str;
    let _163: &str;
    let mut _164: &std::string::String;
    let _165: &std::string::String;
    let _166: std::string::String;
    let mut _168: std::fmt::Arguments<'_>;
    let mut _169: &[&str];
    let mut _170: &[&str; 2];
    let _171: &[&str; 2];
    let _172: [&str; 2];
    let mut _173: &[core::fmt::rt::Argument<'_>];
    let mut _174: &[core::fmt::rt::Argument<'_>; 2];
    let _175: &[core::fmt::rt::Argument<'_>; 2];
    let _176: [core::fmt::rt::Argument<'_>; 2];
    let mut _177: core::fmt::rt::Argument<'_>;
    let mut _178: &utils::fraction::FractionDisplay<'_>;
    let _179: &utils::fraction::FractionDisplay<'_>;
    let _180: utils::fraction::FractionDisplay<'_>;
    let mut _181: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _182: core::fmt::rt::Argument<'_>;
    let mut _183: &utils::fraction::FractionDisplay<'_>;
    let _184: &utils::fraction::FractionDisplay<'_>;
    let _185: utils::fraction::FractionDisplay<'_>;
    let mut _186: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _187: anchor_lang::error::Error;
    let mut _188: anchor_lang::error::AnchorError;
    let mut _189: std::string::String;
    let mut _190: &LendingError;
    let _191: LendingError;
    let mut _192: u32;
    let mut _193: LendingError;
    let mut _194: std::string::String;
    let mut _195: &LendingError;
    let _196: LendingError;
    let mut _197: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _198: anchor_lang::error::ErrorOrigin;
    let mut _199: anchor_lang::error::Source;
    let mut _200: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _201: ();
    scope 1 {
        debug debt_value => _4;
        let _6: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug new_total_deposited_mv => _6;
            let _58: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            let _167: std::string::String;
            let mut _202: &LendingError;
            let mut _203: &LendingError;
            let mut _204: &LendingError;
            let mut _205: &LendingError;
            let mut _212: &LendingError;
            let mut _213: &LendingError;
            let mut _214: &[&str; 2];
            let mut _215: &i32;
            let mut _216: &i32;
            let mut _217: &i32;
            let mut _218: &i32;
            let mut _219: &i32;
            scope 3 {
                debug new_unhealthy_ltv => _58;
                let _60: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug new_ltv => _60;
                    let _73: std::string::String;
                    let _117: std::string::String;
                    let mut _206: &LendingError;
                    let mut _207: &LendingError;
                    let mut _208: &[&str; 2];
                    let mut _209: &LendingError;
                    let mut _210: &LendingError;
                    let mut _211: &[&str; 2];
                    scope 5 {
                        debug res => _73;
                    }
                    scope 6 {
                        debug res => _117;
                    }
                }
            }
            scope 7 {
                debug res => _167;
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).8: u128);
        _4 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).6: u128);
        _6 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).20: u8);
        _9 = Eq(move _10, const 0_u8);
        switchInt(move _9) -> [0: bb11, otherwise: bb3];
    }

    bb3: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_4;
        StorageLive(_13);
        _219 = const _;
        _13 = &(*_219);
        _11 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _12, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _11) -> [0: bb10, otherwise: bb5];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _203 = const _;
        _19 = &(*_203);
        _18 = LendingError::name(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = LendingError::ZeroMaxLtvAssetsInDeposits;
        _21 = <LendingError as Into<u32>>::into(move _22) -> [return: bb7, unwind: bb91];
    }

    bb7: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _202 = const _;
        _24 = &(*_202);
        _23 = <LendingError as ToString>::to_string(move _24) -> [return: bb8, unwind: bb91];
    }

    bb8: {
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2889_u32 };
        _27 = anchor_lang::error::ErrorOrigin::Source(move _28);
        StorageDead(_28);
        _26 = std::option::Option::<ErrorOrigin>::Some(move _27);
        StorageDead(_27);
        StorageLive(_29);
        _29 = std::option::Option::<ComparedValues>::None;
        _17 = anchor_lang::error::AnchorError { error_name: move _18, error_code_number: move _21, error_msg: move _23, error_origin: move _26, compared_values: move _29 };
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_18);
        _16 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _17) -> [return: bb9, unwind: bb92];
    }

    bb9: {
        StorageDead(_17);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _16);
        StorageDead(_16);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb82;
    }

    bb10: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_10);
        goto -> bb12;
    }

    bb12: {
        _8 = const ();
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_1).20: u8);
        StorageLive(_33);
        _33 = (((*_2).9: state::reserve::ReserveConfig).7: u8);
        _31 = Lt(move _32, move _33);
        switchInt(move _31) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_4;
        StorageLive(_36);
        _218 = const _;
        _36 = &(*_218);
        _34 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _35, move _36) -> [return: bb15, unwind continue];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb22;
    }

    bb15: {
        switchInt(move _34) -> [0: bb21, otherwise: bb16];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _205 = const _;
        _42 = &(*_205);
        _41 = LendingError::name(move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        _45 = LendingError::LowestLtvAssetsPriority;
        _44 = <LendingError as Into<u32>>::into(move _45) -> [return: bb18, unwind: bb90];
    }

    bb18: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _204 = const _;
        _47 = &(*_204);
        _46 = <LendingError as ToString>::to_string(move _47) -> [return: bb19, unwind: bb90];
    }

    bb19: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2896_u32 };
        _50 = anchor_lang::error::ErrorOrigin::Source(move _51);
        StorageDead(_51);
        _49 = std::option::Option::<ErrorOrigin>::Some(move _50);
        StorageDead(_50);
        StorageLive(_52);
        _52 = std::option::Option::<ComparedValues>::None;
        _40 = anchor_lang::error::AnchorError { error_name: move _41, error_code_number: move _44, error_msg: move _46, error_origin: move _49, compared_values: move _52 };
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_41);
        _39 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _40) -> [return: bb20, unwind: bb92];
    }

    bb20: {
        StorageDead(_40);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _39);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb82;
    }

    bb21: {
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb22;
    }

    bb22: {
        _30 = const ();
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_6;
        StorageLive(_56);
        _217 = const _;
        _56 = &(*_217);
        _54 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::ne(move _55, move _56) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _54) -> [0: bb59, otherwise: bb24];
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &(*_1);
        _58 = obligation::Obligation::unhealthy_loan_to_value(move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_1);
        _60 = obligation::Obligation::loan_to_value(move _61) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_60;
        StorageLive(_65);
        _65 = &_3;
        _63 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _64, move _65) -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _63) -> [0: bb42, otherwise: bb28];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _208 = const _;
        _77 = &(*_208);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_60;
        _86 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _87) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _84) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_84);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_3;
        _91 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _92) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _89) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_89);
        _82 = [move _83, move _88];
        StorageDead(_88);
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_74);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <std::string::String as Deref>::deref(move _70) -> [return: bb35, unwind: bb89];
    }

    bb35: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb36, unwind: bb89];
    }

    bb36: {
        StorageDead(_68);
        drop(_72) -> [return: bb37, unwind: bb92];
    }

    bb37: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _207 = const _;
        _96 = &(*_207);
        _95 = LendingError::name(move _96) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_96);
        StorageLive(_98);
        StorageLive(_99);
        _99 = LendingError::WorseLtvBlocked;
        _98 = <LendingError as Into<u32>>::into(move _99) -> [return: bb39, unwind: bb88];
    }

    bb39: {
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        _206 = const _;
        _101 = &(*_206);
        _100 = <LendingError as ToString>::to_string(move _101) -> [return: bb40, unwind: bb88];
    }

    bb40: {
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2907_u32 };
        _104 = anchor_lang::error::ErrorOrigin::Source(move _105);
        StorageDead(_105);
        _103 = std::option::Option::<ErrorOrigin>::Some(move _104);
        StorageDead(_104);
        StorageLive(_106);
        _106 = std::option::Option::<ComparedValues>::None;
        _94 = anchor_lang::error::AnchorError { error_name: move _95, error_code_number: move _98, error_msg: move _100, error_origin: move _103, compared_values: move _106 };
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_95);
        _93 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _94) -> [return: bb41, unwind: bb92];
    }

    bb41: {
        StorageDead(_94);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _93);
        StorageDead(_93);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb81;
    }

    bb42: {
        StorageDead(_65);
        StorageDead(_64);
        _62 = const ();
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_60;
        StorageLive(_109);
        _109 = &_58;
        _107 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _108, move _109) -> [return: bb43, unwind continue];
    }

    bb43: {
        switchInt(move _107) -> [0: bb58, otherwise: bb44];
    }

    bb44: {
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _211 = const _;
        _121 = &(*_211);
        _120 = &(*_121);
        _119 = move _120 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_60;
        _130 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _131) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _128) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_128);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_58;
        _135 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _136) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _133) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_133);
        _126 = [move _127, move _132];
        StorageDead(_132);
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = move _124 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_124);
        _118 = Arguments::<'_>::new_v1(move _119, move _123) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_119);
        _117 = format(move _118) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_118);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        _116 = move _117;
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = <std::string::String as Deref>::deref(move _114) -> [return: bb51, unwind: bb87];
    }

    bb51: {
        _112 = &(*_113);
        StorageDead(_114);
        _111 = solana_program::log::sol_log(move _112) -> [return: bb52, unwind: bb87];
    }

    bb52: {
        StorageDead(_112);
        drop(_116) -> [return: bb53, unwind: bb92];
    }

    bb53: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _210 = const _;
        _140 = &(*_210);
        _139 = LendingError::name(move _140) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_140);
        StorageLive(_142);
        StorageLive(_143);
        _143 = LendingError::WorseLtvThanUnhealthyLtv;
        _142 = <LendingError as Into<u32>>::into(move _143) -> [return: bb55, unwind: bb86];
    }

    bb55: {
        StorageDead(_143);
        StorageLive(_144);
        StorageLive(_145);
        _209 = const _;
        _145 = &(*_209);
        _144 = <LendingError as ToString>::to_string(move _145) -> [return: bb56, unwind: bb86];
    }

    bb56: {
        StorageDead(_145);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2916_u32 };
        _148 = anchor_lang::error::ErrorOrigin::Source(move _149);
        StorageDead(_149);
        _147 = std::option::Option::<ErrorOrigin>::Some(move _148);
        StorageDead(_148);
        StorageLive(_150);
        _150 = std::option::Option::<ComparedValues>::None;
        _138 = anchor_lang::error::AnchorError { error_name: move _139, error_code_number: move _142, error_msg: move _144, error_origin: move _147, compared_values: move _150 };
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_139);
        _137 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _138) -> [return: bb57, unwind: bb92];
    }

    bb57: {
        StorageDead(_138);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _137);
        StorageDead(_137);
        StorageDead(_107);
        goto -> bb81;
    }

    bb58: {
        StorageDead(_109);
        StorageDead(_108);
        _53 = const ();
        StorageDead(_107);
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = const ();
        goto -> bb60;
    }

    bb60: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_6;
        StorageLive(_154);
        _216 = const _;
        _154 = &(*_216);
        _152 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq<i32>>::eq(move _153, move _154) -> [return: bb61, unwind continue];
    }

    bb61: {
        switchInt(move _152) -> [0: bb79, otherwise: bb62];
    }

    bb62: {
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_4;
        StorageLive(_158);
        _215 = const _;
        _158 = &(*_215);
        _156 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _157, move _158) -> [return: bb63, unwind continue];
    }

    bb63: {
        switchInt(move _156) -> [0: bb78, otherwise: bb64];
    }

    bb64: {
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _214 = const _;
        _171 = &(*_214);
        _170 = &(*_171);
        _169 = move _170 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_170);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &_4;
        _180 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _181) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _178) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_178);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_6;
        _185 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _186) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_186);
        _184 = &_185;
        _183 = &(*_184);
        _182 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _183) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_183);
        _176 = [move _177, move _182];
        StorageDead(_182);
        StorageDead(_177);
        _175 = &_176;
        _174 = &(*_175);
        _173 = move _174 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_174);
        _168 = Arguments::<'_>::new_v1(move _169, move _173) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_173);
        StorageDead(_169);
        _167 = format(move _168) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_168);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_171);
        _166 = move _167;
        StorageDead(_167);
        _165 = &_166;
        _164 = &(*_165);
        _163 = <std::string::String as Deref>::deref(move _164) -> [return: bb71, unwind: bb85];
    }

    bb71: {
        _162 = &(*_163);
        StorageDead(_164);
        _161 = solana_program::log::sol_log(move _162) -> [return: bb72, unwind: bb85];
    }

    bb72: {
        StorageDead(_162);
        drop(_166) -> [return: bb73, unwind: bb92];
    }

    bb73: {
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_161);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _213 = const _;
        _190 = &(*_213);
        _189 = LendingError::name(move _190) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_190);
        StorageLive(_192);
        StorageLive(_193);
        _193 = LendingError::LiabilitiesBiggerThanAssets;
        _192 = <LendingError as Into<u32>>::into(move _193) -> [return: bb75, unwind: bb84];
    }

    bb75: {
        StorageDead(_193);
        StorageLive(_194);
        StorageLive(_195);
        _212 = const _;
        _195 = &(*_212);
        _194 = <LendingError as ToString>::to_string(move _195) -> [return: bb76, unwind: bb84];
    }

    bb76: {
        StorageDead(_195);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2926_u32 };
        _198 = anchor_lang::error::ErrorOrigin::Source(move _199);
        StorageDead(_199);
        _197 = std::option::Option::<ErrorOrigin>::Some(move _198);
        StorageDead(_198);
        StorageLive(_200);
        _200 = std::option::Option::<ComparedValues>::None;
        _188 = anchor_lang::error::AnchorError { error_name: move _189, error_code_number: move _192, error_msg: move _194, error_origin: move _197, compared_values: move _200 };
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_189);
        _187 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _188) -> [return: bb77, unwind: bb92];
    }

    bb77: {
        StorageDead(_188);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _187);
        StorageDead(_187);
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb82;
    }

    bb78: {
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb80;
    }

    bb80: {
        _151 = const ();
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_201);
        _201 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _201);
        StorageDead(_201);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb83;
    }

    bb81: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb83;
    }

    bb83: {
        return;
    }

    bb84 (cleanup): {
        drop(_189) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_166) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_139) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_116) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_95) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_72) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_41) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_18) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        resume;
    }
}
