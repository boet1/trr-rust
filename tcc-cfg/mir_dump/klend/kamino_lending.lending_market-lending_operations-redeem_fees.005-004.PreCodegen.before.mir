// MIR for `lending_operations::redeem_fees` before PreCodegen

fn lending_operations::redeem_fees(_1: &mut reserve::Reserve, _2: u64) -> std::result::Result<u64, anchor_lang::error::Error> {
    debug reserve => _1;
    debug slot => _2;
    let mut _0: std::result::Result<u64, anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _6: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _7: &state::last_update::LastUpdate;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: bool;
    let mut _14: !;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &std::string::String;
    let _20: std::string::String;
    let _21: std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 1];
    let _25: &[&str; 1];
    let _26: [&str; 1];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let mut _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &u8;
    let _33: &u8;
    let _34: state::last_update::PriceStatusFlags;
    let mut _35: &state::last_update::LastUpdate;
    let mut _36: &[core::fmt::rt::Placeholder];
    let mut _37: &[core::fmt::rt::Placeholder; 1];
    let _38: &[core::fmt::rt::Placeholder; 1];
    let _39: [core::fmt::rt::Placeholder; 1];
    let mut _40: core::fmt::rt::Placeholder;
    let mut _41: core::fmt::rt::Alignment;
    let mut _42: core::fmt::rt::Count;
    let mut _43: core::fmt::rt::Count;
    let mut _44: core::fmt::rt::UnsafeArg;
    let mut _45: anchor_lang::error::Error;
    let mut _46: anchor_lang::error::AnchorError;
    let mut _47: std::string::String;
    let mut _48: &LendingError;
    let _49: LendingError;
    let mut _50: u32;
    let mut _51: LendingError;
    let mut _52: std::string::String;
    let mut _53: &LendingError;
    let _54: LendingError;
    let mut _55: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _56: anchor_lang::error::ErrorOrigin;
    let mut _57: anchor_lang::error::Source;
    let mut _58: std::option::Option<anchor_lang::error::ComparedValues>;
    let _59: u64;
    let mut _60: &state::reserve::Reserve;
    let _61: ();
    let mut _62: bool;
    let mut _63: u64;
    let mut _64: !;
    let mut _65: anchor_lang::error::Error;
    let mut _66: anchor_lang::error::AnchorError;
    let mut _67: std::string::String;
    let mut _68: &LendingError;
    let _69: LendingError;
    let mut _70: u32;
    let mut _71: LendingError;
    let mut _72: std::string::String;
    let mut _73: &LendingError;
    let _74: LendingError;
    let mut _75: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _76: anchor_lang::error::ErrorOrigin;
    let mut _77: anchor_lang::error::Source;
    let mut _78: std::option::Option<anchor_lang::error::ComparedValues>;
    let _79: ();
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _81: std::result::Result<(), anchor_lang::error::Error>;
    let mut _82: &mut state::reserve::ReserveLiquidity;
    let mut _83: u64;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _89: ();
    let mut _90: &mut state::last_update::LastUpdate;
    let mut _91: u64;
    let mut _92: &LendingError;
    let mut _93: &LendingError;
    let mut _94: &[&str; 1];
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug res => _21;
    }
    scope 6 {
    }
    scope 7 {
        debug withdraw_amount => _59;
        let _85: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _88: ();
        let mut _95: &LendingError;
        let mut _96: &LendingError;
        scope 8 {
            debug residual => _85;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _88;
            scope 11 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_8);
        _8 = _2;
        _6 = last_update::LastUpdate::is_stale(move _7, move _8, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: bool);
        _4 = _13;
        StorageDead(_13);
        switchInt(move _4) -> [0: bb41, otherwise: bb40];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _105 = discriminant(_5);
        StorageDead(_5);
        goto -> bb34;
    }

    bb7: {
        StorageDead(_35);
        _33 = &(_34.0: u8);
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _32) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_32);
        _30 = [move _31];
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = move _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_42);
        _42 = core::fmt::rt::Count::Implied;
        StorageLive(_43);
        _43 = core::fmt::rt::Count::Is(const 8_usize);
        _40 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _41, const 8_u32, move _42, move _43) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_44);
        _44 = core::fmt::rt::UnsafeArg::new() -> [return: bb10, unwind continue];
    }

    bb10: {
        _22 = Arguments::<'_>::new_v1_formatted(move _23, move _27, move _36, move _44) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_44);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_23);
        _21 = format(move _22) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        _20 = move _21;
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = <std::string::String as Deref>::deref(move _18) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        StorageDead(_16);
        drop(_20) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _93 = const _;
        _48 = &(*_93);
        _47 = LendingError::name(move _48) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        _51 = LendingError::ReserveStale;
        _50 = <LendingError as Into<u32>>::into(move _51) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _92 = const _;
        _53 = &(*_92);
        _52 = <LendingError as ToString>::to_string(move _53) -> [return: bb18, unwind: bb37];
    }

    bb18: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 662_u32 };
        _56 = anchor_lang::error::ErrorOrigin::Source(move _57);
        StorageDead(_57);
        _55 = std::option::Option::<ErrorOrigin>::Some(move _56);
        StorageDead(_56);
        StorageLive(_58);
        _58 = std::option::Option::<ComparedValues>::None;
        _46 = anchor_lang::error::AnchorError { error_name: move _47, error_code_number: move _50, error_msg: move _52, error_origin: move _55, compared_values: move _58 };
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_47);
        _45 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _46) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        StorageDead(_46);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _45);
        StorageDead(_45);
        goto -> bb34;
    }

    bb20: {
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _59;
        _62 = Eq(move _63, const 0_u64);
        switchInt(move _62) -> [0: bb26, otherwise: bb21];
    }

    bb21: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _96 = const _;
        _68 = &(*_96);
        _67 = LendingError::name(move _68) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        _71 = LendingError::InsufficientProtocolFeesToRedeem;
        _70 = <LendingError as Into<u32>>::into(move _71) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        _95 = const _;
        _73 = &(*_95);
        _72 = <LendingError as ToString>::to_string(move _73) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 668_u32 };
        _76 = anchor_lang::error::ErrorOrigin::Source(move _77);
        StorageDead(_77);
        _75 = std::option::Option::<ErrorOrigin>::Some(move _76);
        StorageDead(_76);
        StorageLive(_78);
        _78 = std::option::Option::<ComparedValues>::None;
        _66 = anchor_lang::error::AnchorError { error_name: move _67, error_code_number: move _70, error_msg: move _72, error_origin: move _75, compared_values: move _78 };
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_67);
        _65 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _66) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        StorageDead(_66);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _65);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb33;
    }

    bb26: {
        StorageDead(_63);
        _61 = const ();
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut ((*_1).5: state::reserve::ReserveLiquidity);
        StorageLive(_83);
        _83 = _59;
        _81 = ReserveLiquidity::redeem_fees(move _82, move _83) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_83);
        StorageDead(_82);
        _80 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _81) -> [return: bb28, unwind: bb39];
    }

    bb28: {
        StorageDead(_81);
        _84 = discriminant(_80);
        switchInt(move _84) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_88);
        _88 = ((_80 as Continue).0: ());
        _79 = _88;
        StorageDead(_88);
        _101 = discriminant(_80);
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &mut ((*_1).1: state::last_update::LastUpdate);
        _89 = last_update::LastUpdate::mark_stale(move _90) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_85);
        _85 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <std::result::Result<u64, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _87) -> [return: bb31, unwind: bb42];
    }

    bb31: {
        StorageDead(_87);
        StorageDead(_85);
        _103 = discriminant(_80);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_91);
        _91 = _59;
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Ok(move _91);
        StorageDead(_91);
        StorageDead(_59);
        goto -> bb35;
    }

    bb33: {
        StorageDead(_59);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_67) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_47) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_20) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }

    bb40: {
        _97 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _94 = const _;
        _25 = &(*_94);
        _24 = &(*_25);
        _23 = move _24 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_1).1: state::last_update::LastUpdate);
        _34 = last_update::LastUpdate::get_price_status(move _35) -> [return: bb7, unwind continue];
    }

    bb41: {
        _99 = discriminant(_5);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_1);
        _59 = reserve::Reserve::calculate_redeem_fees(move _60) -> [return: bb20, unwind continue];
    }

    bb42 (cleanup): {
        _107 = discriminant(_80);
        goto -> bb39;
    }

    bb43 (cleanup): {
        _108 = discriminant(_5);
        goto -> bb39;
    }
}
