// MIR for `handlers::handler_refresh_obligation::process` after PreCodegen

fn handlers::handler_refresh_obligation::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_obligation::RefreshObligation<'_>>, _2: state::types::MaxReservesAsCollateralCheck) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_reserves_as_collateral_check => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _4: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::RefMut<'_, state::obligation::Obligation>;
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _23: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _25: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _33: &state::obligation::Obligation;
    let _34: &state::obligation::Obligation;
    let mut _35: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _37: &state::obligation::Obligation;
    let _38: &state::obligation::Obligation;
    let mut _39: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: (usize, bool);
    let mut _45: bool;
    let mut _46: &state::obligation::Obligation;
    let _47: &state::obligation::Obligation;
    let mut _48: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _49: usize;
    let mut _50: usize;
    let mut _51: (usize, bool);
    let _52: ();
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: usize;
    let mut _57: !;
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: &std::string::String;
    let _62: &std::string::String;
    let _63: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 5];
    let _68: &[&str; 5];
    let _69: [&str; 5];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 5];
    let _72: &[core::fmt::rt::Argument<'_>; 5];
    let _73: [core::fmt::rt::Argument<'_>; 5];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &usize;
    let _76: &usize;
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &usize;
    let _79: &usize;
    let _80: usize;
    let mut _81: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _82: core::fmt::rt::Argument<'_>;
    let mut _83: &bool;
    let _84: &bool;
    let _85: bool;
    let mut _86: &state::obligation::Obligation;
    let _87: &state::obligation::Obligation;
    let mut _88: &std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &usize;
    let _91: &usize;
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &usize;
    let _94: &usize;
    let mut _95: anchor_lang::error::Error;
    let mut _96: anchor_lang::error::AnchorError;
    let mut _97: std::string::String;
    let mut _98: &LendingError;
    let _99: LendingError;
    let mut _100: u32;
    let mut _101: LendingError;
    let mut _102: std::string::String;
    let mut _103: &LendingError;
    let _104: LendingError;
    let mut _105: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _106: anchor_lang::error::ErrorOrigin;
    let mut _107: anchor_lang::error::Source;
    let mut _108: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _110: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _111: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _112: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _113: usize;
    let mut _114: {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:43:14: 43:28};
    let mut _116: std::iter::Take<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _117: std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _118: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _119: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _120: usize;
    let mut _121: usize;
    let mut _122: {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:50:14: 50:28};
    let mut _124: std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _125: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _126: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _127: usize;
    let mut _128: {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:56:18: 56:32};
    let _129: ();
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _131: std::result::Result<(), anchor_lang::error::Error>;
    let mut _132: &anchor_lang::prelude::Pubkey;
    let _133: &anchor_lang::prelude::Pubkey;
    let _134: &anchor_lang::prelude::Pubkey;
    let mut _135: &mut state::obligation::Obligation;
    let mut _136: &mut state::obligation::Obligation;
    let mut _137: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _138: &state::lending_market::LendingMarket;
    let _139: &state::lending_market::LendingMarket;
    let mut _140: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _141: u64;
    let mut _142: state::types::MaxReservesAsCollateralCheck;
    let mut _143: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:43:14: 43:28}>;
    let mut _144: std::iter::Map<std::iter::Take<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:50:14: 50:28}>;
    let mut _145: std::iter::Map<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:56:18: 56:32}>;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _151: ();
    let mut _155: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _156: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>;
    let mut _157: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _158: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _159: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _160: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _161: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    scope 1 {
        debug obligation => _3;
        let _13: &anchor_lang::prelude::Clock;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _21: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _13;
            let _22: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
            let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _31: std::cell::Ref<'_, state::lending_market::LendingMarket>;
            scope 11 {
                debug lending_market => _22;
                let _32: usize;
                scope 16 {
                    debug borrow_count => _32;
                    let _36: usize;
                    scope 17 {
                        debug deposit_count => _36;
                        let _40: usize;
                        scope 18 {
                            debug reserves_count => _40;
                            let _44: usize;
                            scope 19 {
                                debug expected_remaining_accounts => _44;
                                let _64: std::string::String;
                                let _109: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:43:14: 43:28}>;
                                let mut _152: &LendingError;
                                let mut _153: &LendingError;
                                let mut _154: &[&str; 5];
                                scope 20 {
                                    debug res => _64;
                                }
                                scope 21 {
                                    debug deposit_reserves_iter => _109;
                                    let _115: std::iter::Map<std::iter::Take<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:50:14: 50:28}>;
                                    scope 22 {
                                        debug borrow_reserves_iter => _115;
                                        let _123: std::iter::Map<std::iter::Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:56:18: 56:32}>;
                                        scope 23 {
                                            debug referrer_token_states_iter => _123;
                                            let _147: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _150: ();
                                            scope 24 {
                                                debug residual => _147;
                                                scope 25 {
                                                }
                                            }
                                            scope 26 {
                                                debug val => _150;
                                                scope 27 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _28;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _31;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _155 = deref_copy (_1.1: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>);
        _7 = &((*_155).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb76];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _4 = move _12;
        StorageDead(_12);
        _3 = &mut _4;
        _162 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind: bb75];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb80];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _176 = discriminant(_5);
        StorageDead(_5);
        goto -> bb70;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb75];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _13 = &_14;
        _164 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _156 = deref_copy (_1.1: &mut handlers::handler_refresh_obligation::RefreshObligation<'_>);
        _26 = &((*_156).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _25 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _26) -> [return: bb12, unwind: bb75];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb79];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _174 = discriminant(_15);
        StorageDead(_15);
        goto -> bb69;
    }

    bb12: {
        StorageDead(_26);
        _24 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb13, unwind: bb75];
    }

    bb13: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_31);
        _31 = move ((_24 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _23 = move _31;
        StorageDead(_31);
        _22 = &_23;
        _166 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_3);
        _34 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _35) -> [return: bb17, unwind: bb74];
    }

    bb15: {
        StorageLive(_28);
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb16, unwind: bb78];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_28);
        _172 = discriminant(_24);
        StorageDead(_24);
        goto -> bb68;
    }

    bb17: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = obligation::Obligation::active_borrows_count(move _33) -> [return: bb18, unwind: bb74];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_3);
        _38 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _39) -> [return: bb19, unwind: bb74];
    }

    bb19: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = obligation::Obligation::active_deposits_count(move _37) -> [return: bb20, unwind: bb74];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _32;
        StorageLive(_42);
        _42 = _36;
        _43 = CheckedAdd(_41, _42);
        assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _41, move _42) -> [success: bb21, unwind: bb74];
    }

    bb21: {
        _40 = move (_43.0: usize);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_3);
        _47 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _48) -> [return: bb22, unwind: bb74];
    }

    bb22: {
        _46 = &(*_47);
        StorageDead(_48);
        _45 = obligation::Obligation::has_referrer(move _46) -> [return: bb23, unwind: bb74];
    }

    bb23: {
        switchInt(move _45) -> [0: bb26, otherwise: bb24];
    }

    bb24: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_49);
        _49 = _40;
        StorageLive(_50);
        _50 = _32;
        _51 = CheckedAdd(_49, _50);
        assert(!move (_51.1: bool), "attempt to compute `{} + {}`, which would overflow", move _49, move _50) -> [success: bb25, unwind: bb74];
    }

    bb25: {
        _44 = move (_51.0: usize);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_47);
        StorageDead(_46);
        _44 = _40;
        goto -> bb27;
    }

    bb27: {
        StorageDead(_45);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _157 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _55 = &(*_157);
        _54 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _55) -> [return: bb28, unwind: bb74];
    }

    bb28: {
        StorageDead(_55);
        StorageLive(_56);
        _56 = _44;
        _53 = Ne(move _54, move _56);
        switchInt(move _53) -> [0: bb47, otherwise: bb29];
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_54);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _154 = const _;
        _68 = &(*_154);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_44;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _75) -> [return: bb30, unwind: bb74];
    }

    bb30: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _158 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _81 = &(*_158);
        _80 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _81) -> [return: bb31, unwind: bb74];
    }

    bb31: {
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _78) -> [return: bb32, unwind: bb74];
    }

    bb32: {
        StorageDead(_78);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_3);
        _87 = <RefMut<'_, obligation::Obligation> as Deref>::deref(move _88) -> [return: bb33, unwind: bb74];
    }

    bb33: {
        _86 = &(*_87);
        StorageDead(_88);
        _85 = obligation::Obligation::has_referrer(move _86) -> [return: bb34, unwind: bb74];
    }

    bb34: {
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = core::fmt::rt::Argument::<'_>::new_display::<bool>(move _83) -> [return: bb35, unwind: bb74];
    }

    bb35: {
        StorageDead(_83);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_40;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _90) -> [return: bb36, unwind: bb74];
    }

    bb36: {
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_32;
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _93) -> [return: bb37, unwind: bb74];
    }

    bb37: {
        StorageDead(_93);
        _73 = [move _74, move _77, move _82, move _89, move _92];
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_82);
        StorageDead(_77);
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb38, unwind: bb74];
    }

    bb38: {
        StorageDead(_70);
        StorageDead(_66);
        _64 = format(move _65) -> [return: bb39, unwind: bb74];
    }

    bb39: {
        StorageDead(_65);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        _63 = move _64;
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = <std::string::String as Deref>::deref(move _61) -> [return: bb40, unwind: bb73];
    }

    bb40: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb41, unwind: bb73];
    }

    bb41: {
        StorageDead(_59);
        drop(_63) -> [return: bb42, unwind: bb74];
    }

    bb42: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _153 = const _;
        _98 = &(*_153);
        _97 = LendingError::name(move _98) -> [return: bb43, unwind: bb74];
    }

    bb43: {
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        _101 = LendingError::InvalidAccountInput;
        _100 = <LendingError as Into<u32>>::into(move _101) -> [return: bb44, unwind: bb72];
    }

    bb44: {
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        _152 = const _;
        _103 = &(*_152);
        _102 = <LendingError as ToString>::to_string(move _103) -> [return: bb45, unwind: bb72];
    }

    bb45: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_obligation.rs", line: const 36_u32 };
        _106 = anchor_lang::error::ErrorOrigin::Source(move _107);
        StorageDead(_107);
        _105 = std::option::Option::<ErrorOrigin>::Some(move _106);
        StorageDead(_106);
        StorageLive(_108);
        _108 = std::option::Option::<ComparedValues>::None;
        _96 = anchor_lang::error::AnchorError { error_name: move _97, error_code_number: move _100, error_msg: move _102, error_origin: move _105, compared_values: move _108 };
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_97);
        _95 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _96) -> [return: bb46, unwind: bb74];
    }

    bb46: {
        StorageDead(_96);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _95);
        StorageDead(_95);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb67;
    }

    bb47: {
        StorageDead(_56);
        StorageDead(_54);
        _52 = const ();
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _159 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _112 = &(*_159);
        _111 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _112) -> [return: bb48, unwind: bb74];
    }

    bb48: {
        StorageDead(_112);
        StorageLive(_113);
        _113 = _36;
        _110 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _111, move _113) -> [return: bb49, unwind: bb74];
    }

    bb49: {
        StorageDead(_113);
        StorageDead(_111);
        StorageLive(_114);
        _114 = {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:43:14: 43:28};
        _109 = <std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:43:14: 43:28}>(move _110, move _114) -> [return: bb50, unwind: bb74];
    }

    bb50: {
        StorageDead(_114);
        StorageDead(_110);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _160 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _119 = &(*_160);
        _118 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _119) -> [return: bb51, unwind: bb74];
    }

    bb51: {
        StorageDead(_119);
        StorageLive(_120);
        _120 = _36;
        _117 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::skip(move _118, move _120) -> [return: bb52, unwind: bb74];
    }

    bb52: {
        StorageDead(_120);
        StorageDead(_118);
        StorageLive(_121);
        _121 = _32;
        _116 = <Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::take(move _117, move _121) -> [return: bb53, unwind: bb74];
    }

    bb53: {
        StorageDead(_121);
        StorageDead(_117);
        StorageLive(_122);
        _122 = {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:50:14: 50:28};
        _115 = <std::iter::Take<Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:50:14: 50:28}>(move _116, move _122) -> [return: bb54, unwind: bb74];
    }

    bb54: {
        StorageDead(_122);
        StorageDead(_116);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _161 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _126 = &(*_161);
        _125 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _126) -> [return: bb55, unwind: bb74];
    }

    bb55: {
        StorageDead(_126);
        StorageLive(_127);
        _127 = _40;
        _124 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::skip(move _125, move _127) -> [return: bb56, unwind: bb74];
    }

    bb56: {
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_128);
        _128 = {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:56:18: 56:32};
        _123 = <Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, referral::ReferrerTokenState>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:56:18: 56:32}>(move _124, move _128) -> [return: bb57, unwind: bb74];
    }

    bb57: {
        StorageDead(_128);
        StorageDead(_124);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _133 = &(*_134);
        _132 = &(*_133);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &mut (*_3);
        _136 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _137) -> [return: bb58, unwind: bb74];
    }

    bb58: {
        _135 = &mut (*_136);
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &(*_22);
        _139 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _140) -> [return: bb59, unwind: bb74];
    }

    bb59: {
        _138 = &(*_139);
        StorageDead(_140);
        StorageLive(_141);
        _141 = ((*_13).0: u64);
        StorageLive(_142);
        _142 = move _2;
        StorageLive(_143);
        _143 = move _109;
        StorageLive(_144);
        _144 = move _115;
        StorageLive(_145);
        _145 = move _123;
        _131 = lending_operations::refresh_obligation::<'_, account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, account_loader_trait::FatAccountLoader<'_, referral::ReferrerTokenState>, std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:43:14: 43:28}>, std::iter::Map<std::iter::Take<Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:50:14: 50:28}>, std::iter::Map<Skip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\klend\src\handlers\handler_refresh_obligation.rs:56:18: 56:32}>>(move _132, move _135, move _138, move _141, move _142, move _143, move _144, move _145) -> [return: bb60, unwind: bb74];
    }

    bb60: {
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        _130 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _131) -> [return: bb61, unwind: bb74];
    }

    bb61: {
        StorageDead(_131);
        _146 = discriminant(_130);
        switchInt(move _146) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_150);
        _150 = ((_130 as Continue).0: ());
        _129 = _150;
        StorageDead(_150);
        _168 = discriminant(_130);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_151);
        _151 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _151);
        StorageDead(_151);
        StorageDead(_123);
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_44);
        StorageDead(_40);
        StorageDead(_36);
        StorageDead(_32);
        drop(_23) -> [return: bb65, unwind: bb75];
    }

    bb63: {
        StorageLive(_147);
        _147 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_149);
        _149 = move _147;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _149) -> [return: bb64, unwind: bb77];
    }

    bb64: {
        StorageDead(_149);
        StorageDead(_147);
        _170 = discriminant(_130);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_123);
        StorageDead(_115);
        StorageDead(_109);
        goto -> bb67;
    }

    bb65: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb66, unwind: bb76];
    }

    bb66: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb71;
    }

    bb67: {
        StorageDead(_44);
        StorageDead(_40);
        StorageDead(_36);
        StorageDead(_32);
        drop(_23) -> [return: bb68, unwind: bb75];
    }

    bb68: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_14);
        StorageDead(_13);
        drop(_4) -> [return: bb70, unwind: bb76];
    }

    bb70: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb71;
    }

    bb71: {
        return;
    }

    bb72 (cleanup): {
        drop(_97) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_63) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_23) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_4) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        resume;
    }

    bb77 (cleanup): {
        _178 = discriminant(_130);
        goto -> bb74;
    }

    bb78 (cleanup): {
        _179 = discriminant(_24);
        goto -> bb75;
    }

    bb79 (cleanup): {
        _180 = discriminant(_15);
        goto -> bb75;
    }

    bb80 (cleanup): {
        _181 = discriminant(_5);
        goto -> bb76;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
