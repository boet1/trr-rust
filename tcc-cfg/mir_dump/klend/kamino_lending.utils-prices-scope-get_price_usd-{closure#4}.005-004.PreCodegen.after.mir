// MIR for `get_price_usd::{closure#4}` after PreCodegen

fn get_price_usd::{closure#4}(_1: &{closure@programs\klend\src\utils\prices\scope.rs:118:31: 118:38}) -> std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> {
    debug price_chain_raw => ((*_1).0: [std::option::Option<(utils::prices::types::Price<u64>, u64)>; 4]);
    debug chain_len => ((*_1).1: usize);
    debug init_price => ((*_1).2: utils::prices::types::Price<utils::fraction::uint_types::U256>);
    let mut _0: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let _2: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>];
    let _3: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>];
    let mut _4: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>; 4];
    let mut _5: std::ops::RangeTo<usize>;
    let mut _6: usize;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, utils::prices::types::Price<utils::fraction::uint_types::U256>>;
    let mut _9: std::result::Result<utils::prices::types::Price<utils::fraction::uint_types::U256>, LendingError>;
    let mut _10: std::option::Option<utils::prices::types::Price<utils::fraction::uint_types::U256>>;
    let mut _11: &mut std::iter::Map<std::iter::Flatten<std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>>, {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21}>;
    let mut _12: std::iter::Map<std::iter::Flatten<std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>>, {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21}>;
    let mut _13: std::iter::Flatten<std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>>;
    let mut _14: std::slice::Iter<'_, std::option::Option<(utils::prices::types::Price<u64>, u64)>>;
    let mut _15: &[std::option::Option<(utils::prices::types::Price<u64>, u64)>];
    let mut _16: {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21};
    let mut _17: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    let mut _18: {closure@programs\klend\src\utils\prices\scope.rs:124:35: 124:43};
    let mut _19: {closure@programs\klend\src\utils\prices\scope.rs:137:25: 137:27};
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _25: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _26: utils::prices::types::Price<utils::fraction::uint_types::U256>;
    scope 1 {
        debug price_chain => _2;
        let _7: utils::prices::types::Price<utils::fraction::uint_types::U256>;
        let _21: std::result::Result<std::convert::Infallible, LendingError>;
        let _24: utils::prices::types::Price<utils::fraction::uint_types::U256>;
        scope 2 {
            debug base_price => _7;
        }
        scope 3 {
            debug residual => _21;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _24;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: [std::option::Option<(utils::prices::types::Price<u64>, u64)>; 4]);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).1: usize);
        _5 = RangeTo::<usize> { end: move _6 };
        StorageDead(_6);
        _3 = <[std::option::Option<(prices::types::Price<u64>, u64)>; 4] as Index<RangeTo<usize>>>::index(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        _2 = &(*_3);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_2);
        _14 = core::slice::<impl [std::option::Option<(prices::types::Price<u64>, u64)>]>::iter(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _13 = <std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>> as Iterator>::flatten(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageLive(_16);
        _16 = {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21};
        _12 = <Flatten<std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>>> as Iterator>::map::<prices::types::Price<uint_types::U256>, {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21}>(move _13, move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = &mut _12;
        StorageDead(_16);
        StorageDead(_13);
        StorageLive(_17);
        _17 = ((*_1).2: utils::prices::types::Price<utils::fraction::uint_types::U256>);
        StorageLive(_18);
        _18 = {closure@programs\klend\src\utils\prices\scope.rs:124:35: 124:43};
        _10 = <std::iter::Map<Flatten<std::slice::Iter<'_, std::option::Option<(prices::types::Price<u64>, u64)>>>, {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21}> as Iterator>::try_fold::<prices::types::Price<uint_types::U256>, {closure@programs\klend\src\utils\prices\scope.rs:124:35: 124:43}, std::option::Option<prices::types::Price<uint_types::U256>>>(move _11, move _17, move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_11);
        StorageLive(_19);
        _19 = {closure@programs\klend\src\utils\prices\scope.rs:137:25: 137:27};
        _9 = std::option::Option::<prices::types::Price<uint_types::U256>>::ok_or_else::<LendingError, {closure@programs\klend\src\utils\prices\scope.rs:137:25: 137:27}>(move _10, move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_10);
        _8 = <std::result::Result<prices::types::Price<uint_types::U256>, LendingError> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_9);
        _20 = discriminant(_8);
        switchInt(move _20) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_8 as Continue).0: utils::prices::types::Price<utils::fraction::uint_types::U256>);
        _7 = _24;
        StorageDead(_24);
        StorageDead(_12);
        StorageDead(_8);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _7;
        _25 = price_to_fraction::<uint_types::U256>(move _26) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_26);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Ok(move _25);
        StorageDead(_25);
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
