// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:1317:1: 1317:17>::calculate_fees` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:1317:1: 1317:17>::calculate_fees(_1: &ReserveFees, _2: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _3: u64, _4: reserve::FeeCalculation, _5: u16, _6: bool) -> std::result::Result<(u64, u64), anchor_lang::error::Error> {
    debug self => _1;
    debug amount => _2;
    debug fee_sf => _3;
    debug fee_calculation => _4;
    debug referral_fee_bps => _5;
    debug has_referrer => _6;
    let mut _0: std::result::Result<(u64, u64), anchor_lang::error::Error>;
    let _7: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _8: u128;
    let mut _9: u64;
    let mut _11: u16;
    let mut _12: bool;
    let mut _13: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _15: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _16: bool;
    let mut _17: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _18: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _19: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _21: bool;
    let mut _22: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _24: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _27: isize;
    let mut _28: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _29: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _31: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _32: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _33: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _34: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _35: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _37: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _38: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _39: u64;
    let _40: ();
    let mut _41: bool;
    let mut _42: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _43: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _44: !;
    let _45: ();
    let mut _46: &str;
    let _47: &str;
    let mut _48: anchor_lang::error::Error;
    let mut _49: anchor_lang::error::AnchorError;
    let mut _50: std::string::String;
    let mut _51: &LendingError;
    let _52: LendingError;
    let mut _53: u32;
    let mut _54: LendingError;
    let mut _55: std::string::String;
    let mut _56: &LendingError;
    let _57: LendingError;
    let mut _58: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _59: anchor_lang::error::ErrorOrigin;
    let mut _60: anchor_lang::error::Source;
    let mut _61: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _63: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: u16;
    let mut _69: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _70: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _71: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _73: u64;
    let mut _74: u64;
    let mut _75: (u64, bool);
    let mut _76: (u64, u64);
    let mut _77: u64;
    let mut _78: u64;
    let mut _79: (u64, u64);
    scope 1 {
        debug borrow_fee_rate => _7;
        let _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug referral_fee_rate => _10;
            let _20: bool;
            let mut _82: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            let mut _83: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            let mut _84: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug need_to_assess_referral_fee => _20;
                let _25: u64;
                scope 4 {
                    debug minimum_fee => _25;
                    let _26: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    let _30: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 5 {
                        debug borrow_fee_amount => _26;
                        let _36: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        scope 7 {
                            debug borrow_fee_f => _36;
                            let _62: u64;
                            let mut _80: &LendingError;
                            let mut _81: &LendingError;
                            scope 8 {
                                debug borrow_fee => _62;
                                let _64: u64;
                                let _68: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                scope 9 {
                                    debug referral_fee => _64;
                                    let _72: u64;
                                    scope 11 {
                                        debug protocol_fee => _72;
                                    }
                                }
                                scope 10 {
                                    debug referral_fee_f => _68;
                                }
                            }
                        }
                    }
                    scope 6 {
                        debug borrow_fee_rate => _30;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _3;
        _8 = <u64 as Into<u128>>::into(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _5;
        _10 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_bps::<u16>(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_7;
        StorageLive(_14);
        _84 = const _;
        _14 = &(*_84);
        _12 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _12) -> [0: bb41, otherwise: bb5];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_2;
        StorageLive(_18);
        _83 = const _;
        _18 = &(*_83);
        _16 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _17, move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _16) -> [0: bb40, otherwise: bb7];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_10;
        StorageLive(_23);
        _82 = const _;
        _23 = &(*_82);
        _21 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _22, move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = _6;
        goto -> bb11;
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = const false;
        goto -> bb11;
    }

    bb11: {
        StorageDead(_21);
        StorageLive(_25);
        _25 = const 1_u64;
        StorageLive(_26);
        _27 = discriminant(_4);
        switchInt(move _27) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        StorageLive(_30);
        StorageLive(_31);
        _31 = _7;
        StorageLive(_32);
        StorageLive(_33);
        _33 = _7;
        _32 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _33, const _) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_28);
        _28 = _2;
        StorageLive(_29);
        _29 = _7;
        _26 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _28, move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb19;
    }

    bb16: {
        StorageDead(_33);
        _30 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _31, move _32) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_34);
        _34 = _2;
        StorageLive(_35);
        _35 = _30;
        _26 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _34, move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        goto -> bb19;
    }

    bb19: {
        StorageLive(_36);
        StorageLive(_37);
        _37 = _26;
        StorageLive(_38);
        StorageLive(_39);
        _39 = _25;
        _38 = <u64 as Into<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::into(move _39) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_39);
        _36 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Ord>::max(move _37, move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_36;
        StorageLive(_43);
        _43 = &_2;
        _41 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _42, move _43) -> [return: bb22, unwind continue];
    }

    bb22: {
        switchInt(move _41) -> [0: bb29, otherwise: bb23];
    }

    bb23: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = const "Borrow amount is too small to receive liquidity after fees";
        _46 = &(*_47);
        _45 = solana_program::log::sol_log(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _81 = const _;
        _51 = &(*_81);
        _50 = LendingError::name(move _51) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        _54 = LendingError::BorrowTooSmall;
        _53 = <LendingError as Into<u32>>::into(move _54) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        _80 = const _;
        _56 = &(*_80);
        _55 = <LendingError as ToString>::to_string(move _56) -> [return: bb27, unwind: bb45];
    }

    bb27: {
        StorageDead(_56);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\reserve.rs", line: const 1382_u32 };
        _59 = anchor_lang::error::ErrorOrigin::Source(move _60);
        StorageDead(_60);
        _58 = std::option::Option::<ErrorOrigin>::Some(move _59);
        StorageDead(_59);
        StorageLive(_61);
        _61 = std::option::Option::<ComparedValues>::None;
        _49 = anchor_lang::error::AnchorError { error_name: move _50, error_code_number: move _53, error_msg: move _55, error_origin: move _58, compared_values: move _61 };
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_50);
        _48 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _49) -> [return: bb28, unwind: bb46];
    }

    bb28: {
        StorageDead(_49);
        _0 = std::result::Result::<(u64, u64), anchor_lang::error::Error>::Err(move _48);
        StorageDead(_48);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb44;
    }

    bb29: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = const ();
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_36;
        _62 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_round::<u64>(move _63) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _20;
        switchInt(move _65) -> [0: bb37, otherwise: bb31];
    }

    bb31: {
        StorageLive(_66);
        StorageLive(_67);
        _67 = _5;
        _66 = Eq(move _67, const 10000_u16);
        switchInt(move _66) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        StorageDead(_67);
        _64 = _62;
        goto -> bb36;
    }

    bb33: {
        StorageDead(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _36;
        StorageLive(_70);
        _70 = _10;
        _68 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _69, move _70) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_71);
        _71 = &_68;
        _64 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_floor::<u64>(move _71) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_68);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_66);
        goto -> bb38;
    }

    bb37: {
        _64 = const 0_u64;
        goto -> bb38;
    }

    bb38: {
        StorageDead(_65);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _62;
        StorageLive(_74);
        _74 = _64;
        _75 = CheckedSub(_73, _74);
        assert(!move (_75.1: bool), "attempt to compute `{} - {}`, which would overflow", move _73, move _74) -> [success: bb39, unwind continue];
    }

    bb39: {
        _72 = move (_75.0: u64);
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _72;
        StorageLive(_78);
        _78 = _64;
        _76 = (move _77, move _78);
        StorageDead(_78);
        StorageDead(_77);
        _0 = std::result::Result::<(u64, u64), anchor_lang::error::Error>::Ok(move _76);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_36);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_20);
        goto -> bb43;
    }

    bb40: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb42;
    }

    bb42: {
        StorageLive(_79);
        _79 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), anchor_lang::error::Error>::Ok(move _79);
        StorageDead(_79);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_50) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }
}
