// MIR for `handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::<impl at programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18>::try_accounts` after PreCodegen

fn handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::<impl at programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _113: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _128: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _143: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _158: std::result::Result<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _173: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _188: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _189: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _192: &[u8];
    let mut _193: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _194: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _195: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _203: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _204: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _205: &anchor_lang::prelude::Pubkey;
    let mut _206: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _207: &[u8];
    let mut _208: &mut handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps;
    let mut _209: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _210: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _216: ();
    let mut _217: bool;
    let mut _218: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _219: &anchor_lang::prelude::Signer<'_>;
    let _220: &anchor_lang::prelude::Signer<'_>;
    let mut _221: !;
    let mut _222: anchor_lang::error::Error;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::ErrorCode;
    let _225: ();
    let mut _226: bool;
    let mut _227: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _228: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _229: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _230: !;
    let mut _231: anchor_lang::error::Error;
    let mut _232: anchor_lang::error::Error;
    let mut _233: anchor_lang::error::ErrorCode;
    let _234: ();
    let mut _236: &state::obligation::Obligation;
    let mut _237: &std::cell::Ref<'_, state::obligation::Obligation>;
    let _238: std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _239: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _240: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _241: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _242: isize;
    let mut _244: !;
    let mut _245: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _248: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _249: bool;
    let mut _250: &anchor_lang::prelude::Pubkey;
    let mut _251: &anchor_lang::prelude::Pubkey;
    let mut _252: !;
    let mut _253: anchor_lang::error::Error;
    let mut _254: anchor_lang::error::Error;
    let mut _255: anchor_lang::error::Error;
    let mut _256: anchor_lang::error::ErrorCode;
    let mut _257: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _258: anchor_lang::prelude::Pubkey;
    let mut _259: anchor_lang::prelude::Pubkey;
    let _260: ();
    let mut _262: &state::obligation::Obligation;
    let mut _263: &std::cell::Ref<'_, state::obligation::Obligation>;
    let _264: std::cell::Ref<'_, state::obligation::Obligation>;
    let mut _265: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::obligation::Obligation>>;
    let mut _266: std::result::Result<std::cell::Ref<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _267: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _274: &anchor_lang::prelude::Signer<'_>;
    let mut _275: bool;
    let mut _276: &anchor_lang::prelude::Pubkey;
    let mut _277: &anchor_lang::prelude::Pubkey;
    let mut _278: !;
    let mut _279: anchor_lang::error::Error;
    let mut _280: anchor_lang::error::Error;
    let mut _281: anchor_lang::error::Error;
    let mut _282: anchor_lang::error::ErrorCode;
    let mut _283: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _284: anchor_lang::prelude::Pubkey;
    let mut _285: anchor_lang::prelude::Pubkey;
    let mut _287: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _288: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _289: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _290: &[&[u8]];
    let mut _291: &[&[u8]; 3];
    let _292: &[&[u8]; 3];
    let _293: [&[u8]; 3];
    let mut _294: &[u8];
    let _295: &[u8];
    let mut _296: &[u8];
    let _297: &[u8];
    let mut _298: &anchor_lang::prelude::Pubkey;
    let _299: anchor_lang::prelude::Pubkey;
    let mut _300: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _301: &[u8];
    let _302: &[u8];
    let _303: &[u8];
    let mut _304: &[u8; 1];
    let _305: [u8; 1];
    let mut _306: u8;
    let mut _307: u64;
    let mut _308: &state::lending_market::LendingMarket;
    let mut _309: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _310: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _311: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _312: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _313: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _314: isize;
    let mut _316: !;
    let mut _317: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _319: std::ops::RangeFull;
    let mut _320: &anchor_lang::prelude::Pubkey;
    let _321: &&anchor_lang::prelude::Pubkey;
    let mut _322: {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _328: ();
    let mut _329: bool;
    let mut _330: &anchor_lang::prelude::Pubkey;
    let _331: anchor_lang::prelude::Pubkey;
    let mut _332: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _333: &anchor_lang::prelude::Pubkey;
    let mut _334: !;
    let mut _335: anchor_lang::error::Error;
    let mut _336: anchor_lang::error::Error;
    let mut _337: anchor_lang::error::Error;
    let mut _338: anchor_lang::error::ErrorCode;
    let mut _339: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _340: anchor_lang::prelude::Pubkey;
    let mut _341: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _342: anchor_lang::prelude::Pubkey;
    let _343: ();
    let mut _344: bool;
    let mut _345: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _346: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _347: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _348: !;
    let mut _349: anchor_lang::error::Error;
    let mut _350: anchor_lang::error::Error;
    let mut _351: anchor_lang::error::ErrorCode;
    let _352: ();
    let mut _354: &state::reserve::Reserve;
    let mut _355: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _356: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _358: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _359: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _366: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _367: bool;
    let mut _368: &anchor_lang::prelude::Pubkey;
    let mut _369: &anchor_lang::prelude::Pubkey;
    let mut _370: !;
    let mut _371: anchor_lang::error::Error;
    let mut _372: anchor_lang::error::Error;
    let mut _373: anchor_lang::error::Error;
    let mut _374: anchor_lang::error::ErrorCode;
    let mut _375: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _376: anchor_lang::prelude::Pubkey;
    let mut _377: anchor_lang::prelude::Pubkey;
    let _378: ();
    let mut _380: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _382: &state::reserve::Reserve;
    let mut _383: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _384: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _385: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _386: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _387: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _388: isize;
    let mut _390: !;
    let mut _391: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _393: bool;
    let mut _394: &anchor_lang::prelude::Pubkey;
    let mut _395: &anchor_lang::prelude::Pubkey;
    let mut _396: !;
    let mut _397: anchor_lang::error::Error;
    let mut _398: anchor_lang::error::Error;
    let mut _399: anchor_lang::error::Error;
    let mut _400: anchor_lang::error::ErrorCode;
    let mut _401: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _402: anchor_lang::prelude::Pubkey;
    let mut _403: anchor_lang::prelude::Pubkey;
    let _404: ();
    let mut _405: bool;
    let mut _406: &&anchor_lang::prelude::Pubkey;
    let _407: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _408: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _409: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _410: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _411: &&anchor_lang::prelude::Pubkey;
    let _412: &anchor_lang::prelude::Pubkey;
    let _413: anchor_lang::prelude::Pubkey;
    let mut _414: &anchor_lang::prelude::AccountInfo<'_>;
    let _415: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _416: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _417: !;
    let mut _418: anchor_lang::error::Error;
    let mut _419: anchor_lang::error::ErrorCode;
    let _420: ();
    let mut _421: bool;
    let mut _422: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _423: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _424: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _425: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _426: !;
    let mut _427: anchor_lang::error::Error;
    let mut _428: anchor_lang::error::Error;
    let mut _429: anchor_lang::error::ErrorCode;
    let _430: ();
    let mut _432: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _434: &state::reserve::Reserve;
    let mut _435: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _436: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _437: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _438: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _439: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _440: isize;
    let mut _442: !;
    let mut _443: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _445: bool;
    let mut _446: &anchor_lang::prelude::Pubkey;
    let mut _447: &anchor_lang::prelude::Pubkey;
    let mut _448: !;
    let mut _449: anchor_lang::error::Error;
    let mut _450: anchor_lang::error::Error;
    let mut _451: anchor_lang::error::Error;
    let mut _452: anchor_lang::error::ErrorCode;
    let mut _453: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _454: anchor_lang::prelude::Pubkey;
    let mut _455: anchor_lang::prelude::Pubkey;
    let _456: ();
    let mut _457: bool;
    let mut _458: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _459: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _460: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _461: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _462: !;
    let mut _463: anchor_lang::error::Error;
    let mut _464: anchor_lang::error::Error;
    let mut _465: anchor_lang::error::ErrorCode;
    let _466: ();
    let mut _468: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _470: &state::reserve::Reserve;
    let mut _471: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _472: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _473: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _474: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _475: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _476: isize;
    let mut _478: !;
    let mut _479: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _481: bool;
    let mut _482: &anchor_lang::prelude::Pubkey;
    let mut _483: &anchor_lang::prelude::Pubkey;
    let mut _484: !;
    let mut _485: anchor_lang::error::Error;
    let mut _486: anchor_lang::error::Error;
    let mut _487: anchor_lang::error::Error;
    let mut _488: anchor_lang::error::ErrorCode;
    let mut _489: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _490: anchor_lang::prelude::Pubkey;
    let mut _491: anchor_lang::prelude::Pubkey;
    let _492: ();
    let mut _493: bool;
    let mut _494: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _495: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _496: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _497: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _498: !;
    let mut _499: anchor_lang::error::Error;
    let mut _500: anchor_lang::error::Error;
    let mut _501: anchor_lang::error::ErrorCode;
    let _502: ();
    let mut _504: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _506: &state::reserve::Reserve;
    let mut _507: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _508: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _509: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _510: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _511: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _512: isize;
    let mut _514: !;
    let mut _515: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _517: bool;
    let mut _518: &anchor_lang::prelude::Pubkey;
    let mut _519: &anchor_lang::prelude::Pubkey;
    let mut _520: !;
    let mut _521: anchor_lang::error::Error;
    let mut _522: anchor_lang::error::Error;
    let mut _523: anchor_lang::error::Error;
    let mut _524: anchor_lang::error::ErrorCode;
    let mut _525: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _526: anchor_lang::prelude::Pubkey;
    let mut _527: anchor_lang::prelude::Pubkey;
    let _528: ();
    let mut _529: bool;
    let mut _530: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _531: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _532: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _533: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _534: !;
    let mut _535: anchor_lang::error::Error;
    let mut _536: anchor_lang::error::Error;
    let mut _537: anchor_lang::error::ErrorCode;
    let _538: ();
    let _539: ();
    let mut _540: bool;
    let mut _541: &anchor_lang::prelude::Pubkey;
    let _542: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _543: &anchor_spl::token_interface::TokenAccount;
    let _544: &anchor_spl::token_interface::TokenAccount;
    let mut _545: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _546: &anchor_lang::prelude::Pubkey;
    let _547: anchor_lang::prelude::Pubkey;
    let mut _548: &anchor_lang::prelude::Signer<'_>;
    let mut _549: !;
    let mut _550: anchor_lang::error::Error;
    let mut _551: anchor_lang::error::ErrorCode;
    let mut _552: bool;
    let mut _553: &anchor_lang::prelude::Pubkey;
    let _554: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _555: &anchor_spl::token_interface::TokenAccount;
    let _556: &anchor_spl::token_interface::TokenAccount;
    let mut _557: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _558: &anchor_lang::prelude::Pubkey;
    let _559: anchor_lang::prelude::Pubkey;
    let mut _560: &anchor_lang::prelude::Pubkey;
    let _561: &state::reserve::Reserve;
    let mut _562: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _563: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _564: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _565: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _566: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _567: isize;
    let mut _569: !;
    let mut _570: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _572: !;
    let mut _573: anchor_lang::error::Error;
    let mut _574: anchor_lang::error::ErrorCode;
    let _575: ();
    let mut _577: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _579: bool;
    let mut _580: &anchor_lang::prelude::Pubkey;
    let mut _581: &anchor_lang::prelude::Pubkey;
    let mut _582: !;
    let mut _583: anchor_lang::error::Error;
    let mut _584: anchor_lang::error::Error;
    let mut _585: anchor_lang::error::Error;
    let mut _586: anchor_lang::error::ErrorCode;
    let mut _587: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _588: anchor_lang::prelude::Pubkey;
    let mut _589: anchor_lang::prelude::Pubkey;
    let mut _590: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>;
    let mut _591: anchor_lang::prelude::Signer<'_>;
    let mut _592: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _593: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _594: anchor_lang::prelude::AccountInfo<'_>;
    let mut _595: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _596: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _597: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _598: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _599: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _600: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _601: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _602: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _603: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _604: anchor_lang::prelude::AccountInfo<'_>;
    let mut _605: &anchor_lang::prelude::Pubkey;
    let mut _606: bool;
    let mut _607: bool;
    let mut _608: bool;
    let mut _609: bool;
    let mut _610: bool;
    let mut _611: bool;
    let mut _612: bool;
    let mut _613: bool;
    let mut _614: bool;
    let mut _615: bool;
    let mut _616: bool;
    let mut _617: bool;
    let mut _618: bool;
    let mut _619: bool;
    let mut _620: bool;
    let mut _621: bool;
    let mut _622: bool;
    let mut _623: bool;
    let mut _624: bool;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    let mut _675: isize;
    let mut _676: isize;
    let mut _677: isize;
    let mut _678: isize;
    let mut _679: isize;
    let mut _680: isize;
    let mut _681: isize;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: isize;
    let mut _702: isize;
    let mut _703: isize;
    let mut _704: isize;
    let mut _705: isize;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    let mut _726: isize;
    let mut _727: isize;
    let mut _728: isize;
    let mut _729: isize;
    let mut _730: isize;
    let mut _731: isize;
    let mut _732: isize;
    let mut _733: isize;
    let mut _734: isize;
    let mut _735: isize;
    let mut _736: isize;
    let mut _737: isize;
    let mut _738: isize;
    let mut _739: isize;
    let mut _740: isize;
    let mut _741: isize;
    let mut _742: isize;
    let mut _743: isize;
    let mut _744: isize;
    let mut _745: isize;
    let mut _746: isize;
    let mut _747: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _748: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _749: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _750: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _751: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _752: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug owner => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
        scope 6 {
            debug obligation => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
            scope 11 {
                debug lending_market => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug lending_market_authority => _51;
                    let _66: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                    scope 21 {
                        debug reserve => _66;
                        let _81: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                        scope 26 {
                            debug reserve_liquidity_mint => _81;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 31 {
                                debug reserve_liquidity_supply => _96;
                                let _111: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                scope 36 {
                                    debug reserve_collateral_mint => _111;
                                    let _126: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    scope 41 {
                                        debug reserve_destination_deposit_collateral => _126;
                                        let _141: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        scope 46 {
                                            debug user_source_liquidity => _141;
                                            let _156: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
                                            scope 51 {
                                                debug placeholder_user_destination_collateral => _156;
                                                let _171: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                                let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _185: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                                scope 56 {
                                                    debug collateral_token_program => _171;
                                                    let _186: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                    let _197: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _200: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                    scope 61 {
                                                        debug liquidity_token_program => _186;
                                                        let _201: anchor_lang::prelude::AccountInfo<'_>;
                                                        let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _215: anchor_lang::prelude::AccountInfo<'_>;
                                                        scope 66 {
                                                            debug instruction_sysvar_account => _201;
                                                            let _235: anchor_lang::prelude::Pubkey;
                                                            let _243: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _246: std::cell::Ref<'_, state::obligation::Obligation>;
                                                            let _261: anchor_lang::prelude::Pubkey;
                                                            let _269: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _272: std::cell::Ref<'_, state::obligation::Obligation>;
                                                            let _286: anchor_lang::prelude::Pubkey;
                                                            let _315: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _318: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                                            let _324: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _327: anchor_lang::prelude::Pubkey;
                                                            scope 71 {
                                                                debug my_key => _235;
                                                                let _247: anchor_lang::prelude::Pubkey;
                                                                scope 76 {
                                                                    debug target_key => _247;
                                                                }
                                                            }
                                                            scope 72 {
                                                                debug residual => _243;
                                                                scope 73 {
                                                                }
                                                            }
                                                            scope 74 {
                                                                debug val => _246;
                                                                scope 75 {
                                                                }
                                                            }
                                                            scope 77 {
                                                                debug my_key => _261;
                                                                let _273: anchor_lang::prelude::Pubkey;
                                                                scope 82 {
                                                                    debug target_key => _273;
                                                                }
                                                            }
                                                            scope 78 {
                                                                debug residual => _269;
                                                                scope 79 {
                                                                }
                                                            }
                                                            scope 80 {
                                                                debug val => _272;
                                                                scope 81 {
                                                                }
                                                            }
                                                            scope 83 {
                                                                debug __pda_address => _286;
                                                                let _353: anchor_lang::prelude::Pubkey;
                                                                let _361: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _364: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                let _379: anchor_lang::prelude::Pubkey;
                                                                let _431: anchor_lang::prelude::Pubkey;
                                                                let _467: anchor_lang::prelude::Pubkey;
                                                                let _503: anchor_lang::prelude::Pubkey;
                                                                let _568: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _571: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                let _576: anchor_lang::prelude::Pubkey;
                                                                scope 92 {
                                                                    debug my_key => _353;
                                                                    let _365: anchor_lang::prelude::Pubkey;
                                                                    scope 97 {
                                                                        debug target_key => _365;
                                                                    }
                                                                }
                                                                scope 93 {
                                                                    debug residual => _361;
                                                                    scope 94 {
                                                                    }
                                                                }
                                                                scope 95 {
                                                                    debug val => _364;
                                                                    scope 96 {
                                                                    }
                                                                }
                                                                scope 98 {
                                                                    debug actual => _379;
                                                                    let _381: anchor_lang::prelude::Pubkey;
                                                                    let _389: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _392: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                    scope 99 {
                                                                        debug expected => _381;
                                                                    }
                                                                    scope 100 {
                                                                        debug residual => _389;
                                                                        scope 101 {
                                                                        }
                                                                    }
                                                                    scope 102 {
                                                                        debug val => _392;
                                                                        scope 103 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 104 {
                                                                    debug actual => _431;
                                                                    let _433: anchor_lang::prelude::Pubkey;
                                                                    let _441: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _444: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                    scope 105 {
                                                                        debug expected => _433;
                                                                    }
                                                                    scope 106 {
                                                                        debug residual => _441;
                                                                        scope 107 {
                                                                        }
                                                                    }
                                                                    scope 108 {
                                                                        debug val => _444;
                                                                        scope 109 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 110 {
                                                                    debug actual => _467;
                                                                    let _469: anchor_lang::prelude::Pubkey;
                                                                    let _477: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _480: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                    scope 111 {
                                                                        debug expected => _469;
                                                                    }
                                                                    scope 112 {
                                                                        debug residual => _477;
                                                                        scope 113 {
                                                                        }
                                                                    }
                                                                    scope 114 {
                                                                        debug val => _480;
                                                                        scope 115 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 116 {
                                                                    debug actual => _503;
                                                                    let _505: anchor_lang::prelude::Pubkey;
                                                                    let _513: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _516: std::cell::Ref<'_, state::reserve::Reserve>;
                                                                    scope 117 {
                                                                        debug expected => _505;
                                                                    }
                                                                    scope 118 {
                                                                        debug residual => _513;
                                                                        scope 119 {
                                                                        }
                                                                    }
                                                                    scope 120 {
                                                                        debug val => _516;
                                                                        scope 121 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 122 {
                                                                    debug residual => _568;
                                                                    scope 123 {
                                                                    }
                                                                }
                                                                scope 124 {
                                                                    debug val => _571;
                                                                    scope 125 {
                                                                    }
                                                                }
                                                                scope 126 {
                                                                    debug actual => _576;
                                                                    let _578: anchor_lang::prelude::Pubkey;
                                                                    scope 127 {
                                                                        debug expected => _578;
                                                                    }
                                                                }
                                                            }
                                                            scope 84 {
                                                                debug residual => _315;
                                                                scope 85 {
                                                                }
                                                            }
                                                            scope 86 {
                                                                debug val => _318;
                                                                scope 87 {
                                                                }
                                                            }
                                                            scope 88 {
                                                                debug residual => _324;
                                                                scope 89 {
                                                                }
                                                            }
                                                            scope 90 {
                                                                debug val => _327;
                                                                scope 91 {
                                                                }
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug residual => _212;
                                                            scope 68 {
                                                            }
                                                        }
                                                        scope 69 {
                                                            debug val => _215;
                                                            scope 70 {
                                                            }
                                                        }
                                                    }
                                                    scope 62 {
                                                        debug residual => _197;
                                                        scope 63 {
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug val => _200;
                                                        scope 65 {
                                                        }
                                                    }
                                                }
                                                scope 57 {
                                                    debug residual => _182;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug val => _185;
                                                    scope 60 {
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _167;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _170;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 47 {
                                            debug residual => _152;
                                            scope 48 {
                                            }
                                        }
                                        scope 49 {
                                            debug val => _155;
                                            scope 50 {
                                            }
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _137;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _140;
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _122;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _125;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _620 = const false;
        _624 = const false;
        _623 = const false;
        _622 = const false;
        _621 = const false;
        _607 = const false;
        _606 = const false;
        _619 = const false;
        _618 = const false;
        _617 = const false;
        _616 = const false;
        _615 = const false;
        _614 = const false;
        _613 = const false;
        _612 = const false;
        _611 = const false;
        _610 = const false;
        _609 = const false;
        _608 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _9, move _15) -> [return: bb2, unwind: bb318];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb318];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _625 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb355];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _721 = discriminant(_7);
        StorageDead(_7);
        goto -> bb299;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _24, move _30) -> [return: bb9, unwind: bb318];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb318];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _21 = move _35;
        StorageDead(_35);
        _627 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb354];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _719 = discriminant(_22);
        StorageDead(_22);
        goto -> bb298;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _39, move _45) -> [return: bb15, unwind: bb318];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb318];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _36 = move _50;
        StorageDead(_50);
        _629 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb353];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _717 = discriminant(_37);
        StorageDead(_37);
        goto -> bb297;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _54, move _60) -> [return: bb21, unwind: bb318];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb318];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _631 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb317];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb352];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _715 = discriminant(_52);
        StorageDead(_52);
        goto -> bb296;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _69, move _75) -> [return: bb27, unwind: bb317];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb317];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _66 = move _80;
        StorageDead(_80);
        _633 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb317];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb351];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _713 = discriminant(_67);
        StorageDead(_67);
        goto -> bb295;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _84, move _90) -> [return: bb33, unwind: bb317];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb317];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _81 = move _95;
        StorageDead(_95);
        _635 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb316];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb350];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _711 = discriminant(_82);
        StorageDead(_82);
        goto -> bb294;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _99, move _105) -> [return: bb39, unwind: bb316];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb316];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _637 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb315];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb349];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _709 = discriminant(_97);
        StorageDead(_97);
        goto -> bb293;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _113 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _114, move _120) -> [return: bb45, unwind: bb315];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb315];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _111 = move _125;
        StorageDead(_125);
        _639 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb314];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb348];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _707 = discriminant(_112);
        StorageDead(_112);
        goto -> bb292;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _128 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _129, move _135) -> [return: bb51, unwind: bb314];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb314];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _126 = move _140;
        StorageDead(_140);
        _641 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb313];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb347];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _705 = discriminant(_127);
        StorageDead(_127);
        goto -> bb291;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _143 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _144, move _150) -> [return: bb57, unwind: bb313];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb313];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _141 = move _155;
        StorageDead(_155);
        _643 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <std::option::Option<anchor_lang::prelude::AccountInfo<'_>> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb312];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb346];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _703 = discriminant(_142);
        StorageDead(_142);
        goto -> bb290;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _158 = std::result::Result::<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _159, move _165) -> [return: bb63, unwind: bb312];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<std::option::Option<anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb312];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _156 = move _170;
        StorageDead(_170);
        _645 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_3);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb311];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb345];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _701 = discriminant(_157);
        StorageDead(_157);
        goto -> bb289;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _173 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _174, move _180) -> [return: bb69, unwind: bb311];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb311];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _171 = move _185;
        StorageDead(_185);
        _647 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_1);
        StorageLive(_191);
        _191 = &mut (*_2);
        StorageLive(_192);
        _192 = &(*_3);
        StorageLive(_193);
        _193 = &mut (*_4);
        StorageLive(_194);
        _194 = &mut (*_5);
        _189 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _190, move _191, move _192, move _193, move _194) -> [return: bb74, unwind: bb311];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb344];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _699 = discriminant(_172);
        StorageDead(_172);
        goto -> bb288;
    }

    bb74: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_195);
        _195 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _188 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _189, move _195) -> [return: bb75, unwind: bb311];
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_189);
        _187 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb76, unwind: bb311];
    }

    bb76: {
        StorageDead(_188);
        _196 = discriminant(_187);
        switchInt(move _196) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_200);
        _200 = move ((_187 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _186 = move _200;
        StorageDead(_200);
        _649 = discriminant(_187);
        StorageDead(_187);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_1);
        StorageLive(_206);
        _206 = &mut (*_2);
        StorageLive(_207);
        _207 = &(*_3);
        StorageLive(_208);
        _208 = &mut (*_4);
        StorageLive(_209);
        _209 = &mut (*_5);
        _204 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateralBumps>>::try_accounts(move _205, move _206, move _207, move _208, move _209) -> [return: bb80, unwind: bb311];
    }

    bb78: {
        StorageLive(_197);
        _197 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _199) -> [return: bb79, unwind: bb343];
    }

    bb79: {
        StorageDead(_199);
        StorageDead(_197);
        _697 = discriminant(_187);
        StorageDead(_187);
        goto -> bb287;
    }

    bb80: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_210);
        _210 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _203 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _204, move _210) -> [return: bb81, unwind: bb311];
    }

    bb81: {
        StorageDead(_210);
        StorageDead(_204);
        _202 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _203) -> [return: bb82, unwind: bb311];
    }

    bb82: {
        StorageDead(_203);
        _211 = discriminant(_202);
        switchInt(move _211) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_215);
        _215 = move ((_202 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _201 = move _215;
        StorageDead(_215);
        _651 = discriminant(_202);
        StorageDead(_202);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_6;
        _219 = &(*_220);
        _218 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _219) -> [return: bb86, unwind: bb310];
    }

    bb84: {
        StorageLive(_212);
        _212 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb85, unwind: bb342];
    }

    bb85: {
        StorageDead(_214);
        StorageDead(_212);
        _695 = discriminant(_202);
        StorageDead(_202);
        goto -> bb286;
    }

    bb86: {
        StorageDead(_219);
        _217 = ((*_218).6: bool);
        switchInt(move _217) -> [0: bb87, otherwise: bb90];
    }

    bb87: {
        StorageDead(_220);
        StorageDead(_218);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = ConstraintMut;
        _223 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _224) -> [return: bb88, unwind: bb310];
    }

    bb88: {
        StorageDead(_224);
        _222 = anchor_lang::error::Error::with_account_name::<&str>(move _223, const "owner") -> [return: bb89, unwind: bb310];
    }

    bb89: {
        StorageDead(_223);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _222);
        StorageDead(_222);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb285;
    }

    bb90: {
        StorageDead(_220);
        StorageDead(_218);
        _216 = const ();
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_21;
        _228 = &(*_229);
        _227 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _228) -> [return: bb91, unwind: bb310];
    }

    bb91: {
        StorageDead(_228);
        _226 = ((*_227).6: bool);
        switchInt(move _226) -> [0: bb92, otherwise: bb95];
    }

    bb92: {
        StorageDead(_229);
        StorageDead(_227);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = ConstraintMut;
        _232 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _233) -> [return: bb93, unwind: bb310];
    }

    bb93: {
        StorageDead(_233);
        _231 = anchor_lang::error::Error::with_account_name::<&str>(move _232, const "obligation") -> [return: bb94, unwind: bb310];
    }

    bb94: {
        StorageDead(_232);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _231);
        StorageDead(_231);
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb285;
    }

    bb95: {
        StorageDead(_229);
        StorageDead(_227);
        _225 = const ();
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_21;
        _240 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load(move _241) -> [return: bb96, unwind: bb310];
    }

    bb96: {
        StorageDead(_241);
        _239 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _240) -> [return: bb97, unwind: bb310];
    }

    bb97: {
        _623 = const true;
        _624 = const true;
        StorageDead(_240);
        _242 = discriminant(_239);
        switchInt(move _242) -> [0: bb98, 1: bb99, otherwise: bb5];
    }

    bb98: {
        StorageLive(_246);
        _246 = move ((_239 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _238 = move _246;
        StorageDead(_246);
        _237 = &_238;
        _236 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _237) -> [return: bb101, unwind: bb309];
    }

    bb99: {
        StorageLive(_243);
        _243 = move ((_239 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_245);
        _245 = move _243;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _245) -> [return: bb100, unwind: bb341];
    }

    bb100: {
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_237);
        _693 = discriminant(_239);
        _623 = const false;
        _624 = const false;
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_236);
        goto -> bb284;
    }

    bb101: {
        StorageDead(_237);
        _235 = ((*_236).2: anchor_lang::prelude::Pubkey);
        drop(_238) -> [return: bb319, unwind: bb341];
    }

    bb102: {
        StorageDead(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &_235;
        StorageLive(_251);
        _251 = &_247;
        _249 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _250, move _251) -> [return: bb103, unwind: bb310];
    }

    bb103: {
        switchInt(move _249) -> [0: bb108, otherwise: bb104];
    }

    bb104: {
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = ConstraintHasOne;
        _255 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _256) -> [return: bb105, unwind: bb310];
    }

    bb105: {
        StorageDead(_256);
        _254 = anchor_lang::error::Error::with_account_name::<&str>(move _255, const "obligation") -> [return: bb106, unwind: bb310];
    }

    bb106: {
        StorageDead(_255);
        StorageLive(_257);
        StorageLive(_258);
        _258 = _235;
        StorageLive(_259);
        _259 = _247;
        _257 = (move _258, move _259);
        StorageDead(_259);
        StorageDead(_258);
        _253 = anchor_lang::error::Error::with_pubkeys(move _254, move _257) -> [return: bb107, unwind: bb310];
    }

    bb107: {
        StorageDead(_257);
        StorageDead(_254);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _253);
        StorageDead(_253);
        StorageDead(_249);
        StorageDead(_247);
        goto -> bb284;
    }

    bb108: {
        StorageDead(_251);
        StorageDead(_250);
        _234 = const ();
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_21;
        _266 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load(move _267) -> [return: bb109, unwind: bb310];
    }

    bb109: {
        StorageDead(_267);
        _265 = <std::result::Result<Ref<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _266) -> [return: bb110, unwind: bb310];
    }

    bb110: {
        _621 = const true;
        _622 = const true;
        StorageDead(_266);
        _268 = discriminant(_265);
        switchInt(move _268) -> [0: bb111, 1: bb112, otherwise: bb5];
    }

    bb111: {
        StorageLive(_272);
        _272 = move ((_265 as Continue).0: std::cell::Ref<'_, state::obligation::Obligation>);
        _264 = move _272;
        StorageDead(_272);
        _263 = &_264;
        _262 = <Ref<'_, obligation::Obligation> as Deref>::deref(move _263) -> [return: bb114, unwind: bb308];
    }

    bb112: {
        StorageLive(_269);
        _269 = move ((_265 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_271);
        _271 = move _269;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _271) -> [return: bb113, unwind: bb340];
    }

    bb113: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_263);
        _691 = discriminant(_265);
        _621 = const false;
        _622 = const false;
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_262);
        goto -> bb283;
    }

    bb114: {
        StorageDead(_263);
        _261 = ((*_262).3: anchor_lang::prelude::Pubkey);
        drop(_264) -> [return: bb320, unwind: bb340];
    }

    bb115: {
        StorageDead(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_261;
        StorageLive(_277);
        _277 = &_273;
        _275 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _276, move _277) -> [return: bb116, unwind: bb310];
    }

    bb116: {
        switchInt(move _275) -> [0: bb121, otherwise: bb117];
    }

    bb117: {
        StorageDead(_277);
        StorageDead(_276);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = ConstraintHasOne;
        _281 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _282) -> [return: bb118, unwind: bb310];
    }

    bb118: {
        StorageDead(_282);
        _280 = anchor_lang::error::Error::with_account_name::<&str>(move _281, const "obligation") -> [return: bb119, unwind: bb310];
    }

    bb119: {
        StorageDead(_281);
        StorageLive(_283);
        StorageLive(_284);
        _284 = _261;
        StorageLive(_285);
        _285 = _273;
        _283 = (move _284, move _285);
        StorageDead(_285);
        StorageDead(_284);
        _279 = anchor_lang::error::Error::with_pubkeys(move _280, move _283) -> [return: bb120, unwind: bb310];
    }

    bb120: {
        StorageDead(_283);
        StorageDead(_280);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _279);
        StorageDead(_279);
        StorageDead(_275);
        StorageDead(_273);
        goto -> bb283;
    }

    bb121: {
        StorageDead(_277);
        StorageDead(_276);
        _260 = const ();
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_261);
        StorageDead(_260);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = const _;
        _294 = &(*_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &_36;
        _299 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _300) -> [return: bb122, unwind: bb310];
    }

    bb122: {
        _298 = &_299;
        StorageDead(_300);
        _297 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _298) -> [return: bb123, unwind: bb310];
    }

    bb123: {
        _296 = &(*_297);
        StorageDead(_298);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &_36;
        _312 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _313) -> [return: bb124, unwind: bb310];
    }

    bb124: {
        StorageDead(_313);
        _311 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _312) -> [return: bb125, unwind: bb310];
    }

    bb125: {
        _606 = const true;
        _607 = const true;
        StorageDead(_312);
        _314 = discriminant(_311);
        switchInt(move _314) -> [0: bb126, 1: bb127, otherwise: bb5];
    }

    bb126: {
        StorageLive(_318);
        _318 = move ((_311 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _310 = move _318;
        StorageDead(_318);
        _309 = &_310;
        _308 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _309) -> [return: bb129, unwind: bb307];
    }

    bb127: {
        StorageLive(_315);
        _315 = move ((_311 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_317);
        _317 = move _315;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _317) -> [return: bb128, unwind: bb339];
    }

    bb128: {
        StorageDead(_317);
        StorageDead(_315);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb329;
    }

    bb129: {
        StorageDead(_309);
        _307 = ((*_308).1: u64);
        _306 = move _307 as u8 (IntToInt);
        StorageDead(_307);
        _305 = [move _306];
        _304 = &_305;
        StorageDead(_306);
        StorageLive(_319);
        _319 = RangeFull;
        _303 = <[u8; 1] as Index<RangeFull>>::index(move _304, move _319) -> [return: bb130, unwind: bb307];
    }

    bb130: {
        StorageDead(_319);
        StorageDead(_304);
        _302 = &(*_303);
        _301 = &(*_302);
        _293 = [move _294, move _296, move _301];
        StorageDead(_301);
        StorageDead(_296);
        StorageDead(_294);
        _292 = &_293;
        _291 = &(*_292);
        _290 = move _291 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_291);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &_1;
        _605 = deref_copy (*_321);
        _320 = &(*_605);
        _289 = anchor_lang::prelude::Pubkey::create_program_address(move _290, move _320) -> [return: bb131, unwind: bb307];
    }

    bb131: {
        StorageDead(_320);
        StorageDead(_290);
        StorageLive(_322);
        _322 = {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18};
        _288 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_deposit_reserve_liquidity_and_obligation_collateral.rs:144:10: 144:18}>(move _289, move _322) -> [return: bb132, unwind: bb307];
    }

    bb132: {
        StorageDead(_322);
        StorageDead(_289);
        _287 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _288) -> [return: bb133, unwind: bb307];
    }

    bb133: {
        StorageDead(_288);
        _323 = discriminant(_287);
        switchInt(move _323) -> [0: bb134, 1: bb135, otherwise: bb5];
    }

    bb134: {
        StorageLive(_327);
        _327 = ((_287 as Continue).0: anchor_lang::prelude::Pubkey);
        _286 = _327;
        StorageDead(_327);
        _657 = discriminant(_287);
        StorageDead(_321);
        drop(_310) -> [return: bb321, unwind: bb339];
    }

    bb135: {
        StorageLive(_324);
        _324 = move ((_287 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_326);
        _326 = move _324;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _326) -> [return: bb136, unwind: bb338];
    }

    bb136: {
        StorageDead(_326);
        StorageDead(_324);
        _687 = discriminant(_287);
        StorageDead(_321);
        drop(_310) -> [return: bb329, unwind: bb339];
    }

    bb137: {
        _330 = &_331;
        StorageDead(_332);
        StorageLive(_333);
        _333 = &_286;
        _329 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _330, move _333) -> [return: bb138, unwind: bb310];
    }

    bb138: {
        switchInt(move _329) -> [0: bb144, otherwise: bb139];
    }

    bb139: {
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_330);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = ConstraintSeeds;
        _337 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _338) -> [return: bb140, unwind: bb310];
    }

    bb140: {
        StorageDead(_338);
        _336 = anchor_lang::error::Error::with_account_name::<&str>(move _337, const "lending_market_authority") -> [return: bb141, unwind: bb310];
    }

    bb141: {
        _620 = const true;
        StorageDead(_337);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &_51;
        _340 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _341) -> [return: bb142, unwind: bb337];
    }

    bb142: {
        StorageDead(_341);
        StorageLive(_342);
        _342 = _286;
        _339 = (move _340, move _342);
        StorageDead(_342);
        StorageDead(_340);
        _620 = const false;
        _335 = anchor_lang::error::Error::with_pubkeys(move _336, move _339) -> [return: bb143, unwind: bb337];
    }

    bb143: {
        StorageDead(_339);
        _620 = const false;
        StorageDead(_336);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _335);
        StorageDead(_335);
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb282;
    }

    bb144: {
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_330);
        _328 = const ();
        StorageDead(_329);
        StorageDead(_328);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &_66;
        _346 = &(*_347);
        _345 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _346) -> [return: bb145, unwind: bb310];
    }

    bb145: {
        StorageDead(_346);
        _344 = ((*_345).6: bool);
        switchInt(move _344) -> [0: bb146, otherwise: bb149];
    }

    bb146: {
        StorageDead(_347);
        StorageDead(_345);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = ConstraintMut;
        _350 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _351) -> [return: bb147, unwind: bb310];
    }

    bb147: {
        StorageDead(_351);
        _349 = anchor_lang::error::Error::with_account_name::<&str>(move _350, const "reserve") -> [return: bb148, unwind: bb310];
    }

    bb148: {
        StorageDead(_350);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _349);
        StorageDead(_349);
        StorageDead(_344);
        StorageDead(_343);
        goto -> bb282;
    }

    bb149: {
        StorageDead(_347);
        StorageDead(_345);
        _343 = const ();
        StorageDead(_344);
        StorageDead(_343);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &_66;
        _358 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _359) -> [return: bb150, unwind: bb310];
    }

    bb150: {
        StorageDead(_359);
        _357 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _358) -> [return: bb151, unwind: bb310];
    }

    bb151: {
        _618 = const true;
        _619 = const true;
        StorageDead(_358);
        _360 = discriminant(_357);
        switchInt(move _360) -> [0: bb152, 1: bb153, otherwise: bb5];
    }

    bb152: {
        StorageLive(_364);
        _364 = move ((_357 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _356 = move _364;
        StorageDead(_364);
        _355 = &_356;
        _354 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _355) -> [return: bb155, unwind: bb306];
    }

    bb153: {
        StorageLive(_361);
        _361 = move ((_357 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_363);
        _363 = move _361;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _363) -> [return: bb154, unwind: bb335];
    }

    bb154: {
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_355);
        _685 = discriminant(_357);
        _618 = const false;
        _619 = const false;
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_354);
        goto -> bb281;
    }

    bb155: {
        StorageDead(_355);
        _353 = ((*_354).2: anchor_lang::prelude::Pubkey);
        drop(_356) -> [return: bb322, unwind: bb335];
    }

    bb156: {
        StorageDead(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &_353;
        StorageLive(_369);
        _369 = &_365;
        _367 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _368, move _369) -> [return: bb157, unwind: bb310];
    }

    bb157: {
        switchInt(move _367) -> [0: bb162, otherwise: bb158];
    }

    bb158: {
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        _374 = ConstraintHasOne;
        _373 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _374) -> [return: bb159, unwind: bb310];
    }

    bb159: {
        StorageDead(_374);
        _372 = anchor_lang::error::Error::with_account_name::<&str>(move _373, const "reserve") -> [return: bb160, unwind: bb310];
    }

    bb160: {
        StorageDead(_373);
        StorageLive(_375);
        StorageLive(_376);
        _376 = _353;
        StorageLive(_377);
        _377 = _365;
        _375 = (move _376, move _377);
        StorageDead(_377);
        StorageDead(_376);
        _371 = anchor_lang::error::Error::with_pubkeys(move _372, move _375) -> [return: bb161, unwind: bb310];
    }

    bb161: {
        StorageDead(_375);
        StorageDead(_372);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _371);
        StorageDead(_371);
        StorageDead(_367);
        StorageDead(_365);
        goto -> bb281;
    }

    bb162: {
        StorageDead(_369);
        StorageDead(_368);
        _352 = const ();
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_353);
        StorageDead(_352);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _747 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _380 = &(*_747);
        _379 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _380) -> [return: bb163, unwind: bb310];
    }

    bb163: {
        StorageDead(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_66;
        _386 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _387) -> [return: bb164, unwind: bb310];
    }

    bb164: {
        StorageDead(_387);
        _385 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _386) -> [return: bb165, unwind: bb310];
    }

    bb165: {
        _616 = const true;
        _617 = const true;
        StorageDead(_386);
        _388 = discriminant(_385);
        switchInt(move _388) -> [0: bb166, 1: bb167, otherwise: bb5];
    }

    bb166: {
        StorageLive(_392);
        _392 = move ((_385 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _384 = move _392;
        StorageDead(_392);
        _383 = &_384;
        _382 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _383) -> [return: bb169, unwind: bb305];
    }

    bb167: {
        StorageLive(_389);
        _389 = move ((_385 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_391);
        _391 = move _389;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _391) -> [return: bb168, unwind: bb334];
    }

    bb168: {
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_383);
        _683 = discriminant(_385);
        _616 = const false;
        _617 = const false;
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_382);
        goto -> bb280;
    }

    bb169: {
        StorageDead(_383);
        _381 = (((*_382).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        drop(_384) -> [return: bb323, unwind: bb334];
    }

    bb170: {
        switchInt(move _393) -> [0: bb175, otherwise: bb171];
    }

    bb171: {
        StorageDead(_395);
        StorageDead(_394);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = ConstraintAddress;
        _399 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _400) -> [return: bb172, unwind: bb310];
    }

    bb172: {
        StorageDead(_400);
        _398 = anchor_lang::error::Error::with_account_name::<&str>(move _399, const "reserve_liquidity_mint") -> [return: bb173, unwind: bb310];
    }

    bb173: {
        StorageDead(_399);
        StorageLive(_401);
        StorageLive(_402);
        _402 = _379;
        StorageLive(_403);
        _403 = _381;
        _401 = (move _402, move _403);
        StorageDead(_403);
        StorageDead(_402);
        _397 = anchor_lang::error::Error::with_pubkeys(move _398, move _401) -> [return: bb174, unwind: bb310];
    }

    bb174: {
        StorageDead(_401);
        StorageDead(_398);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _397);
        StorageDead(_397);
        StorageDead(_393);
        goto -> bb280;
    }

    bb175: {
        StorageDead(_395);
        StorageDead(_394);
        _378 = const ();
        StorageDead(_393);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &_81;
        _409 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _410) -> [return: bb176, unwind: bb310];
    }

    bb176: {
        _408 = &(*_409);
        StorageDead(_410);
        _407 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _408) -> [return: bb177, unwind: bb310];
    }

    bb177: {
        StorageDead(_408);
        _406 = &((*_407).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = &_186;
        _415 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _416) -> [return: bb178, unwind: bb310];
    }

    bb178: {
        _414 = &(*_415);
        StorageDead(_416);
        _413 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _414) -> [return: bb179, unwind: bb310];
    }

    bb179: {
        StorageDead(_414);
        _412 = &_413;
        _411 = &_412;
        _405 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _406, move _411) -> [return: bb180, unwind: bb310];
    }

    bb180: {
        switchInt(move _405) -> [0: bb183, otherwise: bb181];
    }

    bb181: {
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_418);
        StorageLive(_419);
        _419 = ConstraintMintTokenProgram;
        _418 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _419) -> [return: bb182, unwind: bb310];
    }

    bb182: {
        StorageDead(_419);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _418);
        StorageDead(_418);
        StorageDead(_405);
        StorageDead(_404);
        goto -> bb282;
    }

    bb183: {
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_406);
        _404 = const ();
        StorageDead(_405);
        StorageDead(_404);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_96;
        _424 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _425) -> [return: bb184, unwind: bb310];
    }

    bb184: {
        _423 = &(*_424);
        StorageDead(_425);
        _422 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _423) -> [return: bb185, unwind: bb310];
    }

    bb185: {
        StorageDead(_423);
        _421 = ((*_422).6: bool);
        switchInt(move _421) -> [0: bb186, otherwise: bb189];
    }

    bb186: {
        StorageDead(_424);
        StorageDead(_422);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = ConstraintMut;
        _428 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _429) -> [return: bb187, unwind: bb310];
    }

    bb187: {
        StorageDead(_429);
        _427 = anchor_lang::error::Error::with_account_name::<&str>(move _428, const "reserve_liquidity_supply") -> [return: bb188, unwind: bb310];
    }

    bb188: {
        StorageDead(_428);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _427);
        StorageDead(_427);
        StorageDead(_421);
        StorageDead(_420);
        goto -> bb282;
    }

    bb189: {
        StorageDead(_424);
        StorageDead(_422);
        _420 = const ();
        StorageDead(_421);
        StorageDead(_420);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _748 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _432 = &(*_748);
        _431 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _432) -> [return: bb190, unwind: bb310];
    }

    bb190: {
        StorageDead(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = &_66;
        _438 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _439) -> [return: bb191, unwind: bb310];
    }

    bb191: {
        StorageDead(_439);
        _437 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _438) -> [return: bb192, unwind: bb310];
    }

    bb192: {
        _614 = const true;
        _615 = const true;
        StorageDead(_438);
        _440 = discriminant(_437);
        switchInt(move _440) -> [0: bb193, 1: bb194, otherwise: bb5];
    }

    bb193: {
        StorageLive(_444);
        _444 = move ((_437 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _436 = move _444;
        StorageDead(_444);
        _435 = &_436;
        _434 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _435) -> [return: bb196, unwind: bb304];
    }

    bb194: {
        StorageLive(_441);
        _441 = move ((_437 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_443);
        _443 = move _441;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _443) -> [return: bb195, unwind: bb333];
    }

    bb195: {
        StorageDead(_443);
        StorageDead(_441);
        StorageDead(_435);
        _681 = discriminant(_437);
        _614 = const false;
        _615 = const false;
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_434);
        goto -> bb279;
    }

    bb196: {
        StorageDead(_435);
        _433 = (((*_434).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        drop(_436) -> [return: bb324, unwind: bb333];
    }

    bb197: {
        switchInt(move _445) -> [0: bb202, otherwise: bb198];
    }

    bb198: {
        StorageDead(_447);
        StorageDead(_446);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _452 = ConstraintAddress;
        _451 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _452) -> [return: bb199, unwind: bb310];
    }

    bb199: {
        StorageDead(_452);
        _450 = anchor_lang::error::Error::with_account_name::<&str>(move _451, const "reserve_liquidity_supply") -> [return: bb200, unwind: bb310];
    }

    bb200: {
        StorageDead(_451);
        StorageLive(_453);
        StorageLive(_454);
        _454 = _431;
        StorageLive(_455);
        _455 = _433;
        _453 = (move _454, move _455);
        StorageDead(_455);
        StorageDead(_454);
        _449 = anchor_lang::error::Error::with_pubkeys(move _450, move _453) -> [return: bb201, unwind: bb310];
    }

    bb201: {
        StorageDead(_453);
        StorageDead(_450);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _449);
        StorageDead(_449);
        StorageDead(_445);
        goto -> bb279;
    }

    bb202: {
        StorageDead(_447);
        StorageDead(_446);
        _430 = const ();
        StorageDead(_445);
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_430);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = &_111;
        _460 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _461) -> [return: bb203, unwind: bb310];
    }

    bb203: {
        _459 = &(*_460);
        StorageDead(_461);
        _458 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _459) -> [return: bb204, unwind: bb310];
    }

    bb204: {
        StorageDead(_459);
        _457 = ((*_458).6: bool);
        switchInt(move _457) -> [0: bb205, otherwise: bb208];
    }

    bb205: {
        StorageDead(_460);
        StorageDead(_458);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = ConstraintMut;
        _464 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _465) -> [return: bb206, unwind: bb310];
    }

    bb206: {
        StorageDead(_465);
        _463 = anchor_lang::error::Error::with_account_name::<&str>(move _464, const "reserve_collateral_mint") -> [return: bb207, unwind: bb310];
    }

    bb207: {
        StorageDead(_464);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _463);
        StorageDead(_463);
        StorageDead(_457);
        StorageDead(_456);
        goto -> bb282;
    }

    bb208: {
        StorageDead(_460);
        StorageDead(_458);
        _456 = const ();
        StorageDead(_457);
        StorageDead(_456);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        _749 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _468 = &(*_749);
        _467 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _468) -> [return: bb209, unwind: bb310];
    }

    bb209: {
        StorageDead(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = &_66;
        _474 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _475) -> [return: bb210, unwind: bb310];
    }

    bb210: {
        StorageDead(_475);
        _473 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _474) -> [return: bb211, unwind: bb310];
    }

    bb211: {
        _612 = const true;
        _613 = const true;
        StorageDead(_474);
        _476 = discriminant(_473);
        switchInt(move _476) -> [0: bb212, 1: bb213, otherwise: bb5];
    }

    bb212: {
        StorageLive(_480);
        _480 = move ((_473 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _472 = move _480;
        StorageDead(_480);
        _471 = &_472;
        _470 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _471) -> [return: bb215, unwind: bb303];
    }

    bb213: {
        StorageLive(_477);
        _477 = move ((_473 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_479);
        _479 = move _477;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _479) -> [return: bb214, unwind: bb332];
    }

    bb214: {
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_471);
        _679 = discriminant(_473);
        _612 = const false;
        _613 = const false;
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_470);
        goto -> bb278;
    }

    bb215: {
        StorageDead(_471);
        _469 = (((*_470).7: state::reserve::ReserveCollateral).0: anchor_lang::prelude::Pubkey);
        drop(_472) -> [return: bb325, unwind: bb332];
    }

    bb216: {
        switchInt(move _481) -> [0: bb221, otherwise: bb217];
    }

    bb217: {
        StorageDead(_483);
        StorageDead(_482);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        _488 = ConstraintAddress;
        _487 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _488) -> [return: bb218, unwind: bb310];
    }

    bb218: {
        StorageDead(_488);
        _486 = anchor_lang::error::Error::with_account_name::<&str>(move _487, const "reserve_collateral_mint") -> [return: bb219, unwind: bb310];
    }

    bb219: {
        StorageDead(_487);
        StorageLive(_489);
        StorageLive(_490);
        _490 = _467;
        StorageLive(_491);
        _491 = _469;
        _489 = (move _490, move _491);
        StorageDead(_491);
        StorageDead(_490);
        _485 = anchor_lang::error::Error::with_pubkeys(move _486, move _489) -> [return: bb220, unwind: bb310];
    }

    bb220: {
        StorageDead(_489);
        StorageDead(_486);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _485);
        StorageDead(_485);
        StorageDead(_481);
        goto -> bb278;
    }

    bb221: {
        StorageDead(_483);
        StorageDead(_482);
        _466 = const ();
        StorageDead(_481);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_466);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        _497 = &_126;
        _496 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _497) -> [return: bb222, unwind: bb310];
    }

    bb222: {
        _495 = &(*_496);
        StorageDead(_497);
        _494 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _495) -> [return: bb223, unwind: bb310];
    }

    bb223: {
        StorageDead(_495);
        _493 = ((*_494).6: bool);
        switchInt(move _493) -> [0: bb224, otherwise: bb227];
    }

    bb224: {
        StorageDead(_496);
        StorageDead(_494);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = ConstraintMut;
        _500 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _501) -> [return: bb225, unwind: bb310];
    }

    bb225: {
        StorageDead(_501);
        _499 = anchor_lang::error::Error::with_account_name::<&str>(move _500, const "reserve_destination_deposit_collateral") -> [return: bb226, unwind: bb310];
    }

    bb226: {
        StorageDead(_500);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _499);
        StorageDead(_499);
        StorageDead(_493);
        StorageDead(_492);
        goto -> bb282;
    }

    bb227: {
        StorageDead(_496);
        StorageDead(_494);
        _492 = const ();
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        _750 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _504 = &(*_750);
        _503 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _504) -> [return: bb228, unwind: bb310];
    }

    bb228: {
        StorageDead(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &_66;
        _510 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _511) -> [return: bb229, unwind: bb310];
    }

    bb229: {
        StorageDead(_511);
        _509 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _510) -> [return: bb230, unwind: bb310];
    }

    bb230: {
        _610 = const true;
        _611 = const true;
        StorageDead(_510);
        _512 = discriminant(_509);
        switchInt(move _512) -> [0: bb231, 1: bb232, otherwise: bb5];
    }

    bb231: {
        StorageLive(_516);
        _516 = move ((_509 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _508 = move _516;
        StorageDead(_516);
        _507 = &_508;
        _506 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _507) -> [return: bb234, unwind: bb302];
    }

    bb232: {
        StorageLive(_513);
        _513 = move ((_509 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_515);
        _515 = move _513;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _515) -> [return: bb233, unwind: bb331];
    }

    bb233: {
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_507);
        _677 = discriminant(_509);
        _610 = const false;
        _611 = const false;
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_506);
        goto -> bb277;
    }

    bb234: {
        StorageDead(_507);
        _505 = (((*_506).7: state::reserve::ReserveCollateral).2: anchor_lang::prelude::Pubkey);
        drop(_508) -> [return: bb326, unwind: bb331];
    }

    bb235: {
        switchInt(move _517) -> [0: bb240, otherwise: bb236];
    }

    bb236: {
        StorageDead(_519);
        StorageDead(_518);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = ConstraintAddress;
        _523 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _524) -> [return: bb237, unwind: bb310];
    }

    bb237: {
        StorageDead(_524);
        _522 = anchor_lang::error::Error::with_account_name::<&str>(move _523, const "reserve_destination_deposit_collateral") -> [return: bb238, unwind: bb310];
    }

    bb238: {
        StorageDead(_523);
        StorageLive(_525);
        StorageLive(_526);
        _526 = _503;
        StorageLive(_527);
        _527 = _505;
        _525 = (move _526, move _527);
        StorageDead(_527);
        StorageDead(_526);
        _521 = anchor_lang::error::Error::with_pubkeys(move _522, move _525) -> [return: bb239, unwind: bb310];
    }

    bb239: {
        StorageDead(_525);
        StorageDead(_522);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _521);
        StorageDead(_521);
        StorageDead(_517);
        goto -> bb277;
    }

    bb240: {
        StorageDead(_519);
        StorageDead(_518);
        _502 = const ();
        StorageDead(_517);
        StorageDead(_505);
        StorageDead(_503);
        StorageDead(_502);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        _533 = &_141;
        _532 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _533) -> [return: bb241, unwind: bb310];
    }

    bb241: {
        _531 = &(*_532);
        StorageDead(_533);
        _530 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _531) -> [return: bb242, unwind: bb310];
    }

    bb242: {
        StorageDead(_531);
        _529 = ((*_530).6: bool);
        switchInt(move _529) -> [0: bb243, otherwise: bb246];
    }

    bb243: {
        StorageDead(_532);
        StorageDead(_530);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = ConstraintMut;
        _536 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _537) -> [return: bb244, unwind: bb310];
    }

    bb244: {
        StorageDead(_537);
        _535 = anchor_lang::error::Error::with_account_name::<&str>(move _536, const "user_source_liquidity") -> [return: bb245, unwind: bb310];
    }

    bb245: {
        StorageDead(_536);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _535);
        StorageDead(_535);
        StorageDead(_529);
        StorageDead(_528);
        goto -> bb282;
    }

    bb246: {
        StorageDead(_532);
        StorageDead(_530);
        _528 = const ();
        StorageDead(_529);
        StorageDead(_528);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        _751 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _545 = &(*_751);
        _544 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _545) -> [return: bb247, unwind: bb310];
    }

    bb247: {
        _543 = &(*_544);
        _542 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _543) -> [return: bb248, unwind: bb310];
    }

    bb248: {
        StorageDead(_545);
        StorageDead(_543);
        _541 = &((*_542).1: anchor_lang::prelude::Pubkey);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = &_6;
        _547 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _548) -> [return: bb249, unwind: bb310];
    }

    bb249: {
        _546 = &_547;
        StorageDead(_548);
        _540 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _541, move _546) -> [return: bb250, unwind: bb310];
    }

    bb250: {
        switchInt(move _540) -> [0: bb253, otherwise: bb251];
    }

    bb251: {
        StorageDead(_547);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_541);
        StorageLive(_550);
        StorageLive(_551);
        _551 = ConstraintTokenOwner;
        _550 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _551) -> [return: bb252, unwind: bb310];
    }

    bb252: {
        StorageDead(_551);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _550);
        StorageDead(_550);
        StorageDead(_540);
        StorageDead(_539);
        goto -> bb276;
    }

    bb253: {
        StorageDead(_547);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_541);
        _539 = const ();
        StorageDead(_540);
        StorageDead(_539);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        _752 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _557 = &(*_752);
        _556 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _557) -> [return: bb254, unwind: bb310];
    }

    bb254: {
        _555 = &(*_556);
        _554 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _555) -> [return: bb255, unwind: bb310];
    }

    bb255: {
        StorageDead(_557);
        StorageDead(_555);
        _553 = &((*_554).0: anchor_lang::prelude::Pubkey);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &_66;
        _565 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _566) -> [return: bb256, unwind: bb310];
    }

    bb256: {
        StorageDead(_566);
        _564 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _565) -> [return: bb257, unwind: bb310];
    }

    bb257: {
        _608 = const true;
        _609 = const true;
        StorageDead(_565);
        _567 = discriminant(_564);
        switchInt(move _567) -> [0: bb258, 1: bb259, otherwise: bb5];
    }

    bb258: {
        StorageLive(_571);
        _571 = move ((_564 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _563 = move _571;
        StorageDead(_571);
        _562 = &_563;
        _561 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _562) -> [return: bb261, unwind: bb301];
    }

    bb259: {
        StorageLive(_568);
        _568 = move ((_564 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_570);
        _570 = move _568;
        _0 = <std::result::Result<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _570) -> [return: bb260, unwind: bb330];
    }

    bb260: {
        StorageDead(_570);
        StorageDead(_568);
        StorageDead(_562);
        StorageDead(_560);
        _675 = discriminant(_564);
        _608 = const false;
        _609 = const false;
        StorageDead(_564);
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_553);
        goto -> bb275;
    }

    bb261: {
        StorageDead(_562);
        _560 = &(((*_561).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        _559 = <anchor_lang::prelude::Pubkey as anchor_lang::Key>::key(move _560) -> [return: bb262, unwind: bb301];
    }

    bb262: {
        _558 = &_559;
        StorageDead(_560);
        _552 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _553, move _558) -> [return: bb263, unwind: bb301];
    }

    bb263: {
        switchInt(move _552) -> [0: bb266, otherwise: bb264];
    }

    bb264: {
        drop(_563) -> [return: bb327, unwind: bb330];
    }

    bb265: {
        StorageDead(_574);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _573);
        StorageDead(_573);
        goto -> bb275;
    }

    bb266: {
        drop(_563) -> [return: bb328, unwind: bb330];
    }

    bb267: {
        StorageDead(_577);
        StorageLive(_578);
        _578 = <Instructions as SysvarId>::id() -> [return: bb268, unwind: bb310];
    }

    bb268: {
        StorageLive(_579);
        StorageLive(_580);
        _580 = &_576;
        StorageLive(_581);
        _581 = &_578;
        _579 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _580, move _581) -> [return: bb269, unwind: bb310];
    }

    bb269: {
        switchInt(move _579) -> [0: bb274, otherwise: bb270];
    }

    bb270: {
        StorageDead(_581);
        StorageDead(_580);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = ConstraintAddress;
        _585 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _586) -> [return: bb271, unwind: bb310];
    }

    bb271: {
        StorageDead(_586);
        _584 = anchor_lang::error::Error::with_account_name::<&str>(move _585, const "instruction_sysvar_account") -> [return: bb272, unwind: bb310];
    }

    bb272: {
        StorageDead(_585);
        StorageLive(_587);
        StorageLive(_588);
        _588 = _576;
        StorageLive(_589);
        _589 = _578;
        _587 = (move _588, move _589);
        StorageDead(_589);
        StorageDead(_588);
        _583 = anchor_lang::error::Error::with_pubkeys(move _584, move _587) -> [return: bb273, unwind: bb310];
    }

    bb273: {
        StorageDead(_587);
        StorageDead(_584);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Err(move _583);
        StorageDead(_583);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_575);
        goto -> bb282;
    }

    bb274: {
        StorageDead(_581);
        StorageDead(_580);
        _575 = const ();
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_575);
        StorageLive(_590);
        StorageLive(_591);
        _591 = move _6;
        StorageLive(_592);
        _592 = move _21;
        StorageLive(_593);
        _593 = move _36;
        StorageLive(_594);
        _594 = move _51;
        StorageLive(_595);
        _595 = move _66;
        StorageLive(_596);
        _596 = move _81;
        StorageLive(_597);
        _597 = move _96;
        StorageLive(_598);
        _598 = move _111;
        StorageLive(_599);
        _599 = move _126;
        StorageLive(_600);
        _600 = move _141;
        StorageLive(_601);
        _601 = move _156;
        StorageLive(_602);
        _602 = move _171;
        StorageLive(_603);
        _603 = move _186;
        StorageLive(_604);
        _604 = move _201;
        _590 = handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral::<'_> { owner: move _591, obligation: move _592, lending_market: move _593, lending_market_authority: move _594, reserve: move _595, reserve_liquidity_mint: move _596, reserve_liquidity_supply: move _597, reserve_collateral_mint: move _598, reserve_destination_deposit_collateral: move _599, user_source_liquidity: move _600, placeholder_user_destination_collateral: move _601, collateral_token_program: move _602, liquidity_token_program: move _603, instruction_sysvar_account: move _604 };
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_598);
        StorageDead(_597);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_593);
        StorageDead(_592);
        StorageDead(_591);
        _0 = std::result::Result::<handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral<'_>, anchor_lang::error::Error>::Ok(move _590);
        StorageDead(_590);
        StorageDead(_286);
        StorageDead(_201);
        StorageDead(_186);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb300;
    }

    bb275: {
        StorageDead(_552);
        goto -> bb276;
    }

    bb276: {
        StorageDead(_538);
        goto -> bb282;
    }

    bb277: {
        StorageDead(_505);
        StorageDead(_503);
        StorageDead(_502);
        goto -> bb282;
    }

    bb278: {
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_466);
        goto -> bb282;
    }

    bb279: {
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_430);
        goto -> bb282;
    }

    bb280: {
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_378);
        goto -> bb282;
    }

    bb281: {
        StorageDead(_353);
        StorageDead(_352);
        goto -> bb282;
    }

    bb282: {
        StorageDead(_286);
        goto -> bb285;
    }

    bb283: {
        StorageDead(_261);
        StorageDead(_260);
        goto -> bb285;
    }

    bb284: {
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb285;
    }

    bb285: {
        drop(_201) -> [return: bb286, unwind: bb311];
    }

    bb286: {
        StorageDead(_201);
        goto -> bb287;
    }

    bb287: {
        StorageDead(_186);
        goto -> bb288;
    }

    bb288: {
        StorageDead(_171);
        drop(_156) -> [return: bb289, unwind: bb312];
    }

    bb289: {
        StorageDead(_156);
        drop(_141) -> [return: bb290, unwind: bb313];
    }

    bb290: {
        StorageDead(_141);
        drop(_126) -> [return: bb291, unwind: bb314];
    }

    bb291: {
        StorageDead(_126);
        drop(_111) -> [return: bb292, unwind: bb315];
    }

    bb292: {
        StorageDead(_111);
        drop(_96) -> [return: bb293, unwind: bb316];
    }

    bb293: {
        StorageDead(_96);
        drop(_81) -> [return: bb294, unwind: bb317];
    }

    bb294: {
        StorageDead(_81);
        goto -> bb295;
    }

    bb295: {
        StorageDead(_66);
        drop(_51) -> [return: bb296, unwind: bb318];
    }

    bb296: {
        StorageDead(_51);
        goto -> bb297;
    }

    bb297: {
        StorageDead(_36);
        goto -> bb298;
    }

    bb298: {
        StorageDead(_21);
        goto -> bb299;
    }

    bb299: {
        StorageDead(_6);
        goto -> bb300;
    }

    bb300: {
        return;
    }

    bb301 (cleanup): {
        drop(_563) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb302 (cleanup): {
        drop(_508) -> [return: bb331, unwind terminate(cleanup)];
    }

    bb303 (cleanup): {
        drop(_472) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb304 (cleanup): {
        drop(_436) -> [return: bb333, unwind terminate(cleanup)];
    }

    bb305 (cleanup): {
        drop(_384) -> [return: bb334, unwind terminate(cleanup)];
    }

    bb306 (cleanup): {
        drop(_356) -> [return: bb335, unwind terminate(cleanup)];
    }

    bb307 (cleanup): {
        drop(_310) -> [return: bb339, unwind terminate(cleanup)];
    }

    bb308 (cleanup): {
        drop(_264) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb309 (cleanup): {
        drop(_238) -> [return: bb341, unwind terminate(cleanup)];
    }

    bb310 (cleanup): {
        drop(_201) -> [return: bb311, unwind terminate(cleanup)];
    }

    bb311 (cleanup): {
        drop(_156) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb312 (cleanup): {
        drop(_141) -> [return: bb313, unwind terminate(cleanup)];
    }

    bb313 (cleanup): {
        drop(_126) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb314 (cleanup): {
        drop(_111) -> [return: bb315, unwind terminate(cleanup)];
    }

    bb315 (cleanup): {
        drop(_96) -> [return: bb316, unwind terminate(cleanup)];
    }

    bb316 (cleanup): {
        drop(_81) -> [return: bb317, unwind terminate(cleanup)];
    }

    bb317 (cleanup): {
        drop(_51) -> [return: bb318, unwind terminate(cleanup)];
    }

    bb318 (cleanup): {
        resume;
    }

    bb319: {
        _653 = discriminant(_239);
        _623 = const false;
        _624 = const false;
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_236);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &_36;
        _247 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _248) -> [return: bb102, unwind: bb310];
    }

    bb320: {
        _655 = discriminant(_265);
        _621 = const false;
        _622 = const false;
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_262);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_6;
        _273 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _274) -> [return: bb115, unwind: bb310];
    }

    bb321: {
        _659 = discriminant(_311);
        _606 = const false;
        _607 = const false;
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_299);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_287);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_51;
        _331 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _332) -> [return: bb137, unwind: bb310];
    }

    bb322: {
        _661 = discriminant(_357);
        _618 = const false;
        _619 = const false;
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_354);
        StorageLive(_365);
        StorageLive(_366);
        _366 = &_36;
        _365 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _366) -> [return: bb156, unwind: bb310];
    }

    bb323: {
        _663 = discriminant(_385);
        _616 = const false;
        _617 = const false;
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_382);
        StorageLive(_393);
        StorageLive(_394);
        _394 = &_379;
        StorageLive(_395);
        _395 = &_381;
        _393 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _394, move _395) -> [return: bb170, unwind: bb310];
    }

    bb324: {
        _665 = discriminant(_437);
        _614 = const false;
        _615 = const false;
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_434);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &_431;
        StorageLive(_447);
        _447 = &_433;
        _445 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _446, move _447) -> [return: bb197, unwind: bb310];
    }

    bb325: {
        _667 = discriminant(_473);
        _612 = const false;
        _613 = const false;
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_470);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &_467;
        StorageLive(_483);
        _483 = &_469;
        _481 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _482, move _483) -> [return: bb216, unwind: bb310];
    }

    bb326: {
        _669 = discriminant(_509);
        _610 = const false;
        _611 = const false;
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_506);
        StorageLive(_517);
        StorageLive(_518);
        _518 = &_503;
        StorageLive(_519);
        _519 = &_505;
        _517 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _518, move _519) -> [return: bb235, unwind: bb310];
    }

    bb327: {
        _671 = discriminant(_564);
        _608 = const false;
        _609 = const false;
        StorageDead(_564);
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_553);
        StorageLive(_573);
        StorageLive(_574);
        _574 = ConstraintTokenMint;
        _573 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _574) -> [return: bb265, unwind: bb310];
    }

    bb328: {
        _673 = discriminant(_564);
        _608 = const false;
        _609 = const false;
        StorageDead(_564);
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_554);
        StorageDead(_553);
        _538 = const ();
        StorageDead(_552);
        StorageDead(_538);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        _577 = &_201;
        _576 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _577) -> [return: bb267, unwind: bb310];
    }

    bb329: {
        _689 = discriminant(_311);
        _606 = const false;
        _607 = const false;
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_299);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_287);
        goto -> bb282;
    }

    bb330 (cleanup): {
        _723 = discriminant(_564);
        goto -> bb310;
    }

    bb331 (cleanup): {
        _724 = discriminant(_509);
        goto -> bb310;
    }

    bb332 (cleanup): {
        _725 = discriminant(_473);
        goto -> bb310;
    }

    bb333 (cleanup): {
        _726 = discriminant(_437);
        goto -> bb310;
    }

    bb334 (cleanup): {
        _727 = discriminant(_385);
        goto -> bb310;
    }

    bb335 (cleanup): {
        _728 = discriminant(_357);
        goto -> bb310;
    }

    bb336 (cleanup): {
        drop(_336) -> [return: bb310, unwind terminate(cleanup)];
    }

    bb337 (cleanup): {
        switchInt(_620) -> [0: bb310, otherwise: bb336];
    }

    bb338 (cleanup): {
        _729 = discriminant(_287);
        goto -> bb307;
    }

    bb339 (cleanup): {
        _730 = discriminant(_311);
        goto -> bb310;
    }

    bb340 (cleanup): {
        _731 = discriminant(_265);
        goto -> bb310;
    }

    bb341 (cleanup): {
        _732 = discriminant(_239);
        goto -> bb310;
    }

    bb342 (cleanup): {
        _733 = discriminant(_202);
        goto -> bb311;
    }

    bb343 (cleanup): {
        _734 = discriminant(_187);
        goto -> bb311;
    }

    bb344 (cleanup): {
        _735 = discriminant(_172);
        goto -> bb311;
    }

    bb345 (cleanup): {
        _736 = discriminant(_157);
        goto -> bb312;
    }

    bb346 (cleanup): {
        _737 = discriminant(_142);
        goto -> bb313;
    }

    bb347 (cleanup): {
        _738 = discriminant(_127);
        goto -> bb314;
    }

    bb348 (cleanup): {
        _739 = discriminant(_112);
        goto -> bb315;
    }

    bb349 (cleanup): {
        _740 = discriminant(_97);
        goto -> bb316;
    }

    bb350 (cleanup): {
        _741 = discriminant(_82);
        goto -> bb317;
    }

    bb351 (cleanup): {
        _742 = discriminant(_67);
        goto -> bb317;
    }

    bb352 (cleanup): {
        _743 = discriminant(_52);
        goto -> bb318;
    }

    bb353 (cleanup): {
        _744 = discriminant(_37);
        goto -> bb318;
    }

    bb354 (cleanup): {
        _745 = discriminant(_22);
        goto -> bb318;
    }

    bb355 (cleanup): {
        _746 = discriminant(_7);
        goto -> bb318;
    }
}
