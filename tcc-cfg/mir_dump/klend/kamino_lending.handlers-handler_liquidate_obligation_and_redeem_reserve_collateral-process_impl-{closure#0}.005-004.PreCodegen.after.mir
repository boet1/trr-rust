// MIR for `handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_impl::{closure#0}` after PreCodegen

fn handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::process_impl::{closure#0}(_1: &mut {closure@programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:154:39: 154:42}, _2: &anchor_lang::prelude::AccountInfo<'_>) -> account_loader_trait::FatAccountLoader<'_, reserve::Reserve> {
    debug a => _2;
    let mut _0: utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>;
    let mut _3: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _4: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: &str;
    let _6: &str;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_2);
        _3 = account_loader_trait::FatAccountLoader::<'_, reserve::Reserve>::try_from(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Remaining account is not a valid deposit reserve";
        _5 = &(*_6);
        _0 = std::result::Result::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::expect(move _3, move _5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_6);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
