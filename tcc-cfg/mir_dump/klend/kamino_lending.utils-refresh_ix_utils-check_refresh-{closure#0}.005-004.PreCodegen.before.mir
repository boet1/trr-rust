// MIR for `refresh_ix_utils::check_refresh::{closure#0}` before PreCodegen

fn refresh_ix_utils::check_refresh::{closure#0}(_1: &{closure@programs\klend\src\utils\refresh_ix_utils.rs:68:22: 68:93}, _2: Vec<RequiredIx>, _3: AppendedIxType) -> std::result::Result<(), anchor_lang::error::Error> {
    debug required_ixns => _2;
    debug ix_type => _3;
    debug current_idx => (*((*_1).0: &usize));
    debug ix_loader => (*((*_1).1: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>));
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _6: std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _7: std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>;
    let mut _8: &[utils::refresh_ix_utils::RequiredIx];
    let _9: &[utils::refresh_ix_utils::RequiredIx];
    let mut _10: &std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let mut _11: std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _12: ();
    let _13: ();
    let mut _14: std::option::Option<(usize, &utils::refresh_ix_utils::RequiredIx)>;
    let mut _15: &mut std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _16: &mut std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _17: isize;
    let mut _18: !;
    let mut _22: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, usize>;
    let mut _24: std::result::Result<usize, anchor_lang::error::Error>;
    let mut _25: std::option::Option<usize>;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: (usize, bool);
    let mut _30: {closure@programs\klend\src\utils\refresh_ix_utils.rs:71:85: 71:87};
    let mut _31: &usize;
    let mut _32: &usize;
    let mut _33: &&utils::refresh_ix_utils::RequiredIx;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, usize>;
    let mut _40: std::result::Result<usize, anchor_lang::error::Error>;
    let mut _41: std::option::Option<usize>;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: (usize, bool);
    let mut _46: {closure@programs\klend\src\utils\refresh_ix_utils.rs:80:86: 80:88};
    let mut _47: &usize;
    let mut _48: &usize;
    let mut _49: &&utils::refresh_ix_utils::RequiredIx;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, solana_program::instruction::Instruction>;
    let mut _57: std::result::Result<solana_program::instruction::Instruction, LendingError>;
    let mut _58: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _59: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _60: usize;
    let mut _61: {closure@programs\klend\src\utils\refresh_ix_utils.rs:93:26: 93:29};
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _68: std::result::Result<[u8; 8], std::array::TryFromSliceError>;
    let mut _69: &[u8];
    let _70: &[u8];
    let mut _71: &std::vec::Vec<u8>;
    let mut _72: std::ops::Range<usize>;
    let _73: ();
    let mut _74: bool;
    let mut _75: &anchor_lang::prelude::Pubkey;
    let mut _76: &anchor_lang::prelude::Pubkey;
    let _77: anchor_lang::prelude::Pubkey;
    let mut _78: !;
    let mut _79: anchor_lang::error::Error;
    let mut _80: anchor_lang::error::Error;
    let mut _81: anchor_lang::error::AnchorError;
    let mut _82: std::string::String;
    let mut _83: &anchor_lang::error::ErrorCode;
    let _84: anchor_lang::error::ErrorCode;
    let mut _85: u32;
    let mut _86: anchor_lang::error::ErrorCode;
    let mut _87: std::string::String;
    let mut _88: &anchor_lang::error::ErrorCode;
    let _89: anchor_lang::error::ErrorCode;
    let mut _90: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _91: anchor_lang::error::ErrorOrigin;
    let mut _92: anchor_lang::error::Source;
    let mut _93: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _94: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _95: anchor_lang::prelude::Pubkey;
    let mut _96: anchor_lang::prelude::Pubkey;
    let mut _98: &[u8; 8];
    let mut _99: &[u8; 8];
    let _100: [u8; 8];
    let mut _101: &utils::refresh_ix_utils::RequiredIx;
    let _102: ();
    let mut _103: bool;
    let mut _104: std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _105: std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _106: std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>;
    let mut _107: &[utils::refresh_ix_utils::RequiredIx];
    let _108: &[utils::refresh_ix_utils::RequiredIx];
    let mut _109: &std::vec::Vec<utils::refresh_ix_utils::RequiredIx>;
    let _111: ();
    let mut _112: std::option::Option<(usize, &utils::refresh_ix_utils::RequiredIx)>;
    let mut _113: &mut std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _114: &mut std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
    let mut _115: isize;
    let mut _116: !;
    let _119: ();
    let mut _120: &str;
    let _121: &str;
    let mut _122: &std::string::String;
    let _123: &std::string::String;
    let _124: std::string::String;
    let mut _126: std::fmt::Arguments<'_>;
    let mut _127: &[&str];
    let mut _128: &[&str; 2];
    let _129: &[&str; 2];
    let _130: [&str; 2];
    let mut _131: &[core::fmt::rt::Argument<'_>];
    let mut _132: &[core::fmt::rt::Argument<'_>; 2];
    let _133: &[core::fmt::rt::Argument<'_>; 2];
    let _134: [core::fmt::rt::Argument<'_>; 2];
    let mut _135: core::fmt::rt::Argument<'_>;
    let mut _136: &usize;
    let _137: &usize;
    let mut _138: core::fmt::rt::Argument<'_>;
    let mut _139: &&utils::refresh_ix_utils::RequiredIx;
    let _140: &&utils::refresh_ix_utils::RequiredIx;
    let _141: ();
    let mut _142: bool;
    let mut _143: !;
    let mut _144: anchor_lang::error::Error;
    let mut _145: anchor_lang::error::AnchorError;
    let mut _146: std::string::String;
    let mut _147: &LendingError;
    let _148: LendingError;
    let mut _149: u32;
    let mut _150: LendingError;
    let mut _151: std::string::String;
    let mut _152: &LendingError;
    let _153: LendingError;
    let mut _154: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _155: anchor_lang::error::ErrorOrigin;
    let mut _156: anchor_lang::error::Source;
    let mut _157: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _158: std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize)>;
    let mut _159: std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize)>;
    let mut _160: &[(anchor_lang::prelude::Pubkey, usize)];
    let _161: &[(anchor_lang::prelude::Pubkey, usize)];
    let mut _162: &std::vec::Vec<(anchor_lang::prelude::Pubkey, usize)>;
    let _164: ();
    let mut _165: std::option::Option<&(anchor_lang::prelude::Pubkey, usize)>;
    let mut _166: &mut std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize)>;
    let mut _167: &mut std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize)>;
    let mut _168: isize;
    let mut _169: !;
    let _172: ();
    let mut _173: bool;
    let mut _174: &anchor_lang::prelude::Pubkey;
    let _175: &anchor_lang::prelude::AccountMeta;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, &anchor_lang::prelude::AccountMeta>;
    let mut _177: std::result::Result<&anchor_lang::prelude::AccountMeta, LendingError>;
    let mut _178: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _179: &[anchor_lang::prelude::AccountMeta];
    let _180: &[anchor_lang::prelude::AccountMeta];
    let mut _181: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _182: usize;
    let mut _183: LendingError;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _189: &anchor_lang::prelude::Pubkey;
    let mut _190: !;
    let mut _191: anchor_lang::error::Error;
    let mut _192: anchor_lang::error::Error;
    let mut _193: anchor_lang::error::AnchorError;
    let mut _194: std::string::String;
    let mut _195: &anchor_lang::error::ErrorCode;
    let _196: anchor_lang::error::ErrorCode;
    let mut _197: u32;
    let mut _198: anchor_lang::error::ErrorCode;
    let mut _199: std::string::String;
    let mut _200: &anchor_lang::error::ErrorCode;
    let _201: anchor_lang::error::ErrorCode;
    let mut _202: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _203: anchor_lang::error::ErrorOrigin;
    let mut _204: anchor_lang::error::Source;
    let mut _205: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _206: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _207: anchor_lang::prelude::Pubkey;
    let mut _208: &anchor_lang::prelude::AccountMeta;
    let mut _209: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, &anchor_lang::prelude::AccountMeta>;
    let mut _210: std::result::Result<&anchor_lang::prelude::AccountMeta, LendingError>;
    let mut _211: std::option::Option<&anchor_lang::prelude::AccountMeta>;
    let mut _212: &[anchor_lang::prelude::AccountMeta];
    let _213: &[anchor_lang::prelude::AccountMeta];
    let mut _214: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _215: usize;
    let mut _216: LendingError;
    let mut _217: isize;
    let mut _219: !;
    let mut _220: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _222: anchor_lang::prelude::Pubkey;
    let mut _223: ();
    let mut _231: &usize;
    let mut _232: &usize;
    let mut _233: &usize;
    let mut _234: &usize;
    let mut _235: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _236: &(anchor_lang::prelude::Pubkey, usize);
    let mut _237: &(anchor_lang::prelude::Pubkey, usize);
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    scope 1 {
        debug iter => _11;
        let _19: usize;
        let _20: &utils::refresh_ix_utils::RequiredIx;
        scope 2 {
            debug i => _19;
            debug required_ix => _20;
            let _21: usize;
            let _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _38: usize;
            let _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _54: usize;
            scope 3 {
                debug offset => _21;
                let _55: solana_program::instruction::Instruction;
                let _63: std::result::Result<std::convert::Infallible, LendingError>;
                let _66: solana_program::instruction::Instruction;
                scope 12 {
                    debug ix => _55;
                    let _67: [u8; 8];
                    scope 17 {
                        debug ix_discriminator => _67;
                        let _97: bool;
                        let mut _224: &anchor_lang::error::ErrorCode;
                        let mut _225: &anchor_lang::error::ErrorCode;
                        scope 18 {
                            debug ix_discriminator_matches => _97;
                            let mut _110: std::iter::Enumerate<std::slice::Iter<'_, utils::refresh_ix_utils::RequiredIx>>;
                            let mut _163: std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize)>;
                            let mut _228: &LendingError;
                            let mut _229: &LendingError;
                            scope 19 {
                                debug iter => _110;
                                let _117: usize;
                                let _118: &utils::refresh_ix_utils::RequiredIx;
                                scope 20 {
                                    debug i => _117;
                                    debug ix => _118;
                                    let _125: std::string::String;
                                    let mut _230: &[&str; 2];
                                    scope 21 {
                                        debug res => _125;
                                    }
                                }
                            }
                            scope 22 {
                                debug iter => _163;
                                let _170: &anchor_lang::prelude::Pubkey;
                                let _171: &usize;
                                scope 23 {
                                    debug key => _170;
                                    debug index => _171;
                                    let _185: std::result::Result<std::convert::Infallible, LendingError>;
                                    let _188: &anchor_lang::prelude::AccountMeta;
                                    let _218: std::result::Result<std::convert::Infallible, LendingError>;
                                    let _221: &anchor_lang::prelude::AccountMeta;
                                    let mut _226: &anchor_lang::error::ErrorCode;
                                    let mut _227: &anchor_lang::error::ErrorCode;
                                    scope 24 {
                                        debug residual => _185;
                                        scope 25 {
                                        }
                                    }
                                    scope 26 {
                                        debug val => _188;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug residual => _218;
                                        scope 29 {
                                        }
                                    }
                                    scope 30 {
                                        debug val => _221;
                                        scope 31 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _63;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _66;
                    scope 16 {
                    }
                }
            }
            scope 4 {
                debug residual => _35;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _38;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _51;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _54;
                scope 11 {
                }
            }
        }
    }

    bb0: {
        _239 = const false;
        _238 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_2;
        _9 = <Vec<RequiredIx> as Deref>::deref(move _10) -> [return: bb1, unwind: bb115];
    }

    bb1: {
        _8 = &(*_9);
        StorageDead(_10);
        _7 = core::slice::<impl [RequiredIx]>::iter(move _8) -> [return: bb2, unwind: bb115];
    }

    bb2: {
        StorageDead(_8);
        _6 = <std::slice::Iter<'_, RequiredIx> as Iterator>::enumerate(move _7) -> [return: bb3, unwind: bb115];
    }

    bb3: {
        StorageDead(_7);
        _5 = <Enumerate<std::slice::Iter<'_, RequiredIx>> as IntoIterator>::into_iter(move _6) -> [return: bb4, unwind: bb115];
    }

    bb4: {
        StorageDead(_6);
        StorageLive(_11);
        _11 = move _5;
        goto -> bb5;
    }

    bb5: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _11;
        _15 = &mut (*_16);
        _14 = <Enumerate<std::slice::Iter<'_, RequiredIx>> as Iterator>::next(move _15) -> [return: bb6, unwind: bb115];
    }

    bb6: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_19);
        _19 = (((_14 as Some).0: (usize, &utils::refresh_ix_utils::RequiredIx)).0: usize);
        StorageLive(_20);
        _20 = (((_14 as Some).0: (usize, &utils::refresh_ix_utils::RequiredIx)).1: &utils::refresh_ix_utils::RequiredIx);
        StorageLive(_21);
        _22 = discriminant(_3);
        switchInt(move _22) -> [0: bb11, 1: bb10, otherwise: bb8];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _4 = const ();
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_223);
        _223 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _223);
        StorageDead(_223);
        drop(_2) -> [return: bb109, unwind: bb116];
    }

    bb10: {
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _231 = deref_copy ((*_1).0: &usize);
        _42 = (*_231);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _19;
        _45 = CheckedAdd(_44, const 1_usize);
        assert(!move (_45.1: bool), "attempt to compute `{} + {}`, which would overflow", move _44, const 1_usize) -> [success: bb19, unwind: bb115];
    }

    bb11: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _232 = deref_copy ((*_1).0: &usize);
        _26 = (*_232);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _19;
        _29 = CheckedAdd(_28, const 1_usize);
        assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, const 1_usize) -> [success: bb12, unwind: bb115];
    }

    bb12: {
        _27 = move (_29.0: usize);
        StorageDead(_28);
        _25 = core::num::<impl usize>::checked_sub(move _26, move _27) -> [return: bb13, unwind: bb115];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_30);
        StorageLive(_31);
        _233 = deref_copy ((*_1).0: &usize);
        _31 = &(*_233);
        StorageLive(_32);
        _32 = &_19;
        StorageLive(_33);
        _33 = &_20;
        _30 = {closure@programs\klend\src\utils\refresh_ix_utils.rs:71:85: 71:87} { current_idx: move _31, i: move _32, required_ix: move _33 };
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        _24 = std::option::Option::<usize>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\utils\refresh_ix_utils.rs:71:85: 71:87}>(move _25, move _30) -> [return: bb14, unwind: bb115];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_25);
        _23 = <std::result::Result<usize, anchor_lang::error::Error> as Try>::branch(move _24) -> [return: bb15, unwind: bb115];
    }

    bb15: {
        StorageDead(_24);
        _34 = discriminant(_23);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb8];
    }

    bb16: {
        StorageLive(_38);
        _38 = ((_23 as Continue).0: usize);
        _21 = _38;
        StorageDead(_38);
        _240 = discriminant(_23);
        StorageDead(_23);
        goto -> bb26;
    }

    bb17: {
        StorageLive(_35);
        _35 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _37) -> [return: bb18, unwind: bb123];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_35);
        _250 = discriminant(_23);
        StorageDead(_23);
        goto -> bb108;
    }

    bb19: {
        _43 = move (_45.0: usize);
        StorageDead(_44);
        _41 = core::num::<impl usize>::checked_add(move _42, move _43) -> [return: bb20, unwind: bb115];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_46);
        StorageLive(_47);
        _234 = deref_copy ((*_1).0: &usize);
        _47 = &(*_234);
        StorageLive(_48);
        _48 = &_19;
        StorageLive(_49);
        _49 = &_20;
        _46 = {closure@programs\klend\src\utils\refresh_ix_utils.rs:80:86: 80:88} { current_idx: move _47, i: move _48, required_ix: move _49 };
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        _40 = std::option::Option::<usize>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\utils\refresh_ix_utils.rs:80:86: 80:88}>(move _41, move _46) -> [return: bb21, unwind: bb115];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_41);
        _39 = <std::result::Result<usize, anchor_lang::error::Error> as Try>::branch(move _40) -> [return: bb22, unwind: bb115];
    }

    bb22: {
        StorageDead(_40);
        _50 = discriminant(_39);
        switchInt(move _50) -> [0: bb23, 1: bb24, otherwise: bb8];
    }

    bb23: {
        StorageLive(_54);
        _54 = ((_39 as Continue).0: usize);
        _21 = _54;
        StorageDead(_54);
        _242 = discriminant(_39);
        StorageDead(_39);
        goto -> bb26;
    }

    bb24: {
        StorageLive(_51);
        _51 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _53) -> [return: bb25, unwind: bb122];
    }

    bb25: {
        StorageDead(_53);
        StorageDead(_51);
        _248 = discriminant(_39);
        StorageDead(_39);
        goto -> bb108;
    }

    bb26: {
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _235 = deref_copy ((*_1).1: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>);
        _59 = &(*_235);
        StorageLive(_60);
        _60 = _21;
        _58 = <BpfInstructionLoader<'_, '_> as InstructionLoader>::load_instruction_at(move _59, move _60) -> [return: bb27, unwind: bb115];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_61);
        _61 = {closure@programs\klend\src\utils\refresh_ix_utils.rs:93:26: 93:29};
        _57 = std::result::Result::<Instruction, anchor_lang::prelude::ProgramError>::map_err::<LendingError, {closure@programs\klend\src\utils\refresh_ix_utils.rs:93:26: 93:29}>(move _58, move _61) -> [return: bb28, unwind: bb115];
    }

    bb28: {
        StorageDead(_61);
        StorageDead(_58);
        _56 = <std::result::Result<Instruction, LendingError> as Try>::branch(move _57) -> [return: bb29, unwind: bb115];
    }

    bb29: {
        StorageDead(_57);
        _62 = discriminant(_56);
        switchInt(move _62) -> [0: bb30, 1: bb31, otherwise: bb8];
    }

    bb30: {
        StorageLive(_66);
        _66 = move ((_56 as Continue).0: solana_program::instruction::Instruction);
        _55 = move _66;
        StorageDead(_66);
        _246 = discriminant(_56);
        StorageDead(_56);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(_55.2: std::vec::Vec<u8>);
        StorageLive(_72);
        _72 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _70 = <Vec<u8> as Index<std::ops::Range<usize>>>::index(move _71, move _72) -> [return: bb33, unwind: bb114];
    }

    bb31: {
        StorageLive(_63);
        _63 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _65) -> [return: bb32, unwind: bb121];
    }

    bb32: {
        StorageDead(_65);
        StorageDead(_63);
        _244 = discriminant(_56);
        StorageDead(_56);
        goto -> bb107;
    }

    bb33: {
        _69 = &(*_70);
        StorageDead(_72);
        StorageDead(_71);
        _68 = <&[u8] as TryInto<[u8; 8]>>::try_into(move _69) -> [return: bb34, unwind: bb114];
    }

    bb34: {
        StorageDead(_69);
        _67 = std::result::Result::<[u8; 8], TryFromSliceError>::unwrap(move _68) -> [return: bb35, unwind: bb114];
    }

    bb35: {
        StorageDead(_68);
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(_55.0: anchor_lang::prelude::Pubkey);
        StorageLive(_76);
        StorageLive(_77);
        _77 = id() -> [return: bb36, unwind: bb114];
    }

    bb36: {
        _76 = &_77;
        _74 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _75, move _76) -> [return: bb37, unwind: bb114];
    }

    bb37: {
        switchInt(move _74) -> [0: bb45, otherwise: bb38];
    }

    bb38: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _225 = const _;
        _83 = &(*_225);
        _82 = anchor_lang::error::ErrorCode::name(move _83) -> [return: bb39, unwind: bb114];
    }

    bb39: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        _86 = RequireKeysEqViolated;
        _85 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _86) -> [return: bb40, unwind: bb113];
    }

    bb40: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _224 = const _;
        _88 = &(*_224);
        _87 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _88) -> [return: bb41, unwind: bb113];
    }

    bb41: {
        StorageDead(_88);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\refresh_ix_utils.rs", line: const 98_u32 };
        _91 = anchor_lang::error::ErrorOrigin::Source(move _92);
        StorageDead(_92);
        _90 = std::option::Option::<ErrorOrigin>::Some(move _91);
        StorageDead(_91);
        StorageLive(_93);
        _93 = std::option::Option::<ComparedValues>::None;
        _81 = anchor_lang::error::AnchorError { error_name: move _82, error_code_number: move _85, error_msg: move _87, error_origin: move _90, compared_values: move _93 };
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        _80 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _81) -> [return: bb42, unwind: bb114];
    }

    bb42: {
        _239 = const true;
        StorageDead(_81);
        StorageLive(_94);
        StorageLive(_95);
        _95 = (_55.0: anchor_lang::prelude::Pubkey);
        StorageLive(_96);
        _96 = id() -> [return: bb43, unwind: bb120];
    }

    bb43: {
        _94 = (move _95, move _96);
        StorageDead(_96);
        StorageDead(_95);
        _239 = const false;
        _79 = anchor_lang::error::Error::with_pubkeys(move _80, move _94) -> [return: bb44, unwind: bb120];
    }

    bb44: {
        StorageDead(_94);
        _239 = const false;
        StorageDead(_80);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _79);
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb106;
    }

    bb45: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        _73 = const ();
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_67;
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &(*_20);
        _100 = RequiredIx::discriminator(move _101) -> [return: bb46, unwind: bb114];
    }

    bb46: {
        _99 = &_100;
        StorageDead(_101);
        _97 = <[u8; 8] as PartialEq>::eq(move _98, move _99) -> [return: bb47, unwind: bb114];
    }

    bb47: {
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_100);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _97;
        switchInt(move _103) -> [0: bb48, otherwise: bb64];
    }

    bb48: {
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_2;
        _108 = <Vec<RequiredIx> as Deref>::deref(move _109) -> [return: bb49, unwind: bb114];
    }

    bb49: {
        _107 = &(*_108);
        StorageDead(_109);
        _106 = core::slice::<impl [RequiredIx]>::iter(move _107) -> [return: bb50, unwind: bb114];
    }

    bb50: {
        StorageDead(_107);
        _105 = <std::slice::Iter<'_, RequiredIx> as Iterator>::enumerate(move _106) -> [return: bb51, unwind: bb114];
    }

    bb51: {
        StorageDead(_106);
        _104 = <Enumerate<std::slice::Iter<'_, RequiredIx>> as IntoIterator>::into_iter(move _105) -> [return: bb52, unwind: bb114];
    }

    bb52: {
        StorageDead(_105);
        StorageLive(_110);
        _110 = move _104;
        goto -> bb53;
    }

    bb53: {
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &mut _110;
        _113 = &mut (*_114);
        _112 = <Enumerate<std::slice::Iter<'_, RequiredIx>> as Iterator>::next(move _113) -> [return: bb54, unwind: bb114];
    }

    bb54: {
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb56, 1: bb55, otherwise: bb8];
    }

    bb55: {
        StorageLive(_117);
        _117 = (((_112 as Some).0: (usize, &utils::refresh_ix_utils::RequiredIx)).0: usize);
        StorageLive(_118);
        _118 = (((_112 as Some).0: (usize, &utils::refresh_ix_utils::RequiredIx)).1: &utils::refresh_ix_utils::RequiredIx);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _230 = const _;
        _129 = &(*_230);
        _128 = &(*_129);
        _127 = move _128 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_117;
        _136 = &(*_137);
        _135 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _136) -> [return: bb57, unwind: bb114];
    }

    bb56: {
        _102 = const ();
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_104);
        goto -> bb65;
    }

    bb57: {
        StorageDead(_136);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_118;
        _139 = &(*_140);
        _138 = core::fmt::rt::Argument::<'_>::new_debug::<&RequiredIx>(move _139) -> [return: bb58, unwind: bb114];
    }

    bb58: {
        StorageDead(_139);
        _134 = [move _135, move _138];
        StorageDead(_138);
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _131 = move _132 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_132);
        _126 = Arguments::<'_>::new_v1(move _127, move _131) -> [return: bb59, unwind: bb114];
    }

    bb59: {
        StorageDead(_131);
        StorageDead(_127);
        _125 = format(move _126) -> [return: bb60, unwind: bb114];
    }

    bb60: {
        StorageDead(_126);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_129);
        _124 = move _125;
        StorageDead(_125);
        _123 = &_124;
        _122 = &(*_123);
        _121 = <std::string::String as Deref>::deref(move _122) -> [return: bb61, unwind: bb112];
    }

    bb61: {
        _120 = &(*_121);
        StorageDead(_122);
        _119 = solana_program::log::sol_log(move _120) -> [return: bb62, unwind: bb112];
    }

    bb62: {
        StorageDead(_120);
        drop(_124) -> [return: bb63, unwind: bb114];
    }

    bb63: {
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        _111 = const ();
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_111);
        _12 = const ();
        goto -> bb53;
    }

    bb64: {
        _102 = const ();
        goto -> bb65;
    }

    bb65: {
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_141);
        StorageLive(_142);
        _142 = _97;
        switchInt(move _142) -> [0: bb66, otherwise: bb71];
    }

    bb66: {
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _229 = const _;
        _147 = &(*_229);
        _146 = LendingError::name(move _147) -> [return: bb67, unwind: bb114];
    }

    bb67: {
        StorageDead(_147);
        StorageLive(_149);
        StorageLive(_150);
        _150 = LendingError::IncorrectInstructionInPosition;
        _149 = <LendingError as Into<u32>>::into(move _150) -> [return: bb68, unwind: bb111];
    }

    bb68: {
        StorageDead(_150);
        StorageLive(_151);
        StorageLive(_152);
        _228 = const _;
        _152 = &(*_228);
        _151 = <LendingError as ToString>::to_string(move _152) -> [return: bb69, unwind: bb111];
    }

    bb69: {
        StorageDead(_152);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\refresh_ix_utils.rs", line: const 108_u32 };
        _155 = anchor_lang::error::ErrorOrigin::Source(move _156);
        StorageDead(_156);
        _154 = std::option::Option::<ErrorOrigin>::Some(move _155);
        StorageDead(_155);
        StorageLive(_157);
        _157 = std::option::Option::<ComparedValues>::None;
        _145 = anchor_lang::error::AnchorError { error_name: move _146, error_code_number: move _149, error_msg: move _151, error_origin: move _154, compared_values: move _157 };
        StorageDead(_157);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        _144 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _145) -> [return: bb70, unwind: bb114];
    }

    bb70: {
        StorageDead(_145);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _144);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_141);
        goto -> bb105;
    }

    bb71: {
        _141 = const ();
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &((*_20).1: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize)>);
        _161 = <Vec<(anchor_lang::prelude::Pubkey, usize)> as Deref>::deref(move _162) -> [return: bb72, unwind: bb114];
    }

    bb72: {
        _160 = &(*_161);
        StorageDead(_162);
        _159 = core::slice::<impl [(anchor_lang::prelude::Pubkey, usize)]>::iter(move _160) -> [return: bb73, unwind: bb114];
    }

    bb73: {
        StorageDead(_160);
        _158 = <std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize)> as IntoIterator>::into_iter(move _159) -> [return: bb74, unwind: bb114];
    }

    bb74: {
        StorageDead(_159);
        StorageLive(_163);
        _163 = move _158;
        goto -> bb75;
    }

    bb75: {
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &mut _163;
        _166 = &mut (*_167);
        _165 = <std::slice::Iter<'_, (anchor_lang::prelude::Pubkey, usize)> as Iterator>::next(move _166) -> [return: bb76, unwind: bb114];
    }

    bb76: {
        StorageDead(_166);
        _168 = discriminant(_165);
        switchInt(move _168) -> [0: bb78, 1: bb77, otherwise: bb8];
    }

    bb77: {
        StorageLive(_170);
        _236 = deref_copy ((_165 as Some).0: &(anchor_lang::prelude::Pubkey, usize));
        _170 = &((*_236).0: anchor_lang::prelude::Pubkey);
        StorageLive(_171);
        _237 = deref_copy ((_165 as Some).0: &(anchor_lang::prelude::Pubkey, usize));
        _171 = &((*_237).1: usize);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &(_55.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _180 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _181) -> [return: bb79, unwind: bb114];
    }

    bb78: {
        _13 = const ();
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_97);
        StorageDead(_67);
        drop(_55) -> [return: bb101, unwind: bb115];
    }

    bb79: {
        _179 = &(*_180);
        StorageDead(_181);
        StorageLive(_182);
        _182 = (*_171);
        _178 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::get::<usize>(move _179, move _182) -> [return: bb80, unwind: bb114];
    }

    bb80: {
        StorageDead(_182);
        StorageDead(_179);
        StorageLive(_183);
        _183 = LendingError::IncorrectInstructionInPosition;
        _177 = std::option::Option::<&anchor_lang::prelude::AccountMeta>::ok_or::<LendingError>(move _178, move _183) -> [return: bb81, unwind: bb114];
    }

    bb81: {
        StorageDead(_183);
        StorageDead(_178);
        _176 = <std::result::Result<&anchor_lang::prelude::AccountMeta, LendingError> as Try>::branch(move _177) -> [return: bb82, unwind: bb114];
    }

    bb82: {
        StorageDead(_177);
        _184 = discriminant(_176);
        switchInt(move _184) -> [0: bb83, 1: bb84, otherwise: bb8];
    }

    bb83: {
        StorageLive(_188);
        _188 = ((_176 as Continue).0: &anchor_lang::prelude::AccountMeta);
        _175 = _188;
        StorageDead(_188);
        _174 = &((*_175).0: anchor_lang::prelude::Pubkey);
        StorageLive(_189);
        _189 = &(*_170);
        _173 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _174, move _189) -> [return: bb86, unwind: bb114];
    }

    bb84: {
        StorageLive(_185);
        _185 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _187) -> [return: bb85, unwind: bb114];
    }

    bb85: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_180);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb104;
    }

    bb86: {
        switchInt(move _173) -> [0: bb100, otherwise: bb87];
    }

    bb87: {
        StorageDead(_189);
        StorageDead(_180);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _227 = const _;
        _195 = &(*_227);
        _194 = anchor_lang::error::ErrorCode::name(move _195) -> [return: bb88, unwind: bb114];
    }

    bb88: {
        StorageDead(_195);
        StorageLive(_197);
        StorageLive(_198);
        _198 = RequireKeysEqViolated;
        _197 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _198) -> [return: bb89, unwind: bb110];
    }

    bb89: {
        StorageDead(_198);
        StorageLive(_199);
        StorageLive(_200);
        _226 = const _;
        _200 = &(*_226);
        _199 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _200) -> [return: bb90, unwind: bb110];
    }

    bb90: {
        StorageDead(_200);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\refresh_ix_utils.rs", line: const 115_u32 };
        _203 = anchor_lang::error::ErrorOrigin::Source(move _204);
        StorageDead(_204);
        _202 = std::option::Option::<ErrorOrigin>::Some(move _203);
        StorageDead(_203);
        StorageLive(_205);
        _205 = std::option::Option::<ComparedValues>::None;
        _193 = anchor_lang::error::AnchorError { error_name: move _194, error_code_number: move _197, error_msg: move _199, error_origin: move _202, compared_values: move _205 };
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_194);
        _192 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _193) -> [return: bb91, unwind: bb114];
    }

    bb91: {
        _238 = const true;
        StorageDead(_193);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &(_55.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _213 = <Vec<anchor_lang::prelude::AccountMeta> as Deref>::deref(move _214) -> [return: bb92, unwind: bb118];
    }

    bb92: {
        _212 = &(*_213);
        StorageDead(_214);
        StorageLive(_215);
        _215 = (*_171);
        _211 = core::slice::<impl [anchor_lang::prelude::AccountMeta]>::get::<usize>(move _212, move _215) -> [return: bb93, unwind: bb118];
    }

    bb93: {
        StorageDead(_215);
        StorageDead(_212);
        StorageLive(_216);
        _216 = LendingError::IncorrectInstructionInPosition;
        _210 = std::option::Option::<&anchor_lang::prelude::AccountMeta>::ok_or::<LendingError>(move _211, move _216) -> [return: bb94, unwind: bb118];
    }

    bb94: {
        StorageDead(_216);
        StorageDead(_211);
        _209 = <std::result::Result<&anchor_lang::prelude::AccountMeta, LendingError> as Try>::branch(move _210) -> [return: bb95, unwind: bb118];
    }

    bb95: {
        StorageDead(_210);
        _217 = discriminant(_209);
        switchInt(move _217) -> [0: bb96, 1: bb97, otherwise: bb8];
    }

    bb96: {
        StorageLive(_221);
        _221 = ((_209 as Continue).0: &anchor_lang::prelude::AccountMeta);
        _208 = _221;
        StorageDead(_221);
        _207 = ((*_208).0: anchor_lang::prelude::Pubkey);
        StorageLive(_222);
        _222 = (*_170);
        _206 = (move _207, move _222);
        StorageDead(_222);
        StorageDead(_207);
        _238 = const false;
        _191 = anchor_lang::error::Error::with_pubkeys(move _192, move _206) -> [return: bb99, unwind: bb118];
    }

    bb97: {
        StorageLive(_218);
        _218 = ((_209 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_220);
        _220 = _218;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _220) -> [return: bb98, unwind: bb118];
    }

    bb98: {
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_207);
        StorageDead(_206);
        drop(_192) -> [return: bb102, unwind: bb114];
    }

    bb99: {
        StorageDead(_206);
        _238 = const false;
        StorageDead(_192);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _191);
        StorageDead(_191);
        goto -> bb103;
    }

    bb100: {
        StorageDead(_189);
        StorageDead(_180);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        _172 = const ();
        StorageDead(_173);
        StorageDead(_172);
        _164 = const ();
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_164);
        _12 = const ();
        goto -> bb75;
    }

    bb101: {
        StorageDead(_55);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        _12 = const ();
        goto -> bb5;
    }

    bb102: {
        _238 = const false;
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_213);
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_158);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_97);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_67);
        drop(_55) -> [return: bb107, unwind: bb115];
    }

    bb107: {
        StorageDead(_55);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        drop(_2) -> [return: bb109, unwind: bb116];
    }

    bb109: {
        return;
    }

    bb110 (cleanup): {
        drop(_194) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_146) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_124) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_82) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_55) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_2) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        resume;
    }

    bb117 (cleanup): {
        drop(_192) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        switchInt(_238) -> [0: bb114, otherwise: bb117];
    }

    bb119 (cleanup): {
        drop(_80) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        switchInt(_239) -> [0: bb114, otherwise: bb119];
    }

    bb121 (cleanup): {
        _252 = discriminant(_56);
        goto -> bb115;
    }

    bb122 (cleanup): {
        _253 = discriminant(_39);
        goto -> bb115;
    }

    bb123 (cleanup): {
        _254 = discriminant(_23);
        goto -> bb115;
    }
}
