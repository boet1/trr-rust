digraph Mir_0_11869 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U128::as_u64(_1: &amp;ReErased utils::fraction::uint_types::U128) -&gt; u64<br align="left"/>let _2: &amp;ReErased [u64; 2_usize];<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _6: !;<br align="left"/>let _7: !;<br align="left"/>let mut _8: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _9: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _10: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _11: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _12: [&amp;ReErased str; 1_usize];<br align="left"/>let _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>>;
    bb0__0_11869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = &amp;((*_1).0: [u64; 2])<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = uint_types::U128::fits_word(move _5)</td></tr></table>>];
    bb1__0_11869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_11869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_13)<br/>_13 = const 0_usize<br/>_14 = Len((*_2))<br/>_15 = Lt(_13, _14)<br/></td></tr><tr><td align="left">assert(move _15, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _14, _13)</td></tr></table>>];
    bb3__0_11869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_16 = const _<br/>_11 = &amp;(*_16)<br/>_10 = &amp;(*_11)<br/>_9 = move _10 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = Arguments::&lt;'_&gt;::new_const(move _9)</td></tr></table>>];
    bb4__0_11869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = panic_fmt(move _8)</td></tr></table>>];
    bb5__0_11869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_0 = (*_2)[_13]<br/>StorageDead(_2)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11869 -> bb1__0_11869 [label="return"];
    bb1__0_11869 -> bb3__0_11869 [label="0"];
    bb1__0_11869 -> bb2__0_11869 [label="otherwise"];
    bb2__0_11869 -> bb5__0_11869 [label="success"];
    bb3__0_11869 -> bb4__0_11869 [label="return"];
}
