digraph Mir_0_2630 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_switchboard_price_and_twap(_1: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;, _3: &amp;ReErased anchor_lang::prelude::Clock) -&gt; std::result::Result&lt;utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error&gt;<br align="left"/>let _4: utils::prices::types::TimestampedPrice;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, utils::prices::types::TimestampedPrice&gt;;<br align="left"/>let mut _6: std::result::Result&lt;utils::prices::types::TimestampedPrice, anchor_lang::error::Error&gt;;<br align="left"/>let mut _7: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _8: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _13: utils::prices::types::TimestampedPrice;<br align="left"/>let _14: std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;&gt;;<br align="left"/>let mut _16: std::result::Result&lt;std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _17: std::option::Option&lt;std::result::Result&lt;utils::prices::types::TimestampedPrice, anchor_lang::error::Error&gt;&gt;;<br align="left"/>let mut _18: std::option::Option&lt;&amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _19: &amp;ReErased std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _20: Closure(DefId(0:2631 ~ kamino_lending[6389]::utils::prices::switchboard::get_switchboard_price_and_twap::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;,)) -&gt; std::result::Result&lt;utils::prices::types::TimestampedPrice, anchor_lang::error::Error&gt;, []), (&amp;ReErased anchor_lang::prelude::Clock,)]);<br align="left"/>let mut _21: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _26: std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;;<br align="left"/>let mut _27: utils::prices::types::TimestampedPriceWithTwap;<br align="left"/>let mut _28: utils::prices::types::TimestampedPrice;<br align="left"/>let mut _29: std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>debug switchboard_price_feed_info =&gt; _1;<br align="left"/>debug switchboard_twap_feed_info =&gt; _2;<br align="left"/>debug clock =&gt; _3;<br align="left"/>debug price =&gt; _4;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug twap =&gt; _14;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>>;
    bb0__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/>StorageLive(_8)<br/>_8 = &amp;(*_3)<br/></td></tr><tr><td align="left">_6 = get_switchboard_price(move _7, move _8)</td></tr></table>>];
    bb1__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;TimestampedPrice, anchor_lang::error::Error&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = move ((_5 as Continue).0: utils::prices::types::TimestampedPrice)<br/>_4 = move _13<br/>StorageDead(_13)<br/>_30 = discriminant(_5)<br/>StorageDead(_5)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;_2<br/></td></tr><tr><td align="left">_18 = std::option::Option::&lt;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;::as_ref(move _19)</td></tr></table>>];
    bb4__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_12)<br/>_12 = move _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>_36 = discriminant(_5)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;(*_3)<br/>_20 = {closure@programs\klend\src\utils\prices\switchboard.rs:29:14: 29:23} { clock: move _21 }<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_17 = std::option::Option::&lt;&amp;&amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;::map::&lt;std::result::Result&lt;TimestampedPrice, anchor_lang::error::Error&gt;, {closure@programs\klend\src\utils\prices\switchboard.rs:29:14: 29:23}&gt;(move _18, move _20)</td></tr></table>>];
    bb8__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = std::option::Option::&lt;std::result::Result&lt;TimestampedPrice, anchor_lang::error::Error&gt;&gt;::transpose(move _17)</td></tr></table>>];
    bb9__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;std::option::Option&lt;TimestampedPrice&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb10__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_22 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb11__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = move ((_15 as Continue).0: std::option::Option&lt;utils::prices::types::TimestampedPrice&gt;)<br/>_14 = move _26<br/>StorageDead(_26)<br/>_32 = discriminant(_15)<br/>StorageDead(_15)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = move _4<br/>StorageLive(_29)<br/>_29 = move _14<br/>_27 = TimestampedPriceWithTwap { price: move _28, twap: move _29 }<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>_0 = std::result::Result::&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt;::Ok(move _27)<br/>StorageDead(_27)<br/>StorageDead(_14)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = move ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_25)<br/>_25 = move _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb13__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>_34 = discriminant(_15)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb14__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb16__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb17__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">17 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb18__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left" balign="left">_38 = discriminant(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2630 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left" balign="left">_39 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2630 -> bb1__0_2630 [label="return"];
    bb1__0_2630 -> bb2__0_2630 [label="return"];
    bb1__0_2630 -> bb17__0_2630 [label="unwind"];
    bb2__0_2630 -> bb3__0_2630 [label="0"];
    bb2__0_2630 -> bb5__0_2630 [label="1"];
    bb2__0_2630 -> bb4__0_2630 [label="otherwise"];
    bb3__0_2630 -> bb7__0_2630 [label="return"];
    bb3__0_2630 -> bb16__0_2630 [label="unwind"];
    bb5__0_2630 -> bb6__0_2630 [label="return"];
    bb5__0_2630 -> bb19__0_2630 [label="unwind"];
    bb6__0_2630 -> bb14__0_2630 [label=""];
    bb7__0_2630 -> bb8__0_2630 [label="return"];
    bb7__0_2630 -> bb16__0_2630 [label="unwind"];
    bb8__0_2630 -> bb9__0_2630 [label="return"];
    bb8__0_2630 -> bb16__0_2630 [label="unwind"];
    bb9__0_2630 -> bb10__0_2630 [label="return"];
    bb9__0_2630 -> bb16__0_2630 [label="unwind"];
    bb10__0_2630 -> bb11__0_2630 [label="0"];
    bb10__0_2630 -> bb12__0_2630 [label="1"];
    bb10__0_2630 -> bb4__0_2630 [label="otherwise"];
    bb11__0_2630 -> bb15__0_2630 [label=""];
    bb12__0_2630 -> bb13__0_2630 [label="return"];
    bb12__0_2630 -> bb18__0_2630 [label="unwind"];
    bb13__0_2630 -> bb14__0_2630 [label="return"];
    bb13__0_2630 -> bb17__0_2630 [label="unwind"];
    bb14__0_2630 -> bb15__0_2630 [label=""];
    bb16__0_2630 -> bb17__0_2630 [label="return"];
    bb18__0_2630 -> bb16__0_2630 [label=""];
    bb19__0_2630 -> bb17__0_2630 [label=""];
}
