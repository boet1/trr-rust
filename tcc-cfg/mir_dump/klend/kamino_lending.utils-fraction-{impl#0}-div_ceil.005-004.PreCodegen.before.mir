// MIR for `utils::fraction::<impl at programs\klend\src\utils\fraction.rs:97:1: 97:32>::div_ceil` before PreCodegen

fn utils::fraction::<impl at programs\klend\src\utils\fraction.rs:97:1: 97:32>::div_ceil(_1: &FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: &FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> {
    debug self => _1;
    debug denum => _2;
    let mut _0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _3: u128;
    let mut _4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _6: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _8: utils::fraction::uint_types::U256;
    let mut _9: utils::fraction::uint_types::U256;
    let mut _10: utils::fraction::uint_types::U256;
    let mut _11: u128;
    let mut _12: utils::fraction::uint_types::U256;
    let mut _13: u128;
    let mut _14: u128;
    let mut _15: (u128, bool);
    let mut _16: u128;
    let mut _18: std::result::Result<u128, &str>;
    let mut _19: utils::fraction::uint_types::U256;
    let mut _20: &str;
    let _21: &str;
    let mut _22: u128;
    scope 1 {
        debug num_sf => _3;
        let _5: u128;
        scope 2 {
            debug denum_sf => _5;
            let _7: utils::fraction::uint_types::U256;
            scope 3 {
                debug res_sf_u256 => _7;
                let _17: u128;
                scope 4 {
                    debug res_sf => _17;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = (*_1);
        _3 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (*_2);
        _5 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _3;
        _10 = <uint_types::U256 as From<u128>>::from(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _9 = <uint_types::U256 as Shl<u32>>::shl(move _10, const _) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _5;
        _15 = CheckedSub(_14, const 1_u128);
        assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, const 1_u128) -> [success: bb5, unwind continue];
    }

    bb5: {
        _13 = move (_15.0: u128);
        StorageDead(_14);
        _12 = <uint_types::U256 as From<u128>>::from(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        _8 = <uint_types::U256 as Add>::add(move _9, move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_9);
        StorageLive(_16);
        _16 = _5;
        _7 = <uint_types::U256 as std::ops::Div<u128>>::div(move _8, move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_8);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _7;
        _18 = <u128 as TryFrom<uint_types::U256>>::try_from(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = const "Overflow in div_ceil";
        _20 = &(*_21);
        _17 = std::result::Result::<u128, &str>::expect(move _18, move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_21);
        StorageLive(_22);
        _22 = _17;
        _0 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }
}
