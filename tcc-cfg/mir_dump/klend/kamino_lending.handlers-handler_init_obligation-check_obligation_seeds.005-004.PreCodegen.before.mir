// MIR for `check_obligation_seeds` before PreCodegen

fn check_obligation_seeds(_1: u8, _2: &anchor_lang::prelude::AccountInfo<'_>, _3: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug tag => _1;
    debug seed1_account => _2;
    debug seed2_account => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let _8: ();
    let _9: ();
    let mut _10: bool;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let mut _12: &anchor_lang::prelude::Pubkey;
    let _13: anchor_lang::prelude::Pubkey;
    let mut _14: bool;
    let mut _15: &anchor_lang::prelude::Pubkey;
    let mut _16: &anchor_lang::prelude::Pubkey;
    let _17: anchor_lang::prelude::Pubkey;
    let mut _18: !;
    let mut _19: anchor_lang::error::Error;
    let mut _20: anchor_lang::error::AnchorError;
    let mut _21: std::string::String;
    let mut _22: &LendingError;
    let _23: LendingError;
    let mut _24: u32;
    let mut _25: LendingError;
    let mut _26: std::string::String;
    let mut _27: &LendingError;
    let _28: LendingError;
    let mut _29: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _30: anchor_lang::error::ErrorOrigin;
    let mut _31: anchor_lang::error::Source;
    let mut _32: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _34: std::result::Result<anchor_spl::token_interface::Mint, anchor_lang::error::Error>;
    let mut _35: &mut &[u8];
    let mut _36: &mut &[u8];
    let mut _37: &[u8];
    let mut _38: &&mut [u8];
    let _39: &&mut [u8];
    let mut _40: &std::cell::Ref<'_, &mut [u8]>;
    let _41: std::cell::Ref<'_, &mut [u8]>;
    let mut _42: &std::cell::RefCell<&mut [u8]>;
    let _43: &std::cell::RefCell<&mut [u8]>;
    let mut _44: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _46: std::result::Result<anchor_spl::token_interface::Mint, anchor_lang::error::Error>;
    let mut _47: &mut &[u8];
    let mut _48: &mut &[u8];
    let mut _49: &[u8];
    let mut _50: &&mut [u8];
    let _51: &&mut [u8];
    let mut _52: &std::cell::Ref<'_, &mut [u8]>;
    let _53: std::cell::Ref<'_, &mut [u8]>;
    let mut _54: &std::cell::RefCell<&mut [u8]>;
    let _55: &std::cell::RefCell<&mut [u8]>;
    let mut _56: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _58: std::result::Result<anchor_spl::token_interface::Mint, anchor_lang::error::Error>;
    let mut _59: &mut &[u8];
    let mut _60: &mut &[u8];
    let mut _61: &[u8];
    let mut _62: &&mut [u8];
    let _63: &&mut [u8];
    let mut _64: &std::cell::Ref<'_, &mut [u8]>;
    let _65: std::cell::Ref<'_, &mut [u8]>;
    let mut _66: &std::cell::RefCell<&mut [u8]>;
    let _67: &std::cell::RefCell<&mut [u8]>;
    let mut _68: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _69: bool;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &anchor_lang::prelude::Pubkey;
    let mut _72: !;
    let mut _73: anchor_lang::error::Error;
    let mut _74: anchor_lang::error::AnchorError;
    let mut _75: std::string::String;
    let mut _76: &LendingError;
    let _77: LendingError;
    let mut _78: u32;
    let mut _79: LendingError;
    let mut _80: std::string::String;
    let mut _81: &LendingError;
    let _82: LendingError;
    let mut _83: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _84: anchor_lang::error::ErrorOrigin;
    let mut _85: anchor_lang::error::Source;
    let mut _86: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _88: std::result::Result<anchor_spl::token_interface::Mint, anchor_lang::error::Error>;
    let mut _89: &mut &[u8];
    let mut _90: &mut &[u8];
    let mut _91: &[u8];
    let mut _92: &&mut [u8];
    let _93: &&mut [u8];
    let mut _94: &std::cell::Ref<'_, &mut [u8]>;
    let _95: std::cell::Ref<'_, &mut [u8]>;
    let mut _96: &std::cell::RefCell<&mut [u8]>;
    let _97: &std::cell::RefCell<&mut [u8]>;
    let mut _98: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _100: std::result::Result<anchor_spl::token_interface::Mint, anchor_lang::error::Error>;
    let mut _101: &mut &[u8];
    let mut _102: &mut &[u8];
    let mut _103: &[u8];
    let mut _104: &&mut [u8];
    let _105: &&mut [u8];
    let mut _106: &std::cell::Ref<'_, &mut [u8]>;
    let _107: std::cell::Ref<'_, &mut [u8]>;
    let mut _108: &std::cell::RefCell<&mut [u8]>;
    let _109: &std::cell::RefCell<&mut [u8]>;
    let mut _110: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _111: ();
    scope 1 {
        debug seed1_key => _4;
        let _6: anchor_lang::prelude::Pubkey;
        scope 2 {
            debug seed2_key => _6;
            let _33: anchor_spl::token_interface::Mint;
            let _57: anchor_spl::token_interface::Mint;
            let _87: anchor_spl::token_interface::Mint;
            let mut _114: &LendingError;
            let mut _115: &LendingError;
            scope 3 {
                debug _mint1_check => _33;
                let _45: anchor_spl::token_interface::Mint;
                scope 4 {
                    debug _mint2_check => _45;
                }
            }
            scope 5 {
                debug _mint_check => _57;
                let mut _112: &LendingError;
                let mut _113: &LendingError;
            }
            scope 6 {
                debug _mint1_check => _87;
                let _99: anchor_spl::token_interface::Mint;
                scope 7 {
                    debug _mint2_check => _99;
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_3);
        _6 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        switchInt(_1) -> [0: bb4, 1: bb18, 2: bb33, 3: bb48, otherwise: bb3];
    }

    bb3: {
        _8 = const ();
        goto -> bb63;
    }

    bb4: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_4;
        StorageLive(_12);
        StorageLive(_13);
        _13 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _10 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _11, move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _10) -> [0: bb12, otherwise: bb7];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_6;
        StorageLive(_16);
        StorageLive(_17);
        _17 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = &_17;
        _14 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _15, move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _14) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        _9 = const ();
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        _8 = const ();
        goto -> bb63;
    }

    bb11: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb13;
    }

    bb13: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _115 = const _;
        _22 = &(*_115);
        _21 = LendingError::name(move _22) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = LendingError::InvalidObligationSeedsValue;
        _24 = <LendingError as Into<u32>>::into(move _25) -> [return: bb15, unwind: bb72];
    }

    bb15: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        _114 = const _;
        _27 = &(*_114);
        _26 = <LendingError as ToString>::to_string(move _27) -> [return: bb16, unwind: bb72];
    }

    bb16: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_obligation.rs", line: const 81_u32 };
        _30 = anchor_lang::error::ErrorOrigin::Source(move _31);
        StorageDead(_31);
        _29 = std::option::Option::<ErrorOrigin>::Some(move _30);
        StorageDead(_30);
        StorageLive(_32);
        _32 = std::option::Option::<ComparedValues>::None;
        _20 = anchor_lang::error::AnchorError { error_name: move _21, error_code_number: move _24, error_msg: move _26, error_origin: move _29, compared_values: move _32 };
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_21);
        _19 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _20) -> [return: bb17, unwind: bb73];
    }

    bb17: {
        StorageDead(_20);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _19);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb64;
    }

    bb18: {
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &((*_2).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _43 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _44) -> [return: bb19, unwind continue];
    }

    bb19: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = RefCell::<&mut [u8]>::borrow(move _42) -> [return: bb20, unwind continue];
    }

    bb20: {
        _40 = &_41;
        _39 = <Ref<'_, &mut [u8]> as Deref>::deref(move _40) -> [return: bb21, unwind: bb71];
    }

    bb21: {
        _38 = &(*_39);
        StorageDead(_42);
        StorageDead(_40);
        _37 = <&mut [u8] as AsRef<[u8]>>::as_ref(move _38) -> [return: bb22, unwind: bb71];
    }

    bb22: {
        StorageDead(_38);
        _36 = &mut _37;
        _35 = &mut (*_36);
        _34 = <anchor_spl::token_interface::Mint as anchor_lang::AccountDeserialize>::try_deserialize(move _35) -> [return: bb23, unwind: bb71];
    }

    bb23: {
        StorageDead(_35);
        _33 = std::result::Result::<anchor_spl::token_interface::Mint, anchor_lang::error::Error>::unwrap(move _34) -> [return: bb24, unwind: bb71];
    }

    bb24: {
        StorageDead(_34);
        drop(_41) -> [return: bb25, unwind: bb73];
    }

    bb25: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &((*_3).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _55 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _56) -> [return: bb26, unwind continue];
    }

    bb26: {
        _54 = &(*_55);
        StorageDead(_56);
        _53 = RefCell::<&mut [u8]>::borrow(move _54) -> [return: bb27, unwind continue];
    }

    bb27: {
        _52 = &_53;
        _51 = <Ref<'_, &mut [u8]> as Deref>::deref(move _52) -> [return: bb28, unwind: bb70];
    }

    bb28: {
        _50 = &(*_51);
        StorageDead(_54);
        StorageDead(_52);
        _49 = <&mut [u8] as AsRef<[u8]>>::as_ref(move _50) -> [return: bb29, unwind: bb70];
    }

    bb29: {
        StorageDead(_50);
        _48 = &mut _49;
        _47 = &mut (*_48);
        _46 = <anchor_spl::token_interface::Mint as anchor_lang::AccountDeserialize>::try_deserialize(move _47) -> [return: bb30, unwind: bb70];
    }

    bb30: {
        StorageDead(_47);
        _45 = std::result::Result::<anchor_spl::token_interface::Mint, anchor_lang::error::Error>::unwrap(move _46) -> [return: bb31, unwind: bb70];
    }

    bb31: {
        StorageDead(_46);
        drop(_53) -> [return: bb32, unwind: bb73];
    }

    bb32: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_48);
        _8 = const ();
        StorageDead(_45);
        StorageDead(_33);
        goto -> bb63;
    }

    bb33: {
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &((*_2).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _67 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _68) -> [return: bb34, unwind continue];
    }

    bb34: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = RefCell::<&mut [u8]>::borrow(move _66) -> [return: bb35, unwind continue];
    }

    bb35: {
        _64 = &_65;
        _63 = <Ref<'_, &mut [u8]> as Deref>::deref(move _64) -> [return: bb36, unwind: bb69];
    }

    bb36: {
        _62 = &(*_63);
        StorageDead(_66);
        StorageDead(_64);
        _61 = <&mut [u8] as AsRef<[u8]>>::as_ref(move _62) -> [return: bb37, unwind: bb69];
    }

    bb37: {
        StorageDead(_62);
        _60 = &mut _61;
        _59 = &mut (*_60);
        _58 = <anchor_spl::token_interface::Mint as anchor_lang::AccountDeserialize>::try_deserialize(move _59) -> [return: bb38, unwind: bb69];
    }

    bb38: {
        StorageDead(_59);
        _57 = std::result::Result::<anchor_spl::token_interface::Mint, anchor_lang::error::Error>::unwrap(move _58) -> [return: bb39, unwind: bb69];
    }

    bb39: {
        StorageDead(_58);
        drop(_65) -> [return: bb40, unwind: bb73];
    }

    bb40: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_4;
        StorageLive(_71);
        _71 = &_6;
        _69 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _70, move _71) -> [return: bb41, unwind continue];
    }

    bb41: {
        switchInt(move _69) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        StorageDead(_71);
        StorageDead(_70);
        _8 = const ();
        StorageDead(_69);
        StorageDead(_57);
        goto -> bb63;
    }

    bb43: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _113 = const _;
        _76 = &(*_113);
        _75 = LendingError::name(move _76) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        _79 = LendingError::InvalidObligationSeedsValue;
        _78 = <LendingError as Into<u32>>::into(move _79) -> [return: bb45, unwind: bb68];
    }

    bb45: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        _112 = const _;
        _81 = &(*_112);
        _80 = <LendingError as ToString>::to_string(move _81) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        StorageDead(_81);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_obligation.rs", line: const 95_u32 };
        _84 = anchor_lang::error::ErrorOrigin::Source(move _85);
        StorageDead(_85);
        _83 = std::option::Option::<ErrorOrigin>::Some(move _84);
        StorageDead(_84);
        StorageLive(_86);
        _86 = std::option::Option::<ComparedValues>::None;
        _74 = anchor_lang::error::AnchorError { error_name: move _75, error_code_number: move _78, error_msg: move _80, error_origin: move _83, compared_values: move _86 };
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_75);
        _73 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _74) -> [return: bb47, unwind: bb73];
    }

    bb47: {
        StorageDead(_74);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _73);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_57);
        goto -> bb64;
    }

    bb48: {
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &((*_2).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _97 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _98) -> [return: bb49, unwind continue];
    }

    bb49: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = RefCell::<&mut [u8]>::borrow(move _96) -> [return: bb50, unwind continue];
    }

    bb50: {
        _94 = &_95;
        _93 = <Ref<'_, &mut [u8]> as Deref>::deref(move _94) -> [return: bb51, unwind: bb67];
    }

    bb51: {
        _92 = &(*_93);
        StorageDead(_96);
        StorageDead(_94);
        _91 = <&mut [u8] as AsRef<[u8]>>::as_ref(move _92) -> [return: bb52, unwind: bb67];
    }

    bb52: {
        StorageDead(_92);
        _90 = &mut _91;
        _89 = &mut (*_90);
        _88 = <anchor_spl::token_interface::Mint as anchor_lang::AccountDeserialize>::try_deserialize(move _89) -> [return: bb53, unwind: bb67];
    }

    bb53: {
        StorageDead(_89);
        _87 = std::result::Result::<anchor_spl::token_interface::Mint, anchor_lang::error::Error>::unwrap(move _88) -> [return: bb54, unwind: bb67];
    }

    bb54: {
        StorageDead(_88);
        drop(_95) -> [return: bb55, unwind: bb73];
    }

    bb55: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &((*_3).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _109 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _110) -> [return: bb56, unwind continue];
    }

    bb56: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = RefCell::<&mut [u8]>::borrow(move _108) -> [return: bb57, unwind continue];
    }

    bb57: {
        _106 = &_107;
        _105 = <Ref<'_, &mut [u8]> as Deref>::deref(move _106) -> [return: bb58, unwind: bb66];
    }

    bb58: {
        _104 = &(*_105);
        StorageDead(_108);
        StorageDead(_106);
        _103 = <&mut [u8] as AsRef<[u8]>>::as_ref(move _104) -> [return: bb59, unwind: bb66];
    }

    bb59: {
        StorageDead(_104);
        _102 = &mut _103;
        _101 = &mut (*_102);
        _100 = <anchor_spl::token_interface::Mint as anchor_lang::AccountDeserialize>::try_deserialize(move _101) -> [return: bb60, unwind: bb66];
    }

    bb60: {
        StorageDead(_101);
        _99 = std::result::Result::<anchor_spl::token_interface::Mint, anchor_lang::error::Error>::unwrap(move _100) -> [return: bb61, unwind: bb66];
    }

    bb61: {
        StorageDead(_100);
        drop(_107) -> [return: bb62, unwind: bb73];
    }

    bb62: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_102);
        _8 = const ();
        StorageDead(_99);
        StorageDead(_87);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_8);
        StorageLive(_111);
        _111 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _111);
        StorageDead(_111);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb65;
    }

    bb64: {
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb65;
    }

    bb65: {
        return;
    }

    bb66 (cleanup): {
        drop(_107) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_95) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_75) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_65) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_53) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_41) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_21) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        resume;
    }
}
