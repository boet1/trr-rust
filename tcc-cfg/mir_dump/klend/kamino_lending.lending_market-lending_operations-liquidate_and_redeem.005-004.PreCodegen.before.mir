// MIR for `liquidate_and_redeem` before PreCodegen

fn liquidate_and_redeem(_1: &state::lending_market::LendingMarket, _2: &dyn account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>, _3: &dyn account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>, _4: &mut obligation::Obligation, _5: &anchor_lang::prelude::Clock, _6: u64, _7: u64, _8: std::option::Option<u64>, _9: impl Iterator<Item = T>) -> std::result::Result<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error> {
    debug lending_market => _1;
    debug repay_reserve => _2;
    debug withdraw_reserve => _3;
    debug obligation => _4;
    debug clock => _5;
    debug liquidity_amount => _6;
    debug min_acceptable_received_liquidity_amount => _7;
    debug max_allowed_ltv_override_pct_opt => _8;
    debug deposit_reserves_iter => _9;
    let mut _0: std::result::Result<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error>;
    let _10: u64;
    let _11: u64;
    let _12: u64;
    let _13: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _14: state::types::LiquidationReason;
    let mut _15: state::types::LiquidateObligationResult;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::LiquidateObligationResult>;
    let mut _17: std::result::Result<state::types::LiquidateObligationResult, anchor_lang::error::Error>;
    let mut _18: &state::lending_market::LendingMarket;
    let mut _19: &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve>;
    let mut _20: &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve>;
    let mut _21: &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve>;
    let mut _22: &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve>;
    let mut _23: &mut state::obligation::Obligation;
    let mut _24: &anchor_lang::prelude::Clock;
    let mut _25: u64;
    let mut _26: std::option::Option<u64>;
    let mut _27: impl Iterator<Item = T>;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _32: state::types::LiquidateObligationResult;
    let mut _34: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _36: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _37: &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<(u64, u64)>>;
    let mut _45: std::result::Result<std::option::Option<(u64, u64)>, anchor_lang::error::Error>;
    let mut _46: &mut state::reserve::Reserve;
    let mut _47: &mut state::reserve::Reserve;
    let mut _48: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _49: u64;
    let mut _50: u64;
    let mut _51: u64;
    let mut _52: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _53: state::types::LiquidationReason;
    let mut _54: u64;
    let mut _55: &anchor_lang::prelude::Clock;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _61: state::types::LiquidateAndRedeemResult;
    let mut _62: u64;
    let mut _63: u64;
    let mut _64: std::option::Option<(u64, u64)>;
    let mut _65: u64;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    scope 1 {
        debug repay_amount => _10;
        debug withdraw_collateral_amount => _11;
        debug withdraw_amount => _12;
        debug liquidation_bonus_rate => _13;
        debug liquidation_reason => _14;
        let _33: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
        let _39: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _42: std::cell::RefMut<'_, state::reserve::Reserve>;
        scope 6 {
            debug withdraw_reserve => _33;
            let _43: std::option::Option<(u64, u64)>;
            let _57: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _60: std::option::Option<(u64, u64)>;
            scope 11 {
                debug total_withdraw_liquidity_amount => _43;
            }
            scope 12 {
                debug residual => _57;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _60;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _39;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _42;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _29;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _32;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_1);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_2);
        _19 = move _20 as &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve> (PointerCoercion(Unsize));
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_3);
        _21 = move _22 as &dyn utils::account_loader_trait::AnyAccountLoader<'_, state::reserve::Reserve> (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_23);
        _23 = &mut (*_4);
        StorageLive(_24);
        _24 = &(*_5);
        StorageLive(_25);
        _25 = _6;
        StorageLive(_26);
        _26 = _8;
        StorageLive(_27);
        _27 = move _9;
        _17 = liquidate_obligation::<'_, T, impl Iterator<Item = T>>(move _18, move _19, move _21, move _23, move _24, move _25, move _26, move _27) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<state::types::LiquidateObligationResult, anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        StorageDead(_17);
        _28 = discriminant(_16);
        switchInt(move _28) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_32);
        _32 = move ((_16 as Continue).0: state::types::LiquidateObligationResult);
        _15 = move _32;
        StorageDead(_32);
        StorageLive(_10);
        _10 = (_15.1: u64);
        StorageLive(_11);
        _11 = (_15.3: u64);
        StorageLive(_12);
        _12 = (_15.2: u64);
        StorageLive(_13);
        _13 = (_15.4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_14);
        _14 = (_15.5: state::types::LiquidationReason);
        _66 = discriminant(_16);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_3);
        _36 = <dyn account_loader_trait::AnyAccountLoader<'_, reserve::Reserve> as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_mut(move _37) -> [return: bb7, unwind: bb22];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_29);
        _29 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <std::result::Result<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _31) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        StorageDead(_31);
        StorageDead(_29);
        _76 = discriminant(_16);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb20;
    }

    bb7: {
        StorageDead(_37);
        _35 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_42);
        _42 = move ((_35 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _34 = move _42;
        StorageDead(_42);
        _33 = &mut _34;
        _68 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &mut (*_33);
        _47 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _48) -> [return: bb12, unwind: bb21];
    }

    bb10: {
        StorageLive(_39);
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <std::result::Result<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _41) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        StorageDead(_41);
        StorageDead(_39);
        _74 = discriminant(_35);
        StorageDead(_35);
        goto -> bb19;
    }

    bb12: {
        _46 = &mut (*_47);
        StorageDead(_48);
        StorageLive(_49);
        _49 = _10;
        StorageLive(_50);
        _50 = _12;
        StorageLive(_51);
        _51 = _11;
        StorageLive(_52);
        _52 = _13;
        StorageLive(_53);
        _53 = _14;
        StorageLive(_54);
        _54 = _7;
        StorageLive(_55);
        _55 = &(*_5);
        _45 = post_liquidate_redeem(move _46, move _49, move _50, move _51, move _52, move _53, move _54, move _55) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_46);
        _44 = <std::result::Result<std::option::Option<(u64, u64)>, anchor_lang::error::Error> as Try>::branch(move _45) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        StorageDead(_45);
        _56 = discriminant(_44);
        switchInt(move _56) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_60);
        _60 = ((_44 as Continue).0: std::option::Option<(u64, u64)>);
        _43 = _60;
        StorageDead(_60);
        _70 = discriminant(_44);
        StorageDead(_47);
        StorageDead(_44);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _10;
        StorageLive(_63);
        _63 = _12;
        StorageLive(_64);
        _64 = _43;
        StorageLive(_65);
        _65 = _11;
        _61 = state::types::LiquidateAndRedeemResult { repay_amount: move _62, withdraw_amount: move _63, withdraw_collateral_amount: move _65, total_withdraw_liquidity_amount: move _64 };
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        _0 = std::result::Result::<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error>::Ok(move _61);
        StorageDead(_61);
        StorageDead(_43);
        drop(_34) -> [return: bb18, unwind: bb22];
    }

    bb16: {
        StorageLive(_57);
        _57 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <std::result::Result<state::types::LiquidateAndRedeemResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _59) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        StorageDead(_59);
        StorageDead(_57);
        _72 = discriminant(_44);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        drop(_34) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_34) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _78 = discriminant(_44);
        goto -> bb21;
    }

    bb24 (cleanup): {
        _79 = discriminant(_35);
        goto -> bb22;
    }

    bb25 (cleanup): {
        _80 = discriminant(_16);
        goto -> bb22;
    }
}
