// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:842:1: 842:21>::is_supported_by` before PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:842:1: 842:21>::is_supported_by(_1: &obligation::ObligationOrder, _2: &obligation::Obligation) -> bool {
    debug self => _1;
    debug obligation => _2;
    let mut _0: bool;
    let _3: ();
    let mut _4: bool;
    let mut _5: &&state::obligation::ObligationOrder;
    let mut _6: &&state::obligation::ObligationOrder;
    let _7: &state::obligation::ObligationOrder;
    let _8: state::obligation::ObligationOrder;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: &state::order_operations::ConditionType;
    let _12: state::order_operations::ConditionType;
    let mut _13: &state::obligation::ObligationOrder;
    let mut _14: &state::obligation::Obligation;
    let mut _15: &state::order_operations::OpportunityType;
    let _16: state::order_operations::OpportunityType;
    let mut _17: &state::obligation::ObligationOrder;
    let mut _18: &state::obligation::Obligation;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = <obligation::ObligationOrder as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _6 = &_7;
        _4 = <&obligation::ObligationOrder as PartialEq>::eq(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _0 = const true;
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb12;
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_1);
        _12 = obligation::ObligationOrder::condition_type(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = &_12;
        StorageDead(_13);
        StorageLive(_14);
        _14 = &(*_2);
        _10 = ConditionType::is_supported_by(move _11, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _10) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_1);
        _16 = obligation::ObligationOrder::opportunity_type(move _17) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _0 = const false;
        goto -> bb11;
    }

    bb9: {
        _15 = &_16;
        StorageDead(_17);
        StorageLive(_18);
        _18 = &(*_2);
        _0 = OpportunityType::is_supported_by(move _15, move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_10);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}
