// MIR for `check_bool` before PreCodegen

fn check_bool(_1: &T) -> std::result::Result<(), anchor_lang::error::Error> {
    debug value => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: u128;
    let mut _3: T;
    let mut _4: &T;
    let _5: ();
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: !;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 1];
    let _19: &[&str; 1];
    let _20: [&str; 1];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &u128;
    let _27: &u128;
    let mut _28: anchor_lang::error::Error;
    let mut _29: anchor_lang::error::AnchorError;
    let mut _30: std::string::String;
    let mut _31: &LendingError;
    let _32: LendingError;
    let mut _33: u32;
    let mut _34: LendingError;
    let mut _35: std::string::String;
    let mut _36: &LendingError;
    let _37: LendingError;
    let mut _38: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _39: anchor_lang::error::ErrorOrigin;
    let mut _40: anchor_lang::error::Source;
    let mut _41: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _42: ();
    scope 1 {
        debug value => _2;
        let _15: std::string::String;
        let mut _43: &LendingError;
        let mut _44: &LendingError;
        let mut _45: &[&str; 1];
        scope 2 {
            debug res => _15;
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _2 = <T as Into<u128>>::into(move _3) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Gt(move _7, const 1_u128);
        switchInt(move _6) -> [0: bb14, otherwise: bb3];
    }

    bb3: {
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _45 = const _;
        _19 = &(*_45);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_2;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _26) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <std::string::String as Deref>::deref(move _12) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        StorageDead(_10);
        drop(_14) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _44 = const _;
        _31 = &(*_44);
        _30 = LendingError::name(move _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = LendingError::InvalidFlag;
        _33 = <LendingError as Into<u32>>::into(move _34) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _43 = const _;
        _36 = &(*_43);
        _35 = <LendingError as ToString>::to_string(move _36) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\config_items.rs", line: const 218_u32 };
        _39 = anchor_lang::error::ErrorOrigin::Source(move _40);
        StorageDead(_40);
        _38 = std::option::Option::<ErrorOrigin>::Some(move _39);
        StorageDead(_39);
        StorageLive(_41);
        _41 = std::option::Option::<ComparedValues>::None;
        _29 = anchor_lang::error::AnchorError { error_name: move _30, error_code_number: move _33, error_msg: move _35, error_origin: move _38, compared_values: move _41 };
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        _28 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _29) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        StorageDead(_29);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _28);
        StorageDead(_28);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_2);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_42);
        _42 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _42);
        StorageDead(_42);
        StorageDead(_2);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_30) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_14) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}
