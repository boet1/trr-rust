// MIR for `token_info::<impl at programs\klend\src\state\token_info.rs:74:1: 74:15>::check_switchboard_acc_matches` after PreCodegen

fn token_info::<impl at programs\klend\src\state\token_info.rs:74:1: 74:15>::check_switchboard_acc_matches(_1: &token_info::TokenInfo, _2: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, _3: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>) -> bool {
    debug self => _1;
    debug switchboard_price_info => _2;
    debug switchboard_twap_info => _3;
    let mut _0: bool;
    let mut _4: bool;
    let mut _5: &state::token_info::SwitchboardConfiguration;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: &std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let _9: &anchor_lang::prelude::AccountInfo<'_>;
    let _10: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: bool;
    let mut _12: &anchor_lang::prelude::Pubkey;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let mut _14: bool;
    let mut _15: &state::token_info::TokenInfo;
    let mut _16: isize;
    let mut _17: &std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let _18: &anchor_lang::prelude::AccountInfo<'_>;
    let _19: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: bool;
    let mut _21: &anchor_lang::prelude::Pubkey;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _23: bool;
    let mut _24: &std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _25: &std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _27: &anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _29: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug a => _9;
        debug a => _10;
    }
    scope 2 {
        debug a => _18;
        debug a => _19;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).6: state::token_info::SwitchboardConfiguration);
        _4 = SwitchboardConfiguration::is_enabled(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb21, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_6);
        _7 = discriminant(_2);
        switchInt(move _7) -> [1: bb4, otherwise: bb3];
    }

    bb3: {
        _6 = const false;
        goto -> bb8;
    }

    bb4: {
        StorageLive(_10);
        _10 = &((_2 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_11);
        StorageLive(_12);
        _26 = deref_copy (*_10);
        _27 = deref_copy ((*_26).0: &anchor_lang::prelude::Pubkey);
        _12 = &(*_27);
        StorageLive(_13);
        _13 = &(((*_1).6: state::token_info::SwitchboardConfiguration).0: anchor_lang::prelude::Pubkey);
        _11 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _12, move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _11) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_9);
        _9 = ((_2 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        _6 = const true;
        StorageDead(_9);
        StorageDead(_10);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb3;
    }

    bb8: {
        switchInt(move _6) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_1);
        _14 = token_info::TokenInfo::is_twap_enabled(move _15) -> [return: bb11, unwind continue];
    }

    bb10: {
        _0 = const false;
        goto -> bb20;
    }

    bb11: {
        switchInt(move _14) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_15);
        _16 = discriminant(_3);
        switchInt(move _16) -> [1: bb15, otherwise: bb14];
    }

    bb13: {
        StorageDead(_15);
        _0 = const true;
        goto -> bb19;
    }

    bb14: {
        _0 = const false;
        goto -> bb19;
    }

    bb15: {
        StorageLive(_19);
        _19 = &((_3 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_20);
        StorageLive(_21);
        _28 = deref_copy (*_19);
        _29 = deref_copy ((*_28).0: &anchor_lang::prelude::Pubkey);
        _21 = &(*_29);
        StorageLive(_22);
        _22 = &(((*_1).6: state::token_info::SwitchboardConfiguration).1: anchor_lang::prelude::Pubkey);
        _20 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _21, move _22) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _20) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_18);
        _18 = ((_3 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        _0 = const true;
        StorageDead(_18);
        StorageDead(_19);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb14;
    }

    bb19: {
        StorageDead(_14);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_6);
        goto -> bb27;
    }

    bb21: {
        StorageDead(_5);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_2;
        _23 = std::option::Option::<&anchor_lang::prelude::AccountInfo<'_>>::is_none(move _24) -> [return: bb22, unwind continue];
    }

    bb22: {
        switchInt(move _23) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_24);
        StorageLive(_25);
        _25 = &_3;
        _0 = std::option::Option::<&anchor_lang::prelude::AccountInfo<'_>>::is_none(move _25) -> [return: bb25, unwind continue];
    }

    bb24: {
        StorageDead(_24);
        _0 = const false;
        goto -> bb26;
    }

    bb25: {
        StorageDead(_25);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_23);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_4);
        return;
    }
}
