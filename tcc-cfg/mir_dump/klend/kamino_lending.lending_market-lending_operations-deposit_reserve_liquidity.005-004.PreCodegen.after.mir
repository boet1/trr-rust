// MIR for `lending_operations::deposit_reserve_liquidity` after PreCodegen

fn lending_operations::deposit_reserve_liquidity(_1: &mut reserve::Reserve, _2: &anchor_lang::prelude::Clock, _3: u64) -> std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> {
    debug reserve => _1;
    debug clock => _2;
    debug liquidity_amount => _3;
    let mut _0: std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: !;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: anchor_lang::error::Error;
    let mut _12: anchor_lang::error::AnchorError;
    let mut _13: std::string::String;
    let mut _14: &LendingError;
    let _15: LendingError;
    let mut _16: u32;
    let mut _17: LendingError;
    let mut _18: std::string::String;
    let mut _19: &LendingError;
    let _20: LendingError;
    let mut _21: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _22: anchor_lang::error::ErrorOrigin;
    let mut _23: anchor_lang::error::Source;
    let mut _24: std::option::Option<anchor_lang::error::ComparedValues>;
    let _25: ();
    let mut _26: bool;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _28: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _29: &state::last_update::LastUpdate;
    let mut _30: u64;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _35: bool;
    let mut _36: !;
    let _37: ();
    let mut _38: &str;
    let _39: &str;
    let mut _40: anchor_lang::error::Error;
    let mut _41: anchor_lang::error::AnchorError;
    let mut _42: std::string::String;
    let mut _43: &LendingError;
    let _44: LendingError;
    let mut _45: u32;
    let mut _46: LendingError;
    let mut _47: std::string::String;
    let mut _48: &LendingError;
    let _49: LendingError;
    let mut _50: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _51: anchor_lang::error::ErrorOrigin;
    let mut _52: anchor_lang::error::Source;
    let mut _53: std::option::Option<anchor_lang::error::ComparedValues>;
    let _54: state::types::DepositLiquidityResult;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::types::DepositLiquidityResult>;
    let mut _56: std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error>;
    let mut _57: &state::reserve::Reserve;
    let mut _58: u64;
    let mut _59: isize;
    let _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _63: state::types::DepositLiquidityResult;
    let mut _65: u64;
    let mut _67: u64;
    let mut _69: &state::reserve::ReserveLiquidity;
    let mut _71: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _72: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _73: ();
    let mut _74: bool;
    let mut _75: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _76: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _77: !;
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: &std::string::String;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[&str; 2];
    let _88: &[&str; 2];
    let _89: [&str; 2];
    let mut _90: &[core::fmt::rt::Argument<'_>];
    let mut _91: &[core::fmt::rt::Argument<'_>; 2];
    let _92: &[core::fmt::rt::Argument<'_>; 2];
    let _93: [core::fmt::rt::Argument<'_>; 2];
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _96: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &u64;
    let _99: &u64;
    let mut _100: anchor_lang::error::Error;
    let mut _101: anchor_lang::error::AnchorError;
    let mut _102: std::string::String;
    let mut _103: &LendingError;
    let _104: LendingError;
    let mut _105: u32;
    let mut _106: LendingError;
    let mut _107: std::string::String;
    let mut _108: &LendingError;
    let _109: LendingError;
    let mut _110: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _111: anchor_lang::error::ErrorOrigin;
    let mut _112: anchor_lang::error::Source;
    let mut _113: std::option::Option<anchor_lang::error::ComparedValues>;
    let _114: ();
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>>;
    let mut _116: std::result::Result<(), LendingError>;
    let mut _117: &mut state::reserve::WithdrawalCaps;
    let mut _118: &mut state::reserve::WithdrawalCaps;
    let mut _119: u64;
    let mut _120: u64;
    let mut _121: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _122: i64;
    let mut _123: isize;
    let mut _125: !;
    let mut _126: std::result::Result<std::convert::Infallible, LendingError>;
    let _128: ();
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _130: std::result::Result<(), anchor_lang::error::Error>;
    let mut _131: &mut state::reserve::Reserve;
    let mut _132: u64;
    let mut _133: u64;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _139: ();
    let mut _140: &mut state::last_update::LastUpdate;
    let mut _141: state::types::DepositLiquidityResult;
    let mut _142: &LendingError;
    let mut _143: &LendingError;
    let mut _144: &LendingError;
    let mut _145: &LendingError;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    scope 1 {
        debug residual => _32;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _35;
        scope 4 {
        }
    }
    scope 5 {
        debug deposit_result => _54;
        let _64: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 10 {
            debug liquidity_amount_f => _64;
            let _66: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 11 {
                debug deposit_limit_f => _66;
                let _68: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 12 {
                    debug reserve_liquidity_supply_f => _68;
                    let _70: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 13 {
                        debug new_reserve_liquidity_supply_f => _70;
                        let _84: std::string::String;
                        let _124: std::result::Result<std::convert::Infallible, LendingError>;
                        let _127: ();
                        let _135: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _138: ();
                        let mut _146: &LendingError;
                        let mut _147: &LendingError;
                        let mut _148: &[&str; 2];
                        scope 14 {
                            debug res => _84;
                        }
                        scope 15 {
                            debug residual => _124;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _127;
                            scope 18 {
                            }
                        }
                        scope 19 {
                            debug residual => _135;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _138;
                            scope 22 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _60;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _63;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Eq(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const "Liquidity amount provided cannot be zero";
        _9 = &(*_10);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _143 = const _;
        _14 = &(*_143);
        _13 = LendingError::name(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _17 = LendingError::InvalidAmount;
        _16 = <LendingError as Into<u32>>::into(move _17) -> [return: bb4, unwind: bb62];
    }

    bb4: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _142 = const _;
        _19 = &(*_142);
        _18 = <LendingError as ToString>::to_string(move _19) -> [return: bb5, unwind: bb62];
    }

    bb5: {
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 122_u32 };
        _22 = anchor_lang::error::ErrorOrigin::Source(move _23);
        StorageDead(_23);
        _21 = std::option::Option::<ErrorOrigin>::Some(move _22);
        StorageDead(_22);
        StorageLive(_24);
        _24 = std::option::Option::<ComparedValues>::None;
        _12 = anchor_lang::error::AnchorError { error_name: move _13, error_code_number: move _16, error_msg: move _18, error_origin: move _21, compared_values: move _24 };
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        _11 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _12) -> [return: bb6, unwind: bb63];
    }

    bb6: {
        StorageDead(_12);
        _0 = std::result::Result::<state::types::DepositLiquidityResult, anchor_lang::error::Error>::Err(move _11);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb58;
    }

    bb7: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_30);
        _30 = ((*_2).0: u64);
        _28 = last_update::LastUpdate::is_stale(move _29, move _30, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _28) -> [return: bb9, unwind: bb63];
    }

    bb9: {
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: bool);
        _26 = _35;
        StorageDead(_35);
        switchInt(move _26) -> [0: bb65, otherwise: bb64];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb68];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _161 = discriminant(_27);
        StorageDead(_27);
        goto -> bb57;
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_39);
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _145 = const _;
        _43 = &(*_145);
        _42 = LendingError::name(move _43) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        _46 = LendingError::ReserveStale;
        _45 = <LendingError as Into<u32>>::into(move _46) -> [return: bb16, unwind: bb61];
    }

    bb16: {
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _144 = const _;
        _48 = &(*_144);
        _47 = <LendingError as ToString>::to_string(move _48) -> [return: bb17, unwind: bb61];
    }

    bb17: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 130_u32 };
        _51 = anchor_lang::error::ErrorOrigin::Source(move _52);
        StorageDead(_52);
        _50 = std::option::Option::<ErrorOrigin>::Some(move _51);
        StorageDead(_51);
        StorageLive(_53);
        _53 = std::option::Option::<ComparedValues>::None;
        _41 = anchor_lang::error::AnchorError { error_name: move _42, error_code_number: move _45, error_msg: move _47, error_origin: move _50, compared_values: move _53 };
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_42);
        _40 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _41) -> [return: bb18, unwind: bb63];
    }

    bb18: {
        StorageDead(_41);
        _0 = std::result::Result::<state::types::DepositLiquidityResult, anchor_lang::error::Error>::Err(move _40);
        StorageDead(_40);
        goto -> bb57;
    }

    bb19: {
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> as Try>::branch(move _56) -> [return: bb20, unwind: bb63];
    }

    bb20: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_63);
        _63 = move ((_55 as Continue).0: state::types::DepositLiquidityResult);
        _54 = move _63;
        StorageDead(_63);
        _153 = discriminant(_55);
        StorageDead(_55);
        StorageLive(_64);
        StorageLive(_65);
        _65 = (_54.0: u64);
        _64 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _65) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_60);
        _60 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _62) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        StorageDead(_62);
        StorageDead(_60);
        _159 = discriminant(_55);
        StorageDead(_55);
        goto -> bb56;
    }

    bb24: {
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = (((*_1).9: state::reserve::ReserveConfig).17: u64);
        _66 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _67) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &((*_1).5: state::reserve::ReserveLiquidity);
        _68 = ReserveLiquidity::total_supply(move _69) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _64;
        StorageLive(_72);
        _72 = _68;
        _70 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _71, move _72) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_70;
        StorageLive(_76);
        _76 = &_66;
        _74 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _75, move _76) -> [return: bb28, unwind continue];
    }

    bb28: {
        switchInt(move _74) -> [0: bb41, otherwise: bb29];
    }

    bb29: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _148 = const _;
        _88 = &(*_148);
        _87 = &(*_88);
        _86 = move _87 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_70;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _95) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_95);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(((*_1).9: state::reserve::ReserveConfig).17: u64);
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _98) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_98);
        _93 = [move _94, move _97];
        StorageDead(_97);
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_91);
        _85 = Arguments::<'_>::new_v1(move _86, move _90) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = format(move _85) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_85);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        _83 = move _84;
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <std::string::String as Deref>::deref(move _81) -> [return: bb34, unwind: bb60];
    }

    bb34: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb35, unwind: bb60];
    }

    bb35: {
        StorageDead(_79);
        drop(_83) -> [return: bb36, unwind: bb63];
    }

    bb36: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _147 = const _;
        _103 = &(*_147);
        _102 = LendingError::name(move _103) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        _106 = LendingError::DepositLimitExceeded;
        _105 = <LendingError as Into<u32>>::into(move _106) -> [return: bb38, unwind: bb59];
    }

    bb38: {
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        _146 = const _;
        _108 = &(*_146);
        _107 = <LendingError as ToString>::to_string(move _108) -> [return: bb39, unwind: bb59];
    }

    bb39: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 149_u32 };
        _111 = anchor_lang::error::ErrorOrigin::Source(move _112);
        StorageDead(_112);
        _110 = std::option::Option::<ErrorOrigin>::Some(move _111);
        StorageDead(_111);
        StorageLive(_113);
        _113 = std::option::Option::<ComparedValues>::None;
        _101 = anchor_lang::error::AnchorError { error_name: move _102, error_code_number: move _105, error_msg: move _107, error_origin: move _110, compared_values: move _113 };
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_102);
        _100 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _101) -> [return: bb40, unwind: bb63];
    }

    bb40: {
        StorageDead(_101);
        _0 = std::result::Result::<state::types::DepositLiquidityResult, anchor_lang::error::Error>::Err(move _100);
        StorageDead(_100);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb55;
    }

    bb41: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = const ();
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &mut (((*_1).9: state::reserve::ReserveConfig).20: state::reserve::WithdrawalCaps);
        _117 = &mut (*_118);
        StorageLive(_119);
        _119 = (_54.0: u64);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = ((*_2).4: i64);
        _121 = <u64 as TryFrom<i64>>::try_from(move _122) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_122);
        _120 = std::result::Result::<u64, TryFromIntError>::unwrap(move _121) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_121);
        _116 = sub_from_withdrawal_accum(move _117, move _119, move _120) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_117);
        _115 = <std::result::Result<(), LendingError> as Try>::branch(move _116) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_116);
        _123 = discriminant(_115);
        switchInt(move _123) -> [0: bb46, 1: bb47, otherwise: bb11];
    }

    bb46: {
        StorageLive(_127);
        _127 = ((_115 as Continue).0: ());
        _114 = _127;
        StorageDead(_127);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &mut (*_1);
        StorageLive(_132);
        _132 = (_54.0: u64);
        StorageLive(_133);
        _133 = (_54.1: u64);
        _130 = reserve::Reserve::deposit_liquidity(move _131, move _132, move _133) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_124);
        _124 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_126);
        _126 = _124;
        _0 = <std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _126) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb55;
    }

    bb49: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        _129 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _130) -> [return: bb50, unwind: bb63];
    }

    bb50: {
        StorageDead(_130);
        _134 = discriminant(_129);
        switchInt(move _134) -> [0: bb51, 1: bb52, otherwise: bb11];
    }

    bb51: {
        StorageLive(_138);
        _138 = ((_129 as Continue).0: ());
        _128 = _138;
        StorageDead(_138);
        _155 = discriminant(_129);
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &mut ((*_1).1: state::last_update::LastUpdate);
        _139 = last_update::LastUpdate::mark_stale(move _140) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_135);
        _135 = move ((_129 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_137);
        _137 = move _135;
        _0 = <std::result::Result<state::types::DepositLiquidityResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _137) -> [return: bb53, unwind: bb66];
    }

    bb53: {
        StorageDead(_137);
        StorageDead(_135);
        _157 = discriminant(_129);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb55;
    }

    bb54: {
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_141);
        _141 = move _54;
        _0 = std::result::Result::<state::types::DepositLiquidityResult, anchor_lang::error::Error>::Ok(move _141);
        StorageDead(_141);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_54);
        goto -> bb58;
    }

    bb55: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_54);
        goto -> bb58;
    }

    bb57: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb58;
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_102) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_83) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_42) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_13) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64: {
        _149 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = const "Reserve is stale and must be refreshed in the current slot";
        _38 = &(*_39);
        _37 = solana_program::log::sol_log(move _38) -> [return: bb14, unwind continue];
    }

    bb65: {
        _151 = discriminant(_27);
        StorageDead(_27);
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_1);
        StorageLive(_58);
        _58 = _3;
        _56 = reserve::Reserve::compute_depositable_amount_and_minted_collateral(move _57, move _58) -> [return: bb19, unwind continue];
    }

    bb66 (cleanup): {
        _163 = discriminant(_129);
        goto -> bb63;
    }

    bb67 (cleanup): {
        _164 = discriminant(_55);
        goto -> bb63;
    }

    bb68 (cleanup): {
        _165 = discriminant(_27);
        goto -> bb63;
    }
}
