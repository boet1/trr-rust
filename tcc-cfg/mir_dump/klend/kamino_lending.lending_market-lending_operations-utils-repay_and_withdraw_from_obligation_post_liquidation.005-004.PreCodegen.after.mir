// MIR for `repay_and_withdraw_from_obligation_post_liquidation` after PreCodegen

fn repay_and_withdraw_from_obligation_post_liquidation(_1: &mut obligation::Obligation, _2: &mut reserve::Reserve, _3: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _4: u64, _5: u64, _6: usize, _7: usize) -> std::result::Result<(), anchor_lang::error::Error> {
    debug obligation => _1;
    debug repay_reserve => _2;
    debug settle_amount => _3;
    debug withdraw_amount => _4;
    debug repay_amount => _5;
    debug liquidity_index => _6;
    debug collateral_index => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _8: ();
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: !;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: anchor_lang::error::Error;
    let mut _16: anchor_lang::error::AnchorError;
    let mut _17: std::string::String;
    let mut _18: &LendingError;
    let _19: LendingError;
    let mut _20: u32;
    let mut _21: LendingError;
    let mut _22: std::string::String;
    let mut _23: &LendingError;
    let _24: LendingError;
    let mut _25: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _26: anchor_lang::error::ErrorOrigin;
    let mut _27: anchor_lang::error::Source;
    let mut _28: std::option::Option<anchor_lang::error::ComparedValues>;
    let _29: ();
    let mut _30: bool;
    let mut _31: u64;
    let mut _32: !;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: anchor_lang::error::Error;
    let mut _37: anchor_lang::error::AnchorError;
    let mut _38: std::string::String;
    let mut _39: &LendingError;
    let _40: LendingError;
    let mut _41: u32;
    let mut _42: LendingError;
    let mut _43: std::string::String;
    let mut _44: &LendingError;
    let _45: LendingError;
    let mut _46: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _47: anchor_lang::error::ErrorOrigin;
    let mut _48: anchor_lang::error::Source;
    let mut _49: std::option::Option<anchor_lang::error::ComparedValues>;
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>>;
    let mut _52: std::result::Result<(), LendingError>;
    let mut _53: &mut state::reserve::ReserveLiquidity;
    let mut _54: u64;
    let mut _55: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, LendingError>;
    let _60: ();
    let _61: ();
    let mut _62: &mut state::last_update::LastUpdate;
    let _63: ();
    let mut _64: &mut state::obligation::Obligation;
    let mut _65: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _66: usize;
    let _67: state::obligation::WithdrawResult;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, state::obligation::WithdrawResult>;
    let mut _69: std::result::Result<state::obligation::WithdrawResult, anchor_lang::error::Error>;
    let mut _70: &mut state::obligation::Obligation;
    let mut _71: u64;
    let mut _72: usize;
    let mut _73: isize;
    let _74: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _77: state::obligation::WithdrawResult;
    let _78: ();
    let mut _79: &mut state::obligation::Obligation;
    let _80: ();
    let mut _81: &mut state::last_update::LastUpdate;
    let mut _82: ();
    let mut _83: &LendingError;
    let mut _84: &LendingError;
    let mut _85: &LendingError;
    let mut _86: &LendingError;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    scope 1 {
        debug residual => _57;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _60;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _74;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _77;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _5;
        _9 = Eq(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const "Liquidation is too small to transfer liquidity";
        _13 = &(*_14);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _84 = const _;
        _18 = &(*_84);
        _17 = LendingError::name(move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        _21 = LendingError::LiquidationTooSmall;
        _20 = <LendingError as Into<u32>>::into(move _21) -> [return: bb4, unwind: bb32];
    }

    bb4: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _83 = const _;
        _23 = &(*_83);
        _22 = <LendingError as ToString>::to_string(move _23) -> [return: bb5, unwind: bb32];
    }

    bb5: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2293_u32 };
        _26 = anchor_lang::error::ErrorOrigin::Source(move _27);
        StorageDead(_27);
        _25 = std::option::Option::<ErrorOrigin>::Some(move _26);
        StorageDead(_26);
        StorageLive(_28);
        _28 = std::option::Option::<ComparedValues>::None;
        _16 = anchor_lang::error::AnchorError { error_name: move _17, error_code_number: move _20, error_msg: move _22, error_origin: move _25, compared_values: move _28 };
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_17);
        _15 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _16) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        StorageDead(_16);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _15);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb30;
    }

    bb7: {
        StorageDead(_10);
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _4;
        _30 = Eq(move _31, const 0_u64);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = const "Liquidation is too small to receive collateral";
        _34 = &(*_35);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut ((*_2).5: state::reserve::ReserveLiquidity);
        StorageLive(_54);
        _54 = _5;
        StorageLive(_55);
        _55 = _3;
        _52 = ReserveLiquidity::repay(move _53, move _54, move _55) -> [return: bb15, unwind continue];
    }

    bb10: {
        StorageDead(_34);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _86 = const _;
        _39 = &(*_86);
        _38 = LendingError::name(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        _42 = LendingError::LiquidationTooSmall;
        _41 = <LendingError as Into<u32>>::into(move _42) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _85 = const _;
        _44 = &(*_85);
        _43 = <LendingError as ToString>::to_string(move _44) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2297_u32 };
        _47 = anchor_lang::error::ErrorOrigin::Source(move _48);
        StorageDead(_48);
        _46 = std::option::Option::<ErrorOrigin>::Some(move _47);
        StorageDead(_47);
        StorageLive(_49);
        _49 = std::option::Option::<ComparedValues>::None;
        _37 = anchor_lang::error::AnchorError { error_name: move _38, error_code_number: move _41, error_msg: move _43, error_origin: move _46, compared_values: move _49 };
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_38);
        _36 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _37) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        StorageDead(_37);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _36);
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb30;
    }

    bb15: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<(), LendingError> as Try>::branch(move _52) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_52);
        _56 = discriminant(_51);
        switchInt(move _56) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_60);
        _60 = ((_51 as Continue).0: ());
        _50 = _60;
        StorageDead(_60);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &mut ((*_2).1: state::last_update::LastUpdate);
        _61 = last_update::LastUpdate::mark_stale(move _62) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_57);
        _57 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _59) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb30;
    }

    bb21: {
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_1);
        StorageLive(_65);
        _65 = _3;
        StorageLive(_66);
        _66 = _6;
        _63 = obligation::Obligation::repay(move _64, move _65, move _66) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut (*_1);
        StorageLive(_71);
        _71 = _4;
        StorageLive(_72);
        _72 = _7;
        _69 = obligation::Obligation::withdraw(move _70, move _71, move _72) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<obligation::WithdrawResult, anchor_lang::error::Error> as Try>::branch(move _69) -> [return: bb24, unwind: bb33];
    }

    bb24: {
        StorageDead(_69);
        _73 = discriminant(_68);
        switchInt(move _73) -> [0: bb25, 1: bb26, otherwise: bb18];
    }

    bb25: {
        StorageLive(_77);
        _77 = ((_68 as Continue).0: state::obligation::WithdrawResult);
        _67 = _77;
        StorageDead(_77);
        _87 = discriminant(_68);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &mut (*_1);
        _78 = obligation::Obligation::update_has_debt(move _79) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_74);
        _74 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_76);
        _76 = move _74;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _76) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        StorageDead(_76);
        StorageDead(_74);
        _89 = discriminant(_68);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb30;
    }

    bb28: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &mut ((*_1).1: state::last_update::LastUpdate);
        _80 = last_update::LastUpdate::mark_stale(move _81) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_82);
        _82 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _82);
        StorageDead(_82);
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_38) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_17) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }

    bb34 (cleanup): {
        _91 = discriminant(_68);
        goto -> bb33;
    }
}
