digraph Mir_0_2309 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn utils::consts::ten_pow(_1: usize) -&gt; u64<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: !;<br align="left"/>let _6: !;<br align="left"/>let _7: !;<br align="left"/>let mut _8: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _9: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _10: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _11: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _12: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _13: [u64; 20_usize];<br align="left"/>let _14: usize;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>debug x =&gt; _1;<br align="left"/>>;
    bb0__0_2309 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = _1<br/>_3 = Gt(move _4, const 19_usize)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_2309 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_17 = const _<br/>_11 = &amp;(*_17)<br/>_10 = &amp;(*_11)<br/>_9 = move _10 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = Arguments::&lt;'_&gt;::new_const(move _9)</td></tr></table>>];
    bb2__0_2309 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = panic_fmt(move _8)</td></tr></table>>];
    bb3__0_2309 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_13)<br/>_13 = const _<br/>StorageLive(_14)<br/>_14 = _1<br/>_15 = Len(_13)<br/>_16 = Lt(_14, _15)<br/></td></tr><tr><td align="left">assert(move _16, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _15, _14)</td></tr></table>>];
    bb4__0_2309 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = _13[_14]<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2309 -> bb3__0_2309 [label="0"];
    bb0__0_2309 -> bb1__0_2309 [label="otherwise"];
    bb1__0_2309 -> bb2__0_2309 [label="return"];
    bb3__0_2309 -> bb4__0_2309 [label="success"];
}
