digraph Mir_0_2805 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn withdraw_obligation_collateral_transfer(_1: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _3: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _4: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _5: &amp;ReErased [&amp;ReErased [u8]], _6: u64) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _7: ();<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _9: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _10: anchor_lang::context::CpiContext&lt;ReErased, ReErased, ReErased, ReErased, anchor_spl::token_2022::Transfer&lt;ReErased&gt;&gt;;<br align="left"/>let mut _11: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _12: anchor_spl::token_2022::Transfer&lt;ReErased&gt;;<br align="left"/>let mut _13: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _14: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _15: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _16: &amp;ReErased [&amp;ReErased [&amp;ReErased [u8]]];<br align="left"/>let mut _17: &amp;ReErased [&amp;ReErased [&amp;ReErased [u8]]; 1_usize];<br align="left"/>let _18: &amp;ReErased [&amp;ReErased [&amp;ReErased [u8]]; 1_usize];<br align="left"/>let _19: [&amp;ReErased [&amp;ReErased [u8]]; 1_usize];<br align="left"/>let mut _20: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _26: ();<br align="left"/>let mut _27: ();<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>debug token_program =&gt; _1;<br align="left"/>debug destination_collateral =&gt; _2;<br align="left"/>debug source_collateral =&gt; _3;<br align="left"/>debug lending_market_authority =&gt; _4;<br align="left"/>debug authority_signer_seeds =&gt; _5;<br align="left"/>debug withdraw_amount =&gt; _6;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>>;
    bb0__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = move _1<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = move _2<br/>StorageLive(_14)<br/>_14 = move _3<br/>StorageLive(_15)<br/>_15 = move _4<br/>_12 = anchor_spl::token_2022::Transfer::&lt;'_&gt; { from: move _14, to: move _13, authority: move _15 }<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;(*_5)<br/>_19 = [move _20]<br/>StorageDead(_20)<br/>_18 = &amp;_19<br/>_17 = &amp;(*_18)<br/>_16 = move _17 as &amp;[&amp;[&amp;[u8]]] (PointerCoercion(Unsize))<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_10 = anchor_lang::context::CpiContext::&lt;'_, '_, '_, '_, anchor_spl::token_2022::Transfer&lt;'_&gt;&gt;::new_with_signer(move _11, move _12, move _16)</td></tr></table>>];
    bb1__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_21)<br/>_21 = _6<br/></td></tr><tr><td align="left">_9 = anchor_spl::token_2022::transfer(move _10, move _21)</td></tr></table>>];
    bb2__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb3__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_22 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb4__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_8 as Continue).0: ())<br/>_7 = _26<br/>StorageDead(_26)<br/>_28 = discriminant(_8)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_27)<br/>_27 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _27)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = move ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_25)<br/>_25 = move _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb7__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>_30 = discriminant(_8)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_2805 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_32 = discriminant(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2805 -> bb1__0_2805 [label="return"];
    bb0__0_2805 -> bb9__0_2805 [label="unwind"];
    bb1__0_2805 -> bb2__0_2805 [label="return"];
    bb1__0_2805 -> bb9__0_2805 [label="unwind"];
    bb2__0_2805 -> bb3__0_2805 [label="return"];
    bb2__0_2805 -> bb9__0_2805 [label="unwind"];
    bb3__0_2805 -> bb4__0_2805 [label="0"];
    bb3__0_2805 -> bb6__0_2805 [label="1"];
    bb3__0_2805 -> bb5__0_2805 [label="otherwise"];
    bb4__0_2805 -> bb8__0_2805 [label=""];
    bb6__0_2805 -> bb7__0_2805 [label="return"];
    bb6__0_2805 -> bb10__0_2805 [label="unwind"];
    bb7__0_2805 -> bb8__0_2805 [label=""];
    bb10__0_2805 -> bb9__0_2805 [label=""];
}
