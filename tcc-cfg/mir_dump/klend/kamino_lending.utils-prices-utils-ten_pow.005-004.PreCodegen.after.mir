// MIR for `prices::utils::ten_pow` after PreCodegen

fn prices::utils::ten_pow(_1: u32) -> uint_types::U128 {
    debug exponent => _1;
    let mut _0: utils::fraction::uint_types::U128;
    let _2: u128;
    let mut _3: !;
    let _4: !;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[&str; 1];
    let _8: &[&str; 1];
    let _9: [&str; 1];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let mut _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let mut _15: &u32;
    let _16: &u32;
    let mut _17: u128;
    let mut _18: &[&str; 1];
    scope 1 {
        debug value => _2;
    }

    bb0: {
        StorageLive(_2);
        switchInt(_1) -> [36: bb2, 35: bb3, 34: bb4, 33: bb5, 32: bb6, 31: bb7, 30: bb8, 29: bb9, 28: bb10, 27: bb11, 26: bb12, 25: bb13, 24: bb14, 23: bb15, 22: bb16, 21: bb17, 20: bb18, 19: bb19, 18: bb20, 17: bb21, 16: bb22, 15: bb23, 14: bb24, 13: bb25, 12: bb26, 11: bb27, 10: bb28, 9: bb29, 8: bb30, 7: bb31, 6: bb32, 5: bb33, 4: bb34, 3: bb35, 2: bb36, 1: bb37, 0: bb38, otherwise: bb1];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _18 = const _;
        _8 = &(*_18);
        _7 = &(*_8);
        _6 = move _7 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_1;
        _15 = &(*_16);
        _14 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _15) -> [return: bb39, unwind continue];
    }

    bb2: {
        _2 = const 1000000000000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb3: {
        _2 = const 100000000000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb4: {
        _2 = const 10000000000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb5: {
        _2 = const 1000000000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb6: {
        _2 = const 100000000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb7: {
        _2 = const 10000000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb8: {
        _2 = const 1000000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb9: {
        _2 = const 100000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb10: {
        _2 = const 10000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb11: {
        _2 = const 1000000000000000000000000000_u128;
        goto -> bb41;
    }

    bb12: {
        _2 = const 100000000000000000000000000_u128;
        goto -> bb41;
    }

    bb13: {
        _2 = const 10000000000000000000000000_u128;
        goto -> bb41;
    }

    bb14: {
        _2 = const 1000000000000000000000000_u128;
        goto -> bb41;
    }

    bb15: {
        _2 = const 100000000000000000000000_u128;
        goto -> bb41;
    }

    bb16: {
        _2 = const 10000000000000000000000_u128;
        goto -> bb41;
    }

    bb17: {
        _2 = const 1000000000000000000000_u128;
        goto -> bb41;
    }

    bb18: {
        _2 = const 100000000000000000000_u128;
        goto -> bb41;
    }

    bb19: {
        _2 = const 10000000000000000000_u128;
        goto -> bb41;
    }

    bb20: {
        _2 = const 1000000000000000000_u128;
        goto -> bb41;
    }

    bb21: {
        _2 = const 100000000000000000_u128;
        goto -> bb41;
    }

    bb22: {
        _2 = const 10000000000000000_u128;
        goto -> bb41;
    }

    bb23: {
        _2 = const 1000000000000000_u128;
        goto -> bb41;
    }

    bb24: {
        _2 = const 100000000000000_u128;
        goto -> bb41;
    }

    bb25: {
        _2 = const 10000000000000_u128;
        goto -> bb41;
    }

    bb26: {
        _2 = const 1000000000000_u128;
        goto -> bb41;
    }

    bb27: {
        _2 = const 100000000000_u128;
        goto -> bb41;
    }

    bb28: {
        _2 = const 10000000000_u128;
        goto -> bb41;
    }

    bb29: {
        _2 = const 1000000000_u128;
        goto -> bb41;
    }

    bb30: {
        _2 = const 100000000_u128;
        goto -> bb41;
    }

    bb31: {
        _2 = const 10000000_u128;
        goto -> bb41;
    }

    bb32: {
        _2 = const 1000000_u128;
        goto -> bb41;
    }

    bb33: {
        _2 = const 100000_u128;
        goto -> bb41;
    }

    bb34: {
        _2 = const 10000_u128;
        goto -> bb41;
    }

    bb35: {
        _2 = const 1000_u128;
        goto -> bb41;
    }

    bb36: {
        _2 = const 100_u128;
        goto -> bb41;
    }

    bb37: {
        _2 = const 10_u128;
        goto -> bb41;
    }

    bb38: {
        _2 = const 1_u128;
        goto -> bb41;
    }

    bb39: {
        StorageDead(_15);
        _13 = [move _14];
        StorageDead(_14);
        _12 = &_13;
        _11 = &(*_12);
        _10 = move _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_11);
        _5 = Arguments::<'_>::new_v1(move _6, move _10) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = panic_fmt(move _5) -> unwind continue;
    }

    bb41: {
        StorageLive(_17);
        _17 = _2;
        _0 = <uint_types::U128 as From<u128>>::from(move _17) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_17);
        StorageDead(_2);
        return;
    }
}
