// MIR for `check_orders_supported_after_user_operation` before PreCodegen

fn check_orders_supported_after_user_operation(_1: &mut obligation::Obligation) -> std::result::Result<(), anchor_lang::error::Error> {
    debug obligation => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: bool;
    let mut _3: &mut std::slice::Iter<'_, state::obligation::ObligationOrder>;
    let mut _4: std::slice::Iter<'_, state::obligation::ObligationOrder>;
    let mut _5: &[state::obligation::ObligationOrder];
    let mut _6: &[state::obligation::ObligationOrder; 2];
    let mut _7: {closure@programs\klend\src\state\order_operations.rs:96:14: 96:21};
    let mut _8: &state::obligation::Obligation;
    let _9: ();
    let mut _10: bool;
    let mut _11: !;
    let mut _13: std::iter::Filter<std::slice::Iter<'_, state::obligation::ObligationOrder>, {closure@programs\klend\src\state\order_operations.rs:102:21: 102:28}>;
    let mut _14: std::slice::Iter<'_, state::obligation::ObligationOrder>;
    let mut _15: &[state::obligation::ObligationOrder];
    let mut _16: &[state::obligation::ObligationOrder; 2];
    let mut _17: {closure@programs\klend\src\state\order_operations.rs:102:21: 102:28};
    let mut _18: &state::obligation::Obligation;
    let _19: ();
    let mut _20: &str;
    let _21: &str;
    let mut _22: &std::string::String;
    let _23: &std::string::String;
    let _24: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[&str; 1];
    let _29: &[&str; 1];
    let _30: [&str; 1];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let mut _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &std::vec::Vec<&state::obligation::ObligationOrder>;
    let _37: &std::vec::Vec<&state::obligation::ObligationOrder>;
    let mut _38: anchor_lang::error::Error;
    let mut _39: anchor_lang::error::AnchorError;
    let mut _40: std::string::String;
    let mut _41: &LendingError;
    let _42: LendingError;
    let mut _43: u32;
    let mut _44: LendingError;
    let mut _45: std::string::String;
    let mut _46: &LendingError;
    let _47: LendingError;
    let mut _48: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _49: anchor_lang::error::ErrorOrigin;
    let mut _50: anchor_lang::error::Source;
    let mut _51: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _52: ();
    scope 1 {
        debug has_unsupported_orders => _2;
        let _12: std::vec::Vec<&state::obligation::ObligationOrder>;
        scope 2 {
            debug unsupported_orders => _12;
            let _25: std::string::String;
            let mut _53: &LendingError;
            let mut _54: &LendingError;
            let mut _55: &[&str; 1];
            scope 3 {
                debug res => _25;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_1).25: [state::obligation::ObligationOrder; 2]);
        _5 = move _6 as &[state::obligation::ObligationOrder] (PointerCoercion(Unsize));
        StorageDead(_6);
        _4 = core::slice::<impl [obligation::ObligationOrder]>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        _7 = {closure@programs\klend\src\state\order_operations.rs:96:14: 96:21} { obligation: move _8 };
        StorageDead(_8);
        _2 = <std::slice::Iter<'_, obligation::ObligationOrder> as Iterator>::any::<{closure@programs\klend\src\state\order_operations.rs:96:14: 96:21}>(move _3, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        switchInt(move _10) -> [0: bb17, otherwise: bb3];
    }

    bb3: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).25: [state::obligation::ObligationOrder; 2]);
        _15 = move _16 as &[state::obligation::ObligationOrder] (PointerCoercion(Unsize));
        StorageDead(_16);
        _14 = core::slice::<impl [obligation::ObligationOrder]>::iter(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_1);
        _17 = {closure@programs\klend\src\state\order_operations.rs:102:21: 102:28} { obligation: move _18 };
        StorageDead(_18);
        _13 = <std::slice::Iter<'_, obligation::ObligationOrder> as Iterator>::filter::<{closure@programs\klend\src\state\order_operations.rs:102:21: 102:28}>(move _14, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_14);
        _12 = <Filter<std::slice::Iter<'_, obligation::ObligationOrder>, {closure@programs\klend\src\state\order_operations.rs:102:21: 102:28}> as Iterator>::collect::<Vec<&obligation::ObligationOrder>>(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _55 = const _;
        _29 = &(*_55);
        _28 = &(*_29);
        _27 = move _28 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_12;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<&obligation::ObligationOrder>>(move _36) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        StorageDead(_36);
        _34 = [move _35];
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = move _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_32);
        _26 = Arguments::<'_>::new_v1(move _27, move _31) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        StorageDead(_31);
        StorageDead(_27);
        _25 = format(move _26) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_29);
        _24 = move _25;
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = <std::string::String as Deref>::deref(move _22) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = solana_program::log::sol_log(move _20) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_20);
        drop(_24) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _54 = const _;
        _41 = &(*_54);
        _40 = LendingError::name(move _41) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        _44 = LendingError::OperationNotPermittedWithCurrentObligationOrders;
        _43 = <LendingError as Into<u32>>::into(move _44) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _53 = const _;
        _46 = &(*_53);
        _45 = <LendingError as ToString>::to_string(move _46) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\order_operations.rs", line: const 108_u32 };
        _49 = anchor_lang::error::ErrorOrigin::Source(move _50);
        StorageDead(_50);
        _48 = std::option::Option::<ErrorOrigin>::Some(move _49);
        StorageDead(_49);
        StorageLive(_51);
        _51 = std::option::Option::<ComparedValues>::None;
        _39 = anchor_lang::error::AnchorError { error_name: move _40, error_code_number: move _43, error_msg: move _45, error_origin: move _48, compared_values: move _51 };
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_40);
        _38 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _39) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        StorageDead(_39);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _38);
        StorageDead(_38);
        drop(_12) -> [return: bb18, unwind: bb23];
    }

    bb17: {
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_52);
        _52 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _52);
        StorageDead(_52);
        StorageDead(_2);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_40) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_24) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_12) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}
