// MIR for `handlers::handler_update_global_config_admin::process` after PreCodegen

fn handlers::handler_update_global_config_admin::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_global_config_admin::UpdateGlobalConfigAdmin<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &mut std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _3: std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::global_config::GlobalConfig>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _14: std::result::Result<(), anchor_lang::error::Error>;
    let mut _15: &mut state::global_config::GlobalConfig;
    let mut _16: &mut state::global_config::GlobalConfig;
    let mut _17: &mut std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _23: ();
    let mut _24: &mut handlers::handler_update_global_config_admin::UpdateGlobalConfigAdmin<'_>;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    scope 1 {
        debug global_config => _2;
        let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _22: ();
        scope 6 {
            debug residual => _19;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _22;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _24 = deref_copy (_1.1: &mut handlers::handler_update_global_config_admin::UpdateGlobalConfigAdmin<'_>);
        _6 = &((*_24).1: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::global_config::GlobalConfig>);
        _3 = move _11;
        StorageDead(_11);
        _2 = &mut _3;
        _25 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut (*_2);
        _16 = <RefMut<'_, global_config::GlobalConfig> as DerefMut>::deref_mut(move _17) -> [return: bb7, unwind: bb16];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _31 = discriminant(_4);
        StorageDead(_4);
        goto -> bb14;
    }

    bb7: {
        _15 = &mut (*_16);
        StorageDead(_17);
        _14 = global_config::GlobalConfig::apply_pending_admin(move _15) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        StorageDead(_15);
        _13 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_14);
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_13 as Continue).0: ());
        _12 = _22;
        StorageDead(_22);
        _27 = discriminant(_13);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_23);
        _23 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _23);
        StorageDead(_23);
        drop(_3) -> [return: bb13, unwind: bb17];
    }

    bb11: {
        StorageLive(_19);
        _19 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _21) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _29 = discriminant(_13);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        drop(_3) -> [return: bb14, unwind: bb17];
    }

    bb13: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        _33 = discriminant(_13);
        goto -> bb16;
    }

    bb19 (cleanup): {
        _34 = discriminant(_4);
        goto -> bb17;
    }
}
