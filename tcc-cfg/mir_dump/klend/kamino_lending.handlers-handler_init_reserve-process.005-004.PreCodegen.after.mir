// MIR for `handlers::handler_init_reserve::process` after PreCodegen

fn handlers::handler_init_reserve::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_reserve::InitReserve<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &anchor_lang::prelude::Clock;
    let _3: anchor_lang::prelude::Clock;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _5: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _10: anchor_lang::prelude::Clock;
    let mut _12: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _23: std::result::Result<(), anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::AccountInfo<'_>;
    let _25: &anchor_lang::prelude::AccountInfo<'_>;
    let _26: anchor_lang::prelude::AccountInfo<'_>;
    let mut _27: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let _29: &anchor_lang::prelude::AccountInfo<'_>;
    let _30: anchor_lang::prelude::AccountInfo<'_>;
    let mut _31: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _38: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _40: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _41: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _47: ();
    let mut _48: &mut state::reserve::Reserve;
    let mut _49: &mut state::reserve::Reserve;
    let mut _50: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _51: state::reserve::InitReserveParams;
    let mut _52: u64;
    let mut _53: anchor_lang::prelude::Pubkey;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _55: std::boxed::Box<state::reserve::ReserveLiquidity>;
    let mut _56: state::reserve::ReserveLiquidity;
    let mut _57: state::reserve::NewReserveLiquidityParams;
    let mut _58: anchor_lang::prelude::Pubkey;
    let mut _59: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _60: u8;
    let mut _61: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _62: &anchor_spl::token_interface::Mint;
    let _63: &anchor_spl::token_interface::Mint;
    let mut _64: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _65: anchor_lang::prelude::Pubkey;
    let mut _66: &anchor_lang::prelude::AccountInfo<'_>;
    let _67: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _68: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _69: anchor_lang::prelude::Pubkey;
    let mut _70: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _71: anchor_lang::prelude::Pubkey;
    let mut _72: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _73: u64;
    let mut _74: &state::lending_market::LendingMarket;
    let mut _75: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _76: std::boxed::Box<state::reserve::ReserveCollateral>;
    let mut _77: state::reserve::ReserveCollateral;
    let mut _78: state::reserve::NewReserveCollateralParams;
    let mut _79: anchor_lang::prelude::Pubkey;
    let mut _80: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _81: anchor_lang::prelude::Pubkey;
    let mut _82: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _83: u64;
    let mut _84: &state::lending_market::LendingMarket;
    let mut _85: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _86: std::boxed::Box<state::reserve::ReserveConfig>;
    let mut _87: state::reserve::ReserveConfig;
    let mut _88: u8;
    let mut _89: state::reserve::ReserveStatus;
    let mut _90: state::reserve::ReserveConfig;
    let _91: ();
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _93: std::result::Result<(), anchor_lang::error::Error>;
    let mut _94: anchor_lang::prelude::AccountInfo<'_>;
    let mut _95: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _96: anchor_lang::prelude::AccountInfo<'_>;
    let mut _97: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _98: anchor_lang::prelude::AccountInfo<'_>;
    let mut _99: &anchor_lang::prelude::Signer<'_>;
    let mut _100: anchor_lang::prelude::AccountInfo<'_>;
    let mut _101: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _102: anchor_lang::prelude::AccountInfo<'_>;
    let mut _103: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _104: u64;
    let mut _105: &state::lending_market::LendingMarket;
    let mut _106: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _107: u8;
    let mut _108: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _109: &anchor_spl::token_interface::Mint;
    let _110: &anchor_spl::token_interface::Mint;
    let mut _111: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _117: ();
    let mut _118: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _119: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _120: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _121: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _122: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _123: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _124: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _125: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _126: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _127: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _128: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _129: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _130: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _131: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _132: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _133: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _134: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _135: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _136: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _137: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _138: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _139: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _140: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _141: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _142: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _143: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _144: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _145: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _146: &mut handlers::handler_init_reserve::InitReserve<'_>;
    let mut _147: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _179: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _180: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _181: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _182: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _183: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _184: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _185: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _186: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _187: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _188: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _189: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug clock => _2;
        let _11: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _20: std::cell::RefMut<'_, state::reserve::Reserve>;
        scope 6 {
            debug reserve => _11;
            let _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _36: ();
            let _37: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
            let _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _46: std::cell::Ref<'_, state::lending_market::LendingMarket>;
            scope 11 {
                debug residual => _33;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _36;
                scope 14 {
                }
            }
            scope 15 {
                debug market => _37;
                let _113: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _116: ();
                scope 20 {
                    debug residual => _113;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _116;
                    scope 23 {
                    }
                }
            }
            scope 16 {
                debug residual => _43;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _46;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _152 = const false;
        _151 = const false;
        _150 = const false;
        _149 = const false;
        _148 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb75];
    }

    bb2: {
        StorageDead(_5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_4 as Continue).0: anchor_lang::prelude::Clock);
        _3 = move _10;
        StorageDead(_10);
        _2 = &_3;
        _153 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _118 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _15 = &((*_118).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _14 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_init(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb90];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _171 = discriminant(_4);
        StorageDead(_4);
        goto -> bb67;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb75];
    }

    bb8: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _12 = move _20;
        StorageDead(_20);
        _11 = &mut _12;
        _155 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _119 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _120 = deref_copy ((*_119).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _178 = (((_120.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _27 = &(*_178);
        _26 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _27) -> [return: bb12, unwind: bb74];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb89];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _169 = discriminant(_13);
        StorageDead(_13);
        goto -> bb66;
    }

    bb12: {
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _121 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _122 = deref_copy ((*_121).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _179 = (((_122.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _31 = &(*_179);
        _30 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _31) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _23 = validate_liquidity_token_extensions(move _24, move _28) -> [return: bb14, unwind: bb72];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb15, unwind: bb72];
    }

    bb15: {
        StorageDead(_23);
        _32 = discriminant(_22);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = ((_22 as Continue).0: ());
        _21 = _36;
        StorageDead(_36);
        _157 = discriminant(_22);
        drop(_30) -> [return: bb19, unwind: bb73];
    }

    bb17: {
        StorageLive(_33);
        _33 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _35) -> [return: bb18, unwind: bb88];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        _167 = discriminant(_22);
        drop(_30) -> [return: bb63, unwind: bb73];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_29);
        drop(_26) -> [return: bb20, unwind: bb74];
    }

    bb20: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _123 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _41 = &((*_123).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _40 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _41) -> [return: bb21, unwind: bb74];
    }

    bb21: {
        StorageDead(_41);
        _39 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _40) -> [return: bb22, unwind: bb74];
    }

    bb22: {
        StorageDead(_40);
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_46);
        _46 = move ((_39 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _38 = move _46;
        StorageDead(_46);
        _37 = &_38;
        _159 = discriminant(_39);
        StorageDead(_39);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut (*_11);
        _49 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _50) -> [return: bb26, unwind: bb71];
    }

    bb24: {
        StorageLive(_43);
        _43 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _45) -> [return: bb25, unwind: bb87];
    }

    bb25: {
        StorageDead(_45);
        StorageDead(_43);
        _165 = discriminant(_39);
        StorageDead(_39);
        goto -> bb62;
    }

    bb26: {
        _48 = &mut (*_49);
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = ((*_2).0: u64);
        StorageLive(_53);
        StorageLive(_54);
        _124 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _54 = &((*_124).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _53 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _54) -> [return: bb27, unwind: bb71];
    }

    bb27: {
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _125 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _126 = deref_copy ((*_125).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _180 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _59 = &(*_180);
        _58 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _59) -> [return: bb28, unwind: bb71];
    }

    bb28: {
        StorageDead(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _127 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _128 = deref_copy ((*_127).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _181 = (((_128.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _64 = &(*_181);
        _63 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _64) -> [return: bb29, unwind: bb71];
    }

    bb29: {
        _62 = &(*_63);
        _61 = <anchor_spl::token_interface::Mint as Deref>::deref(move _62) -> [return: bb30, unwind: bb71];
    }

    bb30: {
        StorageDead(_64);
        StorageDead(_62);
        _60 = ((*_61).2: u8);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _129 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _68 = &((*_129).11: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _67 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _68) -> [return: bb31, unwind: bb71];
    }

    bb31: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _66) -> [return: bb32, unwind: bb71];
    }

    bb32: {
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        _130 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _131 = deref_copy ((*_130).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _182 = (((_131.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _70 = &(*_182);
        _69 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _70) -> [return: bb33, unwind: bb71];
    }

    bb33: {
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        _132 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _133 = deref_copy ((*_132).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _183 = (((_133.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _72 = &(*_183);
        _71 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _72) -> [return: bb34, unwind: bb71];
    }

    bb34: {
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_37);
        _74 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _75) -> [return: bb35, unwind: bb71];
    }

    bb35: {
        StorageDead(_75);
        _73 = ((*_74).25: u64);
        _57 = NewReserveLiquidityParams { mint_pubkey: move _58, mint_decimals: move _60, mint_token_program: move _65, supply_vault: move _69, fee_vault: move _71, market_price_sf: const 0_u128, initial_amount_deposited_in_reserve: move _73 };
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_58);
        _56 = ReserveLiquidity::new(move _57) -> [return: bb36, unwind: bb71];
    }

    bb36: {
        StorageDead(_57);
        _55 = Box::<ReserveLiquidity>::new(move _56) -> [return: bb37, unwind: bb71];
    }

    bb37: {
        StorageDead(_56);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _134 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _135 = deref_copy ((*_134).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _184 = (((_135.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _80 = &(*_184);
        _79 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _80) -> [return: bb38, unwind: bb70];
    }

    bb38: {
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _136 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _137 = deref_copy ((*_136).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _185 = (((_137.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _82 = &(*_185);
        _81 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _82) -> [return: bb39, unwind: bb70];
    }

    bb39: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_37);
        _84 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _85) -> [return: bb40, unwind: bb70];
    }

    bb40: {
        StorageDead(_85);
        _83 = ((*_84).25: u64);
        _78 = NewReserveCollateralParams { mint_pubkey: move _79, supply_vault: move _81, initial_collateral_supply: move _83 };
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        _77 = ReserveCollateral::new(move _78) -> [return: bb41, unwind: bb70];
    }

    bb41: {
        StorageDead(_78);
        _76 = Box::<ReserveCollateral>::new(move _77) -> [return: bb42, unwind: bb70];
    }

    bb42: {
        StorageDead(_77);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = reserve::ReserveStatus::Hidden;
        _88 = <reserve::ReserveStatus as Into<u8>>::into(move _89) -> [return: bb43, unwind: bb69];
    }

    bb43: {
        StorageDead(_89);
        StorageLive(_90);
        _90 = <reserve::ReserveConfig as Default>::default() -> [return: bb44, unwind: bb69];
    }

    bb44: {
        _87 = reserve::ReserveConfig { status: move _88, asset_tier: (_90.1: u8), host_fixed_interest_rate_bps: (_90.2: u16), reserved_2: (_90.3: [u8; 9]), protocol_order_execution_fee_pct: (_90.4: u8), protocol_take_rate_pct: (_90.5: u8), protocol_liquidation_fee_pct: (_90.6: u8), loan_to_value_pct: (_90.7: u8), liquidation_threshold_pct: (_90.8: u8), min_liquidation_bonus_bps: (_90.9: u16), max_liquidation_bonus_bps: (_90.10: u16), bad_debt_liquidation_bonus_bps: (_90.11: u16), deleveraging_margin_call_period_secs: (_90.12: u64), deleveraging_threshold_decrease_bps_per_day: (_90.13: u64), fees: (_90.14: state::reserve::ReserveFees), borrow_rate_curve: (_90.15: utils::borrow_rate_curve::BorrowRateCurve), borrow_factor_pct: (_90.16: u64), deposit_limit: (_90.17: u64), borrow_limit: (_90.18: u64), token_info: (_90.19: state::token_info::TokenInfo), deposit_withdrawal_cap: (_90.20: state::reserve::WithdrawalCaps), debt_withdrawal_cap: (_90.21: state::reserve::WithdrawalCaps), elevation_groups: (_90.22: [u8; 20]), disable_usage_as_coll_outside_emode: (_90.23: u8), utilization_limit_block_borrowing_above_pct: (_90.24: u8), autodeleverage_enabled: (_90.25: u8), reserved_1: (_90.26: [u8; 1]), borrow_limit_outside_elevation_group: (_90.27: u64), borrow_limit_against_this_collateral_in_elevation_group: (_90.28: [u64; 32]), deleveraging_bonus_increase_bps_per_day: (_90.29: u64) };
        StorageDead(_88);
        _86 = Box::<reserve::ReserveConfig>::new(move _87) -> [return: bb45, unwind: bb69];
    }

    bb45: {
        StorageDead(_87);
        _51 = InitReserveParams { current_slot: move _52, lending_market: move _53, liquidity: move _55, collateral: move _76, config: move _86 };
        StorageDead(_86);
        StorageDead(_76);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        _47 = reserve::Reserve::init(move _48, move _51) -> [return: bb46, unwind: bb71];
    }

    bb46: {
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_90);
        StorageDead(_84);
        StorageDead(_74);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _138 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _139 = deref_copy ((*_138).9: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _186 = (((_139.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _95 = &(*_186);
        _94 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _95) -> [return: bb47, unwind: bb71];
    }

    bb47: {
        _152 = const true;
        StorageDead(_95);
        StorageLive(_96);
        StorageLive(_97);
        _140 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _141 = deref_copy ((*_140).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _187 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _97 = &(*_187);
        _96 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _97) -> [return: bb48, unwind: bb86];
    }

    bb48: {
        _151 = const true;
        StorageDead(_97);
        StorageLive(_98);
        StorageLive(_99);
        _142 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _99 = &((*_142).0: anchor_lang::prelude::Signer<'_>);
        _98 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _99) -> [return: bb49, unwind: bb84];
    }

    bb49: {
        _150 = const true;
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        _143 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _144 = deref_copy ((*_143).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _188 = (((_144.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _101 = &(*_188);
        _100 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _101) -> [return: bb50, unwind: bb82];
    }

    bb50: {
        _149 = const true;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        _145 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _103 = &((*_145).11: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _102 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _103) -> [return: bb51, unwind: bb80];
    }

    bb51: {
        _148 = const true;
        StorageDead(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_37);
        _105 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _106) -> [return: bb52, unwind: bb78];
    }

    bb52: {
        StorageDead(_106);
        _104 = ((*_105).25: u64);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _146 = deref_copy (_1.1: &mut handlers::handler_init_reserve::InitReserve<'_>);
        _147 = deref_copy ((*_146).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _189 = (((_147.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _111 = &(*_189);
        _110 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _111) -> [return: bb53, unwind: bb78];
    }

    bb53: {
        _109 = &(*_110);
        _108 = <anchor_spl::token_interface::Mint as Deref>::deref(move _109) -> [return: bb54, unwind: bb78];
    }

    bb54: {
        StorageDead(_111);
        StorageDead(_109);
        _107 = ((*_108).2: u8);
        _152 = const false;
        _151 = const false;
        _150 = const false;
        _149 = const false;
        _148 = const false;
        _93 = deposit_initial_reserve_liquidity_transfer(move _94, move _96, move _98, move _100, move _102, move _104, move _107) -> [return: bb55, unwind: bb78];
    }

    bb55: {
        StorageDead(_107);
        StorageDead(_104);
        _148 = const false;
        StorageDead(_102);
        _149 = const false;
        StorageDead(_100);
        _150 = const false;
        StorageDead(_98);
        _151 = const false;
        StorageDead(_96);
        _152 = const false;
        StorageDead(_94);
        _92 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _93) -> [return: bb56, unwind: bb71];
    }

    bb56: {
        StorageDead(_93);
        _112 = discriminant(_92);
        switchInt(move _112) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_116);
        _116 = ((_92 as Continue).0: ());
        _91 = _116;
        StorageDead(_116);
        _161 = discriminant(_92);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_117);
        _117 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _117);
        StorageDead(_117);
        drop(_38) -> [return: bb60, unwind: bb74];
    }

    bb58: {
        StorageLive(_113);
        _113 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_115);
        _115 = move _113;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _115) -> [return: bb59, unwind: bb76];
    }

    bb59: {
        StorageDead(_115);
        StorageDead(_113);
        _163 = discriminant(_92);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_92);
        StorageDead(_91);
        drop(_38) -> [return: bb62, unwind: bb74];
    }

    bb60: {
        StorageDead(_38);
        StorageDead(_37);
        drop(_12) -> [return: bb61, unwind: bb75];
    }

    bb61: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb68;
    }

    bb62: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb65;
    }

    bb63: {
        StorageDead(_30);
        StorageDead(_29);
        drop(_26) -> [return: bb64, unwind: bb74];
    }

    bb64: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb65;
    }

    bb65: {
        drop(_12) -> [return: bb66, unwind: bb75];
    }

    bb66: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb68;
    }

    bb68: {
        return;
    }

    bb69 (cleanup): {
        drop(_76) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_55) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_38) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_30) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_26) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_12) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        resume;
    }

    bb76 (cleanup): {
        _173 = discriminant(_92);
        goto -> bb71;
    }

    bb77 (cleanup): {
        drop(_102) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_148) -> [0: bb80, otherwise: bb77];
    }

    bb79 (cleanup): {
        drop(_100) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_149) -> [0: bb82, otherwise: bb79];
    }

    bb81 (cleanup): {
        drop(_98) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_150) -> [0: bb84, otherwise: bb81];
    }

    bb83 (cleanup): {
        drop(_96) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_151) -> [0: bb86, otherwise: bb83];
    }

    bb85 (cleanup): {
        drop(_94) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_152) -> [0: bb71, otherwise: bb85];
    }

    bb87 (cleanup): {
        _174 = discriminant(_39);
        goto -> bb74;
    }

    bb88 (cleanup): {
        _175 = discriminant(_22);
        goto -> bb72;
    }

    bb89 (cleanup): {
        _176 = discriminant(_13);
        goto -> bb75;
    }

    bb90 (cleanup): {
        _177 = discriminant(_4);
        goto -> bb75;
    }
}
