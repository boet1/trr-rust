digraph Mir_0_11518 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;uint_types::U256 as Not&gt;::not(_1: utils::fraction::uint_types::U256) -&gt; utils::fraction::uint_types::U256<br align="left"/>let _2: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _3: [u64; 4_usize];<br align="left"/>let _4: ();<br align="left"/>let mut _5: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _6: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: ();<br align="left"/>let _9: ();<br align="left"/>let mut _10: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _11: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _13: isize;<br align="left"/>let mut _14: !;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: u64;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: bool;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: [u64; 4_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>debug ret =&gt; _3;<br align="left"/>debug iter =&gt; _7;<br align="left"/>debug i =&gt; _15;<br align="left"/>>;
    bb0__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = &amp;(_1.0: [u64; 4])<br/>StorageLive(_3)<br/>_3 = [const 0_u64; 4]<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 4_usize }<br/></td></tr><tr><td align="left">_5 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _6)</td></tr></table>>];
    bb1__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>_7 = move _5<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;mut _7<br/>_11 = &amp;mut (*_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _11)</td></tr></table>>];
    bb3__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_13 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb4__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_10 as Some).0: usize)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _15<br/>_18 = Len((*_2))<br/>_19 = Lt(_17, _18)<br/></td></tr><tr><td align="left">assert(move _19, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _18, _17)</td></tr></table>>];
    bb5__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_4 = const ()<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_23)<br/>_23 = _3<br/>_0 = uint_types::U256(move _23)<br/>StorageDead(_23)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb7__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_16 = (*_2)[_17]<br/>StorageLive(_20)<br/>_20 = _15<br/>_21 = Len(_3)<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb8__0_11518 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_3[_20] = Not(move _16)<br/>StorageDead(_16)<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>_9 = const ()<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>_8 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_11518 -> bb1__0_11518 [label="return"];
    bb1__0_11518 -> bb2__0_11518 [label=""];
    bb2__0_11518 -> bb3__0_11518 [label="return"];
    bb3__0_11518 -> bb6__0_11518 [label="0"];
    bb3__0_11518 -> bb4__0_11518 [label="1"];
    bb3__0_11518 -> bb5__0_11518 [label="otherwise"];
    bb4__0_11518 -> bb7__0_11518 [label="success"];
    bb7__0_11518 -> bb8__0_11518 [label="success"];
    bb8__0_11518 -> bb2__0_11518 [label=""];
}
