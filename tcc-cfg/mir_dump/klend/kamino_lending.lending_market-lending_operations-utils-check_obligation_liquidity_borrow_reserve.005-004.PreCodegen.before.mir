// MIR for `check_obligation_liquidity_borrow_reserve` before PreCodegen

fn check_obligation_liquidity_borrow_reserve(_1: &obligation::ObligationLiquidity, _2: &reserve::Reserve, _3: anchor_lang::prelude::Pubkey, _4: usize, _5: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug borrow => _1;
    debug borrow_reserve => _2;
    debug borrow_reserve_pk => _3;
    debug index => _4;
    debug slot => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: !;
    let _11: ();
    let mut _12: &str;
    let _13: &str;
    let mut _14: &std::string::String;
    let _15: &std::string::String;
    let _16: std::string::String;
    let _17: std::string::String;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[&str; 2];
    let _21: &[&str; 2];
    let _22: [&str; 2];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let mut _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let mut _28: &usize;
    let _29: &usize;
    let mut _30: anchor_lang::error::Error;
    let mut _31: anchor_lang::error::AnchorError;
    let mut _32: std::string::String;
    let mut _33: &LendingError;
    let _34: LendingError;
    let mut _35: u32;
    let mut _36: LendingError;
    let mut _37: std::string::String;
    let mut _38: &LendingError;
    let _39: LendingError;
    let mut _40: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _41: anchor_lang::error::ErrorOrigin;
    let mut _42: anchor_lang::error::Source;
    let mut _43: std::option::Option<anchor_lang::error::ComparedValues>;
    let _44: ();
    let mut _45: bool;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _47: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _48: &state::last_update::LastUpdate;
    let mut _49: u64;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _54: bool;
    let mut _55: !;
    let _56: ();
    let mut _57: &str;
    let _58: &str;
    let mut _59: &std::string::String;
    let _60: &std::string::String;
    let _61: std::string::String;
    let _62: std::string::String;
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[&str; 3];
    let _66: &[&str; 3];
    let _67: [&str; 3];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let mut _69: &[core::fmt::rt::Argument<'_>; 3];
    let _70: &[core::fmt::rt::Argument<'_>; 3];
    let _71: [core::fmt::rt::Argument<'_>; 3];
    let mut _72: core::fmt::rt::Argument<'_>;
    let mut _73: &anchor_lang::prelude::Pubkey;
    let _74: &anchor_lang::prelude::Pubkey;
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &usize;
    let _77: &usize;
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &state::last_update::LastUpdate;
    let _80: &state::last_update::LastUpdate;
    let mut _81: anchor_lang::error::Error;
    let mut _82: anchor_lang::error::AnchorError;
    let mut _83: std::string::String;
    let mut _84: &LendingError;
    let _85: LendingError;
    let mut _86: u32;
    let mut _87: LendingError;
    let mut _88: std::string::String;
    let mut _89: &LendingError;
    let _90: LendingError;
    let mut _91: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _92: anchor_lang::error::ErrorOrigin;
    let mut _93: anchor_lang::error::Source;
    let mut _94: std::option::Option<anchor_lang::error::ComparedValues>;
    let _95: ();
    let mut _96: bool;
    let mut _97: u64;
    let mut _98: u64;
    let mut _99: !;
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: &std::string::String;
    let _104: &std::string::String;
    let _105: std::string::String;
    let _106: std::string::String;
    let mut _107: std::fmt::Arguments<'_>;
    let mut _108: &[&str];
    let mut _109: &[&str; 3];
    let _110: &[&str; 3];
    let _111: [&str; 3];
    let mut _112: &[core::fmt::rt::Argument<'_>];
    let mut _113: &[core::fmt::rt::Argument<'_>; 2];
    let _114: &[core::fmt::rt::Argument<'_>; 2];
    let _115: [core::fmt::rt::Argument<'_>; 2];
    let mut _116: core::fmt::rt::Argument<'_>;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let _118: &anchor_lang::prelude::Pubkey;
    let mut _119: core::fmt::rt::Argument<'_>;
    let mut _120: &usize;
    let _121: &usize;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::AnchorError;
    let mut _124: std::string::String;
    let mut _125: &LendingError;
    let _126: LendingError;
    let mut _127: u32;
    let mut _128: LendingError;
    let mut _129: std::string::String;
    let mut _130: &LendingError;
    let _131: LendingError;
    let mut _132: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _133: anchor_lang::error::ErrorOrigin;
    let mut _134: anchor_lang::error::Source;
    let mut _135: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _136: ();
    let mut _137: &LendingError;
    let mut _138: &LendingError;
    let mut _139: &[&str; 2];
    let mut _140: &LendingError;
    let mut _141: &LendingError;
    let mut _142: &[&str; 3];
    let mut _143: &LendingError;
    let mut _144: &LendingError;
    let mut _145: &[&str; 3];
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    scope 1 {
        debug res => _17;
    }
    scope 2 {
        debug residual => _51;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _54;
        scope 5 {
        }
    }
    scope 6 {
        debug res => _62;
    }
    scope 7 {
        debug res => _106;
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_9);
        _9 = &_3;
        _7 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _7) -> [0: bb13, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _139 = const _;
        _21 = &(*_139);
        _20 = &(*_21);
        _19 = move _20 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_4;
        _28 = &(*_29);
        _27 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _28) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_28);
        _26 = [move _27];
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_24);
        _18 = Arguments::<'_>::new_v1(move _19, move _23) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_23);
        StorageDead(_19);
        _17 = format(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        _16 = move _17;
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = <std::string::String as Deref>::deref(move _14) -> [return: bb6, unwind: bb52];
    }

    bb6: {
        _12 = &(*_13);
        StorageDead(_14);
        _11 = solana_program::log::sol_log(move _12) -> [return: bb7, unwind: bb52];
    }

    bb7: {
        StorageDead(_12);
        drop(_16) -> [return: bb8, unwind: bb53];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _138 = const _;
        _33 = &(*_138);
        _32 = LendingError::name(move _33) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        _36 = LendingError::InvalidAccountInput;
        _35 = <LendingError as Into<u32>>::into(move _36) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _137 = const _;
        _38 = &(*_137);
        _37 = <LendingError as ToString>::to_string(move _38) -> [return: bb11, unwind: bb51];
    }

    bb11: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2397_u32 };
        _41 = anchor_lang::error::ErrorOrigin::Source(move _42);
        StorageDead(_42);
        _40 = std::option::Option::<ErrorOrigin>::Some(move _41);
        StorageDead(_41);
        StorageLive(_43);
        _43 = std::option::Option::<ComparedValues>::None;
        _31 = anchor_lang::error::AnchorError { error_name: move _32, error_code_number: move _35, error_msg: move _37, error_origin: move _40, compared_values: move _43 };
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_32);
        _30 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _31) -> [return: bb12, unwind: bb53];
    }

    bb12: {
        StorageDead(_31);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _30);
        StorageDead(_30);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb46;
    }

    bb13: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &((*_2).1: state::last_update::LastUpdate);
        StorageLive(_49);
        _49 = _5;
        _47 = last_update::LastUpdate::is_stale(move _48, move _49, const _) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _47) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        StorageDead(_47);
        _50 = discriminant(_46);
        switchInt(move _50) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_54);
        _54 = ((_46 as Continue).0: bool);
        _45 = _54;
        StorageDead(_54);
        switchInt(move _45) -> [0: bb55, otherwise: bb54];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_51);
        _51 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _53) -> [return: bb19, unwind: bb56];
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_51);
        _150 = discriminant(_46);
        StorageDead(_46);
        goto -> bb45;
    }

    bb20: {
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_4;
        _76 = &(*_77);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _76) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((*_2).1: state::last_update::LastUpdate);
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_debug::<last_update::LastUpdate>(move _79) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_79);
        _71 = [move _72, move _75, move _78];
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = move _69 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_69);
        _63 = Arguments::<'_>::new_v1(move _64, move _68) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_68);
        StorageDead(_64);
        _62 = format(move _63) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_63);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_66);
        _61 = move _62;
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = <std::string::String as Deref>::deref(move _59) -> [return: bb25, unwind: bb50];
    }

    bb25: {
        _57 = &(*_58);
        StorageDead(_59);
        _56 = solana_program::log::sol_log(move _57) -> [return: bb26, unwind: bb50];
    }

    bb26: {
        StorageDead(_57);
        drop(_61) -> [return: bb27, unwind: bb53];
    }

    bb27: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _141 = const _;
        _84 = &(*_141);
        _83 = LendingError::name(move _84) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_84);
        StorageLive(_86);
        StorageLive(_87);
        _87 = LendingError::ReserveStale;
        _86 = <LendingError as Into<u32>>::into(move _87) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        _140 = const _;
        _89 = &(*_140);
        _88 = <LendingError as ToString>::to_string(move _89) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2412_u32 };
        _92 = anchor_lang::error::ErrorOrigin::Source(move _93);
        StorageDead(_93);
        _91 = std::option::Option::<ErrorOrigin>::Some(move _92);
        StorageDead(_92);
        StorageLive(_94);
        _94 = std::option::Option::<ComparedValues>::None;
        _82 = anchor_lang::error::AnchorError { error_name: move _83, error_code_number: move _86, error_msg: move _88, error_origin: move _91, compared_values: move _94 };
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_83);
        _81 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _82) -> [return: bb31, unwind: bb53];
    }

    bb31: {
        StorageDead(_82);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _81);
        StorageDead(_81);
        goto -> bb45;
    }

    bb32: {
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _145 = const _;
        _110 = &(*_145);
        _109 = &(*_110);
        _108 = move _109 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _117 = &(*_118);
        _116 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _117) -> [return: bb34, unwind continue];
    }

    bb33: {
        StorageDead(_98);
        StorageDead(_97);
        _95 = const ();
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_136);
        _136 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _136);
        StorageDead(_136);
        goto -> bb46;
    }

    bb34: {
        StorageDead(_117);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_4;
        _120 = &(*_121);
        _119 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _120) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_120);
        _115 = [move _116, move _119];
        StorageDead(_119);
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = move _113 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_113);
        _107 = Arguments::<'_>::new_v1(move _108, move _112) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_112);
        StorageDead(_108);
        _106 = format(move _107) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_107);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_110);
        _105 = move _106;
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = <std::string::String as Deref>::deref(move _103) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        _101 = &(*_102);
        StorageDead(_103);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb39, unwind: bb48];
    }

    bb39: {
        StorageDead(_101);
        drop(_105) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _144 = const _;
        _125 = &(*_144);
        _124 = LendingError::name(move _125) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        _128 = LendingError::ReserveDeprecated;
        _127 = <LendingError as Into<u32>>::into(move _128) -> [return: bb42, unwind: bb47];
    }

    bb42: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _143 = const _;
        _130 = &(*_143);
        _129 = <LendingError as ToString>::to_string(move _130) -> [return: bb43, unwind: bb47];
    }

    bb43: {
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2421_u32 };
        _133 = anchor_lang::error::ErrorOrigin::Source(move _134);
        StorageDead(_134);
        _132 = std::option::Option::<ErrorOrigin>::Some(move _133);
        StorageDead(_133);
        StorageLive(_135);
        _135 = std::option::Option::<ComparedValues>::None;
        _123 = anchor_lang::error::AnchorError { error_name: move _124, error_code_number: move _127, error_msg: move _129, error_origin: move _132, compared_values: move _135 };
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_124);
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _123) -> [return: bb44, unwind: bb53];
    }

    bb44: {
        StorageDead(_123);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _122);
        StorageDead(_122);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb46;
    }

    bb45: {
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb46;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_124) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_105) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_83) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_61) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_32) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_16) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54: {
        _146 = discriminant(_46);
        StorageDead(_46);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _142 = const _;
        _66 = &(*_142);
        _65 = &(*_66);
        _64 = move _65 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _73 = &(*_74);
        _72 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _73) -> [return: bb20, unwind continue];
    }

    bb55: {
        _148 = discriminant(_46);
        StorageDead(_46);
        _44 = const ();
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = ((*_2).0: u64);
        StorageLive(_98);
        _98 = const _ as u64 (IntToInt);
        _96 = Ne(move _97, move _98);
        switchInt(move _96) -> [0: bb33, otherwise: bb32];
    }

    bb56 (cleanup): {
        _152 = discriminant(_46);
        goto -> bb53;
    }
}
