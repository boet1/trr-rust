// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:466:1: 466:34>::default` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:466:1: 466:34>::default() -> ReserveLiquidity {
    let mut _0: state::reserve::ReserveLiquidity;
    let mut _1: anchor_lang::prelude::Pubkey;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: state::reserve::BigFractionBytes;
    let mut _5: utils::fraction::BigFraction;
    let mut _6: anchor_lang::prelude::Pubkey;
    let mut _7: [u64; 51];
    let mut _8: [u128; 32];

    bb0: {
        StorageLive(_1);
        _1 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = <utils::fraction::BigFraction as From<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::from(const _) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = <reserve::BigFractionBytes as From<utils::fraction::BigFraction>>::from(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = [const 0_u64; 51];
        StorageLive(_8);
        _8 = [const 0_u128; 32];
        _0 = ReserveLiquidity { mint_pubkey: move _1, supply_vault: move _2, fee_vault: move _3, available_amount: const 0_u64, borrowed_amount_sf: const 0_u128, market_price_sf: const 0_u128, market_price_last_updated_ts: const 0_u64, mint_decimals: const 0_u64, deposit_limit_crossed_timestamp: const 0_u64, borrow_limit_crossed_timestamp: const 0_u64, cumulative_borrow_rate_bsf: move _4, accumulated_protocol_fees_sf: const 0_u128, accumulated_referrer_fees_sf: const 0_u128, pending_referrer_fees_sf: const 0_u128, absolute_referral_rate_sf: const 0_u128, token_program: move _6, padding2: move _7, padding3: move _8 };
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
