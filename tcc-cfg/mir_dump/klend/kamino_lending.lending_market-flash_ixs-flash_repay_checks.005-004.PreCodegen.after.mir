// MIR for `flash_repay_checks` after PreCodegen

fn flash_repay_checks(_1: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>>, _2: u8, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug borrow_instruction_index => _2;
    debug liquidity_amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: u16;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _10: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _11: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _12: isize;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _17: ();
    let mut _18: bool;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _20: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _21: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _27: !;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: anchor_lang::error::Error;
    let mut _32: anchor_lang::error::AnchorError;
    let mut _33: std::string::String;
    let mut _34: &LendingError;
    let _35: LendingError;
    let mut _36: u32;
    let mut _37: LendingError;
    let mut _38: std::string::String;
    let mut _39: &LendingError;
    let _40: LendingError;
    let mut _41: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _42: anchor_lang::error::ErrorOrigin;
    let mut _43: anchor_lang::error::Source;
    let mut _44: std::option::Option<anchor_lang::error::ComparedValues>;
    let _45: ();
    let mut _46: bool;
    let mut _47: usize;
    let mut _48: u8;
    let mut _49: usize;
    let mut _50: !;
    let _51: ();
    let mut _52: &str;
    let _53: &str;
    let mut _54: &std::string::String;
    let _55: &std::string::String;
    let _56: std::string::String;
    let mut _58: std::fmt::Arguments<'_>;
    let mut _59: &[&str];
    let mut _60: &[&str; 2];
    let _61: &[&str; 2];
    let _62: [&str; 2];
    let mut _63: &[core::fmt::rt::Argument<'_>];
    let mut _64: &[core::fmt::rt::Argument<'_>; 2];
    let _65: &[core::fmt::rt::Argument<'_>; 2];
    let _66: [core::fmt::rt::Argument<'_>; 2];
    let mut _67: core::fmt::rt::Argument<'_>;
    let mut _68: &u8;
    let _69: &u8;
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: &usize;
    let _72: &usize;
    let mut _73: anchor_lang::error::Error;
    let mut _74: anchor_lang::error::AnchorError;
    let mut _75: std::string::String;
    let mut _76: &LendingError;
    let _77: LendingError;
    let mut _78: u32;
    let mut _79: LendingError;
    let mut _80: std::string::String;
    let mut _81: &LendingError;
    let _82: LendingError;
    let mut _83: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _84: anchor_lang::error::ErrorOrigin;
    let mut _85: anchor_lang::error::Source;
    let mut _86: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _89: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _90: &lending_market::ix_utils::BpfInstructionLoader<'_, '_>;
    let mut _91: usize;
    let mut _92: u8;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _98: ();
    let mut _99: bool;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &anchor_lang::prelude::Pubkey;
    let mut _102: !;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: &std::string::String;
    let _107: &std::string::String;
    let _108: std::string::String;
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[&str; 2];
    let _113: &[&str; 2];
    let _114: [&str; 2];
    let mut _115: &[core::fmt::rt::Argument<'_>];
    let mut _116: &[core::fmt::rt::Argument<'_>; 2];
    let _117: &[core::fmt::rt::Argument<'_>; 2];
    let _118: [core::fmt::rt::Argument<'_>; 2];
    let mut _119: core::fmt::rt::Argument<'_>;
    let mut _120: &u8;
    let _121: &u8;
    let mut _122: core::fmt::rt::Argument<'_>;
    let mut _123: &anchor_lang::prelude::Pubkey;
    let _124: &anchor_lang::prelude::Pubkey;
    let mut _125: anchor_lang::error::Error;
    let mut _126: anchor_lang::error::AnchorError;
    let mut _127: std::string::String;
    let mut _128: &LendingError;
    let _129: LendingError;
    let mut _130: u32;
    let mut _131: LendingError;
    let mut _132: std::string::String;
    let mut _133: &LendingError;
    let _134: LendingError;
    let mut _135: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _136: anchor_lang::error::ErrorOrigin;
    let mut _137: anchor_lang::error::Source;
    let mut _138: std::option::Option<anchor_lang::error::ComparedValues>;
    let _140: ();
    let mut _141: bool;
    let mut _142: &[u8];
    let _143: &[u8];
    let mut _144: &std::vec::Vec<u8>;
    let mut _145: std::ops::RangeTo<usize>;
    let mut _146: &[u8; 8];
    let mut _147: !;
    let _148: ();
    let mut _149: &str;
    let _150: &str;
    let mut _151: anchor_lang::error::Error;
    let mut _152: anchor_lang::error::AnchorError;
    let mut _153: std::string::String;
    let mut _154: &LendingError;
    let _155: LendingError;
    let mut _156: u32;
    let mut _157: LendingError;
    let mut _158: std::string::String;
    let mut _159: &LendingError;
    let _160: LendingError;
    let mut _161: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _162: anchor_lang::error::ErrorOrigin;
    let mut _163: anchor_lang::error::Source;
    let mut _164: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _166: [u8; 8];
    let mut _167: std::result::Result<[u8; 8], std::array::TryFromSliceError>;
    let mut _168: &[u8];
    let _169: &[u8];
    let mut _170: &std::vec::Vec<u8>;
    let mut _171: std::ops::Range<usize>;
    let _172: ();
    let mut _173: bool;
    let mut _174: &anchor_lang::prelude::Pubkey;
    let _175: &anchor_lang::prelude::AccountMeta;
    let mut _176: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _177: &anchor_lang::prelude::Pubkey;
    let _178: anchor_lang::prelude::Pubkey;
    let mut _179: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _180: !;
    let _181: ();
    let mut _182: &str;
    let _183: &str;
    let mut _184: anchor_lang::error::Error;
    let mut _185: anchor_lang::error::AnchorError;
    let mut _186: std::string::String;
    let mut _187: &LendingError;
    let _188: LendingError;
    let mut _189: u32;
    let mut _190: LendingError;
    let mut _191: std::string::String;
    let mut _192: &LendingError;
    let _193: LendingError;
    let mut _194: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _195: anchor_lang::error::ErrorOrigin;
    let mut _196: anchor_lang::error::Source;
    let mut _197: std::option::Option<anchor_lang::error::ComparedValues>;
    let _198: ();
    let mut _199: bool;
    let mut _200: u64;
    let mut _201: u64;
    let mut _202: !;
    let _203: ();
    let mut _204: &str;
    let _205: &str;
    let mut _206: anchor_lang::error::Error;
    let mut _207: anchor_lang::error::AnchorError;
    let mut _208: std::string::String;
    let mut _209: &LendingError;
    let _210: LendingError;
    let mut _211: u32;
    let mut _212: LendingError;
    let mut _213: std::string::String;
    let mut _214: &LendingError;
    let _215: LendingError;
    let mut _216: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _217: anchor_lang::error::ErrorOrigin;
    let mut _218: anchor_lang::error::Source;
    let mut _219: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _220: ();
    let mut _235: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _236: &anchor_lang::prelude::Pubkey;
    let mut _237: &anchor_lang::prelude::Pubkey;
    let mut _238: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _239: bool;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    scope 1 {
        debug instruction_loader => _4;
        let _7: usize;
        let _13: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _16: u16;
        scope 2 {
            debug current_index => _7;
            let _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _26: bool;
            let _57: std::string::String;
            let _87: solana_program::instruction::Instruction;
            let _94: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _97: solana_program::instruction::Instruction;
            let mut _221: &LendingError;
            let mut _222: &LendingError;
            let mut _223: &LendingError;
            let mut _224: &LendingError;
            let mut _225: &[&str; 2];
            scope 7 {
                debug residual => _23;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _26;
                scope 10 {
                }
            }
            scope 11 {
                debug res => _57;
            }
            scope 12 {
                debug ixn => _87;
                let _109: std::string::String;
                let _139: [u8; 8];
                let mut _226: &LendingError;
                let mut _227: &LendingError;
                let mut _228: &[&str; 2];
                scope 17 {
                    debug res => _109;
                }
                scope 18 {
                    debug discriminator => _139;
                    let _165: u64;
                    let mut _229: &LendingError;
                    let mut _230: &LendingError;
                    scope 19 {
                        debug borrow_liquidity_amount => _165;
                        let mut _231: &LendingError;
                        let mut _232: &LendingError;
                        let mut _233: &LendingError;
                        let mut _234: &LendingError;
                    }
                }
            }
            scope 13 {
                debug residual => _94;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _97;
                scope 16 {
                }
            }
        }
        scope 3 {
            debug residual => _13;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
    }

    bb0: {
        _239 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _235 = deref_copy ((*_1).1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _6 = &((*_235).10: anchor_lang::prelude::AccountInfo<'_>);
        _5 = &(*_6);
        _4 = BpfInstructionLoader::<'_, '_> { instruction_sysvar_account_info: move _5 };
        StorageDead(_5);
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_4;
        _10 = <BpfInstructionLoader<'_, '_> as InstructionLoader>::load_current_index(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _10) -> [return: bb2, unwind: bb97];
    }

    bb2: {
        _239 = const true;
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: u16);
        _8 = _16;
        StorageDead(_16);
        _7 = <u16 as Into<usize>>::into(move _8) -> [return: bb7, unwind: bb102];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _15) -> [return: bb6, unwind: bb102];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        _252 = discriminant(_9);
        _239 = const false;
        StorageDead(_9);
        goto -> bb86;
    }

    bb7: {
        StorageDead(_8);
        _240 = discriminant(_9);
        _239 = const false;
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_4;
        _20 = <BpfInstructionLoader<'_, '_> as InstructionLoader>::is_flash_forbidden_cpi_call(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _19 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _20) -> [return: bb9, unwind: bb97];
    }

    bb9: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: bool);
        _18 = _26;
        StorageDead(_26);
        switchInt(move _18) -> [0: bb99, otherwise: bb98];
    }

    bb11: {
        StorageLive(_23);
        _23 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _25) -> [return: bb12, unwind: bb101];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        _250 = discriminant(_19);
        StorageDead(_19);
        goto -> bb85;
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _222 = const _;
        _34 = &(*_222);
        _33 = LendingError::name(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        _37 = LendingError::FlashRepayCpi;
        _36 = <LendingError as Into<u32>>::into(move _37) -> [return: bb15, unwind: bb96];
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _221 = const _;
        _39 = &(*_221);
        _38 = <LendingError as ToString>::to_string(move _39) -> [return: bb16, unwind: bb96];
    }

    bb16: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 30_u32 };
        _42 = anchor_lang::error::ErrorOrigin::Source(move _43);
        StorageDead(_43);
        _41 = std::option::Option::<ErrorOrigin>::Some(move _42);
        StorageDead(_42);
        StorageLive(_44);
        _44 = std::option::Option::<ComparedValues>::None;
        _32 = anchor_lang::error::AnchorError { error_name: move _33, error_code_number: move _36, error_msg: move _38, error_origin: move _41, compared_values: move _44 };
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_33);
        _31 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _32) -> [return: bb17, unwind: bb97];
    }

    bb17: {
        StorageDead(_32);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _31);
        StorageDead(_31);
        goto -> bb85;
    }

    bb18: {
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _225 = const _;
        _61 = &(*_225);
        _60 = &(*_61);
        _59 = move _60 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_2;
        _68 = &(*_69);
        _67 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _68) -> [return: bb20, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _45 = const ();
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_4;
        StorageLive(_91);
        StorageLive(_92);
        _92 = _2;
        _91 = move _92 as usize (IntToInt);
        StorageDead(_92);
        _89 = <BpfInstructionLoader<'_, '_> as InstructionLoader>::load_instruction_at(move _90, move _91) -> [return: bb31, unwind continue];
    }

    bb20: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_7;
        _71 = &(*_72);
        _70 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _71) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_71);
        _66 = [move _67, move _70];
        StorageDead(_70);
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = move _64 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_64);
        _58 = Arguments::<'_>::new_v1(move _59, move _63) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_63);
        StorageDead(_59);
        _57 = format(move _58) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_58);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        _56 = move _57;
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = <std::string::String as Deref>::deref(move _54) -> [return: bb24, unwind: bb95];
    }

    bb24: {
        _52 = &(*_53);
        StorageDead(_54);
        _51 = solana_program::log::sol_log(move _52) -> [return: bb25, unwind: bb95];
    }

    bb25: {
        StorageDead(_52);
        drop(_56) -> [return: bb26, unwind: bb97];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _224 = const _;
        _76 = &(*_224);
        _75 = LendingError::name(move _76) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        _79 = LendingError::InvalidFlashRepay;
        _78 = <LendingError as Into<u32>>::into(move _79) -> [return: bb28, unwind: bb94];
    }

    bb28: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        _223 = const _;
        _81 = &(*_223);
        _80 = <LendingError as ToString>::to_string(move _81) -> [return: bb29, unwind: bb94];
    }

    bb29: {
        StorageDead(_81);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 40_u32 };
        _84 = anchor_lang::error::ErrorOrigin::Source(move _85);
        StorageDead(_85);
        _83 = std::option::Option::<ErrorOrigin>::Some(move _84);
        StorageDead(_84);
        StorageLive(_86);
        _86 = std::option::Option::<ComparedValues>::None;
        _74 = anchor_lang::error::AnchorError { error_name: move _75, error_code_number: move _78, error_msg: move _80, error_origin: move _83, compared_values: move _86 };
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_75);
        _73 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _74) -> [return: bb30, unwind: bb97];
    }

    bb30: {
        StorageDead(_74);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _73);
        StorageDead(_73);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb86;
    }

    bb31: {
        StorageDead(_91);
        StorageDead(_90);
        _88 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _89) -> [return: bb32, unwind: bb97];
    }

    bb32: {
        StorageDead(_89);
        _93 = discriminant(_88);
        switchInt(move _93) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_97);
        _97 = move ((_88 as Continue).0: solana_program::instruction::Instruction);
        _87 = move _97;
        StorageDead(_97);
        _246 = discriminant(_88);
        StorageDead(_88);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(_87.0: anchor_lang::prelude::Pubkey);
        StorageLive(_101);
        _236 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _101 = &(*_236);
        _99 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _100, move _101) -> [return: bb36, unwind: bb93];
    }

    bb34: {
        StorageLive(_94);
        _94 = move ((_88 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _96) -> [return: bb35, unwind: bb100];
    }

    bb35: {
        StorageDead(_96);
        StorageDead(_94);
        _248 = discriminant(_88);
        StorageDead(_88);
        goto -> bb84;
    }

    bb36: {
        switchInt(move _99) -> [0: bb49, otherwise: bb37];
    }

    bb37: {
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _228 = const _;
        _113 = &(*_228);
        _112 = &(*_113);
        _111 = move _112 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_2;
        _120 = &(*_121);
        _119 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _120) -> [return: bb38, unwind: bb93];
    }

    bb38: {
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _237 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _124 = &(*_237);
        _123 = &(*_124);
        _122 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _123) -> [return: bb39, unwind: bb93];
    }

    bb39: {
        StorageDead(_123);
        _118 = [move _119, move _122];
        StorageDead(_122);
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = move _116 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_116);
        _110 = Arguments::<'_>::new_v1(move _111, move _115) -> [return: bb40, unwind: bb93];
    }

    bb40: {
        StorageDead(_115);
        StorageDead(_111);
        _109 = format(move _110) -> [return: bb41, unwind: bb93];
    }

    bb41: {
        StorageDead(_110);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_113);
        _108 = move _109;
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = <std::string::String as Deref>::deref(move _106) -> [return: bb42, unwind: bb92];
    }

    bb42: {
        _104 = &(*_105);
        StorageDead(_106);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb43, unwind: bb92];
    }

    bb43: {
        StorageDead(_104);
        drop(_108) -> [return: bb44, unwind: bb93];
    }

    bb44: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _227 = const _;
        _128 = &(*_227);
        _127 = LendingError::name(move _128) -> [return: bb45, unwind: bb93];
    }

    bb45: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        _131 = LendingError::InvalidFlashRepay;
        _130 = <LendingError as Into<u32>>::into(move _131) -> [return: bb46, unwind: bb91];
    }

    bb46: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        _226 = const _;
        _133 = &(*_226);
        _132 = <LendingError as ToString>::to_string(move _133) -> [return: bb47, unwind: bb91];
    }

    bb47: {
        StorageDead(_133);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 50_u32 };
        _136 = anchor_lang::error::ErrorOrigin::Source(move _137);
        StorageDead(_137);
        _135 = std::option::Option::<ErrorOrigin>::Some(move _136);
        StorageDead(_136);
        StorageLive(_138);
        _138 = std::option::Option::<ComparedValues>::None;
        _126 = anchor_lang::error::AnchorError { error_name: move _127, error_code_number: move _130, error_msg: move _132, error_origin: move _135, compared_values: move _138 };
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        _125 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _126) -> [return: bb48, unwind: bb93];
    }

    bb48: {
        StorageDead(_126);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _125);
        StorageDead(_125);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb83;
    }

    bb49: {
        StorageDead(_101);
        StorageDead(_100);
        _98 = const ();
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_139);
        _139 = const _;
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &(_87.2: std::vec::Vec<u8>);
        StorageLive(_145);
        _145 = RangeTo::<usize> { end: const 8_usize };
        _143 = <Vec<u8> as Index<RangeTo<usize>>>::index(move _144, move _145) -> [return: bb50, unwind: bb93];
    }

    bb50: {
        _142 = &(*_143);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_146);
        _146 = &_139;
        _141 = <[u8] as PartialEq<[u8; 8]>>::ne(move _142, move _146) -> [return: bb51, unwind: bb93];
    }

    bb51: {
        switchInt(move _141) -> [0: bb58, otherwise: bb52];
    }

    bb52: {
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = const "Flash repay: Supplied borrow instruction index is not a flash borrow";
        _149 = &(*_150);
        _148 = solana_program::log::sol_log(move _149) -> [return: bb53, unwind: bb93];
    }

    bb53: {
        StorageDead(_149);
        StorageDead(_150);
        StorageDead(_148);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _230 = const _;
        _154 = &(*_230);
        _153 = LendingError::name(move _154) -> [return: bb54, unwind: bb93];
    }

    bb54: {
        StorageDead(_154);
        StorageLive(_156);
        StorageLive(_157);
        _157 = LendingError::InvalidFlashRepay;
        _156 = <LendingError as Into<u32>>::into(move _157) -> [return: bb55, unwind: bb90];
    }

    bb55: {
        StorageDead(_157);
        StorageLive(_158);
        StorageLive(_159);
        _229 = const _;
        _159 = &(*_229);
        _158 = <LendingError as ToString>::to_string(move _159) -> [return: bb56, unwind: bb90];
    }

    bb56: {
        StorageDead(_159);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 57_u32 };
        _162 = anchor_lang::error::ErrorOrigin::Source(move _163);
        StorageDead(_163);
        _161 = std::option::Option::<ErrorOrigin>::Some(move _162);
        StorageDead(_162);
        StorageLive(_164);
        _164 = std::option::Option::<ComparedValues>::None;
        _152 = anchor_lang::error::AnchorError { error_name: move _153, error_code_number: move _156, error_msg: move _158, error_origin: move _161, compared_values: move _164 };
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_153);
        _151 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _152) -> [return: bb57, unwind: bb93];
    }

    bb57: {
        StorageDead(_152);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _151);
        StorageDead(_151);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb82;
    }

    bb58: {
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &(_87.2: std::vec::Vec<u8>);
        StorageLive(_171);
        _171 = std::ops::Range::<usize> { start: const 8_usize, end: const 16_usize };
        _169 = <Vec<u8> as Index<std::ops::Range<usize>>>::index(move _170, move _171) -> [return: bb59, unwind: bb93];
    }

    bb59: {
        _168 = &(*_169);
        StorageDead(_171);
        StorageDead(_170);
        _167 = <&[u8] as TryInto<[u8; 8]>>::try_into(move _168) -> [return: bb60, unwind: bb93];
    }

    bb60: {
        StorageDead(_168);
        _166 = std::result::Result::<[u8; 8], TryFromSliceError>::unwrap(move _167) -> [return: bb61, unwind: bb93];
    }

    bb61: {
        StorageDead(_167);
        _165 = core::num::<impl u64>::from_le_bytes(move _166) -> [return: bb62, unwind: bb93];
    }

    bb62: {
        StorageDead(_166);
        StorageDead(_169);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &(_87.1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _175 = <Vec<anchor_lang::prelude::AccountMeta> as Index<usize>>::index(move _176, const 3_usize) -> [return: bb63, unwind: bb93];
    }

    bb63: {
        StorageDead(_176);
        _174 = &((*_175).0: anchor_lang::prelude::Pubkey);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _238 = deref_copy ((*_1).1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _179 = &((*_238).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _178 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _179) -> [return: bb64, unwind: bb93];
    }

    bb64: {
        _177 = &_178;
        StorageDead(_179);
        _173 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _174, move _177) -> [return: bb65, unwind: bb93];
    }

    bb65: {
        switchInt(move _173) -> [0: bb72, otherwise: bb66];
    }

    bb66: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = const "Invalid reserve account on flash repay";
        _182 = &(*_183);
        _181 = solana_program::log::sol_log(move _182) -> [return: bb67, unwind: bb93];
    }

    bb67: {
        StorageDead(_182);
        StorageDead(_183);
        StorageDead(_181);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _232 = const _;
        _187 = &(*_232);
        _186 = LendingError::name(move _187) -> [return: bb68, unwind: bb93];
    }

    bb68: {
        StorageDead(_187);
        StorageLive(_189);
        StorageLive(_190);
        _190 = LendingError::InvalidFlashRepay;
        _189 = <LendingError as Into<u32>>::into(move _190) -> [return: bb69, unwind: bb89];
    }

    bb69: {
        StorageDead(_190);
        StorageLive(_191);
        StorageLive(_192);
        _231 = const _;
        _192 = &(*_231);
        _191 = <LendingError as ToString>::to_string(move _192) -> [return: bb70, unwind: bb89];
    }

    bb70: {
        StorageDead(_192);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 65_u32 };
        _195 = anchor_lang::error::ErrorOrigin::Source(move _196);
        StorageDead(_196);
        _194 = std::option::Option::<ErrorOrigin>::Some(move _195);
        StorageDead(_195);
        StorageLive(_197);
        _197 = std::option::Option::<ComparedValues>::None;
        _185 = anchor_lang::error::AnchorError { error_name: move _186, error_code_number: move _189, error_msg: move _191, error_origin: move _194, compared_values: move _197 };
        StorageDead(_197);
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_186);
        _184 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _185) -> [return: bb71, unwind: bb93];
    }

    bb71: {
        StorageDead(_185);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _184);
        StorageDead(_184);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb81;
    }

    bb72: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        _172 = const ();
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = _3;
        StorageLive(_201);
        _201 = _165;
        _199 = Ne(move _200, move _201);
        switchInt(move _199) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = const "Liquidity amount for flash repay doesn't match borrow";
        _204 = &(*_205);
        _203 = solana_program::log::sol_log(move _204) -> [return: bb75, unwind: bb93];
    }

    bb74: {
        StorageDead(_201);
        StorageDead(_200);
        _198 = const ();
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_220);
        _220 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _220);
        StorageDead(_220);
        StorageDead(_165);
        StorageDead(_139);
        drop(_87) -> [return: bb80, unwind: bb97];
    }

    bb75: {
        StorageDead(_204);
        StorageDead(_205);
        StorageDead(_203);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _234 = const _;
        _209 = &(*_234);
        _208 = LendingError::name(move _209) -> [return: bb76, unwind: bb93];
    }

    bb76: {
        StorageDead(_209);
        StorageLive(_211);
        StorageLive(_212);
        _212 = LendingError::InvalidFlashRepay;
        _211 = <LendingError as Into<u32>>::into(move _212) -> [return: bb77, unwind: bb88];
    }

    bb77: {
        StorageDead(_212);
        StorageLive(_213);
        StorageLive(_214);
        _233 = const _;
        _214 = &(*_233);
        _213 = <LendingError as ToString>::to_string(move _214) -> [return: bb78, unwind: bb88];
    }

    bb78: {
        StorageDead(_214);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 70_u32 };
        _217 = anchor_lang::error::ErrorOrigin::Source(move _218);
        StorageDead(_218);
        _216 = std::option::Option::<ErrorOrigin>::Some(move _217);
        StorageDead(_217);
        StorageLive(_219);
        _219 = std::option::Option::<ComparedValues>::None;
        _207 = anchor_lang::error::AnchorError { error_name: move _208, error_code_number: move _211, error_msg: move _213, error_origin: move _216, compared_values: move _219 };
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_208);
        _206 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _207) -> [return: bb79, unwind: bb93];
    }

    bb79: {
        StorageDead(_207);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _206);
        StorageDead(_206);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb81;
    }

    bb80: {
        StorageDead(_87);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb87;
    }

    bb81: {
        StorageDead(_165);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_139);
        goto -> bb83;
    }

    bb83: {
        drop(_87) -> [return: bb84, unwind: bb97];
    }

    bb84: {
        StorageDead(_87);
        goto -> bb86;
    }

    bb85: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb87;
    }

    bb87: {
        return;
    }

    bb88 (cleanup): {
        drop(_208) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_186) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_153) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_127) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_108) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_87) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_75) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_56) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_33) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        resume;
    }

    bb98: {
        _242 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = const "Flash Repay was called via CPI!";
        _29 = &(*_30);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb13, unwind continue];
    }

    bb99: {
        _244 = discriminant(_19);
        StorageDead(_19);
        _17 = const ();
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _2;
        _47 = move _48 as usize (IntToInt);
        StorageDead(_48);
        StorageLive(_49);
        _49 = _7;
        _46 = Gt(move _47, move _49);
        switchInt(move _46) -> [0: bb19, otherwise: bb18];
    }

    bb100 (cleanup): {
        _254 = discriminant(_88);
        goto -> bb97;
    }

    bb101 (cleanup): {
        _255 = discriminant(_19);
        goto -> bb97;
    }

    bb102 (cleanup): {
        _256 = discriminant(_9);
        goto -> bb97;
    }
}
