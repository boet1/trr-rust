// MIR for `account_ops::close_account_loader` after PreCodegen

fn account_ops::close_account_loader(_1: bool, _2: &anchor_lang::prelude::Signer<'_>, _3: &anchor_lang::prelude::AccountLoader<'_, T>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug close_account => _1;
    debug owner => _2;
    debug account_to_be_closed => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: bool;
    let _6: ();
    let mut _7: &str;
    let _8: &str;
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _11: std::result::Result<(), anchor_lang::error::Error>;
    let mut _12: &anchor_lang::prelude::AccountLoader<'_, T>;
    let mut _13: anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _15: anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: &anchor_lang::prelude::Signer<'_>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _21: ();
    let mut _22: ();
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    scope 1 {
        debug residual => _18;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _21;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        switchInt(move _5) -> [0: bb12, otherwise: bb1];
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const "Closing account";
        _7 = &(*_8);
        _6 = solana_program::log::sol_log(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_2);
        _15 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = &_15;
        StorageDead(_16);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _14) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        StorageDead(_14);
        _11 = <anchor_lang::prelude::AccountLoader<'_, T> as AccountsClose<'_>>::close(move _12, move _13) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _11) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        StorageDead(_11);
        _17 = discriminant(_10);
        switchInt(move _17) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_21);
        _21 = ((_10 as Continue).0: ());
        _9 = _21;
        StorageDead(_21);
        _23 = discriminant(_10);
        drop(_15) -> [return: bb11, unwind: bb17];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_18);
        _18 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _20) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_18);
        _25 = discriminant(_10);
        drop(_15) -> [return: bb14, unwind: bb17];
    }

    bb11: {
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        _4 = const ();
        goto -> bb13;
    }

    bb12: {
        _4 = const ();
        goto -> bb13;
    }

    bb13: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_22);
        _22 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _22);
        StorageDead(_22);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_15) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        _27 = discriminant(_10);
        goto -> bb16;
    }
}
