digraph Mir_0_1326 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn lending_operations::flash_repay_reserve_liquidity(_1: &amp;ReErased state::lending_market::LendingMarket, _2: &amp;ReErased mut state::reserve::Reserve, _3: u64, _4: u64, _5: std::option::Option&lt;&amp;ReErased T/#1&gt;) -&gt; std::result::Result&lt;(u64, u64), anchor_lang::error::Error&gt;<br align="left"/>let _6: u64;<br align="left"/>let _7: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _8: u64;<br align="left"/>let _9: u64;<br align="left"/>let _10: u64;<br align="left"/>let mut _11: (u64, u64);<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, (u64, u64)&gt;;<br align="left"/>let mut _13: std::result::Result&lt;(u64, u64), anchor_lang::error::Error&gt;;<br align="left"/>let mut _14: &amp;ReErased state::reserve::ReserveFees;<br align="left"/>let mut _15: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _16: u16;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: &amp;ReErased std::option::Option&lt;&amp;ReErased T/#1&gt;;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _23: (u64, u64);<br align="left"/>let _24: ();<br align="left"/>let mut _25: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, LendingError&gt;, ()&gt;;<br align="left"/>let mut _26: std::result::Result&lt;(), LendingError&gt;;<br align="left"/>let mut _27: &amp;ReErased mut state::reserve::ReserveLiquidity;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let _34: ();<br align="left"/>let _35: ();<br align="left"/>let mut _36: &amp;ReErased mut state::reserve::Reserve;<br align="left"/>let mut _37: u64;<br align="left"/>let _38: ();<br align="left"/>let mut _39: &amp;ReErased mut state::last_update::LastUpdate;<br align="left"/>let _40: ();<br align="left"/>let mut _41: isize;<br align="left"/>let _42: &amp;ReErased T/#1;<br align="left"/>let mut _43: bool;<br align="left"/>let mut _44: u16;<br align="left"/>let _45: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _46: std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _47: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;&gt;;<br align="left"/>let mut _48: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _49: &amp;ReErased T/#1;<br align="left"/>let mut _50: isize;<br align="left"/>let _51: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _52: !;<br align="left"/>let mut _53: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _54: std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let _55: ();<br align="left"/>let mut _56: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _57: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _58: &amp;ReErased mut state::reserve::Reserve;<br align="left"/>let mut _59: &amp;ReErased mut state::referral::ReferrerTokenState;<br align="left"/>let mut _60: &amp;ReErased mut state::referral::ReferrerTokenState;<br align="left"/>let mut _61: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _62: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _63: u64;<br align="left"/>let mut _64: isize;<br align="left"/>let _65: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _66: !;<br align="left"/>let mut _67: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _68: ();<br align="left"/>let mut _69: u64;<br align="left"/>let mut _70: (u64, bool);<br align="left"/>let _71: u64;<br align="left"/>let mut _72: u64;<br align="left"/>let mut _73: u64;<br align="left"/>let mut _74: (u64, bool);<br align="left"/>let mut _75: (u64, u64);<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: u64;<br align="left"/>let mut _78: isize;<br align="left"/>let mut _79: isize;<br align="left"/>let mut _80: isize;<br align="left"/>let mut _81: isize;<br align="left"/>let mut _82: isize;<br align="left"/>let mut _83: isize;<br align="left"/>let mut _84: isize;<br align="left"/>let mut _85: isize;<br align="left"/>let mut _86: isize;<br align="left"/>let mut _87: isize;<br align="left"/>let mut _88: isize;<br align="left"/>let mut _89: isize;<br align="left"/>let mut _90: isize;<br align="left"/>let mut _91: isize;<br align="left"/>let mut _92: isize;<br align="left"/>debug lending_market =&gt; _1;<br align="left"/>debug reserve =&gt; _2;<br align="left"/>debug liquidity_amount =&gt; _3;<br align="left"/>debug timestamp =&gt; _4;<br align="left"/>debug referrer_token_state_loader =&gt; _5;<br align="left"/>debug flash_loan_amount =&gt; _6;<br align="left"/>debug flash_loan_amount_f =&gt; _7;<br align="left"/>debug protocol_fee =&gt; _9;<br align="left"/>debug referrer_fee =&gt; _10;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug referrer_token_state_loader =&gt; _42;<br align="left"/>debug referrer_token_state =&gt; _45;<br align="left"/>debug residual =&gt; _51;<br align="left"/>debug val =&gt; _54;<br align="left"/>debug residual =&gt; _65;<br align="left"/>debug val =&gt; _68;<br align="left"/>debug flash_loan_amount_with_referral_fee =&gt; _71;<br align="left"/>>;
    bb0__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>_6 = _3<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _6<br/></td></tr><tr><td align="left">_7 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as From&lt;u64&gt;&gt;::from(move _8)</td></tr></table>>];
    bb1__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;(((*_2).9: state::reserve::ReserveConfig).14: state::reserve::ReserveFees)<br/>StorageLive(_15)<br/>_15 = _7<br/>StorageLive(_16)<br/>_16 = ((*_1).5: u16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;_5<br/></td></tr><tr><td align="left">_17 = std::option::Option::&lt;&amp;T&gt;::is_some(move _18)</td></tr></table>>];
    bb2__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">_13 = ReserveFees::calculate_flash_loan_fees(move _14, move _15, move _16, move _17)</td></tr></table>>];
    bb3__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;(u64, u64), anchor_lang::error::Error&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb4__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_19 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb5__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_12 as Continue).0: (u64, u64))<br/>_11 = _23<br/>StorageDead(_23)<br/>StorageLive(_9)<br/>_9 = (_11.0: u64)<br/>StorageLive(_10)<br/>_10 = (_11.1: u64)<br/>_78 = discriminant(_12)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;mut ((*_2).5: state::reserve::ReserveLiquidity)<br/>StorageLive(_28)<br/>_28 = _6<br/>StorageLive(_29)<br/>_29 = _7<br/></td></tr><tr><td align="left">_26 = ReserveLiquidity::repay(move _27, move _28, move _29)</td></tr></table>>];
    bb6__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = move ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_22)<br/>_22 = move _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb8__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>_88 = discriminant(_12)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = &lt;std::result::Result&lt;(), LendingError&gt; as Try&gt;::branch(move _26)</td></tr></table>>];
    bb10__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_30 = discriminant(_25)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb11__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_25 as Continue).0: ())<br/>_24 = _34<br/>StorageDead(_34)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;mut (*_2)<br/>StorageLive(_37)<br/>_37 = _4<br/></td></tr><tr><td align="left">_35 = refresh_reserve_limit_timestamps(move _36, move _37)</td></tr></table>>];
    bb12__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_25 as Break).0: std::result::Result&lt;std::convert::Infallible, LendingError&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb13__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;mut ((*_2).1: state::last_update::LastUpdate)<br/></td></tr><tr><td align="left">_38 = last_update::LastUpdate::mark_stale(move _39)</td></tr></table>>];
    bb15__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_38)<br/>StorageLive(_40)<br/>_41 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb16__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_5 as Some).0: &amp;T)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = ((*_1).5: u16)<br/>_43 = Gt(move _44, const 0_u16)<br/></td></tr><tr><td align="left">switchInt(move _43)</td></tr></table>>];
    bb17__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = &amp;(*_42)<br/></td></tr><tr><td align="left">_48 = &lt;T as account_loader_trait::AnyAccountLoader&lt;'_, referral::ReferrerTokenState&gt;&gt;::get_mut(move _49)</td></tr></table>>];
    bb18__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;std::result::Result&lt;RefMut&lt;'_, referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _48)</td></tr></table>>];
    bb19__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_50 = discriminant(_47)<br/></td></tr><tr><td align="left">switchInt(move _50)</td></tr></table>>];
    bb20__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = move ((_47 as Continue).0: std::cell::RefMut&lt;'_, state::referral::ReferrerTokenState&gt;)<br/>_46 = move _54<br/>StorageDead(_54)<br/>_45 = &amp;mut _46<br/>_80 = discriminant(_47)<br/>StorageDead(_47)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>_58 = &amp;mut (*_2)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = &amp;mut (*_45)<br/></td></tr><tr><td align="left">_60 = &lt;RefMut&lt;'_, referral::ReferrerTokenState&gt; as DerefMut&gt;::deref_mut(move _61)</td></tr></table>>];
    bb21__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = move ((_47 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_53)<br/>_53 = move _51<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _53)</td></tr></table>>];
    bb22__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_51)<br/>_86 = discriminant(_47)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_59 = &amp;mut (*_60)<br/>StorageDead(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = _10<br/></td></tr><tr><td align="left">_62 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::from_num::&lt;u64&gt;(move _63)</td></tr></table>>];
    bb24__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/></td></tr><tr><td align="left">_57 = add_referrer_fee(move _58, move _59, move _62)</td></tr></table>>];
    bb25__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_59)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">_56 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _57)</td></tr></table>>];
    bb26__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>_64 = discriminant(_56)<br/></td></tr><tr><td align="left">switchInt(move _64)</td></tr></table>>];
    bb27__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>_68 = ((_56 as Continue).0: ())<br/>_55 = _68<br/>StorageDead(_68)<br/>_82 = discriminant(_56)<br/>StorageDead(_60)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageLive(_69)<br/>_69 = _10<br/>_70 = CheckedAdd((((*_2).5: state::reserve::ReserveLiquidity).3: u64), _69)<br/></td></tr><tr><td align="left">assert(!move (_70.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, (((*_2).5: state::reserve::ReserveLiquidity).3: u64), move _69)</td></tr></table>>];
    bb28__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = move ((_56 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_67)<br/>_67 = move _65<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _67)</td></tr></table>>];
    bb29__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_65)<br/>_84 = discriminant(_56)<br/>StorageDead(_60)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">drop(_46)</td></tr></table>>];
    bb30__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">(((*_2).5: state::reserve::ReserveLiquidity).3: u64) = move (_70.0: u64)<br/>StorageDead(_69)<br/>_40 = const ()<br/></td></tr><tr><td align="left">drop(_46)</td></tr></table>>];
    bb31__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_40 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_40 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = _6<br/>StorageLive(_73)<br/>_73 = _10<br/>_74 = CheckedAdd(_72, _73)<br/></td></tr><tr><td align="left">assert(!move (_74.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _72, move _73)</td></tr></table>>];
    bb36__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_71 = move (_74.0: u64)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = _71<br/>StorageLive(_77)<br/>_77 = _9<br/>_75 = (move _76, move _77)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>_0 = std::result::Result::&lt;(u64, u64), anchor_lang::error::Error&gt;::Ok(move _75)<br/>StorageDead(_75)<br/>StorageDead(_71)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left">return</td></tr></table>>];
    bb41__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">41 (cleanup)</td></tr><tr><td align="left">drop(_46)</td></tr></table>>];
    bb42__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">42 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb43__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">43 (cleanup)</td></tr><tr><td align="left" balign="left">_90 = discriminant(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">44 (cleanup)</td></tr><tr><td align="left" balign="left">_91 = discriminant(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_1326 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">45 (cleanup)</td></tr><tr><td align="left" balign="left">_92 = discriminant(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1326 -> bb1__0_1326 [label="return"];
    bb1__0_1326 -> bb2__0_1326 [label="return"];
    bb2__0_1326 -> bb3__0_1326 [label="return"];
    bb3__0_1326 -> bb4__0_1326 [label="return"];
    bb3__0_1326 -> bb42__0_1326 [label="unwind"];
    bb4__0_1326 -> bb5__0_1326 [label="0"];
    bb4__0_1326 -> bb7__0_1326 [label="1"];
    bb4__0_1326 -> bb6__0_1326 [label="otherwise"];
    bb5__0_1326 -> bb9__0_1326 [label="return"];
    bb7__0_1326 -> bb8__0_1326 [label="return"];
    bb7__0_1326 -> bb45__0_1326 [label="unwind"];
    bb8__0_1326 -> bb39__0_1326 [label=""];
    bb9__0_1326 -> bb10__0_1326 [label="return"];
    bb10__0_1326 -> bb11__0_1326 [label="0"];
    bb10__0_1326 -> bb12__0_1326 [label="1"];
    bb10__0_1326 -> bb6__0_1326 [label="otherwise"];
    bb11__0_1326 -> bb14__0_1326 [label="return"];
    bb12__0_1326 -> bb13__0_1326 [label="return"];
    bb13__0_1326 -> bb38__0_1326 [label=""];
    bb14__0_1326 -> bb15__0_1326 [label="return"];
    bb15__0_1326 -> bb16__0_1326 [label="1"];
    bb15__0_1326 -> bb34__0_1326 [label="otherwise"];
    bb16__0_1326 -> bb32__0_1326 [label="0"];
    bb16__0_1326 -> bb17__0_1326 [label="otherwise"];
    bb17__0_1326 -> bb18__0_1326 [label="return"];
    bb18__0_1326 -> bb19__0_1326 [label="return"];
    bb18__0_1326 -> bb42__0_1326 [label="unwind"];
    bb19__0_1326 -> bb20__0_1326 [label="0"];
    bb19__0_1326 -> bb21__0_1326 [label="1"];
    bb19__0_1326 -> bb6__0_1326 [label="otherwise"];
    bb20__0_1326 -> bb23__0_1326 [label="return"];
    bb20__0_1326 -> bb41__0_1326 [label="unwind"];
    bb21__0_1326 -> bb22__0_1326 [label="return"];
    bb21__0_1326 -> bb44__0_1326 [label="unwind"];
    bb22__0_1326 -> bb37__0_1326 [label=""];
    bb23__0_1326 -> bb24__0_1326 [label="return"];
    bb23__0_1326 -> bb41__0_1326 [label="unwind"];
    bb24__0_1326 -> bb25__0_1326 [label="return"];
    bb24__0_1326 -> bb41__0_1326 [label="unwind"];
    bb25__0_1326 -> bb26__0_1326 [label="return"];
    bb25__0_1326 -> bb41__0_1326 [label="unwind"];
    bb26__0_1326 -> bb27__0_1326 [label="0"];
    bb26__0_1326 -> bb28__0_1326 [label="1"];
    bb26__0_1326 -> bb6__0_1326 [label="otherwise"];
    bb27__0_1326 -> bb30__0_1326 [label="success"];
    bb27__0_1326 -> bb41__0_1326 [label="unwind"];
    bb28__0_1326 -> bb29__0_1326 [label="return"];
    bb28__0_1326 -> bb43__0_1326 [label="unwind"];
    bb29__0_1326 -> bb37__0_1326 [label="return"];
    bb29__0_1326 -> bb42__0_1326 [label="unwind"];
    bb30__0_1326 -> bb31__0_1326 [label="return"];
    bb30__0_1326 -> bb42__0_1326 [label="unwind"];
    bb31__0_1326 -> bb33__0_1326 [label=""];
    bb32__0_1326 -> bb33__0_1326 [label=""];
    bb33__0_1326 -> bb35__0_1326 [label=""];
    bb34__0_1326 -> bb35__0_1326 [label=""];
    bb35__0_1326 -> bb36__0_1326 [label="success"];
    bb36__0_1326 -> bb40__0_1326 [label=""];
    bb37__0_1326 -> bb38__0_1326 [label=""];
    bb38__0_1326 -> bb39__0_1326 [label=""];
    bb39__0_1326 -> bb40__0_1326 [label=""];
    bb41__0_1326 -> bb42__0_1326 [label="return"];
    bb43__0_1326 -> bb41__0_1326 [label=""];
    bb44__0_1326 -> bb42__0_1326 [label=""];
    bb45__0_1326 -> bb42__0_1326 [label=""];
}
