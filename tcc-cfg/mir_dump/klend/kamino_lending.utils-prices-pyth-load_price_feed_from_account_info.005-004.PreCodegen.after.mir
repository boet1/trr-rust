// MIR for `load_price_feed_from_account_info` after PreCodegen

fn load_price_feed_from_account_info(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<PriceFeedMessage, anchor_lang::error::Error> {
    debug pyth_price_info => _1;
    let mut _0: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceFeedMessage, anchor_lang::error::Error>;
    let _2: std::cell::Ref<'_, &mut [u8]>;
    let mut _3: &std::cell::RefCell<&mut [u8]>;
    let _4: &std::cell::RefCell<&mut [u8]>;
    let mut _5: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _8: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, pyth_solana_receiver_sdk::price_update::PriceUpdateV2>;
    let mut _10: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, anchor_lang::error::Error>;
    let mut _11: &mut &[u8];
    let mut _12: &mut &[u8];
    let mut _13: &[u8];
    let mut _14: &&mut [u8];
    let _15: &&mut [u8];
    let mut _16: &std::cell::Ref<'_, &mut [u8]>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _22: ();
    let mut _23: bool;
    let mut _24: &pyth_solana_receiver_sdk::price_update::VerificationLevel;
    let mut _25: pyth_solana_receiver_sdk::price_update::VerificationLevel;
    let mut _26: !;
    let mut _27: anchor_lang::error::Error;
    let mut _28: anchor_lang::error::AnchorError;
    let mut _29: std::string::String;
    let mut _30: &LendingError;
    let _31: LendingError;
    let mut _32: u32;
    let mut _33: LendingError;
    let mut _34: std::string::String;
    let mut _35: &LendingError;
    let _36: LendingError;
    let mut _37: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _38: anchor_lang::error::ErrorOrigin;
    let mut _39: anchor_lang::error::Source;
    let mut _40: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _41: pyth_solana_receiver_sdk::price_update::PriceFeedMessage;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    scope 1 {
        debug price_update_data => _2;
        let _6: pyth_solana_receiver_sdk::price_update::VerificationLevel;
        let _7: pyth_solana_receiver_sdk::price_update::PriceFeedMessage;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _21: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
        scope 2 {
            debug verification_level => _6;
            debug price_message => _7;
            let mut _42: &LendingError;
            let mut _43: &LendingError;
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _4 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &(*_4);
        StorageDead(_5);
        _2 = RefCell::<&mut [u8]>::borrow(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_2;
        _15 = <Ref<'_, &mut [u8]> as Deref>::deref(move _16) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = <&mut [u8] as AsRef<[u8]>>::as_ref(move _14) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        StorageDead(_14);
        _12 = &mut _13;
        _11 = &mut (*_12);
        _10 = <PriceUpdateV2 as anchor_lang::AccountDeserialize>::try_deserialize(move _11) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        StorageDead(_11);
        _9 = <std::result::Result<PriceUpdateV2, anchor_lang::error::Error> as Try>::branch(move _10) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        StorageDead(_10);
        _17 = discriminant(_9);
        switchInt(move _17) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_21);
        _21 = move ((_9 as Continue).0: pyth_solana_receiver_sdk::price_update::PriceUpdateV2);
        _8 = move _21;
        StorageDead(_21);
        StorageLive(_6);
        _6 = (_8.1: pyth_solana_receiver_sdk::price_update::VerificationLevel);
        StorageLive(_7);
        _7 = (_8.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage);
        _44 = discriminant(_9);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_6;
        StorageLive(_25);
        _25 = pyth_solana_receiver_sdk::price_update::VerificationLevel::Full;
        _23 = VerificationLevel::gte(move _24, move _25) -> [return: bb11, unwind: bb23];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_18);
        _18 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<PriceFeedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _20) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_18);
        _46 = discriminant(_9);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb19;
    }

    bb11: {
        switchInt(move _23) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = const ();
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_41);
        _41 = _7;
        _0 = std::result::Result::<PriceFeedMessage, anchor_lang::error::Error>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_7);
        StorageDead(_6);
        drop(_2) -> [return: bb18, unwind: bb24];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _43 = const _;
        _30 = &(*_43);
        _29 = LendingError::name(move _30) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        _33 = LendingError::PriceNotValid;
        _32 = <LendingError as Into<u32>>::into(move _33) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _42 = const _;
        _35 = &(*_42);
        _34 = <LendingError as ToString>::to_string(move _35) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\pyth.rs", line: const 39_u32 };
        _38 = anchor_lang::error::ErrorOrigin::Source(move _39);
        StorageDead(_39);
        _37 = std::option::Option::<ErrorOrigin>::Some(move _38);
        StorageDead(_38);
        StorageLive(_40);
        _40 = std::option::Option::<ComparedValues>::None;
        _28 = anchor_lang::error::AnchorError { error_name: move _29, error_code_number: move _32, error_msg: move _34, error_origin: move _37, compared_values: move _40 };
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        _27 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _28) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        StorageDead(_28);
        _0 = std::result::Result::<PriceFeedMessage, anchor_lang::error::Error>::Err(move _27);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_2);
        goto -> bb21;
    }

    bb19: {
        drop(_2) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        StorageDead(_2);
        goto -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_29) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_2) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        _48 = discriminant(_9);
        goto -> bb23;
    }
}
