digraph Mir_0_1512 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::lending_market::LendingMarket::set_elevation_group(_1: &amp;ReErased mut state::lending_market::LendingMarket, _2: state::lending_market::ElevationGroup) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u8;<br align="left"/>let mut _6: !;<br align="left"/>let mut _7: anchor_lang::error::Error;<br align="left"/>let mut _8: anchor_lang::error::AnchorError;<br align="left"/>let mut _9: std::string::String;<br align="left"/>let mut _10: &amp;ReErased LendingError;<br align="left"/>let _11: LendingError;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: LendingError;<br align="left"/>let mut _14: std::string::String;<br align="left"/>let mut _15: &amp;ReErased LendingError;<br align="left"/>let _16: LendingError;<br align="left"/>let mut _17: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _18: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _19: anchor_lang::error::Source;<br align="left"/>let mut _20: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _21: state::lending_market::ElevationGroup;<br align="left"/>let _22: usize;<br align="left"/>let mut _23: &amp;ReErased state::lending_market::ElevationGroup;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: ();<br align="left"/>let mut _27: &amp;ReErased LendingError;<br align="left"/>let mut _28: &amp;ReErased LendingError;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug elevation_group =&gt; _2;<br align="left"/>>;
    bb0__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = (_2.1: u8)<br/>_4 = Eq(move _5, const _)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_28 = const _<br/>_10 = &amp;(*_28)<br/></td></tr><tr><td align="left">_9 = LendingError::name(move _10)</td></tr></table>>];
    bb2__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = LendingError::InvalidElevationGroupConfig<br/></td></tr><tr><td align="left">_12 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _13)</td></tr></table>>];
    bb3__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_27 = const _<br/>_15 = &amp;(*_27)<br/></td></tr><tr><td align="left">_14 = &lt;LendingError as ToString&gt;::to_string(move _15)</td></tr></table>>];
    bb4__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\state\\lending_market.rs&quot;, line: const 222_u32 }<br/>_18 = anchor_lang::error::ErrorOrigin::Source(move _19)<br/>StorageDead(_19)<br/>_17 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _18)<br/>StorageDead(_18)<br/>StorageLive(_20)<br/>_20 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_8 = anchor_lang::error::AnchorError { error_name: move _9, error_code_number: move _12, error_msg: move _14, error_origin: move _17, compared_values: move _20 }<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _8)</td></tr></table>>];
    bb5__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _7)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_21)<br/>_21 = _2<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;_2<br/></td></tr><tr><td align="left">_22 = state::lending_market::ElevationGroup::get_index(move _23)</td></tr></table>>];
    bb7__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_24 = Len(((*_1).18: [state::lending_market::ElevationGroup; 32]))<br/>_25 = Lt(_22, _24)<br/></td></tr><tr><td align="left">assert(move _25, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _24, _22)</td></tr></table>>];
    bb8__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">((*_1).18: [state::lending_market::ElevationGroup; 32])[_22] = move _21<br/>StorageDead(_21)<br/>StorageDead(_22)<br/>StorageLive(_26)<br/>_26 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _26)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">drop(_9)</td></tr></table>>];
    bb11__0_1512 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1512 -> bb6__0_1512 [label="0"];
    bb0__0_1512 -> bb1__0_1512 [label="otherwise"];
    bb1__0_1512 -> bb2__0_1512 [label="return"];
    bb2__0_1512 -> bb3__0_1512 [label="return"];
    bb2__0_1512 -> bb10__0_1512 [label="unwind"];
    bb3__0_1512 -> bb4__0_1512 [label="return"];
    bb3__0_1512 -> bb10__0_1512 [label="unwind"];
    bb4__0_1512 -> bb5__0_1512 [label="return"];
    bb4__0_1512 -> bb11__0_1512 [label="unwind"];
    bb5__0_1512 -> bb9__0_1512 [label=""];
    bb6__0_1512 -> bb7__0_1512 [label="return"];
    bb7__0_1512 -> bb8__0_1512 [label="success"];
    bb8__0_1512 -> bb9__0_1512 [label=""];
    bb10__0_1512 -> bb11__0_1512 [label="return"];
}
