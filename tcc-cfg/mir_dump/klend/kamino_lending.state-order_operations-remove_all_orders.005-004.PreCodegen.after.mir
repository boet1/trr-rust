// MIR for `remove_all_orders` after PreCodegen

fn remove_all_orders(_1: &mut obligation::Obligation) -> bool {
    debug obligation => _1;
    let mut _0: bool;
    let mut _2: bool;
    let _3: ();
    let mut _4: std::slice::IterMut<'_, state::obligation::ObligationOrder>;
    let mut _5: std::slice::IterMut<'_, state::obligation::ObligationOrder>;
    let mut _6: &mut [state::obligation::ObligationOrder];
    let mut _7: &mut [state::obligation::ObligationOrder; 2];
    let mut _9: ();
    let _10: ();
    let mut _11: std::option::Option<&mut state::obligation::ObligationOrder>;
    let mut _12: &mut std::slice::IterMut<'_, state::obligation::ObligationOrder>;
    let mut _13: &mut std::slice::IterMut<'_, state::obligation::ObligationOrder>;
    let mut _14: isize;
    let mut _15: !;
    let mut _17: bool;
    let mut _18: &&mut state::obligation::ObligationOrder;
    let mut _19: &&state::obligation::ObligationOrder;
    let _20: &state::obligation::ObligationOrder;
    let _21: state::obligation::ObligationOrder;
    let mut _22: state::obligation::ObligationOrder;
    scope 1 {
        debug had_orders => _2;
        let mut _8: std::slice::IterMut<'_, state::obligation::ObligationOrder>;
        scope 2 {
            debug iter => _8;
            let _16: &mut state::obligation::ObligationOrder;
            scope 3 {
                debug order => _16;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut ((*_1).25: [state::obligation::ObligationOrder; 2]);
        _6 = move _7 as &mut [state::obligation::ObligationOrder] (PointerCoercion(Unsize));
        StorageDead(_7);
        _5 = core::slice::<impl [obligation::ObligationOrder]>::iter_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::slice::IterMut<'_, obligation::ObligationOrder> as IntoIterator>::into_iter(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_8);
        _8 = move _4;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _8;
        _12 = &mut (*_13);
        _11 = <std::slice::IterMut<'_, obligation::ObligationOrder> as Iterator>::next(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_11 as Some).0: &mut state::obligation::ObligationOrder);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_16;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = <obligation::ObligationOrder as Default>::default() -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _3 = const ();
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        _0 = _2;
        StorageDead(_2);
        return;
    }

    bb8: {
        _20 = &_21;
        _19 = &_20;
        _17 = <&mut obligation::ObligationOrder as PartialEq<&obligation::ObligationOrder>>::ne(move _18, move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _17) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        _22 = <obligation::ObligationOrder as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        (*_16) = move _22;
        StorageDead(_22);
        _2 = const true;
        _10 = const ();
        goto -> bb13;
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _10 = const ();
        goto -> bb13;
    }

    bb13: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        _9 = const ();
        goto -> bb3;
    }
}
