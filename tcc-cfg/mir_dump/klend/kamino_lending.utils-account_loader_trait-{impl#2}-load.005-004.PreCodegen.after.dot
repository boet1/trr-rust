digraph Mir_0_2130 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn account_loader_trait::FatAccountLoader::&lt;'info, T&gt;::load(_1: &amp;ReErased utils::account_loader_trait::FatAccountLoader&lt;ReErased, T/#1&gt;) -&gt; std::result::Result&lt;std::cell::Ref&lt;ReErased, T/#1&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _2: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;&gt;;<br align="left"/>let mut _4: std::result::Result&lt;std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _10: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _11: ();<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: &amp;ReErased [u8];<br align="left"/>let _15: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _16: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: &amp;ReErased [u8];<br align="left"/>let mut _19: &amp;ReErased [u8; 8_usize];<br align="left"/>let _20: [u8; 8_usize];<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: anchor_lang::error::Error;<br align="left"/>let mut _23: anchor_lang::error::ErrorCode;<br align="left"/>let _24: ();<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: &amp;ReErased [u8];<br align="left"/>let _27: &amp;ReErased [u8];<br align="left"/>let mut _28: &amp;ReErased [u8];<br align="left"/>let _29: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _30: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _31: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _32: &amp;ReErased [u8; 8_usize];<br align="left"/>let _33: [u8; 8_usize];<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: anchor_lang::error::Error;<br align="left"/>let mut _36: anchor_lang::error::ErrorCode;<br align="left"/>let mut _37: std::cell::Ref&lt;ReErased, T/#1&gt;;<br align="left"/>let mut _38: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _39: Closure(DefId(0:2131 ~ kamino_lending[6389]::utils::account_loader_trait::{impl#2}::load::{closure#0}), [ReErased, T/#1, i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased mut [u8],)) -&gt; &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) T/#1, [Region(BrAnon)]), ()]);<br align="left"/>let mut _40: &amp;ReErased mut [u8];<br align="left"/>let mut _41: &amp;ReErased mut [u8];<br align="left"/>let mut _42: bool;<br align="left"/>let mut _43: isize;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: isize;<br align="left"/>let mut _46: isize;<br align="left"/>let mut _47: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug data =&gt; _2;<br align="left"/>debug residual =&gt; _7;<br align="left"/>debug val =&gt; _10;<br align="left"/>>;
    bb0__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_42 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;((*_1).0: anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/></td></tr><tr><td align="left">_4 = anchor_lang::prelude::AccountInfo::&lt;'_&gt;::try_borrow_data(move _5)</td></tr></table>>];
    bb1__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;Ref&lt;'_, &amp;mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_3 as Continue).0: std::cell::Ref&lt;'_, &amp;mut [u8]&gt;)<br/>_42 = const true<br/>_2 = move _10<br/>StorageDead(_10)<br/>_43 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;_2<br/></td></tr><tr><td align="left">_15 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _16)</td></tr></table>>];
    bb4__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_9)<br/>_9 = move _7<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _9)</td></tr></table>>];
    bb6__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_45 = discriminant(_3)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_40 = deref_copy (*_15)<br/>_14 = &amp;(*_40)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_13 = core::slice::&lt;impl [u8]&gt;::len(move _14)</td></tr></table>>];
    bb8__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/></td></tr><tr><td align="left">_20 = &lt;T as Discriminator&gt;::discriminator()</td></tr></table>>];
    bb9__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_19 = &amp;_20<br/>_18 = move _19 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = core::slice::&lt;impl [u8]&gt;::len(move _18)</td></tr></table>>];
    bb10__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_12 = Lt(move _13, move _17)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb11__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = AccountDiscriminatorNotFound<br/></td></tr><tr><td align="left">_22 = &lt;anchor_lang::error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _23)</td></tr></table>>];
    bb12__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Err(move _22)<br/>StorageDead(_22)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>_11 = const ()<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = &amp;_2<br/></td></tr><tr><td align="left">_29 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _30)</td></tr></table>>];
    bb14__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_41 = deref_copy (*_29)<br/>_28 = &amp;(*_41)<br/>StorageDead(_30)<br/>StorageLive(_31)<br/>_31 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 8_usize }<br/></td></tr><tr><td align="left">_27 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _28, move _31)</td></tr></table>>];
    bb15__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_26 = &amp;(*_27)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/></td></tr><tr><td align="left">_33 = &lt;T as Discriminator&gt;::discriminator()</td></tr></table>>];
    bb16__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_32 = &amp;_33<br/></td></tr><tr><td align="left">_25 = &lt;[u8] as PartialEq&lt;[u8; 8]&gt;&gt;::ne(move _26, move _32)</td></tr></table>>];
    bb17__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb18__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = AccountDiscriminatorMismatch<br/></td></tr><tr><td align="left">_35 = &lt;anchor_lang::error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _36)</td></tr></table>>];
    bb19__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Err(move _35)<br/>StorageDead(_35)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>_24 = const ()<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_42 = const false<br/>_38 = move _2<br/>StorageLive(_39)<br/>_39 = {closure@programs\klend\src\utils\account_loader_trait.rs:105:27: 105:33}<br/></td></tr><tr><td align="left">_37 = Ref::&lt;'_, &amp;mut [u8]&gt;::map::&lt;T, {closure@programs\klend\src\utils\account_loader_trait.rs:105:27: 105:33}&gt;(move _38, move _39)</td></tr></table>>];
    bb21__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_38)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, T&gt;, anchor_lang::error::Error&gt;::Ok(move _37)<br/>StorageDead(_37)<br/>_42 = const false<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb23__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_42 = const false<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">return</td></tr></table>>];
    bb25__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">25 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb26__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">26 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb27__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">27 (cleanup)</td></tr><tr><td align="left">switchInt(_42)</td></tr></table>>];
    bb28__0_2130 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left" balign="left">_47 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2130 -> bb1__0_2130 [label="return"];
    bb1__0_2130 -> bb2__0_2130 [label="return"];
    bb1__0_2130 -> bb25__0_2130 [label="unwind"];
    bb2__0_2130 -> bb3__0_2130 [label="0"];
    bb2__0_2130 -> bb5__0_2130 [label="1"];
    bb2__0_2130 -> bb4__0_2130 [label="otherwise"];
    bb3__0_2130 -> bb7__0_2130 [label="return"];
    bb3__0_2130 -> bb27__0_2130 [label="unwind"];
    bb5__0_2130 -> bb6__0_2130 [label="return"];
    bb5__0_2130 -> bb28__0_2130 [label="unwind"];
    bb6__0_2130 -> bb23__0_2130 [label=""];
    bb7__0_2130 -> bb8__0_2130 [label="return"];
    bb7__0_2130 -> bb27__0_2130 [label="unwind"];
    bb8__0_2130 -> bb9__0_2130 [label="return"];
    bb8__0_2130 -> bb27__0_2130 [label="unwind"];
    bb9__0_2130 -> bb10__0_2130 [label="return"];
    bb9__0_2130 -> bb27__0_2130 [label="unwind"];
    bb10__0_2130 -> bb13__0_2130 [label="0"];
    bb10__0_2130 -> bb11__0_2130 [label="otherwise"];
    bb11__0_2130 -> bb12__0_2130 [label="return"];
    bb11__0_2130 -> bb27__0_2130 [label="unwind"];
    bb12__0_2130 -> bb22__0_2130 [label=""];
    bb13__0_2130 -> bb14__0_2130 [label="return"];
    bb13__0_2130 -> bb27__0_2130 [label="unwind"];
    bb14__0_2130 -> bb15__0_2130 [label="return"];
    bb14__0_2130 -> bb27__0_2130 [label="unwind"];
    bb15__0_2130 -> bb16__0_2130 [label="return"];
    bb15__0_2130 -> bb27__0_2130 [label="unwind"];
    bb16__0_2130 -> bb17__0_2130 [label="return"];
    bb16__0_2130 -> bb27__0_2130 [label="unwind"];
    bb17__0_2130 -> bb20__0_2130 [label="0"];
    bb17__0_2130 -> bb18__0_2130 [label="otherwise"];
    bb18__0_2130 -> bb19__0_2130 [label="return"];
    bb18__0_2130 -> bb27__0_2130 [label="unwind"];
    bb19__0_2130 -> bb22__0_2130 [label=""];
    bb20__0_2130 -> bb21__0_2130 [label="return"];
    bb20__0_2130 -> bb27__0_2130 [label="unwind"];
    bb21__0_2130 -> bb24__0_2130 [label=""];
    bb22__0_2130 -> bb23__0_2130 [label="return"];
    bb22__0_2130 -> bb25__0_2130 [label="unwind"];
    bb23__0_2130 -> bb24__0_2130 [label=""];
    bb26__0_2130 -> bb25__0_2130 [label="return"];
    bb27__0_2130 -> bb25__0_2130 [label="0"];
    bb27__0_2130 -> bb26__0_2130 [label="otherwise"];
    bb28__0_2130 -> bb25__0_2130 [label=""];
}
