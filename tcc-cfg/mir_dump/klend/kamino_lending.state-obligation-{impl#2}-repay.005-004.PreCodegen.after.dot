digraph Mir_0_1661 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn obligation::Obligation::repay(_1: &amp;ReErased mut state::obligation::Obligation, _2: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, _3: usize) -&gt; ()<br align="left"/>let _4: &amp;ReErased mut state::obligation::ObligationLiquidity;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _10: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _11: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _12: &amp;ReErased state::obligation::ObligationLiquidity;<br align="left"/>let mut _13: state::obligation::ObligationLiquidity;<br align="left"/>let _14: usize;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: bool;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: bool;<br align="left"/>let _20: ();<br align="left"/>let mut _21: &amp;ReErased mut state::obligation::ObligationLiquidity;<br align="left"/>let mut _22: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug settle_amount =&gt; _2;<br align="left"/>debug liquidity_index =&gt; _3;<br align="left"/>debug liquidity =&gt; _4;<br align="left"/>>;
    bb0__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _3<br/>_6 = Len(((*_1).7: [state::obligation::ObligationLiquidity; 5]))<br/>_7 = Lt(_5, _6)<br/></td></tr><tr><td align="left">assert(move _7, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _6, _5)</td></tr></table>>];
    bb1__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = &amp;mut ((*_1).7: [state::obligation::ObligationLiquidity; 5])[_5]<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;_2<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;(*_4)<br/></td></tr><tr><td align="left">_11 = obligation::ObligationLiquidity::borrowed_amount(move _12)</td></tr></table>>];
    bb2__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_10 = &amp;_11<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_8 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as PartialEq&gt;::eq(move _9, move _10)</td></tr></table>>];
    bb3__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_13)<br/></td></tr><tr><td align="left">_13 = &lt;obligation::ObligationLiquidity as Default&gt;::default()</td></tr></table>>];
    bb5__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = _3<br/>_15 = Len(((*_1).7: [state::obligation::ObligationLiquidity; 5]))<br/>_16 = Lt(_14, _15)<br/></td></tr><tr><td align="left">assert(move _16, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _15, _14)</td></tr></table>>];
    bb6__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">((*_1).7: [state::obligation::ObligationLiquidity; 5])[_14] = move _13<br/>StorageDead(_13)<br/>StorageDead(_14)<br/>StorageLive(_17)<br/>_17 = _3<br/>_18 = Len(((*_1).13: [u8; 5]))<br/>_19 = Lt(_17, _18)<br/></td></tr><tr><td align="left">assert(move _19, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _18, _17)</td></tr></table>>];
    bb7__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">((*_1).13: [u8; 5])[_17] = const _<br/>StorageDead(_17)<br/>_0 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;mut (*_4)<br/>StorageLive(_22)<br/>_22 = _2<br/></td></tr><tr><td align="left">_20 = obligation::ObligationLiquidity::repay(move _21, move _22)</td></tr></table>>];
    bb9__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>_0 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1661 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1661 -> bb1__0_1661 [label="success"];
    bb1__0_1661 -> bb2__0_1661 [label="return"];
    bb2__0_1661 -> bb3__0_1661 [label="return"];
    bb3__0_1661 -> bb8__0_1661 [label="0"];
    bb3__0_1661 -> bb4__0_1661 [label="otherwise"];
    bb4__0_1661 -> bb5__0_1661 [label="return"];
    bb5__0_1661 -> bb6__0_1661 [label="success"];
    bb6__0_1661 -> bb7__0_1661 [label="success"];
    bb7__0_1661 -> bb10__0_1661 [label=""];
    bb8__0_1661 -> bb9__0_1661 [label="return"];
    bb9__0_1661 -> bb10__0_1661 [label=""];
}
