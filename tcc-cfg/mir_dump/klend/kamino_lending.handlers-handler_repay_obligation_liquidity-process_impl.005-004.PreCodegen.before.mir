// MIR for `handlers::handler_repay_obligation_liquidity::process_impl` before PreCodegen

fn handlers::handler_repay_obligation_liquidity::process_impl(_1: &handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>, _2: impl Iterator<Item = &'a AccountInfo<'info>>, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug remaining_accounts => _2;
    debug liquidity_amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &handlers::handler_repay_obligation_liquidity::RepayObligationLiquidity<'_>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: anchor_lang::prelude::Clock;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _15: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _20: anchor_lang::prelude::Clock;
    let mut _22: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _24: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _32: std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::obligation::Obligation>>;
    let mut _34: std::result::Result<std::cell::RefMut<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _35: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _42: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _44: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _45: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _53: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::AccountInfo<'_>;
    let _55: &anchor_lang::prelude::AccountInfo<'_>;
    let _56: anchor_lang::prelude::AccountInfo<'_>;
    let mut _57: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _64: &state::reserve::Reserve;
    let mut _65: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _68: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _69: &mut state::reserve::Reserve;
    let mut _70: &mut state::reserve::Reserve;
    let mut _71: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _72: &mut state::obligation::Obligation;
    let mut _73: &mut state::obligation::Obligation;
    let mut _74: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
    let mut _75: &anchor_lang::prelude::Clock;
    let _76: &anchor_lang::prelude::Clock;
    let mut _77: u64;
    let mut _78: anchor_lang::prelude::Pubkey;
    let mut _79: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _80: &state::lending_market::LendingMarket;
    let _81: &state::lending_market::LendingMarket;
    let mut _82: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _83: std::iter::Map<impl Iterator<Item = &'a AccountInfo<'info>>, {closure@programs\klend\src\handlers\handler_repay_obligation_liquidity.rs:78:32: 78:35}>;
    let mut _84: impl Iterator<Item = &'a AccountInfo<'info>>;
    let mut _85: {closure@programs\klend\src\handlers\handler_repay_obligation_liquidity.rs:78:32: 78:35};
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _91: ();
    let _92: ();
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 3];
    let _96: &[&str; 3];
    let _97: [&str; 3];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 2];
    let _100: &[core::fmt::rt::Argument<'_>; 2];
    let _101: [core::fmt::rt::Argument<'_>; 2];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &u64;
    let _104: &u64;
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &u64;
    let _107: &u64;
    let _108: ();
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _110: std::result::Result<(), anchor_lang::error::Error>;
    let mut _111: anchor_lang::prelude::AccountInfo<'_>;
    let mut _112: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _113: anchor_lang::prelude::AccountInfo<'_>;
    let mut _114: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _115: anchor_lang::prelude::AccountInfo<'_>;
    let mut _116: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _117: anchor_lang::prelude::AccountInfo<'_>;
    let mut _118: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _119: anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: &anchor_lang::prelude::Signer<'_>;
    let mut _121: u64;
    let mut _122: u8;
    let mut _123: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _124: &anchor_spl::token_interface::Mint;
    let _125: &anchor_spl::token_interface::Mint;
    let mut _126: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _134: std::result::Result<(), anchor_lang::error::Error>;
    let mut _135: u64;
    let mut _136: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _137: &anchor_lang::prelude::AccountInfo<'_>;
    let _138: &anchor_lang::prelude::AccountInfo<'_>;
    let _139: anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _141: u64;
    let mut _142: &state::reserve::Reserve;
    let mut _143: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _144: u64;
    let mut _145: u64;
    let mut _146: state::types::LendingAction;
    let mut _147: u64;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _153: ();
    let mut _155: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _156: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _157: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _158: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _159: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _160: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _213: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _214: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _215: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _216: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _217: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _21: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
        let _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _30: std::cell::RefMut<'_, state::reserve::Reserve>;
        scope 10 {
            debug repay_reserve => _21;
            let _31: &mut std::cell::RefMut<'_, state::obligation::Obligation>;
            let _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _40: std::cell::RefMut<'_, state::obligation::Obligation>;
            scope 15 {
                debug obligation => _31;
                let _41: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
                let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _50: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                scope 20 {
                    debug lending_market => _41;
                    let _51: u64;
                    let _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _62: u64;
                    scope 25 {
                        debug initial_reserve_token_balance => _51;
                        let _63: u64;
                        scope 30 {
                            debug initial_reserve_available_liquidity => _63;
                            let _66: u64;
                            let _87: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _90: u64;
                            scope 31 {
                                debug repay_amount => _66;
                                let _128: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _131: ();
                                let _149: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _152: ();
                                let mut _154: &[&str; 3];
                                scope 36 {
                                    debug residual => _128;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => _131;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug residual => _149;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug val => _152;
                                    scope 43 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _87;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _90;
                                scope 35 {
                                }
                            }
                        }
                    }
                    scope 26 {
                        debug residual => _59;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _62;
                        scope 29 {
                        }
                    }
                }
                scope 21 {
                    debug residual => _47;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _50;
                    scope 24 {
                    }
                }
            }
            scope 16 {
                debug residual => _37;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _40;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _27;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _30;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        _161 = const false;
        _166 = const false;
        _165 = const false;
        _164 = const false;
        _163 = const false;
        _162 = const false;
        _161 = const true;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = repay_obligation_liquidity_checks(move _7) -> [return: bb1, unwind: bb111];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb111];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: ());
        _4 = _12;
        StorageDead(_12);
        _167 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind: bb111];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb109];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _201 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb90;
    }

    bb7: {
        _14 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb8, unwind: bb111];
    }

    bb8: {
        StorageDead(_15);
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_14 as Continue).0: anchor_lang::prelude::Clock);
        _13 = move _20;
        StorageDead(_20);
        _169 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _24 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _25) -> [return: bb12, unwind: bb111];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _19) -> [return: bb11, unwind: bb108];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _199 = discriminant(_14);
        StorageDead(_14);
        goto -> bb81;
    }

    bb12: {
        StorageDead(_25);
        _23 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _24) -> [return: bb13, unwind: bb111];
    }

    bb13: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = move ((_23 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _22 = move _30;
        StorageDead(_30);
        _21 = &mut _22;
        _171 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _34 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::load_mut(move _35) -> [return: bb17, unwind: bb87];
    }

    bb15: {
        StorageLive(_27);
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _29) -> [return: bb16, unwind: bb107];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        _197 = discriminant(_23);
        StorageDead(_23);
        goto -> bb80;
    }

    bb17: {
        StorageDead(_35);
        _33 = <std::result::Result<RefMut<'_, obligation::Obligation>, anchor_lang::error::Error> as Try>::branch(move _34) -> [return: bb18, unwind: bb87];
    }

    bb18: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_40);
        _40 = move ((_33 as Continue).0: std::cell::RefMut<'_, state::obligation::Obligation>);
        _32 = move _40;
        StorageDead(_40);
        _31 = &mut _32;
        _173 = discriminant(_33);
        StorageDead(_33);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_1).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _44 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _45) -> [return: bb22, unwind: bb86];
    }

    bb20: {
        StorageLive(_37);
        _37 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _39) -> [return: bb21, unwind: bb106];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_37);
        _195 = discriminant(_33);
        StorageDead(_33);
        goto -> bb79;
    }

    bb22: {
        StorageDead(_45);
        _43 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _44) -> [return: bb23, unwind: bb86];
    }

    bb23: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_50);
        _50 = move ((_43 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _42 = move _50;
        StorageDead(_50);
        _41 = &_42;
        _175 = discriminant(_43);
        StorageDead(_43);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _155 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _212 = (((_155.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _57 = &(*_212);
        _56 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _57) -> [return: bb27, unwind: bb85];
    }

    bb25: {
        StorageLive(_47);
        _47 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb26, unwind: bb105];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        _193 = discriminant(_43);
        StorageDead(_43);
        goto -> bb78;
    }

    bb27: {
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = amount(move _54) -> [return: bb28, unwind: bb84];
    }

    bb28: {
        StorageDead(_54);
        _52 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb29, unwind: bb84];
    }

    bb29: {
        StorageDead(_53);
        _58 = discriminant(_52);
        switchInt(move _58) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_62);
        _62 = ((_52 as Continue).0: u64);
        _51 = _62;
        StorageDead(_62);
        _177 = discriminant(_52);
        drop(_56) -> [return: bb33, unwind: bb85];
    }

    bb31: {
        StorageLive(_59);
        _59 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _61) -> [return: bb32, unwind: bb104];
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_59);
        _191 = discriminant(_52);
        drop(_56) -> [return: bb76, unwind: bb85];
    }

    bb33: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_21);
        _64 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _65) -> [return: bb34, unwind: bb85];
    }

    bb34: {
        StorageDead(_65);
        _63 = (((*_64).5: state::reserve::ReserveLiquidity).3: u64);
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &mut (*_21);
        _70 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _71) -> [return: bb35, unwind: bb85];
    }

    bb35: {
        _69 = &mut (*_70);
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &mut (*_31);
        _73 = <RefMut<'_, obligation::Obligation> as DerefMut>::deref_mut(move _74) -> [return: bb36, unwind: bb85];
    }

    bb36: {
        _72 = &mut (*_73);
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_13;
        _75 = &(*_76);
        StorageLive(_77);
        _77 = _3;
        StorageLive(_78);
        StorageLive(_79);
        _79 = &((*_1).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _78 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _79) -> [return: bb37, unwind: bb85];
    }

    bb37: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_41);
        _81 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _82) -> [return: bb38, unwind: bb85];
    }

    bb38: {
        _80 = &(*_81);
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        _161 = const false;
        _84 = move _2;
        StorageLive(_85);
        _85 = {closure@programs\klend\src\handlers\handler_repay_obligation_liquidity.rs:78:32: 78:35};
        _83 = <impl Iterator<Item = &'a AccountInfo<'info>> as Iterator>::map::<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, {closure@programs\klend\src\handlers\handler_repay_obligation_liquidity.rs:78:32: 78:35}>(move _84, move _85) -> [return: bb39, unwind: bb85];
    }

    bb39: {
        StorageDead(_85);
        StorageDead(_84);
        _68 = lending_operations::repay_obligation_liquidity::<'_, account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, std::iter::Map<impl Iterator<Item = &'a AccountInfo<'info>>, {closure@programs\klend\src\handlers\handler_repay_obligation_liquidity.rs:78:32: 78:35}>>(move _69, move _72, move _75, move _77, move _78, move _80, move _83) -> [return: bb40, unwind: bb85];
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        _67 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb41, unwind: bb85];
    }

    bb41: {
        StorageDead(_68);
        _86 = discriminant(_67);
        switchInt(move _86) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_90);
        _90 = ((_67 as Continue).0: u64);
        _66 = _90;
        StorageDead(_90);
        _179 = discriminant(_67);
        StorageDead(_81);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_67);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _154 = const _;
        _96 = &(*_154);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_66;
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _103) -> [return: bb45, unwind: bb85];
    }

    bb43: {
        StorageLive(_87);
        _87 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_89);
        _89 = move _87;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _89) -> [return: bb44, unwind: bb103];
    }

    bb44: {
        StorageDead(_89);
        StorageDead(_87);
        _189 = discriminant(_67);
        StorageDead(_81);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_67);
        goto -> bb75;
    }

    bb45: {
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_3;
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _106) -> [return: bb46, unwind: bb85];
    }

    bb46: {
        StorageDead(_106);
        _101 = [move _102, move _105];
        StorageDead(_105);
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb47, unwind: bb85];
    }

    bb47: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = _print(move _93) -> [return: bb48, unwind: bb85];
    }

    bb48: {
        StorageDead(_93);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        StorageDead(_92);
        _91 = const ();
        StorageDead(_91);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &((*_1).7: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _111 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _112) -> [return: bb49, unwind: bb85];
    }

    bb49: {
        _166 = const true;
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        _156 = deref_copy ((*_1).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _213 = (((_156.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _114 = &(*_213);
        _113 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _114) -> [return: bb50, unwind: bb102];
    }

    bb50: {
        _165 = const true;
        StorageDead(_114);
        StorageLive(_115);
        StorageLive(_116);
        _157 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _214 = (((_157.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _116 = &(*_214);
        _115 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _116) -> [return: bb51, unwind: bb100];
    }

    bb51: {
        _164 = const true;
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        _158 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _215 = (((_158.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _118 = &(*_215);
        _117 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _118) -> [return: bb52, unwind: bb98];
    }

    bb52: {
        _163 = const true;
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &((*_1).0: anchor_lang::prelude::Signer<'_>);
        _119 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _120) -> [return: bb53, unwind: bb96];
    }

    bb53: {
        _162 = const true;
        StorageDead(_120);
        StorageLive(_121);
        _121 = _66;
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _159 = deref_copy ((*_1).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _216 = (((_159.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _126 = &(*_216);
        _125 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _126) -> [return: bb54, unwind: bb94];
    }

    bb54: {
        _124 = &(*_125);
        _123 = <anchor_spl::token_interface::Mint as Deref>::deref(move _124) -> [return: bb55, unwind: bb94];
    }

    bb55: {
        StorageDead(_126);
        StorageDead(_124);
        _122 = ((*_123).2: u8);
        _166 = const false;
        _165 = const false;
        _164 = const false;
        _163 = const false;
        _162 = const false;
        _110 = repay_obligation_liquidity_transfer(move _111, move _113, move _115, move _117, move _119, move _121, move _122) -> [return: bb56, unwind: bb94];
    }

    bb56: {
        StorageDead(_122);
        StorageDead(_121);
        _162 = const false;
        StorageDead(_119);
        _163 = const false;
        StorageDead(_117);
        _164 = const false;
        StorageDead(_115);
        _165 = const false;
        StorageDead(_113);
        _166 = const false;
        StorageDead(_111);
        _109 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _110) -> [return: bb57, unwind: bb85];
    }

    bb57: {
        StorageDead(_110);
        _127 = discriminant(_109);
        switchInt(move _127) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_131);
        _131 = ((_109 as Continue).0: ());
        _108 = _131;
        StorageDead(_131);
        _181 = discriminant(_109);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _160 = deref_copy ((*_1).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _217 = (((_160.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _140 = &(*_217);
        _139 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _140) -> [return: bb61, unwind: bb85];
    }

    bb59: {
        StorageLive(_128);
        _128 = move ((_109 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _130) -> [return: bb60, unwind: bb92];
    }

    bb60: {
        StorageDead(_130);
        StorageDead(_128);
        _187 = discriminant(_109);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb75;
    }

    bb61: {
        StorageDead(_140);
        _138 = &_139;
        _137 = &(*_138);
        _136 = amount(move _137) -> [return: bb62, unwind: bb83];
    }

    bb62: {
        StorageDead(_137);
        _135 = std::result::Result::<u64, anchor_lang::error::Error>::unwrap(move _136) -> [return: bb63, unwind: bb83];
    }

    bb63: {
        StorageDead(_136);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &(*_21);
        _142 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _143) -> [return: bb64, unwind: bb83];
    }

    bb64: {
        StorageDead(_143);
        _141 = (((*_142).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_144);
        _144 = _51;
        StorageLive(_145);
        _145 = _63;
        StorageLive(_146);
        StorageLive(_147);
        _147 = _66;
        _146 = state::types::LendingAction::Additive(move _147);
        StorageDead(_147);
        _134 = post_transfer_vault_balance_liquidity_reserve_checks(move _135, move _141, move _144, move _145, move _146) -> [return: bb65, unwind: bb83];
    }

    bb65: {
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_135);
        _133 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _134) -> [return: bb66, unwind: bb83];
    }

    bb66: {
        StorageDead(_134);
        _148 = discriminant(_133);
        switchInt(move _148) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_152);
        _152 = ((_133 as Continue).0: ());
        _132 = _152;
        StorageDead(_152);
        _183 = discriminant(_133);
        StorageDead(_142);
        drop(_139) -> [return: bb70, unwind: bb85];
    }

    bb68: {
        StorageLive(_149);
        _149 = move ((_133 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_151);
        _151 = move _149;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _151) -> [return: bb69, unwind: bb91];
    }

    bb69: {
        StorageDead(_151);
        StorageDead(_149);
        _185 = discriminant(_133);
        StorageDead(_142);
        drop(_139) -> [return: bb74, unwind: bb85];
    }

    bb70: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_153);
        _153 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _153);
        StorageDead(_153);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_51);
        drop(_42) -> [return: bb71, unwind: bb86];
    }

    bb71: {
        StorageDead(_42);
        StorageDead(_41);
        drop(_32) -> [return: bb72, unwind: bb87];
    }

    bb72: {
        StorageDead(_32);
        StorageDead(_31);
        drop(_22) -> [return: bb73, unwind: bb111];
    }

    bb73: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_13);
        goto -> bb82;
    }

    bb74: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_66);
        StorageDead(_63);
        goto -> bb77;
    }

    bb76: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_51);
        drop(_42) -> [return: bb78, unwind: bb86];
    }

    bb78: {
        StorageDead(_42);
        StorageDead(_41);
        drop(_32) -> [return: bb79, unwind: bb87];
    }

    bb79: {
        StorageDead(_32);
        StorageDead(_31);
        drop(_22) -> [return: bb80, unwind: bb111];
    }

    bb80: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_13);
        goto -> bb90;
    }

    bb82: {
        return;
    }

    bb83 (cleanup): {
        drop(_139) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_56) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_42) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_32) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_22) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        resume;
    }

    bb89: {
        drop(_2) -> [return: bb82, unwind: bb88];
    }

    bb90: {
        switchInt(_161) -> [0: bb82, otherwise: bb89];
    }

    bb91 (cleanup): {
        _203 = discriminant(_133);
        goto -> bb83;
    }

    bb92 (cleanup): {
        _204 = discriminant(_109);
        goto -> bb85;
    }

    bb93 (cleanup): {
        drop(_119) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_162) -> [0: bb96, otherwise: bb93];
    }

    bb95 (cleanup): {
        drop(_117) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_163) -> [0: bb98, otherwise: bb95];
    }

    bb97 (cleanup): {
        drop(_115) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_164) -> [0: bb100, otherwise: bb97];
    }

    bb99 (cleanup): {
        drop(_113) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_165) -> [0: bb102, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_111) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_166) -> [0: bb85, otherwise: bb101];
    }

    bb103 (cleanup): {
        _205 = discriminant(_67);
        goto -> bb85;
    }

    bb104 (cleanup): {
        _206 = discriminant(_52);
        goto -> bb84;
    }

    bb105 (cleanup): {
        _207 = discriminant(_43);
        goto -> bb86;
    }

    bb106 (cleanup): {
        _208 = discriminant(_33);
        goto -> bb87;
    }

    bb107 (cleanup): {
        _209 = discriminant(_23);
        goto -> bb111;
    }

    bb108 (cleanup): {
        _210 = discriminant(_14);
        goto -> bb111;
    }

    bb109 (cleanup): {
        _211 = discriminant(_5);
        goto -> bb111;
    }

    bb110 (cleanup): {
        drop(_2) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_161) -> [0: bb88, otherwise: bb110];
    }
}
