// MIR for `post_borrow_obligation_invariants` before PreCodegen

fn post_borrow_obligation_invariants(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: &obligation::Obligation, _3: &reserve::Reserve, _4: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _5: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug amount => _1;
    debug obligation => _2;
    debug reserve => _3;
    debug liquidity_asset_mv => _4;
    debug min_accepted_net_value => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _7: &state::reserve::Reserve;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: u128;
    let mut _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: &state::reserve::Reserve;
    let mut _16: bool;
    let mut _17: u8;
    let mut _19: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _20: u128;
    let mut _21: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _24: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _25: ();
    let mut _26: bool;
    let mut _27: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _28: &i32;
    let _29: i32;
    let mut _30: bool;
    let mut _31: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _32: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _33: !;
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: &std::string::String;
    let _39: std::string::String;
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[&str; 2];
    let _44: &[&str; 2];
    let _45: [&str; 2];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let mut _47: &[core::fmt::rt::Argument<'_>; 2];
    let _48: &[core::fmt::rt::Argument<'_>; 2];
    let _49: [core::fmt::rt::Argument<'_>; 2];
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &utils::fraction::FractionDisplay<'_>;
    let _52: &utils::fraction::FractionDisplay<'_>;
    let _53: utils::fraction::FractionDisplay<'_>;
    let mut _54: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _55: core::fmt::rt::Argument<'_>;
    let mut _56: &&str;
    let _57: &&str;
    let _58: &str;
    let mut _59: &state::reserve::Reserve;
    let mut _60: anchor_lang::error::Error;
    let mut _61: anchor_lang::error::AnchorError;
    let mut _62: std::string::String;
    let mut _63: &LendingError;
    let _64: LendingError;
    let mut _65: u32;
    let mut _66: LendingError;
    let mut _67: std::string::String;
    let mut _68: &LendingError;
    let _69: LendingError;
    let mut _70: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _71: anchor_lang::error::ErrorOrigin;
    let mut _72: anchor_lang::error::Source;
    let mut _73: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _75: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _76: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _77: u128;
    let _78: ();
    let mut _79: bool;
    let mut _80: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _81: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _82: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _83: &state::obligation::Obligation;
    let mut _84: !;
    let _85: ();
    let mut _86: &str;
    let _87: &str;
    let mut _88: &std::string::String;
    let _89: &std::string::String;
    let _90: std::string::String;
    let mut _92: std::fmt::Arguments<'_>;
    let mut _93: &[&str];
    let mut _94: &[&str; 3];
    let _95: &[&str; 3];
    let _96: [&str; 3];
    let mut _97: &[core::fmt::rt::Argument<'_>];
    let mut _98: &[core::fmt::rt::Argument<'_>; 3];
    let _99: &[core::fmt::rt::Argument<'_>; 3];
    let _100: [core::fmt::rt::Argument<'_>; 3];
    let mut _101: core::fmt::rt::Argument<'_>;
    let mut _102: &utils::fraction::FractionDisplay<'_>;
    let _103: &utils::fraction::FractionDisplay<'_>;
    let _104: utils::fraction::FractionDisplay<'_>;
    let mut _105: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &utils::fraction::FractionDisplay<'_>;
    let _108: &utils::fraction::FractionDisplay<'_>;
    let _109: utils::fraction::FractionDisplay<'_>;
    let mut _110: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _111: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _112: &state::obligation::Obligation;
    let mut _113: core::fmt::rt::Argument<'_>;
    let mut _114: &&str;
    let _115: &&str;
    let _116: &str;
    let mut _117: &state::reserve::Reserve;
    let mut _118: &[core::fmt::rt::Placeholder];
    let mut _119: &[core::fmt::rt::Placeholder; 3];
    let _120: &[core::fmt::rt::Placeholder; 3];
    let _121: [core::fmt::rt::Placeholder; 3];
    let mut _122: core::fmt::rt::Placeholder;
    let mut _123: core::fmt::rt::Alignment;
    let mut _124: core::fmt::rt::Count;
    let mut _125: core::fmt::rt::Count;
    let mut _126: core::fmt::rt::Placeholder;
    let mut _127: core::fmt::rt::Alignment;
    let mut _128: core::fmt::rt::Count;
    let mut _129: core::fmt::rt::Count;
    let mut _130: core::fmt::rt::Placeholder;
    let mut _131: core::fmt::rt::Alignment;
    let mut _132: core::fmt::rt::Count;
    let mut _133: core::fmt::rt::Count;
    let mut _134: core::fmt::rt::UnsafeArg;
    let mut _135: anchor_lang::error::Error;
    let mut _136: anchor_lang::error::AnchorError;
    let mut _137: std::string::String;
    let mut _138: &LendingError;
    let _139: LendingError;
    let mut _140: u32;
    let mut _141: LendingError;
    let mut _142: std::string::String;
    let mut _143: &LendingError;
    let _144: LendingError;
    let mut _145: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _146: anchor_lang::error::ErrorOrigin;
    let mut _147: anchor_lang::error::Source;
    let mut _148: std::option::Option<anchor_lang::error::ComparedValues>;
    let _149: ();
    let mut _150: bool;
    let mut _151: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _152: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _153: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _154: u128;
    let mut _155: !;
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 2];
    let _166: &[&str; 2];
    let _167: [&str; 2];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 2];
    let _170: &[core::fmt::rt::Argument<'_>; 2];
    let _171: [core::fmt::rt::Argument<'_>; 2];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &utils::fraction::FractionDisplay<'_>;
    let _174: &utils::fraction::FractionDisplay<'_>;
    let _175: utils::fraction::FractionDisplay<'_>;
    let mut _176: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _177: core::fmt::rt::Argument<'_>;
    let mut _178: &&str;
    let _179: &&str;
    let _180: &str;
    let mut _181: &state::reserve::Reserve;
    let mut _182: anchor_lang::error::Error;
    let mut _183: anchor_lang::error::AnchorError;
    let mut _184: std::string::String;
    let mut _185: &LendingError;
    let _186: LendingError;
    let mut _187: u32;
    let mut _188: LendingError;
    let mut _189: std::string::String;
    let mut _190: &LendingError;
    let _191: LendingError;
    let mut _192: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _193: anchor_lang::error::ErrorOrigin;
    let mut _194: anchor_lang::error::Source;
    let mut _195: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _196: ();
    scope 1 {
        debug asset_mv => _6;
        let _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug new_total_bf_debt_mv => _9;
            let _18: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug new_total_no_bf_debt_mv => _18;
                let _22: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug new_liquidity_asset_mv => _22;
                    let _40: std::string::String;
                    let _74: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    let mut _197: &LendingError;
                    let mut _198: &LendingError;
                    let mut _199: &[&str; 2];
                    let mut _206: &i32;
                    scope 5 {
                        debug res => _40;
                    }
                    scope 6 {
                        debug new_ltv => _74;
                        let _91: std::string::String;
                        let _162: std::string::String;
                        let mut _200: &LendingError;
                        let mut _201: &LendingError;
                        let mut _202: &[&str; 3];
                        let mut _203: &LendingError;
                        let mut _204: &LendingError;
                        let mut _205: &[&str; 2];
                        scope 7 {
                            debug res => _91;
                        }
                        scope 8 {
                        }
                        scope 9 {
                            debug res => _162;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_3);
        StorageLive(_8);
        _8 = _1;
        _6 = calculate_market_value_from_liquidity_amount(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_2).8: u128);
        _10 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _6;
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_2).14: u8);
        _16 = Ne(move _17, const _);
        StorageDead(_17);
        _14 = reserve::Reserve::borrow_factor_f(move _15, move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageDead(_15);
        _12 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        _9 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _10, move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_2).9: u128);
        _19 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = _6;
        _18 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _19, move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _4;
        StorageLive(_24);
        _24 = _6;
        _22 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _23, move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_22;
        StorageLive(_28);
        _206 = const _;
        _28 = &(*_206);
        _26 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _27, move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _26) -> [0: bb27, otherwise: bb10];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_22;
        StorageLive(_32);
        _32 = &_5;
        _30 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _31, move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _30) -> [0: bb26, otherwise: bb12];
    }

    bb12: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _199 = const _;
        _44 = &(*_199);
        _43 = &(*_44);
        _42 = move _43 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_22;
        _53 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _54) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _51) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_51);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &(*_3);
        _58 = reserve::Reserve::token_symbol(move _59) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _56) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_56);
        _49 = [move _50, move _55];
        StorageDead(_55);
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = move _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_47);
        _41 = Arguments::<'_>::new_v1(move _42, move _46) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_46);
        StorageDead(_42);
        _40 = format(move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_44);
        _39 = move _40;
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = <std::string::String as Deref>::deref(move _37) -> [return: bb19, unwind: bb80];
    }

    bb19: {
        _35 = &(*_36);
        StorageDead(_37);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb20, unwind: bb80];
    }

    bb20: {
        StorageDead(_35);
        drop(_39) -> [return: bb21, unwind: bb81];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _198 = const _;
        _63 = &(*_198);
        _62 = LendingError::name(move _63) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        _66 = LendingError::NetValueRemainingTooSmall;
        _65 = <LendingError as Into<u32>>::into(move _66) -> [return: bb23, unwind: bb79];
    }

    bb23: {
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _197 = const _;
        _68 = &(*_197);
        _67 = <LendingError as ToString>::to_string(move _68) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3024_u32 };
        _71 = anchor_lang::error::ErrorOrigin::Source(move _72);
        StorageDead(_72);
        _70 = std::option::Option::<ErrorOrigin>::Some(move _71);
        StorageDead(_71);
        StorageLive(_73);
        _73 = std::option::Option::<ComparedValues>::None;
        _61 = anchor_lang::error::AnchorError { error_name: move _62, error_code_number: move _65, error_msg: move _67, error_origin: move _70, compared_values: move _73 };
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_62);
        _60 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _61) -> [return: bb25, unwind: bb81];
    }

    bb25: {
        StorageDead(_61);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _60);
        StorageDead(_60);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb73;
    }

    bb26: {
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb28;
    }

    bb27: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb28;
    }

    bb28: {
        _25 = const ();
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _9;
        StorageLive(_76);
        StorageLive(_77);
        _77 = ((*_2).6: u128);
        _76 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _77) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_77);
        _74 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _75, move _76) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_74;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &(*_2);
        _82 = obligation::Obligation::unhealthy_loan_to_value(move _83) -> [return: bb31, unwind continue];
    }

    bb31: {
        _81 = &_82;
        StorageDead(_83);
        _79 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _80, move _81) -> [return: bb32, unwind continue];
    }

    bb32: {
        switchInt(move _79) -> [0: bb54, otherwise: bb33];
    }

    bb33: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _202 = const _;
        _95 = &(*_202);
        _94 = &(*_95);
        _93 = move _94 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_74;
        _104 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _105) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _102) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_102);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_2);
        _111 = obligation::Obligation::unhealthy_loan_to_value(move _112) -> [return: bb36, unwind continue];
    }

    bb36: {
        _110 = &_111;
        StorageDead(_112);
        _109 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _110) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _107) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_107);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &(*_3);
        _116 = reserve::Reserve::token_symbol(move _117) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _114) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_114);
        _100 = [move _101, move _106, move _113];
        StorageDead(_113);
        StorageDead(_106);
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = move _98 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_98);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_124);
        _124 = core::fmt::rt::Count::Is(const 2_usize);
        StorageLive(_125);
        _125 = core::fmt::rt::Count::Implied;
        _122 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _123, const 0_u32, move _124, move _125) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_126);
        StorageLive(_127);
        _127 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_128);
        _128 = core::fmt::rt::Count::Is(const 2_usize);
        StorageLive(_129);
        _129 = core::fmt::rt::Count::Implied;
        _126 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _127, const 0_u32, move _128, move _129) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        _131 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_132);
        _132 = core::fmt::rt::Count::Implied;
        StorageLive(_133);
        _133 = core::fmt::rt::Count::Implied;
        _130 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _131, const 0_u32, move _132, move _133) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        _121 = [move _122, move _126, move _130];
        StorageDead(_130);
        StorageDead(_126);
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = move _119 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_119);
        StorageLive(_134);
        _134 = core::fmt::rt::UnsafeArg::new() -> [return: bb44, unwind continue];
    }

    bb44: {
        _92 = Arguments::<'_>::new_v1_formatted(move _93, move _97, move _118, move _134) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_134);
        StorageDead(_118);
        StorageDead(_97);
        StorageDead(_93);
        _91 = format(move _92) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_92);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_95);
        _90 = move _91;
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = <std::string::String as Deref>::deref(move _88) -> [return: bb47, unwind: bb78];
    }

    bb47: {
        _86 = &(*_87);
        StorageDead(_88);
        _85 = solana_program::log::sol_log(move _86) -> [return: bb48, unwind: bb78];
    }

    bb48: {
        StorageDead(_86);
        drop(_90) -> [return: bb49, unwind: bb81];
    }

    bb49: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _201 = const _;
        _138 = &(*_201);
        _137 = LendingError::name(move _138) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_138);
        StorageLive(_140);
        StorageLive(_141);
        _141 = LendingError::WorseLtvThanUnhealthyLtv;
        _140 = <LendingError as Into<u32>>::into(move _141) -> [return: bb51, unwind: bb77];
    }

    bb51: {
        StorageDead(_141);
        StorageLive(_142);
        StorageLive(_143);
        _200 = const _;
        _143 = &(*_200);
        _142 = <LendingError as ToString>::to_string(move _143) -> [return: bb52, unwind: bb77];
    }

    bb52: {
        StorageDead(_143);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3035_u32 };
        _146 = anchor_lang::error::ErrorOrigin::Source(move _147);
        StorageDead(_147);
        _145 = std::option::Option::<ErrorOrigin>::Some(move _146);
        StorageDead(_146);
        StorageLive(_148);
        _148 = std::option::Option::<ComparedValues>::None;
        _136 = anchor_lang::error::AnchorError { error_name: move _137, error_code_number: move _140, error_msg: move _142, error_origin: move _145, compared_values: move _148 };
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_137);
        _135 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _136) -> [return: bb53, unwind: bb81];
    }

    bb53: {
        StorageDead(_136);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _135);
        StorageDead(_135);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb72;
    }

    bb54: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        _78 = const ();
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_18;
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = ((*_2).6: u128);
        _153 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _154) -> [return: bb55, unwind continue];
    }

    bb55: {
        _152 = &_153;
        StorageDead(_154);
        _150 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _151, move _152) -> [return: bb56, unwind continue];
    }

    bb56: {
        switchInt(move _150) -> [0: bb71, otherwise: bb57];
    }

    bb57: {
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _205 = const _;
        _166 = &(*_205);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &_18;
        _175 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _176) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _173) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_173);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &(*_3);
        _180 = reserve::Reserve::token_symbol(move _181) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _178) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_178);
        _171 = [move _172, move _177];
        StorageDead(_177);
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_163);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <std::string::String as Deref>::deref(move _159) -> [return: bb64, unwind: bb76];
    }

    bb64: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb65, unwind: bb76];
    }

    bb65: {
        StorageDead(_157);
        drop(_161) -> [return: bb66, unwind: bb81];
    }

    bb66: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _204 = const _;
        _185 = &(*_204);
        _184 = LendingError::name(move _185) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_185);
        StorageLive(_187);
        StorageLive(_188);
        _188 = LendingError::LiabilitiesBiggerThanAssets;
        _187 = <LendingError as Into<u32>>::into(move _188) -> [return: bb68, unwind: bb75];
    }

    bb68: {
        StorageDead(_188);
        StorageLive(_189);
        StorageLive(_190);
        _203 = const _;
        _190 = &(*_203);
        _189 = <LendingError as ToString>::to_string(move _190) -> [return: bb69, unwind: bb75];
    }

    bb69: {
        StorageDead(_190);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3044_u32 };
        _193 = anchor_lang::error::ErrorOrigin::Source(move _194);
        StorageDead(_194);
        _192 = std::option::Option::<ErrorOrigin>::Some(move _193);
        StorageDead(_193);
        StorageLive(_195);
        _195 = std::option::Option::<ComparedValues>::None;
        _183 = anchor_lang::error::AnchorError { error_name: move _184, error_code_number: move _187, error_msg: move _189, error_origin: move _192, compared_values: move _195 };
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_184);
        _182 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _183) -> [return: bb70, unwind: bb81];
    }

    bb70: {
        StorageDead(_183);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _182);
        StorageDead(_182);
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb72;
    }

    bb71: {
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        _149 = const ();
        StorageDead(_150);
        StorageDead(_149);
        StorageLive(_196);
        _196 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _196);
        StorageDead(_196);
        StorageDead(_74);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb74;
    }

    bb72: {
        StorageDead(_74);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb74;
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        drop(_184) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_161) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_137) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_90) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_62) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_39) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        resume;
    }
}
