// MIR for `state::lending_market::<impl at programs\klend\src\state\lending_market.rs:197:1: 197:19>::get_elevation_group` before PreCodegen

fn state::lending_market::<impl at programs\klend\src\state\lending_market.rs:197:1: 197:19>::get_elevation_group(_1: &state::lending_market::LendingMarket, _2: u8) -> std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> {
    debug self => _1;
    debug id => _2;
    let mut _0: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _6: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _7: &state::lending_market::ElevationGroup;
    let _8: &state::lending_market::ElevationGroup;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, &state::lending_market::ElevationGroup>;
    let mut _10: std::result::Result<&state::lending_market::ElevationGroup, LendingError>;
    let mut _11: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _12: &[state::lending_market::ElevationGroup];
    let mut _13: &[state::lending_market::ElevationGroup; 32];
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: u8;
    let mut _17: (usize, bool);
    let mut _18: LendingError;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, LendingError>;
    let _23: &state::lending_market::ElevationGroup;
    scope 1 {
        debug residual => _20;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _23;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _2;
        _3 = Eq(move _4, const _);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = std::option::Option::<&state::lending_market::ElevationGroup>::None;
        _0 = std::result::Result::<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>::Ok(move _5);
        StorageDead(_5);
        goto -> bb11;
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).18: [state::lending_market::ElevationGroup; 32]);
        _12 = move _13 as &[state::lending_market::ElevationGroup] (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _2;
        _15 = move _16 as usize (IntToInt);
        StorageDead(_16);
        _17 = CheckedSub(_15, const 1_usize);
        assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, const 1_usize) -> [success: bb3, unwind continue];
    }

    bb3: {
        _14 = move (_17.0: usize);
        StorageDead(_15);
        _11 = core::slice::<impl [state::lending_market::ElevationGroup]>::get::<usize>(move _12, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_18);
        _18 = LendingError::InvalidElevationGroup;
        _10 = std::option::Option::<&state::lending_market::ElevationGroup>::ok_or::<LendingError>(move _11, move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageDead(_11);
        _9 = <std::result::Result<&state::lending_market::ElevationGroup, LendingError> as Try>::branch(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        _19 = discriminant(_9);
        switchInt(move _19) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_23);
        _23 = ((_9 as Continue).0: &state::lending_market::ElevationGroup);
        _8 = &(*_23);
        StorageDead(_23);
        _7 = &(*_8);
        _6 = std::option::Option::<&state::lending_market::ElevationGroup>::Some(move _7);
        StorageDead(_7);
        _0 = std::result::Result::<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>::Ok(move _6);
        StorageDead(_6);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb11;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_3);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_3);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}
