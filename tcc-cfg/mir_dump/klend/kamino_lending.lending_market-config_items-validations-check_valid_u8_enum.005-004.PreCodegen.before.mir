// MIR for `check_valid_u8_enum` before PreCodegen

fn check_valid_u8_enum(_1: &u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug repr => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: std::result::Result<E, <E as std::convert::TryFrom<u8>>::Error>;
    let mut _3: u8;
    let mut _4: isize;
    let mut _5: ();
    let _6: ();
    let mut _7: &str;
    let _8: &str;
    let mut _9: &std::string::String;
    let _10: &std::string::String;
    let _11: std::string::String;
    let _12: std::string::String;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[&str; 2];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let mut _19: &[core::fmt::rt::Argument<'_>; 2];
    let _20: &[core::fmt::rt::Argument<'_>; 2];
    let _21: [core::fmt::rt::Argument<'_>; 2];
    let mut _22: core::fmt::rt::Argument<'_>;
    let mut _23: &&str;
    let _24: &&str;
    let _25: &str;
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &&u8;
    let _28: &&u8;
    let mut _29: anchor_lang::error::Error;
    let mut _30: anchor_lang::error::AnchorError;
    let mut _31: std::string::String;
    let mut _32: &LendingError;
    let _33: LendingError;
    let mut _34: u32;
    let mut _35: LendingError;
    let mut _36: std::string::String;
    let mut _37: &LendingError;
    let _38: LendingError;
    let mut _39: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _40: anchor_lang::error::ErrorOrigin;
    let mut _41: anchor_lang::error::Source;
    let mut _42: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _43: &LendingError;
    let mut _44: &LendingError;
    let mut _45: &[&str; 2];
    scope 1 {
        debug res => _12;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = (*_1);
        _2 = <E as TryFrom<u8>>::try_from(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _45 = const _;
        _16 = &(*_45);
        _15 = &(*_16);
        _14 = move _15 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = std::any::type_name::<E>() -> [return: bb5, unwind: bb21];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_5);
        _5 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _5);
        StorageDead(_5);
        goto -> bb17;
    }

    bb5: {
        _24 = &_25;
        _23 = &(*_24);
        _22 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _23) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_1;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<&u8>(move _27) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        StorageDead(_27);
        _21 = [move _22, move _26];
        StorageDead(_26);
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = move _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_19);
        _13 = Arguments::<'_>::new_v1(move _14, move _18) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_14);
        _12 = format(move _13) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        StorageDead(_13);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_16);
        _11 = move _12;
        StorageDead(_12);
        _10 = &_11;
        _9 = &(*_10);
        _8 = <std::string::String as Deref>::deref(move _9) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = solana_program::log::sol_log(move _7) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        StorageDead(_7);
        drop(_11) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _44 = const _;
        _32 = &(*_44);
        _31 = LendingError::name(move _32) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        _35 = LendingError::InvalidConfig;
        _34 = <LendingError as Into<u32>>::into(move _35) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _43 = const _;
        _37 = &(*_43);
        _36 = <LendingError as ToString>::to_string(move _37) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\config_items.rs", line: const 296_u32 };
        _40 = anchor_lang::error::ErrorOrigin::Source(move _41);
        StorageDead(_41);
        _39 = std::option::Option::<ErrorOrigin>::Some(move _40);
        StorageDead(_40);
        StorageLive(_42);
        _42 = std::option::Option::<ComparedValues>::None;
        _30 = anchor_lang::error::AnchorError { error_name: move _31, error_code_number: move _34, error_msg: move _36, error_origin: move _39, compared_values: move _42 };
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_31);
        _29 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _30) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        StorageDead(_30);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _29);
        StorageDead(_29);
        goto -> bb17;
    }

    bb17: {
        drop(_2) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        StorageDead(_2);
        return;
    }

    bb19 (cleanup): {
        drop(_31) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_11) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}
