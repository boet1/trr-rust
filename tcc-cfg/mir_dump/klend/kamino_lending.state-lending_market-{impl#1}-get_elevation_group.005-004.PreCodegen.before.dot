digraph Mir_0_1511 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::lending_market::LendingMarket::get_elevation_group(_1: &amp;ReErased state::lending_market::LendingMarket, _2: u8) -&gt; std::result::Result&lt;std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;, anchor_lang::error::Error&gt;<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let mut _6: std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let mut _7: &amp;ReErased state::lending_market::ElevationGroup;<br align="left"/>let _8: &amp;ReErased state::lending_market::ElevationGroup;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, LendingError&gt;, &amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let mut _10: std::result::Result&lt;&amp;ReErased state::lending_market::ElevationGroup, LendingError&gt;;<br align="left"/>let mut _11: std::option::Option&lt;&amp;ReErased state::lending_market::ElevationGroup&gt;;<br align="left"/>let mut _12: &amp;ReErased [state::lending_market::ElevationGroup];<br align="left"/>let mut _13: &amp;ReErased [state::lending_market::ElevationGroup; 32_usize];<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: u8;<br align="left"/>let mut _17: (usize, bool);<br align="left"/>let mut _18: LendingError;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let _23: &amp;ReErased state::lending_market::ElevationGroup;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug id =&gt; _2;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>>;
    bb0__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = _2<br/>_3 = Eq(move _4, const _)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>_5 = std::option::Option::&lt;&amp;state::lending_market::ElevationGroup&gt;::None<br/>_0 = std::result::Result::&lt;std::option::Option&lt;&amp;state::lending_market::ElevationGroup&gt;, anchor_lang::error::Error&gt;::Ok(move _5)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;((*_1).18: [state::lending_market::ElevationGroup; 32])<br/>_12 = move _13 as &amp;[state::lending_market::ElevationGroup] (PointerCoercion(Unsize))<br/>StorageDead(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _2<br/>_15 = move _16 as usize (IntToInt)<br/>StorageDead(_16)<br/>_17 = CheckedSub(_15, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_17.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _15, const 1_usize)</td></tr></table>>];
    bb3__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_14 = move (_17.0: usize)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_11 = core::slice::&lt;impl [state::lending_market::ElevationGroup]&gt;::get::&lt;usize&gt;(move _12, move _14)</td></tr></table>>];
    bb4__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageLive(_18)<br/>_18 = LendingError::InvalidElevationGroup<br/></td></tr><tr><td align="left">_10 = std::option::Option::&lt;&amp;state::lending_market::ElevationGroup&gt;::ok_or::&lt;LendingError&gt;(move _11, move _18)</td></tr></table>>];
    bb5__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;&amp;state::lending_market::ElevationGroup, LendingError&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb6__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_19 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb7__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_9 as Continue).0: &amp;state::lending_market::ElevationGroup)<br/>_8 = &amp;(*_23)<br/>StorageDead(_23)<br/>_7 = &amp;(*_8)<br/>_6 = std::option::Option::&lt;&amp;state::lending_market::ElevationGroup&gt;::Some(move _7)<br/>StorageDead(_7)<br/>_0 = std::result::Result::&lt;std::option::Option&lt;&amp;state::lending_market::ElevationGroup&gt;, anchor_lang::error::Error&gt;::Ok(move _6)<br/>StorageDead(_6)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, LendingError&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;std::option::Option&lt;&amp;state::lending_market::ElevationGroup&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb10__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1511 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1511 -> bb2__0_1511 [label="0"];
    bb0__0_1511 -> bb1__0_1511 [label="otherwise"];
    bb1__0_1511 -> bb11__0_1511 [label=""];
    bb2__0_1511 -> bb3__0_1511 [label="success"];
    bb3__0_1511 -> bb4__0_1511 [label="return"];
    bb4__0_1511 -> bb5__0_1511 [label="return"];
    bb5__0_1511 -> bb6__0_1511 [label="return"];
    bb6__0_1511 -> bb7__0_1511 [label="0"];
    bb6__0_1511 -> bb9__0_1511 [label="1"];
    bb6__0_1511 -> bb8__0_1511 [label="otherwise"];
    bb7__0_1511 -> bb11__0_1511 [label=""];
    bb9__0_1511 -> bb10__0_1511 [label="return"];
    bb10__0_1511 -> bb12__0_1511 [label=""];
    bb11__0_1511 -> bb12__0_1511 [label=""];
}
