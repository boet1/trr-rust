digraph Mir_0_1810 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;referral::ReferrerTokenState as std::fmt::Display&gt;::fmt(_1: &amp;ReErased state::referral::ReferrerTokenState, _2: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let _3: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _4: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _5: &amp;ReErased u128;<br align="left"/>let _6: &amp;ReErased u128;<br align="left"/>let _7: u64;<br align="left"/>let mut _8: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _9: u128;<br align="left"/>let _10: u64;<br align="left"/>let mut _11: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _12: u128;<br align="left"/>let _13: ();<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;, ()&gt;;<br align="left"/>let mut _15: std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let mut _16: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _17: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _18: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _19: &amp;ReErased [&amp;ReErased str; 4_usize];<br align="left"/>let _20: &amp;ReErased [&amp;ReErased str; 4_usize];<br align="left"/>let _21: [&amp;ReErased str; 4_usize];<br align="left"/>let mut _22: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _23: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let _24: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let _25: [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let mut _26: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _27: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _28: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _29: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _30: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _31: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _32: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _33: &amp;ReErased u64;<br align="left"/>let _34: &amp;ReErased u64;<br align="left"/>let mut _35: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _36: &amp;ReErased u64;<br align="left"/>let _37: &amp;ReErased u64;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;;<br align="left"/>let _42: ();<br align="left"/>let mut _43: ();<br align="left"/>let mut _44: &amp;ReErased [&amp;ReErased str; 4_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug f =&gt; _2;<br align="left"/>debug referrer =&gt; _3;<br align="left"/>debug mint =&gt; _4;<br align="left"/>debug amount_unclaimed_sf =&gt; _5;<br align="left"/>debug amount_cumulative_sf =&gt; _6;<br align="left"/>debug amount_unclaimed =&gt; _7;<br align="left"/>debug amount_cumulative =&gt; _10;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>>;
    bb0__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;((*_1).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_4)<br/>_4 = &amp;((*_1).1: anchor_lang::prelude::Pubkey)<br/>StorageLive(_5)<br/>_5 = &amp;((*_1).2: u128)<br/>StorageLive(_6)<br/>_6 = &amp;((*_1).3: u128)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = (*_5)<br/></td></tr><tr><td align="left">_8 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::from_bits(move _9)</td></tr></table>>];
    bb1__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_num::&lt;u64&gt;(move _8)</td></tr></table>>];
    bb2__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = (*_6)<br/></td></tr><tr><td align="left">_11 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::from_bits(move _12)</td></tr></table>>];
    bb3__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_num::&lt;u64&gt;(move _11)</td></tr></table>>];
    bb4__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;mut (*_2)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_44 = const _<br/>_20 = &amp;(*_44)<br/>_19 = &amp;(*_20)<br/>_18 = move _19 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_19)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;_3<br/>_27 = &amp;(*_28)<br/></td></tr><tr><td align="left">_26 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;anchor_lang::prelude::Pubkey&gt;(move _27)</td></tr></table>>];
    bb5__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = &amp;_4<br/>_30 = &amp;(*_31)<br/></td></tr><tr><td align="left">_29 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;anchor_lang::prelude::Pubkey&gt;(move _30)</td></tr></table>>];
    bb6__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = &amp;_7<br/>_33 = &amp;(*_34)<br/></td></tr><tr><td align="left">_32 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _33)</td></tr></table>>];
    bb7__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;_10<br/>_36 = &amp;(*_37)<br/></td></tr><tr><td align="left">_35 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _36)</td></tr></table>>];
    bb8__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_25 = [move _26, move _29, move _32, move _35]<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageDead(_26)<br/>_24 = &amp;_25<br/>_23 = &amp;(*_24)<br/>_22 = move _23 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_17 = Arguments::&lt;'_&gt;::new_v1(move _18, move _22)</td></tr></table>>];
    bb9__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_15 = Formatter::&lt;'_&gt;::write_fmt(move _16, move _17)</td></tr></table>>];
    bb10__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::result::Result&lt;(), std::fmt::Error&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb11__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_38 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb12__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_14 as Continue).0: ())<br/>_13 = _42<br/>StorageDead(_42)<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_20)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_43)<br/>_43 = ()<br/>_0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _43)<br/>StorageDead(_43)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb14__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), std::fmt::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, std::fmt::Error&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb15__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_20)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1810 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1810 -> bb1__0_1810 [label="return"];
    bb1__0_1810 -> bb2__0_1810 [label="return"];
    bb2__0_1810 -> bb3__0_1810 [label="return"];
    bb3__0_1810 -> bb4__0_1810 [label="return"];
    bb4__0_1810 -> bb5__0_1810 [label="return"];
    bb5__0_1810 -> bb6__0_1810 [label="return"];
    bb6__0_1810 -> bb7__0_1810 [label="return"];
    bb7__0_1810 -> bb8__0_1810 [label="return"];
    bb8__0_1810 -> bb9__0_1810 [label="return"];
    bb9__0_1810 -> bb10__0_1810 [label="return"];
    bb10__0_1810 -> bb11__0_1810 [label="return"];
    bb11__0_1810 -> bb12__0_1810 [label="0"];
    bb11__0_1810 -> bb14__0_1810 [label="1"];
    bb11__0_1810 -> bb13__0_1810 [label="otherwise"];
    bb12__0_1810 -> bb16__0_1810 [label=""];
    bb14__0_1810 -> bb15__0_1810 [label="return"];
    bb15__0_1810 -> bb16__0_1810 [label=""];
}
