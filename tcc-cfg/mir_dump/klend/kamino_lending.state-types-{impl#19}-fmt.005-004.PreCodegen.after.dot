digraph Mir_0_10652 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;state::types::LiquidationReason as std::fmt::Debug&gt;::fmt(_1: &amp;ReErased state::types::LiquidationReason, _2: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let mut _3: isize;<br align="left"/>let mut _4: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _5: &amp;ReErased str;<br align="left"/>let _6: &amp;ReErased str;<br align="left"/>let mut _7: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _8: &amp;ReErased str;<br align="left"/>let _9: &amp;ReErased str;<br align="left"/>let mut _10: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _11: &amp;ReErased str;<br align="left"/>let _12: &amp;ReErased str;<br align="left"/>let _13: &amp;ReErased usize;<br align="left"/>let mut _14: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _15: &amp;ReErased str;<br align="left"/>let _16: &amp;ReErased str;<br align="left"/>let mut _17: &amp;ReErased dyn [Binder(Trait(std::fmt::Debug), [])] + ReErased;<br align="left"/>let mut _18: &amp;ReErased &amp;ReErased usize;<br align="left"/>let _19: &amp;ReErased &amp;ReErased usize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug f =&gt; _2;<br align="left"/>debug __self_0 =&gt; _13;<br align="left"/>>;
    bb0__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = discriminant((*_1))<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = &amp;(((*_1) as ObligationOrder).0: usize)<br/>StorageLive(_14)<br/>_14 = &amp;mut (*_2)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = const &quot;ObligationOrder&quot;<br/>_15 = &amp;(*_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;_13<br/>_18 = &amp;(*_19)<br/>_17 = move _18 as &amp;dyn std::fmt::Debug (PointerCoercion(Unsize))<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::debug_tuple_field1_finish(move _14, move _15, move _17)</td></tr></table>>];
    bb2__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_4 = &amp;mut (*_2)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = const &quot;LtvExceeded&quot;<br/>_5 = &amp;(*_6)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_str(move _4, move _5)</td></tr></table>>];
    bb4__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = &amp;mut (*_2)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = const &quot;IndividualDeleveraging&quot;<br/>_8 = &amp;(*_9)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_str(move _7, move _8)</td></tr></table>>];
    bb6__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = &amp;mut (*_2)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = const &quot;MarketWideDeleveraging&quot;<br/>_11 = &amp;(*_12)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_str(move _10, move _11)</td></tr></table>>];
    bb8__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_10652 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_10652 -> bb3__0_10652 [label="0"];
    bb0__0_10652 -> bb5__0_10652 [label="1"];
    bb0__0_10652 -> bb7__0_10652 [label="2"];
    bb0__0_10652 -> bb1__0_10652 [label="3"];
    bb0__0_10652 -> bb2__0_10652 [label="otherwise"];
    bb1__0_10652 -> bb9__0_10652 [label="return"];
    bb3__0_10652 -> bb4__0_10652 [label="return"];
    bb4__0_10652 -> bb10__0_10652 [label=""];
    bb5__0_10652 -> bb6__0_10652 [label="return"];
    bb6__0_10652 -> bb10__0_10652 [label=""];
    bb7__0_10652 -> bb8__0_10652 [label="return"];
    bb8__0_10652 -> bb10__0_10652 [label=""];
    bb9__0_10652 -> bb10__0_10652 [label=""];
}
