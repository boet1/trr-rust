digraph Mir_0_1334 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn accumulate_referrer_fees(_1: &amp;ReErased anchor_lang::prelude::Pubkey, _2: anchor_lang::prelude::Pubkey, _3: &amp;ReErased mut state::reserve::Reserve, _4: &amp;ReErased anchor_lang::prelude::Pubkey, _5: u16, _6: u64, _7: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, _8: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, _9: bool, _10: &amp;ReErased mut impl Iterator&lt;Item = T&gt;/#2) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _11: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _12: u128;<br align="left"/>let _13: ();<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _16: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _17: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: ();<br align="left"/>let _20: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _21: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _22: u16;<br align="left"/>let mut _23: u64;<br align="left"/>let _24: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _25: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _26: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _27: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _28: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _29: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _30: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _31: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _32: ();<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _35: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: anchor_lang::error::Error;<br align="left"/>let mut _38: LendingError;<br align="left"/>let _39: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _40: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _41: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _42: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _43: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _44: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _45: u128;<br align="left"/>let mut _46: u128;<br align="left"/>let mut _47: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _48: u128;<br align="left"/>let mut _49: u128;<br align="left"/>let mut _50: (u128, bool);<br align="left"/>let _51: ();<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: u16;<br align="left"/>let _55: T/#1;<br align="left"/>let mut _56: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, T/#1&gt;;<br align="left"/>let mut _57: std::result::Result&lt;T/#1, anchor_lang::error::Error&gt;;<br align="left"/>let mut _58: std::option::Option&lt;T/#1&gt;;<br align="left"/>let mut _59: &amp;ReErased mut impl Iterator&lt;Item = T&gt;/#2;<br align="left"/>let mut _60: anchor_lang::error::Error;<br align="left"/>let mut _61: anchor_lang::error::AnchorError;<br align="left"/>let mut _62: std::string::String;<br align="left"/>let mut _63: &amp;ReErased LendingError;<br align="left"/>let _64: LendingError;<br align="left"/>let mut _65: u32;<br align="left"/>let mut _66: LendingError;<br align="left"/>let mut _67: std::string::String;<br align="left"/>let mut _68: &amp;ReErased LendingError;<br align="left"/>let _69: LendingError;<br align="left"/>let mut _70: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _71: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _72: anchor_lang::error::Source;<br align="left"/>let mut _73: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _74: isize;<br align="left"/>let _75: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _76: !;<br align="left"/>let mut _77: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _78: T/#1;<br align="left"/>let _79: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _80: std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _81: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;&gt;;<br align="left"/>let mut _82: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _83: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _84: &amp;ReErased T/#1;<br align="left"/>let mut _85: Closure(DefId(0:1337 ~ kamino_lending[6389]::lending_market::lending_operations::accumulate_referrer_fees::{closure#0}), [ReErased, T/#1, impl Iterator&lt;Item = T&gt;/#2, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _86: isize;<br align="left"/>let _87: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _88: !;<br align="left"/>let mut _89: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _90: std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let _91: ();<br align="left"/>let mut _92: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _93: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _94: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _95: &amp;ReErased state::referral::ReferrerTokenState;<br align="left"/>let _96: &amp;ReErased state::referral::ReferrerTokenState;<br align="left"/>let mut _97: &amp;ReErased std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _98: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _99: &amp;ReErased T/#1;<br align="left"/>let mut _100: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _101: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _102: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _103: isize;<br align="left"/>let _104: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _105: !;<br align="left"/>let mut _106: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _107: ();<br align="left"/>let _108: ();<br align="left"/>let mut _109: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _110: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _111: &amp;ReErased mut state::reserve::Reserve;<br align="left"/>let mut _112: &amp;ReErased mut state::referral::ReferrerTokenState;<br align="left"/>let mut _113: &amp;ReErased mut state::referral::ReferrerTokenState;<br align="left"/>let mut _114: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::referral::ReferrerTokenState&gt;;<br align="left"/>let mut _115: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _116: u128;<br align="left"/>let mut _117: isize;<br align="left"/>let _118: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _119: !;<br align="left"/>let mut _120: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _121: ();<br align="left"/>let mut _122: u128;<br align="left"/>let mut _123: (u128, bool);<br align="left"/>let mut _124: ();<br align="left"/>let mut _125: &amp;ReErased LendingError;<br align="left"/>let mut _126: &amp;ReErased LendingError;<br align="left"/>let mut _127: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _128: bool;<br align="left"/>let mut _129: isize;<br align="left"/>let mut _130: isize;<br align="left"/>let mut _131: isize;<br align="left"/>let mut _132: isize;<br align="left"/>let mut _133: isize;<br align="left"/>let mut _134: isize;<br align="left"/>let mut _135: isize;<br align="left"/>let mut _136: isize;<br align="left"/>let mut _137: isize;<br align="left"/>let mut _138: isize;<br align="left"/>let mut _139: isize;<br align="left"/>let mut _140: isize;<br align="left"/>let mut _141: isize;<br align="left"/>let mut _142: isize;<br align="left"/>let mut _143: isize;<br align="left"/>let mut _144: isize;<br align="left"/>let mut _145: isize;<br align="left"/>let mut _146: isize;<br align="left"/>let mut _147: isize;<br align="left"/>let mut _148: isize;<br align="left"/>debug program_id =&gt; _1;<br align="left"/>debug borrow_reserve_info_key =&gt; _2;<br align="left"/>debug borrow_reserve =&gt; _3;<br align="left"/>debug obligation_referrer =&gt; _4;<br align="left"/>debug lending_market_referral_fee_bps =&gt; _5;<br align="left"/>debug slots_elapsed =&gt; _6;<br align="left"/>debug borrowed_amount_f =&gt; _7;<br align="left"/>debug previous_borrowed_amount_f =&gt; _8;<br align="left"/>debug obligation_has_referrer =&gt; _9;<br align="left"/>debug referrer_token_states_iter =&gt; _10;<br align="left"/>debug absolute_referral_rate =&gt; _11;<br align="left"/>debug fixed_rate =&gt; _20;<br align="left"/>debug net_new_debt =&gt; _24;<br align="left"/>debug net_new_fixed_debt =&gt; _27;<br align="left"/>debug net_new_variable_debt_f =&gt; _39;<br align="left"/>debug referrer_fee_f =&gt; _42;<br align="left"/>debug referrer_fee_capped_sf =&gt; _45;<br align="left"/>debug referrer_token_state_loader =&gt; _55;<br align="left"/>debug residual =&gt; _75;<br align="left"/>debug val =&gt; _78;<br align="left"/>debug referrer_token_state =&gt; _79;<br align="left"/>debug residual =&gt; _87;<br align="left"/>debug val =&gt; _90;<br align="left"/>debug residual =&gt; _104;<br align="left"/>debug val =&gt; _107;<br align="left"/>debug residual =&gt; _118;<br align="left"/>debug val =&gt; _121;<br align="left"/>>;
    bb0__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_128 = const false<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = (((*_3).5: state::reserve::ReserveLiquidity).14: u128)<br/></td></tr><tr><td align="left">_11 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::from_bits(move _12)</td></tr></table>>];
    bb1__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;_11<br/>StorageLive(_16)<br/>_127 = const _<br/>_16 = &amp;(*_127)<br/></td></tr><tr><td align="left">_14 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as PartialEq&gt;::eq(move _15, move _16)</td></tr></table>>];
    bb2__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb3__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_19)<br/>_19 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _19)<br/>StorageDead(_19)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>_13 = const ()<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = (((*_3).9: state::reserve::ReserveConfig).2: u16)<br/></td></tr><tr><td align="left">_21 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as utils::fraction::FractionExtra&gt;::from_bps::&lt;u16&gt;(move _22)</td></tr></table>>];
    bb5__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageLive(_23)<br/>_23 = _6<br/></td></tr><tr><td align="left">_20 = reserve::approximate_compounded_interest(move _21, move _23)</td></tr></table>>];
    bb6__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = _7<br/>StorageLive(_26)<br/>_26 = _8<br/></td></tr><tr><td align="left">_24 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as Sub&gt;::sub(move _25, move _26)</td></tr></table>>];
    bb7__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _8<br/>StorageLive(_30)<br/>_30 = _20<br/></td></tr><tr><td align="left">_28 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as std::ops::Mul&gt;::mul(move _29, move _30)</td></tr></table>>];
    bb8__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageLive(_31)<br/>_31 = _8<br/></td></tr><tr><td align="left">_27 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as Sub&gt;::sub(move _28, move _31)</td></tr></table>>];
    bb9__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_28)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = &amp;_27<br/>StorageLive(_35)<br/>_35 = &amp;_24<br/></td></tr><tr><td align="left">_33 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as PartialOrd&gt;::gt(move _34, move _35)</td></tr></table>>];
    bb10__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb11__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = LendingError::CannotCalculateReferralAmountDueToSlotsMismatch<br/></td></tr><tr><td align="left">_37 = &lt;LendingError as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _38)</td></tr></table>>];
    bb12__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _37)<br/>StorageDead(_37)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>_32 = const ()<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = _24<br/>StorageLive(_41)<br/>_41 = _27<br/></td></tr><tr><td align="left">_39 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as Sub&gt;::sub(move _40, move _41)</td></tr></table>>];
    bb14__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = _39<br/>StorageLive(_44)<br/>_44 = _11<br/></td></tr><tr><td align="left">_42 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as std::ops::Mul&gt;::mul(move _43, move _44)</td></tr></table>>];
    bb15__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = _42<br/></td></tr><tr><td align="left">_46 = FixedU128::&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;::to_bits(move _47)</td></tr></table>>];
    bb16__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageLive(_48)<br/>_48 = (((*_3).5: state::reserve::ReserveLiquidity).13: u128)<br/></td></tr><tr><td align="left">_45 = std::cmp::min::&lt;u128&gt;(move _46, move _48)</td></tr></table>>];
    bb17__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/>StorageLive(_49)<br/>_49 = _45<br/>_50 = CheckedSub((((*_3).5: state::reserve::ReserveLiquidity).13: u128), _49)<br/></td></tr><tr><td align="left">assert(!move (_50.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, (((*_3).5: state::reserve::ReserveLiquidity).13: u128), move _49)</td></tr></table>>];
    bb18__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">(((*_3).5: state::reserve::ReserveLiquidity).13: u128) = move (_50.0: u128)<br/>StorageDead(_49)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_52 = _9<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb19__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = _5<br/>_53 = Gt(move _54, const 0_u16)<br/></td></tr><tr><td align="left">switchInt(move _53)</td></tr></table>>];
    bb20__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = &amp;mut (*_10)<br/>_128 = const true<br/></td></tr><tr><td align="left">_58 = &lt;impl Iterator&lt;Item = T&gt; as Iterator&gt;::next(move _59)</td></tr></table>>];
    bb21__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_126 = const _<br/>_63 = &amp;(*_126)<br/></td></tr><tr><td align="left">_62 = LendingError::name(move _63)</td></tr></table>>];
    bb22__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = LendingError::InvalidAccountInput<br/></td></tr><tr><td align="left">_65 = &lt;LendingError as Into&lt;u32&gt;&gt;::into(move _66)</td></tr></table>>];
    bb23__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_125 = const _<br/>_68 = &amp;(*_125)<br/></td></tr><tr><td align="left">_67 = &lt;LendingError as ToString&gt;::to_string(move _68)</td></tr></table>>];
    bb24__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = anchor_lang::error::Source { filename: const &quot;programs\\klend\\src\\lending_market\\lending_operations.rs&quot;, line: const 1929_u32 }<br/>_71 = anchor_lang::error::ErrorOrigin::Source(move _72)<br/>StorageDead(_72)<br/>_70 = std::option::Option::&lt;ErrorOrigin&gt;::Some(move _71)<br/>StorageDead(_71)<br/>StorageLive(_73)<br/>_73 = std::option::Option::&lt;ComparedValues&gt;::None<br/>_61 = anchor_lang::error::AnchorError { error_name: move _62, error_code_number: move _65, error_msg: move _67, error_origin: move _70, compared_values: move _73 }<br/>StorageDead(_73)<br/>StorageDead(_70)<br/>StorageDead(_67)<br/>StorageDead(_65)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_60 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _61)</td></tr></table>>];
    bb25__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>_128 = const false<br/></td></tr><tr><td align="left">_57 = std::option::Option::&lt;T&gt;::ok_or::&lt;anchor_lang::error::Error&gt;(move _58, move _60)</td></tr></table>>];
    bb26__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>_128 = const false<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">_56 = &lt;std::result::Result&lt;T, anchor_lang::error::Error&gt; as Try&gt;::branch(move _57)</td></tr></table>>];
    bb27__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>_74 = discriminant(_56)<br/></td></tr><tr><td align="left">switchInt(move _74)</td></tr></table>>];
    bb28__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_78)<br/>_78 = move ((_56 as Continue).0: T)<br/>_55 = move _78<br/>StorageDead(_78)<br/>_129 = discriminant(_56)<br/>StorageDead(_56)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>_84 = &amp;_55<br/></td></tr><tr><td align="left">_83 = &lt;T as account_loader_trait::AnyAccountLoader&lt;'_, referral::ReferrerTokenState&gt;&gt;::get_mut(move _84)</td></tr></table>>];
    bb29__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb30__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_75)<br/>_75 = move ((_56 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_77)<br/>_77 = move _75<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _77)</td></tr></table>>];
    bb31__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_75)<br/>_143 = discriminant(_56)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageLive(_85)<br/>_85 = {closure@programs\klend\src\lending_market\lending_operations.rs:1932:22: 1932:25}<br/></td></tr><tr><td align="left">_82 = std::result::Result::&lt;RefMut&lt;'_, referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:1932:22: 1932:25}&gt;(move _83, move _85)</td></tr></table>>];
    bb33__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = &lt;std::result::Result&lt;RefMut&lt;'_, referral::ReferrerTokenState&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _82)</td></tr></table>>];
    bb34__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>_86 = discriminant(_81)<br/></td></tr><tr><td align="left">switchInt(move _86)</td></tr></table>>];
    bb35__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_90)<br/>_90 = move ((_81 as Continue).0: std::cell::RefMut&lt;'_, state::referral::ReferrerTokenState&gt;)<br/>_80 = move _90<br/>StorageDead(_90)<br/>_79 = &amp;mut _80<br/>_131 = discriminant(_81)<br/>StorageDead(_81)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = &amp;(*_1)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = &amp;(*_79)<br/></td></tr><tr><td align="left">_96 = &lt;RefMut&lt;'_, referral::ReferrerTokenState&gt; as Deref&gt;::deref(move _97)</td></tr></table>>];
    bb36__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_87)<br/>_87 = move ((_81 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_89)<br/>_89 = move _87<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _89)</td></tr></table>>];
    bb37__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_87)<br/>_141 = discriminant(_81)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">_95 = &amp;(*_96)<br/>StorageDead(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>_99 = &amp;_55<br/></td></tr><tr><td align="left">_98 = &lt;T as account_loader_trait::AnyAccountLoader&lt;'_, referral::ReferrerTokenState&gt;&gt;::get_pubkey(move _99)</td></tr></table>>];
    bb39__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_99)<br/>StorageLive(_100)<br/>_100 = (((*_3).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_101)<br/>_101 = (*_4)<br/>StorageLive(_102)<br/>_102 = _2<br/></td></tr><tr><td align="left">_93 = lending_checks::validate_referrer_token_state(move _94, move _95, move _98, move _100, move _101, move _102)</td></tr></table>>];
    bb40__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageDead(_98)<br/>StorageDead(_95)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">_92 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _93)</td></tr></table>>];
    bb41__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>_103 = discriminant(_92)<br/></td></tr><tr><td align="left">switchInt(move _103)</td></tr></table>>];
    bb42__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_107)<br/>_107 = ((_92 as Continue).0: ())<br/>_91 = _107<br/>StorageDead(_107)<br/>_133 = discriminant(_92)<br/>StorageDead(_96)<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>_111 = &amp;mut (*_3)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>_114 = &amp;mut (*_79)<br/></td></tr><tr><td align="left">_113 = &lt;RefMut&lt;'_, referral::ReferrerTokenState&gt; as DerefMut&gt;::deref_mut(move _114)</td></tr></table>>];
    bb43__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_104)<br/>_104 = move ((_92 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_106)<br/>_106 = move _104<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _106)</td></tr></table>>];
    bb44__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>StorageDead(_104)<br/>_139 = discriminant(_92)<br/>StorageDead(_96)<br/>StorageDead(_92)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">_112 = &amp;mut (*_113)<br/>StorageDead(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>_116 = _45<br/></td></tr><tr><td align="left">_115 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as utils::fraction::FractionExtra&gt;::from_sf(move _116)</td></tr></table>>];
    bb46__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/></td></tr><tr><td align="left">_110 = add_referrer_fee(move _111, move _112, move _115)</td></tr></table>>];
    bb47__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/>StorageDead(_112)<br/>StorageDead(_111)<br/></td></tr><tr><td align="left">_109 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _110)</td></tr></table>>];
    bb48__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>_117 = discriminant(_109)<br/></td></tr><tr><td align="left">switchInt(move _117)</td></tr></table>>];
    bb49__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_121)<br/>_121 = ((_109 as Continue).0: ())<br/>_108 = _121<br/>StorageDead(_121)<br/>_135 = discriminant(_109)<br/>StorageDead(_113)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>_51 = const ()<br/></td></tr><tr><td align="left">drop(_80)</td></tr></table>>];
    bb50__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_118)<br/>_118 = move ((_109 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_120)<br/>_120 = move _118<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _120)</td></tr></table>>];
    bb51__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>StorageDead(_118)<br/>_137 = discriminant(_109)<br/>StorageDead(_113)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">drop(_55)</td></tr></table>>];
    bb53__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>_122 = _45<br/>_123 = CheckedAdd((((*_3).5: state::reserve::ReserveLiquidity).11: u128), _122)<br/></td></tr><tr><td align="left">assert(!move (_123.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, (((*_3).5: state::reserve::ReserveLiquidity).11: u128), move _122)</td></tr></table>>];
    bb56__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">(((*_3).5: state::reserve::ReserveLiquidity).11: u128) = move (_123.0: u128)<br/>StorageDead(_122)<br/>_51 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageLive(_124)<br/>_124 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _124)<br/>StorageDead(_124)<br/>StorageDead(_45)<br/>StorageDead(_42)<br/>StorageDead(_39)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_20)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left">drop(_80)</td></tr></table>>];
    bb59__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">drop(_55)</td></tr></table>>];
    bb60__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageDead(_45)<br/>StorageDead(_42)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left">return</td></tr></table>>];
    bb64__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">64 (cleanup)</td></tr><tr><td align="left">drop(_80)</td></tr></table>>];
    bb65__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">65 (cleanup)</td></tr><tr><td align="left">drop(_55)</td></tr></table>>];
    bb66__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">66 (cleanup)</td></tr><tr><td align="left">drop(_62)</td></tr></table>>];
    bb67__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">67 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb68__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">68 (cleanup)</td></tr><tr><td align="left" balign="left">_145 = discriminant(_109)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb69__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">69 (cleanup)</td></tr><tr><td align="left" balign="left">_146 = discriminant(_92)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">70 (cleanup)</td></tr><tr><td align="left" balign="left">_147 = discriminant(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">71 (cleanup)</td></tr><tr><td align="left" balign="left">_148 = discriminant(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb72__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">72 (cleanup)</td></tr><tr><td align="left">drop(_58)</td></tr></table>>];
    bb73__0_1334 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">73 (cleanup)</td></tr><tr><td align="left">switchInt(_128)</td></tr></table>>];
    bb0__0_1334 -> bb1__0_1334 [label="return"];
    bb1__0_1334 -> bb2__0_1334 [label="return"];
    bb2__0_1334 -> bb4__0_1334 [label="0"];
    bb2__0_1334 -> bb3__0_1334 [label="otherwise"];
    bb3__0_1334 -> bb62__0_1334 [label=""];
    bb4__0_1334 -> bb5__0_1334 [label="return"];
    bb5__0_1334 -> bb6__0_1334 [label="return"];
    bb6__0_1334 -> bb7__0_1334 [label="return"];
    bb7__0_1334 -> bb8__0_1334 [label="return"];
    bb8__0_1334 -> bb9__0_1334 [label="return"];
    bb9__0_1334 -> bb10__0_1334 [label="return"];
    bb10__0_1334 -> bb13__0_1334 [label="0"];
    bb10__0_1334 -> bb11__0_1334 [label="otherwise"];
    bb11__0_1334 -> bb12__0_1334 [label="return"];
    bb12__0_1334 -> bb61__0_1334 [label=""];
    bb13__0_1334 -> bb14__0_1334 [label="return"];
    bb14__0_1334 -> bb15__0_1334 [label="return"];
    bb15__0_1334 -> bb16__0_1334 [label="return"];
    bb16__0_1334 -> bb17__0_1334 [label="return"];
    bb17__0_1334 -> bb18__0_1334 [label="success"];
    bb18__0_1334 -> bb55__0_1334 [label="0"];
    bb18__0_1334 -> bb19__0_1334 [label="otherwise"];
    bb19__0_1334 -> bb54__0_1334 [label="0"];
    bb19__0_1334 -> bb20__0_1334 [label="otherwise"];
    bb20__0_1334 -> bb21__0_1334 [label="return"];
    bb21__0_1334 -> bb22__0_1334 [label="return"];
    bb21__0_1334 -> bb73__0_1334 [label="unwind"];
    bb22__0_1334 -> bb23__0_1334 [label="return"];
    bb22__0_1334 -> bb66__0_1334 [label="unwind"];
    bb23__0_1334 -> bb24__0_1334 [label="return"];
    bb23__0_1334 -> bb66__0_1334 [label="unwind"];
    bb24__0_1334 -> bb25__0_1334 [label="return"];
    bb24__0_1334 -> bb73__0_1334 [label="unwind"];
    bb25__0_1334 -> bb26__0_1334 [label="return"];
    bb25__0_1334 -> bb73__0_1334 [label="unwind"];
    bb26__0_1334 -> bb27__0_1334 [label="return"];
    bb26__0_1334 -> bb67__0_1334 [label="unwind"];
    bb27__0_1334 -> bb28__0_1334 [label="0"];
    bb27__0_1334 -> bb30__0_1334 [label="1"];
    bb27__0_1334 -> bb29__0_1334 [label="otherwise"];
    bb28__0_1334 -> bb32__0_1334 [label="return"];
    bb28__0_1334 -> bb65__0_1334 [label="unwind"];
    bb30__0_1334 -> bb31__0_1334 [label="return"];
    bb30__0_1334 -> bb71__0_1334 [label="unwind"];
    bb31__0_1334 -> bb60__0_1334 [label=""];
    bb32__0_1334 -> bb33__0_1334 [label="return"];
    bb32__0_1334 -> bb65__0_1334 [label="unwind"];
    bb33__0_1334 -> bb34__0_1334 [label="return"];
    bb33__0_1334 -> bb65__0_1334 [label="unwind"];
    bb34__0_1334 -> bb35__0_1334 [label="0"];
    bb34__0_1334 -> bb36__0_1334 [label="1"];
    bb34__0_1334 -> bb29__0_1334 [label="otherwise"];
    bb35__0_1334 -> bb38__0_1334 [label="return"];
    bb35__0_1334 -> bb64__0_1334 [label="unwind"];
    bb36__0_1334 -> bb37__0_1334 [label="return"];
    bb36__0_1334 -> bb70__0_1334 [label="unwind"];
    bb37__0_1334 -> bb59__0_1334 [label=""];
    bb38__0_1334 -> bb39__0_1334 [label="return"];
    bb38__0_1334 -> bb64__0_1334 [label="unwind"];
    bb39__0_1334 -> bb40__0_1334 [label="return"];
    bb39__0_1334 -> bb64__0_1334 [label="unwind"];
    bb40__0_1334 -> bb41__0_1334 [label="return"];
    bb40__0_1334 -> bb64__0_1334 [label="unwind"];
    bb41__0_1334 -> bb42__0_1334 [label="0"];
    bb41__0_1334 -> bb43__0_1334 [label="1"];
    bb41__0_1334 -> bb29__0_1334 [label="otherwise"];
    bb42__0_1334 -> bb45__0_1334 [label="return"];
    bb42__0_1334 -> bb64__0_1334 [label="unwind"];
    bb43__0_1334 -> bb44__0_1334 [label="return"];
    bb43__0_1334 -> bb69__0_1334 [label="unwind"];
    bb44__0_1334 -> bb58__0_1334 [label=""];
    bb45__0_1334 -> bb46__0_1334 [label="return"];
    bb45__0_1334 -> bb64__0_1334 [label="unwind"];
    bb46__0_1334 -> bb47__0_1334 [label="return"];
    bb46__0_1334 -> bb64__0_1334 [label="unwind"];
    bb47__0_1334 -> bb48__0_1334 [label="return"];
    bb47__0_1334 -> bb64__0_1334 [label="unwind"];
    bb48__0_1334 -> bb49__0_1334 [label="0"];
    bb48__0_1334 -> bb50__0_1334 [label="1"];
    bb48__0_1334 -> bb29__0_1334 [label="otherwise"];
    bb49__0_1334 -> bb52__0_1334 [label="return"];
    bb49__0_1334 -> bb65__0_1334 [label="unwind"];
    bb50__0_1334 -> bb51__0_1334 [label="return"];
    bb50__0_1334 -> bb68__0_1334 [label="unwind"];
    bb51__0_1334 -> bb58__0_1334 [label=""];
    bb52__0_1334 -> bb53__0_1334 [label="return"];
    bb52__0_1334 -> bb67__0_1334 [label="unwind"];
    bb53__0_1334 -> bb57__0_1334 [label=""];
    bb54__0_1334 -> bb55__0_1334 [label=""];
    bb55__0_1334 -> bb56__0_1334 [label="success"];
    bb56__0_1334 -> bb57__0_1334 [label=""];
    bb57__0_1334 -> bb63__0_1334 [label=""];
    bb58__0_1334 -> bb59__0_1334 [label="return"];
    bb58__0_1334 -> bb65__0_1334 [label="unwind"];
    bb59__0_1334 -> bb60__0_1334 [label="return"];
    bb59__0_1334 -> bb67__0_1334 [label="unwind"];
    bb60__0_1334 -> bb61__0_1334 [label=""];
    bb61__0_1334 -> bb62__0_1334 [label=""];
    bb62__0_1334 -> bb63__0_1334 [label=""];
    bb64__0_1334 -> bb65__0_1334 [label="return"];
    bb65__0_1334 -> bb67__0_1334 [label="return"];
    bb66__0_1334 -> bb73__0_1334 [label="return"];
    bb68__0_1334 -> bb64__0_1334 [label=""];
    bb69__0_1334 -> bb64__0_1334 [label=""];
    bb70__0_1334 -> bb65__0_1334 [label=""];
    bb71__0_1334 -> bb67__0_1334 [label=""];
    bb72__0_1334 -> bb67__0_1334 [label="return"];
    bb73__0_1334 -> bb67__0_1334 [label="0"];
    bb73__0_1334 -> bb72__0_1334 [label="otherwise"];
}
