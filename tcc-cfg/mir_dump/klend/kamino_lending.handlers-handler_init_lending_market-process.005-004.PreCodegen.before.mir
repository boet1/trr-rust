// MIR for `handlers::handler_init_lending_market::process` before PreCodegen

fn handlers::handler_init_lending_market::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_init_lending_market::InitLendingMarket<'_>>, _2: [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug quote_currency => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _4: std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::lending_market::LendingMarket>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let _13: ();
    let mut _14: &mut state::lending_market::LendingMarket;
    let mut _15: &mut state::lending_market::LendingMarket;
    let mut _16: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _17: state::lending_market::InitLendingMarketParams;
    let mut _18: [u8; 32];
    let mut _19: anchor_lang::prelude::Pubkey;
    let mut _20: &anchor_lang::prelude::Signer<'_>;
    let mut _21: u8;
    let mut _22: ();
    let mut _23: &mut handlers::handler_init_lending_market::InitLendingMarket<'_>;
    let mut _24: &mut handlers::handler_init_lending_market::InitLendingMarket<'_>;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    scope 1 {
        debug lending_market => _3;
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _23 = deref_copy (_1.1: &mut handlers::handler_init_lending_market::InitLendingMarket<'_>);
        _7 = &((*_23).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load_init(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::lending_market::LendingMarket>);
        _4 = move _12;
        StorageDead(_12);
        _3 = &mut _4;
        _25 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut (*_3);
        _15 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _16) -> [return: bb7, unwind: bb12];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _27 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb11;
    }

    bb7: {
        _14 = &mut (*_15);
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        StorageLive(_20);
        _24 = deref_copy (_1.1: &mut handlers::handler_init_lending_market::InitLendingMarket<'_>);
        _20 = &((*_24).0: anchor_lang::prelude::Signer<'_>);
        _19 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _20) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = ((_1.3: handlers::handler_init_lending_market::InitLendingMarketBumps).0: u8);
        _17 = state::lending_market::InitLendingMarketParams { bump_seed: move _21, lending_market_owner: move _19, quote_currency: move _18 };
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        _13 = state::lending_market::LendingMarket::init(move _14, move _17) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_22);
        _22 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _22);
        StorageDead(_22);
        drop(_4) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        _29 = discriminant(_5);
        goto -> bb13;
    }
}
