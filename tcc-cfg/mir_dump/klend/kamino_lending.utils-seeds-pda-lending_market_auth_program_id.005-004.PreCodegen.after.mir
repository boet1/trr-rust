// MIR for `lending_market_auth_program_id` after PreCodegen

fn lending_market_auth_program_id(_1: &anchor_lang::prelude::Pubkey, _2: &anchor_lang::prelude::Pubkey) -> anchor_lang::prelude::Pubkey {
    debug program_id => _1;
    debug lending_market => _2;
    let mut _0: anchor_lang::prelude::Pubkey;
    let _3: anchor_lang::prelude::Pubkey;
    let _4: u8;
    let mut _5: (anchor_lang::prelude::Pubkey, u8);
    let mut _6: &[&[u8]];
    let mut _7: &[&[u8]; 2];
    let _8: &[&[u8]; 2];
    let _9: [&[u8]; 2];
    let mut _10: &[u8];
    let _11: &[u8];
    let mut _12: &[u8];
    let _13: &[u8];
    let mut _14: &anchor_lang::prelude::Pubkey;
    let mut _15: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug lending_market_authority => _3;
        debug _market_authority_bump => _4;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const _;
        _10 = &(*_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_2);
        _13 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = &(*_13);
        StorageDead(_14);
        _9 = [move _10, move _12];
        StorageDead(_12);
        StorageDead(_10);
        _8 = &_9;
        _7 = &(*_8);
        _6 = move _7 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_7);
        StorageLive(_15);
        _15 = &(*_1);
        _5 = anchor_lang::prelude::Pubkey::find_program_address(move _6, move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_6);
        StorageLive(_3);
        _3 = (_5.0: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        _4 = (_5.1: u8);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        _0 = _3;
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
