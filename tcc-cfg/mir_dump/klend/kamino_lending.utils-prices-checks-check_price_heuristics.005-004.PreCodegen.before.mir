// MIR for `check_price_heuristics` before PreCodegen

fn check_price_heuristics(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: &token_info::PriceHeuristic) -> std::result::Result<(), anchor_lang::error::Error> {
    debug token_price => _1;
    debug heuristic => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let _6: utils::prices::types::Price<u64>;
    let mut _7: u64;
    let mut _8: u32;
    let mut _9: std::result::Result<u32, std::num::TryFromIntError>;
    let mut _10: u64;
    let mut _12: utils::prices::types::Price<u64>;
    let mut _13: bool;
    let mut _14: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _16: !;
    let mut _17: anchor_lang::error::Error;
    let mut _18: anchor_lang::error::AnchorError;
    let mut _19: std::string::String;
    let mut _20: &LendingError;
    let _21: LendingError;
    let mut _22: u32;
    let mut _23: LendingError;
    let mut _24: std::string::String;
    let mut _25: &LendingError;
    let _26: LendingError;
    let mut _27: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _28: anchor_lang::error::ErrorOrigin;
    let mut _29: anchor_lang::error::Source;
    let mut _30: std::option::Option<anchor_lang::error::ComparedValues>;
    let _31: ();
    let mut _32: bool;
    let mut _33: u64;
    let _34: utils::prices::types::Price<u64>;
    let mut _35: u64;
    let mut _36: u32;
    let mut _37: std::result::Result<u32, std::num::TryFromIntError>;
    let mut _38: u64;
    let mut _40: utils::prices::types::Price<u64>;
    let mut _41: bool;
    let mut _42: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _43: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _44: !;
    let mut _45: anchor_lang::error::Error;
    let mut _46: anchor_lang::error::AnchorError;
    let mut _47: std::string::String;
    let mut _48: &LendingError;
    let _49: LendingError;
    let mut _50: u32;
    let mut _51: LendingError;
    let mut _52: std::string::String;
    let mut _53: &LendingError;
    let _54: LendingError;
    let mut _55: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _56: anchor_lang::error::ErrorOrigin;
    let mut _57: anchor_lang::error::Source;
    let mut _58: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _59: ();
    scope 1 {
        debug lower_heuristic => _6;
        let _11: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug lower_heuristic => _11;
            let mut _60: &LendingError;
            let mut _61: &LendingError;
        }
    }
    scope 3 {
        debug upper_heuristic => _34;
        let _39: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 4 {
            debug upper_heuristic => _39;
            let mut _62: &LendingError;
            let mut _63: &LendingError;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_2).0: u64);
        _4 = Gt(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb12, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_2).0: u64);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_2).2: u64);
        _9 = <u64 as TryInto<u32>>::try_into(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _8 = std::result::Result::<u32, TryFromIntError>::unwrap(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _6 = prices::types::Price::<u64> { value: move _7, exp: move _8 };
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _6;
        _11 = price_to_fraction::<u64>(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &_1;
        StorageLive(_15);
        _15 = &_11;
        _13 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _14, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _13) -> [0: bb11, otherwise: bb6];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _61 = const _;
        _20 = &(*_61);
        _19 = LendingError::name(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = LendingError::PriceIsLowerThanHeuristic;
        _22 = <LendingError as Into<u32>>::into(move _23) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _60 = const _;
        _25 = &(*_60);
        _24 = <LendingError as ToString>::to_string(move _25) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\checks.rs", line: const 153_u32 };
        _28 = anchor_lang::error::ErrorOrigin::Source(move _29);
        StorageDead(_29);
        _27 = std::option::Option::<ErrorOrigin>::Some(move _28);
        StorageDead(_28);
        StorageLive(_30);
        _30 = std::option::Option::<ComparedValues>::None;
        _18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 };
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        _17 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _18) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        StorageDead(_18);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _17);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb11: {
        StorageDead(_15);
        StorageDead(_14);
        _3 = const ();
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_5);
        _3 = const ();
        goto -> bb13;
    }

    bb13: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = ((*_2).1: u64);
        _32 = Gt(move _33, const 0_u64);
        switchInt(move _32) -> [0: bb25, otherwise: bb14];
    }

    bb14: {
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = ((*_2).1: u64);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = ((*_2).2: u64);
        _37 = <u64 as TryInto<u32>>::try_into(move _38) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_38);
        _36 = std::result::Result::<u32, TryFromIntError>::unwrap(move _37) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_37);
        _34 = prices::types::Price::<u64> { value: move _35, exp: move _36 };
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _34;
        _39 = price_to_fraction::<u64>(move _40) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_39;
        StorageLive(_43);
        _43 = &_1;
        _41 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _42, move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        switchInt(move _41) -> [0: bb24, otherwise: bb19];
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _63 = const _;
        _48 = &(*_63);
        _47 = LendingError::name(move _48) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        _51 = LendingError::PriceIsBiggerThanHeuristic;
        _50 = <LendingError as Into<u32>>::into(move _51) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _62 = const _;
        _53 = &(*_62);
        _52 = <LendingError as ToString>::to_string(move _53) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\checks.rs", line: const 166_u32 };
        _56 = anchor_lang::error::ErrorOrigin::Source(move _57);
        StorageDead(_57);
        _55 = std::option::Option::<ErrorOrigin>::Some(move _56);
        StorageDead(_56);
        StorageLive(_58);
        _58 = std::option::Option::<ComparedValues>::None;
        _46 = anchor_lang::error::AnchorError { error_name: move _47, error_code_number: move _50, error_msg: move _52, error_origin: move _55, compared_values: move _58 };
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_47);
        _45 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _46) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        StorageDead(_46);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _45);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb27;
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_42);
        _31 = const ();
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_33);
        _31 = const ();
        goto -> bb26;
    }

    bb26: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_59);
        _59 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _59);
        StorageDead(_59);
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_47) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_19) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}
