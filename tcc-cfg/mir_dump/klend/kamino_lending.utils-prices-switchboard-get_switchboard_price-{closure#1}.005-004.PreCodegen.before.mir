// MIR for `get_switchboard_price::{closure#1}` before PreCodegen

fn get_switchboard_price::{closure#1}(_1: &{closure@programs\klend\src\utils\prices\switchboard.rs:78:31: 78:38}) -> std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> {
    debug price_switchboard_desc_mantissa => ((*_1).0: u128);
    debug price_switchboard_desc_scale => ((*_1).1: u32);
    debug stdev_mantissa => ((*_1).2: u128);
    debug stdev_scale => ((*_1).3: u32);
    let mut _0: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: u128;
    let mut _6: u32;
    let mut _7: u128;
    let mut _8: u32;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: utils::prices::types::Price<u128>;
    let mut _15: u128;
    let mut _16: u32;
    let mut _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _18: utils::prices::types::Price<u128>;
    let mut _19: isize;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug base_price => _14;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).0: u128);
        StorageLive(_6);
        _6 = ((*_1).1: u32);
        StorageLive(_7);
        _7 = ((*_1).2: u128);
        StorageLive(_8);
        _8 = ((*_1).3: u32);
        _4 = validate_switchboard_confidence(move _5, move _6, move _7, move _8, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_4);
        _9 = discriminant(_3);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_3 as Continue).0: ());
        _2 = _13;
        StorageDead(_13);
        _19 = discriminant(_3);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).0: u128);
        StorageLive(_16);
        _16 = ((*_1).1: u32);
        _14 = prices::types::Price::<u128> { value: move _15, exp: move _16 };
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _14;
        _17 = price_to_fraction::<u128>(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _21 = discriminant(_3);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_18);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Ok(move _17);
        StorageDead(_17);
        StorageDead(_14);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _23 = discriminant(_3);
        goto -> bb9;
    }
}
