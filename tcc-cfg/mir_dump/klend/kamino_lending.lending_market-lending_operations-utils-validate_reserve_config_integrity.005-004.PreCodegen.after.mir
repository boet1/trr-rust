// MIR for `validate_reserve_config_integrity` after PreCodegen

fn validate_reserve_config_integrity(_1: &reserve::ReserveConfig, _2: &state::lending_market::LendingMarket, _3: anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug config => _1;
    debug market => _2;
    debug reserve_address => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &std::result::Result<state::reserve::ReserveStatus, num_enum::TryFromPrimitiveError<state::reserve::ReserveStatus>>;
    let _7: std::result::Result<state::reserve::ReserveStatus, num_enum::TryFromPrimitiveError<state::reserve::ReserveStatus>>;
    let mut _8: u8;
    let mut _9: !;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: anchor_lang::error::Error;
    let mut _14: anchor_lang::error::AnchorError;
    let mut _15: std::string::String;
    let mut _16: &LendingError;
    let _17: LendingError;
    let mut _18: u32;
    let mut _19: LendingError;
    let mut _20: std::string::String;
    let mut _21: &LendingError;
    let _22: LendingError;
    let mut _23: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _24: anchor_lang::error::ErrorOrigin;
    let mut _25: anchor_lang::error::Source;
    let mut _26: std::option::Option<anchor_lang::error::ComparedValues>;
    let _27: ();
    let mut _28: bool;
    let mut _29: u8;
    let mut _30: !;
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: anchor_lang::error::Error;
    let mut _35: anchor_lang::error::AnchorError;
    let mut _36: std::string::String;
    let mut _37: &LendingError;
    let _38: LendingError;
    let mut _39: u32;
    let mut _40: LendingError;
    let mut _41: std::string::String;
    let mut _42: &LendingError;
    let _43: LendingError;
    let mut _44: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _45: anchor_lang::error::ErrorOrigin;
    let mut _46: anchor_lang::error::Source;
    let mut _47: std::option::Option<anchor_lang::error::ComparedValues>;
    let _48: ();
    let mut _49: bool;
    let mut _50: u16;
    let mut _51: !;
    let _52: ();
    let mut _53: &str;
    let _54: &str;
    let mut _55: anchor_lang::error::Error;
    let mut _56: anchor_lang::error::AnchorError;
    let mut _57: std::string::String;
    let mut _58: &LendingError;
    let _59: LendingError;
    let mut _60: u32;
    let mut _61: LendingError;
    let mut _62: std::string::String;
    let mut _63: &LendingError;
    let _64: LendingError;
    let mut _65: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _66: anchor_lang::error::ErrorOrigin;
    let mut _67: anchor_lang::error::Source;
    let mut _68: std::option::Option<anchor_lang::error::ComparedValues>;
    let _69: ();
    let mut _70: bool;
    let mut _71: u8;
    let mut _72: u8;
    let mut _73: bool;
    let mut _74: u8;
    let mut _75: !;
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: anchor_lang::error::Error;
    let mut _80: anchor_lang::error::AnchorError;
    let mut _81: std::string::String;
    let mut _82: &LendingError;
    let _83: LendingError;
    let mut _84: u32;
    let mut _85: LendingError;
    let mut _86: std::string::String;
    let mut _87: &LendingError;
    let _88: LendingError;
    let mut _89: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _90: anchor_lang::error::ErrorOrigin;
    let mut _91: anchor_lang::error::Source;
    let mut _92: std::option::Option<anchor_lang::error::ComparedValues>;
    let _93: ();
    let mut _94: bool;
    let mut _95: u128;
    let mut _96: u64;
    let mut _97: !;
    let _98: ();
    let mut _99: &str;
    let _100: &str;
    let mut _101: anchor_lang::error::Error;
    let mut _102: anchor_lang::error::AnchorError;
    let mut _103: std::string::String;
    let mut _104: &LendingError;
    let _105: LendingError;
    let mut _106: u32;
    let mut _107: LendingError;
    let mut _108: std::string::String;
    let mut _109: &LendingError;
    let _110: LendingError;
    let mut _111: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _112: anchor_lang::error::ErrorOrigin;
    let mut _113: anchor_lang::error::Source;
    let mut _114: std::option::Option<anchor_lang::error::ComparedValues>;
    let _115: ();
    let mut _116: bool;
    let mut _117: u8;
    let mut _118: !;
    let _119: ();
    let mut _120: &str;
    let _121: &str;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::AnchorError;
    let mut _124: std::string::String;
    let mut _125: &LendingError;
    let _126: LendingError;
    let mut _127: u32;
    let mut _128: LendingError;
    let mut _129: std::string::String;
    let mut _130: &LendingError;
    let _131: LendingError;
    let mut _132: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _133: anchor_lang::error::ErrorOrigin;
    let mut _134: anchor_lang::error::Source;
    let mut _135: std::option::Option<anchor_lang::error::ComparedValues>;
    let _136: ();
    let mut _137: bool;
    let mut _138: u8;
    let mut _139: !;
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let mut _143: anchor_lang::error::Error;
    let mut _144: anchor_lang::error::AnchorError;
    let mut _145: std::string::String;
    let mut _146: &LendingError;
    let _147: LendingError;
    let mut _148: u32;
    let mut _149: LendingError;
    let mut _150: std::string::String;
    let mut _151: &LendingError;
    let _152: LendingError;
    let mut _153: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _154: anchor_lang::error::ErrorOrigin;
    let mut _155: anchor_lang::error::Source;
    let mut _156: std::option::Option<anchor_lang::error::ComparedValues>;
    let _157: ();
    let mut _158: bool;
    let mut _159: u8;
    let mut _160: !;
    let _161: ();
    let mut _162: &str;
    let _163: &str;
    let mut _164: anchor_lang::error::Error;
    let mut _165: anchor_lang::error::AnchorError;
    let mut _166: std::string::String;
    let mut _167: &LendingError;
    let _168: LendingError;
    let mut _169: u32;
    let mut _170: LendingError;
    let mut _171: std::string::String;
    let mut _172: &LendingError;
    let _173: LendingError;
    let mut _174: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _175: anchor_lang::error::ErrorOrigin;
    let mut _176: anchor_lang::error::Source;
    let mut _177: std::option::Option<anchor_lang::error::ComparedValues>;
    let _178: ();
    let mut _179: bool;
    let mut _180: &state::token_info::TokenInfo;
    let mut _181: !;
    let _182: ();
    let mut _183: &str;
    let _184: &str;
    let mut _185: anchor_lang::error::Error;
    let mut _186: anchor_lang::error::AnchorError;
    let mut _187: std::string::String;
    let mut _188: &LendingError;
    let _189: LendingError;
    let mut _190: u32;
    let mut _191: LendingError;
    let mut _192: std::string::String;
    let mut _193: &LendingError;
    let _194: LendingError;
    let mut _195: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _196: anchor_lang::error::ErrorOrigin;
    let mut _197: anchor_lang::error::Source;
    let mut _198: std::option::Option<anchor_lang::error::ComparedValues>;
    let _199: ();
    let mut _200: bool;
    let mut _201: &state::token_info::TokenInfo;
    let mut _202: !;
    let _203: ();
    let mut _204: &str;
    let _205: &str;
    let mut _206: anchor_lang::error::Error;
    let mut _207: anchor_lang::error::AnchorError;
    let mut _208: std::string::String;
    let mut _209: &LendingError;
    let _210: LendingError;
    let mut _211: u32;
    let mut _212: LendingError;
    let mut _213: std::string::String;
    let mut _214: &LendingError;
    let _215: LendingError;
    let mut _216: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _217: anchor_lang::error::ErrorOrigin;
    let mut _218: anchor_lang::error::Source;
    let mut _219: std::option::Option<anchor_lang::error::ComparedValues>;
    let _220: ();
    let mut _221: bool;
    let mut _222: u16;
    let mut _223: !;
    let _224: ();
    let mut _225: &str;
    let _226: &str;
    let mut _227: anchor_lang::error::Error;
    let mut _228: anchor_lang::error::AnchorError;
    let mut _229: std::string::String;
    let mut _230: &LendingError;
    let _231: LendingError;
    let mut _232: u32;
    let mut _233: LendingError;
    let mut _234: std::string::String;
    let mut _235: &LendingError;
    let _236: LendingError;
    let mut _237: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _238: anchor_lang::error::ErrorOrigin;
    let mut _239: anchor_lang::error::Source;
    let mut _240: std::option::Option<anchor_lang::error::ComparedValues>;
    let _241: ();
    let mut _242: bool;
    let mut _243: u16;
    let mut _244: u16;
    let mut _245: !;
    let _246: ();
    let mut _247: &str;
    let _248: &str;
    let mut _249: anchor_lang::error::Error;
    let mut _250: anchor_lang::error::AnchorError;
    let mut _251: std::string::String;
    let mut _252: &LendingError;
    let _253: LendingError;
    let mut _254: u32;
    let mut _255: LendingError;
    let mut _256: std::string::String;
    let mut _257: &LendingError;
    let _258: LendingError;
    let mut _259: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _260: anchor_lang::error::ErrorOrigin;
    let mut _261: anchor_lang::error::Source;
    let mut _262: std::option::Option<anchor_lang::error::ComparedValues>;
    let _263: ();
    let mut _264: bool;
    let mut _265: u64;
    let mut _266: !;
    let _267: ();
    let mut _268: &str;
    let _269: &str;
    let mut _270: anchor_lang::error::Error;
    let mut _271: anchor_lang::error::AnchorError;
    let mut _272: std::string::String;
    let mut _273: &LendingError;
    let _274: LendingError;
    let mut _275: u32;
    let mut _276: LendingError;
    let mut _277: std::string::String;
    let mut _278: &LendingError;
    let _279: LendingError;
    let mut _280: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _281: anchor_lang::error::ErrorOrigin;
    let mut _282: anchor_lang::error::Source;
    let mut _283: std::option::Option<anchor_lang::error::ComparedValues>;
    let _284: ();
    let mut _285: bool;
    let mut _286: &state::reserve::ReserveConfig;
    let _287: ();
    let mut _288: bool;
    let mut _289: u64;
    let mut _290: !;
    let _291: ();
    let mut _292: &str;
    let _293: &str;
    let mut _294: anchor_lang::error::Error;
    let mut _295: anchor_lang::error::AnchorError;
    let mut _296: std::string::String;
    let mut _297: &LendingError;
    let _298: LendingError;
    let mut _299: u32;
    let mut _300: LendingError;
    let mut _301: std::string::String;
    let mut _302: &LendingError;
    let _303: LendingError;
    let mut _304: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _305: anchor_lang::error::ErrorOrigin;
    let mut _306: anchor_lang::error::Source;
    let mut _307: std::option::Option<anchor_lang::error::ComparedValues>;
    let _308: ();
    let mut _309: bool;
    let mut _310: u64;
    let mut _311: !;
    let _312: ();
    let mut _313: &str;
    let _314: &str;
    let mut _315: anchor_lang::error::Error;
    let mut _316: anchor_lang::error::AnchorError;
    let mut _317: std::string::String;
    let mut _318: &LendingError;
    let _319: LendingError;
    let mut _320: u32;
    let mut _321: LendingError;
    let mut _322: std::string::String;
    let mut _323: &LendingError;
    let _324: LendingError;
    let mut _325: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _326: anchor_lang::error::ErrorOrigin;
    let mut _327: anchor_lang::error::Source;
    let mut _328: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _329: bool;
    let mut _330: u64;
    let mut _331: !;
    let _332: ();
    let mut _333: &str;
    let _334: &str;
    let mut _335: anchor_lang::error::Error;
    let mut _336: anchor_lang::error::AnchorError;
    let mut _337: std::string::String;
    let mut _338: &LendingError;
    let _339: LendingError;
    let mut _340: u32;
    let mut _341: LendingError;
    let mut _342: std::string::String;
    let mut _343: &LendingError;
    let _344: LendingError;
    let mut _345: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _346: anchor_lang::error::ErrorOrigin;
    let mut _347: anchor_lang::error::Source;
    let mut _348: std::option::Option<anchor_lang::error::ComparedValues>;
    let _349: ();
    let mut _350: bool;
    let mut _351: &state::reserve::AssetTier;
    let _352: state::reserve::AssetTier;
    let mut _353: &state::reserve::ReserveConfig;
    let mut _354: &state::reserve::AssetTier;
    let _355: state::reserve::AssetTier;
    let mut _356: bool;
    let mut _357: u8;
    let mut _358: bool;
    let mut _359: u8;
    let mut _360: !;
    let _361: ();
    let mut _362: &str;
    let _363: &str;
    let mut _364: anchor_lang::error::Error;
    let mut _365: LendingError;
    let _366: ();
    let mut _367: bool;
    let mut _368: &state::reserve::AssetTier;
    let _369: state::reserve::AssetTier;
    let mut _370: &state::reserve::ReserveConfig;
    let mut _371: &state::reserve::AssetTier;
    let _372: state::reserve::AssetTier;
    let mut _373: bool;
    let mut _374: u64;
    let mut _375: !;
    let _376: ();
    let mut _377: &str;
    let _378: &str;
    let mut _379: anchor_lang::error::Error;
    let mut _380: LendingError;
    let _381: ();
    let mut _382: bool;
    let mut _383: u64;
    let mut _384: bool;
    let mut _385: u64;
    let mut _386: u64;
    let mut _387: !;
    let _388: ();
    let mut _389: &str;
    let _390: &str;
    let mut _391: anchor_lang::error::Error;
    let mut _392: anchor_lang::error::AnchorError;
    let mut _393: std::string::String;
    let mut _394: &LendingError;
    let _395: LendingError;
    let mut _396: u32;
    let mut _397: LendingError;
    let mut _398: std::string::String;
    let mut _399: &LendingError;
    let _400: LendingError;
    let mut _401: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _402: anchor_lang::error::ErrorOrigin;
    let mut _403: anchor_lang::error::Source;
    let mut _404: std::option::Option<anchor_lang::error::ComparedValues>;
    let _405: ();
    let mut _406: std::array::IntoIter<u8, 20>;
    let mut _407: [u8; 20];
    let mut _408: std::array::IntoIter<u8, 20>;
    let mut _409: ();
    let _410: ();
    let mut _411: std::option::Option<u8>;
    let mut _412: &mut std::array::IntoIter<u8, 20>;
    let mut _413: &mut std::array::IntoIter<u8, 20>;
    let mut _414: isize;
    let mut _415: !;
    let mut _417: std::option::Option<&state::lending_market::ElevationGroup>;
    let mut _418: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&state::lending_market::ElevationGroup>>;
    let mut _419: std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error>;
    let mut _420: u8;
    let mut _421: &state::lending_market::LendingMarket;
    let mut _422: isize;
    let mut _424: !;
    let mut _425: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _427: isize;
    let _429: ();
    let mut _430: bool;
    let mut _431: &anchor_lang::prelude::Pubkey;
    let mut _432: &anchor_lang::prelude::Pubkey;
    let _433: anchor_lang::prelude::Pubkey;
    let mut _434: !;
    let _435: ();
    let mut _436: &str;
    let _437: &str;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::AnchorError;
    let mut _440: std::string::String;
    let mut _441: &LendingError;
    let _442: LendingError;
    let mut _443: u32;
    let mut _444: LendingError;
    let mut _445: std::string::String;
    let mut _446: &LendingError;
    let _447: LendingError;
    let mut _448: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _449: anchor_lang::error::ErrorOrigin;
    let mut _450: anchor_lang::error::Source;
    let mut _451: std::option::Option<anchor_lang::error::ComparedValues>;
    let _452: ();
    let mut _453: bool;
    let mut _454: &anchor_lang::prelude::Pubkey;
    let mut _455: &anchor_lang::prelude::Pubkey;
    let _456: ();
    let mut _457: bool;
    let mut _458: u16;
    let mut _459: u16;
    let mut _460: !;
    let _461: ();
    let mut _462: &str;
    let _463: &str;
    let mut _464: &std::string::String;
    let _465: &std::string::String;
    let _466: std::string::String;
    let mut _468: std::fmt::Arguments<'_>;
    let mut _469: &[&str];
    let mut _470: &[&str; 2];
    let _471: &[&str; 2];
    let _472: [&str; 2];
    let mut _473: &[core::fmt::rt::Argument<'_>];
    let mut _474: &[core::fmt::rt::Argument<'_>; 1];
    let _475: &[core::fmt::rt::Argument<'_>; 1];
    let _476: [core::fmt::rt::Argument<'_>; 1];
    let mut _477: core::fmt::rt::Argument<'_>;
    let mut _478: &u8;
    let _479: &u8;
    let mut _480: anchor_lang::error::Error;
    let mut _481: anchor_lang::error::AnchorError;
    let mut _482: std::string::String;
    let mut _483: &LendingError;
    let _484: LendingError;
    let mut _485: u32;
    let mut _486: LendingError;
    let mut _487: std::string::String;
    let mut _488: &LendingError;
    let _489: LendingError;
    let mut _490: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _491: anchor_lang::error::ErrorOrigin;
    let mut _492: anchor_lang::error::Source;
    let mut _493: std::option::Option<anchor_lang::error::ComparedValues>;
    let _494: ();
    let mut _495: bool;
    let mut _496: u8;
    let mut _497: u8;
    let mut _498: !;
    let _499: ();
    let mut _500: &str;
    let _501: &str;
    let mut _502: &std::string::String;
    let _503: &std::string::String;
    let _504: std::string::String;
    let mut _506: std::fmt::Arguments<'_>;
    let mut _507: &[&str];
    let mut _508: &[&str; 2];
    let _509: &[&str; 2];
    let _510: [&str; 2];
    let mut _511: &[core::fmt::rt::Argument<'_>];
    let mut _512: &[core::fmt::rt::Argument<'_>; 1];
    let _513: &[core::fmt::rt::Argument<'_>; 1];
    let _514: [core::fmt::rt::Argument<'_>; 1];
    let mut _515: core::fmt::rt::Argument<'_>;
    let mut _516: &u8;
    let _517: &u8;
    let mut _518: anchor_lang::error::Error;
    let mut _519: anchor_lang::error::AnchorError;
    let mut _520: std::string::String;
    let mut _521: &LendingError;
    let _522: LendingError;
    let mut _523: u32;
    let mut _524: LendingError;
    let mut _525: std::string::String;
    let mut _526: &LendingError;
    let _527: LendingError;
    let mut _528: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _529: anchor_lang::error::ErrorOrigin;
    let mut _530: anchor_lang::error::Source;
    let mut _531: std::option::Option<anchor_lang::error::ComparedValues>;
    let _532: ();
    let mut _533: bool;
    let mut _534: u8;
    let mut _535: u8;
    let mut _536: !;
    let _537: ();
    let mut _538: &str;
    let _539: &str;
    let mut _540: &std::string::String;
    let _541: &std::string::String;
    let _542: std::string::String;
    let mut _544: std::fmt::Arguments<'_>;
    let mut _545: &[&str];
    let mut _546: &[&str; 2];
    let _547: &[&str; 2];
    let _548: [&str; 2];
    let mut _549: &[core::fmt::rt::Argument<'_>];
    let mut _550: &[core::fmt::rt::Argument<'_>; 1];
    let _551: &[core::fmt::rt::Argument<'_>; 1];
    let _552: [core::fmt::rt::Argument<'_>; 1];
    let mut _553: core::fmt::rt::Argument<'_>;
    let mut _554: &u8;
    let _555: &u8;
    let mut _556: anchor_lang::error::Error;
    let mut _557: anchor_lang::error::AnchorError;
    let mut _558: std::string::String;
    let mut _559: &LendingError;
    let _560: LendingError;
    let mut _561: u32;
    let mut _562: LendingError;
    let mut _563: std::string::String;
    let mut _564: &LendingError;
    let _565: LendingError;
    let mut _566: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _567: anchor_lang::error::ErrorOrigin;
    let mut _568: anchor_lang::error::Source;
    let mut _569: std::option::Option<anchor_lang::error::ComparedValues>;
    let _570: ();
    let mut _571: bool;
    let mut _572: u8;
    let mut _573: u8;
    let mut _574: !;
    let _575: ();
    let mut _576: &str;
    let _577: &str;
    let mut _578: &std::string::String;
    let _579: &std::string::String;
    let _580: std::string::String;
    let mut _582: std::fmt::Arguments<'_>;
    let mut _583: &[&str];
    let mut _584: &[&str; 2];
    let _585: &[&str; 2];
    let _586: [&str; 2];
    let mut _587: &[core::fmt::rt::Argument<'_>];
    let mut _588: &[core::fmt::rt::Argument<'_>; 1];
    let _589: &[core::fmt::rt::Argument<'_>; 1];
    let _590: [core::fmt::rt::Argument<'_>; 1];
    let mut _591: core::fmt::rt::Argument<'_>;
    let mut _592: &u8;
    let _593: &u8;
    let mut _594: anchor_lang::error::Error;
    let mut _595: anchor_lang::error::AnchorError;
    let mut _596: std::string::String;
    let mut _597: &LendingError;
    let _598: LendingError;
    let mut _599: u32;
    let mut _600: LendingError;
    let mut _601: std::string::String;
    let mut _602: &LendingError;
    let _603: LendingError;
    let mut _604: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _605: anchor_lang::error::ErrorOrigin;
    let mut _606: anchor_lang::error::Source;
    let mut _607: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _608: bool;
    let mut _609: u8;
    let mut _610: !;
    let _611: ();
    let mut _612: &str;
    let _613: &str;
    let mut _614: &std::string::String;
    let _615: &std::string::String;
    let _616: std::string::String;
    let mut _618: std::fmt::Arguments<'_>;
    let mut _619: &[&str];
    let mut _620: &[&str; 2];
    let _621: &[&str; 2];
    let _622: [&str; 2];
    let mut _623: &[core::fmt::rt::Argument<'_>];
    let mut _624: &[core::fmt::rt::Argument<'_>; 1];
    let _625: &[core::fmt::rt::Argument<'_>; 1];
    let _626: [core::fmt::rt::Argument<'_>; 1];
    let mut _627: core::fmt::rt::Argument<'_>;
    let mut _628: &u8;
    let _629: &u8;
    let mut _630: anchor_lang::error::Error;
    let mut _631: anchor_lang::error::AnchorError;
    let mut _632: std::string::String;
    let mut _633: &LendingError;
    let _634: LendingError;
    let mut _635: u32;
    let mut _636: LendingError;
    let mut _637: std::string::String;
    let mut _638: &LendingError;
    let _639: LendingError;
    let mut _640: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _641: anchor_lang::error::ErrorOrigin;
    let mut _642: anchor_lang::error::Source;
    let mut _643: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _644: bool;
    let mut _645: u8;
    let mut _646: !;
    let _647: ();
    let mut _648: &str;
    let _649: &str;
    let mut _650: anchor_lang::error::Error;
    let mut _651: anchor_lang::error::AnchorError;
    let mut _652: std::string::String;
    let mut _653: &LendingError;
    let _654: LendingError;
    let mut _655: u32;
    let mut _656: LendingError;
    let mut _657: std::string::String;
    let mut _658: &LendingError;
    let _659: LendingError;
    let mut _660: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _661: anchor_lang::error::ErrorOrigin;
    let mut _662: anchor_lang::error::Source;
    let mut _663: std::option::Option<anchor_lang::error::ComparedValues>;
    let _664: ();
    let mut _665: bool;
    let mut _666: u8;
    let mut _667: !;
    let _668: ();
    let mut _669: &str;
    let _670: &str;
    let mut _671: anchor_lang::error::Error;
    let mut _672: anchor_lang::error::AnchorError;
    let mut _673: std::string::String;
    let mut _674: &LendingError;
    let _675: LendingError;
    let mut _676: u32;
    let mut _677: LendingError;
    let mut _678: std::string::String;
    let mut _679: &LendingError;
    let _680: LendingError;
    let mut _681: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _682: anchor_lang::error::ErrorOrigin;
    let mut _683: anchor_lang::error::Source;
    let mut _684: std::option::Option<anchor_lang::error::ComparedValues>;
    let _685: ();
    let mut _686: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _687: std::result::Result<(), anchor_lang::error::Error>;
    let mut _688: &utils::borrow_rate_curve::BorrowRateCurve;
    let mut _689: isize;
    let _690: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _691: !;
    let mut _692: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _693: ();
    let mut _694: ();
    let mut _695: &LendingError;
    let mut _696: &LendingError;
    let mut _697: &LendingError;
    let mut _698: &LendingError;
    let mut _699: &LendingError;
    let mut _700: &LendingError;
    let mut _701: &LendingError;
    let mut _702: &LendingError;
    let mut _703: &LendingError;
    let mut _704: &LendingError;
    let mut _705: &LendingError;
    let mut _706: &LendingError;
    let mut _707: &LendingError;
    let mut _708: &LendingError;
    let mut _709: &LendingError;
    let mut _710: &LendingError;
    let mut _711: &LendingError;
    let mut _712: &LendingError;
    let mut _713: &LendingError;
    let mut _714: &LendingError;
    let mut _715: &LendingError;
    let mut _716: &LendingError;
    let mut _717: &LendingError;
    let mut _718: &LendingError;
    let mut _719: &LendingError;
    let mut _720: &LendingError;
    let mut _721: &LendingError;
    let mut _722: &LendingError;
    let mut _723: &LendingError;
    let mut _724: &LendingError;
    let mut _744: &LendingError;
    let mut _745: &LendingError;
    let mut _746: &state::reserve::AssetTier;
    let mut _747: &state::reserve::AssetTier;
    let mut _748: &LendingError;
    let mut _749: &LendingError;
    let mut _750: &LendingError;
    let mut _751: &LendingError;
    let mut _752: bool;
    let mut _753: isize;
    let mut _754: isize;
    let mut _755: isize;
    let mut _756: isize;
    let mut _757: isize;
    let mut _758: isize;
    let mut _759: isize;
    let mut _760: isize;
    let mut _761: isize;
    let mut _762: isize;
    scope 1 {
        debug iter => _408;
        let _416: u8;
        scope 2 {
            debug elevation_group_id => _416;
            scope 3 {
                debug elevation_group => _428;
                let _423: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _426: std::option::Option<&state::lending_market::ElevationGroup>;
                let _428: &state::lending_market::ElevationGroup;
                let _467: std::string::String;
                let _505: std::string::String;
                let _543: std::string::String;
                let _581: std::string::String;
                let _617: std::string::String;
                let mut _725: &LendingError;
                let mut _726: &LendingError;
                let mut _727: &LendingError;
                let mut _728: &LendingError;
                let mut _729: &[&str; 2];
                let mut _730: &LendingError;
                let mut _731: &LendingError;
                let mut _732: &[&str; 2];
                let mut _733: &LendingError;
                let mut _734: &LendingError;
                let mut _735: &[&str; 2];
                let mut _736: &LendingError;
                let mut _737: &LendingError;
                let mut _738: &[&str; 2];
                let mut _739: &LendingError;
                let mut _740: &LendingError;
                let mut _741: &[&str; 2];
                let mut _742: &LendingError;
                let mut _743: &LendingError;
                scope 4 {
                    debug residual => _423;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => _426;
                    scope 7 {
                    }
                }
                scope 8 {
                    debug res => _467;
                }
                scope 9 {
                    debug res => _505;
                }
                scope 10 {
                    debug res => _543;
                }
                scope 11 {
                    debug res => _581;
                }
                scope 12 {
                    debug res => _617;
                }
            }
        }
    }
    scope 13 {
        debug residual => _690;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _693;
        scope 16 {
        }
    }

    bb0: {
        _752 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).0: u8);
        _7 = <reserve::ReserveStatus as TryFromPrimitive>::try_from_primitive(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        StorageDead(_8);
        _5 = std::result::Result::<reserve::ReserveStatus, TryFromPrimitiveError<reserve::ReserveStatus>>::is_err(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb9, otherwise: bb3];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = const "Invalid reserve status";
        _11 = &(*_12);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _696 = const _;
        _16 = &(*_696);
        _15 = LendingError::name(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = LendingError::InvalidConfig;
        _18 = <LendingError as Into<u32>>::into(move _19) -> [return: bb6, unwind: bb296];
    }

    bb6: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _695 = const _;
        _21 = &(*_695);
        _20 = <LendingError as ToString>::to_string(move _21) -> [return: bb7, unwind: bb296];
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3307_u32 };
        _24 = anchor_lang::error::ErrorOrigin::Source(move _25);
        StorageDead(_25);
        _23 = std::option::Option::<ErrorOrigin>::Some(move _24);
        StorageDead(_24);
        StorageLive(_26);
        _26 = std::option::Option::<ComparedValues>::None;
        _14 = anchor_lang::error::AnchorError { error_name: move _15, error_code_number: move _18, error_msg: move _20, error_origin: move _23, compared_values: move _26 };
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_15);
        _13 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _14) -> [return: bb8, unwind: bb297];
    }

    bb8: {
        StorageDead(_14);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _13);
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb265;
    }

    bb9: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).7: u8);
        _28 = Ge(move _29, const 100_u8);
        switchInt(move _28) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = const "Loan to value ratio must be in range [0, 100)";
        _32 = &(*_33);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb12, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_1).10: u16);
        _49 = Gt(move _50, const _);
        switchInt(move _49) -> [0: bb18, otherwise: bb17];
    }

    bb12: {
        StorageDead(_32);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _698 = const _;
        _37 = &(*_698);
        _36 = LendingError::name(move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = LendingError::InvalidConfig;
        _39 = <LendingError as Into<u32>>::into(move _40) -> [return: bb14, unwind: bb295];
    }

    bb14: {
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        _697 = const _;
        _42 = &(*_697);
        _41 = <LendingError as ToString>::to_string(move _42) -> [return: bb15, unwind: bb295];
    }

    bb15: {
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3311_u32 };
        _45 = anchor_lang::error::ErrorOrigin::Source(move _46);
        StorageDead(_46);
        _44 = std::option::Option::<ErrorOrigin>::Some(move _45);
        StorageDead(_45);
        StorageLive(_47);
        _47 = std::option::Option::<ComparedValues>::None;
        _35 = anchor_lang::error::AnchorError { error_name: move _36, error_code_number: move _39, error_msg: move _41, error_origin: move _44, compared_values: move _47 };
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_36);
        _34 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _35) -> [return: bb16, unwind: bb297];
    }

    bb16: {
        StorageDead(_35);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _34);
        StorageDead(_34);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb265;
    }

    bb17: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = const "Liquidation bonus must be in range [0, 100]";
        _53 = &(*_54);
        _52 = solana_program::log::sol_log(move _53) -> [return: bb19, unwind continue];
    }

    bb18: {
        StorageDead(_50);
        _48 = const ();
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = ((*_1).8: u8);
        StorageLive(_72);
        _72 = ((*_1).7: u8);
        _70 = Lt(move _71, move _72);
        switchInt(move _70) -> [0: bb25, otherwise: bb24];
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_54);
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _700 = const _;
        _58 = &(*_700);
        _57 = LendingError::name(move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        _61 = LendingError::InvalidConfig;
        _60 = <LendingError as Into<u32>>::into(move _61) -> [return: bb21, unwind: bb294];
    }

    bb21: {
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        _699 = const _;
        _63 = &(*_699);
        _62 = <LendingError as ToString>::to_string(move _63) -> [return: bb22, unwind: bb294];
    }

    bb22: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3315_u32 };
        _66 = anchor_lang::error::ErrorOrigin::Source(move _67);
        StorageDead(_67);
        _65 = std::option::Option::<ErrorOrigin>::Some(move _66);
        StorageDead(_66);
        StorageLive(_68);
        _68 = std::option::Option::<ComparedValues>::None;
        _56 = anchor_lang::error::AnchorError { error_name: move _57, error_code_number: move _60, error_msg: move _62, error_origin: move _65, compared_values: move _68 };
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_57);
        _55 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _56) -> [return: bb23, unwind: bb297];
    }

    bb23: {
        StorageDead(_56);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _55);
        StorageDead(_55);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb265;
    }

    bb24: {
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        _74 = ((*_1).8: u8);
        _73 = Gt(move _74, const 100_u8);
        switchInt(move _73) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_74);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = const "Liquidation threshold must be in range [LTV, 100]";
        _77 = &(*_78);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb28, unwind continue];
    }

    bb27: {
        StorageDead(_74);
        _69 = const ();
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = (((*_1).14: state::reserve::ReserveFees).0: u64);
        _95 = <u128 as From<u64>>::from(move _96) -> [return: bb33, unwind continue];
    }

    bb28: {
        StorageDead(_77);
        StorageDead(_78);
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _702 = const _;
        _82 = &(*_702);
        _81 = LendingError::name(move _82) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        _85 = LendingError::InvalidConfig;
        _84 = <LendingError as Into<u32>>::into(move _85) -> [return: bb30, unwind: bb293];
    }

    bb30: {
        StorageDead(_85);
        StorageLive(_86);
        StorageLive(_87);
        _701 = const _;
        _87 = &(*_701);
        _86 = <LendingError as ToString>::to_string(move _87) -> [return: bb31, unwind: bb293];
    }

    bb31: {
        StorageDead(_87);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3321_u32 };
        _90 = anchor_lang::error::ErrorOrigin::Source(move _91);
        StorageDead(_91);
        _89 = std::option::Option::<ErrorOrigin>::Some(move _90);
        StorageDead(_90);
        StorageLive(_92);
        _92 = std::option::Option::<ComparedValues>::None;
        _80 = anchor_lang::error::AnchorError { error_name: move _81, error_code_number: move _84, error_msg: move _86, error_origin: move _89, compared_values: move _92 };
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_81);
        _79 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _80) -> [return: bb32, unwind: bb297];
    }

    bb32: {
        StorageDead(_80);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _79);
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb265;
    }

    bb33: {
        StorageDead(_96);
        _94 = Ge(move _95, const _);
        switchInt(move _94) -> [0: bb40, otherwise: bb34];
    }

    bb34: {
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = const "Borrow fee must be in range [0, 100%)";
        _99 = &(*_100);
        _98 = solana_program::log::sol_log(move _99) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_99);
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _704 = const _;
        _104 = &(*_704);
        _103 = LendingError::name(move _104) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        _107 = LendingError::InvalidConfig;
        _106 = <LendingError as Into<u32>>::into(move _107) -> [return: bb37, unwind: bb292];
    }

    bb37: {
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        _703 = const _;
        _109 = &(*_703);
        _108 = <LendingError as ToString>::to_string(move _109) -> [return: bb38, unwind: bb292];
    }

    bb38: {
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3325_u32 };
        _112 = anchor_lang::error::ErrorOrigin::Source(move _113);
        StorageDead(_113);
        _111 = std::option::Option::<ErrorOrigin>::Some(move _112);
        StorageDead(_112);
        StorageLive(_114);
        _114 = std::option::Option::<ComparedValues>::None;
        _102 = anchor_lang::error::AnchorError { error_name: move _103, error_code_number: move _106, error_msg: move _108, error_origin: move _111, compared_values: move _114 };
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_103);
        _101 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _102) -> [return: bb39, unwind: bb297];
    }

    bb39: {
        StorageDead(_102);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _101);
        StorageDead(_101);
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb265;
    }

    bb40: {
        StorageDead(_95);
        _93 = const ();
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = ((*_1).6: u8);
        _116 = Gt(move _117, const 100_u8);
        switchInt(move _116) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_117);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = const "Protocol liquidation fee must be in range [0, 100]";
        _120 = &(*_121);
        _119 = solana_program::log::sol_log(move _120) -> [return: bb43, unwind continue];
    }

    bb42: {
        StorageDead(_117);
        _115 = const ();
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = ((*_1).4: u8);
        _137 = Gt(move _138, const 100_u8);
        switchInt(move _137) -> [0: bb49, otherwise: bb48];
    }

    bb43: {
        StorageDead(_120);
        StorageDead(_121);
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _706 = const _;
        _125 = &(*_706);
        _124 = LendingError::name(move _125) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        _128 = LendingError::InvalidConfig;
        _127 = <LendingError as Into<u32>>::into(move _128) -> [return: bb45, unwind: bb291];
    }

    bb45: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _705 = const _;
        _130 = &(*_705);
        _129 = <LendingError as ToString>::to_string(move _130) -> [return: bb46, unwind: bb291];
    }

    bb46: {
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3329_u32 };
        _133 = anchor_lang::error::ErrorOrigin::Source(move _134);
        StorageDead(_134);
        _132 = std::option::Option::<ErrorOrigin>::Some(move _133);
        StorageDead(_133);
        StorageLive(_135);
        _135 = std::option::Option::<ComparedValues>::None;
        _123 = anchor_lang::error::AnchorError { error_name: move _124, error_code_number: move _127, error_msg: move _129, error_origin: move _132, compared_values: move _135 };
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_124);
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _123) -> [return: bb47, unwind: bb297];
    }

    bb47: {
        StorageDead(_123);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _122);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb265;
    }

    bb48: {
        StorageDead(_138);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = const "Protocol order execution fee must be in range [0, 100]";
        _141 = &(*_142);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb50, unwind continue];
    }

    bb49: {
        StorageDead(_138);
        _136 = const ();
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = ((*_1).5: u8);
        _158 = Gt(move _159, const 100_u8);
        switchInt(move _158) -> [0: bb56, otherwise: bb55];
    }

    bb50: {
        StorageDead(_141);
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _708 = const _;
        _146 = &(*_708);
        _145 = LendingError::name(move _146) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        _149 = LendingError::InvalidConfig;
        _148 = <LendingError as Into<u32>>::into(move _149) -> [return: bb52, unwind: bb290];
    }

    bb52: {
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        _707 = const _;
        _151 = &(*_707);
        _150 = <LendingError as ToString>::to_string(move _151) -> [return: bb53, unwind: bb290];
    }

    bb53: {
        StorageDead(_151);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3333_u32 };
        _154 = anchor_lang::error::ErrorOrigin::Source(move _155);
        StorageDead(_155);
        _153 = std::option::Option::<ErrorOrigin>::Some(move _154);
        StorageDead(_154);
        StorageLive(_156);
        _156 = std::option::Option::<ComparedValues>::None;
        _144 = anchor_lang::error::AnchorError { error_name: move _145, error_code_number: move _148, error_msg: move _150, error_origin: move _153, compared_values: move _156 };
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_145);
        _143 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _144) -> [return: bb54, unwind: bb297];
    }

    bb54: {
        StorageDead(_144);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _143);
        StorageDead(_143);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb265;
    }

    bb55: {
        StorageDead(_159);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = const "Protocol take rate must be in range [0, 100]";
        _162 = &(*_163);
        _161 = solana_program::log::sol_log(move _162) -> [return: bb57, unwind continue];
    }

    bb56: {
        StorageDead(_159);
        _157 = const ();
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &((*_1).19: state::token_info::TokenInfo);
        _179 = token_info::TokenInfo::is_valid(move _180) -> [return: bb62, unwind continue];
    }

    bb57: {
        StorageDead(_162);
        StorageDead(_163);
        StorageDead(_161);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _710 = const _;
        _167 = &(*_710);
        _166 = LendingError::name(move _167) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_167);
        StorageLive(_169);
        StorageLive(_170);
        _170 = LendingError::InvalidConfig;
        _169 = <LendingError as Into<u32>>::into(move _170) -> [return: bb59, unwind: bb289];
    }

    bb59: {
        StorageDead(_170);
        StorageLive(_171);
        StorageLive(_172);
        _709 = const _;
        _172 = &(*_709);
        _171 = <LendingError as ToString>::to_string(move _172) -> [return: bb60, unwind: bb289];
    }

    bb60: {
        StorageDead(_172);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3337_u32 };
        _175 = anchor_lang::error::ErrorOrigin::Source(move _176);
        StorageDead(_176);
        _174 = std::option::Option::<ErrorOrigin>::Some(move _175);
        StorageDead(_175);
        StorageLive(_177);
        _177 = std::option::Option::<ComparedValues>::None;
        _165 = anchor_lang::error::AnchorError { error_name: move _166, error_code_number: move _169, error_msg: move _171, error_origin: move _174, compared_values: move _177 };
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_169);
        StorageDead(_166);
        _164 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _165) -> [return: bb61, unwind: bb297];
    }

    bb61: {
        StorageDead(_165);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _164);
        StorageDead(_164);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb265;
    }

    bb62: {
        switchInt(move _179) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        StorageDead(_180);
        _178 = const ();
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &((*_1).19: state::token_info::TokenInfo);
        _200 = token_info::TokenInfo::is_twap_config_valid(move _201) -> [return: bb70, unwind continue];
    }

    bb64: {
        StorageDead(_180);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = const "Invalid reserve token info";
        _183 = &(*_184);
        _182 = solana_program::log::sol_log(move _183) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_183);
        StorageDead(_184);
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _751 = const _;
        _188 = &(*_751);
        _187 = LendingError::name(move _188) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_188);
        StorageLive(_190);
        StorageLive(_191);
        _191 = LendingError::InvalidOracleConfig;
        _190 = <LendingError as Into<u32>>::into(move _191) -> [return: bb67, unwind: bb288];
    }

    bb67: {
        StorageDead(_191);
        StorageLive(_192);
        StorageLive(_193);
        _750 = const _;
        _193 = &(*_750);
        _192 = <LendingError as ToString>::to_string(move _193) -> [return: bb68, unwind: bb288];
    }

    bb68: {
        StorageDead(_193);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3341_u32 };
        _196 = anchor_lang::error::ErrorOrigin::Source(move _197);
        StorageDead(_197);
        _195 = std::option::Option::<ErrorOrigin>::Some(move _196);
        StorageDead(_196);
        StorageLive(_198);
        _198 = std::option::Option::<ComparedValues>::None;
        _186 = anchor_lang::error::AnchorError { error_name: move _187, error_code_number: move _190, error_msg: move _192, error_origin: move _195, compared_values: move _198 };
        StorageDead(_198);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_187);
        _185 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _186) -> [return: bb69, unwind: bb297];
    }

    bb69: {
        StorageDead(_186);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _185);
        StorageDead(_185);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb265;
    }

    bb70: {
        switchInt(move _200) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        StorageDead(_201);
        _199 = const ();
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = ((*_1).11: u16);
        _221 = Ge(move _222, const 100_u16);
        switchInt(move _221) -> [0: bb79, otherwise: bb78];
    }

    bb72: {
        StorageDead(_201);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = const "Invalid reserve token twap config";
        _204 = &(*_205);
        _203 = solana_program::log::sol_log(move _204) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_204);
        StorageDead(_205);
        StorageDead(_203);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _749 = const _;
        _209 = &(*_749);
        _208 = LendingError::name(move _209) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_209);
        StorageLive(_211);
        StorageLive(_212);
        _212 = LendingError::InvalidTwapConfig;
        _211 = <LendingError as Into<u32>>::into(move _212) -> [return: bb75, unwind: bb287];
    }

    bb75: {
        StorageDead(_212);
        StorageLive(_213);
        StorageLive(_214);
        _748 = const _;
        _214 = &(*_748);
        _213 = <LendingError as ToString>::to_string(move _214) -> [return: bb76, unwind: bb287];
    }

    bb76: {
        StorageDead(_214);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3345_u32 };
        _217 = anchor_lang::error::ErrorOrigin::Source(move _218);
        StorageDead(_218);
        _216 = std::option::Option::<ErrorOrigin>::Some(move _217);
        StorageDead(_217);
        StorageLive(_219);
        _219 = std::option::Option::<ComparedValues>::None;
        _207 = anchor_lang::error::AnchorError { error_name: move _208, error_code_number: move _211, error_msg: move _213, error_origin: move _216, compared_values: move _219 };
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_208);
        _206 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _207) -> [return: bb77, unwind: bb297];
    }

    bb77: {
        StorageDead(_207);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _206);
        StorageDead(_206);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb265;
    }

    bb78: {
        StorageDead(_222);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = const "Invalid bad debt liquidation bonus, cannot be more than 1%";
        _225 = &(*_226);
        _224 = solana_program::log::sol_log(move _225) -> [return: bb80, unwind continue];
    }

    bb79: {
        StorageDead(_222);
        _220 = const ();
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = ((*_1).9: u16);
        StorageLive(_244);
        _244 = ((*_1).10: u16);
        _242 = Gt(move _243, move _244);
        switchInt(move _242) -> [0: bb86, otherwise: bb85];
    }

    bb80: {
        StorageDead(_225);
        StorageDead(_226);
        StorageDead(_224);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _712 = const _;
        _230 = &(*_712);
        _229 = LendingError::name(move _230) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_230);
        StorageLive(_232);
        StorageLive(_233);
        _233 = LendingError::InvalidConfig;
        _232 = <LendingError as Into<u32>>::into(move _233) -> [return: bb82, unwind: bb286];
    }

    bb82: {
        StorageDead(_233);
        StorageLive(_234);
        StorageLive(_235);
        _711 = const _;
        _235 = &(*_711);
        _234 = <LendingError as ToString>::to_string(move _235) -> [return: bb83, unwind: bb286];
    }

    bb83: {
        StorageDead(_235);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3350_u32 };
        _238 = anchor_lang::error::ErrorOrigin::Source(move _239);
        StorageDead(_239);
        _237 = std::option::Option::<ErrorOrigin>::Some(move _238);
        StorageDead(_238);
        StorageLive(_240);
        _240 = std::option::Option::<ComparedValues>::None;
        _228 = anchor_lang::error::AnchorError { error_name: move _229, error_code_number: move _232, error_msg: move _234, error_origin: move _237, compared_values: move _240 };
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_229);
        _227 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _228) -> [return: bb84, unwind: bb297];
    }

    bb84: {
        StorageDead(_228);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _227);
        StorageDead(_227);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb265;
    }

    bb85: {
        StorageDead(_244);
        StorageDead(_243);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = const "Invalid min liquidation bonus";
        _247 = &(*_248);
        _246 = solana_program::log::sol_log(move _247) -> [return: bb87, unwind continue];
    }

    bb86: {
        StorageDead(_244);
        StorageDead(_243);
        _241 = const ();
        StorageDead(_242);
        StorageDead(_241);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = ((*_1).16: u64);
        _264 = Lt(move _265, const 100_u64);
        switchInt(move _264) -> [0: bb93, otherwise: bb92];
    }

    bb87: {
        StorageDead(_247);
        StorageDead(_248);
        StorageDead(_246);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _714 = const _;
        _252 = &(*_714);
        _251 = LendingError::name(move _252) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_252);
        StorageLive(_254);
        StorageLive(_255);
        _255 = LendingError::InvalidConfig;
        _254 = <LendingError as Into<u32>>::into(move _255) -> [return: bb89, unwind: bb285];
    }

    bb89: {
        StorageDead(_255);
        StorageLive(_256);
        StorageLive(_257);
        _713 = const _;
        _257 = &(*_713);
        _256 = <LendingError as ToString>::to_string(move _257) -> [return: bb90, unwind: bb285];
    }

    bb90: {
        StorageDead(_257);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3354_u32 };
        _260 = anchor_lang::error::ErrorOrigin::Source(move _261);
        StorageDead(_261);
        _259 = std::option::Option::<ErrorOrigin>::Some(move _260);
        StorageDead(_260);
        StorageLive(_262);
        _262 = std::option::Option::<ComparedValues>::None;
        _250 = anchor_lang::error::AnchorError { error_name: move _251, error_code_number: move _254, error_msg: move _256, error_origin: move _259, compared_values: move _262 };
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_251);
        _249 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _250) -> [return: bb91, unwind: bb297];
    }

    bb91: {
        StorageDead(_250);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _249);
        StorageDead(_249);
        StorageDead(_242);
        StorageDead(_241);
        goto -> bb265;
    }

    bb92: {
        StorageDead(_265);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = const "Invalid borrow factor, it must be greater or equal to 100";
        _268 = &(*_269);
        _267 = solana_program::log::sol_log(move _268) -> [return: bb94, unwind continue];
    }

    bb93: {
        StorageDead(_265);
        _263 = const ();
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &(*_1);
        _285 = reserve::ReserveConfig::is_autodeleverage_enabled(move _286) -> [return: bb99, unwind continue];
    }

    bb94: {
        StorageDead(_268);
        StorageDead(_269);
        StorageDead(_267);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _716 = const _;
        _273 = &(*_716);
        _272 = LendingError::name(move _273) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_273);
        StorageLive(_275);
        StorageLive(_276);
        _276 = LendingError::InvalidConfig;
        _275 = <LendingError as Into<u32>>::into(move _276) -> [return: bb96, unwind: bb284];
    }

    bb96: {
        StorageDead(_276);
        StorageLive(_277);
        StorageLive(_278);
        _715 = const _;
        _278 = &(*_715);
        _277 = <LendingError as ToString>::to_string(move _278) -> [return: bb97, unwind: bb284];
    }

    bb97: {
        StorageDead(_278);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3358_u32 };
        _281 = anchor_lang::error::ErrorOrigin::Source(move _282);
        StorageDead(_282);
        _280 = std::option::Option::<ErrorOrigin>::Some(move _281);
        StorageDead(_281);
        StorageLive(_283);
        _283 = std::option::Option::<ComparedValues>::None;
        _271 = anchor_lang::error::AnchorError { error_name: move _272, error_code_number: move _275, error_msg: move _277, error_origin: move _280, compared_values: move _283 };
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_272);
        _270 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _271) -> [return: bb98, unwind: bb297];
    }

    bb98: {
        StorageDead(_271);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _270);
        StorageDead(_270);
        StorageDead(_264);
        StorageDead(_263);
        goto -> bb265;
    }

    bb99: {
        switchInt(move _285) -> [0: bb122, otherwise: bb100];
    }

    bb100: {
        StorageDead(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = ((*_1).12: u64);
        _288 = Eq(move _289, const 0_u64);
        switchInt(move _288) -> [0: bb107, otherwise: bb101];
    }

    bb101: {
        StorageDead(_289);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = const "Invalid deleveraging_margin_call_period_secs, must be greater than 0 when autodeleverage_enabled";
        _292 = &(*_293);
        _291 = solana_program::log::sol_log(move _292) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_292);
        StorageDead(_293);
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _718 = const _;
        _297 = &(*_718);
        _296 = LendingError::name(move _297) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_297);
        StorageLive(_299);
        StorageLive(_300);
        _300 = LendingError::InvalidConfig;
        _299 = <LendingError as Into<u32>>::into(move _300) -> [return: bb104, unwind: bb283];
    }

    bb104: {
        StorageDead(_300);
        StorageLive(_301);
        StorageLive(_302);
        _717 = const _;
        _302 = &(*_717);
        _301 = <LendingError as ToString>::to_string(move _302) -> [return: bb105, unwind: bb283];
    }

    bb105: {
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3363_u32 };
        _305 = anchor_lang::error::ErrorOrigin::Source(move _306);
        StorageDead(_306);
        _304 = std::option::Option::<ErrorOrigin>::Some(move _305);
        StorageDead(_305);
        StorageLive(_307);
        _307 = std::option::Option::<ComparedValues>::None;
        _295 = anchor_lang::error::AnchorError { error_name: move _296, error_code_number: move _299, error_msg: move _301, error_origin: move _304, compared_values: move _307 };
        StorageDead(_307);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_296);
        _294 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _295) -> [return: bb106, unwind: bb297];
    }

    bb106: {
        StorageDead(_295);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _294);
        StorageDead(_294);
        StorageDead(_288);
        StorageDead(_287);
        goto -> bb264;
    }

    bb107: {
        StorageDead(_289);
        _287 = const ();
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = ((*_1).13: u64);
        _309 = Eq(move _310, const 0_u64);
        switchInt(move _309) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        StorageDead(_310);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = const "Invalid deleveraging_threshold_decrease_bps_per_day, must be greater than 0 when autodeleverage_enabled";
        _313 = &(*_314);
        _312 = solana_program::log::sol_log(move _313) -> [return: bb110, unwind continue];
    }

    bb109: {
        StorageDead(_310);
        _308 = const ();
        StorageDead(_309);
        StorageDead(_308);
        StorageLive(_329);
        StorageLive(_330);
        _330 = ((*_1).29: u64);
        _329 = Eq(move _330, const 0_u64);
        switchInt(move _329) -> [0: bb116, otherwise: bb115];
    }

    bb110: {
        StorageDead(_313);
        StorageDead(_314);
        StorageDead(_312);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _720 = const _;
        _318 = &(*_720);
        _317 = LendingError::name(move _318) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_318);
        StorageLive(_320);
        StorageLive(_321);
        _321 = LendingError::InvalidConfig;
        _320 = <LendingError as Into<u32>>::into(move _321) -> [return: bb112, unwind: bb282];
    }

    bb112: {
        StorageDead(_321);
        StorageLive(_322);
        StorageLive(_323);
        _719 = const _;
        _323 = &(*_719);
        _322 = <LendingError as ToString>::to_string(move _323) -> [return: bb113, unwind: bb282];
    }

    bb113: {
        StorageDead(_323);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3367_u32 };
        _326 = anchor_lang::error::ErrorOrigin::Source(move _327);
        StorageDead(_327);
        _325 = std::option::Option::<ErrorOrigin>::Some(move _326);
        StorageDead(_326);
        StorageLive(_328);
        _328 = std::option::Option::<ComparedValues>::None;
        _316 = anchor_lang::error::AnchorError { error_name: move _317, error_code_number: move _320, error_msg: move _322, error_origin: move _325, compared_values: move _328 };
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_317);
        _315 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _316) -> [return: bb114, unwind: bb297];
    }

    bb114: {
        StorageDead(_316);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _315);
        StorageDead(_315);
        StorageDead(_309);
        StorageDead(_308);
        goto -> bb264;
    }

    bb115: {
        StorageDead(_330);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = const "Invalid deleveraging_bonus_increase_bps_per_day, must be greater than 0 when autodeleverage_enabled";
        _333 = &(*_334);
        _332 = solana_program::log::sol_log(move _333) -> [return: bb117, unwind continue];
    }

    bb116: {
        StorageDead(_330);
        _284 = const ();
        StorageDead(_329);
        goto -> bb123;
    }

    bb117: {
        StorageDead(_333);
        StorageDead(_334);
        StorageDead(_332);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _722 = const _;
        _338 = &(*_722);
        _337 = LendingError::name(move _338) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_338);
        StorageLive(_340);
        StorageLive(_341);
        _341 = LendingError::InvalidConfig;
        _340 = <LendingError as Into<u32>>::into(move _341) -> [return: bb119, unwind: bb281];
    }

    bb119: {
        StorageDead(_341);
        StorageLive(_342);
        StorageLive(_343);
        _721 = const _;
        _343 = &(*_721);
        _342 = <LendingError as ToString>::to_string(move _343) -> [return: bb120, unwind: bb281];
    }

    bb120: {
        StorageDead(_343);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3371_u32 };
        _346 = anchor_lang::error::ErrorOrigin::Source(move _347);
        StorageDead(_347);
        _345 = std::option::Option::<ErrorOrigin>::Some(move _346);
        StorageDead(_346);
        StorageLive(_348);
        _348 = std::option::Option::<ComparedValues>::None;
        _336 = anchor_lang::error::AnchorError { error_name: move _337, error_code_number: move _340, error_msg: move _342, error_origin: move _345, compared_values: move _348 };
        StorageDead(_348);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_337);
        _335 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _336) -> [return: bb121, unwind: bb297];
    }

    bb121: {
        StorageDead(_336);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _335);
        StorageDead(_335);
        StorageDead(_329);
        goto -> bb264;
    }

    bb122: {
        StorageDead(_286);
        _284 = const ();
        goto -> bb123;
    }

    bb123: {
        StorageDead(_285);
        StorageDead(_284);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &(*_1);
        _352 = reserve::ReserveConfig::get_asset_tier(move _353) -> [return: bb124, unwind continue];
    }

    bb124: {
        _351 = &_352;
        StorageDead(_353);
        StorageLive(_354);
        _747 = const _;
        _354 = &(*_747);
        _350 = <reserve::AssetTier as PartialEq>::eq(move _351, move _354) -> [return: bb125, unwind continue];
    }

    bb125: {
        switchInt(move _350) -> [0: bb134, otherwise: bb126];
    }

    bb126: {
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_351);
        StorageLive(_356);
        StorageLive(_357);
        _357 = ((*_1).7: u8);
        _356 = Eq(move _357, const 0_u8);
        switchInt(move _356) -> [0: bb130, otherwise: bb127];
    }

    bb127: {
        StorageDead(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = ((*_1).8: u8);
        _358 = Eq(move _359, const 0_u8);
        switchInt(move _358) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        StorageDead(_359);
        goto -> bb135;
    }

    bb129: {
        StorageDead(_359);
        goto -> bb131;
    }

    bb130: {
        StorageDead(_357);
        goto -> bb131;
    }

    bb131: {
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = const "LTV ratio and liquidation threshold must be 0 for isolated debt assets";
        _362 = &(*_363);
        _361 = solana_program::log::sol_log(move _362) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_362);
        StorageDead(_363);
        StorageDead(_361);
        StorageLive(_364);
        StorageLive(_365);
        _365 = LendingError::InvalidConfig;
        _364 = <LendingError as Into<anchor_lang::error::Error>>::into(move _365) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_365);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _364);
        StorageDead(_364);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_350);
        StorageDead(_349);
        goto -> bb265;
    }

    bb134: {
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_351);
        goto -> bb135;
    }

    bb135: {
        _349 = const ();
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_350);
        StorageDead(_349);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &(*_1);
        _369 = reserve::ReserveConfig::get_asset_tier(move _370) -> [return: bb136, unwind continue];
    }

    bb136: {
        _368 = &_369;
        StorageDead(_370);
        StorageLive(_371);
        _746 = const _;
        _371 = &(*_746);
        _367 = <reserve::AssetTier as PartialEq>::eq(move _368, move _371) -> [return: bb137, unwind continue];
    }

    bb137: {
        switchInt(move _367) -> [0: bb143, otherwise: bb138];
    }

    bb138: {
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_373);
        StorageLive(_374);
        _374 = ((*_1).18: u64);
        _373 = Ne(move _374, const 0_u64);
        switchInt(move _373) -> [0: bb142, otherwise: bb139];
    }

    bb139: {
        StorageDead(_374);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = const "Borrow limit must be 0 for isolated collateral assets";
        _377 = &(*_378);
        _376 = solana_program::log::sol_log(move _377) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_377);
        StorageDead(_378);
        StorageDead(_376);
        StorageLive(_379);
        StorageLive(_380);
        _380 = LendingError::InvalidConfig;
        _379 = <LendingError as Into<anchor_lang::error::Error>>::into(move _380) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_380);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _379);
        StorageDead(_379);
        StorageDead(_373);
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb265;
    }

    bb142: {
        StorageDead(_374);
        goto -> bb144;
    }

    bb143: {
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        goto -> bb144;
    }

    bb144: {
        _366 = const ();
        StorageDead(_373);
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = ((*_1).27: u64);
        _382 = Ne(move _383, const _);
        switchInt(move _382) -> [0: bb146, otherwise: bb145];
    }

    bb145: {
        StorageDead(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = ((*_1).18: u64);
        StorageLive(_386);
        _386 = ((*_1).27: u64);
        _384 = Lt(move _385, move _386);
        switchInt(move _384) -> [0: bb153, otherwise: bb147];
    }

    bb146: {
        StorageDead(_383);
        goto -> bb154;
    }

    bb147: {
        StorageDead(_386);
        StorageDead(_385);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = const "Invalid 'borrow limit', must be at least equal to 'borrow limit outside elevation group' when enabled";
        _389 = &(*_390);
        _388 = solana_program::log::sol_log(move _389) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_389);
        StorageDead(_390);
        StorageDead(_388);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        _724 = const _;
        _394 = &(*_724);
        _393 = LendingError::name(move _394) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_394);
        StorageLive(_396);
        StorageLive(_397);
        _397 = LendingError::InvalidConfig;
        _396 = <LendingError as Into<u32>>::into(move _397) -> [return: bb150, unwind: bb280];
    }

    bb150: {
        StorageDead(_397);
        StorageLive(_398);
        StorageLive(_399);
        _723 = const _;
        _399 = &(*_723);
        _398 = <LendingError as ToString>::to_string(move _399) -> [return: bb151, unwind: bb280];
    }

    bb151: {
        StorageDead(_399);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _403 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3388_u32 };
        _402 = anchor_lang::error::ErrorOrigin::Source(move _403);
        StorageDead(_403);
        _401 = std::option::Option::<ErrorOrigin>::Some(move _402);
        StorageDead(_402);
        StorageLive(_404);
        _404 = std::option::Option::<ComparedValues>::None;
        _392 = anchor_lang::error::AnchorError { error_name: move _393, error_code_number: move _396, error_msg: move _398, error_origin: move _401, compared_values: move _404 };
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_398);
        StorageDead(_396);
        StorageDead(_393);
        _391 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _392) -> [return: bb152, unwind: bb297];
    }

    bb152: {
        StorageDead(_392);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _391);
        StorageDead(_391);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_381);
        goto -> bb265;
    }

    bb153: {
        StorageDead(_386);
        StorageDead(_385);
        goto -> bb154;
    }

    bb154: {
        _381 = const ();
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_381);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = ((*_1).22: [u8; 20]);
        _406 = <[u8; 20] as IntoIterator>::into_iter(move _407) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_407);
        StorageLive(_408);
        _408 = move _406;
        goto -> bb156;
    }

    bb156: {
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &mut _408;
        _412 = &mut (*_413);
        _411 = <std::array::IntoIter<u8, 20> as Iterator>::next(move _412) -> [return: bb157, unwind: bb279];
    }

    bb157: {
        StorageDead(_412);
        _414 = discriminant(_411);
        switchInt(move _414) -> [0: bb160, 1: bb158, otherwise: bb159];
    }

    bb158: {
        StorageLive(_416);
        _416 = ((_411 as Some).0: u8);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = _416;
        StorageLive(_421);
        _421 = &(*_2);
        _419 = get_elevation_group(move _420, move _421) -> [return: bb161, unwind: bb279];
    }

    bb159: {
        unreachable;
    }

    bb160: {
        _405 = const ();
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_410);
        drop(_408) -> [return: bb248, unwind: bb297];
    }

    bb161: {
        StorageDead(_421);
        StorageDead(_420);
        _418 = <std::result::Result<std::option::Option<&state::lending_market::ElevationGroup>, anchor_lang::error::Error> as Try>::branch(move _419) -> [return: bb162, unwind: bb279];
    }

    bb162: {
        _752 = const true;
        StorageDead(_419);
        _422 = discriminant(_418);
        switchInt(move _422) -> [0: bb163, 1: bb164, otherwise: bb159];
    }

    bb163: {
        StorageLive(_426);
        _426 = ((_418 as Continue).0: std::option::Option<&state::lending_market::ElevationGroup>);
        _417 = _426;
        StorageDead(_426);
        _427 = discriminant(_417);
        switchInt(move _427) -> [1: bb167, otherwise: bb166];
    }

    bb164: {
        StorageLive(_423);
        _423 = move ((_418 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_425);
        _425 = move _423;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _425) -> [return: bb165, unwind: bb301];
    }

    bb165: {
        StorageDead(_425);
        StorageDead(_423);
        goto -> bb299;
    }

    bb166: {
        _410 = const ();
        goto -> bb298;
    }

    bb167: {
        StorageLive(_428);
        _428 = ((_417 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &((*_428).7: anchor_lang::prelude::Pubkey);
        StorageLive(_432);
        StorageLive(_433);
        _433 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb168, unwind: bb301];
    }

    bb168: {
        _432 = &_433;
        _430 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _431, move _432) -> [return: bb169, unwind: bb301];
    }

    bb169: {
        switchInt(move _430) -> [0: bb176, otherwise: bb170];
    }

    bb170: {
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _437 = const "Invalid elevation group debt reserve";
        _436 = &(*_437);
        _435 = solana_program::log::sol_log(move _436) -> [return: bb171, unwind: bb301];
    }

    bb171: {
        StorageDead(_436);
        StorageDead(_437);
        StorageDead(_435);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        _726 = const _;
        _441 = &(*_726);
        _440 = LendingError::name(move _441) -> [return: bb172, unwind: bb301];
    }

    bb172: {
        StorageDead(_441);
        StorageLive(_443);
        StorageLive(_444);
        _444 = LendingError::InvalidConfig;
        _443 = <LendingError as Into<u32>>::into(move _444) -> [return: bb173, unwind: bb278];
    }

    bb173: {
        StorageDead(_444);
        StorageLive(_445);
        StorageLive(_446);
        _725 = const _;
        _446 = &(*_725);
        _445 = <LendingError as ToString>::to_string(move _446) -> [return: bb174, unwind: bb278];
    }

    bb174: {
        StorageDead(_446);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _450 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3397_u32 };
        _449 = anchor_lang::error::ErrorOrigin::Source(move _450);
        StorageDead(_450);
        _448 = std::option::Option::<ErrorOrigin>::Some(move _449);
        StorageDead(_449);
        StorageLive(_451);
        _451 = std::option::Option::<ComparedValues>::None;
        _439 = anchor_lang::error::AnchorError { error_name: move _440, error_code_number: move _443, error_msg: move _445, error_origin: move _448, compared_values: move _451 };
        StorageDead(_451);
        StorageDead(_448);
        StorageDead(_445);
        StorageDead(_443);
        StorageDead(_440);
        _438 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _439) -> [return: bb175, unwind: bb301];
    }

    bb175: {
        StorageDead(_439);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _438);
        StorageDead(_438);
        StorageDead(_430);
        StorageDead(_429);
        goto -> bb262;
    }

    bb176: {
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_431);
        _429 = const ();
        StorageDead(_430);
        StorageDead(_429);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &((*_428).7: anchor_lang::prelude::Pubkey);
        StorageLive(_455);
        _455 = &_3;
        _453 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _454, move _455) -> [return: bb177, unwind: bb301];
    }

    bb177: {
        switchInt(move _453) -> [0: bb239, otherwise: bb178];
    }

    bb178: {
        StorageDead(_455);
        StorageDead(_454);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = ((*_428).0: u16);
        StorageLive(_459);
        _459 = ((*_1).10: u16);
        _457 = Gt(move _458, move _459);
        switchInt(move _457) -> [0: bb190, otherwise: bb179];
    }

    bb179: {
        StorageDead(_459);
        StorageDead(_458);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _729 = const _;
        _471 = &(*_729);
        _470 = &(*_471);
        _469 = move _470 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_470);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = &_416;
        _478 = &(*_479);
        _477 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _478) -> [return: bb180, unwind: bb301];
    }

    bb180: {
        StorageDead(_478);
        _476 = [move _477];
        StorageDead(_477);
        _475 = &_476;
        _474 = &(*_475);
        _473 = move _474 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_474);
        _468 = Arguments::<'_>::new_v1(move _469, move _473) -> [return: bb181, unwind: bb301];
    }

    bb181: {
        StorageDead(_473);
        StorageDead(_469);
        _467 = format(move _468) -> [return: bb182, unwind: bb301];
    }

    bb182: {
        StorageDead(_468);
        StorageDead(_479);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_471);
        _466 = move _467;
        StorageDead(_467);
        _465 = &_466;
        _464 = &(*_465);
        _463 = <std::string::String as Deref>::deref(move _464) -> [return: bb183, unwind: bb277];
    }

    bb183: {
        _462 = &(*_463);
        StorageDead(_464);
        _461 = solana_program::log::sol_log(move _462) -> [return: bb184, unwind: bb277];
    }

    bb184: {
        StorageDead(_462);
        drop(_466) -> [return: bb185, unwind: bb301];
    }

    bb185: {
        StorageDead(_466);
        StorageDead(_465);
        StorageDead(_463);
        StorageDead(_461);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        _728 = const _;
        _483 = &(*_728);
        _482 = LendingError::name(move _483) -> [return: bb186, unwind: bb301];
    }

    bb186: {
        StorageDead(_483);
        StorageLive(_485);
        StorageLive(_486);
        _486 = LendingError::InvalidConfig;
        _485 = <LendingError as Into<u32>>::into(move _486) -> [return: bb187, unwind: bb276];
    }

    bb187: {
        StorageDead(_486);
        StorageLive(_487);
        StorageLive(_488);
        _727 = const _;
        _488 = &(*_727);
        _487 = <LendingError as ToString>::to_string(move _488) -> [return: bb188, unwind: bb276];
    }

    bb188: {
        StorageDead(_488);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3404_u32 };
        _491 = anchor_lang::error::ErrorOrigin::Source(move _492);
        StorageDead(_492);
        _490 = std::option::Option::<ErrorOrigin>::Some(move _491);
        StorageDead(_491);
        StorageLive(_493);
        _493 = std::option::Option::<ComparedValues>::None;
        _481 = anchor_lang::error::AnchorError { error_name: move _482, error_code_number: move _485, error_msg: move _487, error_origin: move _490, compared_values: move _493 };
        StorageDead(_493);
        StorageDead(_490);
        StorageDead(_487);
        StorageDead(_485);
        StorageDead(_482);
        _480 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _481) -> [return: bb189, unwind: bb301];
    }

    bb189: {
        StorageDead(_481);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _480);
        StorageDead(_480);
        StorageDead(_457);
        StorageDead(_456);
        goto -> bb261;
    }

    bb190: {
        StorageDead(_459);
        StorageDead(_458);
        _456 = const ();
        StorageDead(_457);
        StorageDead(_456);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _496 = ((*_428).3: u8);
        StorageLive(_497);
        _497 = ((*_1).8: u8);
        _495 = Lt(move _496, move _497);
        switchInt(move _495) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        StorageDead(_497);
        StorageDead(_496);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _732 = const _;
        _509 = &(*_732);
        _508 = &(*_509);
        _507 = move _508 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_508);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        _517 = &_416;
        _516 = &(*_517);
        _515 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _516) -> [return: bb193, unwind: bb301];
    }

    bb192: {
        StorageDead(_497);
        StorageDead(_496);
        _494 = const ();
        StorageDead(_495);
        StorageDead(_494);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        _534 = ((*_428).2: u8);
        StorageLive(_535);
        _535 = ((*_1).7: u8);
        _533 = Lt(move _534, move _535);
        switchInt(move _533) -> [0: bb204, otherwise: bb203];
    }

    bb193: {
        StorageDead(_516);
        _514 = [move _515];
        StorageDead(_515);
        _513 = &_514;
        _512 = &(*_513);
        _511 = move _512 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_512);
        _506 = Arguments::<'_>::new_v1(move _507, move _511) -> [return: bb194, unwind: bb301];
    }

    bb194: {
        StorageDead(_511);
        StorageDead(_507);
        _505 = format(move _506) -> [return: bb195, unwind: bb301];
    }

    bb195: {
        StorageDead(_506);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_513);
        StorageDead(_509);
        _504 = move _505;
        StorageDead(_505);
        _503 = &_504;
        _502 = &(*_503);
        _501 = <std::string::String as Deref>::deref(move _502) -> [return: bb196, unwind: bb275];
    }

    bb196: {
        _500 = &(*_501);
        StorageDead(_502);
        _499 = solana_program::log::sol_log(move _500) -> [return: bb197, unwind: bb275];
    }

    bb197: {
        StorageDead(_500);
        drop(_504) -> [return: bb198, unwind: bb301];
    }

    bb198: {
        StorageDead(_504);
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_499);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        _731 = const _;
        _521 = &(*_731);
        _520 = LendingError::name(move _521) -> [return: bb199, unwind: bb301];
    }

    bb199: {
        StorageDead(_521);
        StorageLive(_523);
        StorageLive(_524);
        _524 = LendingError::InvalidConfig;
        _523 = <LendingError as Into<u32>>::into(move _524) -> [return: bb200, unwind: bb274];
    }

    bb200: {
        StorageDead(_524);
        StorageLive(_525);
        StorageLive(_526);
        _730 = const _;
        _526 = &(*_730);
        _525 = <LendingError as ToString>::to_string(move _526) -> [return: bb201, unwind: bb274];
    }

    bb201: {
        StorageDead(_526);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3410_u32 };
        _529 = anchor_lang::error::ErrorOrigin::Source(move _530);
        StorageDead(_530);
        _528 = std::option::Option::<ErrorOrigin>::Some(move _529);
        StorageDead(_529);
        StorageLive(_531);
        _531 = std::option::Option::<ComparedValues>::None;
        _519 = anchor_lang::error::AnchorError { error_name: move _520, error_code_number: move _523, error_msg: move _525, error_origin: move _528, compared_values: move _531 };
        StorageDead(_531);
        StorageDead(_528);
        StorageDead(_525);
        StorageDead(_523);
        StorageDead(_520);
        _518 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _519) -> [return: bb202, unwind: bb301];
    }

    bb202: {
        StorageDead(_519);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _518);
        StorageDead(_518);
        StorageDead(_495);
        StorageDead(_494);
        goto -> bb261;
    }

    bb203: {
        StorageDead(_535);
        StorageDead(_534);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        _735 = const _;
        _547 = &(*_735);
        _546 = &(*_547);
        _545 = move _546 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_546);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = &_416;
        _554 = &(*_555);
        _553 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _554) -> [return: bb205, unwind: bb301];
    }

    bb204: {
        StorageDead(_535);
        StorageDead(_534);
        _532 = const ();
        StorageDead(_533);
        StorageDead(_532);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = ((*_428).2: u8);
        StorageLive(_573);
        _573 = ((*_428).3: u8);
        _571 = Gt(move _572, move _573);
        switchInt(move _571) -> [0: bb216, otherwise: bb215];
    }

    bb205: {
        StorageDead(_554);
        _552 = [move _553];
        StorageDead(_553);
        _551 = &_552;
        _550 = &(*_551);
        _549 = move _550 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_550);
        _544 = Arguments::<'_>::new_v1(move _545, move _549) -> [return: bb206, unwind: bb301];
    }

    bb206: {
        StorageDead(_549);
        StorageDead(_545);
        _543 = format(move _544) -> [return: bb207, unwind: bb301];
    }

    bb207: {
        StorageDead(_544);
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_551);
        StorageDead(_547);
        _542 = move _543;
        StorageDead(_543);
        _541 = &_542;
        _540 = &(*_541);
        _539 = <std::string::String as Deref>::deref(move _540) -> [return: bb208, unwind: bb273];
    }

    bb208: {
        _538 = &(*_539);
        StorageDead(_540);
        _537 = solana_program::log::sol_log(move _538) -> [return: bb209, unwind: bb273];
    }

    bb209: {
        StorageDead(_538);
        drop(_542) -> [return: bb210, unwind: bb301];
    }

    bb210: {
        StorageDead(_542);
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_537);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _734 = const _;
        _559 = &(*_734);
        _558 = LendingError::name(move _559) -> [return: bb211, unwind: bb301];
    }

    bb211: {
        StorageDead(_559);
        StorageLive(_561);
        StorageLive(_562);
        _562 = LendingError::InvalidConfig;
        _561 = <LendingError as Into<u32>>::into(move _562) -> [return: bb212, unwind: bb272];
    }

    bb212: {
        StorageDead(_562);
        StorageLive(_563);
        StorageLive(_564);
        _733 = const _;
        _564 = &(*_733);
        _563 = <LendingError as ToString>::to_string(move _564) -> [return: bb213, unwind: bb272];
    }

    bb213: {
        StorageDead(_564);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3415_u32 };
        _567 = anchor_lang::error::ErrorOrigin::Source(move _568);
        StorageDead(_568);
        _566 = std::option::Option::<ErrorOrigin>::Some(move _567);
        StorageDead(_567);
        StorageLive(_569);
        _569 = std::option::Option::<ComparedValues>::None;
        _557 = anchor_lang::error::AnchorError { error_name: move _558, error_code_number: move _561, error_msg: move _563, error_origin: move _566, compared_values: move _569 };
        StorageDead(_569);
        StorageDead(_566);
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_558);
        _556 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _557) -> [return: bb214, unwind: bb301];
    }

    bb214: {
        StorageDead(_557);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _556);
        StorageDead(_556);
        StorageDead(_533);
        StorageDead(_532);
        goto -> bb261;
    }

    bb215: {
        StorageDead(_573);
        StorageDead(_572);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _738 = const _;
        _585 = &(*_738);
        _584 = &(*_585);
        _583 = move _584 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_584);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _593 = &_416;
        _592 = &(*_593);
        _591 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _592) -> [return: bb217, unwind: bb301];
    }

    bb216: {
        StorageDead(_573);
        StorageDead(_572);
        _570 = const ();
        StorageDead(_571);
        StorageDead(_570);
        StorageLive(_608);
        StorageLive(_609);
        _609 = ((*_428).3: u8);
        _608 = Gt(move _609, const 100_u8);
        switchInt(move _608) -> [0: bb228, otherwise: bb227];
    }

    bb217: {
        StorageDead(_592);
        _590 = [move _591];
        StorageDead(_591);
        _589 = &_590;
        _588 = &(*_589);
        _587 = move _588 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_588);
        _582 = Arguments::<'_>::new_v1(move _583, move _587) -> [return: bb218, unwind: bb301];
    }

    bb218: {
        StorageDead(_587);
        StorageDead(_583);
        _581 = format(move _582) -> [return: bb219, unwind: bb301];
    }

    bb219: {
        StorageDead(_582);
        StorageDead(_593);
        StorageDead(_590);
        StorageDead(_589);
        StorageDead(_585);
        _580 = move _581;
        StorageDead(_581);
        _579 = &_580;
        _578 = &(*_579);
        _577 = <std::string::String as Deref>::deref(move _578) -> [return: bb220, unwind: bb271];
    }

    bb220: {
        _576 = &(*_577);
        StorageDead(_578);
        _575 = solana_program::log::sol_log(move _576) -> [return: bb221, unwind: bb271];
    }

    bb221: {
        StorageDead(_576);
        drop(_580) -> [return: bb222, unwind: bb301];
    }

    bb222: {
        StorageDead(_580);
        StorageDead(_579);
        StorageDead(_577);
        StorageDead(_575);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        _737 = const _;
        _597 = &(*_737);
        _596 = LendingError::name(move _597) -> [return: bb223, unwind: bb301];
    }

    bb223: {
        StorageDead(_597);
        StorageLive(_599);
        StorageLive(_600);
        _600 = LendingError::InvalidConfig;
        _599 = <LendingError as Into<u32>>::into(move _600) -> [return: bb224, unwind: bb270];
    }

    bb224: {
        StorageDead(_600);
        StorageLive(_601);
        StorageLive(_602);
        _736 = const _;
        _602 = &(*_736);
        _601 = <LendingError as ToString>::to_string(move _602) -> [return: bb225, unwind: bb270];
    }

    bb225: {
        StorageDead(_602);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        _606 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3420_u32 };
        _605 = anchor_lang::error::ErrorOrigin::Source(move _606);
        StorageDead(_606);
        _604 = std::option::Option::<ErrorOrigin>::Some(move _605);
        StorageDead(_605);
        StorageLive(_607);
        _607 = std::option::Option::<ComparedValues>::None;
        _595 = anchor_lang::error::AnchorError { error_name: move _596, error_code_number: move _599, error_msg: move _601, error_origin: move _604, compared_values: move _607 };
        StorageDead(_607);
        StorageDead(_604);
        StorageDead(_601);
        StorageDead(_599);
        StorageDead(_596);
        _594 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _595) -> [return: bb226, unwind: bb301];
    }

    bb226: {
        StorageDead(_595);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _594);
        StorageDead(_594);
        StorageDead(_571);
        StorageDead(_570);
        goto -> bb261;
    }

    bb227: {
        StorageDead(_609);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        _741 = const _;
        _621 = &(*_741);
        _620 = &(*_621);
        _619 = move _620 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_620);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        _629 = &_416;
        _628 = &(*_629);
        _627 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _628) -> [return: bb229, unwind: bb301];
    }

    bb228: {
        StorageDead(_609);
        _452 = const ();
        StorageDead(_608);
        goto -> bb240;
    }

    bb229: {
        StorageDead(_628);
        _626 = [move _627];
        StorageDead(_627);
        _625 = &_626;
        _624 = &(*_625);
        _623 = move _624 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_624);
        _618 = Arguments::<'_>::new_v1(move _619, move _623) -> [return: bb230, unwind: bb301];
    }

    bb230: {
        StorageDead(_623);
        StorageDead(_619);
        _617 = format(move _618) -> [return: bb231, unwind: bb301];
    }

    bb231: {
        StorageDead(_618);
        StorageDead(_629);
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_621);
        _616 = move _617;
        StorageDead(_617);
        _615 = &_616;
        _614 = &(*_615);
        _613 = <std::string::String as Deref>::deref(move _614) -> [return: bb232, unwind: bb269];
    }

    bb232: {
        _612 = &(*_613);
        StorageDead(_614);
        _611 = solana_program::log::sol_log(move _612) -> [return: bb233, unwind: bb269];
    }

    bb233: {
        StorageDead(_612);
        drop(_616) -> [return: bb234, unwind: bb301];
    }

    bb234: {
        StorageDead(_616);
        StorageDead(_615);
        StorageDead(_613);
        StorageDead(_611);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        _740 = const _;
        _633 = &(*_740);
        _632 = LendingError::name(move _633) -> [return: bb235, unwind: bb301];
    }

    bb235: {
        StorageDead(_633);
        StorageLive(_635);
        StorageLive(_636);
        _636 = LendingError::InvalidConfig;
        _635 = <LendingError as Into<u32>>::into(move _636) -> [return: bb236, unwind: bb268];
    }

    bb236: {
        StorageDead(_636);
        StorageLive(_637);
        StorageLive(_638);
        _739 = const _;
        _638 = &(*_739);
        _637 = <LendingError as ToString>::to_string(move _638) -> [return: bb237, unwind: bb268];
    }

    bb237: {
        StorageDead(_638);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3425_u32 };
        _641 = anchor_lang::error::ErrorOrigin::Source(move _642);
        StorageDead(_642);
        _640 = std::option::Option::<ErrorOrigin>::Some(move _641);
        StorageDead(_641);
        StorageLive(_643);
        _643 = std::option::Option::<ComparedValues>::None;
        _631 = anchor_lang::error::AnchorError { error_name: move _632, error_code_number: move _635, error_msg: move _637, error_origin: move _640, compared_values: move _643 };
        StorageDead(_643);
        StorageDead(_640);
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_632);
        _630 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _631) -> [return: bb238, unwind: bb301];
    }

    bb238: {
        StorageDead(_631);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _630);
        StorageDead(_630);
        StorageDead(_608);
        goto -> bb261;
    }

    bb239: {
        StorageDead(_455);
        StorageDead(_454);
        _452 = const ();
        goto -> bb240;
    }

    bb240: {
        StorageDead(_453);
        StorageDead(_452);
        StorageLive(_644);
        StorageLive(_645);
        _645 = ((*_428).5: u8);
        _644 = Eq(move _645, const 0_u8);
        switchInt(move _644) -> [0: bb247, otherwise: bb241];
    }

    bb241: {
        StorageDead(_645);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = const "Invalid elevation group max collateral reserves";
        _648 = &(*_649);
        _647 = solana_program::log::sol_log(move _648) -> [return: bb242, unwind: bb301];
    }

    bb242: {
        StorageDead(_648);
        StorageDead(_649);
        StorageDead(_647);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        _743 = const _;
        _653 = &(*_743);
        _652 = LendingError::name(move _653) -> [return: bb243, unwind: bb301];
    }

    bb243: {
        StorageDead(_653);
        StorageLive(_655);
        StorageLive(_656);
        _656 = LendingError::InvalidConfig;
        _655 = <LendingError as Into<u32>>::into(move _656) -> [return: bb244, unwind: bb267];
    }

    bb244: {
        StorageDead(_656);
        StorageLive(_657);
        StorageLive(_658);
        _742 = const _;
        _658 = &(*_742);
        _657 = <LendingError as ToString>::to_string(move _658) -> [return: bb245, unwind: bb267];
    }

    bb245: {
        StorageDead(_658);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3431_u32 };
        _661 = anchor_lang::error::ErrorOrigin::Source(move _662);
        StorageDead(_662);
        _660 = std::option::Option::<ErrorOrigin>::Some(move _661);
        StorageDead(_661);
        StorageLive(_663);
        _663 = std::option::Option::<ComparedValues>::None;
        _651 = anchor_lang::error::AnchorError { error_name: move _652, error_code_number: move _655, error_msg: move _657, error_origin: move _660, compared_values: move _663 };
        StorageDead(_663);
        StorageDead(_660);
        StorageDead(_657);
        StorageDead(_655);
        StorageDead(_652);
        _650 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _651) -> [return: bb246, unwind: bb301];
    }

    bb246: {
        StorageDead(_651);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _650);
        StorageDead(_650);
        StorageDead(_644);
        goto -> bb262;
    }

    bb247: {
        StorageDead(_645);
        _410 = const ();
        StorageDead(_644);
        StorageDead(_428);
        goto -> bb298;
    }

    bb248: {
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_405);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        _666 = ((*_1).24: u8);
        _665 = Gt(move _666, const 100_u8);
        switchInt(move _665) -> [0: bb255, otherwise: bb249];
    }

    bb249: {
        StorageDead(_666);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        _670 = const "Utilization limit to block borrows above cannot be bigger than 100%";
        _669 = &(*_670);
        _668 = solana_program::log::sol_log(move _669) -> [return: bb250, unwind continue];
    }

    bb250: {
        StorageDead(_669);
        StorageDead(_670);
        StorageDead(_668);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        _745 = const _;
        _674 = &(*_745);
        _673 = LendingError::name(move _674) -> [return: bb251, unwind continue];
    }

    bb251: {
        StorageDead(_674);
        StorageLive(_676);
        StorageLive(_677);
        _677 = LendingError::InvalidConfig;
        _676 = <LendingError as Into<u32>>::into(move _677) -> [return: bb252, unwind: bb266];
    }

    bb252: {
        StorageDead(_677);
        StorageLive(_678);
        StorageLive(_679);
        _744 = const _;
        _679 = &(*_744);
        _678 = <LendingError as ToString>::to_string(move _679) -> [return: bb253, unwind: bb266];
    }

    bb253: {
        StorageDead(_679);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        _683 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3439_u32 };
        _682 = anchor_lang::error::ErrorOrigin::Source(move _683);
        StorageDead(_683);
        _681 = std::option::Option::<ErrorOrigin>::Some(move _682);
        StorageDead(_682);
        StorageLive(_684);
        _684 = std::option::Option::<ComparedValues>::None;
        _672 = anchor_lang::error::AnchorError { error_name: move _673, error_code_number: move _676, error_msg: move _678, error_origin: move _681, compared_values: move _684 };
        StorageDead(_684);
        StorageDead(_681);
        StorageDead(_678);
        StorageDead(_676);
        StorageDead(_673);
        _671 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _672) -> [return: bb254, unwind: bb297];
    }

    bb254: {
        StorageDead(_672);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _671);
        StorageDead(_671);
        StorageDead(_665);
        StorageDead(_664);
        goto -> bb265;
    }

    bb255: {
        StorageDead(_666);
        _664 = const ();
        StorageDead(_665);
        StorageDead(_664);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        _688 = &((*_1).15: utils::borrow_rate_curve::BorrowRateCurve);
        _687 = BorrowRateCurve::validate(move _688) -> [return: bb256, unwind continue];
    }

    bb256: {
        StorageDead(_688);
        _686 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _687) -> [return: bb257, unwind: bb297];
    }

    bb257: {
        StorageDead(_687);
        _689 = discriminant(_686);
        switchInt(move _689) -> [0: bb258, 1: bb259, otherwise: bb159];
    }

    bb258: {
        StorageLive(_693);
        _693 = ((_686 as Continue).0: ());
        _685 = _693;
        StorageDead(_693);
        _755 = discriminant(_686);
        StorageDead(_686);
        StorageDead(_685);
        StorageLive(_694);
        _694 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _694);
        StorageDead(_694);
        goto -> bb265;
    }

    bb259: {
        StorageLive(_690);
        _690 = move ((_686 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_692);
        _692 = move _690;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _692) -> [return: bb260, unwind: bb300];
    }

    bb260: {
        StorageDead(_692);
        StorageDead(_690);
        _757 = discriminant(_686);
        StorageDead(_686);
        StorageDead(_685);
        goto -> bb265;
    }

    bb261: {
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb262;
    }

    bb262: {
        StorageDead(_428);
        goto -> bb299;
    }

    bb263: {
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_405);
        goto -> bb265;
    }

    bb264: {
        StorageDead(_285);
        StorageDead(_284);
        goto -> bb265;
    }

    bb265: {
        return;
    }

    bb266 (cleanup): {
        drop(_673) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_652) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_632) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        drop(_616) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        drop(_596) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_580) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_558) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_542) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_520) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_504) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_482) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_466) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        drop(_440) -> [return: bb301, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        drop(_408) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        drop(_393) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        drop(_337) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        drop(_317) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb283 (cleanup): {
        drop(_296) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb284 (cleanup): {
        drop(_272) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb285 (cleanup): {
        drop(_251) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb286 (cleanup): {
        drop(_229) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb287 (cleanup): {
        drop(_208) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb288 (cleanup): {
        drop(_187) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb289 (cleanup): {
        drop(_166) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        drop(_145) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb291 (cleanup): {
        drop(_124) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        drop(_103) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        drop(_81) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        drop(_57) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        drop(_36) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb296 (cleanup): {
        drop(_15) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb297 (cleanup): {
        resume;
    }

    bb298: {
        _753 = discriminant(_418);
        _752 = const false;
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_410);
        _409 = const ();
        goto -> bb156;
    }

    bb299: {
        _759 = discriminant(_418);
        _752 = const false;
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_410);
        drop(_408) -> [return: bb263, unwind: bb297];
    }

    bb300 (cleanup): {
        _761 = discriminant(_686);
        goto -> bb297;
    }

    bb301 (cleanup): {
        _762 = discriminant(_418);
        goto -> bb279;
    }
}
