// MIR for `kamino_lending::idl_missing_types` after PreCodegen

fn kamino_lending::idl_missing_types(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_reserve_config::UpdateReserveConfig<'_>>, _2: reserve::ReserveFarmKind, _3: reserve::AssetTier, _4: reserve::FeeCalculation, _5: reserve::ReserveStatus, _6: state::UpdateConfigMode, _7: state::UpdateLendingMarketConfigValue, _8: state::UpdateLendingMarketMode) -> std::result::Result<(), anchor_lang::error::Error> {
    debug _ctx => _1;
    debug _reserve_farm_kind => _2;
    debug _asset_tier => _3;
    debug _fee_calculation => _4;
    debug _reserve_status => _5;
    debug _update_config_mode => _6;
    debug _update_lending_market_config_value => _7;
    debug _update_lending_market_config_mode => _8;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: !;
    let _10: !;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[&str; 1];
    let _14: &[&str; 1];
    let _15: [&str; 1];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let mut _17: &[core::fmt::rt::Argument<'_>; 0];
    let _18: &[core::fmt::rt::Argument<'_>; 0];
    let _19: [core::fmt::rt::Argument<'_>; 0];
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _20 = const _;
        _14 = &(*_20);
        _13 = &(*_14);
        _12 = move _13 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _18 = &_19;
        _17 = &(*_18);
        _16 = move _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_17);
        _11 = Arguments::<'_>::new_v1(move _12, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_12);
        _10 = panic_fmt(move _11) -> unwind continue;
    }
}
