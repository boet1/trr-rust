digraph Mir_0_13855 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn kamino_lending::deposit_and_withdraw(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, handlers::handler_deposit_and_withdraw::DepositAndWithdraw&lt;ReErased&gt;&gt;, _2: u64, _3: u64) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _6: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _7: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::lending_market::LendingMarket&gt;;<br align="left"/>let _8: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::lending_market::LendingMarket&gt;;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _13: ();<br align="left"/>let mut _14: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, handlers::handler_deposit_and_withdraw::DepositAndWithdraw&lt;ReErased&gt;&gt;;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: u64;<br align="left"/>let mut _17: &amp;ReErased mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw&lt;ReErased&gt;;<br align="left"/>let mut _18: isize;<br align="left"/>let mut _19: isize;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: isize;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug liquidity_amount =&gt; _2;<br align="left"/>debug withdraw_collateral_amount =&gt; _3;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>>;
    bb0__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_17 = deref_copy (_1.1: &amp;mut handlers::handler_deposit_and_withdraw::DepositAndWithdraw&lt;'_&gt;)<br/>_8 = &amp;(((*_17).0: handlers::handler_deposit_reserve_liquidity_and_obligation_collateral::DepositReserveLiquidityAndObligationCollateral&lt;'_&gt;).2: anchor_lang::prelude::AccountLoader&lt;'_, state::lending_market::LendingMarket&gt;)<br/>_7 = &amp;(*_8)<br/></td></tr><tr><td align="left">_6 = utils::constraints::emergency_mode_disabled(move _7)</td></tr></table>>];
    bb1__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_5 as Continue).0: ())<br/>_4 = _13<br/>StorageDead(_13)<br/>_18 = discriminant(_5)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_14)<br/>_14 = move _1<br/>StorageLive(_15)<br/>_15 = _2<br/>StorageLive(_16)<br/>_16 = _3<br/></td></tr><tr><td align="left">_0 = handlers::handler_deposit_and_withdraw::process(move _14, move _15, move _16)</td></tr></table>>];
    bb4__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_12)<br/>_12 = move _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>_20 = discriminant(_5)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_13855 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_22 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_13855 -> bb1__0_13855 [label="return"];
    bb1__0_13855 -> bb2__0_13855 [label="return"];
    bb1__0_13855 -> bb9__0_13855 [label="unwind"];
    bb2__0_13855 -> bb3__0_13855 [label="0"];
    bb2__0_13855 -> bb5__0_13855 [label="1"];
    bb2__0_13855 -> bb4__0_13855 [label="otherwise"];
    bb3__0_13855 -> bb7__0_13855 [label="return"];
    bb5__0_13855 -> bb6__0_13855 [label="return"];
    bb5__0_13855 -> bb10__0_13855 [label="unwind"];
    bb6__0_13855 -> bb8__0_13855 [label=""];
    bb7__0_13855 -> bb8__0_13855 [label=""];
    bb10__0_13855 -> bb9__0_13855 [label=""];
}
