// MIR for `check_gte::{closure#0}` before PreCodegen

fn check_gte::{closure#0}(_1: &{closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21}, _2: &U) -> std::result::Result<(), anchor_lang::error::Error> {
    debug value => _2;
    debug min => ((*_1).0: T);
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: T;
    let mut _4: U;
    let mut _5: &U;
    let _6: ();
    let mut _7: bool;
    let mut _8: &T;
    let mut _9: &T;
    let mut _10: !;
    let _11: ();
    let mut _12: &str;
    let _13: &str;
    let mut _14: &std::string::String;
    let _15: &std::string::String;
    let _16: std::string::String;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[&str; 2];
    let _21: &[&str; 2];
    let _22: [&str; 2];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let mut _24: &[core::fmt::rt::Argument<'_>; 2];
    let _25: &[core::fmt::rt::Argument<'_>; 2];
    let _26: [core::fmt::rt::Argument<'_>; 2];
    let mut _27: core::fmt::rt::Argument<'_>;
    let mut _28: &T;
    let _29: &T;
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &T;
    let _32: &T;
    let mut _33: anchor_lang::error::Error;
    let mut _34: anchor_lang::error::AnchorError;
    let mut _35: std::string::String;
    let mut _36: &LendingError;
    let _37: LendingError;
    let mut _38: u32;
    let mut _39: LendingError;
    let mut _40: std::string::String;
    let mut _41: &LendingError;
    let _42: LendingError;
    let mut _43: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _44: anchor_lang::error::ErrorOrigin;
    let mut _45: anchor_lang::error::Source;
    let mut _46: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _47: ();
    scope 1 {
        debug value_t => _3;
        let _17: std::string::String;
        let mut _48: &LendingError;
        let mut _49: &LendingError;
        let mut _50: &[&str; 2];
        scope 2 {
            debug res => _17;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = <U as Clone>::clone(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <U as Into<T>>::into(move _4) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_3;
        StorageLive(_9);
        _9 = &((*_1).0: T);
        _7 = <T as PartialOrd>::lt(move _8, move _9) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        switchInt(move _7) -> [0: bb16, otherwise: bb4];
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _50 = const _;
        _21 = &(*_50);
        _20 = &(*_21);
        _19 = move _20 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_1).0: T);
        _28 = &(*_29);
        _27 = core::fmt::rt::Argument::<'_>::new_display::<T>(move _28) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_3;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<T>(move _31) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        StorageDead(_31);
        _26 = [move _27, move _30];
        StorageDead(_30);
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_24);
        _18 = Arguments::<'_>::new_v1(move _19, move _23) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_19);
        _17 = format(move _18) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        _16 = move _17;
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = <std::string::String as Deref>::deref(move _14) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _12 = &(*_13);
        StorageDead(_14);
        _11 = solana_program::log::sol_log(move _12) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        StorageDead(_12);
        drop(_16) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _49 = const _;
        _36 = &(*_49);
        _35 = LendingError::name(move _36) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        _39 = LendingError::InvalidConfig;
        _38 = <LendingError as Into<u32>>::into(move _39) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _48 = const _;
        _41 = &(*_48);
        _40 = <LendingError as ToString>::to_string(move _41) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\config_items.rs", line: const 268_u32 };
        _44 = anchor_lang::error::ErrorOrigin::Source(move _45);
        StorageDead(_45);
        _43 = std::option::Option::<ErrorOrigin>::Some(move _44);
        StorageDead(_44);
        StorageLive(_46);
        _46 = std::option::Option::<ComparedValues>::None;
        _34 = anchor_lang::error::AnchorError { error_name: move _35, error_code_number: move _38, error_msg: move _40, error_origin: move _43, compared_values: move _46 };
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_35);
        _33 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _34) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        StorageDead(_34);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _33);
        StorageDead(_33);
        StorageDead(_7);
        StorageDead(_6);
        drop(_3) -> [return: bb18, unwind: bb23];
    }

    bb16: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_47);
        _47 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _47);
        StorageDead(_47);
        drop(_3) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        StorageDead(_3);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_3);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_35) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_16) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}
