// MIR for `update_elevation_group_debt_trackers_on_new_deposit::{closure#0}` before PreCodegen

fn update_elevation_group_debt_trackers_on_new_deposit::{closure#0}(_1: {closure@programs\klend\src\lending_market\lending_operations.rs:2714:29: 2714:31}) -> anchor_lang::error::Error {
    let mut _0: anchor_lang::error::Error;
    let mut _2: anchor_lang::error::AnchorError;
    let mut _3: std::string::String;
    let mut _4: &LendingError;
    let _5: LendingError;
    let mut _6: u32;
    let mut _7: LendingError;
    let mut _8: std::string::String;
    let mut _9: &LendingError;
    let _10: LendingError;
    let mut _11: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _12: anchor_lang::error::ErrorOrigin;
    let mut _13: anchor_lang::error::Source;
    let mut _14: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _15: &LendingError;
    let mut _16: &LendingError;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _16 = const _;
        _4 = &(*_16);
        _3 = LendingError::name(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = LendingError::ObligationElevationGroupMultipleDebtReserve;
        _6 = <LendingError as Into<u32>>::into(move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _15 = const _;
        _9 = &(*_15);
        _8 = <LendingError as ToString>::to_string(move _9) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2714_u32 };
        _12 = anchor_lang::error::ErrorOrigin::Source(move _13);
        StorageDead(_13);
        _11 = std::option::Option::<ErrorOrigin>::Some(move _12);
        StorageDead(_12);
        StorageLive(_14);
        _14 = std::option::Option::<ComparedValues>::None;
        _2 = anchor_lang::error::AnchorError { error_name: move _3, error_code_number: move _6, error_msg: move _8, error_origin: move _11, compared_values: move _14 };
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_3);
        _0 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _2) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_2);
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}
