// MIR for `handlers::handler_init_referrer_token_state::<impl at programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18>::try_accounts` after PreCodegen

fn handlers::handler_init_referrer_token_state::<impl at programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitReferrerTokenStateBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _66: ();
    let mut _67: bool;
    let mut _68: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _69: !;
    let mut _70: anchor_lang::error::Error;
    let mut _71: anchor_lang::error::ErrorCode;
    let _73: usize;
    let mut _74: usize;
    let mut _75: bool;
    let mut _76: &[anchor_lang::prelude::AccountInfo<'_>];
    let _77: &[anchor_lang::prelude::AccountInfo<'_>];
    let _78: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _79: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _80: std::ops::RangeFrom<usize>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _83: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _98: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_init_referrer_token_state::InitReferrerTokenStateBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _113: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _121: (anchor_lang::prelude::Pubkey, u8);
    let mut _122: &[&[u8]];
    let mut _123: &[&[u8]; 3];
    let _124: &[&[u8]; 3];
    let _125: [&[u8]; 3];
    let mut _126: &[u8];
    let _127: &[u8];
    let mut _128: &[u8];
    let _129: &[u8];
    let mut _130: &anchor_lang::prelude::Pubkey;
    let _131: anchor_lang::prelude::Pubkey;
    let mut _132: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _133: &[u8];
    let _134: &[u8];
    let mut _135: &anchor_lang::prelude::Pubkey;
    let _136: anchor_lang::prelude::Pubkey;
    let mut _137: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _138: &anchor_lang::prelude::Pubkey;
    let mut _139: u8;
    let _140: ();
    let mut _141: bool;
    let mut _142: &anchor_lang::prelude::Pubkey;
    let _143: anchor_lang::prelude::Pubkey;
    let mut _144: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: !;
    let mut _147: anchor_lang::error::Error;
    let mut _148: anchor_lang::error::Error;
    let mut _149: anchor_lang::error::Error;
    let mut _150: anchor_lang::error::ErrorCode;
    let mut _151: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _152: anchor_lang::prelude::Pubkey;
    let mut _153: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _154: anchor_lang::prelude::Pubkey;
    let mut _157: &&anchor_lang::prelude::AccountInfo<'_>;
    let _158: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _161: (usize, bool);
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: &&anchor_lang::prelude::Pubkey;
    let mut _166: &&anchor_lang::prelude::Pubkey;
    let _167: &anchor_lang::prelude::Pubkey;
    let _168: anchor_lang::prelude::Pubkey;
    let mut _170: &anchor_lang::prelude::AccountInfo<'_>;
    let _171: ();
    let mut _172: bool;
    let mut _173: u64;
    let mut _176: &anchor_lang::prelude::Rent;
    let mut _177: usize;
    let mut _179: anchor_lang::prelude::AccountInfo<'_>;
    let mut _180: &anchor_lang::prelude::Signer<'_>;
    let mut _181: anchor_lang::prelude::AccountInfo<'_>;
    let mut _182: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _184: anchor_lang::prelude::AccountInfo<'_>;
    let mut _185: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _186: anchor_lang::system_program::CreateAccount<'_>;
    let _187: ();
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _189: std::result::Result<(), anchor_lang::error::Error>;
    let mut _190: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _191: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _192: &[&[&[u8]]];
    let mut _193: &[&[&[u8]]; 1];
    let _194: &[&[&[u8]]; 1];
    let _195: [&[&[u8]]; 1];
    let mut _196: &[&[u8]];
    let _197: &[&[u8]];
    let _198: &[&[u8]];
    let mut _199: &[&[u8]; 4];
    let _200: [&[u8]; 4];
    let mut _201: &[u8];
    let _202: &[u8];
    let mut _203: &anchor_lang::prelude::Pubkey;
    let _204: anchor_lang::prelude::Pubkey;
    let mut _205: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _206: &[u8];
    let _207: &[u8];
    let mut _208: &anchor_lang::prelude::Pubkey;
    let _209: anchor_lang::prelude::Pubkey;
    let mut _210: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _211: &[u8];
    let _212: &[u8];
    let _213: &[u8];
    let mut _214: &[u8; 1];
    let _215: [u8; 1];
    let mut _216: u8;
    let mut _217: std::ops::RangeFull;
    let mut _218: std::ops::RangeFull;
    let mut _219: u64;
    let mut _220: u64;
    let mut _221: usize;
    let mut _222: &anchor_lang::prelude::Pubkey;
    let mut _223: isize;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _228: ();
    let mut _229: bool;
    let mut _230: &anchor_lang::prelude::Pubkey;
    let _231: anchor_lang::prelude::Pubkey;
    let mut _232: &anchor_lang::prelude::Signer<'_>;
    let mut _233: &anchor_lang::prelude::Pubkey;
    let _234: anchor_lang::prelude::Pubkey;
    let mut _235: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _236: !;
    let mut _237: anchor_lang::error::Error;
    let mut _238: anchor_lang::error::Error;
    let mut _239: anchor_lang::error::AnchorError;
    let mut _240: std::string::String;
    let mut _241: &anchor_lang::error::ErrorCode;
    let _242: anchor_lang::error::ErrorCode;
    let mut _243: u32;
    let mut _244: anchor_lang::error::ErrorCode;
    let mut _245: std::string::String;
    let mut _246: &anchor_lang::error::ErrorCode;
    let _247: anchor_lang::error::ErrorCode;
    let mut _248: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _249: anchor_lang::error::ErrorOrigin;
    let mut _250: anchor_lang::error::Source;
    let mut _251: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _252: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _253: anchor_lang::prelude::Pubkey;
    let mut _254: &anchor_lang::prelude::Signer<'_>;
    let mut _255: anchor_lang::prelude::Pubkey;
    let mut _256: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _258: u64;
    let mut _259: u64;
    let mut _260: &anchor_lang::prelude::Rent;
    let mut _261: usize;
    let mut _262: u64;
    let _263: ();
    let mut _264: bool;
    let mut _265: u64;
    let mut _267: anchor_lang::prelude::AccountInfo<'_>;
    let mut _268: &anchor_lang::prelude::Signer<'_>;
    let mut _269: anchor_lang::prelude::AccountInfo<'_>;
    let mut _270: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _272: anchor_lang::prelude::AccountInfo<'_>;
    let mut _273: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _274: anchor_lang::system_program::Transfer<'_>;
    let _275: ();
    let mut _276: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _277: std::result::Result<(), anchor_lang::error::Error>;
    let mut _278: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _279: u64;
    let mut _280: isize;
    let mut _282: !;
    let mut _283: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _286: anchor_lang::prelude::AccountInfo<'_>;
    let mut _287: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _289: anchor_lang::prelude::AccountInfo<'_>;
    let mut _290: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _291: anchor_lang::system_program::Allocate<'_>;
    let _292: ();
    let mut _293: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _294: std::result::Result<(), anchor_lang::error::Error>;
    let mut _295: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _296: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _297: &[&[&[u8]]];
    let mut _298: &[&[&[u8]]; 1];
    let _299: &[&[&[u8]]; 1];
    let _300: [&[&[u8]]; 1];
    let mut _301: &[&[u8]];
    let _302: &[&[u8]];
    let _303: &[&[u8]];
    let mut _304: &[&[u8]; 4];
    let _305: [&[u8]; 4];
    let mut _306: &[u8];
    let _307: &[u8];
    let mut _308: &anchor_lang::prelude::Pubkey;
    let _309: anchor_lang::prelude::Pubkey;
    let mut _310: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _311: &[u8];
    let _312: &[u8];
    let mut _313: &anchor_lang::prelude::Pubkey;
    let _314: anchor_lang::prelude::Pubkey;
    let mut _315: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _316: &[u8];
    let _317: &[u8];
    let _318: &[u8];
    let mut _319: &[u8; 1];
    let _320: [u8; 1];
    let mut _321: u8;
    let mut _322: std::ops::RangeFull;
    let mut _323: std::ops::RangeFull;
    let mut _324: u64;
    let mut _325: usize;
    let mut _326: isize;
    let mut _328: !;
    let mut _329: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _332: anchor_lang::prelude::AccountInfo<'_>;
    let mut _333: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _335: anchor_lang::prelude::AccountInfo<'_>;
    let mut _336: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _337: anchor_lang::system_program::Assign<'_>;
    let _338: ();
    let mut _339: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _340: std::result::Result<(), anchor_lang::error::Error>;
    let mut _341: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _342: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _343: &[&[&[u8]]];
    let mut _344: &[&[&[u8]]; 1];
    let _345: &[&[&[u8]]; 1];
    let _346: [&[&[u8]]; 1];
    let mut _347: &[&[u8]];
    let _348: &[&[u8]];
    let _349: &[&[u8]];
    let mut _350: &[&[u8]; 4];
    let _351: [&[u8]; 4];
    let mut _352: &[u8];
    let _353: &[u8];
    let mut _354: &anchor_lang::prelude::Pubkey;
    let _355: anchor_lang::prelude::Pubkey;
    let mut _356: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _357: &[u8];
    let _358: &[u8];
    let mut _359: &anchor_lang::prelude::Pubkey;
    let _360: anchor_lang::prelude::Pubkey;
    let mut _361: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _362: &[u8];
    let _363: &[u8];
    let _364: &[u8];
    let mut _365: &[u8; 1];
    let _366: [u8; 1];
    let mut _367: u8;
    let mut _368: std::ops::RangeFull;
    let mut _369: std::ops::RangeFull;
    let mut _370: &anchor_lang::prelude::Pubkey;
    let mut _371: isize;
    let mut _373: !;
    let mut _374: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _376: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>, anchor_lang::error::Error>;
    let mut _377: &anchor_lang::prelude::Pubkey;
    let mut _378: &anchor_lang::prelude::AccountInfo<'_>;
    let _379: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _380: isize;
    let mut _383: !;
    let mut _384: anchor_lang::error::Error;
    let mut _385: anchor_lang::error::Error;
    let mut _386: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>, anchor_lang::error::Error>;
    let mut _387: &anchor_lang::prelude::AccountInfo<'_>;
    let _388: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _389: isize;
    let mut _392: !;
    let mut _393: anchor_lang::error::Error;
    let mut _394: anchor_lang::error::Error;
    let _395: ();
    let mut _396: bool;
    let _397: ();
    let mut _398: bool;
    let mut _399: usize;
    let mut _400: usize;
    let mut _401: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _402: !;
    let mut _403: anchor_lang::error::Error;
    let mut _404: anchor_lang::error::Error;
    let mut _405: anchor_lang::error::Error;
    let mut _406: anchor_lang::error::ErrorCode;
    let mut _407: (usize, usize);
    let mut _408: usize;
    let mut _409: usize;
    let mut _410: &anchor_lang::prelude::AccountInfo<'_>;
    let _411: ();
    let mut _412: bool;
    let mut _413: &&anchor_lang::prelude::Pubkey;
    let mut _414: &&anchor_lang::prelude::Pubkey;
    let mut _415: !;
    let mut _416: anchor_lang::error::Error;
    let mut _417: anchor_lang::error::Error;
    let mut _418: anchor_lang::error::Error;
    let mut _419: anchor_lang::error::ErrorCode;
    let mut _420: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _421: anchor_lang::prelude::Pubkey;
    let mut _422: anchor_lang::prelude::Pubkey;
    let mut _424: &anchor_lang::prelude::Rent;
    let mut _425: usize;
    let mut _426: bool;
    let mut _427: u64;
    let mut _428: &anchor_lang::prelude::AccountInfo<'_>;
    let _429: anchor_lang::prelude::AccountInfo<'_>;
    let mut _430: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _431: u64;
    let mut _432: !;
    let mut _433: anchor_lang::error::Error;
    let mut _434: anchor_lang::error::Error;
    let mut _435: anchor_lang::error::ErrorCode;
    let _436: ();
    let mut _437: bool;
    let mut _438: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _439: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let _440: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _441: !;
    let mut _442: anchor_lang::error::Error;
    let mut _443: anchor_lang::error::Error;
    let mut _444: anchor_lang::error::ErrorCode;
    let _445: ();
    let mut _446: bool;
    let mut _447: &anchor_lang::prelude::Rent;
    let mut _448: u64;
    let mut _449: &anchor_lang::prelude::AccountInfo<'_>;
    let _450: anchor_lang::prelude::AccountInfo<'_>;
    let mut _451: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _452: usize;
    let mut _453: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _454: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _455: &anchor_lang::prelude::AccountInfo<'_>;
    let _456: anchor_lang::prelude::AccountInfo<'_>;
    let mut _457: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _458: isize;
    let mut _460: !;
    let mut _461: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _463: !;
    let mut _464: anchor_lang::error::Error;
    let mut _465: anchor_lang::error::Error;
    let mut _466: anchor_lang::error::ErrorCode;
    let _467: ();
    let mut _468: bool;
    let mut _469: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _470: &anchor_lang::prelude::Signer<'_>;
    let _471: &anchor_lang::prelude::Signer<'_>;
    let mut _472: !;
    let mut _473: anchor_lang::error::Error;
    let mut _474: anchor_lang::error::Error;
    let mut _475: anchor_lang::error::ErrorCode;
    let _476: ();
    let mut _478: &state::reserve::Reserve;
    let mut _479: &std::cell::Ref<'_, state::reserve::Reserve>;
    let _480: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _481: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _482: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _483: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _484: isize;
    let mut _486: !;
    let mut _487: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _490: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _491: bool;
    let mut _492: &anchor_lang::prelude::Pubkey;
    let mut _493: &anchor_lang::prelude::Pubkey;
    let mut _494: !;
    let mut _495: anchor_lang::error::Error;
    let mut _496: anchor_lang::error::Error;
    let mut _497: anchor_lang::error::Error;
    let mut _498: anchor_lang::error::ErrorCode;
    let mut _499: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _500: anchor_lang::prelude::Pubkey;
    let mut _501: anchor_lang::prelude::Pubkey;
    let mut _502: handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>;
    let mut _503: anchor_lang::prelude::Signer<'_>;
    let mut _504: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _505: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _506: anchor_lang::prelude::AccountInfo<'_>;
    let mut _507: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _508: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _509: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _513: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _514: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _515: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _516: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _517: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _518: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _519: bool;
    let mut _520: bool;
    let mut _521: bool;
    let mut _522: bool;
    let mut _523: bool;
    let mut _524: bool;
    let mut _525: bool;
    let mut _526: bool;
    let mut _527: bool;
    let mut _528: bool;
    let mut _529: bool;
    let mut _530: bool;
    let mut _531: bool;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    scope 1 {
        debug payer => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
        scope 6 {
            debug lending_market => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
            scope 11 {
                debug reserve => _36;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug referrer => _51;
                    let _72: &anchor_lang::prelude::AccountInfo<'_>;
                    scope 21 {
                        debug referrer_token_state => _72;
                        let _81: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        scope 22 {
                            debug rent => _81;
                            let _96: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            scope 27 {
                                debug system_program => _96;
                                let _111: anchor_lang::prelude::Rent;
                                let _115: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _118: anchor_lang::prelude::Rent;
                                scope 32 {
                                    debug __anchor_rent => _111;
                                    let _119: anchor_lang::prelude::Pubkey;
                                    let _120: u8;
                                    scope 37 {
                                        debug __pda_address => _119;
                                        debug __bump => _120;
                                        let _155: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
                                        let _156: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 38 {
                                            debug referrer_token_state => _155;
                                            let _459: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _462: usize;
                                            let _477: anchor_lang::prelude::Pubkey;
                                            let _485: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _488: std::cell::Ref<'_, state::reserve::Reserve>;
                                            scope 76 {
                                                debug residual => _459;
                                                scope 77 {
                                                }
                                            }
                                            scope 78 {
                                                debug val => _462;
                                                scope 79 {
                                                }
                                            }
                                            scope 80 {
                                                debug my_key => _477;
                                                let _489: anchor_lang::prelude::Pubkey;
                                                scope 85 {
                                                    debug target_key => _489;
                                                }
                                            }
                                            scope 81 {
                                                debug residual => _485;
                                                scope 82 {
                                                }
                                            }
                                            scope 83 {
                                                debug val => _488;
                                                scope 84 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug actual_field => _156;
                                            let _159: &anchor_lang::prelude::Pubkey;
                                            scope 40 {
                                                debug actual_owner => _159;
                                                let _160: usize;
                                                scope 41 {
                                                    debug space => _160;
                                                    let _162: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
                                                    let _169: u64;
                                                    let _390: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
                                                    let _391: anchor_lang::error::Error;
                                                    let mut _512: &&anchor_lang::prelude::Pubkey;
                                                    scope 42 {
                                                        debug pa => _162;
                                                        let _423: u64;
                                                        scope 75 {
                                                            debug required_lamports => _423;
                                                        }
                                                    }
                                                    scope 43 {
                                                        debug __current_lamports => _169;
                                                        let _174: usize;
                                                        let _257: u64;
                                                        let _381: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
                                                        let _382: anchor_lang::error::Error;
                                                        let mut _510: &anchor_lang::error::ErrorCode;
                                                        let mut _511: &anchor_lang::error::ErrorCode;
                                                        scope 44 {
                                                            debug space => _174;
                                                            let _175: u64;
                                                            scope 45 {
                                                                debug lamports => _175;
                                                                let _178: anchor_lang::system_program::CreateAccount<'_>;
                                                                scope 46 {
                                                                    debug cpi_accounts => _178;
                                                                    let _183: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                    scope 47 {
                                                                        debug cpi_context => _183;
                                                                        let _224: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _227: ();
                                                                        scope 48 {
                                                                            debug residual => _224;
                                                                            scope 49 {
                                                                            }
                                                                        }
                                                                        scope 50 {
                                                                            debug val => _227;
                                                                            scope 51 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 52 {
                                                            debug required_lamports => _257;
                                                            let _266: anchor_lang::system_program::Transfer<'_>;
                                                            let _285: anchor_lang::system_program::Allocate<'_>;
                                                            scope 53 {
                                                                debug cpi_accounts => _266;
                                                                let _271: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                scope 54 {
                                                                    debug cpi_context => _271;
                                                                    let _281: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _284: ();
                                                                    scope 55 {
                                                                        debug residual => _281;
                                                                        scope 56 {
                                                                        }
                                                                    }
                                                                    scope 57 {
                                                                        debug val => _284;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 59 {
                                                                debug cpi_accounts => _285;
                                                                let _288: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                scope 60 {
                                                                    debug cpi_context => _288;
                                                                    let _327: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _330: ();
                                                                    let _331: anchor_lang::system_program::Assign<'_>;
                                                                    scope 61 {
                                                                        debug residual => _327;
                                                                        scope 62 {
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug val => _330;
                                                                        scope 64 {
                                                                        }
                                                                    }
                                                                    scope 65 {
                                                                        debug cpi_accounts => _331;
                                                                        let _334: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                        scope 66 {
                                                                            debug cpi_context => _334;
                                                                            let _372: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _375: ();
                                                                            scope 67 {
                                                                                debug residual => _372;
                                                                                scope 68 {
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug val => _375;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug val => _381;
                                                        }
                                                        scope 72 {
                                                            debug e => _382;
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug val => _390;
                                                    }
                                                    scope 74 {
                                                        debug e => _391;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _115;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _118;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _107;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _110;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _92;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _95;
                            scope 26 {
                            }
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _531 = const false;
        _530 = const false;
        _529 = const false;
        _528 = const false;
        _527 = const false;
        _526 = const false;
        _525 = const false;
        _524 = const false;
        _523 = const false;
        _522 = const false;
        _521 = const false;
        _520 = const false;
        _519 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitReferrerTokenStateBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18}>(move _9, move _15) -> [return: bb2, unwind: bb249];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb249];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _532 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, InitReferrerTokenStateBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb285];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _592 = discriminant(_7);
        StorageDead(_7);
        goto -> bb239;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18}>(move _24, move _30) -> [return: bb9, unwind: bb249];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb249];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _21 = move _35;
        StorageDead(_35);
        _534 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Accounts<'_, InitReferrerTokenStateBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb284];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _590 = discriminant(_22);
        StorageDead(_22);
        goto -> bb238;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18}>(move _39, move _45) -> [return: bb15, unwind: bb249];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb249];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _36 = move _50;
        StorageDead(_50);
        _536 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitReferrerTokenStateBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb283];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _588 = discriminant(_37);
        StorageDead(_37);
        goto -> bb237;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18}>(move _54, move _60) -> [return: bb21, unwind: bb249];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb249];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _538 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _513 = deref_copy (*_2);
        _68 = &(*_513);
        _67 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _68) -> [return: bb26, unwind: bb248];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb282];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _586 = discriminant(_52);
        StorageDead(_52);
        goto -> bb236;
    }

    bb26: {
        switchInt(move _67) -> [0: bb29, otherwise: bb27];
    }

    bb27: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        _71 = AccountNotEnoughKeys;
        _70 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _71) -> [return: bb28, unwind: bb248];
    }

    bb28: {
        StorageDead(_71);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _70);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb235;
    }

    bb29: {
        StorageDead(_68);
        _66 = const ();
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const 0_usize;
        _514 = deref_copy (*_2);
        _74 = Len((*_514));
        _75 = Lt(_73, _74);
        assert(move _75, "index out of bounds: the length is {} but the index is {}", move _74, _73) -> [success: bb30, unwind: bb248];
    }

    bb30: {
        _515 = deref_copy (*_2);
        _72 = &(*_515)[_73];
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _516 = deref_copy (*_2);
        _79 = &(*_516);
        StorageLive(_80);
        _80 = RangeFrom::<usize> { start: const 1_usize };
        _78 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _79, move _80) -> [return: bb31, unwind: bb248];
    }

    bb31: {
        StorageDead(_80);
        StorageDead(_79);
        _77 = &(*_78);
        _76 = &(*_77);
        (*_2) = move _76;
        StorageDead(_76);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitReferrerTokenStateBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb248];
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
        _83 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18}>(move _84, move _90) -> [return: bb33, unwind: bb248];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb248];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _81 = move _95;
        StorageDead(_95);
        _540 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitReferrerTokenStateBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb248];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb281];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _584 = discriminant(_82);
        StorageDead(_82);
        goto -> bb234;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18};
        _98 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_referrer_token_state.rs:26:10: 26:18}>(move _99, move _105) -> [return: bb39, unwind: bb248];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb248];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _96 = move _110;
        StorageDead(_110);
        _542 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb44, unwind: bb248];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb280];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _582 = discriminant(_97);
        StorageDead(_97);
        goto -> bb233;
    }

    bb44: {
        _112 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _113) -> [return: bb45, unwind: bb248];
    }

    bb45: {
        StorageDead(_113);
        _114 = discriminant(_112);
        switchInt(move _114) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        StorageLive(_118);
        _118 = ((_112 as Continue).0: anchor_lang::prelude::Rent);
        _111 = _118;
        StorageDead(_118);
        _544 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = const _;
        _126 = &(*_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_51;
        _131 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _132) -> [return: bb49, unwind: bb248];
    }

    bb47: {
        StorageLive(_115);
        _115 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_117);
        _117 = move _115;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _117) -> [return: bb48, unwind: bb279];
    }

    bb48: {
        StorageDead(_117);
        StorageDead(_115);
        _580 = discriminant(_112);
        StorageDead(_112);
        goto -> bb232;
    }

    bb49: {
        _130 = &_131;
        StorageDead(_132);
        _129 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _130) -> [return: bb50, unwind: bb248];
    }

    bb50: {
        _128 = &(*_129);
        StorageDead(_130);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_36;
        _136 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _137) -> [return: bb51, unwind: bb248];
    }

    bb51: {
        _135 = &_136;
        StorageDead(_137);
        _134 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _135) -> [return: bb52, unwind: bb248];
    }

    bb52: {
        _133 = &(*_134);
        StorageDead(_135);
        _125 = [move _126, move _128, move _133];
        StorageDead(_133);
        StorageDead(_128);
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = move _123 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_123);
        StorageLive(_138);
        _138 = &(*_1);
        _121 = anchor_lang::prelude::Pubkey::find_program_address(move _122, move _138) -> [return: bb53, unwind: bb248];
    }

    bb53: {
        StorageDead(_138);
        StorageDead(_122);
        StorageLive(_119);
        _119 = (_121.0: anchor_lang::prelude::Pubkey);
        StorageLive(_120);
        _120 = (_121.1: u8);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_121);
        StorageLive(_139);
        _139 = _120;
        ((*_4).0: u8) = move _139;
        StorageDead(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &(*_72);
        _143 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _144) -> [return: bb54, unwind: bb248];
    }

    bb54: {
        _142 = &_143;
        StorageDead(_144);
        StorageLive(_145);
        _145 = &_119;
        _141 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _142, move _145) -> [return: bb55, unwind: bb248];
    }

    bb55: {
        switchInt(move _141) -> [0: bb61, otherwise: bb56];
    }

    bb56: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = ConstraintSeeds;
        _149 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _150) -> [return: bb57, unwind: bb248];
    }

    bb57: {
        StorageDead(_150);
        _148 = anchor_lang::error::Error::with_account_name::<&str>(move _149, const "referrer_token_state") -> [return: bb58, unwind: bb248];
    }

    bb58: {
        _531 = const true;
        StorageDead(_149);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &(*_72);
        _152 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _153) -> [return: bb59, unwind: bb278];
    }

    bb59: {
        StorageDead(_153);
        StorageLive(_154);
        _154 = _119;
        _151 = (move _152, move _154);
        StorageDead(_154);
        StorageDead(_152);
        _531 = const false;
        _147 = anchor_lang::error::Error::with_pubkeys(move _148, move _151) -> [return: bb60, unwind: bb278];
    }

    bb60: {
        StorageDead(_151);
        _531 = const false;
        StorageDead(_148);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _147);
        StorageDead(_147);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb231;
    }

    bb61: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_72;
        _157 = &(*_158);
        _156 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _157) -> [return: bb62, unwind: bb248];
    }

    bb62: {
        StorageDead(_157);
        StorageDead(_158);
        StorageLive(_159);
        _159 = ((*_156).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_160);
        _161 = CheckedAdd(const _, const 8_usize);
        assert(!move (_161.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 8_usize) -> [success: bb63, unwind: bb248];
    }

    bb63: {
        _160 = move (_161.0: usize);
        StorageLive(_162);
        StorageLive(_163);
        _163 = const false;
        switchInt(move _163) -> [0: bb66, otherwise: bb64];
    }

    bb64: {
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_159;
        StorageLive(_166);
        _512 = const _;
        _166 = &(*_512);
        _164 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _165, move _166) -> [return: bb65, unwind: bb248];
    }

    bb65: {
        switchInt(move _164) -> [0: bb149, otherwise: bb66];
    }

    bb66: {
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &(*_72);
        _169 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _170) -> [return: bb67, unwind: bb248];
    }

    bb67: {
        StorageDead(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _169;
        _172 = Eq(move _173, const 0_u64);
        switchInt(move _172) -> [0: bb86, otherwise: bb68];
    }

    bb68: {
        StorageDead(_173);
        StorageLive(_174);
        _174 = _160;
        StorageLive(_175);
        StorageLive(_176);
        _176 = &_111;
        StorageLive(_177);
        _177 = _174;
        _175 = anchor_lang::prelude::Rent::minimum_balance(move _176, move _177) -> [return: bb69, unwind: bb248];
    }

    bb69: {
        StorageDead(_177);
        StorageDead(_176);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_6;
        _179 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _180) -> [return: bb70, unwind: bb248];
    }

    bb70: {
        StorageDead(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &(*_72);
        _181 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _182) -> [return: bb71, unwind: bb247];
    }

    bb71: {
        StorageDead(_182);
        _530 = const true;
        _178 = anchor_lang::system_program::CreateAccount::<'_> { from: move _179, to: move _181 };
        StorageDead(_181);
        StorageDead(_179);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_96;
        _184 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _185) -> [return: bb72, unwind: bb276];
    }

    bb72: {
        StorageDead(_185);
        StorageLive(_186);
        _530 = const false;
        _186 = move _178;
        _183 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _184, move _186) -> [return: bb73, unwind: bb276];
    }

    bb73: {
        StorageDead(_186);
        StorageDead(_184);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _529 = const true;
        _191 = move _183;
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_51;
        _204 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _205) -> [return: bb74, unwind: bb274];
    }

    bb74: {
        _203 = &_204;
        StorageDead(_205);
        _202 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _203) -> [return: bb75, unwind: bb274];
    }

    bb75: {
        _201 = &(*_202);
        StorageDead(_203);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_36;
        _209 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _210) -> [return: bb76, unwind: bb274];
    }

    bb76: {
        _208 = &_209;
        StorageDead(_210);
        _207 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _208) -> [return: bb77, unwind: bb274];
    }

    bb77: {
        _206 = &(*_207);
        StorageDead(_208);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = _120;
        _215 = [move _216];
        _214 = &_215;
        StorageDead(_216);
        StorageLive(_217);
        _217 = RangeFull;
        _213 = <[u8; 1] as Index<RangeFull>>::index(move _214, move _217) -> [return: bb78, unwind: bb274];
    }

    bb78: {
        StorageDead(_217);
        StorageDead(_214);
        _212 = &(*_213);
        _211 = &(*_212);
        _200 = [const _, move _201, move _206, move _211];
        _199 = &_200;
        StorageDead(_211);
        StorageDead(_206);
        StorageDead(_201);
        StorageLive(_218);
        _218 = RangeFull;
        _198 = <[&[u8]; 4] as Index<RangeFull>>::index(move _199, move _218) -> [return: bb79, unwind: bb274];
    }

    bb79: {
        StorageDead(_218);
        StorageDead(_199);
        _197 = &(*_198);
        _196 = &(*_197);
        _195 = [move _196];
        StorageDead(_196);
        _194 = &_195;
        _193 = &(*_194);
        _192 = move _193 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_193);
        _529 = const false;
        _190 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _191, move _192) -> [return: bb80, unwind: bb274];
    }

    bb80: {
        StorageDead(_192);
        _529 = const false;
        StorageDead(_191);
        StorageLive(_219);
        _219 = _175;
        StorageLive(_220);
        StorageLive(_221);
        _221 = _174;
        _220 = move _221 as u64 (IntToInt);
        StorageDead(_221);
        StorageLive(_222);
        _222 = &(*_1);
        _189 = anchor_lang::system_program::create_account(move _190, move _219, move _220, move _222) -> [return: bb81, unwind: bb276];
    }

    bb81: {
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_190);
        _188 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _189) -> [return: bb82, unwind: bb276];
    }

    bb82: {
        StorageDead(_189);
        _223 = discriminant(_188);
        switchInt(move _223) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_227);
        _227 = ((_188 as Continue).0: ());
        _187 = _227;
        StorageDead(_227);
        _546 = discriminant(_188);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_188);
        StorageDead(_187);
        _171 = const ();
        StorageDead(_183);
        _530 = const false;
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb144;
    }

    bb84: {
        StorageLive(_224);
        _224 = move ((_188 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_226);
        _226 = move _224;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _226) -> [return: bb85, unwind: bb272];
    }

    bb85: {
        StorageDead(_226);
        StorageDead(_224);
        _578 = discriminant(_188);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_183);
        _530 = const false;
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb227;
    }

    bb86: {
        StorageDead(_173);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &_6;
        _231 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _232) -> [return: bb87, unwind: bb248];
    }

    bb87: {
        _230 = &_231;
        StorageDead(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &(*_72);
        _234 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _235) -> [return: bb88, unwind: bb248];
    }

    bb88: {
        _233 = &_234;
        StorageDead(_235);
        _229 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _230, move _233) -> [return: bb89, unwind: bb248];
    }

    bb89: {
        switchInt(move _229) -> [0: bb98, otherwise: bb90];
    }

    bb90: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_230);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _511 = const _;
        _241 = &(*_511);
        _240 = anchor_lang::error::ErrorCode::name(move _241) -> [return: bb91, unwind: bb248];
    }

    bb91: {
        StorageDead(_241);
        StorageLive(_243);
        StorageLive(_244);
        _244 = TryingToInitPayerAsProgramAccount;
        _243 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _244) -> [return: bb92, unwind: bb246];
    }

    bb92: {
        StorageDead(_244);
        StorageLive(_245);
        StorageLive(_246);
        _510 = const _;
        _246 = &(*_510);
        _245 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _246) -> [return: bb93, unwind: bb246];
    }

    bb93: {
        StorageDead(_246);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_referrer_token_state.rs", line: const 26_u32 };
        _249 = anchor_lang::error::ErrorOrigin::Source(move _250);
        StorageDead(_250);
        _248 = std::option::Option::<ErrorOrigin>::Some(move _249);
        StorageDead(_249);
        StorageLive(_251);
        _251 = std::option::Option::<ComparedValues>::None;
        _239 = anchor_lang::error::AnchorError { error_name: move _240, error_code_number: move _243, error_msg: move _245, error_origin: move _248, compared_values: move _251 };
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_240);
        _238 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _239) -> [return: bb94, unwind: bb248];
    }

    bb94: {
        _528 = const true;
        StorageDead(_239);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = &_6;
        _253 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _254) -> [return: bb95, unwind: bb271];
    }

    bb95: {
        StorageDead(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &(*_72);
        _255 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _256) -> [return: bb96, unwind: bb271];
    }

    bb96: {
        StorageDead(_256);
        _252 = (move _253, move _255);
        StorageDead(_255);
        StorageDead(_253);
        _528 = const false;
        _237 = anchor_lang::error::Error::with_pubkeys(move _238, move _252) -> [return: bb97, unwind: bb271];
    }

    bb97: {
        StorageDead(_252);
        _528 = const false;
        StorageDead(_238);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _237);
        StorageDead(_237);
        StorageDead(_229);
        StorageDead(_228);
        goto -> bb227;
    }

    bb98: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_230);
        _228 = const ();
        StorageDead(_229);
        StorageDead(_228);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &_111;
        StorageLive(_261);
        _261 = _160;
        _259 = anchor_lang::prelude::Rent::minimum_balance(move _260, move _261) -> [return: bb99, unwind: bb248];
    }

    bb99: {
        StorageDead(_261);
        StorageDead(_260);
        _258 = <u64 as Ord>::max(move _259, const 1_u64) -> [return: bb100, unwind: bb248];
    }

    bb100: {
        StorageDead(_259);
        StorageLive(_262);
        _262 = _169;
        _257 = core::num::<impl u64>::saturating_sub(move _258, move _262) -> [return: bb101, unwind: bb248];
    }

    bb101: {
        StorageDead(_262);
        StorageDead(_258);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = _257;
        _264 = Gt(move _265, const 0_u64);
        switchInt(move _264) -> [0: bb112, otherwise: bb102];
    }

    bb102: {
        StorageDead(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_6;
        _267 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _268) -> [return: bb103, unwind: bb248];
    }

    bb103: {
        StorageDead(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &(*_72);
        _269 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _270) -> [return: bb104, unwind: bb245];
    }

    bb104: {
        StorageDead(_270);
        _527 = const true;
        _266 = anchor_lang::system_program::Transfer::<'_> { from: move _267, to: move _269 };
        StorageDead(_269);
        StorageDead(_267);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &_96;
        _272 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _273) -> [return: bb105, unwind: bb269];
    }

    bb105: {
        StorageDead(_273);
        StorageLive(_274);
        _527 = const false;
        _274 = move _266;
        _271 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _272, move _274) -> [return: bb106, unwind: bb269];
    }

    bb106: {
        StorageDead(_274);
        StorageDead(_272);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = move _271;
        StorageLive(_279);
        _279 = _257;
        _277 = anchor_lang::system_program::transfer(move _278, move _279) -> [return: bb107, unwind: bb269];
    }

    bb107: {
        StorageDead(_279);
        StorageDead(_278);
        _276 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _277) -> [return: bb108, unwind: bb269];
    }

    bb108: {
        StorageDead(_277);
        _280 = discriminant(_276);
        switchInt(move _280) -> [0: bb109, 1: bb110, otherwise: bb5];
    }

    bb109: {
        StorageLive(_284);
        _284 = ((_276 as Continue).0: ());
        _275 = _284;
        StorageDead(_284);
        _548 = discriminant(_276);
        StorageDead(_276);
        StorageDead(_275);
        _263 = const ();
        StorageDead(_271);
        _527 = const false;
        StorageDead(_266);
        goto -> bb113;
    }

    bb110: {
        StorageLive(_281);
        _281 = move ((_276 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_283);
        _283 = move _281;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _283) -> [return: bb111, unwind: bb267];
    }

    bb111: {
        StorageDead(_283);
        StorageDead(_281);
        _576 = discriminant(_276);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_271);
        _527 = const false;
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        goto -> bb226;
    }

    bb112: {
        StorageDead(_265);
        _263 = const ();
        goto -> bb113;
    }

    bb113: {
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &(*_72);
        _286 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _287) -> [return: bb114, unwind: bb248];
    }

    bb114: {
        StorageDead(_287);
        _526 = const true;
        _285 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _286 };
        StorageDead(_286);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = &_96;
        _289 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _290) -> [return: bb115, unwind: bb266];
    }

    bb115: {
        StorageDead(_290);
        StorageLive(_291);
        _526 = const false;
        _291 = move _285;
        _288 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _289, move _291) -> [return: bb116, unwind: bb266];
    }

    bb116: {
        StorageDead(_291);
        StorageDead(_289);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _525 = const true;
        _296 = move _288;
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &_51;
        _309 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _310) -> [return: bb117, unwind: bb264];
    }

    bb117: {
        _308 = &_309;
        StorageDead(_310);
        _307 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _308) -> [return: bb118, unwind: bb264];
    }

    bb118: {
        _306 = &(*_307);
        StorageDead(_308);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_36;
        _314 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _315) -> [return: bb119, unwind: bb264];
    }

    bb119: {
        _313 = &_314;
        StorageDead(_315);
        _312 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _313) -> [return: bb120, unwind: bb264];
    }

    bb120: {
        _311 = &(*_312);
        StorageDead(_313);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = _120;
        _320 = [move _321];
        _319 = &_320;
        StorageDead(_321);
        StorageLive(_322);
        _322 = RangeFull;
        _318 = <[u8; 1] as Index<RangeFull>>::index(move _319, move _322) -> [return: bb121, unwind: bb264];
    }

    bb121: {
        StorageDead(_322);
        StorageDead(_319);
        _317 = &(*_318);
        _316 = &(*_317);
        _305 = [const _, move _306, move _311, move _316];
        _304 = &_305;
        StorageDead(_316);
        StorageDead(_311);
        StorageDead(_306);
        StorageLive(_323);
        _323 = RangeFull;
        _303 = <[&[u8]; 4] as Index<RangeFull>>::index(move _304, move _323) -> [return: bb122, unwind: bb264];
    }

    bb122: {
        StorageDead(_323);
        StorageDead(_304);
        _302 = &(*_303);
        _301 = &(*_302);
        _300 = [move _301];
        StorageDead(_301);
        _299 = &_300;
        _298 = &(*_299);
        _297 = move _298 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_298);
        _525 = const false;
        _295 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _296, move _297) -> [return: bb123, unwind: bb264];
    }

    bb123: {
        StorageDead(_297);
        _525 = const false;
        StorageDead(_296);
        StorageLive(_324);
        StorageLive(_325);
        _325 = _160;
        _324 = move _325 as u64 (IntToInt);
        StorageDead(_325);
        _294 = anchor_lang::system_program::allocate(move _295, move _324) -> [return: bb124, unwind: bb266];
    }

    bb124: {
        StorageDead(_324);
        StorageDead(_295);
        _293 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _294) -> [return: bb125, unwind: bb266];
    }

    bb125: {
        StorageDead(_294);
        _326 = discriminant(_293);
        switchInt(move _326) -> [0: bb126, 1: bb127, otherwise: bb5];
    }

    bb126: {
        StorageLive(_330);
        _330 = ((_293 as Continue).0: ());
        _292 = _330;
        StorageDead(_330);
        _550 = discriminant(_293);
        StorageDead(_320);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_293);
        StorageDead(_292);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = &(*_72);
        _332 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _333) -> [return: bb129, unwind: bb266];
    }

    bb127: {
        StorageLive(_327);
        _327 = move ((_293 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_329);
        _329 = move _327;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _329) -> [return: bb128, unwind: bb262];
    }

    bb128: {
        StorageDead(_329);
        StorageDead(_327);
        _574 = discriminant(_293);
        StorageDead(_320);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_293);
        StorageDead(_292);
        goto -> bb225;
    }

    bb129: {
        StorageDead(_333);
        _524 = const true;
        _331 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _332 };
        StorageDead(_332);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = &_96;
        _335 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _336) -> [return: bb130, unwind: bb261];
    }

    bb130: {
        StorageDead(_336);
        StorageLive(_337);
        _524 = const false;
        _337 = move _331;
        _334 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _335, move _337) -> [return: bb131, unwind: bb261];
    }

    bb131: {
        StorageDead(_337);
        StorageDead(_335);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _523 = const true;
        _342 = move _334;
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &_51;
        _355 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _356) -> [return: bb132, unwind: bb259];
    }

    bb132: {
        _354 = &_355;
        StorageDead(_356);
        _353 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _354) -> [return: bb133, unwind: bb259];
    }

    bb133: {
        _352 = &(*_353);
        StorageDead(_354);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &_36;
        _360 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _361) -> [return: bb134, unwind: bb259];
    }

    bb134: {
        _359 = &_360;
        StorageDead(_361);
        _358 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _359) -> [return: bb135, unwind: bb259];
    }

    bb135: {
        _357 = &(*_358);
        StorageDead(_359);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = _120;
        _366 = [move _367];
        _365 = &_366;
        StorageDead(_367);
        StorageLive(_368);
        _368 = RangeFull;
        _364 = <[u8; 1] as Index<RangeFull>>::index(move _365, move _368) -> [return: bb136, unwind: bb259];
    }

    bb136: {
        StorageDead(_368);
        StorageDead(_365);
        _363 = &(*_364);
        _362 = &(*_363);
        _351 = [const _, move _352, move _357, move _362];
        _350 = &_351;
        StorageDead(_362);
        StorageDead(_357);
        StorageDead(_352);
        StorageLive(_369);
        _369 = RangeFull;
        _349 = <[&[u8]; 4] as Index<RangeFull>>::index(move _350, move _369) -> [return: bb137, unwind: bb259];
    }

    bb137: {
        StorageDead(_369);
        StorageDead(_350);
        _348 = &(*_349);
        _347 = &(*_348);
        _346 = [move _347];
        StorageDead(_347);
        _345 = &_346;
        _344 = &(*_345);
        _343 = move _344 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_344);
        _523 = const false;
        _341 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _342, move _343) -> [return: bb138, unwind: bb259];
    }

    bb138: {
        StorageDead(_343);
        _523 = const false;
        StorageDead(_342);
        StorageLive(_370);
        _370 = &(*_1);
        _340 = anchor_lang::system_program::assign(move _341, move _370) -> [return: bb139, unwind: bb261];
    }

    bb139: {
        StorageDead(_370);
        StorageDead(_341);
        _339 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _340) -> [return: bb140, unwind: bb261];
    }

    bb140: {
        StorageDead(_340);
        _371 = discriminant(_339);
        switchInt(move _371) -> [0: bb141, 1: bb142, otherwise: bb5];
    }

    bb141: {
        StorageLive(_375);
        _375 = ((_339 as Continue).0: ());
        _338 = _375;
        StorageDead(_375);
        _552 = discriminant(_339);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_339);
        StorageDead(_338);
        _171 = const ();
        StorageDead(_334);
        _524 = const false;
        StorageDead(_331);
        StorageDead(_288);
        _526 = const false;
        StorageDead(_285);
        StorageDead(_257);
        goto -> bb144;
    }

    bb142: {
        StorageLive(_372);
        _372 = move ((_339 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_374);
        _374 = move _372;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _374) -> [return: bb143, unwind: bb257];
    }

    bb143: {
        StorageDead(_374);
        StorageDead(_372);
        _572 = discriminant(_339);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_339);
        StorageDead(_338);
        StorageDead(_334);
        _524 = const false;
        StorageDead(_331);
        goto -> bb225;
    }

    bb144: {
        StorageDead(_172);
        StorageDead(_171);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &(*_1);
        StorageLive(_378);
        StorageLive(_379);
        _379 = &_72;
        _517 = deref_copy (*_379);
        _378 = &(*_517);
        _376 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerTokenState>::try_from_unchecked(move _377, move _378) -> [return: bb145, unwind: bb248];
    }

    bb145: {
        StorageDead(_378);
        StorageDead(_377);
        _380 = discriminant(_376);
        switchInt(move _380) -> [0: bb147, 1: bb146, otherwise: bb5];
    }

    bb146: {
        StorageLive(_382);
        _382 = move ((_376 as Err).0: anchor_lang::error::Error);
        StorageLive(_384);
        StorageLive(_385);
        _385 = move _382;
        _384 = anchor_lang::error::Error::with_account_name::<&str>(move _385, const "referrer_token_state") -> [return: bb148, unwind: bb256];
    }

    bb147: {
        StorageLive(_381);
        _381 = move ((_376 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>);
        _162 = move _381;
        StorageDead(_381);
        StorageDead(_169);
        _554 = discriminant(_376);
        StorageDead(_379);
        StorageDead(_376);
        goto -> bb154;
    }

    bb148: {
        StorageDead(_385);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _384);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_169);
        _570 = discriminant(_376);
        StorageDead(_379);
        StorageDead(_376);
        goto -> bb228;
    }

    bb149: {
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        _388 = &_72;
        _518 = deref_copy (*_388);
        _387 = &(*_518);
        _386 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerTokenState>::try_from(move _387) -> [return: bb150, unwind: bb248];
    }

    bb150: {
        StorageDead(_387);
        _389 = discriminant(_386);
        switchInt(move _389) -> [0: bb152, 1: bb151, otherwise: bb5];
    }

    bb151: {
        StorageLive(_391);
        _391 = move ((_386 as Err).0: anchor_lang::error::Error);
        StorageLive(_393);
        StorageLive(_394);
        _394 = move _391;
        _393 = anchor_lang::error::Error::with_account_name::<&str>(move _394, const "referrer_token_state") -> [return: bb153, unwind: bb255];
    }

    bb152: {
        StorageLive(_390);
        _390 = move ((_386 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>);
        _162 = move _390;
        StorageDead(_390);
        _556 = discriminant(_386);
        StorageDead(_388);
        StorageDead(_386);
        goto -> bb154;
    }

    bb153: {
        StorageDead(_394);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _393);
        StorageDead(_393);
        StorageDead(_391);
        _568 = discriminant(_386);
        StorageDead(_388);
        StorageDead(_386);
        goto -> bb228;
    }

    bb154: {
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_395);
        StorageLive(_396);
        _396 = const false;
        switchInt(move _396) -> [0: bb178, otherwise: bb155];
    }

    bb155: {
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = _160;
        StorageLive(_400);
        StorageLive(_401);
        _401 = &(*_156);
        _400 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _401) -> [return: bb156, unwind: bb248];
    }

    bb156: {
        StorageDead(_401);
        _398 = Ne(move _399, move _400);
        switchInt(move _398) -> [0: bb162, otherwise: bb157];
    }

    bb157: {
        StorageDead(_400);
        StorageDead(_399);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = ConstraintSpace;
        _405 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _406) -> [return: bb158, unwind: bb248];
    }

    bb158: {
        StorageDead(_406);
        _404 = anchor_lang::error::Error::with_account_name::<&str>(move _405, const "referrer_token_state") -> [return: bb159, unwind: bb248];
    }

    bb159: {
        _522 = const true;
        StorageDead(_405);
        StorageLive(_407);
        StorageLive(_408);
        _408 = _160;
        StorageLive(_409);
        StorageLive(_410);
        _410 = &(*_156);
        _409 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _410) -> [return: bb160, unwind: bb254];
    }

    bb160: {
        StorageDead(_410);
        _407 = (move _408, move _409);
        StorageDead(_409);
        StorageDead(_408);
        _522 = const false;
        _403 = anchor_lang::error::Error::with_values::<usize, usize>(move _404, move _407) -> [return: bb161, unwind: bb254];
    }

    bb161: {
        StorageDead(_407);
        _522 = const false;
        StorageDead(_404);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _403);
        StorageDead(_403);
        StorageDead(_398);
        StorageDead(_397);
        goto -> bb224;
    }

    bb162: {
        StorageDead(_400);
        StorageDead(_399);
        _397 = const ();
        StorageDead(_398);
        StorageDead(_397);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &_159;
        StorageLive(_414);
        _414 = &_1;
        _412 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _413, move _414) -> [return: bb163, unwind: bb248];
    }

    bb163: {
        switchInt(move _412) -> [0: bb168, otherwise: bb164];
    }

    bb164: {
        StorageDead(_414);
        StorageDead(_413);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = ConstraintOwner;
        _418 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _419) -> [return: bb165, unwind: bb248];
    }

    bb165: {
        StorageDead(_419);
        _417 = anchor_lang::error::Error::with_account_name::<&str>(move _418, const "referrer_token_state") -> [return: bb166, unwind: bb248];
    }

    bb166: {
        StorageDead(_418);
        StorageLive(_420);
        StorageLive(_421);
        _421 = (*_159);
        StorageLive(_422);
        _422 = (*_1);
        _420 = (move _421, move _422);
        StorageDead(_422);
        StorageDead(_421);
        _416 = anchor_lang::error::Error::with_pubkeys(move _417, move _420) -> [return: bb167, unwind: bb248];
    }

    bb167: {
        StorageDead(_420);
        StorageDead(_417);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _416);
        StorageDead(_416);
        StorageDead(_412);
        StorageDead(_411);
        goto -> bb224;
    }

    bb168: {
        StorageDead(_414);
        StorageDead(_413);
        _411 = const ();
        StorageDead(_412);
        StorageDead(_411);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &_111;
        StorageLive(_425);
        _425 = _160;
        _423 = anchor_lang::prelude::Rent::minimum_balance(move _424, move _425) -> [return: bb169, unwind: bb248];
    }

    bb169: {
        StorageDead(_425);
        StorageDead(_424);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = &_162;
        _429 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _430) -> [return: bb170, unwind: bb248];
    }

    bb170: {
        _428 = &_429;
        StorageDead(_430);
        _427 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _428) -> [return: bb171, unwind: bb244];
    }

    bb171: {
        StorageDead(_428);
        StorageLive(_431);
        _431 = _423;
        _426 = Lt(move _427, move _431);
        switchInt(move _426) -> [0: bb176, otherwise: bb172];
    }

    bb172: {
        StorageDead(_431);
        drop(_429) -> [return: bb173, unwind: bb248];
    }

    bb173: {
        StorageDead(_429);
        StorageDead(_427);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _435 = ConstraintRentExempt;
        _434 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _435) -> [return: bb174, unwind: bb248];
    }

    bb174: {
        StorageDead(_435);
        _433 = anchor_lang::error::Error::with_account_name::<&str>(move _434, const "referrer_token_state") -> [return: bb175, unwind: bb248];
    }

    bb175: {
        StorageDead(_434);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _433);
        StorageDead(_433);
        StorageDead(_426);
        StorageDead(_423);
        goto -> bb224;
    }

    bb176: {
        StorageDead(_431);
        drop(_429) -> [return: bb177, unwind: bb248];
    }

    bb177: {
        StorageDead(_429);
        StorageDead(_427);
        _395 = const ();
        StorageDead(_426);
        StorageDead(_423);
        goto -> bb179;
    }

    bb178: {
        _395 = const ();
        goto -> bb179;
    }

    bb179: {
        StorageDead(_396);
        StorageDead(_395);
        _155 = move _162;
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_156);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = &_155;
        _439 = &(*_440);
        _438 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _439) -> [return: bb180, unwind: bb248];
    }

    bb180: {
        StorageDead(_439);
        _437 = ((*_438).6: bool);
        switchInt(move _437) -> [0: bb181, otherwise: bb184];
    }

    bb181: {
        StorageDead(_440);
        StorageDead(_438);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = ConstraintMut;
        _443 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _444) -> [return: bb182, unwind: bb248];
    }

    bb182: {
        StorageDead(_444);
        _442 = anchor_lang::error::Error::with_account_name::<&str>(move _443, const "referrer_token_state") -> [return: bb183, unwind: bb248];
    }

    bb183: {
        StorageDead(_443);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _442);
        StorageDead(_442);
        StorageDead(_437);
        StorageDead(_436);
        goto -> bb230;
    }

    bb184: {
        StorageDead(_440);
        StorageDead(_438);
        _436 = const ();
        StorageDead(_437);
        StorageDead(_436);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = &_111;
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        _451 = &_155;
        _450 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _451) -> [return: bb185, unwind: bb248];
    }

    bb185: {
        _449 = &_450;
        StorageDead(_451);
        _448 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _449) -> [return: bb186, unwind: bb243];
    }

    bb186: {
        StorageDead(_449);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        _457 = &_155;
        _456 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _457) -> [return: bb187, unwind: bb243];
    }

    bb187: {
        _455 = &_456;
        StorageDead(_457);
        _454 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _455) -> [return: bb188, unwind: bb242];
    }

    bb188: {
        StorageDead(_455);
        _453 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _454) -> [return: bb189, unwind: bb242];
    }

    bb189: {
        _521 = const true;
        StorageDead(_454);
        _458 = discriminant(_453);
        switchInt(move _458) -> [0: bb190, 1: bb191, otherwise: bb5];
    }

    bb190: {
        StorageLive(_462);
        _462 = ((_453 as Continue).0: usize);
        _452 = _462;
        StorageDead(_462);
        _446 = anchor_lang::prelude::Rent::is_exempt(move _447, move _448, move _452) -> [return: bb193, unwind: bb252];
    }

    bb191: {
        StorageLive(_459);
        _459 = move ((_453 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_461);
        _461 = move _459;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _461) -> [return: bb192, unwind: bb252];
    }

    bb192: {
        StorageDead(_461);
        StorageDead(_459);
        StorageDead(_452);
        StorageDead(_448);
        StorageDead(_447);
        _566 = discriminant(_453);
        drop(_456) -> [return: bb221, unwind: bb243];
    }

    bb193: {
        switchInt(move _446) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        StorageDead(_452);
        StorageDead(_448);
        StorageDead(_447);
        _558 = discriminant(_453);
        drop(_456) -> [return: bb200, unwind: bb243];
    }

    bb195: {
        StorageDead(_452);
        StorageDead(_448);
        StorageDead(_447);
        _560 = discriminant(_453);
        drop(_456) -> [return: bb196, unwind: bb243];
    }

    bb196: {
        StorageDead(_456);
        _521 = const false;
        StorageDead(_453);
        drop(_450) -> [return: bb197, unwind: bb248];
    }

    bb197: {
        StorageDead(_450);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = ConstraintRentExempt;
        _465 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _466) -> [return: bb198, unwind: bb248];
    }

    bb198: {
        StorageDead(_466);
        _464 = anchor_lang::error::Error::with_account_name::<&str>(move _465, const "referrer_token_state") -> [return: bb199, unwind: bb248];
    }

    bb199: {
        StorageDead(_465);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _464);
        StorageDead(_464);
        goto -> bb223;
    }

    bb200: {
        StorageDead(_456);
        _521 = const false;
        StorageDead(_453);
        drop(_450) -> [return: bb201, unwind: bb248];
    }

    bb201: {
        StorageDead(_450);
        _445 = const ();
        StorageDead(_446);
        StorageDead(_445);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_6;
        _470 = &(*_471);
        _469 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _470) -> [return: bb202, unwind: bb248];
    }

    bb202: {
        StorageDead(_470);
        _468 = ((*_469).6: bool);
        switchInt(move _468) -> [0: bb203, otherwise: bb206];
    }

    bb203: {
        StorageDead(_471);
        StorageDead(_469);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = ConstraintMut;
        _474 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _475) -> [return: bb204, unwind: bb248];
    }

    bb204: {
        StorageDead(_475);
        _473 = anchor_lang::error::Error::with_account_name::<&str>(move _474, const "payer") -> [return: bb205, unwind: bb248];
    }

    bb205: {
        StorageDead(_474);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _473);
        StorageDead(_473);
        StorageDead(_468);
        StorageDead(_467);
        goto -> bb230;
    }

    bb206: {
        StorageDead(_471);
        StorageDead(_469);
        _467 = const ();
        StorageDead(_468);
        StorageDead(_467);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        _483 = &_36;
        _482 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _483) -> [return: bb207, unwind: bb248];
    }

    bb207: {
        StorageDead(_483);
        _481 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _482) -> [return: bb208, unwind: bb248];
    }

    bb208: {
        _519 = const true;
        _520 = const true;
        StorageDead(_482);
        _484 = discriminant(_481);
        switchInt(move _484) -> [0: bb209, 1: bb210, otherwise: bb5];
    }

    bb209: {
        StorageLive(_488);
        _488 = move ((_481 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _480 = move _488;
        StorageDead(_488);
        _479 = &_480;
        _478 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _479) -> [return: bb212, unwind: bb241];
    }

    bb210: {
        StorageLive(_485);
        _485 = move ((_481 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_487);
        _487 = move _485;
        _0 = <std::result::Result<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _487) -> [return: bb211, unwind: bb251];
    }

    bb211: {
        StorageDead(_487);
        StorageDead(_485);
        StorageDead(_479);
        _564 = discriminant(_481);
        _519 = const false;
        _520 = const false;
        StorageDead(_481);
        StorageDead(_480);
        StorageDead(_478);
        goto -> bb220;
    }

    bb212: {
        StorageDead(_479);
        _477 = ((*_478).2: anchor_lang::prelude::Pubkey);
        drop(_480) -> [return: bb250, unwind: bb251];
    }

    bb213: {
        StorageDead(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = &_477;
        StorageLive(_493);
        _493 = &_489;
        _491 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _492, move _493) -> [return: bb214, unwind: bb248];
    }

    bb214: {
        switchInt(move _491) -> [0: bb219, otherwise: bb215];
    }

    bb215: {
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _498 = ConstraintHasOne;
        _497 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _498) -> [return: bb216, unwind: bb248];
    }

    bb216: {
        StorageDead(_498);
        _496 = anchor_lang::error::Error::with_account_name::<&str>(move _497, const "reserve") -> [return: bb217, unwind: bb248];
    }

    bb217: {
        StorageDead(_497);
        StorageLive(_499);
        StorageLive(_500);
        _500 = _477;
        StorageLive(_501);
        _501 = _489;
        _499 = (move _500, move _501);
        StorageDead(_501);
        StorageDead(_500);
        _495 = anchor_lang::error::Error::with_pubkeys(move _496, move _499) -> [return: bb218, unwind: bb248];
    }

    bb218: {
        StorageDead(_499);
        StorageDead(_496);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Err(move _495);
        StorageDead(_495);
        StorageDead(_491);
        StorageDead(_489);
        goto -> bb220;
    }

    bb219: {
        StorageDead(_493);
        StorageDead(_492);
        _476 = const ();
        StorageDead(_491);
        StorageDead(_489);
        StorageDead(_477);
        StorageDead(_476);
        StorageLive(_502);
        StorageLive(_503);
        _503 = move _6;
        StorageLive(_504);
        _504 = move _21;
        StorageLive(_505);
        _505 = move _36;
        StorageLive(_506);
        _506 = move _51;
        StorageLive(_507);
        _507 = move _155;
        StorageLive(_508);
        _508 = move _81;
        StorageLive(_509);
        _509 = move _96;
        _502 = handlers::handler_init_referrer_token_state::InitReferrerTokenState::<'_> { payer: move _503, lending_market: move _504, reserve: move _505, referrer: move _506, referrer_token_state: move _507, rent: move _508, system_program: move _509 };
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_506);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_503);
        _0 = std::result::Result::<handlers::handler_init_referrer_token_state::InitReferrerTokenState<'_>, anchor_lang::error::Error>::Ok(move _502);
        StorageDead(_502);
        StorageDead(_155);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb240;
    }

    bb220: {
        StorageDead(_477);
        StorageDead(_476);
        goto -> bb230;
    }

    bb221: {
        StorageDead(_456);
        _521 = const false;
        StorageDead(_453);
        drop(_450) -> [return: bb222, unwind: bb248];
    }

    bb222: {
        StorageDead(_450);
        goto -> bb223;
    }

    bb223: {
        StorageDead(_446);
        StorageDead(_445);
        goto -> bb230;
    }

    bb224: {
        StorageDead(_396);
        StorageDead(_395);
        goto -> bb229;
    }

    bb225: {
        StorageDead(_288);
        _526 = const false;
        StorageDead(_285);
        goto -> bb226;
    }

    bb226: {
        StorageDead(_257);
        goto -> bb227;
    }

    bb227: {
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_169);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb229;
    }

    bb229: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_156);
        goto -> bb230;
    }

    bb230: {
        StorageDead(_155);
        goto -> bb231;
    }

    bb231: {
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb232;
    }

    bb232: {
        StorageDead(_111);
        goto -> bb233;
    }

    bb233: {
        StorageDead(_96);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_81);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb235;
    }

    bb235: {
        drop(_51) -> [return: bb236, unwind: bb249];
    }

    bb236: {
        StorageDead(_51);
        goto -> bb237;
    }

    bb237: {
        StorageDead(_36);
        goto -> bb238;
    }

    bb238: {
        StorageDead(_21);
        goto -> bb239;
    }

    bb239: {
        StorageDead(_6);
        goto -> bb240;
    }

    bb240: {
        return;
    }

    bb241 (cleanup): {
        drop(_480) -> [return: bb251, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        drop(_456) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        drop(_450) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        drop(_429) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb245 (cleanup): {
        drop(_267) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        drop(_240) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb247 (cleanup): {
        drop(_179) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        drop(_51) -> [return: bb249, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        resume;
    }

    bb250: {
        _562 = discriminant(_481);
        _519 = const false;
        _520 = const false;
        StorageDead(_481);
        StorageDead(_480);
        StorageDead(_478);
        StorageLive(_489);
        StorageLive(_490);
        _490 = &_21;
        _489 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _490) -> [return: bb213, unwind: bb248];
    }

    bb251 (cleanup): {
        _594 = discriminant(_481);
        goto -> bb248;
    }

    bb252 (cleanup): {
        _595 = discriminant(_453);
        goto -> bb242;
    }

    bb253 (cleanup): {
        drop(_404) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb254 (cleanup): {
        switchInt(_522) -> [0: bb248, otherwise: bb253];
    }

    bb255 (cleanup): {
        _596 = discriminant(_386);
        goto -> bb248;
    }

    bb256 (cleanup): {
        _597 = discriminant(_376);
        goto -> bb248;
    }

    bb257 (cleanup): {
        _598 = discriminant(_339);
        goto -> bb261;
    }

    bb258 (cleanup): {
        drop(_342) -> [return: bb261, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        switchInt(_523) -> [0: bb261, otherwise: bb258];
    }

    bb260 (cleanup): {
        drop(_331) -> [return: bb266, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        switchInt(_524) -> [0: bb266, otherwise: bb260];
    }

    bb262 (cleanup): {
        _599 = discriminant(_293);
        goto -> bb266;
    }

    bb263 (cleanup): {
        drop(_296) -> [return: bb266, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        switchInt(_525) -> [0: bb266, otherwise: bb263];
    }

    bb265 (cleanup): {
        drop(_285) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        switchInt(_526) -> [0: bb248, otherwise: bb265];
    }

    bb267 (cleanup): {
        _600 = discriminant(_276);
        goto -> bb269;
    }

    bb268 (cleanup): {
        drop(_266) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        switchInt(_527) -> [0: bb248, otherwise: bb268];
    }

    bb270 (cleanup): {
        drop(_238) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        switchInt(_528) -> [0: bb248, otherwise: bb270];
    }

    bb272 (cleanup): {
        _601 = discriminant(_188);
        goto -> bb276;
    }

    bb273 (cleanup): {
        drop(_191) -> [return: bb276, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        switchInt(_529) -> [0: bb276, otherwise: bb273];
    }

    bb275 (cleanup): {
        drop(_178) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        switchInt(_530) -> [0: bb248, otherwise: bb275];
    }

    bb277 (cleanup): {
        drop(_148) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        switchInt(_531) -> [0: bb248, otherwise: bb277];
    }

    bb279 (cleanup): {
        _602 = discriminant(_112);
        goto -> bb248;
    }

    bb280 (cleanup): {
        _603 = discriminant(_97);
        goto -> bb248;
    }

    bb281 (cleanup): {
        _604 = discriminant(_82);
        goto -> bb248;
    }

    bb282 (cleanup): {
        _605 = discriminant(_52);
        goto -> bb249;
    }

    bb283 (cleanup): {
        _606 = discriminant(_37);
        goto -> bb249;
    }

    bb284 (cleanup): {
        _607 = discriminant(_22);
        goto -> bb249;
    }

    bb285 (cleanup): {
        _608 = discriminant(_7);
        goto -> bb249;
    }
}
