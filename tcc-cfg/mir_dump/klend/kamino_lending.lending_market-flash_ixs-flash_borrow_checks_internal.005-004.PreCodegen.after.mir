// MIR for `flash_borrow_checks_internal` after PreCodegen

fn flash_borrow_checks_internal(_1: u64, _2: &impl InstructionLoader) -> std::result::Result<(), anchor_lang::error::Error> {
    debug liquidity_amount => _1;
    debug instruction_loader => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: usize;
    let mut _4: u16;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _6: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _7: &impl InstructionLoader;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _12: u16;
    let _13: ();
    let mut _14: bool;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _16: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _17: &impl InstructionLoader;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _23: !;
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: anchor_lang::error::Error;
    let mut _28: anchor_lang::error::AnchorError;
    let mut _29: std::string::String;
    let mut _30: &LendingError;
    let _31: LendingError;
    let mut _32: u32;
    let mut _33: LendingError;
    let mut _34: std::string::String;
    let mut _35: &LendingError;
    let _36: LendingError;
    let mut _37: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _38: anchor_lang::error::ErrorOrigin;
    let mut _39: anchor_lang::error::Source;
    let mut _40: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _43: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _44: &impl InstructionLoader;
    let mut _45: usize;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _52: usize;
    let mut _53: usize;
    let mut _54: (usize, bool);
    let mut _55: &impl InstructionLoader;
    let _59: ();
    let mut _60: lending_market::ix_utils::IxIterator<'_, impl InstructionLoader>;
    let mut _61: lending_market::ix_utils::IxIterator<'_, impl InstructionLoader>;
    let mut _63: ();
    let _64: ();
    let mut _65: std::option::Option<std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>>;
    let mut _66: &mut lending_market::ix_utils::IxIterator<'_, impl InstructionLoader>;
    let mut _67: &mut lending_market::ix_utils::IxIterator<'_, impl InstructionLoader>;
    let mut _68: isize;
    let mut _69: !;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _73: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _79: ();
    let mut _80: bool;
    let mut _81: &anchor_lang::prelude::Pubkey;
    let mut _82: &anchor_lang::prelude::Pubkey;
    let _83: &anchor_lang::prelude::Pubkey;
    let mut _84: !;
    let _85: ();
    let mut _86: bool;
    let mut _87: &[u8];
    let _88: &[u8];
    let mut _89: &std::vec::Vec<u8>;
    let mut _90: std::ops::RangeTo<usize>;
    let mut _91: &[u8; 8];
    let mut _92: !;
    let _93: ();
    let mut _94: &str;
    let _95: &str;
    let mut _96: anchor_lang::error::Error;
    let mut _97: anchor_lang::error::AnchorError;
    let mut _98: std::string::String;
    let mut _99: &LendingError;
    let _100: LendingError;
    let mut _101: u32;
    let mut _102: LendingError;
    let mut _103: std::string::String;
    let mut _104: &LendingError;
    let _105: LendingError;
    let mut _106: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _107: anchor_lang::error::ErrorOrigin;
    let mut _108: anchor_lang::error::Source;
    let mut _109: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _110: bool;
    let mut _111: &[u8];
    let _112: &[u8];
    let mut _113: &std::vec::Vec<u8>;
    let mut _114: std::ops::RangeTo<usize>;
    let mut _115: &[u8; 8];
    let _116: ();
    let mut _117: bool;
    let mut _118: !;
    let _119: ();
    let mut _120: &str;
    let _121: &str;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::AnchorError;
    let mut _124: std::string::String;
    let mut _125: &LendingError;
    let _126: LendingError;
    let mut _127: u32;
    let mut _128: LendingError;
    let mut _129: std::string::String;
    let mut _130: &LendingError;
    let _131: LendingError;
    let mut _132: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _133: anchor_lang::error::ErrorOrigin;
    let mut _134: anchor_lang::error::Source;
    let mut _135: std::option::Option<anchor_lang::error::ComparedValues>;
    let _136: ();
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _138: std::result::Result<(), anchor_lang::error::Error>;
    let mut _139: u64;
    let mut _140: &solana_program::instruction::Instruction;
    let _141: &solana_program::instruction::Instruction;
    let mut _142: &solana_program::instruction::Instruction;
    let _143: &solana_program::instruction::Instruction;
    let mut _144: usize;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _150: ();
    let mut _151: bool;
    let mut _152: !;
    let _153: ();
    let mut _154: &str;
    let _155: &str;
    let mut _156: anchor_lang::error::Error;
    let mut _157: anchor_lang::error::AnchorError;
    let mut _158: std::string::String;
    let mut _159: &LendingError;
    let _160: LendingError;
    let mut _161: u32;
    let mut _162: LendingError;
    let mut _163: std::string::String;
    let mut _164: &LendingError;
    let _165: LendingError;
    let mut _166: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _167: anchor_lang::error::ErrorOrigin;
    let mut _168: anchor_lang::error::Source;
    let mut _169: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _170: ();
    let mut _179: bool;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    scope 1 {
        debug current_index => _3;
        let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _22: bool;
        let _41: solana_program::instruction::Instruction;
        let _47: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _50: solana_program::instruction::Instruction;
        let mut _171: &LendingError;
        let mut _172: &LendingError;
        scope 6 {
            debug residual => _19;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _22;
            scope 9 {
            }
        }
        scope 10 {
            debug borrow_ix => _41;
            let _51: lending_market::ix_utils::IxIterator<'_, impl InstructionLoader>;
            scope 15 {
                debug ix_iterator => _51;
                let mut _56: bool;
                scope 16 {
                    debug found_repay_ix => _56;
                    let _57: [u8; 8];
                    scope 17 {
                        debug flash_repay_discriminator => _57;
                        let _58: [u8; 8];
                        scope 18 {
                            debug flash_borrow_discriminator => _58;
                            let mut _62: lending_market::ix_utils::IxIterator<'_, impl InstructionLoader>;
                            let mut _177: &LendingError;
                            let mut _178: &LendingError;
                            scope 19 {
                                debug iter => _62;
                                let _70: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
                                scope 20 {
                                    debug ixn => _70;
                                    let _71: solana_program::instruction::Instruction;
                                    let _75: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                    let _78: solana_program::instruction::Instruction;
                                    scope 21 {
                                        debug ixn => _71;
                                        let _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _149: ();
                                        let mut _173: &LendingError;
                                        let mut _174: &LendingError;
                                        let mut _175: &LendingError;
                                        let mut _176: &LendingError;
                                        scope 26 {
                                            debug residual => _146;
                                            scope 27 {
                                            }
                                        }
                                        scope 28 {
                                            debug val => _149;
                                            scope 29 {
                                            }
                                        }
                                    }
                                    scope 22 {
                                        debug residual => _75;
                                        scope 23 {
                                        }
                                    }
                                    scope 24 {
                                        debug val => _78;
                                        scope 25 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 11 {
            debug residual => _47;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _50;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        _179 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_2);
        _6 = <impl InstructionLoader as InstructionLoader>::load_current_index(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb87];
    }

    bb2: {
        _179 = const true;
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: u16);
        _4 = _12;
        StorageDead(_12);
        _3 = <u16 as Into<usize>>::into(move _4) -> [return: bb7, unwind: bb95];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb95];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        _208 = discriminant(_5);
        _179 = const false;
        StorageDead(_5);
        goto -> bb79;
    }

    bb7: {
        StorageDead(_4);
        _180 = discriminant(_5);
        _179 = const false;
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_2);
        _16 = <impl InstructionLoader as InstructionLoader>::is_flash_forbidden_cpi_call(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        _15 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb9, unwind: bb87];
    }

    bb9: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: bool);
        _14 = _22;
        StorageDead(_22);
        switchInt(move _14) -> [0: bb89, otherwise: bb88];
    }

    bb11: {
        StorageLive(_19);
        _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _21) -> [return: bb12, unwind: bb94];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _206 = discriminant(_15);
        StorageDead(_15);
        goto -> bb78;
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _172 = const _;
        _30 = &(*_172);
        _29 = LendingError::name(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        _33 = LendingError::FlashBorrowCpi;
        _32 = <LendingError as Into<u32>>::into(move _33) -> [return: bb15, unwind: bb86];
    }

    bb15: {
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _171 = const _;
        _35 = &(*_171);
        _34 = <LendingError as ToString>::to_string(move _35) -> [return: bb16, unwind: bb86];
    }

    bb16: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 94_u32 };
        _38 = anchor_lang::error::ErrorOrigin::Source(move _39);
        StorageDead(_39);
        _37 = std::option::Option::<ErrorOrigin>::Some(move _38);
        StorageDead(_38);
        StorageLive(_40);
        _40 = std::option::Option::<ComparedValues>::None;
        _28 = anchor_lang::error::AnchorError { error_name: move _29, error_code_number: move _32, error_msg: move _34, error_origin: move _37, compared_values: move _40 };
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        _27 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _28) -> [return: bb17, unwind: bb87];
    }

    bb17: {
        StorageDead(_28);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _27);
        StorageDead(_27);
        goto -> bb78;
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _43) -> [return: bb19, unwind: bb87];
    }

    bb19: {
        StorageDead(_43);
        _46 = discriminant(_42);
        switchInt(move _46) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_50);
        _50 = move ((_42 as Continue).0: solana_program::instruction::Instruction);
        _41 = move _50;
        StorageDead(_50);
        _186 = discriminant(_42);
        StorageDead(_42);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _3;
        _54 = CheckedAdd(_53, const 1_usize);
        assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", move _53, const 1_usize) -> [success: bb23, unwind: bb85];
    }

    bb21: {
        StorageLive(_47);
        _47 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _49) -> [return: bb22, unwind: bb93];
    }

    bb22: {
        StorageDead(_49);
        StorageDead(_47);
        _204 = discriminant(_42);
        StorageDead(_42);
        goto -> bb77;
    }

    bb23: {
        _52 = move (_54.0: usize);
        StorageDead(_53);
        StorageLive(_55);
        _55 = &(*_2);
        _51 = IxIterator::<'_, impl InstructionLoader>::new_at(move _52, move _55) -> [return: bb24, unwind: bb85];
    }

    bb24: {
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_56);
        _56 = const false;
        StorageLive(_57);
        _57 = const _;
        StorageLive(_58);
        _58 = const _;
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = move _51;
        _60 = <IxIterator<'_, impl InstructionLoader> as IntoIterator>::into_iter(move _61) -> [return: bb25, unwind: bb85];
    }

    bb25: {
        StorageDead(_61);
        StorageLive(_62);
        _62 = move _60;
        goto -> bb26;
    }

    bb26: {
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &mut _62;
        _66 = &mut (*_67);
        _65 = <IxIterator<'_, impl InstructionLoader> as Iterator>::next(move _66) -> [return: bb27, unwind: bb85];
    }

    bb27: {
        StorageDead(_66);
        _68 = discriminant(_65);
        switchInt(move _68) -> [0: bb29, 1: bb28, otherwise: bb4];
    }

    bb28: {
        StorageLive(_70);
        _70 = move ((_65 as Some).0: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = move _70;
        _72 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _73) -> [return: bb30, unwind: bb92];
    }

    bb29: {
        _59 = const ();
        _188 = discriminant(_65);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_150);
        StorageLive(_151);
        _151 = _56;
        switchInt(move _151) -> [0: bb66, otherwise: bb65];
    }

    bb30: {
        StorageDead(_73);
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_78);
        _78 = move ((_72 as Continue).0: solana_program::instruction::Instruction);
        _71 = move _78;
        StorageDead(_78);
        _190 = discriminant(_72);
        StorageDead(_72);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(_71.0: anchor_lang::prelude::Pubkey);
        StorageLive(_82);
        StorageLive(_83);
        _83 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _82 = &(*_83);
        _80 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _81, move _82) -> [return: bb34, unwind: bb84];
    }

    bb32: {
        StorageLive(_75);
        _75 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_77);
        _77 = move _75;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _77) -> [return: bb33, unwind: bb91];
    }

    bb33: {
        StorageDead(_77);
        StorageDead(_75);
        _200 = discriminant(_72);
        StorageDead(_72);
        goto -> bb75;
    }

    bb34: {
        switchInt(move _80) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        drop(_71) -> [return: bb64, unwind: bb92];
    }

    bb36: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        _79 = const ();
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(_71.2: std::vec::Vec<u8>);
        StorageLive(_90);
        _90 = RangeTo::<usize> { end: const 8_usize };
        _88 = <Vec<u8> as Index<RangeTo<usize>>>::index(move _89, move _90) -> [return: bb37, unwind: bb84];
    }

    bb37: {
        _87 = &(*_88);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_91);
        _91 = &_58;
        _86 = <[u8] as PartialEq<[u8; 8]>>::eq(move _87, move _91) -> [return: bb38, unwind: bb84];
    }

    bb38: {
        switchInt(move _86) -> [0: bb45, otherwise: bb39];
    }

    bb39: {
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = const "Multiple flash borrows not allowed";
        _94 = &(*_95);
        _93 = solana_program::log::sol_log(move _94) -> [return: bb40, unwind: bb84];
    }

    bb40: {
        StorageDead(_94);
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _174 = const _;
        _99 = &(*_174);
        _98 = LendingError::name(move _99) -> [return: bb41, unwind: bb84];
    }

    bb41: {
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        _102 = LendingError::MultipleFlashBorrows;
        _101 = <LendingError as Into<u32>>::into(move _102) -> [return: bb42, unwind: bb83];
    }

    bb42: {
        StorageDead(_102);
        StorageLive(_103);
        StorageLive(_104);
        _173 = const _;
        _104 = &(*_173);
        _103 = <LendingError as ToString>::to_string(move _104) -> [return: bb43, unwind: bb83];
    }

    bb43: {
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 123_u32 };
        _107 = anchor_lang::error::ErrorOrigin::Source(move _108);
        StorageDead(_108);
        _106 = std::option::Option::<ErrorOrigin>::Some(move _107);
        StorageDead(_107);
        StorageLive(_109);
        _109 = std::option::Option::<ComparedValues>::None;
        _97 = anchor_lang::error::AnchorError { error_name: move _98, error_code_number: move _101, error_msg: move _103, error_origin: move _106, compared_values: move _109 };
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_98);
        _96 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _97) -> [return: bb44, unwind: bb84];
    }

    bb44: {
        StorageDead(_97);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _96);
        StorageDead(_96);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb74;
    }

    bb45: {
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        _85 = const ();
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(_71.2: std::vec::Vec<u8>);
        StorageLive(_114);
        _114 = RangeTo::<usize> { end: const 8_usize };
        _112 = <Vec<u8> as Index<RangeTo<usize>>>::index(move _113, move _114) -> [return: bb46, unwind: bb84];
    }

    bb46: {
        _111 = &(*_112);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_115);
        _115 = &_57;
        _110 = <[u8] as PartialEq<[u8; 8]>>::eq(move _111, move _115) -> [return: bb47, unwind: bb84];
    }

    bb47: {
        switchInt(move _110) -> [0: bb61, otherwise: bb48];
    }

    bb48: {
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _56;
        switchInt(move _117) -> [0: bb55, otherwise: bb49];
    }

    bb49: {
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = const "Multiple flash repays not allowed";
        _120 = &(*_121);
        _119 = solana_program::log::sol_log(move _120) -> [return: bb50, unwind: bb84];
    }

    bb50: {
        StorageDead(_120);
        StorageDead(_121);
        StorageDead(_119);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _176 = const _;
        _125 = &(*_176);
        _124 = LendingError::name(move _125) -> [return: bb51, unwind: bb84];
    }

    bb51: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        _128 = LendingError::MultipleFlashBorrows;
        _127 = <LendingError as Into<u32>>::into(move _128) -> [return: bb52, unwind: bb82];
    }

    bb52: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _175 = const _;
        _130 = &(*_175);
        _129 = <LendingError as ToString>::to_string(move _130) -> [return: bb53, unwind: bb82];
    }

    bb53: {
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 129_u32 };
        _133 = anchor_lang::error::ErrorOrigin::Source(move _134);
        StorageDead(_134);
        _132 = std::option::Option::<ErrorOrigin>::Some(move _133);
        StorageDead(_133);
        StorageLive(_135);
        _135 = std::option::Option::<ComparedValues>::None;
        _123 = anchor_lang::error::AnchorError { error_name: move _124, error_code_number: move _127, error_msg: move _129, error_origin: move _132, compared_values: move _135 };
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_124);
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _123) -> [return: bb54, unwind: bb84];
    }

    bb54: {
        StorageDead(_123);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _122);
        StorageDead(_122);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb73;
    }

    bb55: {
        _116 = const ();
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _1;
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_41;
        _140 = &(*_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_71;
        _142 = &(*_143);
        StorageLive(_144);
        _144 = _3;
        _138 = flash_borrow_check_matching_repay(move _139, move _140, move _142, move _144) -> [return: bb56, unwind: bb84];
    }

    bb56: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_139);
        _137 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _138) -> [return: bb57, unwind: bb84];
    }

    bb57: {
        StorageDead(_138);
        _145 = discriminant(_137);
        switchInt(move _145) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_149);
        _149 = ((_137 as Continue).0: ());
        _136 = _149;
        StorageDead(_149);
        _192 = discriminant(_137);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_136);
        _56 = const true;
        _64 = const ();
        goto -> bb62;
    }

    bb59: {
        StorageLive(_146);
        _146 = move ((_137 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_148);
        _148 = move _146;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _148) -> [return: bb60, unwind: bb90];
    }

    bb60: {
        StorageDead(_148);
        StorageDead(_146);
        _198 = discriminant(_137);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb73;
    }

    bb61: {
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_111);
        _64 = const ();
        goto -> bb62;
    }

    bb62: {
        StorageDead(_110);
        drop(_71) -> [return: bb63, unwind: bb92];
    }

    bb63: {
        StorageDead(_71);
        StorageDead(_70);
        _194 = discriminant(_65);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        _63 = const ();
        goto -> bb26;
    }

    bb64: {
        StorageDead(_71);
        StorageDead(_70);
        _196 = discriminant(_65);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb26;
    }

    bb65: {
        _150 = const ();
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_170);
        _170 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _170);
        StorageDead(_170);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_51);
        drop(_41) -> [return: bb72, unwind: bb87];
    }

    bb66: {
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = const "No flash repay found";
        _154 = &(*_155);
        _153 = solana_program::log::sol_log(move _154) -> [return: bb67, unwind: bb85];
    }

    bb67: {
        StorageDead(_154);
        StorageDead(_155);
        StorageDead(_153);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _178 = const _;
        _159 = &(*_178);
        _158 = LendingError::name(move _159) -> [return: bb68, unwind: bb85];
    }

    bb68: {
        StorageDead(_159);
        StorageLive(_161);
        StorageLive(_162);
        _162 = LendingError::NoFlashRepayFound;
        _161 = <LendingError as Into<u32>>::into(move _162) -> [return: bb69, unwind: bb81];
    }

    bb69: {
        StorageDead(_162);
        StorageLive(_163);
        StorageLive(_164);
        _177 = const _;
        _164 = &(*_177);
        _163 = <LendingError as ToString>::to_string(move _164) -> [return: bb70, unwind: bb81];
    }

    bb70: {
        StorageDead(_164);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\flash_ixs.rs", line: const 139_u32 };
        _167 = anchor_lang::error::ErrorOrigin::Source(move _168);
        StorageDead(_168);
        _166 = std::option::Option::<ErrorOrigin>::Some(move _167);
        StorageDead(_167);
        StorageLive(_169);
        _169 = std::option::Option::<ComparedValues>::None;
        _157 = anchor_lang::error::AnchorError { error_name: move _158, error_code_number: move _161, error_msg: move _163, error_origin: move _166, compared_values: move _169 };
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_158);
        _156 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _157) -> [return: bb71, unwind: bb85];
    }

    bb71: {
        StorageDead(_157);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _156);
        StorageDead(_156);
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb76;
    }

    bb72: {
        StorageDead(_41);
        StorageDead(_3);
        goto -> bb80;
    }

    bb73: {
        StorageDead(_110);
        goto -> bb74;
    }

    bb74: {
        drop(_71) -> [return: bb75, unwind: bb92];
    }

    bb75: {
        StorageDead(_71);
        StorageDead(_70);
        _202 = discriminant(_65);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_51);
        drop(_41) -> [return: bb77, unwind: bb87];
    }

    bb77: {
        StorageDead(_41);
        goto -> bb79;
    }

    bb78: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_3);
        goto -> bb80;
    }

    bb80: {
        return;
    }

    bb81 (cleanup): {
        drop(_158) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_124) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_98) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_71) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_41) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_29) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }

    bb88: {
        _182 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = const "Flash Borrow was called via CPI!";
        _25 = &(*_26);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb13, unwind continue];
    }

    bb89: {
        _184 = discriminant(_15);
        StorageDead(_15);
        _13 = const ();
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_2);
        StorageLive(_45);
        _45 = _3;
        _43 = <impl InstructionLoader as InstructionLoader>::load_instruction_at(move _44, move _45) -> [return: bb18, unwind continue];
    }

    bb90 (cleanup): {
        _210 = discriminant(_137);
        goto -> bb84;
    }

    bb91 (cleanup): {
        _211 = discriminant(_72);
        goto -> bb92;
    }

    bb92 (cleanup): {
        _212 = discriminant(_65);
        goto -> bb85;
    }

    bb93 (cleanup): {
        _213 = discriminant(_42);
        goto -> bb87;
    }

    bb94 (cleanup): {
        _214 = discriminant(_15);
        goto -> bb87;
    }

    bb95 (cleanup): {
        _215 = discriminant(_5);
        goto -> bb87;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
