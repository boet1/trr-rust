// MIR for `deposit_reserve_liquidity_and_obligation_collateral_checks` before PreCodegen

fn deposit_reserve_liquidity_and_obligation_collateral_checks(_1: &nested_accounts::DepositReserveLiquidityAndObligationCollateralAccounts<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::reserve::Reserve>>;
    let mut _4: std::result::Result<std::cell::Ref<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _10: std::cell::Ref<'_, state::reserve::Reserve>;
    let _11: ();
    let mut _12: bool;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let _14: &state::reserve::Reserve;
    let mut _15: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _16: &anchor_lang::prelude::Pubkey;
    let _17: anchor_lang::prelude::Pubkey;
    let mut _18: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _19: !;
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: anchor_lang::error::Error;
    let mut _24: anchor_lang::error::AnchorError;
    let mut _25: std::string::String;
    let mut _26: &LendingError;
    let _27: LendingError;
    let mut _28: u32;
    let mut _29: LendingError;
    let mut _30: std::string::String;
    let mut _31: &LendingError;
    let _32: LendingError;
    let mut _33: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _34: anchor_lang::error::ErrorOrigin;
    let mut _35: anchor_lang::error::Source;
    let mut _36: std::option::Option<anchor_lang::error::ComparedValues>;
    let _37: ();
    let mut _38: bool;
    let mut _39: &state::reserve::ReserveStatus;
    let _40: state::reserve::ReserveStatus;
    let mut _41: &state::reserve::ReserveConfig;
    let _42: &state::reserve::Reserve;
    let mut _43: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _44: &state::reserve::ReserveStatus;
    let _45: state::reserve::ReserveStatus;
    let mut _46: !;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: anchor_lang::error::Error;
    let mut _51: anchor_lang::error::AnchorError;
    let mut _52: std::string::String;
    let mut _53: &LendingError;
    let _54: LendingError;
    let mut _55: u32;
    let mut _56: LendingError;
    let mut _57: std::string::String;
    let mut _58: &LendingError;
    let _59: LendingError;
    let mut _60: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _61: anchor_lang::error::ErrorOrigin;
    let mut _62: anchor_lang::error::Source;
    let mut _63: std::option::Option<anchor_lang::error::ComparedValues>;
    let _64: ();
    let mut _65: bool;
    let mut _66: u64;
    let mut _67: &state::reserve::Reserve;
    let mut _68: &std::cell::Ref<'_, state::reserve::Reserve>;
    let mut _69: u64;
    let mut _70: !;
    let _71: ();
    let mut _72: &str;
    let _73: &str;
    let mut _74: anchor_lang::error::Error;
    let mut _75: anchor_lang::error::AnchorError;
    let mut _76: std::string::String;
    let mut _77: &LendingError;
    let _78: LendingError;
    let mut _79: u32;
    let mut _80: LendingError;
    let mut _81: std::string::String;
    let mut _82: &LendingError;
    let _83: LendingError;
    let mut _84: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _85: anchor_lang::error::ErrorOrigin;
    let mut _86: anchor_lang::error::Source;
    let mut _87: std::option::Option<anchor_lang::error::ComparedValues>;
    let _88: ();
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _90: std::result::Result<(), anchor_lang::error::Error>;
    let mut _91: &anchor_lang::prelude::AccountInfo<'_>;
    let _92: &anchor_lang::prelude::AccountInfo<'_>;
    let _93: anchor_lang::prelude::AccountInfo<'_>;
    let mut _94: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _95: &anchor_lang::prelude::AccountInfo<'_>;
    let _96: &anchor_lang::prelude::AccountInfo<'_>;
    let _97: anchor_lang::prelude::AccountInfo<'_>;
    let mut _98: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _104: ();
    let mut _112: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _113: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _114: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _126: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _127: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug reserve => _2;
        let _100: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _103: ();
        let mut _105: &LendingError;
        let mut _106: &LendingError;
        let mut _107: &LendingError;
        let mut _108: &LendingError;
        let mut _109: &LendingError;
        let mut _110: &LendingError;
        let mut _111: &state::reserve::ReserveStatus;
        scope 6 {
            debug residual => _100;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _103;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _4 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<Ref<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb56];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::Ref<'_, state::reserve::Reserve>);
        _2 = move _10;
        StorageDead(_10);
        _115 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_2;
        _14 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _15) -> [return: bb7, unwind: bb55];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _9) -> [return: bb6, unwind: bb58];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _121 = discriminant(_3);
        StorageDead(_3);
        goto -> bb48;
    }

    bb7: {
        StorageDead(_15);
        _13 = &(((*_14).5: state::reserve::ReserveLiquidity).1: anchor_lang::prelude::Pubkey);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _112 = deref_copy ((*_1).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _125 = (((_112.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _18 = &(*_125);
        _17 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _18) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        _16 = &_17;
        StorageDead(_18);
        _12 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _13, move _16) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        switchInt(move _12) -> [0: bb16, otherwise: bb10];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = const "Reserve liquidity supply cannot be used as the source liquidity provided";
        _21 = &(*_22);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _106 = const _;
        _26 = &(*_106);
        _25 = LendingError::name(move _26) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = LendingError::InvalidAccountInput;
        _28 = <LendingError as Into<u32>>::into(move _29) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        _105 = const _;
        _31 = &(*_105);
        _30 = <LendingError as ToString>::to_string(move _31) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 111_u32 };
        _34 = anchor_lang::error::ErrorOrigin::Source(move _35);
        StorageDead(_35);
        _33 = std::option::Option::<ErrorOrigin>::Some(move _34);
        StorageDead(_34);
        StorageLive(_36);
        _36 = std::option::Option::<ComparedValues>::None;
        _24 = anchor_lang::error::AnchorError { error_name: move _25, error_code_number: move _28, error_msg: move _30, error_origin: move _33, compared_values: move _36 };
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_25);
        _23 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _24) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        StorageDead(_24);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _23);
        StorageDead(_23);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb47;
    }

    bb16: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_2;
        _42 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _43) -> [return: bb17, unwind: bb55];
    }

    bb17: {
        StorageDead(_43);
        _41 = &((*_42).9: state::reserve::ReserveConfig);
        _40 = reserve::ReserveConfig::status(move _41) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        _39 = &_40;
        StorageDead(_41);
        StorageLive(_44);
        _111 = const _;
        _44 = &(*_111);
        _38 = <reserve::ReserveStatus as PartialEq>::eq(move _39, move _44) -> [return: bb19, unwind: bb55];
    }

    bb19: {
        switchInt(move _38) -> [0: bb26, otherwise: bb20];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = const "Reserve is not active";
        _48 = &(*_49);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _108 = const _;
        _53 = &(*_108);
        _52 = LendingError::name(move _53) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = LendingError::ReserveObsolete;
        _55 = <LendingError as Into<u32>>::into(move _56) -> [return: bb23, unwind: bb53];
    }

    bb23: {
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _107 = const _;
        _58 = &(*_107);
        _57 = <LendingError as ToString>::to_string(move _58) -> [return: bb24, unwind: bb53];
    }

    bb24: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 116_u32 };
        _61 = anchor_lang::error::ErrorOrigin::Source(move _62);
        StorageDead(_62);
        _60 = std::option::Option::<ErrorOrigin>::Some(move _61);
        StorageDead(_61);
        StorageLive(_63);
        _63 = std::option::Option::<ComparedValues>::None;
        _51 = anchor_lang::error::AnchorError { error_name: move _52, error_code_number: move _55, error_msg: move _57, error_origin: move _60, compared_values: move _63 };
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        _50 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _51) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        StorageDead(_51);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _50);
        StorageDead(_50);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb47;
    }

    bb26: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        _37 = const ();
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_2;
        _67 = <Ref<'_, reserve::Reserve> as Deref>::deref(move _68) -> [return: bb27, unwind: bb55];
    }

    bb27: {
        StorageDead(_68);
        _66 = ((*_67).0: u64);
        StorageLive(_69);
        _69 = const _ as u64 (IntToInt);
        _65 = Ne(move _66, move _69);
        switchInt(move _65) -> [0: bb34, otherwise: bb28];
    }

    bb28: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const "Reserve version does not match the program version";
        _72 = &(*_73);
        _71 = solana_program::log::sol_log(move _72) -> [return: bb29, unwind: bb55];
    }

    bb29: {
        StorageDead(_72);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _110 = const _;
        _77 = &(*_110);
        _76 = LendingError::name(move _77) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        StorageDead(_77);
        StorageLive(_79);
        StorageLive(_80);
        _80 = LendingError::ReserveDeprecated;
        _79 = <LendingError as Into<u32>>::into(move _80) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _109 = const _;
        _82 = &(*_109);
        _81 = <LendingError as ToString>::to_string(move _82) -> [return: bb32, unwind: bb52];
    }

    bb32: {
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 121_u32 };
        _85 = anchor_lang::error::ErrorOrigin::Source(move _86);
        StorageDead(_86);
        _84 = std::option::Option::<ErrorOrigin>::Some(move _85);
        StorageDead(_85);
        StorageLive(_87);
        _87 = std::option::Option::<ComparedValues>::None;
        _75 = anchor_lang::error::AnchorError { error_name: move _76, error_code_number: move _79, error_msg: move _81, error_origin: move _84, compared_values: move _87 };
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_76);
        _74 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _75) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        StorageDead(_75);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _74);
        StorageDead(_74);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb47;
    }

    bb34: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        _64 = const ();
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _113 = deref_copy ((*_1).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _126 = (((_113.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _94 = &(*_126);
        _93 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _94) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _114 = deref_copy ((*_1).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _127 = (((_114.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _98 = &(*_127);
        _97 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _98) -> [return: bb36, unwind: bb51];
    }

    bb36: {
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _90 = validate_liquidity_token_extensions(move _91, move _95) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        StorageDead(_95);
        StorageDead(_91);
        _89 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _90) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        StorageDead(_90);
        _99 = discriminant(_89);
        switchInt(move _99) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_103);
        _103 = ((_89 as Continue).0: ());
        _88 = _103;
        StorageDead(_103);
        _117 = discriminant(_89);
        drop(_97) -> [return: bb42, unwind: bb51];
    }

    bb40: {
        StorageLive(_100);
        _100 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _102) -> [return: bb41, unwind: bb57];
    }

    bb41: {
        StorageDead(_102);
        StorageDead(_100);
        _119 = discriminant(_89);
        drop(_97) -> [return: bb45, unwind: bb51];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_96);
        drop(_93) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_104);
        _104 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _104);
        StorageDead(_104);
        drop(_2) -> [return: bb44, unwind: bb56];
    }

    bb44: {
        StorageDead(_2);
        goto -> bb49;
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_96);
        drop(_93) -> [return: bb46, unwind: bb55];
    }

    bb46: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb47;
    }

    bb47: {
        drop(_2) -> [return: bb48, unwind: bb56];
    }

    bb48: {
        StorageDead(_2);
        goto -> bb49;
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_97) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_93) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_76) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_52) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_25) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_2) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57 (cleanup): {
        _123 = discriminant(_89);
        goto -> bb50;
    }

    bb58 (cleanup): {
        _124 = discriminant(_3);
        goto -> bb56;
    }
}
