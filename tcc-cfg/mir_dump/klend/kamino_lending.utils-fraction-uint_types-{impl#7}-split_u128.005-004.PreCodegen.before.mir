// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::split_u128` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::split_u128(_1: u128) -> (u64, u64) {
    debug a => _1;
    let mut _0: (u64, u64);
    let mut _2: u64;
    let mut _3: u64;
    let mut _4: u128;
    let mut _5: u128;
    let mut _6: u32;
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: u128;
    let mut _11: u128;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _6 = const 64_i32 as u32 (IntToInt);
        _7 = Lt(move _6, const 128_u32);
        assert(move _7, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = Shr(move _5, const 64_i32);
        StorageDead(_5);
        _3 = move _4 as u64 (IntToInt);
        _2 = _3;
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        _10 = BitAnd(move _11, const 18446744073709551615_u128);
        StorageDead(_11);
        _9 = move _10 as u64 (IntToInt);
        _8 = _9;
        StorageDead(_10);
        _0 = (move _2, move _8);
        StorageDead(_8);
        StorageDead(_2);
        StorageDead(_9);
        StorageDead(_3);
        return;
    }
}
