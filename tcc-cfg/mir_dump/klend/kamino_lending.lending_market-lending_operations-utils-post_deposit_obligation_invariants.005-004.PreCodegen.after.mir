// MIR for `post_deposit_obligation_invariants` after PreCodegen

fn post_deposit_obligation_invariants(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: &obligation::Obligation, _3: &reserve::Reserve, _4: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _5: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug amount => _1;
    debug obligation => _2;
    debug reserve => _3;
    debug previous_collateral_asset_mv => _4;
    debug min_accepted_net_value => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _7: &state::reserve::Reserve;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _11: u128;
    let mut _12: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _15: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _18: u128;
    let mut _19: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _20: ();
    let mut _21: bool;
    let mut _22: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: &i32;
    let _24: i32;
    let mut _25: bool;
    let mut _26: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _27: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _28: !;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 2];
    let _39: &[&str; 2];
    let _40: [&str; 2];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 2];
    let _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: [core::fmt::rt::Argument<'_>; 2];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &utils::fraction::FractionDisplay<'_>;
    let _47: &utils::fraction::FractionDisplay<'_>;
    let _48: utils::fraction::FractionDisplay<'_>;
    let mut _49: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &&str;
    let _52: &&str;
    let _53: &str;
    let mut _54: &state::reserve::Reserve;
    let mut _55: anchor_lang::error::Error;
    let mut _56: anchor_lang::error::AnchorError;
    let mut _57: std::string::String;
    let mut _58: &LendingError;
    let _59: LendingError;
    let mut _60: u32;
    let mut _61: LendingError;
    let mut _62: std::string::String;
    let mut _63: &LendingError;
    let _64: LendingError;
    let mut _65: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _66: anchor_lang::error::ErrorOrigin;
    let mut _67: anchor_lang::error::Source;
    let mut _68: std::option::Option<anchor_lang::error::ComparedValues>;
    let _69: ();
    let mut _70: bool;
    let mut _71: u128;
    let mut _72: bool;
    let mut _73: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _74: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _75: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _76: &state::obligation::Obligation;
    let mut _77: !;
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: &std::string::String;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[&str; 2];
    let _88: &[&str; 2];
    let _89: [&str; 2];
    let mut _90: &[core::fmt::rt::Argument<'_>];
    let mut _91: &[core::fmt::rt::Argument<'_>; 2];
    let _92: &[core::fmt::rt::Argument<'_>; 2];
    let _93: [core::fmt::rt::Argument<'_>; 2];
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &utils::fraction::FractionDisplay<'_>;
    let _96: &utils::fraction::FractionDisplay<'_>;
    let _97: utils::fraction::FractionDisplay<'_>;
    let mut _98: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _99: core::fmt::rt::Argument<'_>;
    let mut _100: &&str;
    let _101: &&str;
    let _102: &str;
    let mut _103: &state::reserve::Reserve;
    let mut _104: anchor_lang::error::Error;
    let mut _105: anchor_lang::error::AnchorError;
    let mut _106: std::string::String;
    let mut _107: &LendingError;
    let _108: LendingError;
    let mut _109: u32;
    let mut _110: LendingError;
    let mut _111: std::string::String;
    let mut _112: &LendingError;
    let _113: LendingError;
    let mut _114: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _115: anchor_lang::error::ErrorOrigin;
    let mut _116: anchor_lang::error::Source;
    let mut _117: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _118: ();
    scope 1 {
        debug asset_mv => _6;
        let _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug new_total_deposited_mv => _9;
            let _13: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug new_collateral_asset_mv => _13;
                let _16: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug new_ltv => _16;
                    let _35: std::string::String;
                    let _84: std::string::String;
                    let mut _119: &LendingError;
                    let mut _120: &LendingError;
                    let mut _121: &[&str; 2];
                    let mut _122: &LendingError;
                    let mut _123: &LendingError;
                    let mut _124: &[&str; 2];
                    let mut _125: &i32;
                    scope 5 {
                        debug res => _35;
                    }
                    scope 6 {
                        debug res => _84;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_3);
        StorageLive(_8);
        _8 = _1;
        _6 = calculate_market_value_from_liquidity_amount(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_2).6: u128);
        _10 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        _12 = _6;
        _9 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _10, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _4;
        StorageLive(_15);
        _15 = _6;
        _13 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _14, move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_2).8: u128);
        _17 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = _9;
        _16 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _17, move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_13;
        StorageLive(_23);
        _125 = const _;
        _23 = &(*_125);
        _21 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd<i32>>::gt(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _21) -> [0: bb25, otherwise: bb8];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &_13;
        StorageLive(_27);
        _27 = &_5;
        _25 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _26, move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _25) -> [0: bb24, otherwise: bb10];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _121 = const _;
        _39 = &(*_121);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_13;
        _48 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _49) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _46) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_46);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_3);
        _53 = reserve::Reserve::token_symbol(move _54) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _51) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_51);
        _44 = [move _45, move _50];
        StorageDead(_50);
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <std::string::String as Deref>::deref(move _32) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        StorageDead(_30);
        drop(_34) -> [return: bb19, unwind: bb53];
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _120 = const _;
        _58 = &(*_120);
        _57 = LendingError::name(move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        _61 = LendingError::NetValueRemainingTooSmall;
        _60 = <LendingError as Into<u32>>::into(move _61) -> [return: bb21, unwind: bb51];
    }

    bb21: {
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        _119 = const _;
        _63 = &(*_119);
        _62 = <LendingError as ToString>::to_string(move _63) -> [return: bb22, unwind: bb51];
    }

    bb22: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2785_u32 };
        _66 = anchor_lang::error::ErrorOrigin::Source(move _67);
        StorageDead(_67);
        _65 = std::option::Option::<ErrorOrigin>::Some(move _66);
        StorageDead(_66);
        StorageLive(_68);
        _68 = std::option::Option::<ComparedValues>::None;
        _56 = anchor_lang::error::AnchorError { error_name: move _57, error_code_number: move _60, error_msg: move _62, error_origin: move _65, compared_values: move _68 };
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_57);
        _55 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _56) -> [return: bb23, unwind: bb53];
    }

    bb23: {
        StorageDead(_56);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _55);
        StorageDead(_55);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb47;
    }

    bb24: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb26;
    }

    bb26: {
        _20 = const ();
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = ((*_2).6: u128);
        _70 = Ne(move _71, const 0_u128);
        switchInt(move _70) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_16;
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_2);
        _75 = obligation::Obligation::loan_to_value(move _76) -> [return: bb29, unwind continue];
    }

    bb28: {
        StorageDead(_71);
        _69 = const ();
        goto -> bb46;
    }

    bb29: {
        _74 = &_75;
        StorageDead(_76);
        _72 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _73, move _74) -> [return: bb30, unwind continue];
    }

    bb30: {
        switchInt(move _72) -> [0: bb45, otherwise: bb31];
    }

    bb31: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _124 = const _;
        _88 = &(*_124);
        _87 = &(*_88);
        _86 = move _87 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_16;
        _97 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _98) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _95) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_95);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_3);
        _102 = reserve::Reserve::token_symbol(move _103) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_103);
        _101 = &_102;
        _100 = &(*_101);
        _99 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _100) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_100);
        _93 = [move _94, move _99];
        StorageDead(_99);
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_91);
        _85 = Arguments::<'_>::new_v1(move _86, move _90) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = format(move _85) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        _83 = move _84;
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <std::string::String as Deref>::deref(move _81) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        StorageDead(_79);
        drop(_83) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _123 = const _;
        _107 = &(*_123);
        _106 = LendingError::name(move _107) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_107);
        StorageLive(_109);
        StorageLive(_110);
        _110 = LendingError::WorseLtvBlocked;
        _109 = <LendingError as Into<u32>>::into(move _110) -> [return: bb42, unwind: bb49];
    }

    bb42: {
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        _122 = const _;
        _112 = &(*_122);
        _111 = <LendingError as ToString>::to_string(move _112) -> [return: bb43, unwind: bb49];
    }

    bb43: {
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 2797_u32 };
        _115 = anchor_lang::error::ErrorOrigin::Source(move _116);
        StorageDead(_116);
        _114 = std::option::Option::<ErrorOrigin>::Some(move _115);
        StorageDead(_115);
        StorageLive(_117);
        _117 = std::option::Option::<ComparedValues>::None;
        _105 = anchor_lang::error::AnchorError { error_name: move _106, error_code_number: move _109, error_msg: move _111, error_origin: move _114, compared_values: move _117 };
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_106);
        _104 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _105) -> [return: bb44, unwind: bb53];
    }

    bb44: {
        StorageDead(_105);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _104);
        StorageDead(_104);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb47;
    }

    bb45: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        _69 = const ();
        StorageDead(_72);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_118);
        _118 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _118);
        StorageDead(_118);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_106) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_83) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_57) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_34) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }
}
