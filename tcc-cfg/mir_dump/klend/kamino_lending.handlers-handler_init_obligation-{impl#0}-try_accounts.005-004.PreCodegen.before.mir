// MIR for `handlers::handler_init_obligation::<impl at programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18>::try_accounts` before PreCodegen

fn handlers::handler_init_obligation::<impl at programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitObligationBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, handlers::handler_init_obligation::InitObligationBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, handlers::handler_init_obligation::InitObligationBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, handlers::handler_init_obligation::InitObligationBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, handlers::handler_init_obligation::InitObligationBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _37: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _50: ();
    let mut _51: bool;
    let mut _52: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _53: !;
    let mut _54: anchor_lang::error::Error;
    let mut _55: anchor_lang::error::ErrorCode;
    let _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: &[anchor_lang::prelude::AccountInfo<'_>];
    let _61: &[anchor_lang::prelude::AccountInfo<'_>];
    let _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _63: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: std::ops::RangeFrom<usize>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _67: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _82: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>>;
    let mut _112: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _127: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _128: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _129: &anchor_lang::prelude::Pubkey;
    let mut _130: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _131: &[u8];
    let mut _132: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _133: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _134: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _142: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _143: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let mut _145: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _146: &[u8];
    let mut _147: &mut handlers::handler_init_obligation::InitObligationBumps;
    let mut _148: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _149: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _157: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _165: (anchor_lang::prelude::Pubkey, u8);
    let mut _166: &[&[u8]];
    let mut _167: &[&[u8]; 6];
    let _168: &[&[u8]; 6];
    let _169: [&[u8]; 6];
    let mut _170: &[u8];
    let mut _171: &[u8; 1];
    let _172: &[u8; 1];
    let _173: [u8; 1];
    let mut _174: u8;
    let mut _175: &[u8];
    let mut _176: &[u8; 1];
    let _177: &[u8; 1];
    let _178: [u8; 1];
    let mut _179: u8;
    let mut _180: &[u8];
    let _181: &[u8];
    let mut _182: &anchor_lang::prelude::Pubkey;
    let _183: anchor_lang::prelude::Pubkey;
    let mut _184: &anchor_lang::prelude::Signer<'_>;
    let mut _185: &[u8];
    let _186: &[u8];
    let mut _187: &anchor_lang::prelude::Pubkey;
    let _188: anchor_lang::prelude::Pubkey;
    let mut _189: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _190: &[u8];
    let _191: &[u8];
    let mut _192: &anchor_lang::prelude::Pubkey;
    let _193: anchor_lang::prelude::Pubkey;
    let mut _194: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _195: &[u8];
    let _196: &[u8];
    let mut _197: &anchor_lang::prelude::Pubkey;
    let _198: anchor_lang::prelude::Pubkey;
    let mut _199: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _200: &anchor_lang::prelude::Pubkey;
    let mut _201: u8;
    let _202: ();
    let mut _203: bool;
    let mut _204: &anchor_lang::prelude::Pubkey;
    let _205: anchor_lang::prelude::Pubkey;
    let mut _206: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _207: &anchor_lang::prelude::Pubkey;
    let mut _208: !;
    let mut _209: anchor_lang::error::Error;
    let mut _210: anchor_lang::error::Error;
    let mut _211: anchor_lang::error::Error;
    let mut _212: anchor_lang::error::ErrorCode;
    let mut _213: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _214: anchor_lang::prelude::Pubkey;
    let mut _215: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _216: anchor_lang::prelude::Pubkey;
    let mut _219: &&anchor_lang::prelude::AccountInfo<'_>;
    let _220: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _223: (usize, bool);
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: &&anchor_lang::prelude::Pubkey;
    let mut _228: &&anchor_lang::prelude::Pubkey;
    let _229: &anchor_lang::prelude::Pubkey;
    let _230: anchor_lang::prelude::Pubkey;
    let mut _232: &anchor_lang::prelude::AccountInfo<'_>;
    let _233: ();
    let mut _234: bool;
    let mut _235: u64;
    let mut _238: &anchor_lang::prelude::Rent;
    let mut _239: usize;
    let mut _241: anchor_lang::prelude::AccountInfo<'_>;
    let mut _242: &anchor_lang::prelude::Signer<'_>;
    let mut _243: anchor_lang::prelude::AccountInfo<'_>;
    let mut _244: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _246: anchor_lang::prelude::AccountInfo<'_>;
    let mut _247: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _248: anchor_lang::system_program::CreateAccount<'_>;
    let _249: ();
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _251: std::result::Result<(), anchor_lang::error::Error>;
    let mut _252: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _253: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _254: &[&[&[u8]]];
    let mut _255: &[&[&[u8]]; 1];
    let _256: &[&[&[u8]]; 1];
    let _257: [&[&[u8]]; 1];
    let mut _258: &[&[u8]];
    let _259: &[&[u8]];
    let _260: &[&[u8]];
    let mut _261: &[&[u8]; 7];
    let _262: [&[u8]; 7];
    let mut _263: &[u8];
    let mut _264: &[u8; 1];
    let _265: &[u8; 1];
    let _266: [u8; 1];
    let mut _267: u8;
    let mut _268: &[u8];
    let mut _269: &[u8; 1];
    let _270: &[u8; 1];
    let _271: [u8; 1];
    let mut _272: u8;
    let mut _273: &[u8];
    let mut _274: &anchor_lang::prelude::Pubkey;
    let _275: anchor_lang::prelude::Pubkey;
    let mut _276: &anchor_lang::prelude::Signer<'_>;
    let mut _277: &[u8];
    let _278: &[u8];
    let mut _279: &anchor_lang::prelude::Pubkey;
    let _280: anchor_lang::prelude::Pubkey;
    let mut _281: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _282: &[u8];
    let _283: &[u8];
    let mut _284: &anchor_lang::prelude::Pubkey;
    let _285: anchor_lang::prelude::Pubkey;
    let mut _286: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _287: &[u8];
    let _288: &[u8];
    let mut _289: &anchor_lang::prelude::Pubkey;
    let _290: anchor_lang::prelude::Pubkey;
    let mut _291: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _292: &[u8];
    let _293: &[u8];
    let _294: &[u8];
    let mut _295: &[u8; 1];
    let _296: [u8; 1];
    let mut _297: u8;
    let mut _298: std::ops::RangeFull;
    let mut _299: std::ops::RangeFull;
    let mut _300: u64;
    let mut _301: u64;
    let mut _302: usize;
    let mut _303: &anchor_lang::prelude::Pubkey;
    let mut _304: isize;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _309: ();
    let mut _310: bool;
    let mut _311: &anchor_lang::prelude::Pubkey;
    let _312: anchor_lang::prelude::Pubkey;
    let mut _313: &anchor_lang::prelude::Signer<'_>;
    let mut _314: &anchor_lang::prelude::Pubkey;
    let _315: anchor_lang::prelude::Pubkey;
    let mut _316: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _317: !;
    let mut _318: anchor_lang::error::Error;
    let mut _319: anchor_lang::error::Error;
    let mut _320: anchor_lang::error::AnchorError;
    let mut _321: std::string::String;
    let mut _322: &anchor_lang::error::ErrorCode;
    let _323: anchor_lang::error::ErrorCode;
    let mut _324: u32;
    let mut _325: anchor_lang::error::ErrorCode;
    let mut _326: std::string::String;
    let mut _327: &anchor_lang::error::ErrorCode;
    let _328: anchor_lang::error::ErrorCode;
    let mut _329: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _330: anchor_lang::error::ErrorOrigin;
    let mut _331: anchor_lang::error::Source;
    let mut _332: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _333: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _334: anchor_lang::prelude::Pubkey;
    let mut _335: &anchor_lang::prelude::Signer<'_>;
    let mut _336: anchor_lang::prelude::Pubkey;
    let mut _337: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _339: u64;
    let mut _340: u64;
    let mut _341: &anchor_lang::prelude::Rent;
    let mut _342: usize;
    let mut _343: u64;
    let _344: ();
    let mut _345: bool;
    let mut _346: u64;
    let mut _348: anchor_lang::prelude::AccountInfo<'_>;
    let mut _349: &anchor_lang::prelude::Signer<'_>;
    let mut _350: anchor_lang::prelude::AccountInfo<'_>;
    let mut _351: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _353: anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _355: anchor_lang::system_program::Transfer<'_>;
    let _356: ();
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _358: std::result::Result<(), anchor_lang::error::Error>;
    let mut _359: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _360: u64;
    let mut _361: isize;
    let mut _363: !;
    let mut _364: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _367: anchor_lang::prelude::AccountInfo<'_>;
    let mut _368: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _370: anchor_lang::prelude::AccountInfo<'_>;
    let mut _371: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _372: anchor_lang::system_program::Allocate<'_>;
    let _373: ();
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _375: std::result::Result<(), anchor_lang::error::Error>;
    let mut _376: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _377: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _378: &[&[&[u8]]];
    let mut _379: &[&[&[u8]]; 1];
    let _380: &[&[&[u8]]; 1];
    let _381: [&[&[u8]]; 1];
    let mut _382: &[&[u8]];
    let _383: &[&[u8]];
    let _384: &[&[u8]];
    let mut _385: &[&[u8]; 7];
    let _386: [&[u8]; 7];
    let mut _387: &[u8];
    let mut _388: &[u8; 1];
    let _389: &[u8; 1];
    let _390: [u8; 1];
    let mut _391: u8;
    let mut _392: &[u8];
    let mut _393: &[u8; 1];
    let _394: &[u8; 1];
    let _395: [u8; 1];
    let mut _396: u8;
    let mut _397: &[u8];
    let mut _398: &anchor_lang::prelude::Pubkey;
    let _399: anchor_lang::prelude::Pubkey;
    let mut _400: &anchor_lang::prelude::Signer<'_>;
    let mut _401: &[u8];
    let _402: &[u8];
    let mut _403: &anchor_lang::prelude::Pubkey;
    let _404: anchor_lang::prelude::Pubkey;
    let mut _405: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _406: &[u8];
    let _407: &[u8];
    let mut _408: &anchor_lang::prelude::Pubkey;
    let _409: anchor_lang::prelude::Pubkey;
    let mut _410: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _411: &[u8];
    let _412: &[u8];
    let mut _413: &anchor_lang::prelude::Pubkey;
    let _414: anchor_lang::prelude::Pubkey;
    let mut _415: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _416: &[u8];
    let _417: &[u8];
    let _418: &[u8];
    let mut _419: &[u8; 1];
    let _420: [u8; 1];
    let mut _421: u8;
    let mut _422: std::ops::RangeFull;
    let mut _423: std::ops::RangeFull;
    let mut _424: u64;
    let mut _425: usize;
    let mut _426: isize;
    let mut _428: !;
    let mut _429: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _432: anchor_lang::prelude::AccountInfo<'_>;
    let mut _433: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _435: anchor_lang::prelude::AccountInfo<'_>;
    let mut _436: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _437: anchor_lang::system_program::Assign<'_>;
    let _438: ();
    let mut _439: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _440: std::result::Result<(), anchor_lang::error::Error>;
    let mut _441: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _442: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _443: &[&[&[u8]]];
    let mut _444: &[&[&[u8]]; 1];
    let _445: &[&[&[u8]]; 1];
    let _446: [&[&[u8]]; 1];
    let mut _447: &[&[u8]];
    let _448: &[&[u8]];
    let _449: &[&[u8]];
    let mut _450: &[&[u8]; 7];
    let _451: [&[u8]; 7];
    let mut _452: &[u8];
    let mut _453: &[u8; 1];
    let _454: &[u8; 1];
    let _455: [u8; 1];
    let mut _456: u8;
    let mut _457: &[u8];
    let mut _458: &[u8; 1];
    let _459: &[u8; 1];
    let _460: [u8; 1];
    let mut _461: u8;
    let mut _462: &[u8];
    let mut _463: &anchor_lang::prelude::Pubkey;
    let _464: anchor_lang::prelude::Pubkey;
    let mut _465: &anchor_lang::prelude::Signer<'_>;
    let mut _466: &[u8];
    let _467: &[u8];
    let mut _468: &anchor_lang::prelude::Pubkey;
    let _469: anchor_lang::prelude::Pubkey;
    let mut _470: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _471: &[u8];
    let _472: &[u8];
    let mut _473: &anchor_lang::prelude::Pubkey;
    let _474: anchor_lang::prelude::Pubkey;
    let mut _475: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _476: &[u8];
    let _477: &[u8];
    let mut _478: &anchor_lang::prelude::Pubkey;
    let _479: anchor_lang::prelude::Pubkey;
    let mut _480: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _481: &[u8];
    let _482: &[u8];
    let _483: &[u8];
    let mut _484: &[u8; 1];
    let _485: [u8; 1];
    let mut _486: u8;
    let mut _487: std::ops::RangeFull;
    let mut _488: std::ops::RangeFull;
    let mut _489: &anchor_lang::prelude::Pubkey;
    let mut _490: isize;
    let mut _492: !;
    let mut _493: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _495: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _496: &anchor_lang::prelude::Pubkey;
    let mut _497: &anchor_lang::prelude::AccountInfo<'_>;
    let _498: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _499: isize;
    let mut _502: !;
    let mut _503: anchor_lang::error::Error;
    let mut _504: anchor_lang::error::Error;
    let mut _505: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>, anchor_lang::error::Error>;
    let mut _506: &anchor_lang::prelude::AccountInfo<'_>;
    let _507: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _508: isize;
    let mut _511: !;
    let mut _512: anchor_lang::error::Error;
    let mut _513: anchor_lang::error::Error;
    let _514: ();
    let mut _515: bool;
    let _516: ();
    let mut _517: bool;
    let mut _518: usize;
    let mut _519: usize;
    let mut _520: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _521: !;
    let mut _522: anchor_lang::error::Error;
    let mut _523: anchor_lang::error::Error;
    let mut _524: anchor_lang::error::Error;
    let mut _525: anchor_lang::error::ErrorCode;
    let mut _526: (usize, usize);
    let mut _527: usize;
    let mut _528: usize;
    let mut _529: &anchor_lang::prelude::AccountInfo<'_>;
    let _530: ();
    let mut _531: bool;
    let mut _532: &&anchor_lang::prelude::Pubkey;
    let mut _533: &&anchor_lang::prelude::Pubkey;
    let mut _534: !;
    let mut _535: anchor_lang::error::Error;
    let mut _536: anchor_lang::error::Error;
    let mut _537: anchor_lang::error::Error;
    let mut _538: anchor_lang::error::ErrorCode;
    let mut _539: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _540: anchor_lang::prelude::Pubkey;
    let mut _541: anchor_lang::prelude::Pubkey;
    let mut _543: &anchor_lang::prelude::Rent;
    let mut _544: usize;
    let mut _545: bool;
    let mut _546: u64;
    let mut _547: &anchor_lang::prelude::AccountInfo<'_>;
    let _548: anchor_lang::prelude::AccountInfo<'_>;
    let mut _549: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _550: u64;
    let mut _551: !;
    let mut _552: anchor_lang::error::Error;
    let mut _553: anchor_lang::error::Error;
    let mut _554: anchor_lang::error::ErrorCode;
    let _555: ();
    let mut _556: bool;
    let mut _557: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _558: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let _559: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _560: !;
    let mut _561: anchor_lang::error::Error;
    let mut _562: anchor_lang::error::Error;
    let mut _563: anchor_lang::error::ErrorCode;
    let _564: ();
    let mut _565: bool;
    let mut _566: &anchor_lang::prelude::Rent;
    let mut _567: u64;
    let mut _568: &anchor_lang::prelude::AccountInfo<'_>;
    let _569: anchor_lang::prelude::AccountInfo<'_>;
    let mut _570: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _571: usize;
    let mut _572: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _573: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _574: &anchor_lang::prelude::AccountInfo<'_>;
    let _575: anchor_lang::prelude::AccountInfo<'_>;
    let mut _576: &anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _577: isize;
    let mut _579: !;
    let mut _580: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _582: !;
    let mut _583: anchor_lang::error::Error;
    let mut _584: anchor_lang::error::Error;
    let mut _585: anchor_lang::error::ErrorCode;
    let _586: ();
    let mut _587: bool;
    let mut _588: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _589: &anchor_lang::prelude::Signer<'_>;
    let _590: &anchor_lang::prelude::Signer<'_>;
    let mut _591: !;
    let mut _592: anchor_lang::error::Error;
    let mut _593: anchor_lang::error::Error;
    let mut _594: anchor_lang::error::ErrorCode;
    let mut _596: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _597: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _598: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _599: &[&[u8]];
    let mut _600: &[&[u8]; 3];
    let _601: &[&[u8]; 3];
    let _602: [&[u8]; 3];
    let mut _603: &[u8];
    let _604: &[u8];
    let mut _605: &[u8];
    let _606: &[u8];
    let mut _607: &anchor_lang::prelude::Pubkey;
    let _608: anchor_lang::prelude::Pubkey;
    let mut _609: &anchor_lang::prelude::Signer<'_>;
    let mut _610: &[u8];
    let _611: &[u8];
    let _612: &[u8];
    let mut _613: &[u8; 1];
    let _614: [u8; 1];
    let mut _615: u8;
    let mut _616: std::result::Result<u8, std::num::TryFromIntError>;
    let mut _617: u64;
    let mut _618: &state::referral::UserMetadata;
    let mut _619: &std::cell::Ref<'_, state::referral::UserMetadata>;
    let _620: std::cell::Ref<'_, state::referral::UserMetadata>;
    let mut _621: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::referral::UserMetadata>>;
    let mut _622: std::result::Result<std::cell::Ref<'_, state::referral::UserMetadata>, anchor_lang::error::Error>;
    let mut _623: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _624: isize;
    let mut _626: !;
    let mut _627: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _629: std::ops::RangeFull;
    let mut _630: &anchor_lang::prelude::Pubkey;
    let _631: &&anchor_lang::prelude::Pubkey;
    let mut _632: {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
    let mut _633: isize;
    let mut _635: !;
    let mut _636: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _638: ();
    let mut _639: bool;
    let mut _640: &anchor_lang::prelude::Pubkey;
    let _641: anchor_lang::prelude::Pubkey;
    let mut _642: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _643: &anchor_lang::prelude::Pubkey;
    let mut _644: !;
    let mut _645: anchor_lang::error::Error;
    let mut _646: anchor_lang::error::Error;
    let mut _647: anchor_lang::error::Error;
    let mut _648: anchor_lang::error::ErrorCode;
    let mut _649: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _650: anchor_lang::prelude::Pubkey;
    let mut _651: &anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _652: anchor_lang::prelude::Pubkey;
    let mut _653: handlers::handler_init_obligation::InitObligation<'_>;
    let mut _654: anchor_lang::prelude::Signer<'_>;
    let mut _655: anchor_lang::prelude::Signer<'_>;
    let mut _656: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
    let mut _657: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _658: anchor_lang::prelude::AccountInfo<'_>;
    let mut _659: anchor_lang::prelude::AccountInfo<'_>;
    let mut _660: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
    let mut _661: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _662: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _666: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _667: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _668: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _669: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _670: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _671: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _672: &anchor_lang::prelude::Pubkey;
    let mut _673: bool;
    let mut _674: bool;
    let mut _675: bool;
    let mut _676: bool;
    let mut _677: bool;
    let mut _678: bool;
    let mut _679: bool;
    let mut _680: bool;
    let mut _681: bool;
    let mut _682: bool;
    let mut _683: bool;
    let mut _684: bool;
    let mut _685: bool;
    let mut _686: bool;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: isize;
    let mut _702: isize;
    let mut _703: isize;
    let mut _704: isize;
    let mut _705: isize;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    let mut _726: isize;
    let mut _727: isize;
    let mut _728: isize;
    let mut _729: isize;
    let mut _730: isize;
    let mut _731: isize;
    let mut _732: isize;
    let mut _733: isize;
    let mut _734: isize;
    let mut _735: isize;
    let mut _736: isize;
    let mut _737: isize;
    let mut _738: isize;
    let mut _739: isize;
    let mut _740: isize;
    let mut _741: isize;
    let mut _742: isize;
    let mut _743: isize;
    let mut _744: isize;
    let mut _745: isize;
    let mut _746: isize;
    let mut _747: isize;
    let mut _748: isize;
    let mut _749: isize;
    let mut _750: isize;
    let mut _751: isize;
    let mut _752: isize;
    let mut _753: isize;
    let mut _754: isize;
    let mut _755: isize;
    let mut _756: isize;
    let mut _757: isize;
    let mut _758: isize;
    let mut _759: isize;
    let mut _760: isize;
    let mut _761: isize;
    let mut _762: isize;
    let mut _763: isize;
    let mut _764: isize;
    let mut _765: isize;
    let mut _766: isize;
    let mut _767: isize;
    let mut _768: isize;
    let mut _769: isize;
    let mut _770: isize;
    let mut _771: isize;
    let mut _772: isize;
    let mut _773: isize;
    let mut _774: isize;
    let mut _775: isize;
    let mut _776: isize;
    let mut _777: isize;
    let mut _778: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: state::obligation::InitObligationArgs;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, handlers::handler_init_obligation::InitObligationBumps>>::try_accounts::__Args;
        scope 2 {
            debug args => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug obligation_owner => _20;
                let _35: anchor_lang::prelude::Signer<'_>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::Signer<'_>;
                scope 12 {
                    debug fee_payer => _35;
                    let _56: &anchor_lang::prelude::AccountInfo<'_>;
                    scope 17 {
                        debug obligation => _56;
                        let _65: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
                        scope 18 {
                            debug lending_market => _65;
                            let _80: anchor_lang::prelude::AccountInfo<'_>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::AccountInfo<'_>;
                            scope 23 {
                                debug seed1_account => _80;
                                let _95: anchor_lang::prelude::AccountInfo<'_>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::AccountInfo<'_>;
                                scope 28 {
                                    debug seed2_account => _95;
                                    let _110: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>;
                                    scope 33 {
                                        debug owner_user_metadata => _110;
                                        let _125: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                        let _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _139: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                        scope 38 {
                                            debug rent => _125;
                                            let _140: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                            let _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _154: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                            scope 43 {
                                                debug system_program => _140;
                                                let _155: anchor_lang::prelude::Rent;
                                                let _159: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _162: anchor_lang::prelude::Rent;
                                                scope 48 {
                                                    debug __anchor_rent => _155;
                                                    let _163: anchor_lang::prelude::Pubkey;
                                                    let _164: u8;
                                                    scope 53 {
                                                        debug __pda_address => _163;
                                                        debug __bump => _164;
                                                        let _217: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
                                                        let _218: &anchor_lang::prelude::AccountInfo<'_>;
                                                        scope 54 {
                                                            debug obligation => _217;
                                                            let _578: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _581: usize;
                                                            let _595: anchor_lang::prelude::Pubkey;
                                                            let _625: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _628: std::cell::Ref<'_, state::referral::UserMetadata>;
                                                            let _634: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _637: anchor_lang::prelude::Pubkey;
                                                            scope 92 {
                                                                debug residual => _578;
                                                                scope 93 {
                                                                }
                                                            }
                                                            scope 94 {
                                                                debug val => _581;
                                                                scope 95 {
                                                                }
                                                            }
                                                            scope 96 {
                                                                debug __pda_address => _595;
                                                            }
                                                            scope 97 {
                                                                debug residual => _625;
                                                                scope 98 {
                                                                }
                                                            }
                                                            scope 99 {
                                                                debug val => _628;
                                                                scope 100 {
                                                                }
                                                            }
                                                            scope 101 {
                                                                debug residual => _634;
                                                                scope 102 {
                                                                }
                                                            }
                                                            scope 103 {
                                                                debug val => _637;
                                                                scope 104 {
                                                                }
                                                            }
                                                        }
                                                        scope 55 {
                                                            debug actual_field => _218;
                                                            let _221: &anchor_lang::prelude::Pubkey;
                                                            scope 56 {
                                                                debug actual_owner => _221;
                                                                let _222: usize;
                                                                scope 57 {
                                                                    debug space => _222;
                                                                    let _224: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
                                                                    let _231: u64;
                                                                    let _509: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
                                                                    let _510: anchor_lang::error::Error;
                                                                    let mut _665: &&anchor_lang::prelude::Pubkey;
                                                                    scope 58 {
                                                                        debug pa => _224;
                                                                        let _542: u64;
                                                                        scope 91 {
                                                                            debug required_lamports => _542;
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug __current_lamports => _231;
                                                                        let _236: usize;
                                                                        let _338: u64;
                                                                        let _500: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>;
                                                                        let _501: anchor_lang::error::Error;
                                                                        let mut _663: &anchor_lang::error::ErrorCode;
                                                                        let mut _664: &anchor_lang::error::ErrorCode;
                                                                        scope 60 {
                                                                            debug space => _236;
                                                                            let _237: u64;
                                                                            scope 61 {
                                                                                debug lamports => _237;
                                                                                let _240: anchor_lang::system_program::CreateAccount<'_>;
                                                                                scope 62 {
                                                                                    debug cpi_accounts => _240;
                                                                                    let _245: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                    scope 63 {
                                                                                        debug cpi_context => _245;
                                                                                        let _305: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _308: ();
                                                                                        scope 64 {
                                                                                            debug residual => _305;
                                                                                            scope 65 {
                                                                                            }
                                                                                        }
                                                                                        scope 66 {
                                                                                            debug val => _308;
                                                                                            scope 67 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 68 {
                                                                            debug required_lamports => _338;
                                                                            let _347: anchor_lang::system_program::Transfer<'_>;
                                                                            let _366: anchor_lang::system_program::Allocate<'_>;
                                                                            scope 69 {
                                                                                debug cpi_accounts => _347;
                                                                                let _352: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                scope 70 {
                                                                                    debug cpi_context => _352;
                                                                                    let _362: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _365: ();
                                                                                    scope 71 {
                                                                                        debug residual => _362;
                                                                                        scope 72 {
                                                                                        }
                                                                                    }
                                                                                    scope 73 {
                                                                                        debug val => _365;
                                                                                        scope 74 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 75 {
                                                                                debug cpi_accounts => _366;
                                                                                let _369: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                scope 76 {
                                                                                    debug cpi_context => _369;
                                                                                    let _427: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _430: ();
                                                                                    let _431: anchor_lang::system_program::Assign<'_>;
                                                                                    scope 77 {
                                                                                        debug residual => _427;
                                                                                        scope 78 {
                                                                                        }
                                                                                    }
                                                                                    scope 79 {
                                                                                        debug val => _430;
                                                                                        scope 80 {
                                                                                        }
                                                                                    }
                                                                                    scope 81 {
                                                                                        debug cpi_accounts => _431;
                                                                                        let _434: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                        scope 82 {
                                                                                            debug cpi_context => _434;
                                                                                            let _491: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _494: ();
                                                                                            scope 83 {
                                                                                                debug residual => _491;
                                                                                                scope 84 {
                                                                                                }
                                                                                            }
                                                                                            scope 85 {
                                                                                                debug val => _494;
                                                                                                scope 86 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 87 {
                                                                            debug val => _500;
                                                                        }
                                                                        scope 88 {
                                                                            debug e => _501;
                                                                        }
                                                                    }
                                                                    scope 89 {
                                                                        debug val => _509;
                                                                    }
                                                                    scope 90 {
                                                                        debug e => _510;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 49 {
                                                    debug residual => _159;
                                                    scope 50 {
                                                    }
                                                }
                                                scope 51 {
                                                    debug val => _162;
                                                    scope 52 {
                                                    }
                                                }
                                            }
                                            scope 44 {
                                                debug residual => _151;
                                                scope 45 {
                                                }
                                            }
                                            scope 46 {
                                                debug val => _154;
                                                scope 47 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _136;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _139;
                                            scope 42 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _121;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _124;
                                        scope 37 {
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _106;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _109;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _91;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _94;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _686 = const false;
        _685 = const false;
        _684 = const false;
        _683 = const false;
        _682 = const false;
        _681 = const false;
        _680 = const false;
        _679 = const false;
        _678 = const false;
        _677 = const false;
        _675 = const false;
        _676 = const false;
        _674 = const false;
        _673 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, InitObligationBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _10 = std::result::Result::<<handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, InitObligationBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _11, move _14) -> [return: bb2, unwind: bb298];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, InitObligationBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <handlers::handler_init_obligation::InitObligation<'info> as anchor_lang::Accounts<'info, handlers::handler_init_obligation::InitObligationBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = move (_8.0: state::obligation::InitObligationArgs);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb287;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _23, move _29) -> [return: bb9, unwind: bb298];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb298];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _687 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb340];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _759 = discriminant(_21);
        StorageDead(_21);
        goto -> bb286;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _37 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _38, move _44) -> [return: bb15, unwind: bb298];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb298];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _35 = move _49;
        StorageDead(_49);
        _689 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _666 = deref_copy (*_2);
        _52 = &(*_666);
        _51 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _52) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb339];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _757 = discriminant(_36);
        StorageDead(_36);
        goto -> bb285;
    }

    bb20: {
        switchInt(move _51) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        _55 = AccountNotEnoughKeys;
        _54 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _55) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_55);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _54);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb285;
    }

    bb23: {
        StorageDead(_52);
        _50 = const ();
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_56);
        StorageLive(_57);
        _57 = const 0_usize;
        _667 = deref_copy (*_2);
        _58 = Len((*_667));
        _59 = Lt(_57, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb24, unwind continue];
    }

    bb24: {
        _668 = deref_copy (*_2);
        _56 = &(*_668)[_57];
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _669 = deref_copy (*_2);
        _63 = &(*_669);
        StorageLive(_64);
        _64 = RangeFrom::<usize> { start: const 1_usize };
        _62 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _63, move _64) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = &(*_62);
        _60 = &(*_61);
        (*_2) = move _60;
        StorageDead(_60);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _67 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _68, move _74) -> [return: bb27, unwind: bb298];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb298];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _65 = move _79;
        StorageDead(_79);
        _691 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb338];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _755 = discriminant(_66);
        StorageDead(_66);
        goto -> bb284;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _82 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _83, move _89) -> [return: bb33, unwind: bb298];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb298];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _80 = move _94;
        StorageDead(_94);
        _693 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb297];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb337];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _753 = discriminant(_81);
        StorageDead(_81);
        goto -> bb283;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _97 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _98, move _104) -> [return: bb39, unwind: bb297];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb297];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _95 = move _109;
        StorageDead(_109);
        _695 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind: bb296];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb336];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _751 = discriminant(_96);
        StorageDead(_96);
        goto -> bb282;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _112 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _113, move _119) -> [return: bb45, unwind: bb296];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb296];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::referral::UserMetadata>);
        _110 = move _124;
        StorageDead(_124);
        _697 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_1);
        StorageLive(_130);
        _130 = &mut (*_2);
        StorageLive(_131);
        _131 = &(*_6);
        StorageLive(_132);
        _132 = &mut (*_4);
        StorageLive(_133);
        _133 = &mut (*_5);
        _128 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _129, move _130, move _131, move _132, move _133) -> [return: bb50, unwind: bb296];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb335];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _749 = discriminant(_111);
        StorageDead(_111);
        goto -> bb281;
    }

    bb50: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_134);
        _134 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _127 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _128, move _134) -> [return: bb51, unwind: bb296];
    }

    bb51: {
        StorageDead(_134);
        StorageDead(_128);
        _126 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _127) -> [return: bb52, unwind: bb296];
    }

    bb52: {
        StorageDead(_127);
        _135 = discriminant(_126);
        switchInt(move _135) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_139);
        _139 = move ((_126 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _125 = move _139;
        StorageDead(_139);
        _699 = discriminant(_126);
        StorageDead(_126);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &(*_1);
        StorageLive(_145);
        _145 = &mut (*_2);
        StorageLive(_146);
        _146 = &(*_6);
        StorageLive(_147);
        _147 = &mut (*_4);
        StorageLive(_148);
        _148 = &mut (*_5);
        _143 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitObligationBumps>>::try_accounts(move _144, move _145, move _146, move _147, move _148) -> [return: bb56, unwind: bb296];
    }

    bb54: {
        StorageLive(_136);
        _136 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_138);
        _138 = move _136;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _138) -> [return: bb55, unwind: bb334];
    }

    bb55: {
        StorageDead(_138);
        StorageDead(_136);
        _747 = discriminant(_126);
        StorageDead(_126);
        goto -> bb280;
    }

    bb56: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_149);
        _149 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _142 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _143, move _149) -> [return: bb57, unwind: bb296];
    }

    bb57: {
        StorageDead(_149);
        StorageDead(_143);
        _141 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _142) -> [return: bb58, unwind: bb296];
    }

    bb58: {
        StorageDead(_142);
        _150 = discriminant(_141);
        switchInt(move _150) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_154);
        _154 = move ((_141 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _140 = move _154;
        StorageDead(_154);
        _701 = discriminant(_141);
        StorageDead(_141);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb62, unwind: bb296];
    }

    bb60: {
        StorageLive(_151);
        _151 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_153);
        _153 = move _151;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _153) -> [return: bb61, unwind: bb333];
    }

    bb61: {
        StorageDead(_153);
        StorageDead(_151);
        _745 = discriminant(_141);
        StorageDead(_141);
        goto -> bb279;
    }

    bb62: {
        _156 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _157) -> [return: bb63, unwind: bb296];
    }

    bb63: {
        StorageDead(_157);
        _158 = discriminant(_156);
        switchInt(move _158) -> [0: bb64, 1: bb65, otherwise: bb5];
    }

    bb64: {
        StorageLive(_162);
        _162 = ((_156 as Continue).0: anchor_lang::prelude::Rent);
        _155 = _162;
        StorageDead(_162);
        _703 = discriminant(_156);
        StorageDead(_156);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = (_7.0: u8);
        _173 = [move _174];
        StorageDead(_174);
        _172 = &_173;
        _171 = &(*_172);
        _170 = move _171 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_171);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = (_7.1: u8);
        _178 = [move _179];
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = move _176 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_176);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_20;
        _183 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _184) -> [return: bb67, unwind: bb296];
    }

    bb65: {
        StorageLive(_159);
        _159 = move ((_156 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_161);
        _161 = move _159;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _161) -> [return: bb66, unwind: bb332];
    }

    bb66: {
        StorageDead(_161);
        StorageDead(_159);
        _743 = discriminant(_156);
        StorageDead(_156);
        goto -> bb278;
    }

    bb67: {
        _182 = &_183;
        StorageDead(_184);
        _181 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _182) -> [return: bb68, unwind: bb296];
    }

    bb68: {
        _180 = &(*_181);
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &_65;
        _188 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _189) -> [return: bb69, unwind: bb296];
    }

    bb69: {
        _187 = &_188;
        StorageDead(_189);
        _186 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _187) -> [return: bb70, unwind: bb296];
    }

    bb70: {
        _185 = &(*_186);
        StorageDead(_187);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &_80;
        _193 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _194) -> [return: bb71, unwind: bb296];
    }

    bb71: {
        _192 = &_193;
        StorageDead(_194);
        _191 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _192) -> [return: bb72, unwind: bb296];
    }

    bb72: {
        _190 = &(*_191);
        StorageDead(_192);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_95;
        _198 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _199) -> [return: bb73, unwind: bb296];
    }

    bb73: {
        _197 = &_198;
        StorageDead(_199);
        _196 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _197) -> [return: bb74, unwind: bb296];
    }

    bb74: {
        _195 = &(*_196);
        StorageDead(_197);
        _169 = [move _170, move _175, move _180, move _185, move _190, move _195];
        StorageDead(_195);
        StorageDead(_190);
        StorageDead(_185);
        StorageDead(_180);
        StorageDead(_175);
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = move _167 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_167);
        StorageLive(_200);
        _200 = &(*_1);
        _165 = anchor_lang::prelude::Pubkey::find_program_address(move _166, move _200) -> [return: bb75, unwind: bb296];
    }

    bb75: {
        StorageDead(_200);
        StorageDead(_166);
        StorageLive(_163);
        _163 = (_165.0: anchor_lang::prelude::Pubkey);
        StorageLive(_164);
        _164 = (_165.1: u8);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_165);
        StorageLive(_201);
        _201 = _164;
        ((*_4).0: u8) = move _201;
        StorageDead(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &(*_56);
        _205 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _206) -> [return: bb76, unwind: bb296];
    }

    bb76: {
        _204 = &_205;
        StorageDead(_206);
        StorageLive(_207);
        _207 = &_163;
        _203 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _204, move _207) -> [return: bb77, unwind: bb296];
    }

    bb77: {
        switchInt(move _203) -> [0: bb83, otherwise: bb78];
    }

    bb78: {
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = ConstraintSeeds;
        _211 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _212) -> [return: bb79, unwind: bb296];
    }

    bb79: {
        StorageDead(_212);
        _210 = anchor_lang::error::Error::with_account_name::<&str>(move _211, const "obligation") -> [return: bb80, unwind: bb296];
    }

    bb80: {
        _686 = const true;
        StorageDead(_211);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &(*_56);
        _214 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _215) -> [return: bb81, unwind: bb331];
    }

    bb81: {
        StorageDead(_215);
        StorageLive(_216);
        _216 = _163;
        _213 = (move _214, move _216);
        StorageDead(_216);
        StorageDead(_214);
        _686 = const false;
        _209 = anchor_lang::error::Error::with_pubkeys(move _210, move _213) -> [return: bb82, unwind: bb331];
    }

    bb82: {
        StorageDead(_213);
        _686 = const false;
        StorageDead(_210);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _209);
        StorageDead(_209);
        StorageDead(_203);
        StorageDead(_202);
        goto -> bb277;
    }

    bb83: {
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_204);
        _202 = const ();
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_56;
        _219 = &(*_220);
        _218 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _219) -> [return: bb84, unwind: bb296];
    }

    bb84: {
        StorageDead(_219);
        StorageDead(_220);
        StorageLive(_221);
        _221 = ((*_218).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_222);
        _223 = CheckedAdd(const _, const 8_usize);
        assert(!move (_223.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 8_usize) -> [success: bb85, unwind: bb296];
    }

    bb85: {
        _222 = move (_223.0: usize);
        StorageLive(_224);
        StorageLive(_225);
        _225 = const false;
        switchInt(move _225) -> [0: bb88, otherwise: bb86];
    }

    bb86: {
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_221;
        StorageLive(_228);
        _665 = const _;
        _228 = &(*_665);
        _226 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _227, move _228) -> [return: bb87, unwind: bb296];
    }

    bb87: {
        switchInt(move _226) -> [0: bb183, otherwise: bb88];
    }

    bb88: {
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &(*_56);
        _231 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _232) -> [return: bb89, unwind: bb296];
    }

    bb89: {
        StorageDead(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _231;
        _234 = Eq(move _235, const 0_u64);
        switchInt(move _234) -> [0: bb112, otherwise: bb90];
    }

    bb90: {
        StorageDead(_235);
        StorageLive(_236);
        _236 = _222;
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_155;
        StorageLive(_239);
        _239 = _236;
        _237 = anchor_lang::prelude::Rent::minimum_balance(move _238, move _239) -> [return: bb91, unwind: bb296];
    }

    bb91: {
        StorageDead(_239);
        StorageDead(_238);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_35;
        _241 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _242) -> [return: bb92, unwind: bb296];
    }

    bb92: {
        StorageDead(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &(*_56);
        _243 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _244) -> [return: bb93, unwind: bb295];
    }

    bb93: {
        StorageDead(_244);
        _685 = const true;
        _240 = anchor_lang::system_program::CreateAccount::<'_> { from: move _241, to: move _243 };
        StorageDead(_243);
        StorageDead(_241);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_140;
        _246 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _247) -> [return: bb94, unwind: bb329];
    }

    bb94: {
        StorageDead(_247);
        StorageLive(_248);
        _685 = const false;
        _248 = move _240;
        _245 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _246, move _248) -> [return: bb95, unwind: bb329];
    }

    bb95: {
        StorageDead(_248);
        StorageDead(_246);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _684 = const true;
        _253 = move _245;
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = (_7.0: u8);
        _266 = [move _267];
        StorageDead(_267);
        _265 = &_266;
        _264 = &(*_265);
        _263 = move _264 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_264);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = (_7.1: u8);
        _271 = [move _272];
        StorageDead(_272);
        _270 = &_271;
        _269 = &(*_270);
        _268 = move _269 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_269);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_20;
        _275 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _276) -> [return: bb96, unwind: bb327];
    }

    bb96: {
        _274 = &_275;
        StorageDead(_276);
        _273 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _274) -> [return: bb97, unwind: bb327];
    }

    bb97: {
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &_65;
        _280 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _281) -> [return: bb98, unwind: bb327];
    }

    bb98: {
        _279 = &_280;
        StorageDead(_281);
        _278 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _279) -> [return: bb99, unwind: bb327];
    }

    bb99: {
        _277 = &(*_278);
        StorageDead(_279);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_80;
        _285 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _286) -> [return: bb100, unwind: bb327];
    }

    bb100: {
        _284 = &_285;
        StorageDead(_286);
        _283 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _284) -> [return: bb101, unwind: bb327];
    }

    bb101: {
        _282 = &(*_283);
        StorageDead(_284);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_95;
        _290 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _291) -> [return: bb102, unwind: bb327];
    }

    bb102: {
        _289 = &_290;
        StorageDead(_291);
        _288 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _289) -> [return: bb103, unwind: bb327];
    }

    bb103: {
        _287 = &(*_288);
        StorageDead(_289);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = _164;
        _296 = [move _297];
        _295 = &_296;
        StorageDead(_297);
        StorageLive(_298);
        _298 = RangeFull;
        _294 = <[u8; 1] as Index<RangeFull>>::index(move _295, move _298) -> [return: bb104, unwind: bb327];
    }

    bb104: {
        StorageDead(_298);
        StorageDead(_295);
        _293 = &(*_294);
        _292 = &(*_293);
        _262 = [move _263, move _268, move _273, move _277, move _282, move _287, move _292];
        _261 = &_262;
        StorageDead(_292);
        StorageDead(_287);
        StorageDead(_282);
        StorageDead(_277);
        StorageDead(_273);
        StorageDead(_268);
        StorageDead(_263);
        StorageLive(_299);
        _299 = RangeFull;
        _260 = <[&[u8]; 7] as Index<RangeFull>>::index(move _261, move _299) -> [return: bb105, unwind: bb327];
    }

    bb105: {
        StorageDead(_299);
        StorageDead(_261);
        _259 = &(*_260);
        _258 = &(*_259);
        _257 = [move _258];
        StorageDead(_258);
        _256 = &_257;
        _255 = &(*_256);
        _254 = move _255 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_255);
        _684 = const false;
        _252 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _253, move _254) -> [return: bb106, unwind: bb327];
    }

    bb106: {
        StorageDead(_254);
        _684 = const false;
        StorageDead(_253);
        StorageLive(_300);
        _300 = _237;
        StorageLive(_301);
        StorageLive(_302);
        _302 = _236;
        _301 = move _302 as u64 (IntToInt);
        StorageDead(_302);
        StorageLive(_303);
        _303 = &(*_1);
        _251 = anchor_lang::system_program::create_account(move _252, move _300, move _301, move _303) -> [return: bb107, unwind: bb329];
    }

    bb107: {
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_300);
        StorageDead(_252);
        _250 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _251) -> [return: bb108, unwind: bb329];
    }

    bb108: {
        StorageDead(_251);
        _304 = discriminant(_250);
        switchInt(move _304) -> [0: bb109, 1: bb110, otherwise: bb5];
    }

    bb109: {
        StorageLive(_308);
        _308 = ((_250 as Continue).0: ());
        _249 = _308;
        StorageDead(_308);
        _705 = discriminant(_250);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_250);
        StorageDead(_249);
        _233 = const ();
        StorageDead(_245);
        _685 = const false;
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb178;
    }

    bb110: {
        StorageLive(_305);
        _305 = move ((_250 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_307);
        _307 = move _305;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _307) -> [return: bb111, unwind: bb325];
    }

    bb111: {
        StorageDead(_307);
        StorageDead(_305);
        _741 = discriminant(_250);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_245);
        _685 = const false;
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb273;
    }

    bb112: {
        StorageDead(_235);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &_35;
        _312 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _313) -> [return: bb113, unwind: bb296];
    }

    bb113: {
        _311 = &_312;
        StorageDead(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = &(*_56);
        _315 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _316) -> [return: bb114, unwind: bb296];
    }

    bb114: {
        _314 = &_315;
        StorageDead(_316);
        _310 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _311, move _314) -> [return: bb115, unwind: bb296];
    }

    bb115: {
        switchInt(move _310) -> [0: bb124, otherwise: bb116];
    }

    bb116: {
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _664 = const _;
        _322 = &(*_664);
        _321 = anchor_lang::error::ErrorCode::name(move _322) -> [return: bb117, unwind: bb296];
    }

    bb117: {
        StorageDead(_322);
        StorageLive(_324);
        StorageLive(_325);
        _325 = TryingToInitPayerAsProgramAccount;
        _324 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _325) -> [return: bb118, unwind: bb294];
    }

    bb118: {
        StorageDead(_325);
        StorageLive(_326);
        StorageLive(_327);
        _663 = const _;
        _327 = &(*_663);
        _326 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _327) -> [return: bb119, unwind: bb294];
    }

    bb119: {
        StorageDead(_327);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_obligation.rs", line: const 39_u32 };
        _330 = anchor_lang::error::ErrorOrigin::Source(move _331);
        StorageDead(_331);
        _329 = std::option::Option::<ErrorOrigin>::Some(move _330);
        StorageDead(_330);
        StorageLive(_332);
        _332 = std::option::Option::<ComparedValues>::None;
        _320 = anchor_lang::error::AnchorError { error_name: move _321, error_code_number: move _324, error_msg: move _326, error_origin: move _329, compared_values: move _332 };
        StorageDead(_332);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_321);
        _319 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _320) -> [return: bb120, unwind: bb296];
    }

    bb120: {
        _683 = const true;
        StorageDead(_320);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = &_35;
        _334 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _335) -> [return: bb121, unwind: bb324];
    }

    bb121: {
        StorageDead(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &(*_56);
        _336 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _337) -> [return: bb122, unwind: bb324];
    }

    bb122: {
        StorageDead(_337);
        _333 = (move _334, move _336);
        StorageDead(_336);
        StorageDead(_334);
        _683 = const false;
        _318 = anchor_lang::error::Error::with_pubkeys(move _319, move _333) -> [return: bb123, unwind: bb324];
    }

    bb123: {
        StorageDead(_333);
        _683 = const false;
        StorageDead(_319);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _318);
        StorageDead(_318);
        StorageDead(_310);
        StorageDead(_309);
        goto -> bb273;
    }

    bb124: {
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_311);
        _309 = const ();
        StorageDead(_310);
        StorageDead(_309);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &_155;
        StorageLive(_342);
        _342 = _222;
        _340 = anchor_lang::prelude::Rent::minimum_balance(move _341, move _342) -> [return: bb125, unwind: bb296];
    }

    bb125: {
        StorageDead(_342);
        StorageDead(_341);
        _339 = <u64 as Ord>::max(move _340, const 1_u64) -> [return: bb126, unwind: bb296];
    }

    bb126: {
        StorageDead(_340);
        StorageLive(_343);
        _343 = _231;
        _338 = core::num::<impl u64>::saturating_sub(move _339, move _343) -> [return: bb127, unwind: bb296];
    }

    bb127: {
        StorageDead(_343);
        StorageDead(_339);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = _338;
        _345 = Gt(move _346, const 0_u64);
        switchInt(move _345) -> [0: bb138, otherwise: bb128];
    }

    bb128: {
        StorageDead(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = &_35;
        _348 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _349) -> [return: bb129, unwind: bb296];
    }

    bb129: {
        StorageDead(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_56);
        _350 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _351) -> [return: bb130, unwind: bb293];
    }

    bb130: {
        StorageDead(_351);
        _682 = const true;
        _347 = anchor_lang::system_program::Transfer::<'_> { from: move _348, to: move _350 };
        StorageDead(_350);
        StorageDead(_348);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &_140;
        _353 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _354) -> [return: bb131, unwind: bb322];
    }

    bb131: {
        StorageDead(_354);
        StorageLive(_355);
        _682 = const false;
        _355 = move _347;
        _352 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _353, move _355) -> [return: bb132, unwind: bb322];
    }

    bb132: {
        StorageDead(_355);
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = move _352;
        StorageLive(_360);
        _360 = _338;
        _358 = anchor_lang::system_program::transfer(move _359, move _360) -> [return: bb133, unwind: bb322];
    }

    bb133: {
        StorageDead(_360);
        StorageDead(_359);
        _357 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _358) -> [return: bb134, unwind: bb322];
    }

    bb134: {
        StorageDead(_358);
        _361 = discriminant(_357);
        switchInt(move _361) -> [0: bb135, 1: bb136, otherwise: bb5];
    }

    bb135: {
        StorageLive(_365);
        _365 = ((_357 as Continue).0: ());
        _356 = _365;
        StorageDead(_365);
        _707 = discriminant(_357);
        StorageDead(_357);
        StorageDead(_356);
        _344 = const ();
        StorageDead(_352);
        _682 = const false;
        StorageDead(_347);
        goto -> bb139;
    }

    bb136: {
        StorageLive(_362);
        _362 = move ((_357 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_364);
        _364 = move _362;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _364) -> [return: bb137, unwind: bb320];
    }

    bb137: {
        StorageDead(_364);
        StorageDead(_362);
        _739 = discriminant(_357);
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_352);
        _682 = const false;
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_344);
        goto -> bb272;
    }

    bb138: {
        StorageDead(_346);
        _344 = const ();
        goto -> bb139;
    }

    bb139: {
        StorageDead(_345);
        StorageDead(_344);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &(*_56);
        _367 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _368) -> [return: bb140, unwind: bb296];
    }

    bb140: {
        StorageDead(_368);
        _681 = const true;
        _366 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _367 };
        StorageDead(_367);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = &_140;
        _370 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _371) -> [return: bb141, unwind: bb319];
    }

    bb141: {
        StorageDead(_371);
        StorageLive(_372);
        _681 = const false;
        _372 = move _366;
        _369 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _370, move _372) -> [return: bb142, unwind: bb319];
    }

    bb142: {
        StorageDead(_372);
        StorageDead(_370);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _680 = const true;
        _377 = move _369;
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = (_7.0: u8);
        _390 = [move _391];
        StorageDead(_391);
        _389 = &_390;
        _388 = &(*_389);
        _387 = move _388 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_388);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = (_7.1: u8);
        _395 = [move _396];
        StorageDead(_396);
        _394 = &_395;
        _393 = &(*_394);
        _392 = move _393 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_393);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &_20;
        _399 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _400) -> [return: bb143, unwind: bb317];
    }

    bb143: {
        _398 = &_399;
        StorageDead(_400);
        _397 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _398) -> [return: bb144, unwind: bb317];
    }

    bb144: {
        StorageDead(_398);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &_65;
        _404 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _405) -> [return: bb145, unwind: bb317];
    }

    bb145: {
        _403 = &_404;
        StorageDead(_405);
        _402 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _403) -> [return: bb146, unwind: bb317];
    }

    bb146: {
        _401 = &(*_402);
        StorageDead(_403);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &_80;
        _409 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _410) -> [return: bb147, unwind: bb317];
    }

    bb147: {
        _408 = &_409;
        StorageDead(_410);
        _407 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _408) -> [return: bb148, unwind: bb317];
    }

    bb148: {
        _406 = &(*_407);
        StorageDead(_408);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _415 = &_95;
        _414 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _415) -> [return: bb149, unwind: bb317];
    }

    bb149: {
        _413 = &_414;
        StorageDead(_415);
        _412 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _413) -> [return: bb150, unwind: bb317];
    }

    bb150: {
        _411 = &(*_412);
        StorageDead(_413);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = _164;
        _420 = [move _421];
        _419 = &_420;
        StorageDead(_421);
        StorageLive(_422);
        _422 = RangeFull;
        _418 = <[u8; 1] as Index<RangeFull>>::index(move _419, move _422) -> [return: bb151, unwind: bb317];
    }

    bb151: {
        StorageDead(_422);
        StorageDead(_419);
        _417 = &(*_418);
        _416 = &(*_417);
        _386 = [move _387, move _392, move _397, move _401, move _406, move _411, move _416];
        _385 = &_386;
        StorageDead(_416);
        StorageDead(_411);
        StorageDead(_406);
        StorageDead(_401);
        StorageDead(_397);
        StorageDead(_392);
        StorageDead(_387);
        StorageLive(_423);
        _423 = RangeFull;
        _384 = <[&[u8]; 7] as Index<RangeFull>>::index(move _385, move _423) -> [return: bb152, unwind: bb317];
    }

    bb152: {
        StorageDead(_423);
        StorageDead(_385);
        _383 = &(*_384);
        _382 = &(*_383);
        _381 = [move _382];
        StorageDead(_382);
        _380 = &_381;
        _379 = &(*_380);
        _378 = move _379 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_379);
        _680 = const false;
        _376 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _377, move _378) -> [return: bb153, unwind: bb317];
    }

    bb153: {
        StorageDead(_378);
        _680 = const false;
        StorageDead(_377);
        StorageLive(_424);
        StorageLive(_425);
        _425 = _222;
        _424 = move _425 as u64 (IntToInt);
        StorageDead(_425);
        _375 = anchor_lang::system_program::allocate(move _376, move _424) -> [return: bb154, unwind: bb319];
    }

    bb154: {
        StorageDead(_424);
        StorageDead(_376);
        _374 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _375) -> [return: bb155, unwind: bb319];
    }

    bb155: {
        StorageDead(_375);
        _426 = discriminant(_374);
        switchInt(move _426) -> [0: bb156, 1: bb157, otherwise: bb5];
    }

    bb156: {
        StorageLive(_430);
        _430 = ((_374 as Continue).0: ());
        _373 = _430;
        StorageDead(_430);
        _709 = discriminant(_374);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_399);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_374);
        StorageDead(_373);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &(*_56);
        _432 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _433) -> [return: bb159, unwind: bb319];
    }

    bb157: {
        StorageLive(_427);
        _427 = move ((_374 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_429);
        _429 = move _427;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _429) -> [return: bb158, unwind: bb315];
    }

    bb158: {
        StorageDead(_429);
        StorageDead(_427);
        _737 = discriminant(_374);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_399);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_374);
        StorageDead(_373);
        goto -> bb271;
    }

    bb159: {
        StorageDead(_433);
        _679 = const true;
        _431 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _432 };
        StorageDead(_432);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &_140;
        _435 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _436) -> [return: bb160, unwind: bb314];
    }

    bb160: {
        StorageDead(_436);
        StorageLive(_437);
        _679 = const false;
        _437 = move _431;
        _434 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _435, move _437) -> [return: bb161, unwind: bb314];
    }

    bb161: {
        StorageDead(_437);
        StorageDead(_435);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _678 = const true;
        _442 = move _434;
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = (_7.0: u8);
        _455 = [move _456];
        StorageDead(_456);
        _454 = &_455;
        _453 = &(*_454);
        _452 = move _453 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_453);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = (_7.1: u8);
        _460 = [move _461];
        StorageDead(_461);
        _459 = &_460;
        _458 = &(*_459);
        _457 = move _458 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_458);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &_20;
        _464 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _465) -> [return: bb162, unwind: bb312];
    }

    bb162: {
        _463 = &_464;
        StorageDead(_465);
        _462 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _463) -> [return: bb163, unwind: bb312];
    }

    bb163: {
        StorageDead(_463);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _470 = &_65;
        _469 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _470) -> [return: bb164, unwind: bb312];
    }

    bb164: {
        _468 = &_469;
        StorageDead(_470);
        _467 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _468) -> [return: bb165, unwind: bb312];
    }

    bb165: {
        _466 = &(*_467);
        StorageDead(_468);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = &_80;
        _474 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _475) -> [return: bb166, unwind: bb312];
    }

    bb166: {
        _473 = &_474;
        StorageDead(_475);
        _472 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _473) -> [return: bb167, unwind: bb312];
    }

    bb167: {
        _471 = &(*_472);
        StorageDead(_473);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_95;
        _479 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _480) -> [return: bb168, unwind: bb312];
    }

    bb168: {
        _478 = &_479;
        StorageDead(_480);
        _477 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _478) -> [return: bb169, unwind: bb312];
    }

    bb169: {
        _476 = &(*_477);
        StorageDead(_478);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = _164;
        _485 = [move _486];
        _484 = &_485;
        StorageDead(_486);
        StorageLive(_487);
        _487 = RangeFull;
        _483 = <[u8; 1] as Index<RangeFull>>::index(move _484, move _487) -> [return: bb170, unwind: bb312];
    }

    bb170: {
        StorageDead(_487);
        StorageDead(_484);
        _482 = &(*_483);
        _481 = &(*_482);
        _451 = [move _452, move _457, move _462, move _466, move _471, move _476, move _481];
        _450 = &_451;
        StorageDead(_481);
        StorageDead(_476);
        StorageDead(_471);
        StorageDead(_466);
        StorageDead(_462);
        StorageDead(_457);
        StorageDead(_452);
        StorageLive(_488);
        _488 = RangeFull;
        _449 = <[&[u8]; 7] as Index<RangeFull>>::index(move _450, move _488) -> [return: bb171, unwind: bb312];
    }

    bb171: {
        StorageDead(_488);
        StorageDead(_450);
        _448 = &(*_449);
        _447 = &(*_448);
        _446 = [move _447];
        StorageDead(_447);
        _445 = &_446;
        _444 = &(*_445);
        _443 = move _444 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_444);
        _678 = const false;
        _441 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _442, move _443) -> [return: bb172, unwind: bb312];
    }

    bb172: {
        StorageDead(_443);
        _678 = const false;
        StorageDead(_442);
        StorageLive(_489);
        _489 = &(*_1);
        _440 = anchor_lang::system_program::assign(move _441, move _489) -> [return: bb173, unwind: bb314];
    }

    bb173: {
        StorageDead(_489);
        StorageDead(_441);
        _439 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _440) -> [return: bb174, unwind: bb314];
    }

    bb174: {
        StorageDead(_440);
        _490 = discriminant(_439);
        switchInt(move _490) -> [0: bb175, 1: bb176, otherwise: bb5];
    }

    bb175: {
        StorageLive(_494);
        _494 = ((_439 as Continue).0: ());
        _438 = _494;
        StorageDead(_494);
        _711 = discriminant(_439);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_464);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_445);
        StorageDead(_439);
        StorageDead(_438);
        _233 = const ();
        StorageDead(_434);
        _679 = const false;
        StorageDead(_431);
        StorageDead(_369);
        _681 = const false;
        StorageDead(_366);
        StorageDead(_338);
        goto -> bb178;
    }

    bb176: {
        StorageLive(_491);
        _491 = move ((_439 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_493);
        _493 = move _491;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _493) -> [return: bb177, unwind: bb310];
    }

    bb177: {
        StorageDead(_493);
        StorageDead(_491);
        _735 = discriminant(_439);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_464);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_445);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_434);
        _679 = const false;
        StorageDead(_431);
        goto -> bb271;
    }

    bb178: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_495);
        StorageLive(_496);
        _496 = &(*_1);
        StorageLive(_497);
        StorageLive(_498);
        _498 = &_56;
        _670 = deref_copy (*_498);
        _497 = &(*_670);
        _495 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::try_from_unchecked(move _496, move _497) -> [return: bb179, unwind: bb296];
    }

    bb179: {
        StorageDead(_497);
        StorageDead(_496);
        _499 = discriminant(_495);
        switchInt(move _499) -> [0: bb181, 1: bb180, otherwise: bb5];
    }

    bb180: {
        StorageLive(_501);
        _501 = move ((_495 as Err).0: anchor_lang::error::Error);
        StorageLive(_503);
        StorageLive(_504);
        _504 = move _501;
        _503 = anchor_lang::error::Error::with_account_name::<&str>(move _504, const "obligation") -> [return: bb182, unwind: bb309];
    }

    bb181: {
        StorageLive(_500);
        _500 = move ((_495 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _224 = move _500;
        StorageDead(_500);
        StorageDead(_231);
        _713 = discriminant(_495);
        StorageDead(_498);
        StorageDead(_495);
        goto -> bb188;
    }

    bb182: {
        StorageDead(_504);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _503);
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_231);
        _733 = discriminant(_495);
        StorageDead(_498);
        StorageDead(_495);
        goto -> bb274;
    }

    bb183: {
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = &_56;
        _671 = deref_copy (*_507);
        _506 = &(*_671);
        _505 = anchor_lang::prelude::AccountLoader::<'_, obligation::Obligation>::try_from(move _506) -> [return: bb184, unwind: bb296];
    }

    bb184: {
        StorageDead(_506);
        _508 = discriminant(_505);
        switchInt(move _508) -> [0: bb186, 1: bb185, otherwise: bb5];
    }

    bb185: {
        StorageLive(_510);
        _510 = move ((_505 as Err).0: anchor_lang::error::Error);
        StorageLive(_512);
        StorageLive(_513);
        _513 = move _510;
        _512 = anchor_lang::error::Error::with_account_name::<&str>(move _513, const "obligation") -> [return: bb187, unwind: bb308];
    }

    bb186: {
        StorageLive(_509);
        _509 = move ((_505 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::obligation::Obligation>);
        _224 = move _509;
        StorageDead(_509);
        _715 = discriminant(_505);
        StorageDead(_507);
        StorageDead(_505);
        goto -> bb188;
    }

    bb187: {
        StorageDead(_513);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _512);
        StorageDead(_512);
        StorageDead(_510);
        _731 = discriminant(_505);
        StorageDead(_507);
        StorageDead(_505);
        goto -> bb274;
    }

    bb188: {
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_514);
        StorageLive(_515);
        _515 = const false;
        switchInt(move _515) -> [0: bb212, otherwise: bb189];
    }

    bb189: {
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        _518 = _222;
        StorageLive(_519);
        StorageLive(_520);
        _520 = &(*_218);
        _519 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _520) -> [return: bb190, unwind: bb296];
    }

    bb190: {
        StorageDead(_520);
        _517 = Ne(move _518, move _519);
        switchInt(move _517) -> [0: bb196, otherwise: bb191];
    }

    bb191: {
        StorageDead(_519);
        StorageDead(_518);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _525 = ConstraintSpace;
        _524 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _525) -> [return: bb192, unwind: bb296];
    }

    bb192: {
        StorageDead(_525);
        _523 = anchor_lang::error::Error::with_account_name::<&str>(move _524, const "obligation") -> [return: bb193, unwind: bb296];
    }

    bb193: {
        _677 = const true;
        StorageDead(_524);
        StorageLive(_526);
        StorageLive(_527);
        _527 = _222;
        StorageLive(_528);
        StorageLive(_529);
        _529 = &(*_218);
        _528 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _529) -> [return: bb194, unwind: bb307];
    }

    bb194: {
        StorageDead(_529);
        _526 = (move _527, move _528);
        StorageDead(_528);
        StorageDead(_527);
        _677 = const false;
        _522 = anchor_lang::error::Error::with_values::<usize, usize>(move _523, move _526) -> [return: bb195, unwind: bb307];
    }

    bb195: {
        StorageDead(_526);
        _677 = const false;
        StorageDead(_523);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _522);
        StorageDead(_522);
        StorageDead(_517);
        StorageDead(_516);
        goto -> bb270;
    }

    bb196: {
        StorageDead(_519);
        StorageDead(_518);
        _516 = const ();
        StorageDead(_517);
        StorageDead(_516);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        _532 = &_221;
        StorageLive(_533);
        _533 = &_1;
        _531 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _532, move _533) -> [return: bb197, unwind: bb296];
    }

    bb197: {
        switchInt(move _531) -> [0: bb202, otherwise: bb198];
    }

    bb198: {
        StorageDead(_533);
        StorageDead(_532);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _538 = ConstraintOwner;
        _537 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _538) -> [return: bb199, unwind: bb296];
    }

    bb199: {
        StorageDead(_538);
        _536 = anchor_lang::error::Error::with_account_name::<&str>(move _537, const "obligation") -> [return: bb200, unwind: bb296];
    }

    bb200: {
        StorageDead(_537);
        StorageLive(_539);
        StorageLive(_540);
        _540 = (*_221);
        StorageLive(_541);
        _541 = (*_1);
        _539 = (move _540, move _541);
        StorageDead(_541);
        StorageDead(_540);
        _535 = anchor_lang::error::Error::with_pubkeys(move _536, move _539) -> [return: bb201, unwind: bb296];
    }

    bb201: {
        StorageDead(_539);
        StorageDead(_536);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _535);
        StorageDead(_535);
        StorageDead(_531);
        StorageDead(_530);
        goto -> bb270;
    }

    bb202: {
        StorageDead(_533);
        StorageDead(_532);
        _530 = const ();
        StorageDead(_531);
        StorageDead(_530);
        StorageLive(_542);
        StorageLive(_543);
        _543 = &_155;
        StorageLive(_544);
        _544 = _222;
        _542 = anchor_lang::prelude::Rent::minimum_balance(move _543, move _544) -> [return: bb203, unwind: bb296];
    }

    bb203: {
        StorageDead(_544);
        StorageDead(_543);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        _549 = &_224;
        _548 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _549) -> [return: bb204, unwind: bb296];
    }

    bb204: {
        _547 = &_548;
        StorageDead(_549);
        _546 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _547) -> [return: bb205, unwind: bb292];
    }

    bb205: {
        StorageDead(_547);
        StorageLive(_550);
        _550 = _542;
        _545 = Lt(move _546, move _550);
        switchInt(move _545) -> [0: bb210, otherwise: bb206];
    }

    bb206: {
        StorageDead(_550);
        drop(_548) -> [return: bb207, unwind: bb296];
    }

    bb207: {
        StorageDead(_548);
        StorageDead(_546);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        _554 = ConstraintRentExempt;
        _553 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _554) -> [return: bb208, unwind: bb296];
    }

    bb208: {
        StorageDead(_554);
        _552 = anchor_lang::error::Error::with_account_name::<&str>(move _553, const "obligation") -> [return: bb209, unwind: bb296];
    }

    bb209: {
        StorageDead(_553);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _552);
        StorageDead(_552);
        StorageDead(_545);
        StorageDead(_542);
        goto -> bb270;
    }

    bb210: {
        StorageDead(_550);
        drop(_548) -> [return: bb211, unwind: bb296];
    }

    bb211: {
        StorageDead(_548);
        StorageDead(_546);
        _514 = const ();
        StorageDead(_545);
        StorageDead(_542);
        goto -> bb213;
    }

    bb212: {
        _514 = const ();
        goto -> bb213;
    }

    bb213: {
        StorageDead(_515);
        StorageDead(_514);
        _217 = move _224;
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_218);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &_217;
        _558 = &(*_559);
        _557 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _558) -> [return: bb214, unwind: bb296];
    }

    bb214: {
        StorageDead(_558);
        _556 = ((*_557).6: bool);
        switchInt(move _556) -> [0: bb215, otherwise: bb218];
    }

    bb215: {
        StorageDead(_559);
        StorageDead(_557);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        _563 = ConstraintMut;
        _562 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _563) -> [return: bb216, unwind: bb296];
    }

    bb216: {
        StorageDead(_563);
        _561 = anchor_lang::error::Error::with_account_name::<&str>(move _562, const "obligation") -> [return: bb217, unwind: bb296];
    }

    bb217: {
        StorageDead(_562);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _561);
        StorageDead(_561);
        StorageDead(_556);
        StorageDead(_555);
        goto -> bb276;
    }

    bb218: {
        StorageDead(_559);
        StorageDead(_557);
        _555 = const ();
        StorageDead(_556);
        StorageDead(_555);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &_155;
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        _570 = &_217;
        _569 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _570) -> [return: bb219, unwind: bb296];
    }

    bb219: {
        _568 = &_569;
        StorageDead(_570);
        _567 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _568) -> [return: bb220, unwind: bb291];
    }

    bb220: {
        StorageDead(_568);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        _576 = &_217;
        _575 = <anchor_lang::prelude::AccountLoader<'_, obligation::Obligation> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _576) -> [return: bb221, unwind: bb291];
    }

    bb221: {
        _574 = &_575;
        StorageDead(_576);
        _573 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _574) -> [return: bb222, unwind: bb290];
    }

    bb222: {
        StorageDead(_574);
        _572 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _573) -> [return: bb223, unwind: bb290];
    }

    bb223: {
        _676 = const true;
        StorageDead(_573);
        _577 = discriminant(_572);
        switchInt(move _577) -> [0: bb224, 1: bb225, otherwise: bb5];
    }

    bb224: {
        StorageLive(_581);
        _581 = ((_572 as Continue).0: usize);
        _571 = _581;
        StorageDead(_581);
        _565 = anchor_lang::prelude::Rent::is_exempt(move _566, move _567, move _571) -> [return: bb227, unwind: bb305];
    }

    bb225: {
        StorageLive(_578);
        _578 = move ((_572 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_580);
        _580 = move _578;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _580) -> [return: bb226, unwind: bb305];
    }

    bb226: {
        StorageDead(_580);
        StorageDead(_578);
        StorageDead(_571);
        StorageDead(_567);
        StorageDead(_566);
        _729 = discriminant(_572);
        drop(_575) -> [return: bb267, unwind: bb291];
    }

    bb227: {
        switchInt(move _565) -> [0: bb229, otherwise: bb228];
    }

    bb228: {
        StorageDead(_571);
        StorageDead(_567);
        StorageDead(_566);
        _717 = discriminant(_572);
        drop(_575) -> [return: bb234, unwind: bb291];
    }

    bb229: {
        StorageDead(_571);
        StorageDead(_567);
        StorageDead(_566);
        _719 = discriminant(_572);
        drop(_575) -> [return: bb230, unwind: bb291];
    }

    bb230: {
        StorageDead(_575);
        _676 = const false;
        StorageDead(_572);
        drop(_569) -> [return: bb231, unwind: bb296];
    }

    bb231: {
        StorageDead(_569);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = ConstraintRentExempt;
        _584 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _585) -> [return: bb232, unwind: bb296];
    }

    bb232: {
        StorageDead(_585);
        _583 = anchor_lang::error::Error::with_account_name::<&str>(move _584, const "obligation") -> [return: bb233, unwind: bb296];
    }

    bb233: {
        StorageDead(_584);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _583);
        StorageDead(_583);
        goto -> bb269;
    }

    bb234: {
        StorageDead(_575);
        _676 = const false;
        StorageDead(_572);
        drop(_569) -> [return: bb235, unwind: bb296];
    }

    bb235: {
        StorageDead(_569);
        _564 = const ();
        StorageDead(_565);
        StorageDead(_564);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        _590 = &_35;
        _589 = &(*_590);
        _588 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _589) -> [return: bb236, unwind: bb296];
    }

    bb236: {
        StorageDead(_589);
        _587 = ((*_588).6: bool);
        switchInt(move _587) -> [0: bb237, otherwise: bb240];
    }

    bb237: {
        StorageDead(_590);
        StorageDead(_588);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = ConstraintMut;
        _593 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _594) -> [return: bb238, unwind: bb296];
    }

    bb238: {
        StorageDead(_594);
        _592 = anchor_lang::error::Error::with_account_name::<&str>(move _593, const "fee_payer") -> [return: bb239, unwind: bb296];
    }

    bb239: {
        StorageDead(_593);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _592);
        StorageDead(_592);
        StorageDead(_587);
        StorageDead(_586);
        goto -> bb276;
    }

    bb240: {
        StorageDead(_590);
        StorageDead(_588);
        _586 = const ();
        StorageDead(_587);
        StorageDead(_586);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = const _;
        _603 = &(*_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        _609 = &_20;
        _608 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _609) -> [return: bb241, unwind: bb296];
    }

    bb241: {
        _607 = &_608;
        StorageDead(_609);
        _606 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _607) -> [return: bb242, unwind: bb296];
    }

    bb242: {
        _605 = &(*_606);
        StorageDead(_607);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &_110;
        _622 = anchor_lang::prelude::AccountLoader::<'_, referral::UserMetadata>::load(move _623) -> [return: bb243, unwind: bb296];
    }

    bb243: {
        StorageDead(_623);
        _621 = <std::result::Result<Ref<'_, referral::UserMetadata>, anchor_lang::error::Error> as Try>::branch(move _622) -> [return: bb244, unwind: bb296];
    }

    bb244: {
        _673 = const true;
        _674 = const true;
        StorageDead(_622);
        _624 = discriminant(_621);
        switchInt(move _624) -> [0: bb245, 1: bb246, otherwise: bb5];
    }

    bb245: {
        StorageLive(_628);
        _628 = move ((_621 as Continue).0: std::cell::Ref<'_, state::referral::UserMetadata>);
        _620 = move _628;
        StorageDead(_628);
        _619 = &_620;
        _618 = <Ref<'_, referral::UserMetadata> as Deref>::deref(move _619) -> [return: bb248, unwind: bb289];
    }

    bb246: {
        StorageLive(_625);
        _625 = move ((_621 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_627);
        _627 = move _625;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _627) -> [return: bb247, unwind: bb304];
    }

    bb247: {
        StorageDead(_627);
        StorageDead(_625);
        StorageDead(_619);
        StorageDead(_617);
        StorageDead(_616);
        StorageDead(_615);
        StorageDead(_613);
        StorageDead(_610);
        StorageDead(_605);
        StorageDead(_603);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_598);
        StorageDead(_597);
        goto -> bb300;
    }

    bb248: {
        StorageDead(_619);
        _617 = ((*_618).1: u64);
        _616 = <u64 as TryInto<u8>>::try_into(move _617) -> [return: bb249, unwind: bb289];
    }

    bb249: {
        StorageDead(_617);
        _615 = std::result::Result::<u8, TryFromIntError>::unwrap(move _616) -> [return: bb250, unwind: bb289];
    }

    bb250: {
        StorageDead(_616);
        _614 = [move _615];
        _613 = &_614;
        StorageDead(_615);
        StorageLive(_629);
        _629 = RangeFull;
        _612 = <[u8; 1] as Index<RangeFull>>::index(move _613, move _629) -> [return: bb251, unwind: bb289];
    }

    bb251: {
        StorageDead(_629);
        StorageDead(_613);
        _611 = &(*_612);
        _610 = &(*_611);
        _602 = [move _603, move _605, move _610];
        StorageDead(_610);
        StorageDead(_605);
        StorageDead(_603);
        _601 = &_602;
        _600 = &(*_601);
        _599 = move _600 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_600);
        StorageLive(_630);
        StorageLive(_631);
        _631 = &_1;
        _672 = deref_copy (*_631);
        _630 = &(*_672);
        _598 = anchor_lang::prelude::Pubkey::create_program_address(move _599, move _630) -> [return: bb252, unwind: bb289];
    }

    bb252: {
        StorageDead(_630);
        StorageDead(_599);
        StorageLive(_632);
        _632 = {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18};
        _597 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_obligation.rs:39:10: 39:18}>(move _598, move _632) -> [return: bb253, unwind: bb289];
    }

    bb253: {
        StorageDead(_632);
        StorageDead(_598);
        _596 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _597) -> [return: bb254, unwind: bb289];
    }

    bb254: {
        StorageDead(_597);
        _633 = discriminant(_596);
        switchInt(move _633) -> [0: bb255, 1: bb256, otherwise: bb5];
    }

    bb255: {
        StorageLive(_637);
        _637 = ((_596 as Continue).0: anchor_lang::prelude::Pubkey);
        _595 = _637;
        StorageDead(_637);
        _721 = discriminant(_596);
        StorageDead(_631);
        drop(_620) -> [return: bb299, unwind: bb304];
    }

    bb256: {
        StorageLive(_634);
        _634 = move ((_596 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_636);
        _636 = move _634;
        _0 = <std::result::Result<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _636) -> [return: bb257, unwind: bb303];
    }

    bb257: {
        StorageDead(_636);
        StorageDead(_634);
        _725 = discriminant(_596);
        StorageDead(_631);
        drop(_620) -> [return: bb300, unwind: bb304];
    }

    bb258: {
        _640 = &_641;
        StorageDead(_642);
        StorageLive(_643);
        _643 = &_595;
        _639 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _640, move _643) -> [return: bb259, unwind: bb296];
    }

    bb259: {
        switchInt(move _639) -> [0: bb265, otherwise: bb260];
    }

    bb260: {
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_640);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        _648 = ConstraintSeeds;
        _647 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _648) -> [return: bb261, unwind: bb296];
    }

    bb261: {
        StorageDead(_648);
        _646 = anchor_lang::error::Error::with_account_name::<&str>(move _647, const "owner_user_metadata") -> [return: bb262, unwind: bb296];
    }

    bb262: {
        _675 = const true;
        StorageDead(_647);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        _651 = &_110;
        _650 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::Key>::key(move _651) -> [return: bb263, unwind: bb302];
    }

    bb263: {
        StorageDead(_651);
        StorageLive(_652);
        _652 = _595;
        _649 = (move _650, move _652);
        StorageDead(_652);
        StorageDead(_650);
        _675 = const false;
        _645 = anchor_lang::error::Error::with_pubkeys(move _646, move _649) -> [return: bb264, unwind: bb302];
    }

    bb264: {
        StorageDead(_649);
        _675 = const false;
        StorageDead(_646);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Err(move _645);
        StorageDead(_645);
        StorageDead(_639);
        StorageDead(_638);
        goto -> bb266;
    }

    bb265: {
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_640);
        _638 = const ();
        StorageDead(_639);
        StorageDead(_638);
        StorageLive(_653);
        StorageLive(_654);
        _654 = move _20;
        StorageLive(_655);
        _655 = move _35;
        StorageLive(_656);
        _656 = move _217;
        StorageLive(_657);
        _657 = move _65;
        StorageLive(_658);
        _658 = move _80;
        StorageLive(_659);
        _659 = move _95;
        StorageLive(_660);
        _660 = move _110;
        StorageLive(_661);
        _661 = move _125;
        StorageLive(_662);
        _662 = move _140;
        _653 = handlers::handler_init_obligation::InitObligation::<'_> { obligation_owner: move _654, fee_payer: move _655, obligation: move _656, lending_market: move _657, seed1_account: move _658, seed2_account: move _659, owner_user_metadata: move _660, rent: move _661, system_program: move _662 };
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_654);
        _0 = std::result::Result::<handlers::handler_init_obligation::InitObligation<'_>, anchor_lang::error::Error>::Ok(move _653);
        StorageDead(_653);
        StorageDead(_595);
        StorageDead(_217);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_155);
        StorageDead(_140);
        StorageDead(_125);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb288;
    }

    bb266: {
        StorageDead(_595);
        goto -> bb276;
    }

    bb267: {
        StorageDead(_575);
        _676 = const false;
        StorageDead(_572);
        drop(_569) -> [return: bb268, unwind: bb296];
    }

    bb268: {
        StorageDead(_569);
        goto -> bb269;
    }

    bb269: {
        StorageDead(_565);
        StorageDead(_564);
        goto -> bb276;
    }

    bb270: {
        StorageDead(_515);
        StorageDead(_514);
        goto -> bb275;
    }

    bb271: {
        StorageDead(_369);
        _681 = const false;
        StorageDead(_366);
        goto -> bb272;
    }

    bb272: {
        StorageDead(_338);
        goto -> bb273;
    }

    bb273: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_231);
        goto -> bb274;
    }

    bb274: {
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb275;
    }

    bb275: {
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_218);
        goto -> bb276;
    }

    bb276: {
        StorageDead(_217);
        goto -> bb277;
    }

    bb277: {
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb278;
    }

    bb278: {
        StorageDead(_155);
        goto -> bb279;
    }

    bb279: {
        StorageDead(_140);
        goto -> bb280;
    }

    bb280: {
        StorageDead(_125);
        goto -> bb281;
    }

    bb281: {
        StorageDead(_110);
        drop(_95) -> [return: bb282, unwind: bb297];
    }

    bb282: {
        StorageDead(_95);
        drop(_80) -> [return: bb283, unwind: bb298];
    }

    bb283: {
        StorageDead(_80);
        goto -> bb284;
    }

    bb284: {
        StorageDead(_65);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb285;
    }

    bb285: {
        StorageDead(_35);
        goto -> bb286;
    }

    bb286: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb287;
    }

    bb287: {
        StorageDead(_6);
        goto -> bb288;
    }

    bb288: {
        return;
    }

    bb289 (cleanup): {
        drop(_620) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        drop(_575) -> [return: bb291, unwind terminate(cleanup)];
    }

    bb291 (cleanup): {
        drop(_569) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        drop(_548) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        drop(_348) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        drop(_321) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        drop(_241) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb296 (cleanup): {
        drop(_95) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb297 (cleanup): {
        drop(_80) -> [return: bb298, unwind terminate(cleanup)];
    }

    bb298 (cleanup): {
        resume;
    }

    bb299: {
        _723 = discriminant(_621);
        _673 = const false;
        _674 = const false;
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_618);
        StorageDead(_614);
        StorageDead(_612);
        StorageDead(_611);
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_604);
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_596);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &_110;
        _641 = <anchor_lang::prelude::AccountLoader<'_, referral::UserMetadata> as anchor_lang::Key>::key(move _642) -> [return: bb258, unwind: bb296];
    }

    bb300: {
        _727 = discriminant(_621);
        _673 = const false;
        _674 = const false;
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_618);
        StorageDead(_614);
        StorageDead(_612);
        StorageDead(_611);
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_604);
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_596);
        goto -> bb266;
    }

    bb301 (cleanup): {
        drop(_646) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb302 (cleanup): {
        switchInt(_675) -> [0: bb296, otherwise: bb301];
    }

    bb303 (cleanup): {
        _761 = discriminant(_596);
        goto -> bb289;
    }

    bb304 (cleanup): {
        _762 = discriminant(_621);
        goto -> bb296;
    }

    bb305 (cleanup): {
        _763 = discriminant(_572);
        goto -> bb290;
    }

    bb306 (cleanup): {
        drop(_523) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb307 (cleanup): {
        switchInt(_677) -> [0: bb296, otherwise: bb306];
    }

    bb308 (cleanup): {
        _764 = discriminant(_505);
        goto -> bb296;
    }

    bb309 (cleanup): {
        _765 = discriminant(_495);
        goto -> bb296;
    }

    bb310 (cleanup): {
        _766 = discriminant(_439);
        goto -> bb314;
    }

    bb311 (cleanup): {
        drop(_442) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb312 (cleanup): {
        switchInt(_678) -> [0: bb314, otherwise: bb311];
    }

    bb313 (cleanup): {
        drop(_431) -> [return: bb319, unwind terminate(cleanup)];
    }

    bb314 (cleanup): {
        switchInt(_679) -> [0: bb319, otherwise: bb313];
    }

    bb315 (cleanup): {
        _767 = discriminant(_374);
        goto -> bb319;
    }

    bb316 (cleanup): {
        drop(_377) -> [return: bb319, unwind terminate(cleanup)];
    }

    bb317 (cleanup): {
        switchInt(_680) -> [0: bb319, otherwise: bb316];
    }

    bb318 (cleanup): {
        drop(_366) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb319 (cleanup): {
        switchInt(_681) -> [0: bb296, otherwise: bb318];
    }

    bb320 (cleanup): {
        _768 = discriminant(_357);
        goto -> bb322;
    }

    bb321 (cleanup): {
        drop(_347) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb322 (cleanup): {
        switchInt(_682) -> [0: bb296, otherwise: bb321];
    }

    bb323 (cleanup): {
        drop(_319) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb324 (cleanup): {
        switchInt(_683) -> [0: bb296, otherwise: bb323];
    }

    bb325 (cleanup): {
        _769 = discriminant(_250);
        goto -> bb329;
    }

    bb326 (cleanup): {
        drop(_253) -> [return: bb329, unwind terminate(cleanup)];
    }

    bb327 (cleanup): {
        switchInt(_684) -> [0: bb329, otherwise: bb326];
    }

    bb328 (cleanup): {
        drop(_240) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb329 (cleanup): {
        switchInt(_685) -> [0: bb296, otherwise: bb328];
    }

    bb330 (cleanup): {
        drop(_210) -> [return: bb296, unwind terminate(cleanup)];
    }

    bb331 (cleanup): {
        switchInt(_686) -> [0: bb296, otherwise: bb330];
    }

    bb332 (cleanup): {
        _770 = discriminant(_156);
        goto -> bb296;
    }

    bb333 (cleanup): {
        _771 = discriminant(_141);
        goto -> bb296;
    }

    bb334 (cleanup): {
        _772 = discriminant(_126);
        goto -> bb296;
    }

    bb335 (cleanup): {
        _773 = discriminant(_111);
        goto -> bb296;
    }

    bb336 (cleanup): {
        _774 = discriminant(_96);
        goto -> bb297;
    }

    bb337 (cleanup): {
        _775 = discriminant(_81);
        goto -> bb298;
    }

    bb338 (cleanup): {
        _776 = discriminant(_66);
        goto -> bb298;
    }

    bb339 (cleanup): {
        _777 = discriminant(_36);
        goto -> bb298;
    }

    bb340 (cleanup): {
        _778 = discriminant(_21);
        goto -> bb298;
    }
}
