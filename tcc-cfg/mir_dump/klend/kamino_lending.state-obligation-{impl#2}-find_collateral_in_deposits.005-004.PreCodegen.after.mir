// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::find_collateral_in_deposits` after PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::find_collateral_in_deposits(_1: &obligation::Obligation, _2: anchor_lang::prelude::Pubkey) -> std::result::Result<&obligation::ObligationCollateral, anchor_lang::error::Error> {
    debug self => _1;
    debug deposit_reserve => _2;
    let mut _0: std::result::Result<&state::obligation::ObligationCollateral, anchor_lang::error::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &state::obligation::Obligation;
    let mut _6: !;
    let _7: ();
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[&str; 1];
    let _12: &[&str; 1];
    let _13: [&str; 1];
    let mut _14: anchor_lang::error::Error;
    let mut _15: anchor_lang::error::AnchorError;
    let mut _16: std::string::String;
    let mut _17: &LendingError;
    let _18: LendingError;
    let mut _19: u32;
    let mut _20: LendingError;
    let mut _21: std::string::String;
    let mut _22: &LendingError;
    let _23: LendingError;
    let mut _24: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _25: anchor_lang::error::ErrorOrigin;
    let mut _26: anchor_lang::error::Source;
    let mut _27: std::option::Option<anchor_lang::error::ComparedValues>;
    let _28: &state::obligation::ObligationCollateral;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, &state::obligation::ObligationCollateral>;
    let mut _30: std::result::Result<&state::obligation::ObligationCollateral, LendingError>;
    let mut _31: std::option::Option<&state::obligation::ObligationCollateral>;
    let mut _32: &mut std::slice::Iter<'_, state::obligation::ObligationCollateral>;
    let mut _33: std::slice::Iter<'_, state::obligation::ObligationCollateral>;
    let mut _34: &[state::obligation::ObligationCollateral];
    let mut _35: &[state::obligation::ObligationCollateral; 8];
    let mut _36: {closure@programs\klend\src\state\obligation.rs:302:19: 302:31};
    let mut _37: &anchor_lang::prelude::Pubkey;
    let mut _38: LendingError;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, LendingError>;
    let _43: &state::obligation::ObligationCollateral;
    let mut _44: &state::obligation::ObligationCollateral;
    let mut _45: &LendingError;
    let mut _46: &LendingError;
    let mut _47: &[&str; 1];
    scope 1 {
        debug collateral => _28;
    }
    scope 2 {
        debug residual => _40;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _43;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = obligation::Obligation::active_deposits_empty(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _47 = const _;
        _12 = &(*_47);
        _11 = &(*_12);
        _10 = move _11 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_11);
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _8 = _print(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_12);
        StorageDead(_8);
        _7 = const ();
        StorageDead(_7);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _46 = const _;
        _17 = &(*_46);
        _16 = LendingError::name(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = LendingError::ObligationDepositsEmpty;
        _19 = <LendingError as Into<u32>>::into(move _20) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _45 = const _;
        _22 = &(*_45);
        _21 = <LendingError as ToString>::to_string(move _22) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\obligation.rs", line: const 297_u32 };
        _25 = anchor_lang::error::ErrorOrigin::Source(move _26);
        StorageDead(_26);
        _24 = std::option::Option::<ErrorOrigin>::Some(move _25);
        StorageDead(_25);
        StorageLive(_27);
        _27 = std::option::Option::<ComparedValues>::None;
        _15 = anchor_lang::error::AnchorError { error_name: move _16, error_code_number: move _19, error_msg: move _21, error_origin: move _24, compared_values: move _27 };
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        _14 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _15) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        StorageDead(_15);
        _0 = std::result::Result::<&obligation::ObligationCollateral, anchor_lang::error::Error>::Err(move _14);
        StorageDead(_14);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb18;
    }

    bb9: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_1).4: [state::obligation::ObligationCollateral; 8]);
        _34 = move _35 as &[state::obligation::ObligationCollateral] (PointerCoercion(Unsize));
        StorageDead(_35);
        _33 = core::slice::<impl [obligation::ObligationCollateral]>::iter(move _34) -> [return: bb10, unwind continue];
    }

    bb10: {
        _32 = &mut _33;
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_2;
        _36 = {closure@programs\klend\src\state\obligation.rs:302:19: 302:31} { deposit_reserve: move _37 };
        StorageDead(_37);
        _31 = <std::slice::Iter<'_, obligation::ObligationCollateral> as Iterator>::find::<{closure@programs\klend\src\state\obligation.rs:302:19: 302:31}>(move _32, move _36) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_36);
        StorageDead(_32);
        StorageLive(_38);
        _38 = LendingError::InvalidObligationCollateral;
        _30 = std::option::Option::<&obligation::ObligationCollateral>::ok_or::<LendingError>(move _31, move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_31);
        _29 = <std::result::Result<&obligation::ObligationCollateral, LendingError> as Try>::branch(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        _39 = discriminant(_29);
        switchInt(move _39) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        StorageLive(_43);
        _43 = ((_29 as Continue).0: &state::obligation::ObligationCollateral);
        _28 = _43;
        StorageDead(_43);
        StorageDead(_33);
        StorageDead(_29);
        StorageLive(_44);
        _44 = &(*_28);
        _0 = std::result::Result::<&obligation::ObligationCollateral, anchor_lang::error::Error>::Ok(move _44);
        StorageDead(_44);
        StorageDead(_28);
        goto -> bb18;
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_40);
        _40 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<&obligation::ObligationCollateral, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_16) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}
