// MIR for `obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::withdraw` after PreCodegen

fn obligation::<impl at programs\klend\src\state\obligation.rs:179:1: 179:16>::withdraw(_1: &mut obligation::Obligation, _2: u64, _3: usize) -> std::result::Result<obligation::WithdrawResult, anchor_lang::error::Error> {
    debug self => _1;
    debug withdraw_amount => _2;
    debug collateral_index => _3;
    let mut _0: std::result::Result<state::obligation::WithdrawResult, anchor_lang::error::Error>;
    let _4: &mut state::obligation::ObligationCollateral;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: state::obligation::ObligationCollateral;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: state::obligation::WithdrawResult;
    let _19: ();
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _21: std::result::Result<(), anchor_lang::error::Error>;
    let mut _22: &mut state::obligation::ObligationCollateral;
    let mut _23: u64;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: state::obligation::WithdrawResult;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    scope 1 {
        debug collateral => _4;
        let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _28: ();
        scope 2 {
            debug residual => _25;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _28;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        _6 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut ((*_1).4: [state::obligation::ObligationCollateral; 8])[_5];
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        StorageLive(_10);
        _10 = ((*_4).1: u64);
        _8 = Eq(move _9, move _10);
        switchInt(move _8) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_11);
        _11 = <obligation::ObligationCollateral as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_12);
        _12 = _3;
        _13 = Len(((*_1).4: [state::obligation::ObligationCollateral; 8]));
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb4, unwind continue];
    }

    bb4: {
        ((*_1).4: [state::obligation::ObligationCollateral; 8])[_12] = move _11;
        StorageDead(_11);
        StorageDead(_12);
        StorageLive(_15);
        _15 = _3;
        _16 = Len(((*_1).12: [u8; 8]));
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb5, unwind continue];
    }

    bb5: {
        ((*_1).12: [u8; 8])[_15] = const _;
        StorageDead(_15);
        StorageLive(_18);
        _18 = obligation::WithdrawResult::Full;
        _0 = std::result::Result::<obligation::WithdrawResult, anchor_lang::error::Error>::Ok(move _18);
        StorageDead(_18);
        goto -> bb13;
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut (*_4);
        StorageLive(_23);
        _23 = _2;
        _21 = obligation::ObligationCollateral::withdraw(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _21) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: ());
        _19 = _28;
        StorageDead(_28);
        _30 = discriminant(_20);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_29);
        _29 = obligation::WithdrawResult::Partial;
        _0 = std::result::Result::<obligation::WithdrawResult, anchor_lang::error::Error>::Ok(move _29);
        StorageDead(_29);
        goto -> bb13;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_25);
        _25 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<obligation::WithdrawResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_25);
        _32 = discriminant(_20);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        _34 = discriminant(_20);
        goto -> bb15;
    }
}
