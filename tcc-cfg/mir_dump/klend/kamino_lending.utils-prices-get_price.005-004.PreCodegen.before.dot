digraph Mir_0_2688 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_price(_1: &amp;ReErased state::token_info::TokenInfo, _2: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;, _3: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;, _4: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;, _5: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;, _6: &amp;ReErased anchor_lang::prelude::Clock) -&gt; std::result::Result&lt;std::option::Option&lt;utils::prices::GetPriceResult&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _7: utils::prices::types::TimestampedPriceWithTwap;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, utils::prices::types::TimestampedPriceWithTwap&gt;;<br align="left"/>let mut _9: std::result::Result&lt;utils::prices::types::TimestampedPriceWithTwap, anchor_lang::error::Error&gt;;<br align="left"/>let mut _10: &amp;ReErased state::token_info::TokenInfo;<br align="left"/>let mut _11: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _12: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _13: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _14: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;&gt;;<br align="left"/>let mut _15: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _20: utils::prices::types::TimestampedPriceWithTwap;<br align="left"/>let mut _21: std::option::Option&lt;utils::prices::GetPriceResult&gt;;<br align="left"/>let mut _22: utils::prices::types::TimestampedPriceWithTwap;<br align="left"/>let mut _23: &amp;ReErased state::token_info::TokenInfo;<br align="left"/>let mut _24: i64;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>debug token_info =&gt; _1;<br align="left"/>debug pyth_price_account_info =&gt; _2;<br align="left"/>debug switchboard_price_feed_info =&gt; _3;<br align="left"/>debug switchboard_price_twap_info =&gt; _4;<br align="left"/>debug scope_prices_info =&gt; _5;<br align="left"/>debug clock =&gt; _6;<br align="left"/>debug price =&gt; _7;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_25 = const false<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_1)<br/>StorageLive(_11)<br/>_11 = _2<br/>StorageLive(_12)<br/>_12 = _3<br/>StorageLive(_13)<br/>_13 = _4<br/>StorageLive(_14)<br/>_14 = _5<br/>StorageLive(_15)<br/>_15 = &amp;(*_6)<br/></td></tr><tr><td align="left">_9 = get_most_recent_price_and_twap(move _10, move _11, move _12, move _13, move _14, move _15)</td></tr></table>>];
    bb1__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;TimestampedPriceWithTwap, anchor_lang::error::Error&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb2__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_16 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb3__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = move ((_8 as Continue).0: utils::prices::types::TimestampedPriceWithTwap)<br/>_25 = const true<br/>_7 = move _20<br/>StorageDead(_20)<br/>_26 = discriminant(_8)<br/>StorageDead(_8)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_25 = const false<br/>_22 = move _7<br/>StorageLive(_23)<br/>_23 = &amp;(*_1)<br/>StorageLive(_24)<br/>_24 = ((*_6).4: i64)<br/></td></tr><tr><td align="left">_21 = get_validated_price(move _22, move _23, move _24)</td></tr></table>>];
    bb4__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = move ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_19)<br/>_19 = move _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;std::option::Option&lt;prices::GetPriceResult&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb6__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>_28 = discriminant(_8)<br/>StorageDead(_8)<br/>_25 = const false<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>_0 = std::result::Result::&lt;std::option::Option&lt;prices::GetPriceResult&gt;, anchor_lang::error::Error&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>_25 = const false<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb11__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">switchInt(_25)</td></tr></table>>];
    bb12__0_2688 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left" balign="left">_30 = discriminant(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2688 -> bb1__0_2688 [label="return"];
    bb1__0_2688 -> bb2__0_2688 [label="return"];
    bb1__0_2688 -> bb9__0_2688 [label="unwind"];
    bb2__0_2688 -> bb3__0_2688 [label="0"];
    bb2__0_2688 -> bb5__0_2688 [label="1"];
    bb2__0_2688 -> bb4__0_2688 [label="otherwise"];
    bb3__0_2688 -> bb7__0_2688 [label="return"];
    bb3__0_2688 -> bb11__0_2688 [label="unwind"];
    bb5__0_2688 -> bb6__0_2688 [label="return"];
    bb5__0_2688 -> bb12__0_2688 [label="unwind"];
    bb6__0_2688 -> bb8__0_2688 [label=""];
    bb7__0_2688 -> bb8__0_2688 [label=""];
    bb10__0_2688 -> bb9__0_2688 [label="return"];
    bb11__0_2688 -> bb9__0_2688 [label="0"];
    bb11__0_2688 -> bb10__0_2688 [label="otherwise"];
    bb12__0_2688 -> bb9__0_2688 [label=""];
}
