// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:874:1: 874:28>::liquidity_to_collateral` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:874:1: 874:28>::liquidity_to_collateral(_1: &reserve::CollateralExchangeRate, _2: u64) -> u64 {
    debug self => _1;
    debug liquidity_amount => _2;
    let mut _0: u64;
    let _3: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _4: &state::reserve::CollateralExchangeRate;
    let mut _5: u64;
    let mut _6: std::option::Option<u64>;
    let mut _7: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _8: {closure@programs\klend\src\state\reserve.rs:958:52: 958:54};
    let mut _9: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug collateral_f => _3;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        StorageLive(_5);
        _5 = _2;
        _3 = reserve::CollateralExchangeRate::liquidity_to_collateral_fraction(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_3;
        _6 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::try_to_floor::<u64>(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_3;
        _8 = {closure@programs\klend\src\state\reserve.rs:958:52: 958:54} { collateral_f: move _9 };
        StorageDead(_9);
        _0 = std::option::Option::<u64>::unwrap_or_else::<{closure@programs\klend\src\state\reserve.rs:958:52: 958:54}>(move _6, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
