// MIR for `state::order_operations::<impl at programs\klend\src\state\order_operations.rs:41:45: 41:61>::try_from_primitive` after PreCodegen

fn state::order_operations::<impl at programs\klend\src\state\order_operations.rs:41:45: 41:61>::try_from_primitive(_1: u8) -> std::result::Result<OpportunityType, TryFromPrimitiveError<OpportunityType>> {
    debug number => _1;
    let mut _0: std::result::Result<state::order_operations::OpportunityType, num_enum::TryFromPrimitiveError<state::order_operations::OpportunityType>>;
    let mut _2: state::order_operations::OpportunityType;
    let mut _3: state::order_operations::OpportunityType;
    let mut _4: num_enum::TryFromPrimitiveError<state::order_operations::OpportunityType>;
    let mut _5: u8;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        switchInt(_1) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _4 = TryFromPrimitiveError::<OpportunityType>::new(move _5) -> [return: bb4, unwind continue];
    }

    bb2: {
        StorageLive(_2);
        _2 = OpportunityType::DeleverageSingleDebtAmount;
        _0 = std::result::Result::<OpportunityType, TryFromPrimitiveError<OpportunityType>>::Ok(move _2);
        StorageDead(_2);
        goto -> bb5;
    }

    bb3: {
        StorageLive(_3);
        _3 = OpportunityType::DeleverageAllDebt;
        _0 = std::result::Result::<OpportunityType, TryFromPrimitiveError<OpportunityType>>::Ok(move _3);
        StorageDead(_3);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_5);
        _0 = std::result::Result::<OpportunityType, TryFromPrimitiveError<OpportunityType>>::Err(move _4);
        StorageDead(_4);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}
