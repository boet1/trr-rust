// MIR for `handlers::handler_init_reserve::<impl at programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18>::try_accounts` after PreCodegen

fn handlers::handler_init_reserve::<impl at programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitReserveBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _51: ();
    let mut _52: bool;
    let mut _53: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _54: !;
    let mut _55: anchor_lang::error::Error;
    let mut _56: anchor_lang::error::ErrorCode;
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let mut _61: &[anchor_lang::prelude::AccountInfo<'_>];
    let _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let _63: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _65: std::ops::RangeFrom<usize>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _68: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _84: !;
    let mut _85: anchor_lang::error::Error;
    let mut _86: anchor_lang::error::ErrorCode;
    let _88: usize;
    let mut _89: usize;
    let mut _90: bool;
    let mut _91: &[anchor_lang::prelude::AccountInfo<'_>];
    let _92: &[anchor_lang::prelude::AccountInfo<'_>];
    let _93: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _94: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _95: std::ops::RangeFrom<usize>;
    let _96: ();
    let mut _97: bool;
    let mut _98: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _99: !;
    let mut _100: anchor_lang::error::Error;
    let mut _101: anchor_lang::error::ErrorCode;
    let _103: usize;
    let mut _104: usize;
    let mut _105: bool;
    let mut _106: &[anchor_lang::prelude::AccountInfo<'_>];
    let _107: &[anchor_lang::prelude::AccountInfo<'_>];
    let _108: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _109: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _110: std::ops::RangeFrom<usize>;
    let _111: ();
    let mut _112: bool;
    let mut _113: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _114: !;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::ErrorCode;
    let _118: usize;
    let mut _119: usize;
    let mut _120: bool;
    let mut _121: &[anchor_lang::prelude::AccountInfo<'_>];
    let _122: &[anchor_lang::prelude::AccountInfo<'_>];
    let _123: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _124: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _125: std::ops::RangeFrom<usize>;
    let _126: ();
    let mut _127: bool;
    let mut _128: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _129: !;
    let mut _130: anchor_lang::error::Error;
    let mut _131: anchor_lang::error::ErrorCode;
    let _133: usize;
    let mut _134: usize;
    let mut _135: bool;
    let mut _136: &[anchor_lang::prelude::AccountInfo<'_>];
    let _137: &[anchor_lang::prelude::AccountInfo<'_>];
    let _138: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _139: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _140: std::ops::RangeFrom<usize>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _143: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _158: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _173: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _188: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _189: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _192: &[u8];
    let mut _193: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _194: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _195: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _203: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _204: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _205: &anchor_lang::prelude::Pubkey;
    let mut _206: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _207: &[u8];
    let mut _208: &mut handlers::handler_init_reserve::InitReserveBumps;
    let mut _209: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _210: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _218: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _226: (anchor_lang::prelude::Pubkey, u8);
    let mut _227: &[&[u8]];
    let mut _228: &[&[u8]; 3];
    let _229: &[&[u8]; 3];
    let _230: [&[u8]; 3];
    let mut _231: &[u8];
    let _232: &[u8];
    let mut _233: &[u8];
    let _234: &[u8];
    let mut _235: &anchor_lang::prelude::Pubkey;
    let _236: anchor_lang::prelude::Pubkey;
    let mut _237: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _238: &[u8];
    let _239: &[u8];
    let mut _240: &anchor_lang::prelude::Pubkey;
    let _241: anchor_lang::prelude::Pubkey;
    let mut _242: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _243: &anchor_lang::prelude::Pubkey;
    let mut _244: u8;
    let _245: ();
    let mut _246: bool;
    let mut _247: &anchor_lang::prelude::Pubkey;
    let _248: anchor_lang::prelude::Pubkey;
    let mut _249: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _250: &anchor_lang::prelude::Pubkey;
    let mut _251: !;
    let mut _252: anchor_lang::error::Error;
    let mut _253: anchor_lang::error::Error;
    let mut _254: anchor_lang::error::Error;
    let mut _255: anchor_lang::error::ErrorCode;
    let mut _256: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _257: anchor_lang::prelude::Pubkey;
    let mut _258: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _259: anchor_lang::prelude::Pubkey;
    let mut _262: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _263: &anchor_lang::prelude::AccountInfo<'_>;
    let _264: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _265: &anchor_lang::prelude::AccountInfo<'_>;
    let _266: ();
    let mut _267: bool;
    let mut _268: bool;
    let mut _269: &&anchor_lang::prelude::Pubkey;
    let mut _270: &&anchor_lang::prelude::Pubkey;
    let _271: &anchor_lang::prelude::Pubkey;
    let _272: anchor_lang::prelude::Pubkey;
    let mut _274: &anchor_lang::prelude::AccountInfo<'_>;
    let _275: ();
    let mut _276: bool;
    let mut _277: u64;
    let mut _280: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _281: bool;
    let mut _282: &anchor_lang::prelude::Pubkey;
    let mut _283: &anchor_lang::prelude::Pubkey;
    let _284: anchor_lang::prelude::Pubkey;
    let mut _286: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _287: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _288: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _295: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _296: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _297: &[u8];
    let _298: &&mut [u8];
    let mut _299: &std::cell::Ref<'_, &mut [u8]>;
    let _300: &std::cell::Ref<'_, &mut [u8]>;
    let mut _301: isize;
    let mut _303: !;
    let mut _304: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _307: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _308: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _309: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _310: isize;
    let mut _312: !;
    let mut _313: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _316: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _317: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _318: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _319: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _320: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _321: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _322: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _323: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _324: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _325: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _326: isize;
    let mut _328: !;
    let mut _329: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _332: &anchor_lang::prelude::Rent;
    let mut _333: usize;
    let mut _335: anchor_lang::prelude::AccountInfo<'_>;
    let mut _336: &anchor_lang::prelude::Signer<'_>;
    let mut _337: anchor_lang::prelude::AccountInfo<'_>;
    let mut _338: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _340: anchor_lang::prelude::AccountInfo<'_>;
    let mut _341: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _342: anchor_lang::system_program::CreateAccount<'_>;
    let _343: ();
    let mut _344: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _345: std::result::Result<(), anchor_lang::error::Error>;
    let mut _346: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _347: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _348: &[&[&[u8]]];
    let mut _349: &[&[&[u8]]; 1];
    let _350: &[&[&[u8]]; 1];
    let _351: [&[&[u8]]; 1];
    let mut _352: &[&[u8]];
    let _353: &[&[u8]];
    let _354: &[&[u8]];
    let mut _355: &[&[u8]; 4];
    let _356: [&[u8]; 4];
    let mut _357: &[u8];
    let _358: &[u8];
    let mut _359: &anchor_lang::prelude::Pubkey;
    let _360: anchor_lang::prelude::Pubkey;
    let mut _361: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _362: &[u8];
    let _363: &[u8];
    let mut _364: &anchor_lang::prelude::Pubkey;
    let _365: anchor_lang::prelude::Pubkey;
    let mut _366: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _367: &[u8];
    let _368: &[u8];
    let _369: &[u8];
    let mut _370: &[u8; 1];
    let _371: [u8; 1];
    let mut _372: u8;
    let mut _373: std::ops::RangeFull;
    let mut _374: std::ops::RangeFull;
    let mut _375: u64;
    let mut _376: u64;
    let mut _377: usize;
    let mut _378: &anchor_lang::prelude::Pubkey;
    let _379: &anchor_lang::prelude::Pubkey;
    let _380: anchor_lang::prelude::Pubkey;
    let mut _381: &anchor_lang::prelude::AccountInfo<'_>;
    let _382: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _383: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _384: isize;
    let mut _386: !;
    let mut _387: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _389: ();
    let mut _390: bool;
    let mut _391: &anchor_lang::prelude::Pubkey;
    let _392: anchor_lang::prelude::Pubkey;
    let mut _393: &anchor_lang::prelude::Signer<'_>;
    let mut _394: &anchor_lang::prelude::Pubkey;
    let _395: anchor_lang::prelude::Pubkey;
    let mut _396: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _397: !;
    let mut _398: anchor_lang::error::Error;
    let mut _399: anchor_lang::error::Error;
    let mut _400: anchor_lang::error::AnchorError;
    let mut _401: std::string::String;
    let mut _402: &anchor_lang::error::ErrorCode;
    let _403: anchor_lang::error::ErrorCode;
    let mut _404: u32;
    let mut _405: anchor_lang::error::ErrorCode;
    let mut _406: std::string::String;
    let mut _407: &anchor_lang::error::ErrorCode;
    let _408: anchor_lang::error::ErrorCode;
    let mut _409: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _410: anchor_lang::error::ErrorOrigin;
    let mut _411: anchor_lang::error::Source;
    let mut _412: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _413: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _414: anchor_lang::prelude::Pubkey;
    let mut _415: &anchor_lang::prelude::Signer<'_>;
    let mut _416: anchor_lang::prelude::Pubkey;
    let mut _417: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _419: u64;
    let mut _420: u64;
    let mut _421: &anchor_lang::prelude::Rent;
    let mut _422: usize;
    let mut _424: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _425: bool;
    let mut _426: &anchor_lang::prelude::Pubkey;
    let mut _427: &anchor_lang::prelude::Pubkey;
    let _428: anchor_lang::prelude::Pubkey;
    let mut _430: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _431: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _432: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _433: isize;
    let mut _435: !;
    let mut _436: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _439: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _440: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _441: &[u8];
    let _442: &&mut [u8];
    let mut _443: &std::cell::Ref<'_, &mut [u8]>;
    let _444: &std::cell::Ref<'_, &mut [u8]>;
    let mut _445: isize;
    let mut _447: !;
    let mut _448: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _451: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _452: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _453: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _454: isize;
    let mut _456: !;
    let mut _457: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _460: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _461: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _462: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _463: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _464: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _465: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _466: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _467: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _468: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _469: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _470: isize;
    let mut _472: !;
    let mut _473: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _475: u64;
    let _476: ();
    let mut _477: bool;
    let mut _478: u64;
    let mut _480: anchor_lang::prelude::AccountInfo<'_>;
    let mut _481: &anchor_lang::prelude::Signer<'_>;
    let mut _482: anchor_lang::prelude::AccountInfo<'_>;
    let mut _483: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _485: anchor_lang::prelude::AccountInfo<'_>;
    let mut _486: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _487: anchor_lang::system_program::Transfer<'_>;
    let _488: ();
    let mut _489: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _490: std::result::Result<(), anchor_lang::error::Error>;
    let mut _491: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _492: u64;
    let mut _493: isize;
    let mut _495: !;
    let mut _496: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _499: anchor_lang::prelude::AccountInfo<'_>;
    let mut _500: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _502: anchor_lang::prelude::AccountInfo<'_>;
    let mut _503: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _504: anchor_lang::system_program::Allocate<'_>;
    let _505: ();
    let mut _506: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _507: std::result::Result<(), anchor_lang::error::Error>;
    let mut _508: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _509: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _510: &[&[&[u8]]];
    let mut _511: &[&[&[u8]]; 1];
    let _512: &[&[&[u8]]; 1];
    let _513: [&[&[u8]]; 1];
    let mut _514: &[&[u8]];
    let _515: &[&[u8]];
    let _516: &[&[u8]];
    let mut _517: &[&[u8]; 4];
    let _518: [&[u8]; 4];
    let mut _519: &[u8];
    let _520: &[u8];
    let mut _521: &anchor_lang::prelude::Pubkey;
    let _522: anchor_lang::prelude::Pubkey;
    let mut _523: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _524: &[u8];
    let _525: &[u8];
    let mut _526: &anchor_lang::prelude::Pubkey;
    let _527: anchor_lang::prelude::Pubkey;
    let mut _528: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _529: &[u8];
    let _530: &[u8];
    let _531: &[u8];
    let mut _532: &[u8; 1];
    let _533: [u8; 1];
    let mut _534: u8;
    let mut _535: std::ops::RangeFull;
    let mut _536: std::ops::RangeFull;
    let mut _537: u64;
    let mut _538: usize;
    let mut _540: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _541: bool;
    let mut _542: &anchor_lang::prelude::Pubkey;
    let mut _543: &anchor_lang::prelude::Pubkey;
    let _544: anchor_lang::prelude::Pubkey;
    let mut _546: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _547: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _548: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _549: isize;
    let mut _551: !;
    let mut _552: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _555: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _556: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _557: &[u8];
    let _558: &&mut [u8];
    let mut _559: &std::cell::Ref<'_, &mut [u8]>;
    let _560: &std::cell::Ref<'_, &mut [u8]>;
    let mut _561: isize;
    let mut _563: !;
    let mut _564: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _567: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _568: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _569: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _570: isize;
    let mut _572: !;
    let mut _573: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _576: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _577: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _578: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _579: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _580: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _581: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _582: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _583: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _584: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _585: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _586: isize;
    let mut _588: !;
    let mut _589: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _591: isize;
    let mut _593: !;
    let mut _594: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _597: anchor_lang::prelude::AccountInfo<'_>;
    let mut _598: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _600: anchor_lang::prelude::AccountInfo<'_>;
    let mut _601: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _602: anchor_lang::system_program::Assign<'_>;
    let _603: ();
    let mut _604: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _605: std::result::Result<(), anchor_lang::error::Error>;
    let mut _606: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _607: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _608: &[&[&[u8]]];
    let mut _609: &[&[&[u8]]; 1];
    let _610: &[&[&[u8]]; 1];
    let _611: [&[&[u8]]; 1];
    let mut _612: &[&[u8]];
    let _613: &[&[u8]];
    let _614: &[&[u8]];
    let mut _615: &[&[u8]; 4];
    let _616: [&[u8]; 4];
    let mut _617: &[u8];
    let _618: &[u8];
    let mut _619: &anchor_lang::prelude::Pubkey;
    let _620: anchor_lang::prelude::Pubkey;
    let mut _621: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _622: &[u8];
    let _623: &[u8];
    let mut _624: &anchor_lang::prelude::Pubkey;
    let _625: anchor_lang::prelude::Pubkey;
    let mut _626: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _627: &[u8];
    let _628: &[u8];
    let _629: &[u8];
    let mut _630: &[u8; 1];
    let _631: [u8; 1];
    let mut _632: u8;
    let mut _633: std::ops::RangeFull;
    let mut _634: std::ops::RangeFull;
    let mut _635: &anchor_lang::prelude::Pubkey;
    let _636: &anchor_lang::prelude::Pubkey;
    let _637: anchor_lang::prelude::Pubkey;
    let mut _638: &anchor_lang::prelude::AccountInfo<'_>;
    let _639: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _640: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _641: isize;
    let mut _643: !;
    let mut _644: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _647: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _649: anchor_lang::prelude::AccountInfo<'_>;
    let mut _650: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _651: anchor_lang::prelude::AccountInfo<'_>;
    let mut _652: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _653: anchor_lang::prelude::AccountInfo<'_>;
    let mut _654: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _656: anchor_lang::prelude::AccountInfo<'_>;
    let mut _657: anchor_spl::token_2022::InitializeAccount3<'_>;
    let _658: ();
    let mut _659: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _660: std::result::Result<(), anchor_lang::error::Error>;
    let mut _661: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
    let mut _662: isize;
    let mut _664: !;
    let mut _665: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _668: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _669: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _670: &anchor_lang::prelude::AccountInfo<'_>;
    let _671: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _672: isize;
    let mut _675: !;
    let mut _676: anchor_lang::error::Error;
    let mut _677: anchor_lang::error::Error;
    let _678: ();
    let mut _679: bool;
    let _680: ();
    let mut _681: bool;
    let mut _682: &anchor_lang::prelude::Pubkey;
    let _683: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _684: &anchor_spl::token_interface::TokenAccount;
    let _685: &anchor_spl::token_interface::TokenAccount;
    let mut _686: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _687: &anchor_lang::prelude::Pubkey;
    let _688: anchor_lang::prelude::Pubkey;
    let mut _689: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _690: !;
    let mut _691: anchor_lang::error::Error;
    let mut _692: anchor_lang::error::Error;
    let mut _693: anchor_lang::error::Error;
    let mut _694: anchor_lang::error::ErrorCode;
    let mut _695: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _696: anchor_lang::prelude::Pubkey;
    let mut _697: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _698: &anchor_spl::token_interface::TokenAccount;
    let _699: &anchor_spl::token_interface::TokenAccount;
    let mut _700: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _701: anchor_lang::prelude::Pubkey;
    let mut _702: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _703: ();
    let mut _704: bool;
    let mut _705: &anchor_lang::prelude::Pubkey;
    let _706: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _707: &anchor_spl::token_interface::TokenAccount;
    let _708: &anchor_spl::token_interface::TokenAccount;
    let mut _709: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _710: &anchor_lang::prelude::Pubkey;
    let _711: anchor_lang::prelude::Pubkey;
    let mut _712: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _713: !;
    let mut _714: anchor_lang::error::Error;
    let mut _715: anchor_lang::error::Error;
    let mut _716: anchor_lang::error::Error;
    let mut _717: anchor_lang::error::ErrorCode;
    let mut _718: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _719: anchor_lang::prelude::Pubkey;
    let mut _720: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _721: &anchor_spl::token_interface::TokenAccount;
    let _722: &anchor_spl::token_interface::TokenAccount;
    let mut _723: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _724: anchor_lang::prelude::Pubkey;
    let mut _725: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _726: bool;
    let mut _727: &&anchor_lang::prelude::Pubkey;
    let mut _728: &&anchor_lang::prelude::Pubkey;
    let _729: &anchor_lang::prelude::Pubkey;
    let _730: anchor_lang::prelude::Pubkey;
    let mut _731: &anchor_lang::prelude::AccountInfo<'_>;
    let _732: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _733: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _734: !;
    let mut _735: anchor_lang::error::Error;
    let mut _736: anchor_lang::error::Error;
    let mut _737: anchor_lang::error::Error;
    let mut _738: anchor_lang::error::ErrorCode;
    let mut _739: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _740: anchor_lang::prelude::Pubkey;
    let mut _741: anchor_lang::prelude::Pubkey;
    let mut _742: &anchor_lang::prelude::AccountInfo<'_>;
    let _743: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _744: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _745: ();
    let mut _746: bool;
    let mut _747: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _748: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _749: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _750: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _751: !;
    let mut _752: anchor_lang::error::Error;
    let mut _753: anchor_lang::error::Error;
    let mut _754: anchor_lang::error::ErrorCode;
    let _755: ();
    let mut _756: bool;
    let mut _757: &anchor_lang::prelude::Rent;
    let mut _758: u64;
    let mut _759: &anchor_lang::prelude::AccountInfo<'_>;
    let _760: anchor_lang::prelude::AccountInfo<'_>;
    let mut _761: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _762: usize;
    let mut _763: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _764: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _765: &anchor_lang::prelude::AccountInfo<'_>;
    let _766: anchor_lang::prelude::AccountInfo<'_>;
    let mut _767: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _768: isize;
    let mut _770: !;
    let mut _771: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _773: !;
    let mut _774: anchor_lang::error::Error;
    let mut _775: anchor_lang::error::Error;
    let mut _776: anchor_lang::error::ErrorCode;
    let mut _778: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _779: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _780: isize;
    let mut _782: !;
    let mut _783: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _787: (anchor_lang::prelude::Pubkey, u8);
    let mut _788: &[&[u8]];
    let mut _789: &[&[u8]; 3];
    let _790: &[&[u8]; 3];
    let _791: [&[u8]; 3];
    let mut _792: &[u8];
    let _793: &[u8];
    let mut _794: &[u8];
    let _795: &[u8];
    let mut _796: &anchor_lang::prelude::Pubkey;
    let _797: anchor_lang::prelude::Pubkey;
    let mut _798: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _799: &[u8];
    let _800: &[u8];
    let mut _801: &anchor_lang::prelude::Pubkey;
    let _802: anchor_lang::prelude::Pubkey;
    let mut _803: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _804: &anchor_lang::prelude::Pubkey;
    let mut _805: u8;
    let _806: ();
    let mut _807: bool;
    let mut _808: &anchor_lang::prelude::Pubkey;
    let _809: anchor_lang::prelude::Pubkey;
    let mut _810: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _811: &anchor_lang::prelude::Pubkey;
    let mut _812: !;
    let mut _813: anchor_lang::error::Error;
    let mut _814: anchor_lang::error::Error;
    let mut _815: anchor_lang::error::Error;
    let mut _816: anchor_lang::error::ErrorCode;
    let mut _817: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _818: anchor_lang::prelude::Pubkey;
    let mut _819: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _820: anchor_lang::prelude::Pubkey;
    let mut _823: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _824: &anchor_lang::prelude::AccountInfo<'_>;
    let _825: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _826: &anchor_lang::prelude::AccountInfo<'_>;
    let _827: ();
    let mut _828: bool;
    let mut _829: bool;
    let mut _830: &&anchor_lang::prelude::Pubkey;
    let mut _831: &&anchor_lang::prelude::Pubkey;
    let _832: &anchor_lang::prelude::Pubkey;
    let _833: anchor_lang::prelude::Pubkey;
    let mut _835: &anchor_lang::prelude::AccountInfo<'_>;
    let _836: ();
    let mut _837: bool;
    let mut _838: u64;
    let mut _841: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _842: bool;
    let mut _843: &anchor_lang::prelude::Pubkey;
    let mut _844: &anchor_lang::prelude::Pubkey;
    let _845: anchor_lang::prelude::Pubkey;
    let mut _847: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _848: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _849: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _850: isize;
    let mut _852: !;
    let mut _853: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _856: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _857: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _858: &[u8];
    let _859: &&mut [u8];
    let mut _860: &std::cell::Ref<'_, &mut [u8]>;
    let _861: &std::cell::Ref<'_, &mut [u8]>;
    let mut _862: isize;
    let mut _864: !;
    let mut _865: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _868: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _869: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _870: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _871: isize;
    let mut _873: !;
    let mut _874: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _877: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _878: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _879: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _880: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _881: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _882: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _883: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _884: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _885: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _886: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _887: isize;
    let mut _889: !;
    let mut _890: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _893: &anchor_lang::prelude::Rent;
    let mut _894: usize;
    let mut _896: anchor_lang::prelude::AccountInfo<'_>;
    let mut _897: &anchor_lang::prelude::Signer<'_>;
    let mut _898: anchor_lang::prelude::AccountInfo<'_>;
    let mut _899: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _901: anchor_lang::prelude::AccountInfo<'_>;
    let mut _902: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _903: anchor_lang::system_program::CreateAccount<'_>;
    let _904: ();
    let mut _905: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _906: std::result::Result<(), anchor_lang::error::Error>;
    let mut _907: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _908: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _909: &[&[&[u8]]];
    let mut _910: &[&[&[u8]]; 1];
    let _911: &[&[&[u8]]; 1];
    let _912: [&[&[u8]]; 1];
    let mut _913: &[&[u8]];
    let _914: &[&[u8]];
    let _915: &[&[u8]];
    let mut _916: &[&[u8]; 4];
    let _917: [&[u8]; 4];
    let mut _918: &[u8];
    let _919: &[u8];
    let mut _920: &anchor_lang::prelude::Pubkey;
    let _921: anchor_lang::prelude::Pubkey;
    let mut _922: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _923: &[u8];
    let _924: &[u8];
    let mut _925: &anchor_lang::prelude::Pubkey;
    let _926: anchor_lang::prelude::Pubkey;
    let mut _927: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _928: &[u8];
    let _929: &[u8];
    let _930: &[u8];
    let mut _931: &[u8; 1];
    let _932: [u8; 1];
    let mut _933: u8;
    let mut _934: std::ops::RangeFull;
    let mut _935: std::ops::RangeFull;
    let mut _936: u64;
    let mut _937: u64;
    let mut _938: usize;
    let mut _939: &anchor_lang::prelude::Pubkey;
    let _940: &anchor_lang::prelude::Pubkey;
    let _941: anchor_lang::prelude::Pubkey;
    let mut _942: &anchor_lang::prelude::AccountInfo<'_>;
    let _943: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _944: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _945: isize;
    let mut _947: !;
    let mut _948: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _950: ();
    let mut _951: bool;
    let mut _952: &anchor_lang::prelude::Pubkey;
    let _953: anchor_lang::prelude::Pubkey;
    let mut _954: &anchor_lang::prelude::Signer<'_>;
    let mut _955: &anchor_lang::prelude::Pubkey;
    let _956: anchor_lang::prelude::Pubkey;
    let mut _957: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _958: !;
    let mut _959: anchor_lang::error::Error;
    let mut _960: anchor_lang::error::Error;
    let mut _961: anchor_lang::error::AnchorError;
    let mut _962: std::string::String;
    let mut _963: &anchor_lang::error::ErrorCode;
    let _964: anchor_lang::error::ErrorCode;
    let mut _965: u32;
    let mut _966: anchor_lang::error::ErrorCode;
    let mut _967: std::string::String;
    let mut _968: &anchor_lang::error::ErrorCode;
    let _969: anchor_lang::error::ErrorCode;
    let mut _970: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _971: anchor_lang::error::ErrorOrigin;
    let mut _972: anchor_lang::error::Source;
    let mut _973: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _974: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _975: anchor_lang::prelude::Pubkey;
    let mut _976: &anchor_lang::prelude::Signer<'_>;
    let mut _977: anchor_lang::prelude::Pubkey;
    let mut _978: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _980: u64;
    let mut _981: u64;
    let mut _982: &anchor_lang::prelude::Rent;
    let mut _983: usize;
    let mut _985: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _986: bool;
    let mut _987: &anchor_lang::prelude::Pubkey;
    let mut _988: &anchor_lang::prelude::Pubkey;
    let _989: anchor_lang::prelude::Pubkey;
    let mut _991: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _992: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _993: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _994: isize;
    let mut _996: !;
    let mut _997: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1000: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _1001: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _1002: &[u8];
    let _1003: &&mut [u8];
    let mut _1004: &std::cell::Ref<'_, &mut [u8]>;
    let _1005: &std::cell::Ref<'_, &mut [u8]>;
    let mut _1006: isize;
    let mut _1008: !;
    let mut _1009: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1012: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _1013: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _1014: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _1015: isize;
    let mut _1017: !;
    let mut _1018: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1021: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1022: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1023: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1024: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1025: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1026: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1027: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1028: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1029: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1030: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1031: isize;
    let mut _1033: !;
    let mut _1034: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1036: u64;
    let _1037: ();
    let mut _1038: bool;
    let mut _1039: u64;
    let mut _1041: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1042: &anchor_lang::prelude::Signer<'_>;
    let mut _1043: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1044: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1046: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1047: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1048: anchor_lang::system_program::Transfer<'_>;
    let _1049: ();
    let mut _1050: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1051: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1052: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _1053: u64;
    let mut _1054: isize;
    let mut _1056: !;
    let mut _1057: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1060: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1061: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1063: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1064: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1065: anchor_lang::system_program::Allocate<'_>;
    let _1066: ();
    let mut _1067: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1068: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1069: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _1070: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _1071: &[&[&[u8]]];
    let mut _1072: &[&[&[u8]]; 1];
    let _1073: &[&[&[u8]]; 1];
    let _1074: [&[&[u8]]; 1];
    let mut _1075: &[&[u8]];
    let _1076: &[&[u8]];
    let _1077: &[&[u8]];
    let mut _1078: &[&[u8]; 4];
    let _1079: [&[u8]; 4];
    let mut _1080: &[u8];
    let _1081: &[u8];
    let mut _1082: &anchor_lang::prelude::Pubkey;
    let _1083: anchor_lang::prelude::Pubkey;
    let mut _1084: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1085: &[u8];
    let _1086: &[u8];
    let mut _1087: &anchor_lang::prelude::Pubkey;
    let _1088: anchor_lang::prelude::Pubkey;
    let mut _1089: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1090: &[u8];
    let _1091: &[u8];
    let _1092: &[u8];
    let mut _1093: &[u8; 1];
    let _1094: [u8; 1];
    let mut _1095: u8;
    let mut _1096: std::ops::RangeFull;
    let mut _1097: std::ops::RangeFull;
    let mut _1098: u64;
    let mut _1099: usize;
    let mut _1101: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1102: bool;
    let mut _1103: &anchor_lang::prelude::Pubkey;
    let mut _1104: &anchor_lang::prelude::Pubkey;
    let _1105: anchor_lang::prelude::Pubkey;
    let mut _1107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _1108: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _1109: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1110: isize;
    let mut _1112: !;
    let mut _1113: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _1117: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _1118: &[u8];
    let _1119: &&mut [u8];
    let mut _1120: &std::cell::Ref<'_, &mut [u8]>;
    let _1121: &std::cell::Ref<'_, &mut [u8]>;
    let mut _1122: isize;
    let mut _1124: !;
    let mut _1125: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _1129: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _1130: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _1131: isize;
    let mut _1133: !;
    let mut _1134: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1137: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1138: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1139: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1140: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1142: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1143: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1144: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1145: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1146: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1147: isize;
    let mut _1149: !;
    let mut _1150: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1152: isize;
    let mut _1154: !;
    let mut _1155: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1158: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1159: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1161: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1162: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1163: anchor_lang::system_program::Assign<'_>;
    let _1164: ();
    let mut _1165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1166: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1167: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _1168: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _1169: &[&[&[u8]]];
    let mut _1170: &[&[&[u8]]; 1];
    let _1171: &[&[&[u8]]; 1];
    let _1172: [&[&[u8]]; 1];
    let mut _1173: &[&[u8]];
    let _1174: &[&[u8]];
    let _1175: &[&[u8]];
    let mut _1176: &[&[u8]; 4];
    let _1177: [&[u8]; 4];
    let mut _1178: &[u8];
    let _1179: &[u8];
    let mut _1180: &anchor_lang::prelude::Pubkey;
    let _1181: anchor_lang::prelude::Pubkey;
    let mut _1182: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1183: &[u8];
    let _1184: &[u8];
    let mut _1185: &anchor_lang::prelude::Pubkey;
    let _1186: anchor_lang::prelude::Pubkey;
    let mut _1187: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1188: &[u8];
    let _1189: &[u8];
    let _1190: &[u8];
    let mut _1191: &[u8; 1];
    let _1192: [u8; 1];
    let mut _1193: u8;
    let mut _1194: std::ops::RangeFull;
    let mut _1195: std::ops::RangeFull;
    let mut _1196: &anchor_lang::prelude::Pubkey;
    let _1197: &anchor_lang::prelude::Pubkey;
    let _1198: anchor_lang::prelude::Pubkey;
    let mut _1199: &anchor_lang::prelude::AccountInfo<'_>;
    let _1200: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1201: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1202: isize;
    let mut _1204: !;
    let mut _1205: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1208: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1210: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1211: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1212: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1213: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1214: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1215: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1217: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1218: anchor_spl::token_2022::InitializeAccount3<'_>;
    let _1219: ();
    let mut _1220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1221: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1222: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
    let mut _1223: isize;
    let mut _1225: !;
    let mut _1226: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1229: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1230: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _1231: &anchor_lang::prelude::AccountInfo<'_>;
    let _1232: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _1233: isize;
    let mut _1236: !;
    let mut _1237: anchor_lang::error::Error;
    let mut _1238: anchor_lang::error::Error;
    let _1239: ();
    let mut _1240: bool;
    let _1241: ();
    let mut _1242: bool;
    let mut _1243: &anchor_lang::prelude::Pubkey;
    let _1244: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1245: &anchor_spl::token_interface::TokenAccount;
    let _1246: &anchor_spl::token_interface::TokenAccount;
    let mut _1247: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1248: &anchor_lang::prelude::Pubkey;
    let _1249: anchor_lang::prelude::Pubkey;
    let mut _1250: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1251: !;
    let mut _1252: anchor_lang::error::Error;
    let mut _1253: anchor_lang::error::Error;
    let mut _1254: anchor_lang::error::Error;
    let mut _1255: anchor_lang::error::ErrorCode;
    let mut _1256: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1257: anchor_lang::prelude::Pubkey;
    let mut _1258: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1259: &anchor_spl::token_interface::TokenAccount;
    let _1260: &anchor_spl::token_interface::TokenAccount;
    let mut _1261: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1262: anchor_lang::prelude::Pubkey;
    let mut _1263: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _1264: ();
    let mut _1265: bool;
    let mut _1266: &anchor_lang::prelude::Pubkey;
    let _1267: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1268: &anchor_spl::token_interface::TokenAccount;
    let _1269: &anchor_spl::token_interface::TokenAccount;
    let mut _1270: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1271: &anchor_lang::prelude::Pubkey;
    let _1272: anchor_lang::prelude::Pubkey;
    let mut _1273: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1274: !;
    let mut _1275: anchor_lang::error::Error;
    let mut _1276: anchor_lang::error::Error;
    let mut _1277: anchor_lang::error::Error;
    let mut _1278: anchor_lang::error::ErrorCode;
    let mut _1279: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1280: anchor_lang::prelude::Pubkey;
    let mut _1281: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1282: &anchor_spl::token_interface::TokenAccount;
    let _1283: &anchor_spl::token_interface::TokenAccount;
    let mut _1284: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1285: anchor_lang::prelude::Pubkey;
    let mut _1286: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1287: bool;
    let mut _1288: &&anchor_lang::prelude::Pubkey;
    let mut _1289: &&anchor_lang::prelude::Pubkey;
    let _1290: &anchor_lang::prelude::Pubkey;
    let _1291: anchor_lang::prelude::Pubkey;
    let mut _1292: &anchor_lang::prelude::AccountInfo<'_>;
    let _1293: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1294: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1295: !;
    let mut _1296: anchor_lang::error::Error;
    let mut _1297: anchor_lang::error::Error;
    let mut _1298: anchor_lang::error::Error;
    let mut _1299: anchor_lang::error::ErrorCode;
    let mut _1300: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1301: anchor_lang::prelude::Pubkey;
    let mut _1302: anchor_lang::prelude::Pubkey;
    let mut _1303: &anchor_lang::prelude::AccountInfo<'_>;
    let _1304: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1305: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _1306: ();
    let mut _1307: bool;
    let mut _1308: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1309: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1310: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1311: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1312: !;
    let mut _1313: anchor_lang::error::Error;
    let mut _1314: anchor_lang::error::Error;
    let mut _1315: anchor_lang::error::ErrorCode;
    let _1316: ();
    let mut _1317: bool;
    let mut _1318: &anchor_lang::prelude::Rent;
    let mut _1319: u64;
    let mut _1320: &anchor_lang::prelude::AccountInfo<'_>;
    let _1321: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1322: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1323: usize;
    let mut _1324: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1325: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1326: &anchor_lang::prelude::AccountInfo<'_>;
    let _1327: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1328: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1329: isize;
    let mut _1331: !;
    let mut _1332: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1334: !;
    let mut _1335: anchor_lang::error::Error;
    let mut _1336: anchor_lang::error::Error;
    let mut _1337: anchor_lang::error::ErrorCode;
    let mut _1339: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _1340: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _1341: isize;
    let mut _1343: !;
    let mut _1344: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1348: (anchor_lang::prelude::Pubkey, u8);
    let mut _1349: &[&[u8]];
    let mut _1350: &[&[u8]; 3];
    let _1351: &[&[u8]; 3];
    let _1352: [&[u8]; 3];
    let mut _1353: &[u8];
    let _1354: &[u8];
    let mut _1355: &[u8];
    let _1356: &[u8];
    let mut _1357: &anchor_lang::prelude::Pubkey;
    let _1358: anchor_lang::prelude::Pubkey;
    let mut _1359: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1360: &[u8];
    let _1361: &[u8];
    let mut _1362: &anchor_lang::prelude::Pubkey;
    let _1363: anchor_lang::prelude::Pubkey;
    let mut _1364: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1365: &anchor_lang::prelude::Pubkey;
    let mut _1366: u8;
    let _1367: ();
    let mut _1368: bool;
    let mut _1369: &anchor_lang::prelude::Pubkey;
    let _1370: anchor_lang::prelude::Pubkey;
    let mut _1371: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1372: &anchor_lang::prelude::Pubkey;
    let mut _1373: !;
    let mut _1374: anchor_lang::error::Error;
    let mut _1375: anchor_lang::error::Error;
    let mut _1376: anchor_lang::error::Error;
    let mut _1377: anchor_lang::error::ErrorCode;
    let mut _1378: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1379: anchor_lang::prelude::Pubkey;
    let mut _1380: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1381: anchor_lang::prelude::Pubkey;
    let mut _1384: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1385: &&anchor_lang::prelude::AccountInfo<'_>;
    let _1386: &&anchor_lang::prelude::AccountInfo<'_>;
    let _1387: ();
    let mut _1388: bool;
    let mut _1389: bool;
    let mut _1390: &&anchor_lang::prelude::Pubkey;
    let mut _1391: &&anchor_lang::prelude::Pubkey;
    let _1392: &anchor_lang::prelude::Pubkey;
    let _1393: anchor_lang::prelude::Pubkey;
    let mut _1395: &anchor_lang::prelude::AccountInfo<'_>;
    let _1396: ();
    let mut _1397: bool;
    let mut _1398: u64;
    let mut _1401: &anchor_lang::prelude::Rent;
    let mut _1402: usize;
    let mut _1404: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1405: &anchor_lang::prelude::Signer<'_>;
    let mut _1406: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1407: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1409: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1410: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1411: anchor_lang::system_program::CreateAccount<'_>;
    let _1412: ();
    let mut _1413: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1414: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1415: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _1416: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _1417: &[&[&[u8]]];
    let mut _1418: &[&[&[u8]]; 1];
    let _1419: &[&[&[u8]]; 1];
    let _1420: [&[&[u8]]; 1];
    let mut _1421: &[&[u8]];
    let _1422: &[&[u8]];
    let _1423: &[&[u8]];
    let mut _1424: &[&[u8]; 4];
    let _1425: [&[u8]; 4];
    let mut _1426: &[u8];
    let _1427: &[u8];
    let mut _1428: &anchor_lang::prelude::Pubkey;
    let _1429: anchor_lang::prelude::Pubkey;
    let mut _1430: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1431: &[u8];
    let _1432: &[u8];
    let mut _1433: &anchor_lang::prelude::Pubkey;
    let _1434: anchor_lang::prelude::Pubkey;
    let mut _1435: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1436: &[u8];
    let _1437: &[u8];
    let _1438: &[u8];
    let mut _1439: &[u8; 1];
    let _1440: [u8; 1];
    let mut _1441: u8;
    let mut _1442: std::ops::RangeFull;
    let mut _1443: std::ops::RangeFull;
    let mut _1444: u64;
    let mut _1445: u64;
    let mut _1446: usize;
    let mut _1447: &anchor_lang::prelude::Pubkey;
    let _1448: &anchor_lang::prelude::Pubkey;
    let _1449: anchor_lang::prelude::Pubkey;
    let mut _1450: &anchor_lang::prelude::AccountInfo<'_>;
    let _1451: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1452: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _1453: isize;
    let mut _1455: !;
    let mut _1456: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1458: ();
    let mut _1459: bool;
    let mut _1460: &anchor_lang::prelude::Pubkey;
    let _1461: anchor_lang::prelude::Pubkey;
    let mut _1462: &anchor_lang::prelude::Signer<'_>;
    let mut _1463: &anchor_lang::prelude::Pubkey;
    let _1464: anchor_lang::prelude::Pubkey;
    let mut _1465: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1466: !;
    let mut _1467: anchor_lang::error::Error;
    let mut _1468: anchor_lang::error::Error;
    let mut _1469: anchor_lang::error::AnchorError;
    let mut _1470: std::string::String;
    let mut _1471: &anchor_lang::error::ErrorCode;
    let _1472: anchor_lang::error::ErrorCode;
    let mut _1473: u32;
    let mut _1474: anchor_lang::error::ErrorCode;
    let mut _1475: std::string::String;
    let mut _1476: &anchor_lang::error::ErrorCode;
    let _1477: anchor_lang::error::ErrorCode;
    let mut _1478: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _1479: anchor_lang::error::ErrorOrigin;
    let mut _1480: anchor_lang::error::Source;
    let mut _1481: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _1482: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1483: anchor_lang::prelude::Pubkey;
    let mut _1484: &anchor_lang::prelude::Signer<'_>;
    let mut _1485: anchor_lang::prelude::Pubkey;
    let mut _1486: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1488: u64;
    let mut _1489: u64;
    let mut _1490: &anchor_lang::prelude::Rent;
    let mut _1491: u64;
    let _1492: ();
    let mut _1493: bool;
    let mut _1494: u64;
    let mut _1496: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1497: &anchor_lang::prelude::Signer<'_>;
    let mut _1498: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1499: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1501: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1502: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1503: anchor_lang::system_program::Transfer<'_>;
    let _1504: ();
    let mut _1505: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1506: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1507: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _1508: u64;
    let mut _1509: isize;
    let mut _1511: !;
    let mut _1512: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1515: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1516: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1518: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1519: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1520: anchor_lang::system_program::Allocate<'_>;
    let _1521: ();
    let mut _1522: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1523: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1524: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _1525: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _1526: &[&[&[u8]]];
    let mut _1527: &[&[&[u8]]; 1];
    let _1528: &[&[&[u8]]; 1];
    let _1529: [&[&[u8]]; 1];
    let mut _1530: &[&[u8]];
    let _1531: &[&[u8]];
    let _1532: &[&[u8]];
    let mut _1533: &[&[u8]; 4];
    let _1534: [&[u8]; 4];
    let mut _1535: &[u8];
    let _1536: &[u8];
    let mut _1537: &anchor_lang::prelude::Pubkey;
    let _1538: anchor_lang::prelude::Pubkey;
    let mut _1539: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1540: &[u8];
    let _1541: &[u8];
    let mut _1542: &anchor_lang::prelude::Pubkey;
    let _1543: anchor_lang::prelude::Pubkey;
    let mut _1544: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1545: &[u8];
    let _1546: &[u8];
    let _1547: &[u8];
    let mut _1548: &[u8; 1];
    let _1549: [u8; 1];
    let mut _1550: u8;
    let mut _1551: std::ops::RangeFull;
    let mut _1552: std::ops::RangeFull;
    let mut _1553: u64;
    let mut _1554: isize;
    let mut _1556: !;
    let mut _1557: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1560: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1561: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1563: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1564: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1565: anchor_lang::system_program::Assign<'_>;
    let _1566: ();
    let mut _1567: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1568: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1569: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _1570: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _1571: &[&[&[u8]]];
    let mut _1572: &[&[&[u8]]; 1];
    let _1573: &[&[&[u8]]; 1];
    let _1574: [&[&[u8]]; 1];
    let mut _1575: &[&[u8]];
    let _1576: &[&[u8]];
    let _1577: &[&[u8]];
    let mut _1578: &[&[u8]; 4];
    let _1579: [&[u8]; 4];
    let mut _1580: &[u8];
    let _1581: &[u8];
    let mut _1582: &anchor_lang::prelude::Pubkey;
    let _1583: anchor_lang::prelude::Pubkey;
    let mut _1584: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1585: &[u8];
    let _1586: &[u8];
    let mut _1587: &anchor_lang::prelude::Pubkey;
    let _1588: anchor_lang::prelude::Pubkey;
    let mut _1589: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1590: &[u8];
    let _1591: &[u8];
    let _1592: &[u8];
    let mut _1593: &[u8; 1];
    let _1594: [u8; 1];
    let mut _1595: u8;
    let mut _1596: std::ops::RangeFull;
    let mut _1597: std::ops::RangeFull;
    let mut _1598: &anchor_lang::prelude::Pubkey;
    let _1599: &anchor_lang::prelude::Pubkey;
    let _1600: anchor_lang::prelude::Pubkey;
    let mut _1601: &anchor_lang::prelude::AccountInfo<'_>;
    let _1602: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1603: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _1604: isize;
    let mut _1606: !;
    let mut _1607: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1610: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _1612: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1613: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1615: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1616: anchor_spl::token_2022::InitializeMint2<'_>;
    let _1617: ();
    let mut _1618: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1619: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1620: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeMint2<'_>>;
    let mut _1621: &anchor_lang::prelude::Pubkey;
    let _1622: &anchor_lang::prelude::Pubkey;
    let _1623: anchor_lang::prelude::Pubkey;
    let mut _1624: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1625: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _1626: isize;
    let mut _1628: !;
    let mut _1629: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1632: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1633: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>, anchor_lang::error::Error>;
    let mut _1634: &anchor_lang::prelude::AccountInfo<'_>;
    let _1635: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _1636: isize;
    let mut _1639: !;
    let mut _1640: anchor_lang::error::Error;
    let mut _1641: anchor_lang::error::Error;
    let _1642: ();
    let mut _1643: bool;
    let _1644: ();
    let mut _1645: bool;
    let mut _1646: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _1647: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1648: &anchor_spl::token_interface::Mint;
    let _1649: &anchor_spl::token_interface::Mint;
    let mut _1650: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1651: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _1652: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let mut _1653: anchor_lang::prelude::Pubkey;
    let mut _1654: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1655: !;
    let mut _1656: anchor_lang::error::Error;
    let mut _1657: anchor_lang::error::Error;
    let mut _1658: anchor_lang::error::ErrorCode;
    let _1659: ();
    let mut _1660: bool;
    let mut _1661: solana_program::program_option::COption<bool>;
    let mut _1662: solana_program::program_option::COption<&anchor_lang::prelude::Pubkey>;
    let mut _1663: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _1664: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1665: &anchor_spl::token_interface::Mint;
    let _1666: &anchor_spl::token_interface::Mint;
    let mut _1667: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1668: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _1669: bool;
    let mut _1670: &std::option::Option<&anchor_lang::prelude::Pubkey>;
    let _1671: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _1672: !;
    let mut _1673: anchor_lang::error::Error;
    let mut _1674: anchor_lang::error::Error;
    let mut _1675: anchor_lang::error::ErrorCode;
    let _1676: ();
    let mut _1677: bool;
    let mut _1678: u8;
    let mut _1679: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1680: &anchor_spl::token_interface::Mint;
    let _1681: &anchor_spl::token_interface::Mint;
    let mut _1682: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1683: !;
    let mut _1684: anchor_lang::error::Error;
    let mut _1685: anchor_lang::error::Error;
    let mut _1686: anchor_lang::error::Error;
    let mut _1687: anchor_lang::error::ErrorCode;
    let mut _1688: (u8, i32);
    let mut _1689: u8;
    let mut _1690: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1691: &anchor_spl::token_interface::Mint;
    let _1692: &anchor_spl::token_interface::Mint;
    let mut _1693: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1694: bool;
    let mut _1695: &&anchor_lang::prelude::Pubkey;
    let mut _1696: &&anchor_lang::prelude::Pubkey;
    let _1697: &anchor_lang::prelude::Pubkey;
    let _1698: anchor_lang::prelude::Pubkey;
    let mut _1699: &anchor_lang::prelude::AccountInfo<'_>;
    let _1700: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1701: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _1702: !;
    let mut _1703: anchor_lang::error::Error;
    let mut _1704: anchor_lang::error::Error;
    let mut _1705: anchor_lang::error::Error;
    let mut _1706: anchor_lang::error::ErrorCode;
    let mut _1707: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1708: anchor_lang::prelude::Pubkey;
    let mut _1709: anchor_lang::prelude::Pubkey;
    let mut _1710: &anchor_lang::prelude::AccountInfo<'_>;
    let _1711: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1712: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let _1713: ();
    let mut _1714: bool;
    let mut _1715: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1716: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _1717: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1718: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1719: !;
    let mut _1720: anchor_lang::error::Error;
    let mut _1721: anchor_lang::error::Error;
    let mut _1722: anchor_lang::error::ErrorCode;
    let _1723: ();
    let mut _1724: bool;
    let mut _1725: &anchor_lang::prelude::Rent;
    let mut _1726: u64;
    let mut _1727: &anchor_lang::prelude::AccountInfo<'_>;
    let _1728: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1729: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1730: usize;
    let mut _1731: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1732: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1733: &anchor_lang::prelude::AccountInfo<'_>;
    let _1734: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1735: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1736: isize;
    let mut _1738: !;
    let mut _1739: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1741: !;
    let mut _1742: anchor_lang::error::Error;
    let mut _1743: anchor_lang::error::Error;
    let mut _1744: anchor_lang::error::ErrorCode;
    let mut _1746: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _1747: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _1748: isize;
    let mut _1750: !;
    let mut _1751: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1755: (anchor_lang::prelude::Pubkey, u8);
    let mut _1756: &[&[u8]];
    let mut _1757: &[&[u8]; 3];
    let _1758: &[&[u8]; 3];
    let _1759: [&[u8]; 3];
    let mut _1760: &[u8];
    let _1761: &[u8];
    let mut _1762: &[u8];
    let _1763: &[u8];
    let mut _1764: &anchor_lang::prelude::Pubkey;
    let _1765: anchor_lang::prelude::Pubkey;
    let mut _1766: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1767: &[u8];
    let _1768: &[u8];
    let mut _1769: &anchor_lang::prelude::Pubkey;
    let _1770: anchor_lang::prelude::Pubkey;
    let mut _1771: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1772: &anchor_lang::prelude::Pubkey;
    let mut _1773: u8;
    let _1774: ();
    let mut _1775: bool;
    let mut _1776: &anchor_lang::prelude::Pubkey;
    let _1777: anchor_lang::prelude::Pubkey;
    let mut _1778: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1779: &anchor_lang::prelude::Pubkey;
    let mut _1780: !;
    let mut _1781: anchor_lang::error::Error;
    let mut _1782: anchor_lang::error::Error;
    let mut _1783: anchor_lang::error::Error;
    let mut _1784: anchor_lang::error::ErrorCode;
    let mut _1785: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1786: anchor_lang::prelude::Pubkey;
    let mut _1787: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1788: anchor_lang::prelude::Pubkey;
    let mut _1791: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1792: &anchor_lang::prelude::AccountInfo<'_>;
    let _1793: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1794: &anchor_lang::prelude::AccountInfo<'_>;
    let _1795: ();
    let mut _1796: bool;
    let mut _1797: bool;
    let mut _1798: &&anchor_lang::prelude::Pubkey;
    let mut _1799: &&anchor_lang::prelude::Pubkey;
    let _1800: &anchor_lang::prelude::Pubkey;
    let _1801: anchor_lang::prelude::Pubkey;
    let mut _1803: &anchor_lang::prelude::AccountInfo<'_>;
    let _1804: ();
    let mut _1805: bool;
    let mut _1806: u64;
    let mut _1809: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1810: bool;
    let mut _1811: &anchor_lang::prelude::Pubkey;
    let mut _1812: &anchor_lang::prelude::Pubkey;
    let _1813: anchor_lang::prelude::Pubkey;
    let mut _1815: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _1816: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _1817: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1818: isize;
    let mut _1820: !;
    let mut _1821: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1824: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _1825: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _1826: &[u8];
    let _1827: &&mut [u8];
    let mut _1828: &std::cell::Ref<'_, &mut [u8]>;
    let _1829: &std::cell::Ref<'_, &mut [u8]>;
    let mut _1830: isize;
    let mut _1832: !;
    let mut _1833: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1836: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _1837: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _1838: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _1839: isize;
    let mut _1841: !;
    let mut _1842: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1845: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1846: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1847: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1848: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1849: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1850: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1851: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1852: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1853: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1854: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1855: isize;
    let mut _1857: !;
    let mut _1858: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1861: &anchor_lang::prelude::Rent;
    let mut _1862: usize;
    let mut _1864: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1865: &anchor_lang::prelude::Signer<'_>;
    let mut _1866: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1867: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1869: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1870: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1871: anchor_lang::system_program::CreateAccount<'_>;
    let _1872: ();
    let mut _1873: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1874: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1875: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _1876: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _1877: &[&[&[u8]]];
    let mut _1878: &[&[&[u8]]; 1];
    let _1879: &[&[&[u8]]; 1];
    let _1880: [&[&[u8]]; 1];
    let mut _1881: &[&[u8]];
    let _1882: &[&[u8]];
    let _1883: &[&[u8]];
    let mut _1884: &[&[u8]; 4];
    let _1885: [&[u8]; 4];
    let mut _1886: &[u8];
    let _1887: &[u8];
    let mut _1888: &anchor_lang::prelude::Pubkey;
    let _1889: anchor_lang::prelude::Pubkey;
    let mut _1890: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _1891: &[u8];
    let _1892: &[u8];
    let mut _1893: &anchor_lang::prelude::Pubkey;
    let _1894: anchor_lang::prelude::Pubkey;
    let mut _1895: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1896: &[u8];
    let _1897: &[u8];
    let _1898: &[u8];
    let mut _1899: &[u8; 1];
    let _1900: [u8; 1];
    let mut _1901: u8;
    let mut _1902: std::ops::RangeFull;
    let mut _1903: std::ops::RangeFull;
    let mut _1904: u64;
    let mut _1905: u64;
    let mut _1906: usize;
    let mut _1907: &anchor_lang::prelude::Pubkey;
    let _1908: &anchor_lang::prelude::Pubkey;
    let _1909: anchor_lang::prelude::Pubkey;
    let mut _1910: &anchor_lang::prelude::AccountInfo<'_>;
    let _1911: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1912: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _1913: isize;
    let mut _1915: !;
    let mut _1916: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1918: ();
    let mut _1919: bool;
    let mut _1920: &anchor_lang::prelude::Pubkey;
    let _1921: anchor_lang::prelude::Pubkey;
    let mut _1922: &anchor_lang::prelude::Signer<'_>;
    let mut _1923: &anchor_lang::prelude::Pubkey;
    let _1924: anchor_lang::prelude::Pubkey;
    let mut _1925: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1926: !;
    let mut _1927: anchor_lang::error::Error;
    let mut _1928: anchor_lang::error::Error;
    let mut _1929: anchor_lang::error::AnchorError;
    let mut _1930: std::string::String;
    let mut _1931: &anchor_lang::error::ErrorCode;
    let _1932: anchor_lang::error::ErrorCode;
    let mut _1933: u32;
    let mut _1934: anchor_lang::error::ErrorCode;
    let mut _1935: std::string::String;
    let mut _1936: &anchor_lang::error::ErrorCode;
    let _1937: anchor_lang::error::ErrorCode;
    let mut _1938: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _1939: anchor_lang::error::ErrorOrigin;
    let mut _1940: anchor_lang::error::Source;
    let mut _1941: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _1942: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1943: anchor_lang::prelude::Pubkey;
    let mut _1944: &anchor_lang::prelude::Signer<'_>;
    let mut _1945: anchor_lang::prelude::Pubkey;
    let mut _1946: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1948: u64;
    let mut _1949: u64;
    let mut _1950: &anchor_lang::prelude::Rent;
    let mut _1951: usize;
    let mut _1953: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1954: bool;
    let mut _1955: &anchor_lang::prelude::Pubkey;
    let mut _1956: &anchor_lang::prelude::Pubkey;
    let _1957: anchor_lang::prelude::Pubkey;
    let mut _1959: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _1960: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _1961: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1962: isize;
    let mut _1964: !;
    let mut _1965: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1968: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _1969: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _1970: &[u8];
    let _1971: &&mut [u8];
    let mut _1972: &std::cell::Ref<'_, &mut [u8]>;
    let _1973: &std::cell::Ref<'_, &mut [u8]>;
    let mut _1974: isize;
    let mut _1976: !;
    let mut _1977: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1980: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _1981: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _1982: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _1983: isize;
    let mut _1985: !;
    let mut _1986: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1989: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1990: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1991: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1992: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1993: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1994: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1995: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1996: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1997: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1998: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1999: isize;
    let mut _2001: !;
    let mut _2002: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _2004: u64;
    let _2005: ();
    let mut _2006: bool;
    let mut _2007: u64;
    let mut _2009: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2010: &anchor_lang::prelude::Signer<'_>;
    let mut _2011: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2012: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2014: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2015: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _2016: anchor_lang::system_program::Transfer<'_>;
    let _2017: ();
    let mut _2018: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _2019: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2020: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _2021: u64;
    let mut _2022: isize;
    let mut _2024: !;
    let mut _2025: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _2028: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2029: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2031: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2032: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _2033: anchor_lang::system_program::Allocate<'_>;
    let _2034: ();
    let mut _2035: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _2036: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2037: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _2038: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _2039: &[&[&[u8]]];
    let mut _2040: &[&[&[u8]]; 1];
    let _2041: &[&[&[u8]]; 1];
    let _2042: [&[&[u8]]; 1];
    let mut _2043: &[&[u8]];
    let _2044: &[&[u8]];
    let _2045: &[&[u8]];
    let mut _2046: &[&[u8]; 4];
    let _2047: [&[u8]; 4];
    let mut _2048: &[u8];
    let _2049: &[u8];
    let mut _2050: &anchor_lang::prelude::Pubkey;
    let _2051: anchor_lang::prelude::Pubkey;
    let mut _2052: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _2053: &[u8];
    let _2054: &[u8];
    let mut _2055: &anchor_lang::prelude::Pubkey;
    let _2056: anchor_lang::prelude::Pubkey;
    let mut _2057: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2058: &[u8];
    let _2059: &[u8];
    let _2060: &[u8];
    let mut _2061: &[u8; 1];
    let _2062: [u8; 1];
    let mut _2063: u8;
    let mut _2064: std::ops::RangeFull;
    let mut _2065: std::ops::RangeFull;
    let mut _2066: u64;
    let mut _2067: usize;
    let mut _2069: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2070: bool;
    let mut _2071: &anchor_lang::prelude::Pubkey;
    let mut _2072: &anchor_lang::prelude::Pubkey;
    let _2073: anchor_lang::prelude::Pubkey;
    let mut _2075: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _2076: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _2077: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2078: isize;
    let mut _2080: !;
    let mut _2081: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _2084: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _2085: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _2086: &[u8];
    let _2087: &&mut [u8];
    let mut _2088: &std::cell::Ref<'_, &mut [u8]>;
    let _2089: &std::cell::Ref<'_, &mut [u8]>;
    let mut _2090: isize;
    let mut _2092: !;
    let mut _2093: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _2096: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _2097: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _2098: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _2099: isize;
    let mut _2101: !;
    let mut _2102: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _2105: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _2106: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _2107: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _2108: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _2109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _2110: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _2111: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _2112: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _2113: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _2114: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _2115: isize;
    let mut _2117: !;
    let mut _2118: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _2120: isize;
    let mut _2122: !;
    let mut _2123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _2126: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2127: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2129: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2130: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _2131: anchor_lang::system_program::Assign<'_>;
    let _2132: ();
    let mut _2133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _2134: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2135: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _2136: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _2137: &[&[&[u8]]];
    let mut _2138: &[&[&[u8]]; 1];
    let _2139: &[&[&[u8]]; 1];
    let _2140: [&[&[u8]]; 1];
    let mut _2141: &[&[u8]];
    let _2142: &[&[u8]];
    let _2143: &[&[u8]];
    let mut _2144: &[&[u8]; 4];
    let _2145: [&[u8]; 4];
    let mut _2146: &[u8];
    let _2147: &[u8];
    let mut _2148: &anchor_lang::prelude::Pubkey;
    let _2149: anchor_lang::prelude::Pubkey;
    let mut _2150: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _2151: &[u8];
    let _2152: &[u8];
    let mut _2153: &anchor_lang::prelude::Pubkey;
    let _2154: anchor_lang::prelude::Pubkey;
    let mut _2155: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2156: &[u8];
    let _2157: &[u8];
    let _2158: &[u8];
    let mut _2159: &[u8; 1];
    let _2160: [u8; 1];
    let mut _2161: u8;
    let mut _2162: std::ops::RangeFull;
    let mut _2163: std::ops::RangeFull;
    let mut _2164: &anchor_lang::prelude::Pubkey;
    let _2165: &anchor_lang::prelude::Pubkey;
    let _2166: anchor_lang::prelude::Pubkey;
    let mut _2167: &anchor_lang::prelude::AccountInfo<'_>;
    let _2168: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2169: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _2170: isize;
    let mut _2172: !;
    let mut _2173: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _2176: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _2178: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2179: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2180: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2181: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2182: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2183: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2185: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2186: anchor_spl::token_2022::InitializeAccount3<'_>;
    let _2187: ();
    let mut _2188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _2189: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2190: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
    let mut _2191: isize;
    let mut _2193: !;
    let mut _2194: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _2197: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2198: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _2199: &anchor_lang::prelude::AccountInfo<'_>;
    let _2200: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _2201: isize;
    let mut _2204: !;
    let mut _2205: anchor_lang::error::Error;
    let mut _2206: anchor_lang::error::Error;
    let _2207: ();
    let mut _2208: bool;
    let _2209: ();
    let mut _2210: bool;
    let mut _2211: &anchor_lang::prelude::Pubkey;
    let _2212: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _2213: &anchor_spl::token_interface::TokenAccount;
    let _2214: &anchor_spl::token_interface::TokenAccount;
    let mut _2215: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2216: &anchor_lang::prelude::Pubkey;
    let _2217: anchor_lang::prelude::Pubkey;
    let mut _2218: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2219: !;
    let mut _2220: anchor_lang::error::Error;
    let mut _2221: anchor_lang::error::Error;
    let mut _2222: anchor_lang::error::Error;
    let mut _2223: anchor_lang::error::ErrorCode;
    let mut _2224: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _2225: anchor_lang::prelude::Pubkey;
    let mut _2226: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _2227: &anchor_spl::token_interface::TokenAccount;
    let _2228: &anchor_spl::token_interface::TokenAccount;
    let mut _2229: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2230: anchor_lang::prelude::Pubkey;
    let mut _2231: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _2232: ();
    let mut _2233: bool;
    let mut _2234: &anchor_lang::prelude::Pubkey;
    let _2235: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _2236: &anchor_spl::token_interface::TokenAccount;
    let _2237: &anchor_spl::token_interface::TokenAccount;
    let mut _2238: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2239: &anchor_lang::prelude::Pubkey;
    let _2240: anchor_lang::prelude::Pubkey;
    let mut _2241: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2242: !;
    let mut _2243: anchor_lang::error::Error;
    let mut _2244: anchor_lang::error::Error;
    let mut _2245: anchor_lang::error::Error;
    let mut _2246: anchor_lang::error::ErrorCode;
    let mut _2247: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _2248: anchor_lang::prelude::Pubkey;
    let mut _2249: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _2250: &anchor_spl::token_interface::TokenAccount;
    let _2251: &anchor_spl::token_interface::TokenAccount;
    let mut _2252: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2253: anchor_lang::prelude::Pubkey;
    let mut _2254: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2255: bool;
    let mut _2256: &&anchor_lang::prelude::Pubkey;
    let mut _2257: &&anchor_lang::prelude::Pubkey;
    let _2258: &anchor_lang::prelude::Pubkey;
    let _2259: anchor_lang::prelude::Pubkey;
    let mut _2260: &anchor_lang::prelude::AccountInfo<'_>;
    let _2261: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2262: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _2263: !;
    let mut _2264: anchor_lang::error::Error;
    let mut _2265: anchor_lang::error::Error;
    let mut _2266: anchor_lang::error::Error;
    let mut _2267: anchor_lang::error::ErrorCode;
    let mut _2268: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _2269: anchor_lang::prelude::Pubkey;
    let mut _2270: anchor_lang::prelude::Pubkey;
    let mut _2271: &anchor_lang::prelude::AccountInfo<'_>;
    let _2272: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2273: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let _2274: ();
    let mut _2275: bool;
    let mut _2276: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2277: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _2278: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2279: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _2280: !;
    let mut _2281: anchor_lang::error::Error;
    let mut _2282: anchor_lang::error::Error;
    let mut _2283: anchor_lang::error::ErrorCode;
    let _2284: ();
    let mut _2285: bool;
    let mut _2286: &anchor_lang::prelude::Rent;
    let mut _2287: u64;
    let mut _2288: &anchor_lang::prelude::AccountInfo<'_>;
    let _2289: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2290: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2291: usize;
    let mut _2292: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _2293: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _2294: &anchor_lang::prelude::AccountInfo<'_>;
    let _2295: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2296: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2297: isize;
    let mut _2299: !;
    let mut _2300: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _2302: !;
    let mut _2303: anchor_lang::error::Error;
    let mut _2304: anchor_lang::error::Error;
    let mut _2305: anchor_lang::error::ErrorCode;
    let _2306: ();
    let mut _2307: bool;
    let mut _2308: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2309: &anchor_lang::prelude::Signer<'_>;
    let _2310: &anchor_lang::prelude::Signer<'_>;
    let mut _2311: !;
    let mut _2312: anchor_lang::error::Error;
    let mut _2313: anchor_lang::error::Error;
    let mut _2314: anchor_lang::error::ErrorCode;
    let _2315: ();
    let mut _2317: &state::lending_market::LendingMarket;
    let mut _2318: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _2319: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _2320: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _2321: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _2322: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _2323: isize;
    let mut _2325: !;
    let mut _2326: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _2329: &anchor_lang::prelude::Signer<'_>;
    let mut _2330: bool;
    let mut _2331: &anchor_lang::prelude::Pubkey;
    let mut _2332: &anchor_lang::prelude::Pubkey;
    let mut _2333: !;
    let mut _2334: anchor_lang::error::Error;
    let mut _2335: anchor_lang::error::Error;
    let mut _2336: anchor_lang::error::Error;
    let mut _2337: LendingError;
    let mut _2338: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _2339: anchor_lang::prelude::Pubkey;
    let mut _2340: anchor_lang::prelude::Pubkey;
    let mut _2342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Pubkey>;
    let mut _2343: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error>;
    let mut _2344: std::result::Result<anchor_lang::prelude::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _2345: &[&[u8]];
    let mut _2346: &[&[u8]; 3];
    let _2347: &[&[u8]; 3];
    let _2348: [&[u8]; 3];
    let mut _2349: &[u8];
    let _2350: &[u8];
    let mut _2351: &[u8];
    let _2352: &[u8];
    let mut _2353: &anchor_lang::prelude::Pubkey;
    let _2354: anchor_lang::prelude::Pubkey;
    let mut _2355: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _2356: &[u8];
    let _2357: &[u8];
    let _2358: &[u8];
    let mut _2359: &[u8; 1];
    let _2360: [u8; 1];
    let mut _2361: u8;
    let mut _2362: u64;
    let mut _2363: &state::lending_market::LendingMarket;
    let mut _2364: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let _2365: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _2366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _2367: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _2368: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _2369: isize;
    let mut _2371: !;
    let mut _2372: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _2374: std::ops::RangeFull;
    let mut _2375: &anchor_lang::prelude::Pubkey;
    let _2376: &&anchor_lang::prelude::Pubkey;
    let mut _2377: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _2378: isize;
    let mut _2380: !;
    let mut _2381: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _2383: ();
    let mut _2384: bool;
    let mut _2385: &anchor_lang::prelude::Pubkey;
    let _2386: anchor_lang::prelude::Pubkey;
    let mut _2387: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2388: &anchor_lang::prelude::Pubkey;
    let mut _2389: !;
    let mut _2390: anchor_lang::error::Error;
    let mut _2391: anchor_lang::error::Error;
    let mut _2392: anchor_lang::error::Error;
    let mut _2393: anchor_lang::error::ErrorCode;
    let mut _2394: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _2395: anchor_lang::prelude::Pubkey;
    let mut _2396: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2397: anchor_lang::prelude::Pubkey;
    let mut _2399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _2400: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _2401: isize;
    let mut _2403: !;
    let mut _2404: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _2408: &&mut [u8];
    let mut _2409: &std::cell::Ref<'_, &mut [u8]>;
    let _2410: &std::cell::Ref<'_, &mut [u8]>;
    let _2411: std::cell::Ref<'_, &mut [u8]>;
    let mut _2412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _2413: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _2414: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2415: isize;
    let mut _2417: !;
    let mut _2418: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _2421: ();
    let mut _2422: &mut [u8];
    let mut _2423: &mut [u8; 8];
    let mut _2424: &[u8];
    let _2425: &[u8];
    let _2426: &[u8];
    let mut _2427: &[u8];
    let mut _2428: std::ops::RangeTo<usize>;
    let mut _2430: [u8; 8];
    let _2431: ();
    let mut _2432: bool;
    let mut _2433: u64;
    let mut _2434: !;
    let mut _2435: anchor_lang::error::Error;
    let mut _2436: anchor_lang::error::Error;
    let mut _2437: anchor_lang::error::ErrorCode;
    let mut _2438: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _2439: &anchor_lang::prelude::Pubkey;
    let mut _2440: &anchor_lang::prelude::AccountInfo<'_>;
    let _2441: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _2442: isize;
    let mut _2445: !;
    let mut _2446: anchor_lang::error::Error;
    let mut _2447: anchor_lang::error::Error;
    let _2448: ();
    let mut _2449: bool;
    let mut _2450: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2451: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let _2452: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _2453: !;
    let mut _2454: anchor_lang::error::Error;
    let mut _2455: anchor_lang::error::Error;
    let mut _2456: anchor_lang::error::ErrorCode;
    let _2457: ();
    let mut _2458: bool;
    let mut _2459: &anchor_lang::prelude::Rent;
    let mut _2460: u64;
    let mut _2461: &anchor_lang::prelude::AccountInfo<'_>;
    let _2462: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2463: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _2464: usize;
    let mut _2465: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _2466: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _2467: &anchor_lang::prelude::AccountInfo<'_>;
    let _2468: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2469: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _2470: isize;
    let mut _2472: !;
    let mut _2473: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _2475: !;
    let mut _2476: anchor_lang::error::Error;
    let mut _2477: anchor_lang::error::Error;
    let mut _2478: anchor_lang::error::ErrorCode;
    let _2479: ();
    let mut _2480: bool;
    let mut _2481: &&anchor_lang::prelude::Pubkey;
    let _2482: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2483: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _2484: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2485: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _2486: &&anchor_lang::prelude::Pubkey;
    let _2487: &anchor_lang::prelude::Pubkey;
    let _2488: anchor_lang::prelude::Pubkey;
    let mut _2489: &anchor_lang::prelude::AccountInfo<'_>;
    let _2490: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2491: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _2492: !;
    let mut _2493: anchor_lang::error::Error;
    let mut _2494: anchor_lang::error::ErrorCode;
    let _2495: ();
    let mut _2496: bool;
    let mut _2497: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2498: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _2499: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2500: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _2501: !;
    let mut _2502: anchor_lang::error::Error;
    let mut _2503: anchor_lang::error::Error;
    let mut _2504: anchor_lang::error::ErrorCode;
    let _2505: ();
    let _2506: ();
    let mut _2507: bool;
    let mut _2508: &anchor_lang::prelude::Pubkey;
    let _2509: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _2510: &anchor_spl::token_interface::TokenAccount;
    let _2511: &anchor_spl::token_interface::TokenAccount;
    let mut _2512: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2513: &anchor_lang::prelude::Pubkey;
    let _2514: anchor_lang::prelude::Pubkey;
    let mut _2515: &anchor_lang::prelude::Signer<'_>;
    let mut _2516: !;
    let mut _2517: anchor_lang::error::Error;
    let mut _2518: anchor_lang::error::ErrorCode;
    let _2519: ();
    let mut _2520: bool;
    let mut _2521: &anchor_lang::prelude::Pubkey;
    let _2522: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _2523: &anchor_spl::token_interface::TokenAccount;
    let _2524: &anchor_spl::token_interface::TokenAccount;
    let mut _2525: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2526: &anchor_lang::prelude::Pubkey;
    let _2527: anchor_lang::prelude::Pubkey;
    let mut _2528: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2529: !;
    let mut _2530: anchor_lang::error::Error;
    let mut _2531: anchor_lang::error::ErrorCode;
    let mut _2532: bool;
    let mut _2533: &&anchor_lang::prelude::Pubkey;
    let _2534: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2535: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _2536: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2537: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _2538: &&anchor_lang::prelude::Pubkey;
    let _2539: &anchor_lang::prelude::Pubkey;
    let _2540: anchor_lang::prelude::Pubkey;
    let mut _2541: &anchor_lang::prelude::AccountInfo<'_>;
    let _2542: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2543: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _2544: !;
    let mut _2545: anchor_lang::error::Error;
    let mut _2546: anchor_lang::error::ErrorCode;
    let mut _2547: handlers::handler_init_reserve::InitReserve<'_>;
    let mut _2548: anchor_lang::prelude::Signer<'_>;
    let mut _2549: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _2550: anchor_lang::prelude::AccountInfo<'_>;
    let mut _2551: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _2552: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _2553: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _2554: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _2555: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _2556: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _2557: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _2558: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _2559: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _2560: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _2561: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _2575: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2576: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2577: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2578: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2579: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2580: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2581: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2582: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2583: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2584: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2585: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2586: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2587: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2588: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2589: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2590: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2591: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2592: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2593: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2594: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _2595: &anchor_lang::prelude::Pubkey;
    let mut _2596: &mut [u8];
    let mut _2597: &anchor_lang::prelude::Pubkey;
    let mut _2598: &mut [u8];
    let mut _2599: &anchor_lang::prelude::Pubkey;
    let mut _2600: &mut [u8];
    let mut _2601: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2602: &anchor_lang::prelude::Pubkey;
    let mut _2603: &mut [u8];
    let mut _2604: &anchor_lang::prelude::Pubkey;
    let mut _2605: &mut [u8];
    let mut _2606: &anchor_lang::prelude::Pubkey;
    let mut _2607: &mut [u8];
    let mut _2608: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2609: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2610: &anchor_lang::prelude::Pubkey;
    let mut _2611: &mut [u8];
    let mut _2612: &anchor_lang::prelude::Pubkey;
    let mut _2613: &mut [u8];
    let mut _2614: &anchor_lang::prelude::Pubkey;
    let mut _2615: &mut [u8];
    let mut _2616: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2617: &anchor_lang::prelude::Pubkey;
    let mut _2618: &mut [u8];
    let mut _2619: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _2620: bool;
    let mut _2621: bool;
    let mut _2622: bool;
    let mut _2623: bool;
    let mut _2624: bool;
    let mut _2625: bool;
    let mut _2626: bool;
    let mut _2627: bool;
    let mut _2628: bool;
    let mut _2629: bool;
    let mut _2630: bool;
    let mut _2631: bool;
    let mut _2632: bool;
    let mut _2633: bool;
    let mut _2634: bool;
    let mut _2635: bool;
    let mut _2636: bool;
    let mut _2637: bool;
    let mut _2638: bool;
    let mut _2639: bool;
    let mut _2640: bool;
    let mut _2641: bool;
    let mut _2642: bool;
    let mut _2643: bool;
    let mut _2644: bool;
    let mut _2645: bool;
    let mut _2646: bool;
    let mut _2647: bool;
    let mut _2648: bool;
    let mut _2649: bool;
    let mut _2650: bool;
    let mut _2651: bool;
    let mut _2652: bool;
    let mut _2653: bool;
    let mut _2654: bool;
    let mut _2655: bool;
    let mut _2656: bool;
    let mut _2657: bool;
    let mut _2658: bool;
    let mut _2659: bool;
    let mut _2660: bool;
    let mut _2661: bool;
    let mut _2662: bool;
    let mut _2663: bool;
    let mut _2664: bool;
    let mut _2665: bool;
    let mut _2666: bool;
    let mut _2667: bool;
    let mut _2668: bool;
    let mut _2669: bool;
    let mut _2670: bool;
    let mut _2671: bool;
    let mut _2672: bool;
    let mut _2673: bool;
    let mut _2674: bool;
    let mut _2675: bool;
    let mut _2676: bool;
    let mut _2677: bool;
    let mut _2678: bool;
    let mut _2679: bool;
    let mut _2680: bool;
    let mut _2681: bool;
    let mut _2682: bool;
    let mut _2683: bool;
    let mut _2684: bool;
    let mut _2685: bool;
    let mut _2686: bool;
    let mut _2687: bool;
    let mut _2688: bool;
    let mut _2689: bool;
    let mut _2690: bool;
    let mut _2691: bool;
    let mut _2692: bool;
    let mut _2693: bool;
    let mut _2694: bool;
    let mut _2695: bool;
    let mut _2696: bool;
    let mut _2697: bool;
    let mut _2698: bool;
    let mut _2699: bool;
    let mut _2700: bool;
    let mut _2701: bool;
    let mut _2702: bool;
    let mut _2703: bool;
    let mut _2704: bool;
    let mut _2705: bool;
    let mut _2706: bool;
    let mut _2707: bool;
    let mut _2708: bool;
    let mut _2709: bool;
    let mut _2710: bool;
    let mut _2711: bool;
    let mut _2712: isize;
    let mut _2713: isize;
    let mut _2714: isize;
    let mut _2715: isize;
    let mut _2716: isize;
    let mut _2717: isize;
    let mut _2718: isize;
    let mut _2719: isize;
    let mut _2720: isize;
    let mut _2721: isize;
    let mut _2722: isize;
    let mut _2723: isize;
    let mut _2724: isize;
    let mut _2725: isize;
    let mut _2726: isize;
    let mut _2727: isize;
    let mut _2728: isize;
    let mut _2729: isize;
    let mut _2730: isize;
    let mut _2731: isize;
    let mut _2732: isize;
    let mut _2733: isize;
    let mut _2734: isize;
    let mut _2735: isize;
    let mut _2736: isize;
    let mut _2737: isize;
    let mut _2738: isize;
    let mut _2739: isize;
    let mut _2740: isize;
    let mut _2741: isize;
    let mut _2742: isize;
    let mut _2743: isize;
    let mut _2744: isize;
    let mut _2745: isize;
    let mut _2746: isize;
    let mut _2747: isize;
    let mut _2748: isize;
    let mut _2749: isize;
    let mut _2750: isize;
    let mut _2751: isize;
    let mut _2752: isize;
    let mut _2753: isize;
    let mut _2754: isize;
    let mut _2755: isize;
    let mut _2756: isize;
    let mut _2757: isize;
    let mut _2758: isize;
    let mut _2759: isize;
    let mut _2760: isize;
    let mut _2761: isize;
    let mut _2762: isize;
    let mut _2763: isize;
    let mut _2764: isize;
    let mut _2765: isize;
    let mut _2766: isize;
    let mut _2767: isize;
    let mut _2768: isize;
    let mut _2769: isize;
    let mut _2770: isize;
    let mut _2771: isize;
    let mut _2772: isize;
    let mut _2773: isize;
    let mut _2774: isize;
    let mut _2775: isize;
    let mut _2776: isize;
    let mut _2777: isize;
    let mut _2778: isize;
    let mut _2779: isize;
    let mut _2780: isize;
    let mut _2781: isize;
    let mut _2782: isize;
    let mut _2783: isize;
    let mut _2784: isize;
    let mut _2785: isize;
    let mut _2786: isize;
    let mut _2787: isize;
    let mut _2788: isize;
    let mut _2789: isize;
    let mut _2790: isize;
    let mut _2791: isize;
    let mut _2792: isize;
    let mut _2793: isize;
    let mut _2794: isize;
    let mut _2795: isize;
    let mut _2796: isize;
    let mut _2797: isize;
    let mut _2798: isize;
    let mut _2799: isize;
    let mut _2800: isize;
    let mut _2801: isize;
    let mut _2802: isize;
    let mut _2803: isize;
    let mut _2804: isize;
    let mut _2805: isize;
    let mut _2806: isize;
    let mut _2807: isize;
    let mut _2808: isize;
    let mut _2809: isize;
    let mut _2810: isize;
    let mut _2811: isize;
    let mut _2812: isize;
    let mut _2813: isize;
    let mut _2814: isize;
    let mut _2815: isize;
    let mut _2816: isize;
    let mut _2817: isize;
    let mut _2818: isize;
    let mut _2819: isize;
    let mut _2820: isize;
    let mut _2821: isize;
    let mut _2822: isize;
    let mut _2823: isize;
    let mut _2824: isize;
    let mut _2825: isize;
    let mut _2826: isize;
    let mut _2827: isize;
    let mut _2828: isize;
    let mut _2829: isize;
    let mut _2830: isize;
    let mut _2831: isize;
    let mut _2832: isize;
    let mut _2833: isize;
    let mut _2834: isize;
    let mut _2835: isize;
    let mut _2836: isize;
    let mut _2837: isize;
    let mut _2838: isize;
    let mut _2839: isize;
    let mut _2840: isize;
    let mut _2841: isize;
    let mut _2842: isize;
    let mut _2843: isize;
    let mut _2844: isize;
    let mut _2845: isize;
    let mut _2846: isize;
    let mut _2847: isize;
    let mut _2848: isize;
    let mut _2849: isize;
    let mut _2850: isize;
    let mut _2851: isize;
    let mut _2852: isize;
    let mut _2853: isize;
    let mut _2854: isize;
    let mut _2855: isize;
    let mut _2856: isize;
    let mut _2857: isize;
    let mut _2858: isize;
    let mut _2859: isize;
    let mut _2860: isize;
    let mut _2861: isize;
    let mut _2862: isize;
    let mut _2863: isize;
    let mut _2864: isize;
    let mut _2865: isize;
    let mut _2866: isize;
    let mut _2867: isize;
    let mut _2868: isize;
    let mut _2869: isize;
    let mut _2870: isize;
    let mut _2871: isize;
    let mut _2872: isize;
    let mut _2873: isize;
    let mut _2874: isize;
    let mut _2875: isize;
    let mut _2876: isize;
    let mut _2877: isize;
    let mut _2878: isize;
    let mut _2879: isize;
    let mut _2880: isize;
    let mut _2881: isize;
    let mut _2882: isize;
    let mut _2883: isize;
    let mut _2884: isize;
    let mut _2885: isize;
    let mut _2886: isize;
    let mut _2887: isize;
    let mut _2888: isize;
    let mut _2889: isize;
    let mut _2890: isize;
    let mut _2891: isize;
    let mut _2892: isize;
    let mut _2893: isize;
    let mut _2894: isize;
    let mut _2895: isize;
    let mut _2896: isize;
    let mut _2897: isize;
    let mut _2898: isize;
    let mut _2899: isize;
    let mut _2900: isize;
    let mut _2901: isize;
    let mut _2902: isize;
    let mut _2903: isize;
    let mut _2904: isize;
    let mut _2905: isize;
    let mut _2906: isize;
    let mut _2907: isize;
    let mut _2908: isize;
    let mut _2909: isize;
    let mut _2910: isize;
    let mut _2911: isize;
    let mut _2912: isize;
    let mut _2913: isize;
    let mut _2914: isize;
    let mut _2915: isize;
    let mut _2916: isize;
    let mut _2917: isize;
    let mut _2918: isize;
    let mut _2919: isize;
    let mut _2920: isize;
    let mut _2921: isize;
    let mut _2922: isize;
    let mut _2923: isize;
    let mut _2924: isize;
    let mut _2925: isize;
    let mut _2926: isize;
    let mut _2927: isize;
    let mut _2928: isize;
    let mut _2929: isize;
    let mut _2930: isize;
    let mut _2931: isize;
    let mut _2932: isize;
    let mut _2933: isize;
    let mut _2934: isize;
    let mut _2935: isize;
    let mut _2936: isize;
    let mut _2937: isize;
    let mut _2938: isize;
    let mut _2939: isize;
    let mut _2940: isize;
    let mut _2941: isize;
    let mut _2942: isize;
    let mut _2943: isize;
    let mut _2944: isize;
    let mut _2945: isize;
    let mut _2946: isize;
    let mut _2947: isize;
    let mut _2948: isize;
    let mut _2949: isize;
    let mut _2950: isize;
    let mut _2951: isize;
    let mut _2952: isize;
    let mut _2953: isize;
    let mut _2954: isize;
    let mut _2955: isize;
    let mut _2956: isize;
    let mut _2957: isize;
    let mut _2958: isize;
    let mut _2959: isize;
    let mut _2960: isize;
    let mut _2961: isize;
    let mut _2962: isize;
    let mut _2963: isize;
    let mut _2964: isize;
    let mut _2965: isize;
    let mut _2966: isize;
    let mut _2967: isize;
    let mut _2968: isize;
    let mut _2969: isize;
    let mut _2970: isize;
    let mut _2971: isize;
    let mut _2972: isize;
    let mut _2973: isize;
    let mut _2974: isize;
    let mut _2975: isize;
    let mut _2976: isize;
    let mut _2977: isize;
    let mut _2978: isize;
    let mut _2979: isize;
    let mut _2980: isize;
    let mut _2981: isize;
    let mut _2982: isize;
    let mut _2983: isize;
    let mut _2984: isize;
    let mut _2985: isize;
    let mut _2986: isize;
    let mut _2987: isize;
    let mut _2988: isize;
    let mut _2989: isize;
    let mut _2990: isize;
    let mut _2991: isize;
    let mut _2992: isize;
    let mut _2993: isize;
    let mut _2994: isize;
    let mut _2995: isize;
    let mut _2996: isize;
    let mut _2997: isize;
    let mut _2998: isize;
    let mut _2999: isize;
    let mut _3000: isize;
    let mut _3001: isize;
    let mut _3002: isize;
    let mut _3003: isize;
    let mut _3004: isize;
    let mut _3005: isize;
    let mut _3006: isize;
    let mut _3007: isize;
    let mut _3008: isize;
    let mut _3009: isize;
    let mut _3010: isize;
    let mut _3011: isize;
    let mut _3012: isize;
    let mut _3013: isize;
    let mut _3014: isize;
    let mut _3015: isize;
    let mut _3016: isize;
    let mut _3017: isize;
    let mut _3018: isize;
    let mut _3019: isize;
    let mut _3020: isize;
    let mut _3021: isize;
    let mut _3022: isize;
    let mut _3023: isize;
    let mut _3024: isize;
    let mut _3025: isize;
    let mut _3026: isize;
    let mut _3027: isize;
    let mut _3028: isize;
    let mut _3029: isize;
    let mut _3030: isize;
    let mut _3031: isize;
    let mut _3032: isize;
    let mut _3033: isize;
    let mut _3034: isize;
    let mut _3035: isize;
    let mut _3036: isize;
    let mut _3037: isize;
    let mut _3038: isize;
    let mut _3039: isize;
    let mut _3040: isize;
    let mut _3041: isize;
    let mut _3042: isize;
    let mut _3043: isize;
    let mut _3044: isize;
    let mut _3045: isize;
    let mut _3046: isize;
    let mut _3047: isize;
    let mut _3048: isize;
    let mut _3049: isize;
    let mut _3050: isize;
    let mut _3051: isize;
    let mut _3052: isize;
    let mut _3053: isize;
    let mut _3054: isize;
    let mut _3055: isize;
    let mut _3056: isize;
    let mut _3057: isize;
    let mut _3058: isize;
    let mut _3059: isize;
    let mut _3060: isize;
    let mut _3061: isize;
    let mut _3062: isize;
    let mut _3063: isize;
    let mut _3064: isize;
    let mut _3065: isize;
    let mut _3066: isize;
    let mut _3067: isize;
    let mut _3068: isize;
    let mut _3069: isize;
    let mut _3070: isize;
    let mut _3071: isize;
    let mut _3072: isize;
    let mut _3073: isize;
    let mut _3074: isize;
    let mut _3075: isize;
    let mut _3076: isize;
    let mut _3077: isize;
    let mut _3078: isize;
    let mut _3079: isize;
    let mut _3080: isize;
    let mut _3081: isize;
    let mut _3082: isize;
    let mut _3083: isize;
    let mut _3084: isize;
    let mut _3085: isize;
    let mut _3086: isize;
    let mut _3087: isize;
    let mut _3088: isize;
    let mut _3089: isize;
    let mut _3090: isize;
    let mut _3091: isize;
    let mut _3092: isize;
    let mut _3093: isize;
    let mut _3094: isize;
    let mut _3095: isize;
    let mut _3096: isize;
    let mut _3097: isize;
    let mut _3098: isize;
    let mut _3099: isize;
    let mut _3100: isize;
    let mut _3101: isize;
    let mut _3102: isize;
    let mut _3103: isize;
    let mut _3104: isize;
    let mut _3105: isize;
    let mut _3106: isize;
    let mut _3107: isize;
    let mut _3108: isize;
    let mut _3109: isize;
    let mut _3110: isize;
    let mut _3111: isize;
    let mut _3112: isize;
    let mut _3113: isize;
    let mut _3114: isize;
    let mut _3115: isize;
    let mut _3116: isize;
    let mut _3117: isize;
    let mut _3118: isize;
    let mut _3119: isize;
    let mut _3120: isize;
    let mut _3121: isize;
    let mut _3122: isize;
    let mut _3123: isize;
    let mut _3124: isize;
    let mut _3125: isize;
    let mut _3126: isize;
    let mut _3127: isize;
    let mut _3128: isize;
    let mut _3129: isize;
    let mut _3130: isize;
    let mut _3131: isize;
    let mut _3132: isize;
    let mut _3133: isize;
    let mut _3134: isize;
    let mut _3135: isize;
    let mut _3136: isize;
    let mut _3137: isize;
    let mut _3138: isize;
    let mut _3139: isize;
    let mut _3140: isize;
    let mut _3141: isize;
    let mut _3142: isize;
    let mut _3143: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3144: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3145: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3146: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3147: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3148: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3149: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3150: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3151: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3152: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3153: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3154: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3155: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3156: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3157: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3158: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3159: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3160: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3161: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3162: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3163: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3164: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3165: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3166: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3167: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3168: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3169: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3170: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3171: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3172: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3173: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3174: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3175: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3176: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3177: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3178: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3179: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3180: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3181: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3182: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3183: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3184: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3185: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3186: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3187: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3188: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3189: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3190: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3191: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3192: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3193: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3194: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3195: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3196: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _3197: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3198: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3199: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3200: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3201: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3202: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _3203: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug lending_market_owner => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
        scope 6 {
            debug lending_market => _21;
            let _36: anchor_lang::prelude::AccountInfo<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug lending_market_authority => _36;
                let _57: &anchor_lang::prelude::AccountInfo<'_>;
                scope 16 {
                    debug reserve => _57;
                    let _66: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                    scope 17 {
                        debug reserve_liquidity_mint => _66;
                        let _87: &anchor_lang::prelude::AccountInfo<'_>;
                        scope 22 {
                            debug reserve_liquidity_supply => _87;
                            let _102: &anchor_lang::prelude::AccountInfo<'_>;
                            scope 23 {
                                debug fee_receiver => _102;
                                let _117: &anchor_lang::prelude::AccountInfo<'_>;
                                scope 24 {
                                    debug reserve_collateral_mint => _117;
                                    let _132: &anchor_lang::prelude::AccountInfo<'_>;
                                    scope 25 {
                                        debug reserve_collateral_supply => _132;
                                        let _141: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        scope 26 {
                                            debug initial_liquidity_source => _141;
                                            let _156: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                            scope 31 {
                                                debug rent => _156;
                                                let _171: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _185: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                scope 36 {
                                                    debug liquidity_token_program => _171;
                                                    let _186: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                                    let _197: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _200: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                                    scope 41 {
                                                        debug collateral_token_program => _186;
                                                        let _201: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                                        let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _215: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                                        scope 46 {
                                                            debug system_program => _201;
                                                            let _216: anchor_lang::prelude::Rent;
                                                            let _220: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _223: anchor_lang::prelude::Rent;
                                                            scope 51 {
                                                                debug __anchor_rent => _216;
                                                                let _224: anchor_lang::prelude::Pubkey;
                                                                let _225: u8;
                                                                scope 56 {
                                                                    debug __pda_address => _224;
                                                                    debug __bump => _225;
                                                                    let _260: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                    let _261: &anchor_lang::prelude::Pubkey;
                                                                    scope 57 {
                                                                        debug reserve_liquidity_supply => _260;
                                                                        let _769: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _772: usize;
                                                                        let _777: anchor_lang::prelude::Rent;
                                                                        let _781: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _784: anchor_lang::prelude::Rent;
                                                                        scope 160 {
                                                                            debug residual => _769;
                                                                            scope 161 {
                                                                            }
                                                                        }
                                                                        scope 162 {
                                                                            debug val => _772;
                                                                            scope 163 {
                                                                            }
                                                                        }
                                                                        scope 164 {
                                                                            debug __anchor_rent => _777;
                                                                            let _785: anchor_lang::prelude::Pubkey;
                                                                            let _786: u8;
                                                                            scope 169 {
                                                                                debug __pda_address => _785;
                                                                                debug __bump => _786;
                                                                                let _821: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                let _822: &anchor_lang::prelude::Pubkey;
                                                                                scope 170 {
                                                                                    debug fee_receiver => _821;
                                                                                    let _1330: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _1333: usize;
                                                                                    let _1338: anchor_lang::prelude::Rent;
                                                                                    let _1342: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _1345: anchor_lang::prelude::Rent;
                                                                                    scope 273 {
                                                                                        debug residual => _1330;
                                                                                        scope 274 {
                                                                                        }
                                                                                    }
                                                                                    scope 275 {
                                                                                        debug val => _1333;
                                                                                        scope 276 {
                                                                                        }
                                                                                    }
                                                                                    scope 277 {
                                                                                        debug __anchor_rent => _1338;
                                                                                        let _1346: anchor_lang::prelude::Pubkey;
                                                                                        let _1347: u8;
                                                                                        scope 282 {
                                                                                            debug __pda_address => _1346;
                                                                                            debug __bump => _1347;
                                                                                            let _1382: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                                                            let _1383: &anchor_lang::prelude::Pubkey;
                                                                                            scope 283 {
                                                                                                debug reserve_collateral_mint => _1382;
                                                                                                let _1737: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _1740: usize;
                                                                                                let _1745: anchor_lang::prelude::Rent;
                                                                                                let _1749: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _1752: anchor_lang::prelude::Rent;
                                                                                                scope 323 {
                                                                                                    debug residual => _1737;
                                                                                                    scope 324 {
                                                                                                    }
                                                                                                }
                                                                                                scope 325 {
                                                                                                    debug val => _1740;
                                                                                                    scope 326 {
                                                                                                    }
                                                                                                }
                                                                                                scope 327 {
                                                                                                    debug __anchor_rent => _1745;
                                                                                                    let _1753: anchor_lang::prelude::Pubkey;
                                                                                                    let _1754: u8;
                                                                                                    scope 332 {
                                                                                                        debug __pda_address => _1753;
                                                                                                        debug __bump => _1754;
                                                                                                        let _1789: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                                        let _1790: &anchor_lang::prelude::Pubkey;
                                                                                                        scope 333 {
                                                                                                            debug reserve_collateral_supply => _1789;
                                                                                                            let _2298: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _2301: usize;
                                                                                                            let _2316: anchor_lang::prelude::Pubkey;
                                                                                                            let _2324: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                            let _2327: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                                                                                            let _2341: anchor_lang::prelude::Pubkey;
                                                                                                            let _2370: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                            let _2373: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                                                                                            let _2379: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                            let _2382: anchor_lang::prelude::Pubkey;
                                                                                                            scope 436 {
                                                                                                                debug residual => _2298;
                                                                                                                scope 437 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 438 {
                                                                                                                debug val => _2301;
                                                                                                                scope 439 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 440 {
                                                                                                                debug my_key => _2316;
                                                                                                                let _2328: anchor_lang::prelude::Pubkey;
                                                                                                                scope 445 {
                                                                                                                    debug target_key => _2328;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 441 {
                                                                                                                debug residual => _2324;
                                                                                                                scope 442 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 443 {
                                                                                                                debug val => _2327;
                                                                                                                scope 444 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 446 {
                                                                                                                debug __pda_address => _2341;
                                                                                                                let _2398: anchor_lang::prelude::Rent;
                                                                                                                let _2402: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                let _2405: anchor_lang::prelude::Rent;
                                                                                                                scope 455 {
                                                                                                                    debug __anchor_rent => _2398;
                                                                                                                    let _2406: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                                                                                                                    let mut _2407: &[u8];
                                                                                                                    let _2416: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                    let _2419: std::cell::Ref<'_, &mut [u8]>;
                                                                                                                    scope 460 {
                                                                                                                        debug reserve => _2406;
                                                                                                                        let _2471: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                        let _2474: usize;
                                                                                                                        scope 470 {
                                                                                                                            debug residual => _2471;
                                                                                                                            scope 471 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 472 {
                                                                                                                            debug val => _2474;
                                                                                                                            scope 473 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 461 {
                                                                                                                        debug __data => _2407;
                                                                                                                        let mut _2420: [u8; 8];
                                                                                                                        scope 466 {
                                                                                                                            debug __disc_bytes => _2420;
                                                                                                                            let _2429: u64;
                                                                                                                            scope 467 {
                                                                                                                                debug __discriminator => _2429;
                                                                                                                                let _2443: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
                                                                                                                                let _2444: anchor_lang::error::Error;
                                                                                                                                scope 468 {
                                                                                                                                    debug val => _2443;
                                                                                                                                }
                                                                                                                                scope 469 {
                                                                                                                                    debug e => _2444;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 462 {
                                                                                                                        debug residual => _2416;
                                                                                                                        scope 463 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 464 {
                                                                                                                        debug val => _2419;
                                                                                                                        scope 465 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 456 {
                                                                                                                    debug residual => _2402;
                                                                                                                    scope 457 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 458 {
                                                                                                                    debug val => _2405;
                                                                                                                    scope 459 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 447 {
                                                                                                                debug residual => _2370;
                                                                                                                scope 448 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 449 {
                                                                                                                debug val => _2373;
                                                                                                                scope 450 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 451 {
                                                                                                                debug residual => _2379;
                                                                                                                scope 452 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 453 {
                                                                                                                debug val => _2382;
                                                                                                                scope 454 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 334 {
                                                                                                            debug owner_program => _1790;
                                                                                                            let _1802: u64;
                                                                                                            let _2196: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                                            let _2202: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                                                                            let _2203: anchor_lang::error::Error;
                                                                                                            let mut _2564: &&anchor_lang::prelude::Pubkey;
                                                                                                            scope 335 {
                                                                                                                debug __current_lamports => _1802;
                                                                                                                let _1807: usize;
                                                                                                                let _1808: anchor_lang::prelude::AccountInfo<'_>;
                                                                                                                let _1947: u64;
                                                                                                                let _1952: anchor_lang::prelude::AccountInfo<'_>;
                                                                                                                let _2175: anchor_lang::prelude::AccountInfo<'_>;
                                                                                                                let mut _2562: &anchor_lang::error::ErrorCode;
                                                                                                                let mut _2563: &anchor_lang::error::ErrorCode;
                                                                                                                scope 336 {
                                                                                                                    debug space => _1807;
                                                                                                                    let _1860: u64;
                                                                                                                    scope 358 {
                                                                                                                        debug lamports => _1860;
                                                                                                                        let _1863: anchor_lang::system_program::CreateAccount<'_>;
                                                                                                                        scope 359 {
                                                                                                                            debug cpi_accounts => _1863;
                                                                                                                            let _1868: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                                                            scope 360 {
                                                                                                                                debug cpi_context => _1868;
                                                                                                                                let _1914: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                                let _1917: ();
                                                                                                                                scope 361 {
                                                                                                                                    debug residual => _1914;
                                                                                                                                    scope 362 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 363 {
                                                                                                                                    debug val => _1917;
                                                                                                                                    scope 364 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 337 {
                                                                                                                    debug mint_info => _1808;
                                                                                                                    let _1814: std::cell::Ref<'_, &mut [u8]>;
                                                                                                                    let _1819: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                    let _1822: std::cell::Ref<'_, &mut [u8]>;
                                                                                                                    scope 338 {
                                                                                                                        debug mint_data => _1814;
                                                                                                                        let _1823: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                                        let _1831: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                        let _1834: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                                        scope 343 {
                                                                                                                            debug mint_state => _1823;
                                                                                                                            let _1835: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                            let _1840: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                            let _1843: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                            scope 348 {
                                                                                                                                debug mint_extensions => _1835;
                                                                                                                                let _1844: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                                scope 353 {
                                                                                                                                    debug required_extensions => _1844;
                                                                                                                                    let _1856: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                                    let _1859: usize;
                                                                                                                                    scope 354 {
                                                                                                                                        debug residual => _1856;
                                                                                                                                        scope 355 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 356 {
                                                                                                                                        debug val => _1859;
                                                                                                                                        scope 357 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 349 {
                                                                                                                                debug residual => _1840;
                                                                                                                                scope 350 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 351 {
                                                                                                                                debug val => _1843;
                                                                                                                                scope 352 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 344 {
                                                                                                                            debug residual => _1831;
                                                                                                                            scope 345 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 346 {
                                                                                                                            debug val => _1834;
                                                                                                                            scope 347 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 339 {
                                                                                                                        debug residual => _1819;
                                                                                                                        scope 340 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 341 {
                                                                                                                        debug val => _1822;
                                                                                                                        scope 342 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 365 {
                                                                                                                    debug required_lamports => _1947;
                                                                                                                    let _2008: anchor_lang::system_program::Transfer<'_>;
                                                                                                                    let _2027: anchor_lang::system_program::Allocate<'_>;
                                                                                                                    scope 387 {
                                                                                                                        debug cpi_accounts => _2008;
                                                                                                                        let _2013: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                                                        scope 388 {
                                                                                                                            debug cpi_context => _2013;
                                                                                                                            let _2023: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                            let _2026: ();
                                                                                                                            scope 389 {
                                                                                                                                debug residual => _2023;
                                                                                                                                scope 390 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 391 {
                                                                                                                                debug val => _2026;
                                                                                                                                scope 392 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 393 {
                                                                                                                        debug cpi_accounts => _2027;
                                                                                                                        let _2030: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                                                        scope 394 {
                                                                                                                            debug cpi_context => _2030;
                                                                                                                            let _2068: anchor_lang::prelude::AccountInfo<'_>;
                                                                                                                            let _2121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                            let _2124: ();
                                                                                                                            let _2125: anchor_lang::system_program::Assign<'_>;
                                                                                                                            scope 395 {
                                                                                                                                debug mint_info => _2068;
                                                                                                                                let _2074: std::cell::Ref<'_, &mut [u8]>;
                                                                                                                                let _2079: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                                let _2082: std::cell::Ref<'_, &mut [u8]>;
                                                                                                                                scope 396 {
                                                                                                                                    debug mint_data => _2074;
                                                                                                                                    let _2083: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                                                    let _2091: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                                    let _2094: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                                                    scope 401 {
                                                                                                                                        debug mint_state => _2083;
                                                                                                                                        let _2095: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                                        let _2100: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                                        let _2103: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                                        scope 406 {
                                                                                                                                            debug mint_extensions => _2095;
                                                                                                                                            let _2104: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                                            scope 411 {
                                                                                                                                                debug required_extensions => _2104;
                                                                                                                                                let _2116: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                                                let _2119: usize;
                                                                                                                                                scope 412 {
                                                                                                                                                    debug residual => _2116;
                                                                                                                                                    scope 413 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 414 {
                                                                                                                                                    debug val => _2119;
                                                                                                                                                    scope 415 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 407 {
                                                                                                                                            debug residual => _2100;
                                                                                                                                            scope 408 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 409 {
                                                                                                                                            debug val => _2103;
                                                                                                                                            scope 410 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 402 {
                                                                                                                                        debug residual => _2091;
                                                                                                                                        scope 403 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 404 {
                                                                                                                                        debug val => _2094;
                                                                                                                                        scope 405 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 397 {
                                                                                                                                    debug residual => _2079;
                                                                                                                                    scope 398 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 399 {
                                                                                                                                    debug val => _2082;
                                                                                                                                    scope 400 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 416 {
                                                                                                                                debug residual => _2121;
                                                                                                                                scope 417 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 418 {
                                                                                                                                debug val => _2124;
                                                                                                                                scope 419 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 420 {
                                                                                                                                debug cpi_accounts => _2125;
                                                                                                                                let _2128: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                                                                scope 421 {
                                                                                                                                    debug cpi_context => _2128;
                                                                                                                                    let _2171: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                                    let _2174: ();
                                                                                                                                    scope 422 {
                                                                                                                                        debug residual => _2171;
                                                                                                                                        scope 423 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 424 {
                                                                                                                                        debug val => _2174;
                                                                                                                                        scope 425 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 366 {
                                                                                                                    debug mint_info => _1952;
                                                                                                                    let _1958: std::cell::Ref<'_, &mut [u8]>;
                                                                                                                    let _1963: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                    let _1966: std::cell::Ref<'_, &mut [u8]>;
                                                                                                                    scope 367 {
                                                                                                                        debug mint_data => _1958;
                                                                                                                        let _1967: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                                        let _1975: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                        let _1978: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                                        scope 372 {
                                                                                                                            debug mint_state => _1967;
                                                                                                                            let _1979: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                            let _1984: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                            let _1987: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                            scope 377 {
                                                                                                                                debug mint_extensions => _1979;
                                                                                                                                let _1988: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                                scope 382 {
                                                                                                                                    debug required_extensions => _1988;
                                                                                                                                    let _2000: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                                    let _2003: usize;
                                                                                                                                    scope 383 {
                                                                                                                                        debug residual => _2000;
                                                                                                                                        scope 384 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 385 {
                                                                                                                                        debug val => _2003;
                                                                                                                                        scope 386 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 378 {
                                                                                                                                debug residual => _1984;
                                                                                                                                scope 379 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 380 {
                                                                                                                                debug val => _1987;
                                                                                                                                scope 381 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 373 {
                                                                                                                            debug residual => _1975;
                                                                                                                            scope 374 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 375 {
                                                                                                                            debug val => _1978;
                                                                                                                            scope 376 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 368 {
                                                                                                                        debug residual => _1963;
                                                                                                                        scope 369 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 370 {
                                                                                                                        debug val => _1966;
                                                                                                                        scope 371 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 426 {
                                                                                                                    debug cpi_program => _2175;
                                                                                                                    let _2177: anchor_spl::token_2022::InitializeAccount3<'_>;
                                                                                                                    scope 427 {
                                                                                                                        debug accounts => _2177;
                                                                                                                        let _2184: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
                                                                                                                        scope 428 {
                                                                                                                            debug cpi_ctx => _2184;
                                                                                                                            let _2192: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                            let _2195: ();
                                                                                                                            scope 429 {
                                                                                                                                debug residual => _2192;
                                                                                                                                scope 430 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 431 {
                                                                                                                                debug val => _2195;
                                                                                                                                scope 432 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 433 {
                                                                                                                debug pa => _2196;
                                                                                                            }
                                                                                                            scope 434 {
                                                                                                                debug val => _2202;
                                                                                                            }
                                                                                                            scope 435 {
                                                                                                                debug e => _2203;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 328 {
                                                                                                    debug residual => _1749;
                                                                                                    scope 329 {
                                                                                                    }
                                                                                                }
                                                                                                scope 330 {
                                                                                                    debug val => _1752;
                                                                                                    scope 331 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 284 {
                                                                                                debug owner_program => _1383;
                                                                                                let _1394: u64;
                                                                                                let _1631: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                                                                let _1637: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
                                                                                                let _1638: anchor_lang::error::Error;
                                                                                                let mut _2568: &&anchor_lang::prelude::Pubkey;
                                                                                                scope 285 {
                                                                                                    debug __current_lamports => _1394;
                                                                                                    let _1399: usize;
                                                                                                    let _1487: u64;
                                                                                                    let _1609: anchor_lang::prelude::AccountInfo<'_>;
                                                                                                    let mut _2566: &anchor_lang::error::ErrorCode;
                                                                                                    let mut _2567: &anchor_lang::error::ErrorCode;
                                                                                                    scope 286 {
                                                                                                        debug space => _1399;
                                                                                                        let _1400: u64;
                                                                                                        scope 287 {
                                                                                                            debug lamports => _1400;
                                                                                                            let _1403: anchor_lang::system_program::CreateAccount<'_>;
                                                                                                            scope 288 {
                                                                                                                debug cpi_accounts => _1403;
                                                                                                                let _1408: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                                                scope 289 {
                                                                                                                    debug cpi_context => _1408;
                                                                                                                    let _1454: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                    let _1457: ();
                                                                                                                    scope 290 {
                                                                                                                        debug residual => _1454;
                                                                                                                        scope 291 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 292 {
                                                                                                                        debug val => _1457;
                                                                                                                        scope 293 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 294 {
                                                                                                        debug required_lamports => _1487;
                                                                                                        let _1495: anchor_lang::system_program::Transfer<'_>;
                                                                                                        let _1514: anchor_lang::system_program::Allocate<'_>;
                                                                                                        scope 295 {
                                                                                                            debug cpi_accounts => _1495;
                                                                                                            let _1500: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                                            scope 296 {
                                                                                                                debug cpi_context => _1500;
                                                                                                                let _1510: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                let _1513: ();
                                                                                                                scope 297 {
                                                                                                                    debug residual => _1510;
                                                                                                                    scope 298 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 299 {
                                                                                                                    debug val => _1513;
                                                                                                                    scope 300 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 301 {
                                                                                                            debug cpi_accounts => _1514;
                                                                                                            let _1517: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                                            scope 302 {
                                                                                                                debug cpi_context => _1517;
                                                                                                                let _1555: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                let _1558: ();
                                                                                                                let _1559: anchor_lang::system_program::Assign<'_>;
                                                                                                                scope 303 {
                                                                                                                    debug residual => _1555;
                                                                                                                    scope 304 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 305 {
                                                                                                                    debug val => _1558;
                                                                                                                    scope 306 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 307 {
                                                                                                                    debug cpi_accounts => _1559;
                                                                                                                    let _1562: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                                                    scope 308 {
                                                                                                                        debug cpi_context => _1562;
                                                                                                                        let _1605: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                        let _1608: ();
                                                                                                                        scope 309 {
                                                                                                                            debug residual => _1605;
                                                                                                                            scope 310 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 311 {
                                                                                                                            debug val => _1608;
                                                                                                                            scope 312 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 313 {
                                                                                                        debug cpi_program => _1609;
                                                                                                        let _1611: anchor_spl::token_2022::InitializeMint2<'_>;
                                                                                                        scope 314 {
                                                                                                            debug accounts => _1611;
                                                                                                            let _1614: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeMint2<'_>>;
                                                                                                            scope 315 {
                                                                                                                debug cpi_ctx => _1614;
                                                                                                                let _1627: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                                let _1630: ();
                                                                                                                scope 316 {
                                                                                                                    debug residual => _1627;
                                                                                                                    scope 317 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 318 {
                                                                                                                    debug val => _1630;
                                                                                                                    scope 319 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 320 {
                                                                                                    debug pa => _1631;
                                                                                                    let mut _2565: &std::option::Option<&anchor_lang::prelude::Pubkey>;
                                                                                                }
                                                                                                scope 321 {
                                                                                                    debug val => _1637;
                                                                                                }
                                                                                                scope 322 {
                                                                                                    debug e => _1638;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 278 {
                                                                                        debug residual => _1342;
                                                                                        scope 279 {
                                                                                        }
                                                                                    }
                                                                                    scope 280 {
                                                                                        debug val => _1345;
                                                                                        scope 281 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 171 {
                                                                                    debug owner_program => _822;
                                                                                    let _834: u64;
                                                                                    let _1228: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                    let _1234: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                                                    let _1235: anchor_lang::error::Error;
                                                                                    let mut _2571: &&anchor_lang::prelude::Pubkey;
                                                                                    scope 172 {
                                                                                        debug __current_lamports => _834;
                                                                                        let _839: usize;
                                                                                        let _840: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let _979: u64;
                                                                                        let _984: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let _1207: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let mut _2569: &anchor_lang::error::ErrorCode;
                                                                                        let mut _2570: &anchor_lang::error::ErrorCode;
                                                                                        scope 173 {
                                                                                            debug space => _839;
                                                                                            let _892: u64;
                                                                                            scope 195 {
                                                                                                debug lamports => _892;
                                                                                                let _895: anchor_lang::system_program::CreateAccount<'_>;
                                                                                                scope 196 {
                                                                                                    debug cpi_accounts => _895;
                                                                                                    let _900: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                                    scope 197 {
                                                                                                        debug cpi_context => _900;
                                                                                                        let _946: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _949: ();
                                                                                                        scope 198 {
                                                                                                            debug residual => _946;
                                                                                                            scope 199 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 200 {
                                                                                                            debug val => _949;
                                                                                                            scope 201 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 174 {
                                                                                            debug mint_info => _840;
                                                                                            let _846: std::cell::Ref<'_, &mut [u8]>;
                                                                                            let _851: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                            let _854: std::cell::Ref<'_, &mut [u8]>;
                                                                                            scope 175 {
                                                                                                debug mint_data => _846;
                                                                                                let _855: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                let _863: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _866: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                scope 180 {
                                                                                                    debug mint_state => _855;
                                                                                                    let _867: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    let _872: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                    let _875: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    scope 185 {
                                                                                                        debug mint_extensions => _867;
                                                                                                        let _876: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                        scope 190 {
                                                                                                            debug required_extensions => _876;
                                                                                                            let _888: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _891: usize;
                                                                                                            scope 191 {
                                                                                                                debug residual => _888;
                                                                                                                scope 192 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 193 {
                                                                                                                debug val => _891;
                                                                                                                scope 194 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 186 {
                                                                                                        debug residual => _872;
                                                                                                        scope 187 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 188 {
                                                                                                        debug val => _875;
                                                                                                        scope 189 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 181 {
                                                                                                    debug residual => _863;
                                                                                                    scope 182 {
                                                                                                    }
                                                                                                }
                                                                                                scope 183 {
                                                                                                    debug val => _866;
                                                                                                    scope 184 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 176 {
                                                                                                debug residual => _851;
                                                                                                scope 177 {
                                                                                                }
                                                                                            }
                                                                                            scope 178 {
                                                                                                debug val => _854;
                                                                                                scope 179 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 202 {
                                                                                            debug required_lamports => _979;
                                                                                            let _1040: anchor_lang::system_program::Transfer<'_>;
                                                                                            let _1059: anchor_lang::system_program::Allocate<'_>;
                                                                                            scope 224 {
                                                                                                debug cpi_accounts => _1040;
                                                                                                let _1045: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                                scope 225 {
                                                                                                    debug cpi_context => _1045;
                                                                                                    let _1055: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _1058: ();
                                                                                                    scope 226 {
                                                                                                        debug residual => _1055;
                                                                                                        scope 227 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 228 {
                                                                                                        debug val => _1058;
                                                                                                        scope 229 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 230 {
                                                                                                debug cpi_accounts => _1059;
                                                                                                let _1062: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                                scope 231 {
                                                                                                    debug cpi_context => _1062;
                                                                                                    let _1100: anchor_lang::prelude::AccountInfo<'_>;
                                                                                                    let _1153: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _1156: ();
                                                                                                    let _1157: anchor_lang::system_program::Assign<'_>;
                                                                                                    scope 232 {
                                                                                                        debug mint_info => _1100;
                                                                                                        let _1106: std::cell::Ref<'_, &mut [u8]>;
                                                                                                        let _1111: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                        let _1114: std::cell::Ref<'_, &mut [u8]>;
                                                                                                        scope 233 {
                                                                                                            debug mint_data => _1106;
                                                                                                            let _1115: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                            let _1123: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _1126: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                            scope 238 {
                                                                                                                debug mint_state => _1115;
                                                                                                                let _1127: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                let _1132: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                let _1135: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                scope 243 {
                                                                                                                    debug mint_extensions => _1127;
                                                                                                                    let _1136: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                    scope 248 {
                                                                                                                        debug required_extensions => _1136;
                                                                                                                        let _1148: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                        let _1151: usize;
                                                                                                                        scope 249 {
                                                                                                                            debug residual => _1148;
                                                                                                                            scope 250 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 251 {
                                                                                                                            debug val => _1151;
                                                                                                                            scope 252 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 244 {
                                                                                                                    debug residual => _1132;
                                                                                                                    scope 245 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 246 {
                                                                                                                    debug val => _1135;
                                                                                                                    scope 247 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 239 {
                                                                                                                debug residual => _1123;
                                                                                                                scope 240 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 241 {
                                                                                                                debug val => _1126;
                                                                                                                scope 242 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 234 {
                                                                                                            debug residual => _1111;
                                                                                                            scope 235 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 236 {
                                                                                                            debug val => _1114;
                                                                                                            scope 237 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 253 {
                                                                                                        debug residual => _1153;
                                                                                                        scope 254 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 255 {
                                                                                                        debug val => _1156;
                                                                                                        scope 256 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 257 {
                                                                                                        debug cpi_accounts => _1157;
                                                                                                        let _1160: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                                        scope 258 {
                                                                                                            debug cpi_context => _1160;
                                                                                                            let _1203: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                            let _1206: ();
                                                                                                            scope 259 {
                                                                                                                debug residual => _1203;
                                                                                                                scope 260 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 261 {
                                                                                                                debug val => _1206;
                                                                                                                scope 262 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 203 {
                                                                                            debug mint_info => _984;
                                                                                            let _990: std::cell::Ref<'_, &mut [u8]>;
                                                                                            let _995: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                            let _998: std::cell::Ref<'_, &mut [u8]>;
                                                                                            scope 204 {
                                                                                                debug mint_data => _990;
                                                                                                let _999: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                let _1007: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _1010: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                scope 209 {
                                                                                                    debug mint_state => _999;
                                                                                                    let _1011: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    let _1016: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                    let _1019: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    scope 214 {
                                                                                                        debug mint_extensions => _1011;
                                                                                                        let _1020: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                        scope 219 {
                                                                                                            debug required_extensions => _1020;
                                                                                                            let _1032: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _1035: usize;
                                                                                                            scope 220 {
                                                                                                                debug residual => _1032;
                                                                                                                scope 221 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 222 {
                                                                                                                debug val => _1035;
                                                                                                                scope 223 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 215 {
                                                                                                        debug residual => _1016;
                                                                                                        scope 216 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 217 {
                                                                                                        debug val => _1019;
                                                                                                        scope 218 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 210 {
                                                                                                    debug residual => _1007;
                                                                                                    scope 211 {
                                                                                                    }
                                                                                                }
                                                                                                scope 212 {
                                                                                                    debug val => _1010;
                                                                                                    scope 213 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 205 {
                                                                                                debug residual => _995;
                                                                                                scope 206 {
                                                                                                }
                                                                                            }
                                                                                            scope 207 {
                                                                                                debug val => _998;
                                                                                                scope 208 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 263 {
                                                                                            debug cpi_program => _1207;
                                                                                            let _1209: anchor_spl::token_2022::InitializeAccount3<'_>;
                                                                                            scope 264 {
                                                                                                debug accounts => _1209;
                                                                                                let _1216: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
                                                                                                scope 265 {
                                                                                                    debug cpi_ctx => _1216;
                                                                                                    let _1224: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _1227: ();
                                                                                                    scope 266 {
                                                                                                        debug residual => _1224;
                                                                                                        scope 267 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 268 {
                                                                                                        debug val => _1227;
                                                                                                        scope 269 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 270 {
                                                                                        debug pa => _1228;
                                                                                    }
                                                                                    scope 271 {
                                                                                        debug val => _1234;
                                                                                    }
                                                                                    scope 272 {
                                                                                        debug e => _1235;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 165 {
                                                                            debug residual => _781;
                                                                            scope 166 {
                                                                            }
                                                                        }
                                                                        scope 167 {
                                                                            debug val => _784;
                                                                            scope 168 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 58 {
                                                                        debug owner_program => _261;
                                                                        let _273: u64;
                                                                        let _667: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                        let _673: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                                        let _674: anchor_lang::error::Error;
                                                                        let mut _2574: &&anchor_lang::prelude::Pubkey;
                                                                        scope 59 {
                                                                            debug __current_lamports => _273;
                                                                            let _278: usize;
                                                                            let _279: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let _418: u64;
                                                                            let _423: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let _646: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let mut _2572: &anchor_lang::error::ErrorCode;
                                                                            let mut _2573: &anchor_lang::error::ErrorCode;
                                                                            scope 60 {
                                                                                debug space => _278;
                                                                                let _331: u64;
                                                                                scope 82 {
                                                                                    debug lamports => _331;
                                                                                    let _334: anchor_lang::system_program::CreateAccount<'_>;
                                                                                    scope 83 {
                                                                                        debug cpi_accounts => _334;
                                                                                        let _339: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                        scope 84 {
                                                                                            debug cpi_context => _339;
                                                                                            let _385: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _388: ();
                                                                                            scope 85 {
                                                                                                debug residual => _385;
                                                                                                scope 86 {
                                                                                                }
                                                                                            }
                                                                                            scope 87 {
                                                                                                debug val => _388;
                                                                                                scope 88 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 61 {
                                                                                debug mint_info => _279;
                                                                                let _285: std::cell::Ref<'_, &mut [u8]>;
                                                                                let _290: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                let _293: std::cell::Ref<'_, &mut [u8]>;
                                                                                scope 62 {
                                                                                    debug mint_data => _285;
                                                                                    let _294: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    let _302: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _305: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    scope 67 {
                                                                                        debug mint_state => _294;
                                                                                        let _306: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        let _311: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                        let _314: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        scope 72 {
                                                                                            debug mint_extensions => _306;
                                                                                            let _315: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                            scope 77 {
                                                                                                debug required_extensions => _315;
                                                                                                let _327: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _330: usize;
                                                                                                scope 78 {
                                                                                                    debug residual => _327;
                                                                                                    scope 79 {
                                                                                                    }
                                                                                                }
                                                                                                scope 80 {
                                                                                                    debug val => _330;
                                                                                                    scope 81 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 73 {
                                                                                            debug residual => _311;
                                                                                            scope 74 {
                                                                                            }
                                                                                        }
                                                                                        scope 75 {
                                                                                            debug val => _314;
                                                                                            scope 76 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 68 {
                                                                                        debug residual => _302;
                                                                                        scope 69 {
                                                                                        }
                                                                                    }
                                                                                    scope 70 {
                                                                                        debug val => _305;
                                                                                        scope 71 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 63 {
                                                                                    debug residual => _290;
                                                                                    scope 64 {
                                                                                    }
                                                                                }
                                                                                scope 65 {
                                                                                    debug val => _293;
                                                                                    scope 66 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 89 {
                                                                                debug required_lamports => _418;
                                                                                let _479: anchor_lang::system_program::Transfer<'_>;
                                                                                let _498: anchor_lang::system_program::Allocate<'_>;
                                                                                scope 111 {
                                                                                    debug cpi_accounts => _479;
                                                                                    let _484: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                    scope 112 {
                                                                                        debug cpi_context => _484;
                                                                                        let _494: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _497: ();
                                                                                        scope 113 {
                                                                                            debug residual => _494;
                                                                                            scope 114 {
                                                                                            }
                                                                                        }
                                                                                        scope 115 {
                                                                                            debug val => _497;
                                                                                            scope 116 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 117 {
                                                                                    debug cpi_accounts => _498;
                                                                                    let _501: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                    scope 118 {
                                                                                        debug cpi_context => _501;
                                                                                        let _539: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let _592: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _595: ();
                                                                                        let _596: anchor_lang::system_program::Assign<'_>;
                                                                                        scope 119 {
                                                                                            debug mint_info => _539;
                                                                                            let _545: std::cell::Ref<'_, &mut [u8]>;
                                                                                            let _550: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                            let _553: std::cell::Ref<'_, &mut [u8]>;
                                                                                            scope 120 {
                                                                                                debug mint_data => _545;
                                                                                                let _554: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                let _562: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _565: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                scope 125 {
                                                                                                    debug mint_state => _554;
                                                                                                    let _566: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    let _571: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                    let _574: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    scope 130 {
                                                                                                        debug mint_extensions => _566;
                                                                                                        let _575: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                        scope 135 {
                                                                                                            debug required_extensions => _575;
                                                                                                            let _587: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _590: usize;
                                                                                                            scope 136 {
                                                                                                                debug residual => _587;
                                                                                                                scope 137 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 138 {
                                                                                                                debug val => _590;
                                                                                                                scope 139 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 131 {
                                                                                                        debug residual => _571;
                                                                                                        scope 132 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 133 {
                                                                                                        debug val => _574;
                                                                                                        scope 134 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 126 {
                                                                                                    debug residual => _562;
                                                                                                    scope 127 {
                                                                                                    }
                                                                                                }
                                                                                                scope 128 {
                                                                                                    debug val => _565;
                                                                                                    scope 129 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 121 {
                                                                                                debug residual => _550;
                                                                                                scope 122 {
                                                                                                }
                                                                                            }
                                                                                            scope 123 {
                                                                                                debug val => _553;
                                                                                                scope 124 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 140 {
                                                                                            debug residual => _592;
                                                                                            scope 141 {
                                                                                            }
                                                                                        }
                                                                                        scope 142 {
                                                                                            debug val => _595;
                                                                                            scope 143 {
                                                                                            }
                                                                                        }
                                                                                        scope 144 {
                                                                                            debug cpi_accounts => _596;
                                                                                            let _599: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                            scope 145 {
                                                                                                debug cpi_context => _599;
                                                                                                let _642: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _645: ();
                                                                                                scope 146 {
                                                                                                    debug residual => _642;
                                                                                                    scope 147 {
                                                                                                    }
                                                                                                }
                                                                                                scope 148 {
                                                                                                    debug val => _645;
                                                                                                    scope 149 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 90 {
                                                                                debug mint_info => _423;
                                                                                let _429: std::cell::Ref<'_, &mut [u8]>;
                                                                                let _434: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                let _437: std::cell::Ref<'_, &mut [u8]>;
                                                                                scope 91 {
                                                                                    debug mint_data => _429;
                                                                                    let _438: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    let _446: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _449: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    scope 96 {
                                                                                        debug mint_state => _438;
                                                                                        let _450: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        let _455: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                        let _458: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        scope 101 {
                                                                                            debug mint_extensions => _450;
                                                                                            let _459: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                            scope 106 {
                                                                                                debug required_extensions => _459;
                                                                                                let _471: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _474: usize;
                                                                                                scope 107 {
                                                                                                    debug residual => _471;
                                                                                                    scope 108 {
                                                                                                    }
                                                                                                }
                                                                                                scope 109 {
                                                                                                    debug val => _474;
                                                                                                    scope 110 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 102 {
                                                                                            debug residual => _455;
                                                                                            scope 103 {
                                                                                            }
                                                                                        }
                                                                                        scope 104 {
                                                                                            debug val => _458;
                                                                                            scope 105 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 97 {
                                                                                        debug residual => _446;
                                                                                        scope 98 {
                                                                                        }
                                                                                    }
                                                                                    scope 99 {
                                                                                        debug val => _449;
                                                                                        scope 100 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 92 {
                                                                                    debug residual => _434;
                                                                                    scope 93 {
                                                                                    }
                                                                                }
                                                                                scope 94 {
                                                                                    debug val => _437;
                                                                                    scope 95 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 150 {
                                                                                debug cpi_program => _646;
                                                                                let _648: anchor_spl::token_2022::InitializeAccount3<'_>;
                                                                                scope 151 {
                                                                                    debug accounts => _648;
                                                                                    let _655: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
                                                                                    scope 152 {
                                                                                        debug cpi_ctx => _655;
                                                                                        let _663: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _666: ();
                                                                                        scope 153 {
                                                                                            debug residual => _663;
                                                                                            scope 154 {
                                                                                            }
                                                                                        }
                                                                                        scope 155 {
                                                                                            debug val => _666;
                                                                                            scope 156 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 157 {
                                                                            debug pa => _667;
                                                                        }
                                                                        scope 158 {
                                                                            debug val => _673;
                                                                        }
                                                                        scope 159 {
                                                                            debug e => _674;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 52 {
                                                                debug residual => _220;
                                                                scope 53 {
                                                                }
                                                            }
                                                            scope 54 {
                                                                debug val => _223;
                                                                scope 55 {
                                                                }
                                                            }
                                                        }
                                                        scope 47 {
                                                            debug residual => _212;
                                                            scope 48 {
                                                            }
                                                        }
                                                        scope 49 {
                                                            debug val => _215;
                                                            scope 50 {
                                                            }
                                                        }
                                                    }
                                                    scope 42 {
                                                        debug residual => _197;
                                                        scope 43 {
                                                        }
                                                    }
                                                    scope 44 {
                                                        debug val => _200;
                                                        scope 45 {
                                                        }
                                                    }
                                                }
                                                scope 37 {
                                                    debug residual => _182;
                                                    scope 38 {
                                                    }
                                                }
                                                scope 39 {
                                                    debug val => _185;
                                                    scope 40 {
                                                    }
                                                }
                                            }
                                            scope 32 {
                                                debug residual => _167;
                                                scope 33 {
                                                }
                                            }
                                            scope 34 {
                                                debug val => _170;
                                                scope 35 {
                                                }
                                            }
                                        }
                                        scope 27 {
                                            debug residual => _152;
                                            scope 28 {
                                            }
                                        }
                                        scope 29 {
                                            debug val => _155;
                                            scope 30 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _2711 = const false;
        _2709 = const false;
        _2707 = const false;
        _2708 = const false;
        _2706 = const false;
        _2704 = const false;
        _2703 = const false;
        _2701 = const false;
        _2702 = const false;
        _2699 = const false;
        _2697 = const false;
        _2698 = const false;
        _2696 = const false;
        _2693 = const false;
        _2692 = const false;
        _2691 = const false;
        _2689 = const false;
        _2687 = const false;
        _2685 = const false;
        _2686 = const false;
        _2684 = const false;
        _2682 = const false;
        _2681 = const false;
        _2679 = const false;
        _2680 = const false;
        _2677 = const false;
        _2675 = const false;
        _2676 = const false;
        _2674 = const false;
        _2671 = const false;
        _2670 = const false;
        _2669 = const false;
        _2667 = const false;
        _2666 = const false;
        _2664 = const false;
        _2665 = const false;
        _2663 = const false;
        _2662 = const false;
        _2661 = const false;
        _2660 = const false;
        _2659 = const false;
        _2657 = const false;
        _2658 = const false;
        _2656 = const false;
        _2655 = const false;
        _2652 = const false;
        _2651 = const false;
        _2649 = const false;
        _2647 = const false;
        _2645 = const false;
        _2646 = const false;
        _2644 = const false;
        _2642 = const false;
        _2641 = const false;
        _2639 = const false;
        _2640 = const false;
        _2637 = const false;
        _2635 = const false;
        _2636 = const false;
        _2634 = const false;
        _2631 = const false;
        _2630 = const false;
        _2629 = const false;
        _2625 = const false;
        _2710 = const false;
        _2705 = const false;
        _2700 = const false;
        _2695 = const false;
        _2694 = const false;
        _2690 = const false;
        _2688 = const false;
        _2683 = const false;
        _2678 = const false;
        _2673 = const false;
        _2672 = const false;
        _2668 = const false;
        _2654 = const false;
        _2653 = const false;
        _2650 = const false;
        _2648 = const false;
        _2643 = const false;
        _2638 = const false;
        _2633 = const false;
        _2632 = const false;
        _2628 = const false;
        _2627 = const false;
        _2626 = const false;
        _2621 = const false;
        _2620 = const false;
        _2624 = const false;
        _2623 = const false;
        _2622 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _9, move _15) -> [return: bb2, unwind: bb1503];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb1503];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _2712 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb1718];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _3056 = discriminant(_7);
        StorageDead(_7);
        goto -> bb1394;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _24, move _30) -> [return: bb9, unwind: bb1503];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb1503];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _21 = move _35;
        StorageDead(_35);
        _2714 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb1717];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _3054 = discriminant(_22);
        StorageDead(_22);
        goto -> bb1393;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _39, move _45) -> [return: bb15, unwind: bb1503];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb1503];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _36 = move _50;
        StorageDead(_50);
        _2716 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _2575 = deref_copy (*_2);
        _53 = &(*_2575);
        _52 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _53) -> [return: bb20, unwind: bb1502];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb1716];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _3052 = discriminant(_37);
        StorageDead(_37);
        goto -> bb1392;
    }

    bb20: {
        switchInt(move _52) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = AccountNotEnoughKeys;
        _55 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _56) -> [return: bb22, unwind: bb1502];
    }

    bb22: {
        StorageDead(_56);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _55);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb1391;
    }

    bb23: {
        StorageDead(_53);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_57);
        StorageLive(_58);
        _58 = const 0_usize;
        _2576 = deref_copy (*_2);
        _59 = Len((*_2576));
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb24, unwind: bb1502];
    }

    bb24: {
        _2577 = deref_copy (*_2);
        _57 = &(*_2577)[_58];
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _2578 = deref_copy (*_2);
        _64 = &(*_2578);
        StorageLive(_65);
        _65 = RangeFrom::<usize> { start: const 1_usize };
        _63 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _64, move _65) -> [return: bb25, unwind: bb1502];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_64);
        _62 = &(*_63);
        _61 = &(*_62);
        (*_2) = move _61;
        StorageDead(_61);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb1502];
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _68 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _69, move _75) -> [return: bb27, unwind: bb1502];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb1502];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _66 = move _80;
        StorageDead(_80);
        _2718 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _2579 = deref_copy (*_2);
        _83 = &(*_2579);
        _82 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _83) -> [return: bb32, unwind: bb1501];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb1715];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _3050 = discriminant(_67);
        StorageDead(_67);
        goto -> bb1390;
    }

    bb32: {
        switchInt(move _82) -> [0: bb35, otherwise: bb33];
    }

    bb33: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        _86 = AccountNotEnoughKeys;
        _85 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _86) -> [return: bb34, unwind: bb1501];
    }

    bb34: {
        StorageDead(_86);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _85);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb1389;
    }

    bb35: {
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_87);
        StorageLive(_88);
        _88 = const 0_usize;
        _2580 = deref_copy (*_2);
        _89 = Len((*_2580));
        _90 = Lt(_88, _89);
        assert(move _90, "index out of bounds: the length is {} but the index is {}", move _89, _88) -> [success: bb36, unwind: bb1501];
    }

    bb36: {
        _2581 = deref_copy (*_2);
        _87 = &(*_2581)[_88];
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _2582 = deref_copy (*_2);
        _94 = &(*_2582);
        StorageLive(_95);
        _95 = RangeFrom::<usize> { start: const 1_usize };
        _93 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _94, move _95) -> [return: bb37, unwind: bb1501];
    }

    bb37: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = &(*_93);
        _91 = &(*_92);
        (*_2) = move _91;
        StorageDead(_91);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _2583 = deref_copy (*_2);
        _98 = &(*_2583);
        _97 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _98) -> [return: bb38, unwind: bb1501];
    }

    bb38: {
        switchInt(move _97) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        _101 = AccountNotEnoughKeys;
        _100 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _101) -> [return: bb40, unwind: bb1501];
    }

    bb40: {
        StorageDead(_101);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _100);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb1388;
    }

    bb41: {
        StorageDead(_98);
        _96 = const ();
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_102);
        StorageLive(_103);
        _103 = const 0_usize;
        _2584 = deref_copy (*_2);
        _104 = Len((*_2584));
        _105 = Lt(_103, _104);
        assert(move _105, "index out of bounds: the length is {} but the index is {}", move _104, _103) -> [success: bb42, unwind: bb1501];
    }

    bb42: {
        _2585 = deref_copy (*_2);
        _102 = &(*_2585)[_103];
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _2586 = deref_copy (*_2);
        _109 = &(*_2586);
        StorageLive(_110);
        _110 = RangeFrom::<usize> { start: const 1_usize };
        _108 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _109, move _110) -> [return: bb43, unwind: bb1501];
    }

    bb43: {
        StorageDead(_110);
        StorageDead(_109);
        _107 = &(*_108);
        _106 = &(*_107);
        (*_2) = move _106;
        StorageDead(_106);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _2587 = deref_copy (*_2);
        _113 = &(*_2587);
        _112 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _113) -> [return: bb44, unwind: bb1501];
    }

    bb44: {
        switchInt(move _112) -> [0: bb47, otherwise: bb45];
    }

    bb45: {
        StorageDead(_113);
        StorageLive(_115);
        StorageLive(_116);
        _116 = AccountNotEnoughKeys;
        _115 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _116) -> [return: bb46, unwind: bb1501];
    }

    bb46: {
        StorageDead(_116);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _115);
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb1387;
    }

    bb47: {
        StorageDead(_113);
        _111 = const ();
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_117);
        StorageLive(_118);
        _118 = const 0_usize;
        _2588 = deref_copy (*_2);
        _119 = Len((*_2588));
        _120 = Lt(_118, _119);
        assert(move _120, "index out of bounds: the length is {} but the index is {}", move _119, _118) -> [success: bb48, unwind: bb1501];
    }

    bb48: {
        _2589 = deref_copy (*_2);
        _117 = &(*_2589)[_118];
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _2590 = deref_copy (*_2);
        _124 = &(*_2590);
        StorageLive(_125);
        _125 = RangeFrom::<usize> { start: const 1_usize };
        _123 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _124, move _125) -> [return: bb49, unwind: bb1501];
    }

    bb49: {
        StorageDead(_125);
        StorageDead(_124);
        _122 = &(*_123);
        _121 = &(*_122);
        (*_2) = move _121;
        StorageDead(_121);
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _2591 = deref_copy (*_2);
        _128 = &(*_2591);
        _127 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _128) -> [return: bb50, unwind: bb1501];
    }

    bb50: {
        switchInt(move _127) -> [0: bb53, otherwise: bb51];
    }

    bb51: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        _131 = AccountNotEnoughKeys;
        _130 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _131) -> [return: bb52, unwind: bb1501];
    }

    bb52: {
        StorageDead(_131);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _130);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb1386;
    }

    bb53: {
        StorageDead(_128);
        _126 = const ();
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_132);
        StorageLive(_133);
        _133 = const 0_usize;
        _2592 = deref_copy (*_2);
        _134 = Len((*_2592));
        _135 = Lt(_133, _134);
        assert(move _135, "index out of bounds: the length is {} but the index is {}", move _134, _133) -> [success: bb54, unwind: bb1501];
    }

    bb54: {
        _2593 = deref_copy (*_2);
        _132 = &(*_2593)[_133];
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _2594 = deref_copy (*_2);
        _139 = &(*_2594);
        StorageLive(_140);
        _140 = RangeFrom::<usize> { start: const 1_usize };
        _138 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _139, move _140) -> [return: bb55, unwind: bb1501];
    }

    bb55: {
        StorageDead(_140);
        StorageDead(_139);
        _137 = &(*_138);
        _136 = &(*_137);
        (*_2) = move _136;
        StorageDead(_136);
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb1501];
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _143 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _144, move _150) -> [return: bb57, unwind: bb1501];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb1501];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _141 = move _155;
        StorageDead(_155);
        _2720 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb1500];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb1714];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _3048 = discriminant(_142);
        StorageDead(_142);
        goto -> bb1385;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _158 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _159, move _165) -> [return: bb63, unwind: bb1500];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb1500];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _156 = move _170;
        StorageDead(_170);
        _2722 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_3);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb1500];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb1713];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _3046 = discriminant(_157);
        StorageDead(_157);
        goto -> bb1384;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _173 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _174, move _180) -> [return: bb69, unwind: bb1500];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb1500];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _171 = move _185;
        StorageDead(_185);
        _2724 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_1);
        StorageLive(_191);
        _191 = &mut (*_2);
        StorageLive(_192);
        _192 = &(*_3);
        StorageLive(_193);
        _193 = &mut (*_4);
        StorageLive(_194);
        _194 = &mut (*_5);
        _189 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _190, move _191, move _192, move _193, move _194) -> [return: bb74, unwind: bb1500];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb1712];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _3044 = discriminant(_172);
        StorageDead(_172);
        goto -> bb1383;
    }

    bb74: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_195);
        _195 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _188 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _189, move _195) -> [return: bb75, unwind: bb1500];
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_189);
        _187 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb76, unwind: bb1500];
    }

    bb76: {
        StorageDead(_188);
        _196 = discriminant(_187);
        switchInt(move _196) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_200);
        _200 = move ((_187 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _186 = move _200;
        StorageDead(_200);
        _2726 = discriminant(_187);
        StorageDead(_187);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_1);
        StorageLive(_206);
        _206 = &mut (*_2);
        StorageLive(_207);
        _207 = &(*_3);
        StorageLive(_208);
        _208 = &mut (*_4);
        StorageLive(_209);
        _209 = &mut (*_5);
        _204 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitReserveBumps>>::try_accounts(move _205, move _206, move _207, move _208, move _209) -> [return: bb80, unwind: bb1500];
    }

    bb78: {
        StorageLive(_197);
        _197 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _199) -> [return: bb79, unwind: bb1711];
    }

    bb79: {
        StorageDead(_199);
        StorageDead(_197);
        _3042 = discriminant(_187);
        StorageDead(_187);
        goto -> bb1382;
    }

    bb80: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_210);
        _210 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _203 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _204, move _210) -> [return: bb81, unwind: bb1500];
    }

    bb81: {
        StorageDead(_210);
        StorageDead(_204);
        _202 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _203) -> [return: bb82, unwind: bb1500];
    }

    bb82: {
        StorageDead(_203);
        _211 = discriminant(_202);
        switchInt(move _211) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_215);
        _215 = move ((_202 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _201 = move _215;
        StorageDead(_215);
        _2728 = discriminant(_202);
        StorageDead(_202);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb86, unwind: bb1500];
    }

    bb84: {
        StorageLive(_212);
        _212 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb85, unwind: bb1710];
    }

    bb85: {
        StorageDead(_214);
        StorageDead(_212);
        _3040 = discriminant(_202);
        StorageDead(_202);
        goto -> bb1381;
    }

    bb86: {
        _217 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _218) -> [return: bb87, unwind: bb1500];
    }

    bb87: {
        StorageDead(_218);
        _219 = discriminant(_217);
        switchInt(move _219) -> [0: bb88, 1: bb89, otherwise: bb5];
    }

    bb88: {
        StorageLive(_223);
        _223 = ((_217 as Continue).0: anchor_lang::prelude::Rent);
        _216 = _223;
        StorageDead(_223);
        _2730 = discriminant(_217);
        StorageDead(_217);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = const _;
        _231 = &(*_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_21;
        _236 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _237) -> [return: bb91, unwind: bb1500];
    }

    bb89: {
        StorageLive(_220);
        _220 = move ((_217 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_222);
        _222 = move _220;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _222) -> [return: bb90, unwind: bb1709];
    }

    bb90: {
        StorageDead(_222);
        StorageDead(_220);
        _3038 = discriminant(_217);
        StorageDead(_217);
        goto -> bb1380;
    }

    bb91: {
        _235 = &_236;
        StorageDead(_237);
        _234 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _235) -> [return: bb92, unwind: bb1500];
    }

    bb92: {
        _233 = &(*_234);
        StorageDead(_235);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _3143 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _242 = &(*_3143);
        _241 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _242) -> [return: bb93, unwind: bb1500];
    }

    bb93: {
        _240 = &_241;
        StorageDead(_242);
        _239 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _240) -> [return: bb94, unwind: bb1500];
    }

    bb94: {
        _238 = &(*_239);
        StorageDead(_240);
        _230 = [move _231, move _233, move _238];
        StorageDead(_238);
        StorageDead(_233);
        StorageDead(_231);
        _229 = &_230;
        _228 = &(*_229);
        _227 = move _228 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_228);
        StorageLive(_243);
        _243 = &(*_1);
        _226 = anchor_lang::prelude::Pubkey::find_program_address(move _227, move _243) -> [return: bb95, unwind: bb1500];
    }

    bb95: {
        StorageDead(_243);
        StorageDead(_227);
        StorageLive(_224);
        _224 = (_226.0: anchor_lang::prelude::Pubkey);
        StorageLive(_225);
        _225 = (_226.1: u8);
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_226);
        StorageLive(_244);
        _244 = _225;
        ((*_4).0: u8) = move _244;
        StorageDead(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &(*_87);
        _248 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _249) -> [return: bb96, unwind: bb1500];
    }

    bb96: {
        _247 = &_248;
        StorageDead(_249);
        StorageLive(_250);
        _250 = &_224;
        _246 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _247, move _250) -> [return: bb97, unwind: bb1500];
    }

    bb97: {
        switchInt(move _246) -> [0: bb103, otherwise: bb98];
    }

    bb98: {
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = ConstraintSeeds;
        _254 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _255) -> [return: bb99, unwind: bb1500];
    }

    bb99: {
        StorageDead(_255);
        _253 = anchor_lang::error::Error::with_account_name::<&str>(move _254, const "reserve_liquidity_supply") -> [return: bb100, unwind: bb1500];
    }

    bb100: {
        _2711 = const true;
        StorageDead(_254);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &(*_87);
        _257 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _258) -> [return: bb101, unwind: bb1708];
    }

    bb101: {
        StorageDead(_258);
        StorageLive(_259);
        _259 = _224;
        _256 = (move _257, move _259);
        StorageDead(_259);
        StorageDead(_257);
        _2711 = const false;
        _252 = anchor_lang::error::Error::with_pubkeys(move _253, move _256) -> [return: bb102, unwind: bb1708];
    }

    bb102: {
        StorageDead(_256);
        _2711 = const false;
        StorageDead(_253);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _252);
        StorageDead(_252);
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb1379;
    }

    bb103: {
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_247);
        _245 = const ();
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &(*_87);
        _264 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _265) -> [return: bb104, unwind: bb1500];
    }

    bb104: {
        _263 = &(*_264);
        StorageDead(_265);
        _262 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _263) -> [return: bb105, unwind: bb1500];
    }

    bb105: {
        StorageDead(_263);
        _261 = ((*_262).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_264);
        StorageDead(_262);
        StorageLive(_266);
        StorageLive(_267);
        _267 = const false;
        switchInt(move _267) -> [0: bb108, otherwise: bb106];
    }

    bb106: {
        StorageLive(_268);
        StorageLive(_269);
        _269 = &_261;
        StorageLive(_270);
        _2574 = const _;
        _270 = &(*_2574);
        _268 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _269, move _270) -> [return: bb107, unwind: bb1500];
    }

    bb107: {
        switchInt(move _268) -> [0: bb303, otherwise: bb108];
    }

    bb108: {
        StorageDead(_270);
        StorageDead(_269);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &(*_87);
        _273 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _274) -> [return: bb109, unwind: bb1500];
    }

    bb109: {
        StorageDead(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = _273;
        _276 = Eq(move _277, const 0_u64);
        switchInt(move _276) -> [0: bb164, otherwise: bb110];
    }

    bb110: {
        StorageDead(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _3144 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _280 = &(*_3144);
        _279 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _280) -> [return: bb111, unwind: bb1500];
    }

    bb111: {
        StorageDead(_280);
        StorageLive(_281);
        StorageLive(_282);
        _2595 = deref_copy (_279.3: &anchor_lang::prelude::Pubkey);
        _282 = &(*_2595);
        StorageLive(_283);
        StorageLive(_284);
        _284 = <Token2022 as anchor_lang::Id>::id() -> [return: bb112, unwind: bb1499];
    }

    bb112: {
        _283 = &_284;
        _281 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _282, move _283) -> [return: bb113, unwind: bb1499];
    }

    bb113: {
        switchInt(move _281) -> [0: bb142, otherwise: bb114];
    }

    bb114: {
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &_279;
        _287 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _288) -> [return: bb115, unwind: bb1499];
    }

    bb115: {
        StorageDead(_288);
        _286 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _287) -> [return: bb116, unwind: bb1499];
    }

    bb116: {
        StorageDead(_287);
        _289 = discriminant(_286);
        switchInt(move _289) -> [0: bb117, 1: bb118, otherwise: bb5];
    }

    bb117: {
        StorageLive(_293);
        _293 = move ((_286 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _285 = move _293;
        StorageDead(_293);
        _2732 = discriminant(_286);
        StorageDead(_286);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &_285;
        _299 = &(*_300);
        _298 = <Ref<'_, &mut [u8]> as Deref>::deref(move _299) -> [return: bb120, unwind: bb1498];
    }

    bb118: {
        StorageLive(_290);
        _290 = move ((_286 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_292);
        _292 = move _290;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _292) -> [return: bb119, unwind: bb1706];
    }

    bb119: {
        StorageDead(_292);
        StorageDead(_290);
        _3036 = discriminant(_286);
        StorageDead(_286);
        goto -> bb1371;
    }

    bb120: {
        _2596 = deref_copy (*_298);
        _297 = &(*_2596);
        StorageDead(_299);
        _296 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _297) -> [return: bb121, unwind: bb1498];
    }

    bb121: {
        StorageDead(_297);
        _295 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _296) -> [return: bb122, unwind: bb1498];
    }

    bb122: {
        StorageDead(_296);
        _301 = discriminant(_295);
        switchInt(move _301) -> [0: bb123, 1: bb124, otherwise: bb5];
    }

    bb123: {
        StorageLive(_305);
        _305 = move ((_295 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _294 = move _305;
        StorageDead(_305);
        _2734 = discriminant(_295);
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_295);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &_294;
        _308 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _309) -> [return: bb126, unwind: bb1498];
    }

    bb124: {
        StorageLive(_302);
        _302 = move ((_295 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_304);
        _304 = move _302;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _304) -> [return: bb125, unwind: bb1705];
    }

    bb125: {
        StorageDead(_304);
        StorageDead(_302);
        _3034 = discriminant(_295);
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_295);
        goto -> bb1370;
    }

    bb126: {
        StorageDead(_309);
        _307 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _308) -> [return: bb127, unwind: bb1498];
    }

    bb127: {
        StorageDead(_308);
        _310 = discriminant(_307);
        switchInt(move _310) -> [0: bb128, 1: bb129, otherwise: bb5];
    }

    bb128: {
        StorageLive(_314);
        _314 = move ((_307 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _306 = move _314;
        StorageDead(_314);
        _2736 = discriminant(_307);
        StorageDead(_307);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &_306;
        _318 = &(*_319);
        _317 = <Vec<ExtensionType> as Deref>::deref(move _318) -> [return: bb131, unwind: bb1497];
    }

    bb129: {
        StorageLive(_311);
        _311 = move ((_307 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_313);
        _313 = move _311;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _313) -> [return: bb130, unwind: bb1704];
    }

    bb130: {
        StorageDead(_313);
        StorageDead(_311);
        _3032 = discriminant(_307);
        StorageDead(_307);
        StorageDead(_306);
        goto -> bb1370;
    }

    bb131: {
        _316 = &(*_317);
        StorageDead(_318);
        _315 = ExtensionType::get_required_init_account_extensions(move _316) -> [return: bb132, unwind: bb1497];
    }

    bb132: {
        StorageDead(_316);
        StorageDead(_319);
        StorageDead(_317);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &_315;
        _324 = &(*_325);
        _323 = <Vec<ExtensionType> as Deref>::deref(move _324) -> [return: bb133, unwind: bb1496];
    }

    bb133: {
        _322 = &(*_323);
        StorageDead(_324);
        _321 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _322) -> [return: bb134, unwind: bb1496];
    }

    bb134: {
        StorageDead(_322);
        _320 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _321) -> [return: bb135, unwind: bb1496];
    }

    bb135: {
        _2710 = const true;
        StorageDead(_321);
        _326 = discriminant(_320);
        switchInt(move _326) -> [0: bb136, 1: bb137, otherwise: bb5];
    }

    bb136: {
        StorageLive(_330);
        _330 = ((_320 as Continue).0: usize);
        _278 = _330;
        StorageDead(_330);
        drop(_315) -> [return: bb139, unwind: bb1494];
    }

    bb137: {
        StorageLive(_327);
        _327 = move ((_320 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_329);
        _329 = move _327;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _329) -> [return: bb138, unwind: bb1493];
    }

    bb138: {
        StorageDead(_329);
        StorageDead(_327);
        drop(_315) -> [return: bb1367, unwind: bb1494];
    }

    bb139: {
        StorageDead(_315);
        drop(_306) -> [return: bb140, unwind: bb1495];
    }

    bb140: {
        StorageDead(_306);
        StorageDead(_294);
        drop(_285) -> [return: bb141, unwind: bb1703];
    }

    bb141: {
        StorageDead(_285);
        _2738 = discriminant(_320);
        StorageDead(_325);
        StorageDead(_323);
        _2710 = const false;
        StorageDead(_320);
        goto -> bb143;
    }

    bb142: {
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        _278 = const _;
        goto -> bb143;
    }

    bb143: {
        StorageDead(_281);
        drop(_279) -> [return: bb144, unwind: bb1500];
    }

    bb144: {
        StorageDead(_279);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_216;
        StorageLive(_333);
        _333 = _278;
        _331 = anchor_lang::prelude::Rent::minimum_balance(move _332, move _333) -> [return: bb145, unwind: bb1500];
    }

    bb145: {
        StorageDead(_333);
        StorageDead(_332);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = &_6;
        _335 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _336) -> [return: bb146, unwind: bb1500];
    }

    bb146: {
        StorageDead(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = &(*_87);
        _337 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _338) -> [return: bb147, unwind: bb1492];
    }

    bb147: {
        StorageDead(_338);
        _2709 = const true;
        _334 = anchor_lang::system_program::CreateAccount::<'_> { from: move _335, to: move _337 };
        StorageDead(_337);
        StorageDead(_335);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &_201;
        _340 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _341) -> [return: bb148, unwind: bb1702];
    }

    bb148: {
        StorageDead(_341);
        StorageLive(_342);
        _2709 = const false;
        _342 = move _334;
        _339 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _340, move _342) -> [return: bb149, unwind: bb1702];
    }

    bb149: {
        StorageDead(_342);
        StorageDead(_340);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _2708 = const true;
        _347 = move _339;
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &_21;
        _360 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _361) -> [return: bb150, unwind: bb1700];
    }

    bb150: {
        _359 = &_360;
        StorageDead(_361);
        _358 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _359) -> [return: bb151, unwind: bb1700];
    }

    bb151: {
        _357 = &(*_358);
        StorageDead(_359);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _3145 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _366 = &(*_3145);
        _365 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _366) -> [return: bb152, unwind: bb1700];
    }

    bb152: {
        _364 = &_365;
        StorageDead(_366);
        _363 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _364) -> [return: bb153, unwind: bb1700];
    }

    bb153: {
        _362 = &(*_363);
        StorageDead(_364);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = _225;
        _371 = [move _372];
        _370 = &_371;
        StorageDead(_372);
        StorageLive(_373);
        _373 = RangeFull;
        _369 = <[u8; 1] as Index<RangeFull>>::index(move _370, move _373) -> [return: bb154, unwind: bb1700];
    }

    bb154: {
        StorageDead(_373);
        StorageDead(_370);
        _368 = &(*_369);
        _367 = &(*_368);
        _356 = [const _, move _357, move _362, move _367];
        _355 = &_356;
        StorageDead(_367);
        StorageDead(_362);
        StorageDead(_357);
        StorageLive(_374);
        _374 = RangeFull;
        _354 = <[&[u8]; 4] as Index<RangeFull>>::index(move _355, move _374) -> [return: bb155, unwind: bb1700];
    }

    bb155: {
        StorageDead(_374);
        StorageDead(_355);
        _353 = &(*_354);
        _352 = &(*_353);
        _351 = [move _352];
        StorageDead(_352);
        _350 = &_351;
        _349 = &(*_350);
        _348 = move _349 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_349);
        _2708 = const false;
        _346 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _347, move _348) -> [return: bb156, unwind: bb1700];
    }

    bb156: {
        _2707 = const true;
        StorageDead(_348);
        _2708 = const false;
        StorageDead(_347);
        StorageLive(_375);
        _375 = _331;
        StorageLive(_376);
        StorageLive(_377);
        _377 = _278;
        _376 = move _377 as u64 (IntToInt);
        StorageDead(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &_171;
        _382 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _383) -> [return: bb157, unwind: bb1698];
    }

    bb157: {
        _381 = &(*_382);
        StorageDead(_383);
        _380 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _381) -> [return: bb158, unwind: bb1698];
    }

    bb158: {
        StorageDead(_381);
        _379 = &_380;
        _378 = &(*_379);
        _2707 = const false;
        _345 = anchor_lang::system_program::create_account(move _346, move _375, move _376, move _378) -> [return: bb159, unwind: bb1698];
    }

    bb159: {
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_375);
        _2707 = const false;
        StorageDead(_346);
        _344 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _345) -> [return: bb160, unwind: bb1702];
    }

    bb160: {
        StorageDead(_345);
        _384 = discriminant(_344);
        switchInt(move _384) -> [0: bb161, 1: bb162, otherwise: bb5];
    }

    bb161: {
        StorageLive(_388);
        _388 = ((_344 as Continue).0: ());
        _343 = _388;
        StorageDead(_388);
        _2740 = discriminant(_344);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_354);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_344);
        StorageDead(_343);
        _275 = const ();
        StorageDead(_339);
        _2709 = const false;
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_278);
        goto -> bb292;
    }

    bb162: {
        StorageLive(_385);
        _385 = move ((_344 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_387);
        _387 = move _385;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _387) -> [return: bb163, unwind: bb1696];
    }

    bb163: {
        StorageDead(_387);
        StorageDead(_385);
        _3028 = discriminant(_344);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_354);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_339);
        _2709 = const false;
        StorageDead(_334);
        StorageDead(_331);
        goto -> bb1374;
    }

    bb164: {
        StorageDead(_277);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = &_6;
        _392 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _393) -> [return: bb165, unwind: bb1500];
    }

    bb165: {
        _391 = &_392;
        StorageDead(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = &(*_87);
        _395 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _396) -> [return: bb166, unwind: bb1500];
    }

    bb166: {
        _394 = &_395;
        StorageDead(_396);
        _390 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _391, move _394) -> [return: bb167, unwind: bb1500];
    }

    bb167: {
        switchInt(move _390) -> [0: bb176, otherwise: bb168];
    }

    bb168: {
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _2573 = const _;
        _402 = &(*_2573);
        _401 = anchor_lang::error::ErrorCode::name(move _402) -> [return: bb169, unwind: bb1500];
    }

    bb169: {
        StorageDead(_402);
        StorageLive(_404);
        StorageLive(_405);
        _405 = TryingToInitPayerAsProgramAccount;
        _404 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _405) -> [return: bb170, unwind: bb1491];
    }

    bb170: {
        StorageDead(_405);
        StorageLive(_406);
        StorageLive(_407);
        _2572 = const _;
        _407 = &(*_2572);
        _406 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _407) -> [return: bb171, unwind: bb1491];
    }

    bb171: {
        StorageDead(_407);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_reserve.rs", line: const 66_u32 };
        _410 = anchor_lang::error::ErrorOrigin::Source(move _411);
        StorageDead(_411);
        _409 = std::option::Option::<ErrorOrigin>::Some(move _410);
        StorageDead(_410);
        StorageLive(_412);
        _412 = std::option::Option::<ComparedValues>::None;
        _400 = anchor_lang::error::AnchorError { error_name: move _401, error_code_number: move _404, error_msg: move _406, error_origin: move _409, compared_values: move _412 };
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_401);
        _399 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _400) -> [return: bb172, unwind: bb1500];
    }

    bb172: {
        _2706 = const true;
        StorageDead(_400);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _415 = &_6;
        _414 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _415) -> [return: bb173, unwind: bb1695];
    }

    bb173: {
        StorageDead(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = &(*_87);
        _416 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _417) -> [return: bb174, unwind: bb1695];
    }

    bb174: {
        StorageDead(_417);
        _413 = (move _414, move _416);
        StorageDead(_416);
        StorageDead(_414);
        _2706 = const false;
        _398 = anchor_lang::error::Error::with_pubkeys(move _399, move _413) -> [return: bb175, unwind: bb1695];
    }

    bb175: {
        StorageDead(_413);
        _2706 = const false;
        StorageDead(_399);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _398);
        StorageDead(_398);
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb1375;
    }

    bb176: {
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_391);
        _389 = const ();
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_216;
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _3146 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _424 = &(*_3146);
        _423 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _424) -> [return: bb177, unwind: bb1500];
    }

    bb177: {
        StorageDead(_424);
        StorageLive(_425);
        StorageLive(_426);
        _2597 = deref_copy (_423.3: &anchor_lang::prelude::Pubkey);
        _426 = &(*_2597);
        StorageLive(_427);
        StorageLive(_428);
        _428 = <Token2022 as anchor_lang::Id>::id() -> [return: bb178, unwind: bb1490];
    }

    bb178: {
        _427 = &_428;
        _425 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _426, move _427) -> [return: bb179, unwind: bb1490];
    }

    bb179: {
        switchInt(move _425) -> [0: bb208, otherwise: bb180];
    }

    bb180: {
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_426);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_423;
        _431 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _432) -> [return: bb181, unwind: bb1490];
    }

    bb181: {
        StorageDead(_432);
        _430 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _431) -> [return: bb182, unwind: bb1490];
    }

    bb182: {
        StorageDead(_431);
        _433 = discriminant(_430);
        switchInt(move _433) -> [0: bb183, 1: bb184, otherwise: bb5];
    }

    bb183: {
        StorageLive(_437);
        _437 = move ((_430 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _429 = move _437;
        StorageDead(_437);
        _2742 = discriminant(_430);
        StorageDead(_430);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        _444 = &_429;
        _443 = &(*_444);
        _442 = <Ref<'_, &mut [u8]> as Deref>::deref(move _443) -> [return: bb186, unwind: bb1489];
    }

    bb184: {
        StorageLive(_434);
        _434 = move ((_430 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_436);
        _436 = move _434;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _436) -> [return: bb185, unwind: bb1693];
    }

    bb185: {
        StorageDead(_436);
        StorageDead(_434);
        _3026 = discriminant(_430);
        StorageDead(_430);
        goto -> bb1363;
    }

    bb186: {
        _2598 = deref_copy (*_442);
        _441 = &(*_2598);
        StorageDead(_443);
        _440 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _441) -> [return: bb187, unwind: bb1489];
    }

    bb187: {
        StorageDead(_441);
        _439 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _440) -> [return: bb188, unwind: bb1489];
    }

    bb188: {
        StorageDead(_440);
        _445 = discriminant(_439);
        switchInt(move _445) -> [0: bb189, 1: bb190, otherwise: bb5];
    }

    bb189: {
        StorageLive(_449);
        _449 = move ((_439 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _438 = move _449;
        StorageDead(_449);
        _2744 = discriminant(_439);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_439);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _453 = &_438;
        _452 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _453) -> [return: bb192, unwind: bb1489];
    }

    bb190: {
        StorageLive(_446);
        _446 = move ((_439 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_448);
        _448 = move _446;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _448) -> [return: bb191, unwind: bb1692];
    }

    bb191: {
        StorageDead(_448);
        StorageDead(_446);
        _3024 = discriminant(_439);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_439);
        goto -> bb1362;
    }

    bb192: {
        StorageDead(_453);
        _451 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _452) -> [return: bb193, unwind: bb1489];
    }

    bb193: {
        StorageDead(_452);
        _454 = discriminant(_451);
        switchInt(move _454) -> [0: bb194, 1: bb195, otherwise: bb5];
    }

    bb194: {
        StorageLive(_458);
        _458 = move ((_451 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _450 = move _458;
        StorageDead(_458);
        _2746 = discriminant(_451);
        StorageDead(_451);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        _463 = &_450;
        _462 = &(*_463);
        _461 = <Vec<ExtensionType> as Deref>::deref(move _462) -> [return: bb197, unwind: bb1488];
    }

    bb195: {
        StorageLive(_455);
        _455 = move ((_451 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_457);
        _457 = move _455;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _457) -> [return: bb196, unwind: bb1691];
    }

    bb196: {
        StorageDead(_457);
        StorageDead(_455);
        _3022 = discriminant(_451);
        StorageDead(_451);
        StorageDead(_450);
        goto -> bb1362;
    }

    bb197: {
        _460 = &(*_461);
        StorageDead(_462);
        _459 = ExtensionType::get_required_init_account_extensions(move _460) -> [return: bb198, unwind: bb1488];
    }

    bb198: {
        StorageDead(_460);
        StorageDead(_463);
        StorageDead(_461);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = &_459;
        _468 = &(*_469);
        _467 = <Vec<ExtensionType> as Deref>::deref(move _468) -> [return: bb199, unwind: bb1487];
    }

    bb199: {
        _466 = &(*_467);
        StorageDead(_468);
        _465 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _466) -> [return: bb200, unwind: bb1487];
    }

    bb200: {
        StorageDead(_466);
        _464 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _465) -> [return: bb201, unwind: bb1487];
    }

    bb201: {
        _2705 = const true;
        StorageDead(_465);
        _470 = discriminant(_464);
        switchInt(move _470) -> [0: bb202, 1: bb203, otherwise: bb5];
    }

    bb202: {
        StorageLive(_474);
        _474 = ((_464 as Continue).0: usize);
        _422 = _474;
        StorageDead(_474);
        drop(_459) -> [return: bb205, unwind: bb1485];
    }

    bb203: {
        StorageLive(_471);
        _471 = move ((_464 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_473);
        _473 = move _471;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _473) -> [return: bb204, unwind: bb1484];
    }

    bb204: {
        StorageDead(_473);
        StorageDead(_471);
        drop(_459) -> [return: bb1359, unwind: bb1485];
    }

    bb205: {
        StorageDead(_459);
        drop(_450) -> [return: bb206, unwind: bb1486];
    }

    bb206: {
        StorageDead(_450);
        StorageDead(_438);
        drop(_429) -> [return: bb207, unwind: bb1690];
    }

    bb207: {
        StorageDead(_429);
        _2748 = discriminant(_464);
        StorageDead(_469);
        StorageDead(_467);
        _2705 = const false;
        StorageDead(_464);
        goto -> bb209;
    }

    bb208: {
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_426);
        _422 = const _;
        goto -> bb209;
    }

    bb209: {
        StorageDead(_425);
        drop(_423) -> [return: bb210, unwind: bb1500];
    }

    bb210: {
        StorageDead(_423);
        _420 = anchor_lang::prelude::Rent::minimum_balance(move _421, move _422) -> [return: bb211, unwind: bb1500];
    }

    bb211: {
        StorageDead(_422);
        StorageDead(_421);
        _419 = <u64 as Ord>::max(move _420, const 1_u64) -> [return: bb212, unwind: bb1500];
    }

    bb212: {
        StorageDead(_420);
        StorageLive(_475);
        _475 = _273;
        _418 = core::num::<impl u64>::saturating_sub(move _419, move _475) -> [return: bb213, unwind: bb1500];
    }

    bb213: {
        StorageDead(_475);
        StorageDead(_419);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = _418;
        _477 = Gt(move _478, const 0_u64);
        switchInt(move _477) -> [0: bb224, otherwise: bb214];
    }

    bb214: {
        StorageDead(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        _481 = &_6;
        _480 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _481) -> [return: bb215, unwind: bb1500];
    }

    bb215: {
        StorageDead(_481);
        StorageLive(_482);
        StorageLive(_483);
        _483 = &(*_87);
        _482 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _483) -> [return: bb216, unwind: bb1483];
    }

    bb216: {
        StorageDead(_483);
        _2704 = const true;
        _479 = anchor_lang::system_program::Transfer::<'_> { from: move _480, to: move _482 };
        StorageDead(_482);
        StorageDead(_480);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_201;
        _485 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _486) -> [return: bb217, unwind: bb1689];
    }

    bb217: {
        StorageDead(_486);
        StorageLive(_487);
        _2704 = const false;
        _487 = move _479;
        _484 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _485, move _487) -> [return: bb218, unwind: bb1689];
    }

    bb218: {
        StorageDead(_487);
        StorageDead(_485);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        _491 = move _484;
        StorageLive(_492);
        _492 = _418;
        _490 = anchor_lang::system_program::transfer(move _491, move _492) -> [return: bb219, unwind: bb1689];
    }

    bb219: {
        StorageDead(_492);
        StorageDead(_491);
        _489 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _490) -> [return: bb220, unwind: bb1689];
    }

    bb220: {
        StorageDead(_490);
        _493 = discriminant(_489);
        switchInt(move _493) -> [0: bb221, 1: bb222, otherwise: bb5];
    }

    bb221: {
        StorageLive(_497);
        _497 = ((_489 as Continue).0: ());
        _488 = _497;
        StorageDead(_497);
        _2750 = discriminant(_489);
        StorageDead(_489);
        StorageDead(_488);
        _476 = const ();
        StorageDead(_484);
        _2704 = const false;
        StorageDead(_479);
        goto -> bb225;
    }

    bb222: {
        StorageLive(_494);
        _494 = move ((_489 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_496);
        _496 = move _494;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _496) -> [return: bb223, unwind: bb1687];
    }

    bb223: {
        StorageDead(_496);
        StorageDead(_494);
        _3018 = discriminant(_489);
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_484);
        _2704 = const false;
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_476);
        goto -> bb1366;
    }

    bb224: {
        StorageDead(_478);
        _476 = const ();
        goto -> bb225;
    }

    bb225: {
        StorageDead(_477);
        StorageDead(_476);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        _500 = &(*_87);
        _499 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _500) -> [return: bb226, unwind: bb1500];
    }

    bb226: {
        StorageDead(_500);
        _2703 = const true;
        _498 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _499 };
        StorageDead(_499);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = &_201;
        _502 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _503) -> [return: bb227, unwind: bb1686];
    }

    bb227: {
        StorageDead(_503);
        StorageLive(_504);
        _2703 = const false;
        _504 = move _498;
        _501 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _502, move _504) -> [return: bb228, unwind: bb1686];
    }

    bb228: {
        StorageDead(_504);
        StorageDead(_502);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _2702 = const true;
        _509 = move _501;
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = &_21;
        _522 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _523) -> [return: bb229, unwind: bb1684];
    }

    bb229: {
        _521 = &_522;
        StorageDead(_523);
        _520 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _521) -> [return: bb230, unwind: bb1684];
    }

    bb230: {
        _519 = &(*_520);
        StorageDead(_521);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        _3147 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _528 = &(*_3147);
        _527 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _528) -> [return: bb231, unwind: bb1684];
    }

    bb231: {
        _526 = &_527;
        StorageDead(_528);
        _525 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _526) -> [return: bb232, unwind: bb1684];
    }

    bb232: {
        _524 = &(*_525);
        StorageDead(_526);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        _534 = _225;
        _533 = [move _534];
        _532 = &_533;
        StorageDead(_534);
        StorageLive(_535);
        _535 = RangeFull;
        _531 = <[u8; 1] as Index<RangeFull>>::index(move _532, move _535) -> [return: bb233, unwind: bb1684];
    }

    bb233: {
        StorageDead(_535);
        StorageDead(_532);
        _530 = &(*_531);
        _529 = &(*_530);
        _518 = [const _, move _519, move _524, move _529];
        _517 = &_518;
        StorageDead(_529);
        StorageDead(_524);
        StorageDead(_519);
        StorageLive(_536);
        _536 = RangeFull;
        _516 = <[&[u8]; 4] as Index<RangeFull>>::index(move _517, move _536) -> [return: bb234, unwind: bb1684];
    }

    bb234: {
        StorageDead(_536);
        StorageDead(_517);
        _515 = &(*_516);
        _514 = &(*_515);
        _513 = [move _514];
        StorageDead(_514);
        _512 = &_513;
        _511 = &(*_512);
        _510 = move _511 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_511);
        _2702 = const false;
        _508 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _509, move _510) -> [return: bb235, unwind: bb1684];
    }

    bb235: {
        _2701 = const true;
        StorageDead(_510);
        _2702 = const false;
        StorageDead(_509);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        _3148 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _540 = &(*_3148);
        _539 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _540) -> [return: bb236, unwind: bb1682];
    }

    bb236: {
        StorageDead(_540);
        StorageLive(_541);
        StorageLive(_542);
        _2599 = deref_copy (_539.3: &anchor_lang::prelude::Pubkey);
        _542 = &(*_2599);
        StorageLive(_543);
        StorageLive(_544);
        _544 = <Token2022 as anchor_lang::Id>::id() -> [return: bb237, unwind: bb1482];
    }

    bb237: {
        _543 = &_544;
        _541 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _542, move _543) -> [return: bb238, unwind: bb1482];
    }

    bb238: {
        switchInt(move _541) -> [0: bb267, otherwise: bb239];
    }

    bb239: {
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_542);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = &_539;
        _547 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _548) -> [return: bb240, unwind: bb1482];
    }

    bb240: {
        StorageDead(_548);
        _546 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _547) -> [return: bb241, unwind: bb1482];
    }

    bb241: {
        StorageDead(_547);
        _549 = discriminant(_546);
        switchInt(move _549) -> [0: bb242, 1: bb243, otherwise: bb5];
    }

    bb242: {
        StorageLive(_553);
        _553 = move ((_546 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _545 = move _553;
        StorageDead(_553);
        _2752 = discriminant(_546);
        StorageDead(_546);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &_545;
        _559 = &(*_560);
        _558 = <Ref<'_, &mut [u8]> as Deref>::deref(move _559) -> [return: bb245, unwind: bb1481];
    }

    bb243: {
        StorageLive(_550);
        _550 = move ((_546 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_552);
        _552 = move _550;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _552) -> [return: bb244, unwind: bb1680];
    }

    bb244: {
        StorageDead(_552);
        StorageDead(_550);
        _3016 = discriminant(_546);
        StorageDead(_546);
        goto -> bb1353;
    }

    bb245: {
        _2600 = deref_copy (*_558);
        _557 = &(*_2600);
        StorageDead(_559);
        _556 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _557) -> [return: bb246, unwind: bb1481];
    }

    bb246: {
        StorageDead(_557);
        _555 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _556) -> [return: bb247, unwind: bb1481];
    }

    bb247: {
        StorageDead(_556);
        _561 = discriminant(_555);
        switchInt(move _561) -> [0: bb248, 1: bb249, otherwise: bb5];
    }

    bb248: {
        StorageLive(_565);
        _565 = move ((_555 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _554 = move _565;
        StorageDead(_565);
        _2754 = discriminant(_555);
        StorageDead(_560);
        StorageDead(_558);
        StorageDead(_555);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        _569 = &_554;
        _568 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _569) -> [return: bb251, unwind: bb1481];
    }

    bb249: {
        StorageLive(_562);
        _562 = move ((_555 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_564);
        _564 = move _562;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _564) -> [return: bb250, unwind: bb1679];
    }

    bb250: {
        StorageDead(_564);
        StorageDead(_562);
        _3014 = discriminant(_555);
        StorageDead(_560);
        StorageDead(_558);
        StorageDead(_555);
        goto -> bb1352;
    }

    bb251: {
        StorageDead(_569);
        _567 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _568) -> [return: bb252, unwind: bb1481];
    }

    bb252: {
        StorageDead(_568);
        _570 = discriminant(_567);
        switchInt(move _570) -> [0: bb253, 1: bb254, otherwise: bb5];
    }

    bb253: {
        StorageLive(_574);
        _574 = move ((_567 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _566 = move _574;
        StorageDead(_574);
        _2756 = discriminant(_567);
        StorageDead(_567);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        _579 = &_566;
        _578 = &(*_579);
        _577 = <Vec<ExtensionType> as Deref>::deref(move _578) -> [return: bb256, unwind: bb1480];
    }

    bb254: {
        StorageLive(_571);
        _571 = move ((_567 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_573);
        _573 = move _571;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _573) -> [return: bb255, unwind: bb1678];
    }

    bb255: {
        StorageDead(_573);
        StorageDead(_571);
        _3012 = discriminant(_567);
        StorageDead(_567);
        StorageDead(_566);
        goto -> bb1352;
    }

    bb256: {
        _576 = &(*_577);
        StorageDead(_578);
        _575 = ExtensionType::get_required_init_account_extensions(move _576) -> [return: bb257, unwind: bb1480];
    }

    bb257: {
        StorageDead(_576);
        StorageDead(_579);
        StorageDead(_577);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = &_575;
        _584 = &(*_585);
        _583 = <Vec<ExtensionType> as Deref>::deref(move _584) -> [return: bb258, unwind: bb1479];
    }

    bb258: {
        _582 = &(*_583);
        StorageDead(_584);
        _581 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _582) -> [return: bb259, unwind: bb1479];
    }

    bb259: {
        StorageDead(_582);
        _580 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _581) -> [return: bb260, unwind: bb1479];
    }

    bb260: {
        _2700 = const true;
        StorageDead(_581);
        _586 = discriminant(_580);
        switchInt(move _586) -> [0: bb261, 1: bb262, otherwise: bb5];
    }

    bb261: {
        StorageLive(_590);
        _590 = ((_580 as Continue).0: usize);
        _538 = _590;
        StorageDead(_590);
        drop(_575) -> [return: bb264, unwind: bb1477];
    }

    bb262: {
        StorageLive(_587);
        _587 = move ((_580 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_589);
        _589 = move _587;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _589) -> [return: bb263, unwind: bb1476];
    }

    bb263: {
        StorageDead(_589);
        StorageDead(_587);
        drop(_575) -> [return: bb1349, unwind: bb1477];
    }

    bb264: {
        StorageDead(_575);
        drop(_566) -> [return: bb265, unwind: bb1478];
    }

    bb265: {
        StorageDead(_566);
        StorageDead(_554);
        drop(_545) -> [return: bb266, unwind: bb1677];
    }

    bb266: {
        StorageDead(_545);
        _2758 = discriminant(_580);
        StorageDead(_585);
        StorageDead(_583);
        _2700 = const false;
        StorageDead(_580);
        goto -> bb268;
    }

    bb267: {
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_542);
        _538 = const _;
        goto -> bb268;
    }

    bb268: {
        StorageDead(_541);
        drop(_539) -> [return: bb269, unwind: bb1682];
    }

    bb269: {
        StorageDead(_539);
        _537 = move _538 as u64 (IntToInt);
        StorageDead(_538);
        _2701 = const false;
        _507 = anchor_lang::system_program::allocate(move _508, move _537) -> [return: bb270, unwind: bb1682];
    }

    bb270: {
        StorageDead(_537);
        _2701 = const false;
        StorageDead(_508);
        _506 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _507) -> [return: bb271, unwind: bb1686];
    }

    bb271: {
        StorageDead(_507);
        _591 = discriminant(_506);
        switchInt(move _591) -> [0: bb272, 1: bb273, otherwise: bb5];
    }

    bb272: {
        StorageLive(_595);
        _595 = ((_506 as Continue).0: ());
        _505 = _595;
        StorageDead(_595);
        _2760 = discriminant(_506);
        StorageDead(_533);
        StorageDead(_531);
        StorageDead(_530);
        StorageDead(_527);
        StorageDead(_525);
        StorageDead(_522);
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_506);
        StorageDead(_505);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        _598 = &(*_87);
        _597 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _598) -> [return: bb275, unwind: bb1686];
    }

    bb273: {
        StorageLive(_592);
        _592 = move ((_506 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_594);
        _594 = move _592;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _594) -> [return: bb274, unwind: bb1676];
    }

    bb274: {
        StorageDead(_594);
        StorageDead(_592);
        _3008 = discriminant(_506);
        goto -> bb1357;
    }

    bb275: {
        StorageDead(_598);
        _2699 = const true;
        _596 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _597 };
        StorageDead(_597);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        _601 = &_201;
        _600 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _601) -> [return: bb276, unwind: bb1675];
    }

    bb276: {
        StorageDead(_601);
        StorageLive(_602);
        _2699 = const false;
        _602 = move _596;
        _599 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _600, move _602) -> [return: bb277, unwind: bb1675];
    }

    bb277: {
        StorageDead(_602);
        StorageDead(_600);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        _2698 = const true;
        _607 = move _599;
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        _621 = &_21;
        _620 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _621) -> [return: bb278, unwind: bb1673];
    }

    bb278: {
        _619 = &_620;
        StorageDead(_621);
        _618 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _619) -> [return: bb279, unwind: bb1673];
    }

    bb279: {
        _617 = &(*_618);
        StorageDead(_619);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        _3149 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _626 = &(*_3149);
        _625 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _626) -> [return: bb280, unwind: bb1673];
    }

    bb280: {
        _624 = &_625;
        StorageDead(_626);
        _623 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _624) -> [return: bb281, unwind: bb1673];
    }

    bb281: {
        _622 = &(*_623);
        StorageDead(_624);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        _632 = _225;
        _631 = [move _632];
        _630 = &_631;
        StorageDead(_632);
        StorageLive(_633);
        _633 = RangeFull;
        _629 = <[u8; 1] as Index<RangeFull>>::index(move _630, move _633) -> [return: bb282, unwind: bb1673];
    }

    bb282: {
        StorageDead(_633);
        StorageDead(_630);
        _628 = &(*_629);
        _627 = &(*_628);
        _616 = [const _, move _617, move _622, move _627];
        _615 = &_616;
        StorageDead(_627);
        StorageDead(_622);
        StorageDead(_617);
        StorageLive(_634);
        _634 = RangeFull;
        _614 = <[&[u8]; 4] as Index<RangeFull>>::index(move _615, move _634) -> [return: bb283, unwind: bb1673];
    }

    bb283: {
        StorageDead(_634);
        StorageDead(_615);
        _613 = &(*_614);
        _612 = &(*_613);
        _611 = [move _612];
        StorageDead(_612);
        _610 = &_611;
        _609 = &(*_610);
        _608 = move _609 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_609);
        _2698 = const false;
        _606 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _607, move _608) -> [return: bb284, unwind: bb1673];
    }

    bb284: {
        _2697 = const true;
        StorageDead(_608);
        _2698 = const false;
        StorageDead(_607);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        _640 = &_171;
        _639 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _640) -> [return: bb285, unwind: bb1671];
    }

    bb285: {
        _638 = &(*_639);
        StorageDead(_640);
        _637 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _638) -> [return: bb286, unwind: bb1671];
    }

    bb286: {
        StorageDead(_638);
        _636 = &_637;
        _635 = &(*_636);
        _2697 = const false;
        _605 = anchor_lang::system_program::assign(move _606, move _635) -> [return: bb287, unwind: bb1671];
    }

    bb287: {
        StorageDead(_635);
        _2697 = const false;
        StorageDead(_606);
        _604 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _605) -> [return: bb288, unwind: bb1675];
    }

    bb288: {
        StorageDead(_605);
        _641 = discriminant(_604);
        switchInt(move _641) -> [0: bb289, 1: bb290, otherwise: bb5];
    }

    bb289: {
        StorageLive(_645);
        _645 = ((_604 as Continue).0: ());
        _603 = _645;
        StorageDead(_645);
        _2762 = discriminant(_604);
        StorageDead(_639);
        StorageDead(_637);
        StorageDead(_636);
        StorageDead(_631);
        StorageDead(_629);
        StorageDead(_628);
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_620);
        StorageDead(_618);
        StorageDead(_616);
        StorageDead(_614);
        StorageDead(_613);
        StorageDead(_611);
        StorageDead(_610);
        StorageDead(_604);
        StorageDead(_603);
        _275 = const ();
        StorageDead(_599);
        _2699 = const false;
        StorageDead(_596);
        StorageDead(_501);
        _2703 = const false;
        StorageDead(_498);
        StorageDead(_418);
        goto -> bb292;
    }

    bb290: {
        StorageLive(_642);
        _642 = move ((_604 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_644);
        _644 = move _642;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _644) -> [return: bb291, unwind: bb1669];
    }

    bb291: {
        StorageDead(_644);
        StorageDead(_642);
        _3006 = discriminant(_604);
        StorageDead(_639);
        StorageDead(_637);
        StorageDead(_636);
        StorageDead(_631);
        StorageDead(_629);
        StorageDead(_628);
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_620);
        StorageDead(_618);
        StorageDead(_616);
        StorageDead(_614);
        StorageDead(_613);
        StorageDead(_611);
        StorageDead(_610);
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_599);
        _2699 = const false;
        StorageDead(_596);
        goto -> bb1358;
    }

    bb292: {
        StorageDead(_276);
        StorageDead(_275);
        StorageLive(_646);
        StorageLive(_647);
        _647 = &_171;
        _646 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _647) -> [return: bb293, unwind: bb1500];
    }

    bb293: {
        _2696 = const true;
        StorageDead(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        _650 = &(*_87);
        _649 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _650) -> [return: bb294, unwind: bb1668];
    }

    bb294: {
        StorageDead(_650);
        StorageLive(_651);
        StorageLive(_652);
        _3150 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _652 = &(*_3150);
        _651 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _652) -> [return: bb295, unwind: bb1475];
    }

    bb295: {
        StorageDead(_652);
        StorageLive(_653);
        StorageLive(_654);
        _654 = &_36;
        _653 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _654) -> [return: bb296, unwind: bb1474];
    }

    bb296: {
        StorageDead(_654);
        _648 = anchor_spl::token_2022::InitializeAccount3::<'_> { account: move _649, mint: move _651, authority: move _653 };
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_649);
        StorageLive(_655);
        StorageLive(_656);
        _2696 = const false;
        _656 = move _646;
        StorageLive(_657);
        _657 = move _648;
        _655 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>::new(move _656, move _657) -> [return: bb297, unwind: bb1668];
    }

    bb297: {
        StorageDead(_657);
        StorageDead(_656);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        _661 = move _655;
        _660 = anchor_spl::token_2022::initialize_account3(move _661) -> [return: bb298, unwind: bb1668];
    }

    bb298: {
        StorageDead(_661);
        _659 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _660) -> [return: bb299, unwind: bb1668];
    }

    bb299: {
        StorageDead(_660);
        _662 = discriminant(_659);
        switchInt(move _662) -> [0: bb300, 1: bb301, otherwise: bb5];
    }

    bb300: {
        StorageLive(_666);
        _666 = ((_659 as Continue).0: ());
        _658 = _666;
        StorageDead(_666);
        _2764 = discriminant(_659);
        StorageDead(_659);
        StorageDead(_658);
        _266 = const ();
        StorageDead(_655);
        StorageDead(_648);
        _2696 = const false;
        StorageDead(_646);
        StorageDead(_273);
        goto -> bb304;
    }

    bb301: {
        StorageLive(_663);
        _663 = move ((_659 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_665);
        _665 = move _663;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _665) -> [return: bb302, unwind: bb1666];
    }

    bb302: {
        StorageDead(_665);
        StorageDead(_663);
        _3004 = discriminant(_659);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_655);
        StorageDead(_648);
        _2696 = const false;
        StorageDead(_646);
        goto -> bb1376;
    }

    bb303: {
        StorageDead(_270);
        StorageDead(_269);
        _266 = const ();
        goto -> bb304;
    }

    bb304: {
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_266);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        _671 = &_87;
        _2601 = deref_copy (*_671);
        _670 = &(*_2601);
        _669 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::try_from_unchecked(move _670) -> [return: bb305, unwind: bb1500];
    }

    bb305: {
        _2694 = const true;
        _2695 = const true;
        StorageDead(_670);
        _672 = discriminant(_669);
        switchInt(move _672) -> [0: bb307, 1: bb306, otherwise: bb5];
    }

    bb306: {
        StorageLive(_674);
        _674 = move ((_669 as Err).0: anchor_lang::error::Error);
        StorageLive(_676);
        StorageLive(_677);
        _677 = move _674;
        _676 = anchor_lang::error::Error::with_account_name::<&str>(move _677, const "reserve_liquidity_supply") -> [return: bb308, unwind: bb1665];
    }

    bb307: {
        StorageLive(_673);
        _673 = move ((_669 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _668 = move _673;
        StorageDead(_673);
        _667 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>::new(move _668) -> [return: bb309, unwind: bb1665];
    }

    bb308: {
        StorageDead(_677);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _676);
        StorageDead(_676);
        StorageDead(_674);
        StorageDead(_668);
        _3002 = discriminant(_669);
        StorageDead(_671);
        _2694 = const false;
        _2695 = const false;
        StorageDead(_669);
        goto -> bb1348;
    }

    bb309: {
        StorageDead(_668);
        _2766 = discriminant(_669);
        StorageDead(_671);
        _2694 = const false;
        _2695 = const false;
        StorageDead(_669);
        StorageLive(_678);
        StorageLive(_679);
        _679 = const false;
        switchInt(move _679) -> [0: bb345, otherwise: bb310];
    }

    bb310: {
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _3151 = (((_667.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _686 = &(*_3151);
        _685 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _686) -> [return: bb311, unwind: bb1473];
    }

    bb311: {
        _684 = &(*_685);
        _683 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _684) -> [return: bb312, unwind: bb1473];
    }

    bb312: {
        StorageDead(_686);
        StorageDead(_684);
        _682 = &((*_683).0: anchor_lang::prelude::Pubkey);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        _3152 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _689 = &(*_3152);
        _688 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _689) -> [return: bb313, unwind: bb1473];
    }

    bb313: {
        _687 = &_688;
        StorageDead(_689);
        _681 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _682, move _687) -> [return: bb314, unwind: bb1473];
    }

    bb314: {
        switchInt(move _681) -> [0: bb322, otherwise: bb315];
    }

    bb315: {
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_685);
        StorageDead(_683);
        StorageDead(_682);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = ConstraintTokenMint;
        _693 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _694) -> [return: bb316, unwind: bb1473];
    }

    bb316: {
        StorageDead(_694);
        _692 = anchor_lang::error::Error::with_account_name::<&str>(move _693, const "reserve_liquidity_supply") -> [return: bb317, unwind: bb1473];
    }

    bb317: {
        _2693 = const true;
        StorageDead(_693);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        _3153 = (((_667.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _700 = &(*_3153);
        _699 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _700) -> [return: bb318, unwind: bb1664];
    }

    bb318: {
        _698 = &(*_699);
        _697 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _698) -> [return: bb319, unwind: bb1664];
    }

    bb319: {
        StorageDead(_700);
        StorageDead(_698);
        _696 = ((*_697).0: anchor_lang::prelude::Pubkey);
        StorageLive(_701);
        StorageLive(_702);
        _3154 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _702 = &(*_3154);
        _701 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _702) -> [return: bb320, unwind: bb1664];
    }

    bb320: {
        StorageDead(_702);
        _695 = (move _696, move _701);
        StorageDead(_701);
        StorageDead(_696);
        _2693 = const false;
        _691 = anchor_lang::error::Error::with_pubkeys(move _692, move _695) -> [return: bb321, unwind: bb1664];
    }

    bb321: {
        StorageDead(_695);
        _2693 = const false;
        StorageDead(_692);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _691);
        StorageDead(_691);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_681);
        StorageDead(_680);
        goto -> bb1347;
    }

    bb322: {
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_685);
        StorageDead(_683);
        StorageDead(_682);
        _680 = const ();
        StorageDead(_681);
        StorageDead(_680);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        _3155 = (((_667.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _709 = &(*_3155);
        _708 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _709) -> [return: bb323, unwind: bb1473];
    }

    bb323: {
        _707 = &(*_708);
        _706 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _707) -> [return: bb324, unwind: bb1473];
    }

    bb324: {
        StorageDead(_709);
        StorageDead(_707);
        _705 = &((*_706).1: anchor_lang::prelude::Pubkey);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        _712 = &_36;
        _711 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _712) -> [return: bb325, unwind: bb1473];
    }

    bb325: {
        _710 = &_711;
        StorageDead(_712);
        _704 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _705, move _710) -> [return: bb326, unwind: bb1473];
    }

    bb326: {
        switchInt(move _704) -> [0: bb334, otherwise: bb327];
    }

    bb327: {
        StorageDead(_711);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_706);
        StorageDead(_705);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        _717 = ConstraintTokenOwner;
        _716 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _717) -> [return: bb328, unwind: bb1473];
    }

    bb328: {
        StorageDead(_717);
        _715 = anchor_lang::error::Error::with_account_name::<&str>(move _716, const "reserve_liquidity_supply") -> [return: bb329, unwind: bb1473];
    }

    bb329: {
        _2692 = const true;
        StorageDead(_716);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        _3156 = (((_667.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _723 = &(*_3156);
        _722 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _723) -> [return: bb330, unwind: bb1662];
    }

    bb330: {
        _721 = &(*_722);
        _720 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _721) -> [return: bb331, unwind: bb1662];
    }

    bb331: {
        StorageDead(_723);
        StorageDead(_721);
        _719 = ((*_720).1: anchor_lang::prelude::Pubkey);
        StorageLive(_724);
        StorageLive(_725);
        _725 = &_36;
        _724 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _725) -> [return: bb332, unwind: bb1662];
    }

    bb332: {
        StorageDead(_725);
        _718 = (move _719, move _724);
        StorageDead(_724);
        StorageDead(_719);
        _2692 = const false;
        _714 = anchor_lang::error::Error::with_pubkeys(move _715, move _718) -> [return: bb333, unwind: bb1662];
    }

    bb333: {
        StorageDead(_718);
        _2692 = const false;
        StorageDead(_715);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _714);
        StorageDead(_714);
        StorageDead(_722);
        StorageDead(_720);
        StorageDead(_704);
        StorageDead(_703);
        goto -> bb1347;
    }

    bb334: {
        StorageDead(_711);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_706);
        StorageDead(_705);
        _703 = const ();
        StorageDead(_704);
        StorageDead(_703);
        StorageLive(_726);
        StorageLive(_727);
        _727 = &_261;
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        _733 = &_171;
        _732 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _733) -> [return: bb335, unwind: bb1473];
    }

    bb335: {
        _731 = &(*_732);
        StorageDead(_733);
        _730 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _731) -> [return: bb336, unwind: bb1473];
    }

    bb336: {
        StorageDead(_731);
        _729 = &_730;
        _728 = &_729;
        _726 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _727, move _728) -> [return: bb337, unwind: bb1473];
    }

    bb337: {
        switchInt(move _726) -> [0: bb344, otherwise: bb338];
    }

    bb338: {
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_729);
        StorageDead(_728);
        StorageDead(_727);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        _738 = ConstraintTokenTokenProgram;
        _737 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _738) -> [return: bb339, unwind: bb1473];
    }

    bb339: {
        StorageDead(_738);
        _736 = anchor_lang::error::Error::with_account_name::<&str>(move _737, const "reserve_liquidity_supply") -> [return: bb340, unwind: bb1473];
    }

    bb340: {
        _2691 = const true;
        StorageDead(_737);
        StorageLive(_739);
        StorageLive(_740);
        _740 = (*_261);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        _744 = &_171;
        _743 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _744) -> [return: bb341, unwind: bb1660];
    }

    bb341: {
        _742 = &(*_743);
        StorageDead(_744);
        _741 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _742) -> [return: bb342, unwind: bb1660];
    }

    bb342: {
        StorageDead(_742);
        _739 = (move _740, move _741);
        StorageDead(_741);
        StorageDead(_740);
        _2691 = const false;
        _735 = anchor_lang::error::Error::with_pubkeys(move _736, move _739) -> [return: bb343, unwind: bb1660];
    }

    bb343: {
        StorageDead(_739);
        _2691 = const false;
        StorageDead(_736);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _735);
        StorageDead(_735);
        StorageDead(_743);
        StorageDead(_726);
        goto -> bb1347;
    }

    bb344: {
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_729);
        StorageDead(_728);
        StorageDead(_727);
        _678 = const ();
        StorageDead(_726);
        goto -> bb346;
    }

    bb345: {
        _678 = const ();
        goto -> bb346;
    }

    bb346: {
        StorageDead(_679);
        StorageDead(_678);
        _260 = move _667;
        StorageDead(_667);
        StorageDead(_261);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = &_260;
        _749 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _750) -> [return: bb347, unwind: bb1472];
    }

    bb347: {
        _748 = &(*_749);
        StorageDead(_750);
        _747 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _748) -> [return: bb348, unwind: bb1472];
    }

    bb348: {
        StorageDead(_748);
        _746 = ((*_747).6: bool);
        switchInt(move _746) -> [0: bb349, otherwise: bb352];
    }

    bb349: {
        StorageDead(_749);
        StorageDead(_747);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        _754 = ConstraintMut;
        _753 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _754) -> [return: bb350, unwind: bb1472];
    }

    bb350: {
        StorageDead(_754);
        _752 = anchor_lang::error::Error::with_account_name::<&str>(move _753, const "reserve_liquidity_supply") -> [return: bb351, unwind: bb1472];
    }

    bb351: {
        StorageDead(_753);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _752);
        StorageDead(_752);
        StorageDead(_746);
        StorageDead(_745);
        goto -> bb1346;
    }

    bb352: {
        StorageDead(_749);
        StorageDead(_747);
        _745 = const ();
        StorageDead(_746);
        StorageDead(_745);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &_216;
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        _3157 = (((_260.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _761 = &(*_3157);
        _760 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _761) -> [return: bb353, unwind: bb1472];
    }

    bb353: {
        _759 = &_760;
        StorageDead(_761);
        _758 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _759) -> [return: bb354, unwind: bb1471];
    }

    bb354: {
        StorageDead(_759);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        _3158 = (((_260.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _767 = &(*_3158);
        _766 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _767) -> [return: bb355, unwind: bb1471];
    }

    bb355: {
        _765 = &_766;
        StorageDead(_767);
        _764 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _765) -> [return: bb356, unwind: bb1470];
    }

    bb356: {
        StorageDead(_765);
        _763 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _764) -> [return: bb357, unwind: bb1470];
    }

    bb357: {
        _2690 = const true;
        StorageDead(_764);
        _768 = discriminant(_763);
        switchInt(move _768) -> [0: bb358, 1: bb359, otherwise: bb5];
    }

    bb358: {
        StorageLive(_772);
        _772 = ((_763 as Continue).0: usize);
        _762 = _772;
        StorageDead(_772);
        _756 = anchor_lang::prelude::Rent::is_exempt(move _757, move _758, move _762) -> [return: bb361, unwind: bb1658];
    }

    bb359: {
        StorageLive(_769);
        _769 = move ((_763 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_771);
        _771 = move _769;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _771) -> [return: bb360, unwind: bb1658];
    }

    bb360: {
        StorageDead(_771);
        StorageDead(_769);
        StorageDead(_762);
        StorageDead(_758);
        StorageDead(_757);
        _3000 = discriminant(_763);
        drop(_766) -> [return: bb1343, unwind: bb1471];
    }

    bb361: {
        switchInt(move _756) -> [0: bb363, otherwise: bb362];
    }

    bb362: {
        StorageDead(_762);
        StorageDead(_758);
        StorageDead(_757);
        _2768 = discriminant(_763);
        drop(_766) -> [return: bb368, unwind: bb1471];
    }

    bb363: {
        StorageDead(_762);
        StorageDead(_758);
        StorageDead(_757);
        _2770 = discriminant(_763);
        drop(_766) -> [return: bb364, unwind: bb1471];
    }

    bb364: {
        StorageDead(_766);
        _2690 = const false;
        StorageDead(_763);
        drop(_760) -> [return: bb365, unwind: bb1472];
    }

    bb365: {
        StorageDead(_760);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        _776 = ConstraintRentExempt;
        _775 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _776) -> [return: bb366, unwind: bb1472];
    }

    bb366: {
        StorageDead(_776);
        _774 = anchor_lang::error::Error::with_account_name::<&str>(move _775, const "reserve_liquidity_supply") -> [return: bb367, unwind: bb1472];
    }

    bb367: {
        StorageDead(_775);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _774);
        StorageDead(_774);
        goto -> bb1345;
    }

    bb368: {
        StorageDead(_766);
        _2690 = const false;
        StorageDead(_763);
        drop(_760) -> [return: bb369, unwind: bb1472];
    }

    bb369: {
        StorageDead(_760);
        _755 = const ();
        StorageDead(_756);
        StorageDead(_755);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        _779 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb370, unwind: bb1472];
    }

    bb370: {
        _778 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _779) -> [return: bb371, unwind: bb1472];
    }

    bb371: {
        StorageDead(_779);
        _780 = discriminant(_778);
        switchInt(move _780) -> [0: bb372, 1: bb373, otherwise: bb5];
    }

    bb372: {
        StorageLive(_784);
        _784 = ((_778 as Continue).0: anchor_lang::prelude::Rent);
        _777 = _784;
        StorageDead(_784);
        _2772 = discriminant(_778);
        StorageDead(_778);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        _793 = const _;
        _792 = &(*_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        _798 = &_21;
        _797 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _798) -> [return: bb375, unwind: bb1472];
    }

    bb373: {
        StorageLive(_781);
        _781 = move ((_778 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_783);
        _783 = move _781;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _783) -> [return: bb374, unwind: bb1657];
    }

    bb374: {
        StorageDead(_783);
        StorageDead(_781);
        _2998 = discriminant(_778);
        StorageDead(_778);
        goto -> bb1342;
    }

    bb375: {
        _796 = &_797;
        StorageDead(_798);
        _795 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _796) -> [return: bb376, unwind: bb1472];
    }

    bb376: {
        _794 = &(*_795);
        StorageDead(_796);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        _3159 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _803 = &(*_3159);
        _802 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _803) -> [return: bb377, unwind: bb1472];
    }

    bb377: {
        _801 = &_802;
        StorageDead(_803);
        _800 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _801) -> [return: bb378, unwind: bb1472];
    }

    bb378: {
        _799 = &(*_800);
        StorageDead(_801);
        _791 = [move _792, move _794, move _799];
        StorageDead(_799);
        StorageDead(_794);
        StorageDead(_792);
        _790 = &_791;
        _789 = &(*_790);
        _788 = move _789 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_789);
        StorageLive(_804);
        _804 = &(*_1);
        _787 = anchor_lang::prelude::Pubkey::find_program_address(move _788, move _804) -> [return: bb379, unwind: bb1472];
    }

    bb379: {
        StorageDead(_804);
        StorageDead(_788);
        StorageLive(_785);
        _785 = (_787.0: anchor_lang::prelude::Pubkey);
        StorageLive(_786);
        _786 = (_787.1: u8);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_797);
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_791);
        StorageDead(_790);
        StorageDead(_787);
        StorageLive(_805);
        _805 = _786;
        ((*_4).1: u8) = move _805;
        StorageDead(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        _810 = &(*_102);
        _809 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _810) -> [return: bb380, unwind: bb1472];
    }

    bb380: {
        _808 = &_809;
        StorageDead(_810);
        StorageLive(_811);
        _811 = &_785;
        _807 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _808, move _811) -> [return: bb381, unwind: bb1472];
    }

    bb381: {
        switchInt(move _807) -> [0: bb387, otherwise: bb382];
    }

    bb382: {
        StorageDead(_811);
        StorageDead(_809);
        StorageDead(_808);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        _816 = ConstraintSeeds;
        _815 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _816) -> [return: bb383, unwind: bb1472];
    }

    bb383: {
        StorageDead(_816);
        _814 = anchor_lang::error::Error::with_account_name::<&str>(move _815, const "fee_receiver") -> [return: bb384, unwind: bb1472];
    }

    bb384: {
        _2689 = const true;
        StorageDead(_815);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        _819 = &(*_102);
        _818 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _819) -> [return: bb385, unwind: bb1656];
    }

    bb385: {
        StorageDead(_819);
        StorageLive(_820);
        _820 = _785;
        _817 = (move _818, move _820);
        StorageDead(_820);
        StorageDead(_818);
        _2689 = const false;
        _813 = anchor_lang::error::Error::with_pubkeys(move _814, move _817) -> [return: bb386, unwind: bb1656];
    }

    bb386: {
        StorageDead(_817);
        _2689 = const false;
        StorageDead(_814);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _813);
        StorageDead(_813);
        StorageDead(_807);
        StorageDead(_806);
        goto -> bb1341;
    }

    bb387: {
        StorageDead(_811);
        StorageDead(_809);
        StorageDead(_808);
        _806 = const ();
        StorageDead(_807);
        StorageDead(_806);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        _826 = &(*_102);
        _825 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _826) -> [return: bb388, unwind: bb1472];
    }

    bb388: {
        _824 = &(*_825);
        StorageDead(_826);
        _823 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _824) -> [return: bb389, unwind: bb1472];
    }

    bb389: {
        StorageDead(_824);
        _822 = ((*_823).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_825);
        StorageDead(_823);
        StorageLive(_827);
        StorageLive(_828);
        _828 = const false;
        switchInt(move _828) -> [0: bb392, otherwise: bb390];
    }

    bb390: {
        StorageLive(_829);
        StorageLive(_830);
        _830 = &_822;
        StorageLive(_831);
        _2571 = const _;
        _831 = &(*_2571);
        _829 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _830, move _831) -> [return: bb391, unwind: bb1472];
    }

    bb391: {
        switchInt(move _829) -> [0: bb587, otherwise: bb392];
    }

    bb392: {
        StorageDead(_831);
        StorageDead(_830);
        StorageLive(_834);
        StorageLive(_835);
        _835 = &(*_102);
        _834 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _835) -> [return: bb393, unwind: bb1472];
    }

    bb393: {
        StorageDead(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        _838 = _834;
        _837 = Eq(move _838, const 0_u64);
        switchInt(move _837) -> [0: bb448, otherwise: bb394];
    }

    bb394: {
        StorageDead(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        _3160 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _841 = &(*_3160);
        _840 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _841) -> [return: bb395, unwind: bb1472];
    }

    bb395: {
        StorageDead(_841);
        StorageLive(_842);
        StorageLive(_843);
        _2602 = deref_copy (_840.3: &anchor_lang::prelude::Pubkey);
        _843 = &(*_2602);
        StorageLive(_844);
        StorageLive(_845);
        _845 = <Token2022 as anchor_lang::Id>::id() -> [return: bb396, unwind: bb1469];
    }

    bb396: {
        _844 = &_845;
        _842 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _843, move _844) -> [return: bb397, unwind: bb1469];
    }

    bb397: {
        switchInt(move _842) -> [0: bb426, otherwise: bb398];
    }

    bb398: {
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_843);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        _849 = &_840;
        _848 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _849) -> [return: bb399, unwind: bb1469];
    }

    bb399: {
        StorageDead(_849);
        _847 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _848) -> [return: bb400, unwind: bb1469];
    }

    bb400: {
        StorageDead(_848);
        _850 = discriminant(_847);
        switchInt(move _850) -> [0: bb401, 1: bb402, otherwise: bb5];
    }

    bb401: {
        StorageLive(_854);
        _854 = move ((_847 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _846 = move _854;
        StorageDead(_854);
        _2774 = discriminant(_847);
        StorageDead(_847);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        _861 = &_846;
        _860 = &(*_861);
        _859 = <Ref<'_, &mut [u8]> as Deref>::deref(move _860) -> [return: bb404, unwind: bb1468];
    }

    bb402: {
        StorageLive(_851);
        _851 = move ((_847 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_853);
        _853 = move _851;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _853) -> [return: bb403, unwind: bb1654];
    }

    bb403: {
        StorageDead(_853);
        StorageDead(_851);
        _2996 = discriminant(_847);
        StorageDead(_847);
        goto -> bb1333;
    }

    bb404: {
        _2603 = deref_copy (*_859);
        _858 = &(*_2603);
        StorageDead(_860);
        _857 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _858) -> [return: bb405, unwind: bb1468];
    }

    bb405: {
        StorageDead(_858);
        _856 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _857) -> [return: bb406, unwind: bb1468];
    }

    bb406: {
        StorageDead(_857);
        _862 = discriminant(_856);
        switchInt(move _862) -> [0: bb407, 1: bb408, otherwise: bb5];
    }

    bb407: {
        StorageLive(_866);
        _866 = move ((_856 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _855 = move _866;
        StorageDead(_866);
        _2776 = discriminant(_856);
        StorageDead(_861);
        StorageDead(_859);
        StorageDead(_856);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        StorageLive(_870);
        _870 = &_855;
        _869 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _870) -> [return: bb410, unwind: bb1468];
    }

    bb408: {
        StorageLive(_863);
        _863 = move ((_856 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_865);
        _865 = move _863;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _865) -> [return: bb409, unwind: bb1653];
    }

    bb409: {
        StorageDead(_865);
        StorageDead(_863);
        _2994 = discriminant(_856);
        StorageDead(_861);
        StorageDead(_859);
        StorageDead(_856);
        goto -> bb1332;
    }

    bb410: {
        StorageDead(_870);
        _868 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _869) -> [return: bb411, unwind: bb1468];
    }

    bb411: {
        StorageDead(_869);
        _871 = discriminant(_868);
        switchInt(move _871) -> [0: bb412, 1: bb413, otherwise: bb5];
    }

    bb412: {
        StorageLive(_875);
        _875 = move ((_868 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _867 = move _875;
        StorageDead(_875);
        _2778 = discriminant(_868);
        StorageDead(_868);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        _880 = &_867;
        _879 = &(*_880);
        _878 = <Vec<ExtensionType> as Deref>::deref(move _879) -> [return: bb415, unwind: bb1467];
    }

    bb413: {
        StorageLive(_872);
        _872 = move ((_868 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_874);
        _874 = move _872;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _874) -> [return: bb414, unwind: bb1652];
    }

    bb414: {
        StorageDead(_874);
        StorageDead(_872);
        _2992 = discriminant(_868);
        StorageDead(_868);
        StorageDead(_867);
        goto -> bb1332;
    }

    bb415: {
        _877 = &(*_878);
        StorageDead(_879);
        _876 = ExtensionType::get_required_init_account_extensions(move _877) -> [return: bb416, unwind: bb1467];
    }

    bb416: {
        StorageDead(_877);
        StorageDead(_880);
        StorageDead(_878);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        _886 = &_876;
        _885 = &(*_886);
        _884 = <Vec<ExtensionType> as Deref>::deref(move _885) -> [return: bb417, unwind: bb1466];
    }

    bb417: {
        _883 = &(*_884);
        StorageDead(_885);
        _882 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _883) -> [return: bb418, unwind: bb1466];
    }

    bb418: {
        StorageDead(_883);
        _881 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _882) -> [return: bb419, unwind: bb1466];
    }

    bb419: {
        _2688 = const true;
        StorageDead(_882);
        _887 = discriminant(_881);
        switchInt(move _887) -> [0: bb420, 1: bb421, otherwise: bb5];
    }

    bb420: {
        StorageLive(_891);
        _891 = ((_881 as Continue).0: usize);
        _839 = _891;
        StorageDead(_891);
        drop(_876) -> [return: bb423, unwind: bb1464];
    }

    bb421: {
        StorageLive(_888);
        _888 = move ((_881 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_890);
        _890 = move _888;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _890) -> [return: bb422, unwind: bb1463];
    }

    bb422: {
        StorageDead(_890);
        StorageDead(_888);
        drop(_876) -> [return: bb1329, unwind: bb1464];
    }

    bb423: {
        StorageDead(_876);
        drop(_867) -> [return: bb424, unwind: bb1465];
    }

    bb424: {
        StorageDead(_867);
        StorageDead(_855);
        drop(_846) -> [return: bb425, unwind: bb1651];
    }

    bb425: {
        StorageDead(_846);
        _2780 = discriminant(_881);
        StorageDead(_886);
        StorageDead(_884);
        _2688 = const false;
        StorageDead(_881);
        goto -> bb427;
    }

    bb426: {
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_843);
        _839 = const _;
        goto -> bb427;
    }

    bb427: {
        StorageDead(_842);
        drop(_840) -> [return: bb428, unwind: bb1472];
    }

    bb428: {
        StorageDead(_840);
        StorageLive(_892);
        StorageLive(_893);
        _893 = &_777;
        StorageLive(_894);
        _894 = _839;
        _892 = anchor_lang::prelude::Rent::minimum_balance(move _893, move _894) -> [return: bb429, unwind: bb1472];
    }

    bb429: {
        StorageDead(_894);
        StorageDead(_893);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        _897 = &_6;
        _896 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _897) -> [return: bb430, unwind: bb1472];
    }

    bb430: {
        StorageDead(_897);
        StorageLive(_898);
        StorageLive(_899);
        _899 = &(*_102);
        _898 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _899) -> [return: bb431, unwind: bb1462];
    }

    bb431: {
        StorageDead(_899);
        _2687 = const true;
        _895 = anchor_lang::system_program::CreateAccount::<'_> { from: move _896, to: move _898 };
        StorageDead(_898);
        StorageDead(_896);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        _902 = &_201;
        _901 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _902) -> [return: bb432, unwind: bb1650];
    }

    bb432: {
        StorageDead(_902);
        StorageLive(_903);
        _2687 = const false;
        _903 = move _895;
        _900 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _901, move _903) -> [return: bb433, unwind: bb1650];
    }

    bb433: {
        StorageDead(_903);
        StorageDead(_901);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        _2686 = const true;
        _908 = move _900;
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        _922 = &_21;
        _921 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _922) -> [return: bb434, unwind: bb1648];
    }

    bb434: {
        _920 = &_921;
        StorageDead(_922);
        _919 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _920) -> [return: bb435, unwind: bb1648];
    }

    bb435: {
        _918 = &(*_919);
        StorageDead(_920);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        _3161 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _927 = &(*_3161);
        _926 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _927) -> [return: bb436, unwind: bb1648];
    }

    bb436: {
        _925 = &_926;
        StorageDead(_927);
        _924 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _925) -> [return: bb437, unwind: bb1648];
    }

    bb437: {
        _923 = &(*_924);
        StorageDead(_925);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        _933 = _786;
        _932 = [move _933];
        _931 = &_932;
        StorageDead(_933);
        StorageLive(_934);
        _934 = RangeFull;
        _930 = <[u8; 1] as Index<RangeFull>>::index(move _931, move _934) -> [return: bb438, unwind: bb1648];
    }

    bb438: {
        StorageDead(_934);
        StorageDead(_931);
        _929 = &(*_930);
        _928 = &(*_929);
        _917 = [const _, move _918, move _923, move _928];
        _916 = &_917;
        StorageDead(_928);
        StorageDead(_923);
        StorageDead(_918);
        StorageLive(_935);
        _935 = RangeFull;
        _915 = <[&[u8]; 4] as Index<RangeFull>>::index(move _916, move _935) -> [return: bb439, unwind: bb1648];
    }

    bb439: {
        StorageDead(_935);
        StorageDead(_916);
        _914 = &(*_915);
        _913 = &(*_914);
        _912 = [move _913];
        StorageDead(_913);
        _911 = &_912;
        _910 = &(*_911);
        _909 = move _910 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_910);
        _2686 = const false;
        _907 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _908, move _909) -> [return: bb440, unwind: bb1648];
    }

    bb440: {
        _2685 = const true;
        StorageDead(_909);
        _2686 = const false;
        StorageDead(_908);
        StorageLive(_936);
        _936 = _892;
        StorageLive(_937);
        StorageLive(_938);
        _938 = _839;
        _937 = move _938 as u64 (IntToInt);
        StorageDead(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        _944 = &_171;
        _943 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _944) -> [return: bb441, unwind: bb1646];
    }

    bb441: {
        _942 = &(*_943);
        StorageDead(_944);
        _941 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _942) -> [return: bb442, unwind: bb1646];
    }

    bb442: {
        StorageDead(_942);
        _940 = &_941;
        _939 = &(*_940);
        _2685 = const false;
        _906 = anchor_lang::system_program::create_account(move _907, move _936, move _937, move _939) -> [return: bb443, unwind: bb1646];
    }

    bb443: {
        StorageDead(_939);
        StorageDead(_937);
        StorageDead(_936);
        _2685 = const false;
        StorageDead(_907);
        _905 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _906) -> [return: bb444, unwind: bb1650];
    }

    bb444: {
        StorageDead(_906);
        _945 = discriminant(_905);
        switchInt(move _945) -> [0: bb445, 1: bb446, otherwise: bb5];
    }

    bb445: {
        StorageLive(_949);
        _949 = ((_905 as Continue).0: ());
        _904 = _949;
        StorageDead(_949);
        _2782 = discriminant(_905);
        StorageDead(_943);
        StorageDead(_941);
        StorageDead(_940);
        StorageDead(_932);
        StorageDead(_930);
        StorageDead(_929);
        StorageDead(_926);
        StorageDead(_924);
        StorageDead(_921);
        StorageDead(_919);
        StorageDead(_917);
        StorageDead(_915);
        StorageDead(_914);
        StorageDead(_912);
        StorageDead(_911);
        StorageDead(_905);
        StorageDead(_904);
        _836 = const ();
        StorageDead(_900);
        _2687 = const false;
        StorageDead(_895);
        StorageDead(_892);
        StorageDead(_839);
        goto -> bb576;
    }

    bb446: {
        StorageLive(_946);
        _946 = move ((_905 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_948);
        _948 = move _946;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _948) -> [return: bb447, unwind: bb1644];
    }

    bb447: {
        StorageDead(_948);
        StorageDead(_946);
        _2988 = discriminant(_905);
        StorageDead(_943);
        StorageDead(_941);
        StorageDead(_940);
        StorageDead(_932);
        StorageDead(_930);
        StorageDead(_929);
        StorageDead(_926);
        StorageDead(_924);
        StorageDead(_921);
        StorageDead(_919);
        StorageDead(_917);
        StorageDead(_915);
        StorageDead(_914);
        StorageDead(_912);
        StorageDead(_911);
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_900);
        _2687 = const false;
        StorageDead(_895);
        StorageDead(_892);
        goto -> bb1336;
    }

    bb448: {
        StorageDead(_838);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        _954 = &_6;
        _953 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _954) -> [return: bb449, unwind: bb1472];
    }

    bb449: {
        _952 = &_953;
        StorageDead(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        _957 = &(*_102);
        _956 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _957) -> [return: bb450, unwind: bb1472];
    }

    bb450: {
        _955 = &_956;
        StorageDead(_957);
        _951 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _952, move _955) -> [return: bb451, unwind: bb1472];
    }

    bb451: {
        switchInt(move _951) -> [0: bb460, otherwise: bb452];
    }

    bb452: {
        StorageDead(_956);
        StorageDead(_955);
        StorageDead(_953);
        StorageDead(_952);
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        _2570 = const _;
        _963 = &(*_2570);
        _962 = anchor_lang::error::ErrorCode::name(move _963) -> [return: bb453, unwind: bb1472];
    }

    bb453: {
        StorageDead(_963);
        StorageLive(_965);
        StorageLive(_966);
        _966 = TryingToInitPayerAsProgramAccount;
        _965 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _966) -> [return: bb454, unwind: bb1461];
    }

    bb454: {
        StorageDead(_966);
        StorageLive(_967);
        StorageLive(_968);
        _2569 = const _;
        _968 = &(*_2569);
        _967 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _968) -> [return: bb455, unwind: bb1461];
    }

    bb455: {
        StorageDead(_968);
        StorageLive(_970);
        StorageLive(_971);
        StorageLive(_972);
        _972 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_reserve.rs", line: const 66_u32 };
        _971 = anchor_lang::error::ErrorOrigin::Source(move _972);
        StorageDead(_972);
        _970 = std::option::Option::<ErrorOrigin>::Some(move _971);
        StorageDead(_971);
        StorageLive(_973);
        _973 = std::option::Option::<ComparedValues>::None;
        _961 = anchor_lang::error::AnchorError { error_name: move _962, error_code_number: move _965, error_msg: move _967, error_origin: move _970, compared_values: move _973 };
        StorageDead(_973);
        StorageDead(_970);
        StorageDead(_967);
        StorageDead(_965);
        StorageDead(_962);
        _960 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _961) -> [return: bb456, unwind: bb1472];
    }

    bb456: {
        _2684 = const true;
        StorageDead(_961);
        StorageLive(_974);
        StorageLive(_975);
        StorageLive(_976);
        _976 = &_6;
        _975 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _976) -> [return: bb457, unwind: bb1643];
    }

    bb457: {
        StorageDead(_976);
        StorageLive(_977);
        StorageLive(_978);
        _978 = &(*_102);
        _977 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _978) -> [return: bb458, unwind: bb1643];
    }

    bb458: {
        StorageDead(_978);
        _974 = (move _975, move _977);
        StorageDead(_977);
        StorageDead(_975);
        _2684 = const false;
        _959 = anchor_lang::error::Error::with_pubkeys(move _960, move _974) -> [return: bb459, unwind: bb1643];
    }

    bb459: {
        StorageDead(_974);
        _2684 = const false;
        StorageDead(_960);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _959);
        StorageDead(_959);
        StorageDead(_951);
        StorageDead(_950);
        goto -> bb1337;
    }

    bb460: {
        StorageDead(_956);
        StorageDead(_955);
        StorageDead(_953);
        StorageDead(_952);
        _950 = const ();
        StorageDead(_951);
        StorageDead(_950);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        StorageLive(_982);
        _982 = &_777;
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        _3162 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _985 = &(*_3162);
        _984 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _985) -> [return: bb461, unwind: bb1472];
    }

    bb461: {
        StorageDead(_985);
        StorageLive(_986);
        StorageLive(_987);
        _2604 = deref_copy (_984.3: &anchor_lang::prelude::Pubkey);
        _987 = &(*_2604);
        StorageLive(_988);
        StorageLive(_989);
        _989 = <Token2022 as anchor_lang::Id>::id() -> [return: bb462, unwind: bb1460];
    }

    bb462: {
        _988 = &_989;
        _986 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _987, move _988) -> [return: bb463, unwind: bb1460];
    }

    bb463: {
        switchInt(move _986) -> [0: bb492, otherwise: bb464];
    }

    bb464: {
        StorageDead(_989);
        StorageDead(_988);
        StorageDead(_987);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        _993 = &_984;
        _992 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _993) -> [return: bb465, unwind: bb1460];
    }

    bb465: {
        StorageDead(_993);
        _991 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _992) -> [return: bb466, unwind: bb1460];
    }

    bb466: {
        StorageDead(_992);
        _994 = discriminant(_991);
        switchInt(move _994) -> [0: bb467, 1: bb468, otherwise: bb5];
    }

    bb467: {
        StorageLive(_998);
        _998 = move ((_991 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _990 = move _998;
        StorageDead(_998);
        _2784 = discriminant(_991);
        StorageDead(_991);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        _1005 = &_990;
        _1004 = &(*_1005);
        _1003 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1004) -> [return: bb470, unwind: bb1459];
    }

    bb468: {
        StorageLive(_995);
        _995 = move ((_991 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_997);
        _997 = move _995;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _997) -> [return: bb469, unwind: bb1641];
    }

    bb469: {
        StorageDead(_997);
        StorageDead(_995);
        _2986 = discriminant(_991);
        StorageDead(_991);
        goto -> bb1325;
    }

    bb470: {
        _2605 = deref_copy (*_1003);
        _1002 = &(*_2605);
        StorageDead(_1004);
        _1001 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _1002) -> [return: bb471, unwind: bb1459];
    }

    bb471: {
        StorageDead(_1002);
        _1000 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1001) -> [return: bb472, unwind: bb1459];
    }

    bb472: {
        StorageDead(_1001);
        _1006 = discriminant(_1000);
        switchInt(move _1006) -> [0: bb473, 1: bb474, otherwise: bb5];
    }

    bb473: {
        StorageLive(_1010);
        _1010 = move ((_1000 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _999 = move _1010;
        StorageDead(_1010);
        _2786 = discriminant(_1000);
        StorageDead(_1005);
        StorageDead(_1003);
        StorageDead(_1000);
        StorageLive(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        StorageLive(_1014);
        _1014 = &_999;
        _1013 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _1014) -> [return: bb476, unwind: bb1459];
    }

    bb474: {
        StorageLive(_1007);
        _1007 = move ((_1000 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1009);
        _1009 = move _1007;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1009) -> [return: bb475, unwind: bb1640];
    }

    bb475: {
        StorageDead(_1009);
        StorageDead(_1007);
        _2984 = discriminant(_1000);
        StorageDead(_1005);
        StorageDead(_1003);
        StorageDead(_1000);
        goto -> bb1324;
    }

    bb476: {
        StorageDead(_1014);
        _1012 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1013) -> [return: bb477, unwind: bb1459];
    }

    bb477: {
        StorageDead(_1013);
        _1015 = discriminant(_1012);
        switchInt(move _1015) -> [0: bb478, 1: bb479, otherwise: bb5];
    }

    bb478: {
        StorageLive(_1019);
        _1019 = move ((_1012 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _1011 = move _1019;
        StorageDead(_1019);
        _2788 = discriminant(_1012);
        StorageDead(_1012);
        StorageLive(_1020);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        _1024 = &_1011;
        _1023 = &(*_1024);
        _1022 = <Vec<ExtensionType> as Deref>::deref(move _1023) -> [return: bb481, unwind: bb1458];
    }

    bb479: {
        StorageLive(_1016);
        _1016 = move ((_1012 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1018);
        _1018 = move _1016;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1018) -> [return: bb480, unwind: bb1639];
    }

    bb480: {
        StorageDead(_1018);
        StorageDead(_1016);
        _2982 = discriminant(_1012);
        StorageDead(_1012);
        StorageDead(_1011);
        goto -> bb1324;
    }

    bb481: {
        _1021 = &(*_1022);
        StorageDead(_1023);
        _1020 = ExtensionType::get_required_init_account_extensions(move _1021) -> [return: bb482, unwind: bb1458];
    }

    bb482: {
        StorageDead(_1021);
        StorageDead(_1024);
        StorageDead(_1022);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        StorageLive(_1029);
        StorageLive(_1030);
        _1030 = &_1020;
        _1029 = &(*_1030);
        _1028 = <Vec<ExtensionType> as Deref>::deref(move _1029) -> [return: bb483, unwind: bb1457];
    }

    bb483: {
        _1027 = &(*_1028);
        StorageDead(_1029);
        _1026 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _1027) -> [return: bb484, unwind: bb1457];
    }

    bb484: {
        StorageDead(_1027);
        _1025 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1026) -> [return: bb485, unwind: bb1457];
    }

    bb485: {
        _2683 = const true;
        StorageDead(_1026);
        _1031 = discriminant(_1025);
        switchInt(move _1031) -> [0: bb486, 1: bb487, otherwise: bb5];
    }

    bb486: {
        StorageLive(_1035);
        _1035 = ((_1025 as Continue).0: usize);
        _983 = _1035;
        StorageDead(_1035);
        drop(_1020) -> [return: bb489, unwind: bb1455];
    }

    bb487: {
        StorageLive(_1032);
        _1032 = move ((_1025 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1034);
        _1034 = move _1032;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1034) -> [return: bb488, unwind: bb1454];
    }

    bb488: {
        StorageDead(_1034);
        StorageDead(_1032);
        drop(_1020) -> [return: bb1321, unwind: bb1455];
    }

    bb489: {
        StorageDead(_1020);
        drop(_1011) -> [return: bb490, unwind: bb1456];
    }

    bb490: {
        StorageDead(_1011);
        StorageDead(_999);
        drop(_990) -> [return: bb491, unwind: bb1638];
    }

    bb491: {
        StorageDead(_990);
        _2790 = discriminant(_1025);
        StorageDead(_1030);
        StorageDead(_1028);
        _2683 = const false;
        StorageDead(_1025);
        goto -> bb493;
    }

    bb492: {
        StorageDead(_989);
        StorageDead(_988);
        StorageDead(_987);
        _983 = const _;
        goto -> bb493;
    }

    bb493: {
        StorageDead(_986);
        drop(_984) -> [return: bb494, unwind: bb1472];
    }

    bb494: {
        StorageDead(_984);
        _981 = anchor_lang::prelude::Rent::minimum_balance(move _982, move _983) -> [return: bb495, unwind: bb1472];
    }

    bb495: {
        StorageDead(_983);
        StorageDead(_982);
        _980 = <u64 as Ord>::max(move _981, const 1_u64) -> [return: bb496, unwind: bb1472];
    }

    bb496: {
        StorageDead(_981);
        StorageLive(_1036);
        _1036 = _834;
        _979 = core::num::<impl u64>::saturating_sub(move _980, move _1036) -> [return: bb497, unwind: bb1472];
    }

    bb497: {
        StorageDead(_1036);
        StorageDead(_980);
        StorageLive(_1037);
        StorageLive(_1038);
        StorageLive(_1039);
        _1039 = _979;
        _1038 = Gt(move _1039, const 0_u64);
        switchInt(move _1038) -> [0: bb508, otherwise: bb498];
    }

    bb498: {
        StorageDead(_1039);
        StorageLive(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        _1042 = &_6;
        _1041 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1042) -> [return: bb499, unwind: bb1472];
    }

    bb499: {
        StorageDead(_1042);
        StorageLive(_1043);
        StorageLive(_1044);
        _1044 = &(*_102);
        _1043 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1044) -> [return: bb500, unwind: bb1453];
    }

    bb500: {
        StorageDead(_1044);
        _2682 = const true;
        _1040 = anchor_lang::system_program::Transfer::<'_> { from: move _1041, to: move _1043 };
        StorageDead(_1043);
        StorageDead(_1041);
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        _1047 = &_201;
        _1046 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1047) -> [return: bb501, unwind: bb1637];
    }

    bb501: {
        StorageDead(_1047);
        StorageLive(_1048);
        _2682 = const false;
        _1048 = move _1040;
        _1045 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _1046, move _1048) -> [return: bb502, unwind: bb1637];
    }

    bb502: {
        StorageDead(_1048);
        StorageDead(_1046);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        _1052 = move _1045;
        StorageLive(_1053);
        _1053 = _979;
        _1051 = anchor_lang::system_program::transfer(move _1052, move _1053) -> [return: bb503, unwind: bb1637];
    }

    bb503: {
        StorageDead(_1053);
        StorageDead(_1052);
        _1050 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1051) -> [return: bb504, unwind: bb1637];
    }

    bb504: {
        StorageDead(_1051);
        _1054 = discriminant(_1050);
        switchInt(move _1054) -> [0: bb505, 1: bb506, otherwise: bb5];
    }

    bb505: {
        StorageLive(_1058);
        _1058 = ((_1050 as Continue).0: ());
        _1049 = _1058;
        StorageDead(_1058);
        _2792 = discriminant(_1050);
        StorageDead(_1050);
        StorageDead(_1049);
        _1037 = const ();
        StorageDead(_1045);
        _2682 = const false;
        StorageDead(_1040);
        goto -> bb509;
    }

    bb506: {
        StorageLive(_1055);
        _1055 = move ((_1050 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1057);
        _1057 = move _1055;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1057) -> [return: bb507, unwind: bb1635];
    }

    bb507: {
        StorageDead(_1057);
        StorageDead(_1055);
        _2978 = discriminant(_1050);
        StorageDead(_1050);
        StorageDead(_1049);
        StorageDead(_1045);
        _2682 = const false;
        StorageDead(_1040);
        StorageDead(_1038);
        StorageDead(_1037);
        goto -> bb1328;
    }

    bb508: {
        StorageDead(_1039);
        _1037 = const ();
        goto -> bb509;
    }

    bb509: {
        StorageDead(_1038);
        StorageDead(_1037);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        _1061 = &(*_102);
        _1060 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1061) -> [return: bb510, unwind: bb1472];
    }

    bb510: {
        StorageDead(_1061);
        _2681 = const true;
        _1059 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _1060 };
        StorageDead(_1060);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        _1064 = &_201;
        _1063 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1064) -> [return: bb511, unwind: bb1634];
    }

    bb511: {
        StorageDead(_1064);
        StorageLive(_1065);
        _2681 = const false;
        _1065 = move _1059;
        _1062 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _1063, move _1065) -> [return: bb512, unwind: bb1634];
    }

    bb512: {
        StorageDead(_1065);
        StorageDead(_1063);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        _2680 = const true;
        _1070 = move _1062;
        StorageLive(_1071);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        StorageLive(_1076);
        StorageLive(_1077);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        _1084 = &_21;
        _1083 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1084) -> [return: bb513, unwind: bb1632];
    }

    bb513: {
        _1082 = &_1083;
        StorageDead(_1084);
        _1081 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1082) -> [return: bb514, unwind: bb1632];
    }

    bb514: {
        _1080 = &(*_1081);
        StorageDead(_1082);
        StorageLive(_1085);
        StorageLive(_1086);
        StorageLive(_1087);
        StorageLive(_1088);
        StorageLive(_1089);
        _3163 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1089 = &(*_3163);
        _1088 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1089) -> [return: bb515, unwind: bb1632];
    }

    bb515: {
        _1087 = &_1088;
        StorageDead(_1089);
        _1086 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1087) -> [return: bb516, unwind: bb1632];
    }

    bb516: {
        _1085 = &(*_1086);
        StorageDead(_1087);
        StorageLive(_1090);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        _1095 = _786;
        _1094 = [move _1095];
        _1093 = &_1094;
        StorageDead(_1095);
        StorageLive(_1096);
        _1096 = RangeFull;
        _1092 = <[u8; 1] as Index<RangeFull>>::index(move _1093, move _1096) -> [return: bb517, unwind: bb1632];
    }

    bb517: {
        StorageDead(_1096);
        StorageDead(_1093);
        _1091 = &(*_1092);
        _1090 = &(*_1091);
        _1079 = [const _, move _1080, move _1085, move _1090];
        _1078 = &_1079;
        StorageDead(_1090);
        StorageDead(_1085);
        StorageDead(_1080);
        StorageLive(_1097);
        _1097 = RangeFull;
        _1077 = <[&[u8]; 4] as Index<RangeFull>>::index(move _1078, move _1097) -> [return: bb518, unwind: bb1632];
    }

    bb518: {
        StorageDead(_1097);
        StorageDead(_1078);
        _1076 = &(*_1077);
        _1075 = &(*_1076);
        _1074 = [move _1075];
        StorageDead(_1075);
        _1073 = &_1074;
        _1072 = &(*_1073);
        _1071 = move _1072 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1072);
        _2680 = const false;
        _1069 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _1070, move _1071) -> [return: bb519, unwind: bb1632];
    }

    bb519: {
        _2679 = const true;
        StorageDead(_1071);
        _2680 = const false;
        StorageDead(_1070);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        StorageLive(_1101);
        _3164 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1101 = &(*_3164);
        _1100 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1101) -> [return: bb520, unwind: bb1630];
    }

    bb520: {
        StorageDead(_1101);
        StorageLive(_1102);
        StorageLive(_1103);
        _2606 = deref_copy (_1100.3: &anchor_lang::prelude::Pubkey);
        _1103 = &(*_2606);
        StorageLive(_1104);
        StorageLive(_1105);
        _1105 = <Token2022 as anchor_lang::Id>::id() -> [return: bb521, unwind: bb1452];
    }

    bb521: {
        _1104 = &_1105;
        _1102 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1103, move _1104) -> [return: bb522, unwind: bb1452];
    }

    bb522: {
        switchInt(move _1102) -> [0: bb551, otherwise: bb523];
    }

    bb523: {
        StorageDead(_1105);
        StorageDead(_1104);
        StorageDead(_1103);
        StorageLive(_1106);
        StorageLive(_1107);
        StorageLive(_1108);
        StorageLive(_1109);
        _1109 = &_1100;
        _1108 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _1109) -> [return: bb524, unwind: bb1452];
    }

    bb524: {
        StorageDead(_1109);
        _1107 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1108) -> [return: bb525, unwind: bb1452];
    }

    bb525: {
        StorageDead(_1108);
        _1110 = discriminant(_1107);
        switchInt(move _1110) -> [0: bb526, 1: bb527, otherwise: bb5];
    }

    bb526: {
        StorageLive(_1114);
        _1114 = move ((_1107 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _1106 = move _1114;
        StorageDead(_1114);
        _2794 = discriminant(_1107);
        StorageDead(_1107);
        StorageLive(_1115);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        StorageLive(_1120);
        StorageLive(_1121);
        _1121 = &_1106;
        _1120 = &(*_1121);
        _1119 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1120) -> [return: bb529, unwind: bb1451];
    }

    bb527: {
        StorageLive(_1111);
        _1111 = move ((_1107 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1113);
        _1113 = move _1111;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1113) -> [return: bb528, unwind: bb1628];
    }

    bb528: {
        StorageDead(_1113);
        StorageDead(_1111);
        _2976 = discriminant(_1107);
        StorageDead(_1107);
        goto -> bb1315;
    }

    bb529: {
        _2607 = deref_copy (*_1119);
        _1118 = &(*_2607);
        StorageDead(_1120);
        _1117 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _1118) -> [return: bb530, unwind: bb1451];
    }

    bb530: {
        StorageDead(_1118);
        _1116 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1117) -> [return: bb531, unwind: bb1451];
    }

    bb531: {
        StorageDead(_1117);
        _1122 = discriminant(_1116);
        switchInt(move _1122) -> [0: bb532, 1: bb533, otherwise: bb5];
    }

    bb532: {
        StorageLive(_1126);
        _1126 = move ((_1116 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _1115 = move _1126;
        StorageDead(_1126);
        _2796 = discriminant(_1116);
        StorageDead(_1121);
        StorageDead(_1119);
        StorageDead(_1116);
        StorageLive(_1127);
        StorageLive(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        _1130 = &_1115;
        _1129 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _1130) -> [return: bb535, unwind: bb1451];
    }

    bb533: {
        StorageLive(_1123);
        _1123 = move ((_1116 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1125);
        _1125 = move _1123;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1125) -> [return: bb534, unwind: bb1627];
    }

    bb534: {
        StorageDead(_1125);
        StorageDead(_1123);
        _2974 = discriminant(_1116);
        StorageDead(_1121);
        StorageDead(_1119);
        StorageDead(_1116);
        goto -> bb1314;
    }

    bb535: {
        StorageDead(_1130);
        _1128 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1129) -> [return: bb536, unwind: bb1451];
    }

    bb536: {
        StorageDead(_1129);
        _1131 = discriminant(_1128);
        switchInt(move _1131) -> [0: bb537, 1: bb538, otherwise: bb5];
    }

    bb537: {
        StorageLive(_1135);
        _1135 = move ((_1128 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _1127 = move _1135;
        StorageDead(_1135);
        _2798 = discriminant(_1128);
        StorageDead(_1128);
        StorageLive(_1136);
        StorageLive(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        _1140 = &_1127;
        _1139 = &(*_1140);
        _1138 = <Vec<ExtensionType> as Deref>::deref(move _1139) -> [return: bb540, unwind: bb1450];
    }

    bb538: {
        StorageLive(_1132);
        _1132 = move ((_1128 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1134);
        _1134 = move _1132;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1134) -> [return: bb539, unwind: bb1626];
    }

    bb539: {
        StorageDead(_1134);
        StorageDead(_1132);
        _2972 = discriminant(_1128);
        StorageDead(_1128);
        StorageDead(_1127);
        goto -> bb1314;
    }

    bb540: {
        _1137 = &(*_1138);
        StorageDead(_1139);
        _1136 = ExtensionType::get_required_init_account_extensions(move _1137) -> [return: bb541, unwind: bb1450];
    }

    bb541: {
        StorageDead(_1137);
        StorageDead(_1140);
        StorageDead(_1138);
        StorageLive(_1141);
        StorageLive(_1142);
        StorageLive(_1143);
        StorageLive(_1144);
        StorageLive(_1145);
        StorageLive(_1146);
        _1146 = &_1136;
        _1145 = &(*_1146);
        _1144 = <Vec<ExtensionType> as Deref>::deref(move _1145) -> [return: bb542, unwind: bb1449];
    }

    bb542: {
        _1143 = &(*_1144);
        StorageDead(_1145);
        _1142 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _1143) -> [return: bb543, unwind: bb1449];
    }

    bb543: {
        StorageDead(_1143);
        _1141 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1142) -> [return: bb544, unwind: bb1449];
    }

    bb544: {
        _2678 = const true;
        StorageDead(_1142);
        _1147 = discriminant(_1141);
        switchInt(move _1147) -> [0: bb545, 1: bb546, otherwise: bb5];
    }

    bb545: {
        StorageLive(_1151);
        _1151 = ((_1141 as Continue).0: usize);
        _1099 = _1151;
        StorageDead(_1151);
        drop(_1136) -> [return: bb548, unwind: bb1447];
    }

    bb546: {
        StorageLive(_1148);
        _1148 = move ((_1141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1150);
        _1150 = move _1148;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1150) -> [return: bb547, unwind: bb1446];
    }

    bb547: {
        StorageDead(_1150);
        StorageDead(_1148);
        drop(_1136) -> [return: bb1311, unwind: bb1447];
    }

    bb548: {
        StorageDead(_1136);
        drop(_1127) -> [return: bb549, unwind: bb1448];
    }

    bb549: {
        StorageDead(_1127);
        StorageDead(_1115);
        drop(_1106) -> [return: bb550, unwind: bb1625];
    }

    bb550: {
        StorageDead(_1106);
        _2800 = discriminant(_1141);
        StorageDead(_1146);
        StorageDead(_1144);
        _2678 = const false;
        StorageDead(_1141);
        goto -> bb552;
    }

    bb551: {
        StorageDead(_1105);
        StorageDead(_1104);
        StorageDead(_1103);
        _1099 = const _;
        goto -> bb552;
    }

    bb552: {
        StorageDead(_1102);
        drop(_1100) -> [return: bb553, unwind: bb1630];
    }

    bb553: {
        StorageDead(_1100);
        _1098 = move _1099 as u64 (IntToInt);
        StorageDead(_1099);
        _2679 = const false;
        _1068 = anchor_lang::system_program::allocate(move _1069, move _1098) -> [return: bb554, unwind: bb1630];
    }

    bb554: {
        StorageDead(_1098);
        _2679 = const false;
        StorageDead(_1069);
        _1067 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1068) -> [return: bb555, unwind: bb1634];
    }

    bb555: {
        StorageDead(_1068);
        _1152 = discriminant(_1067);
        switchInt(move _1152) -> [0: bb556, 1: bb557, otherwise: bb5];
    }

    bb556: {
        StorageLive(_1156);
        _1156 = ((_1067 as Continue).0: ());
        _1066 = _1156;
        StorageDead(_1156);
        _2802 = discriminant(_1067);
        StorageDead(_1094);
        StorageDead(_1092);
        StorageDead(_1091);
        StorageDead(_1088);
        StorageDead(_1086);
        StorageDead(_1083);
        StorageDead(_1081);
        StorageDead(_1079);
        StorageDead(_1077);
        StorageDead(_1076);
        StorageDead(_1074);
        StorageDead(_1073);
        StorageDead(_1067);
        StorageDead(_1066);
        StorageLive(_1157);
        StorageLive(_1158);
        StorageLive(_1159);
        _1159 = &(*_102);
        _1158 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1159) -> [return: bb559, unwind: bb1634];
    }

    bb557: {
        StorageLive(_1153);
        _1153 = move ((_1067 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1155);
        _1155 = move _1153;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1155) -> [return: bb558, unwind: bb1624];
    }

    bb558: {
        StorageDead(_1155);
        StorageDead(_1153);
        _2968 = discriminant(_1067);
        goto -> bb1319;
    }

    bb559: {
        StorageDead(_1159);
        _2677 = const true;
        _1157 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _1158 };
        StorageDead(_1158);
        StorageLive(_1160);
        StorageLive(_1161);
        StorageLive(_1162);
        _1162 = &_201;
        _1161 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1162) -> [return: bb560, unwind: bb1623];
    }

    bb560: {
        StorageDead(_1162);
        StorageLive(_1163);
        _2677 = const false;
        _1163 = move _1157;
        _1160 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _1161, move _1163) -> [return: bb561, unwind: bb1623];
    }

    bb561: {
        StorageDead(_1163);
        StorageDead(_1161);
        StorageLive(_1164);
        StorageLive(_1165);
        StorageLive(_1166);
        StorageLive(_1167);
        StorageLive(_1168);
        _2676 = const true;
        _1168 = move _1160;
        StorageLive(_1169);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        StorageLive(_1173);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        StorageLive(_1178);
        StorageLive(_1179);
        StorageLive(_1180);
        StorageLive(_1181);
        StorageLive(_1182);
        _1182 = &_21;
        _1181 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1182) -> [return: bb562, unwind: bb1621];
    }

    bb562: {
        _1180 = &_1181;
        StorageDead(_1182);
        _1179 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1180) -> [return: bb563, unwind: bb1621];
    }

    bb563: {
        _1178 = &(*_1179);
        StorageDead(_1180);
        StorageLive(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        StorageLive(_1187);
        _3165 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1187 = &(*_3165);
        _1186 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1187) -> [return: bb564, unwind: bb1621];
    }

    bb564: {
        _1185 = &_1186;
        StorageDead(_1187);
        _1184 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1185) -> [return: bb565, unwind: bb1621];
    }

    bb565: {
        _1183 = &(*_1184);
        StorageDead(_1185);
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        StorageLive(_1192);
        StorageLive(_1193);
        _1193 = _786;
        _1192 = [move _1193];
        _1191 = &_1192;
        StorageDead(_1193);
        StorageLive(_1194);
        _1194 = RangeFull;
        _1190 = <[u8; 1] as Index<RangeFull>>::index(move _1191, move _1194) -> [return: bb566, unwind: bb1621];
    }

    bb566: {
        StorageDead(_1194);
        StorageDead(_1191);
        _1189 = &(*_1190);
        _1188 = &(*_1189);
        _1177 = [const _, move _1178, move _1183, move _1188];
        _1176 = &_1177;
        StorageDead(_1188);
        StorageDead(_1183);
        StorageDead(_1178);
        StorageLive(_1195);
        _1195 = RangeFull;
        _1175 = <[&[u8]; 4] as Index<RangeFull>>::index(move _1176, move _1195) -> [return: bb567, unwind: bb1621];
    }

    bb567: {
        StorageDead(_1195);
        StorageDead(_1176);
        _1174 = &(*_1175);
        _1173 = &(*_1174);
        _1172 = [move _1173];
        StorageDead(_1173);
        _1171 = &_1172;
        _1170 = &(*_1171);
        _1169 = move _1170 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1170);
        _2676 = const false;
        _1167 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _1168, move _1169) -> [return: bb568, unwind: bb1621];
    }

    bb568: {
        _2675 = const true;
        StorageDead(_1169);
        _2676 = const false;
        StorageDead(_1168);
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        StorageLive(_1199);
        StorageLive(_1200);
        StorageLive(_1201);
        _1201 = &_171;
        _1200 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1201) -> [return: bb569, unwind: bb1619];
    }

    bb569: {
        _1199 = &(*_1200);
        StorageDead(_1201);
        _1198 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1199) -> [return: bb570, unwind: bb1619];
    }

    bb570: {
        StorageDead(_1199);
        _1197 = &_1198;
        _1196 = &(*_1197);
        _2675 = const false;
        _1166 = anchor_lang::system_program::assign(move _1167, move _1196) -> [return: bb571, unwind: bb1619];
    }

    bb571: {
        StorageDead(_1196);
        _2675 = const false;
        StorageDead(_1167);
        _1165 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1166) -> [return: bb572, unwind: bb1623];
    }

    bb572: {
        StorageDead(_1166);
        _1202 = discriminant(_1165);
        switchInt(move _1202) -> [0: bb573, 1: bb574, otherwise: bb5];
    }

    bb573: {
        StorageLive(_1206);
        _1206 = ((_1165 as Continue).0: ());
        _1164 = _1206;
        StorageDead(_1206);
        _2804 = discriminant(_1165);
        StorageDead(_1200);
        StorageDead(_1198);
        StorageDead(_1197);
        StorageDead(_1192);
        StorageDead(_1190);
        StorageDead(_1189);
        StorageDead(_1186);
        StorageDead(_1184);
        StorageDead(_1181);
        StorageDead(_1179);
        StorageDead(_1177);
        StorageDead(_1175);
        StorageDead(_1174);
        StorageDead(_1172);
        StorageDead(_1171);
        StorageDead(_1165);
        StorageDead(_1164);
        _836 = const ();
        StorageDead(_1160);
        _2677 = const false;
        StorageDead(_1157);
        StorageDead(_1062);
        _2681 = const false;
        StorageDead(_1059);
        StorageDead(_979);
        goto -> bb576;
    }

    bb574: {
        StorageLive(_1203);
        _1203 = move ((_1165 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1205);
        _1205 = move _1203;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1205) -> [return: bb575, unwind: bb1617];
    }

    bb575: {
        StorageDead(_1205);
        StorageDead(_1203);
        _2966 = discriminant(_1165);
        StorageDead(_1200);
        StorageDead(_1198);
        StorageDead(_1197);
        StorageDead(_1192);
        StorageDead(_1190);
        StorageDead(_1189);
        StorageDead(_1186);
        StorageDead(_1184);
        StorageDead(_1181);
        StorageDead(_1179);
        StorageDead(_1177);
        StorageDead(_1175);
        StorageDead(_1174);
        StorageDead(_1172);
        StorageDead(_1171);
        StorageDead(_1165);
        StorageDead(_1164);
        StorageDead(_1160);
        _2677 = const false;
        StorageDead(_1157);
        goto -> bb1320;
    }

    bb576: {
        StorageDead(_837);
        StorageDead(_836);
        StorageLive(_1207);
        StorageLive(_1208);
        _1208 = &_171;
        _1207 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1208) -> [return: bb577, unwind: bb1472];
    }

    bb577: {
        _2674 = const true;
        StorageDead(_1208);
        StorageLive(_1209);
        StorageLive(_1210);
        StorageLive(_1211);
        _1211 = &(*_102);
        _1210 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1211) -> [return: bb578, unwind: bb1616];
    }

    bb578: {
        StorageDead(_1211);
        StorageLive(_1212);
        StorageLive(_1213);
        _3166 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1213 = &(*_3166);
        _1212 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1213) -> [return: bb579, unwind: bb1445];
    }

    bb579: {
        StorageDead(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        _1215 = &_36;
        _1214 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1215) -> [return: bb580, unwind: bb1444];
    }

    bb580: {
        StorageDead(_1215);
        _1209 = anchor_spl::token_2022::InitializeAccount3::<'_> { account: move _1210, mint: move _1212, authority: move _1214 };
        StorageDead(_1214);
        StorageDead(_1212);
        StorageDead(_1210);
        StorageLive(_1216);
        StorageLive(_1217);
        _2674 = const false;
        _1217 = move _1207;
        StorageLive(_1218);
        _1218 = move _1209;
        _1216 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>::new(move _1217, move _1218) -> [return: bb581, unwind: bb1616];
    }

    bb581: {
        StorageDead(_1218);
        StorageDead(_1217);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        _1222 = move _1216;
        _1221 = anchor_spl::token_2022::initialize_account3(move _1222) -> [return: bb582, unwind: bb1616];
    }

    bb582: {
        StorageDead(_1222);
        _1220 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1221) -> [return: bb583, unwind: bb1616];
    }

    bb583: {
        StorageDead(_1221);
        _1223 = discriminant(_1220);
        switchInt(move _1223) -> [0: bb584, 1: bb585, otherwise: bb5];
    }

    bb584: {
        StorageLive(_1227);
        _1227 = ((_1220 as Continue).0: ());
        _1219 = _1227;
        StorageDead(_1227);
        _2806 = discriminant(_1220);
        StorageDead(_1220);
        StorageDead(_1219);
        _827 = const ();
        StorageDead(_1216);
        StorageDead(_1209);
        _2674 = const false;
        StorageDead(_1207);
        StorageDead(_834);
        goto -> bb588;
    }

    bb585: {
        StorageLive(_1224);
        _1224 = move ((_1220 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1226);
        _1226 = move _1224;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1226) -> [return: bb586, unwind: bb1614];
    }

    bb586: {
        StorageDead(_1226);
        StorageDead(_1224);
        _2964 = discriminant(_1220);
        StorageDead(_1220);
        StorageDead(_1219);
        StorageDead(_1216);
        StorageDead(_1209);
        _2674 = const false;
        StorageDead(_1207);
        goto -> bb1338;
    }

    bb587: {
        StorageDead(_831);
        StorageDead(_830);
        _827 = const ();
        goto -> bb588;
    }

    bb588: {
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_827);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        StorageLive(_1231);
        StorageLive(_1232);
        _1232 = &_102;
        _2608 = deref_copy (*_1232);
        _1231 = &(*_2608);
        _1230 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::try_from_unchecked(move _1231) -> [return: bb589, unwind: bb1472];
    }

    bb589: {
        _2672 = const true;
        _2673 = const true;
        StorageDead(_1231);
        _1233 = discriminant(_1230);
        switchInt(move _1233) -> [0: bb591, 1: bb590, otherwise: bb5];
    }

    bb590: {
        StorageLive(_1235);
        _1235 = move ((_1230 as Err).0: anchor_lang::error::Error);
        StorageLive(_1237);
        StorageLive(_1238);
        _1238 = move _1235;
        _1237 = anchor_lang::error::Error::with_account_name::<&str>(move _1238, const "fee_receiver") -> [return: bb592, unwind: bb1613];
    }

    bb591: {
        StorageLive(_1234);
        _1234 = move ((_1230 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1229 = move _1234;
        StorageDead(_1234);
        _1228 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>::new(move _1229) -> [return: bb593, unwind: bb1613];
    }

    bb592: {
        StorageDead(_1238);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1237);
        StorageDead(_1237);
        StorageDead(_1235);
        StorageDead(_1229);
        _2962 = discriminant(_1230);
        StorageDead(_1232);
        _2672 = const false;
        _2673 = const false;
        StorageDead(_1230);
        goto -> bb1310;
    }

    bb593: {
        StorageDead(_1229);
        _2808 = discriminant(_1230);
        StorageDead(_1232);
        _2672 = const false;
        _2673 = const false;
        StorageDead(_1230);
        StorageLive(_1239);
        StorageLive(_1240);
        _1240 = const false;
        switchInt(move _1240) -> [0: bb629, otherwise: bb594];
    }

    bb594: {
        StorageLive(_1241);
        StorageLive(_1242);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        _3167 = (((_1228.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1247 = &(*_3167);
        _1246 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1247) -> [return: bb595, unwind: bb1443];
    }

    bb595: {
        _1245 = &(*_1246);
        _1244 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1245) -> [return: bb596, unwind: bb1443];
    }

    bb596: {
        StorageDead(_1247);
        StorageDead(_1245);
        _1243 = &((*_1244).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1248);
        StorageLive(_1249);
        StorageLive(_1250);
        _3168 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1250 = &(*_3168);
        _1249 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1250) -> [return: bb597, unwind: bb1443];
    }

    bb597: {
        _1248 = &_1249;
        StorageDead(_1250);
        _1242 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1243, move _1248) -> [return: bb598, unwind: bb1443];
    }

    bb598: {
        switchInt(move _1242) -> [0: bb606, otherwise: bb599];
    }

    bb599: {
        StorageDead(_1249);
        StorageDead(_1248);
        StorageDead(_1246);
        StorageDead(_1244);
        StorageDead(_1243);
        StorageLive(_1252);
        StorageLive(_1253);
        StorageLive(_1254);
        StorageLive(_1255);
        _1255 = ConstraintTokenMint;
        _1254 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1255) -> [return: bb600, unwind: bb1443];
    }

    bb600: {
        StorageDead(_1255);
        _1253 = anchor_lang::error::Error::with_account_name::<&str>(move _1254, const "fee_receiver") -> [return: bb601, unwind: bb1443];
    }

    bb601: {
        _2671 = const true;
        StorageDead(_1254);
        StorageLive(_1256);
        StorageLive(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        StorageLive(_1260);
        StorageLive(_1261);
        _3169 = (((_1228.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1261 = &(*_3169);
        _1260 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1261) -> [return: bb602, unwind: bb1612];
    }

    bb602: {
        _1259 = &(*_1260);
        _1258 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1259) -> [return: bb603, unwind: bb1612];
    }

    bb603: {
        StorageDead(_1261);
        StorageDead(_1259);
        _1257 = ((*_1258).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1262);
        StorageLive(_1263);
        _3170 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1263 = &(*_3170);
        _1262 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1263) -> [return: bb604, unwind: bb1612];
    }

    bb604: {
        StorageDead(_1263);
        _1256 = (move _1257, move _1262);
        StorageDead(_1262);
        StorageDead(_1257);
        _2671 = const false;
        _1252 = anchor_lang::error::Error::with_pubkeys(move _1253, move _1256) -> [return: bb605, unwind: bb1612];
    }

    bb605: {
        StorageDead(_1256);
        _2671 = const false;
        StorageDead(_1253);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1252);
        StorageDead(_1252);
        StorageDead(_1260);
        StorageDead(_1258);
        StorageDead(_1242);
        StorageDead(_1241);
        goto -> bb1309;
    }

    bb606: {
        StorageDead(_1249);
        StorageDead(_1248);
        StorageDead(_1246);
        StorageDead(_1244);
        StorageDead(_1243);
        _1241 = const ();
        StorageDead(_1242);
        StorageDead(_1241);
        StorageLive(_1264);
        StorageLive(_1265);
        StorageLive(_1266);
        StorageLive(_1267);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        _3171 = (((_1228.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1270 = &(*_3171);
        _1269 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1270) -> [return: bb607, unwind: bb1443];
    }

    bb607: {
        _1268 = &(*_1269);
        _1267 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1268) -> [return: bb608, unwind: bb1443];
    }

    bb608: {
        StorageDead(_1270);
        StorageDead(_1268);
        _1266 = &((*_1267).1: anchor_lang::prelude::Pubkey);
        StorageLive(_1271);
        StorageLive(_1272);
        StorageLive(_1273);
        _1273 = &_36;
        _1272 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1273) -> [return: bb609, unwind: bb1443];
    }

    bb609: {
        _1271 = &_1272;
        StorageDead(_1273);
        _1265 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1266, move _1271) -> [return: bb610, unwind: bb1443];
    }

    bb610: {
        switchInt(move _1265) -> [0: bb618, otherwise: bb611];
    }

    bb611: {
        StorageDead(_1272);
        StorageDead(_1271);
        StorageDead(_1269);
        StorageDead(_1267);
        StorageDead(_1266);
        StorageLive(_1275);
        StorageLive(_1276);
        StorageLive(_1277);
        StorageLive(_1278);
        _1278 = ConstraintTokenOwner;
        _1277 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1278) -> [return: bb612, unwind: bb1443];
    }

    bb612: {
        StorageDead(_1278);
        _1276 = anchor_lang::error::Error::with_account_name::<&str>(move _1277, const "fee_receiver") -> [return: bb613, unwind: bb1443];
    }

    bb613: {
        _2670 = const true;
        StorageDead(_1277);
        StorageLive(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        _3172 = (((_1228.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1284 = &(*_3172);
        _1283 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1284) -> [return: bb614, unwind: bb1610];
    }

    bb614: {
        _1282 = &(*_1283);
        _1281 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1282) -> [return: bb615, unwind: bb1610];
    }

    bb615: {
        StorageDead(_1284);
        StorageDead(_1282);
        _1280 = ((*_1281).1: anchor_lang::prelude::Pubkey);
        StorageLive(_1285);
        StorageLive(_1286);
        _1286 = &_36;
        _1285 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1286) -> [return: bb616, unwind: bb1610];
    }

    bb616: {
        StorageDead(_1286);
        _1279 = (move _1280, move _1285);
        StorageDead(_1285);
        StorageDead(_1280);
        _2670 = const false;
        _1275 = anchor_lang::error::Error::with_pubkeys(move _1276, move _1279) -> [return: bb617, unwind: bb1610];
    }

    bb617: {
        StorageDead(_1279);
        _2670 = const false;
        StorageDead(_1276);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1275);
        StorageDead(_1275);
        StorageDead(_1283);
        StorageDead(_1281);
        StorageDead(_1265);
        StorageDead(_1264);
        goto -> bb1309;
    }

    bb618: {
        StorageDead(_1272);
        StorageDead(_1271);
        StorageDead(_1269);
        StorageDead(_1267);
        StorageDead(_1266);
        _1264 = const ();
        StorageDead(_1265);
        StorageDead(_1264);
        StorageLive(_1287);
        StorageLive(_1288);
        _1288 = &_822;
        StorageLive(_1289);
        StorageLive(_1290);
        StorageLive(_1291);
        StorageLive(_1292);
        StorageLive(_1293);
        StorageLive(_1294);
        _1294 = &_171;
        _1293 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1294) -> [return: bb619, unwind: bb1443];
    }

    bb619: {
        _1292 = &(*_1293);
        StorageDead(_1294);
        _1291 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1292) -> [return: bb620, unwind: bb1443];
    }

    bb620: {
        StorageDead(_1292);
        _1290 = &_1291;
        _1289 = &_1290;
        _1287 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1288, move _1289) -> [return: bb621, unwind: bb1443];
    }

    bb621: {
        switchInt(move _1287) -> [0: bb628, otherwise: bb622];
    }

    bb622: {
        StorageDead(_1293);
        StorageDead(_1291);
        StorageDead(_1290);
        StorageDead(_1289);
        StorageDead(_1288);
        StorageLive(_1296);
        StorageLive(_1297);
        StorageLive(_1298);
        StorageLive(_1299);
        _1299 = ConstraintTokenTokenProgram;
        _1298 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1299) -> [return: bb623, unwind: bb1443];
    }

    bb623: {
        StorageDead(_1299);
        _1297 = anchor_lang::error::Error::with_account_name::<&str>(move _1298, const "fee_receiver") -> [return: bb624, unwind: bb1443];
    }

    bb624: {
        _2669 = const true;
        StorageDead(_1298);
        StorageLive(_1300);
        StorageLive(_1301);
        _1301 = (*_822);
        StorageLive(_1302);
        StorageLive(_1303);
        StorageLive(_1304);
        StorageLive(_1305);
        _1305 = &_171;
        _1304 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1305) -> [return: bb625, unwind: bb1608];
    }

    bb625: {
        _1303 = &(*_1304);
        StorageDead(_1305);
        _1302 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1303) -> [return: bb626, unwind: bb1608];
    }

    bb626: {
        StorageDead(_1303);
        _1300 = (move _1301, move _1302);
        StorageDead(_1302);
        StorageDead(_1301);
        _2669 = const false;
        _1296 = anchor_lang::error::Error::with_pubkeys(move _1297, move _1300) -> [return: bb627, unwind: bb1608];
    }

    bb627: {
        StorageDead(_1300);
        _2669 = const false;
        StorageDead(_1297);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1296);
        StorageDead(_1296);
        StorageDead(_1304);
        StorageDead(_1287);
        goto -> bb1309;
    }

    bb628: {
        StorageDead(_1293);
        StorageDead(_1291);
        StorageDead(_1290);
        StorageDead(_1289);
        StorageDead(_1288);
        _1239 = const ();
        StorageDead(_1287);
        goto -> bb630;
    }

    bb629: {
        _1239 = const ();
        goto -> bb630;
    }

    bb630: {
        StorageDead(_1240);
        StorageDead(_1239);
        _821 = move _1228;
        StorageDead(_1228);
        StorageDead(_822);
        StorageLive(_1306);
        StorageLive(_1307);
        StorageLive(_1308);
        StorageLive(_1309);
        StorageLive(_1310);
        StorageLive(_1311);
        _1311 = &_821;
        _1310 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _1311) -> [return: bb631, unwind: bb1442];
    }

    bb631: {
        _1309 = &(*_1310);
        StorageDead(_1311);
        _1308 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1309) -> [return: bb632, unwind: bb1442];
    }

    bb632: {
        StorageDead(_1309);
        _1307 = ((*_1308).6: bool);
        switchInt(move _1307) -> [0: bb633, otherwise: bb636];
    }

    bb633: {
        StorageDead(_1310);
        StorageDead(_1308);
        StorageLive(_1313);
        StorageLive(_1314);
        StorageLive(_1315);
        _1315 = ConstraintMut;
        _1314 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1315) -> [return: bb634, unwind: bb1442];
    }

    bb634: {
        StorageDead(_1315);
        _1313 = anchor_lang::error::Error::with_account_name::<&str>(move _1314, const "fee_receiver") -> [return: bb635, unwind: bb1442];
    }

    bb635: {
        StorageDead(_1314);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1313);
        StorageDead(_1313);
        StorageDead(_1307);
        StorageDead(_1306);
        goto -> bb1308;
    }

    bb636: {
        StorageDead(_1310);
        StorageDead(_1308);
        _1306 = const ();
        StorageDead(_1307);
        StorageDead(_1306);
        StorageLive(_1316);
        StorageLive(_1317);
        StorageLive(_1318);
        _1318 = &_777;
        StorageLive(_1319);
        StorageLive(_1320);
        StorageLive(_1321);
        StorageLive(_1322);
        _3173 = (((_821.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1322 = &(*_3173);
        _1321 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1322) -> [return: bb637, unwind: bb1442];
    }

    bb637: {
        _1320 = &_1321;
        StorageDead(_1322);
        _1319 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1320) -> [return: bb638, unwind: bb1441];
    }

    bb638: {
        StorageDead(_1320);
        StorageLive(_1323);
        StorageLive(_1324);
        StorageLive(_1325);
        StorageLive(_1326);
        StorageLive(_1327);
        StorageLive(_1328);
        _3174 = (((_821.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1328 = &(*_3174);
        _1327 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1328) -> [return: bb639, unwind: bb1441];
    }

    bb639: {
        _1326 = &_1327;
        StorageDead(_1328);
        _1325 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _1326) -> [return: bb640, unwind: bb1440];
    }

    bb640: {
        StorageDead(_1326);
        _1324 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1325) -> [return: bb641, unwind: bb1440];
    }

    bb641: {
        _2668 = const true;
        StorageDead(_1325);
        _1329 = discriminant(_1324);
        switchInt(move _1329) -> [0: bb642, 1: bb643, otherwise: bb5];
    }

    bb642: {
        StorageLive(_1333);
        _1333 = ((_1324 as Continue).0: usize);
        _1323 = _1333;
        StorageDead(_1333);
        _1317 = anchor_lang::prelude::Rent::is_exempt(move _1318, move _1319, move _1323) -> [return: bb645, unwind: bb1606];
    }

    bb643: {
        StorageLive(_1330);
        _1330 = move ((_1324 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1332);
        _1332 = move _1330;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1332) -> [return: bb644, unwind: bb1606];
    }

    bb644: {
        StorageDead(_1332);
        StorageDead(_1330);
        StorageDead(_1323);
        StorageDead(_1319);
        StorageDead(_1318);
        _2960 = discriminant(_1324);
        drop(_1327) -> [return: bb1305, unwind: bb1441];
    }

    bb645: {
        switchInt(move _1317) -> [0: bb647, otherwise: bb646];
    }

    bb646: {
        StorageDead(_1323);
        StorageDead(_1319);
        StorageDead(_1318);
        _2810 = discriminant(_1324);
        drop(_1327) -> [return: bb652, unwind: bb1441];
    }

    bb647: {
        StorageDead(_1323);
        StorageDead(_1319);
        StorageDead(_1318);
        _2812 = discriminant(_1324);
        drop(_1327) -> [return: bb648, unwind: bb1441];
    }

    bb648: {
        StorageDead(_1327);
        _2668 = const false;
        StorageDead(_1324);
        drop(_1321) -> [return: bb649, unwind: bb1442];
    }

    bb649: {
        StorageDead(_1321);
        StorageLive(_1335);
        StorageLive(_1336);
        StorageLive(_1337);
        _1337 = ConstraintRentExempt;
        _1336 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1337) -> [return: bb650, unwind: bb1442];
    }

    bb650: {
        StorageDead(_1337);
        _1335 = anchor_lang::error::Error::with_account_name::<&str>(move _1336, const "fee_receiver") -> [return: bb651, unwind: bb1442];
    }

    bb651: {
        StorageDead(_1336);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1335);
        StorageDead(_1335);
        goto -> bb1307;
    }

    bb652: {
        StorageDead(_1327);
        _2668 = const false;
        StorageDead(_1324);
        drop(_1321) -> [return: bb653, unwind: bb1442];
    }

    bb653: {
        StorageDead(_1321);
        _1316 = const ();
        StorageDead(_1317);
        StorageDead(_1316);
        StorageLive(_1338);
        StorageLive(_1339);
        StorageLive(_1340);
        _1340 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb654, unwind: bb1442];
    }

    bb654: {
        _1339 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _1340) -> [return: bb655, unwind: bb1442];
    }

    bb655: {
        StorageDead(_1340);
        _1341 = discriminant(_1339);
        switchInt(move _1341) -> [0: bb656, 1: bb657, otherwise: bb5];
    }

    bb656: {
        StorageLive(_1345);
        _1345 = ((_1339 as Continue).0: anchor_lang::prelude::Rent);
        _1338 = _1345;
        StorageDead(_1345);
        _2814 = discriminant(_1339);
        StorageDead(_1339);
        StorageLive(_1348);
        StorageLive(_1349);
        StorageLive(_1350);
        StorageLive(_1351);
        StorageLive(_1352);
        StorageLive(_1353);
        StorageLive(_1354);
        _1354 = const _;
        _1353 = &(*_1354);
        StorageLive(_1355);
        StorageLive(_1356);
        StorageLive(_1357);
        StorageLive(_1358);
        StorageLive(_1359);
        _1359 = &_21;
        _1358 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1359) -> [return: bb659, unwind: bb1442];
    }

    bb657: {
        StorageLive(_1342);
        _1342 = move ((_1339 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1344);
        _1344 = move _1342;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1344) -> [return: bb658, unwind: bb1605];
    }

    bb658: {
        StorageDead(_1344);
        StorageDead(_1342);
        _2958 = discriminant(_1339);
        StorageDead(_1339);
        goto -> bb1304;
    }

    bb659: {
        _1357 = &_1358;
        StorageDead(_1359);
        _1356 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1357) -> [return: bb660, unwind: bb1442];
    }

    bb660: {
        _1355 = &(*_1356);
        StorageDead(_1357);
        StorageLive(_1360);
        StorageLive(_1361);
        StorageLive(_1362);
        StorageLive(_1363);
        StorageLive(_1364);
        _3175 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1364 = &(*_3175);
        _1363 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1364) -> [return: bb661, unwind: bb1442];
    }

    bb661: {
        _1362 = &_1363;
        StorageDead(_1364);
        _1361 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1362) -> [return: bb662, unwind: bb1442];
    }

    bb662: {
        _1360 = &(*_1361);
        StorageDead(_1362);
        _1352 = [move _1353, move _1355, move _1360];
        StorageDead(_1360);
        StorageDead(_1355);
        StorageDead(_1353);
        _1351 = &_1352;
        _1350 = &(*_1351);
        _1349 = move _1350 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1350);
        StorageLive(_1365);
        _1365 = &(*_1);
        _1348 = anchor_lang::prelude::Pubkey::find_program_address(move _1349, move _1365) -> [return: bb663, unwind: bb1442];
    }

    bb663: {
        StorageDead(_1365);
        StorageDead(_1349);
        StorageLive(_1346);
        _1346 = (_1348.0: anchor_lang::prelude::Pubkey);
        StorageLive(_1347);
        _1347 = (_1348.1: u8);
        StorageDead(_1363);
        StorageDead(_1361);
        StorageDead(_1358);
        StorageDead(_1356);
        StorageDead(_1354);
        StorageDead(_1352);
        StorageDead(_1351);
        StorageDead(_1348);
        StorageLive(_1366);
        _1366 = _1347;
        ((*_4).2: u8) = move _1366;
        StorageDead(_1366);
        StorageLive(_1367);
        StorageLive(_1368);
        StorageLive(_1369);
        StorageLive(_1370);
        StorageLive(_1371);
        _1371 = &(*_117);
        _1370 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1371) -> [return: bb664, unwind: bb1442];
    }

    bb664: {
        _1369 = &_1370;
        StorageDead(_1371);
        StorageLive(_1372);
        _1372 = &_1346;
        _1368 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1369, move _1372) -> [return: bb665, unwind: bb1442];
    }

    bb665: {
        switchInt(move _1368) -> [0: bb671, otherwise: bb666];
    }

    bb666: {
        StorageDead(_1372);
        StorageDead(_1370);
        StorageDead(_1369);
        StorageLive(_1374);
        StorageLive(_1375);
        StorageLive(_1376);
        StorageLive(_1377);
        _1377 = ConstraintSeeds;
        _1376 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1377) -> [return: bb667, unwind: bb1442];
    }

    bb667: {
        StorageDead(_1377);
        _1375 = anchor_lang::error::Error::with_account_name::<&str>(move _1376, const "reserve_collateral_mint") -> [return: bb668, unwind: bb1442];
    }

    bb668: {
        _2667 = const true;
        StorageDead(_1376);
        StorageLive(_1378);
        StorageLive(_1379);
        StorageLive(_1380);
        _1380 = &(*_117);
        _1379 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1380) -> [return: bb669, unwind: bb1604];
    }

    bb669: {
        StorageDead(_1380);
        StorageLive(_1381);
        _1381 = _1346;
        _1378 = (move _1379, move _1381);
        StorageDead(_1381);
        StorageDead(_1379);
        _2667 = const false;
        _1374 = anchor_lang::error::Error::with_pubkeys(move _1375, move _1378) -> [return: bb670, unwind: bb1604];
    }

    bb670: {
        StorageDead(_1378);
        _2667 = const false;
        StorageDead(_1375);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1374);
        StorageDead(_1374);
        StorageDead(_1368);
        StorageDead(_1367);
        goto -> bb1303;
    }

    bb671: {
        StorageDead(_1372);
        StorageDead(_1370);
        StorageDead(_1369);
        _1367 = const ();
        StorageDead(_1368);
        StorageDead(_1367);
        StorageLive(_1382);
        StorageLive(_1383);
        StorageLive(_1384);
        StorageLive(_1385);
        StorageLive(_1386);
        _1386 = &_117;
        _1385 = &(*_1386);
        _1384 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1385) -> [return: bb672, unwind: bb1442];
    }

    bb672: {
        StorageDead(_1385);
        _1383 = ((*_1384).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_1386);
        StorageDead(_1384);
        StorageLive(_1387);
        StorageLive(_1388);
        _1388 = const false;
        switchInt(move _1388) -> [0: bb675, otherwise: bb673];
    }

    bb673: {
        StorageLive(_1389);
        StorageLive(_1390);
        _1390 = &_1383;
        StorageLive(_1391);
        _2568 = const _;
        _1391 = &(*_2568);
        _1389 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1390, move _1391) -> [return: bb674, unwind: bb1442];
    }

    bb674: {
        switchInt(move _1389) -> [0: bb767, otherwise: bb675];
    }

    bb675: {
        StorageDead(_1391);
        StorageDead(_1390);
        StorageLive(_1394);
        StorageLive(_1395);
        _1395 = &(*_117);
        _1394 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1395) -> [return: bb676, unwind: bb1442];
    }

    bb676: {
        StorageDead(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        _1398 = _1394;
        _1397 = Eq(move _1398, const 0_u64);
        switchInt(move _1397) -> [0: bb697, otherwise: bb677];
    }

    bb677: {
        StorageDead(_1398);
        StorageLive(_1399);
        _1399 = const _;
        StorageLive(_1400);
        StorageLive(_1401);
        _1401 = &_1338;
        StorageLive(_1402);
        _1402 = _1399;
        _1400 = anchor_lang::prelude::Rent::minimum_balance(move _1401, move _1402) -> [return: bb678, unwind: bb1442];
    }

    bb678: {
        StorageDead(_1402);
        StorageDead(_1401);
        StorageLive(_1403);
        StorageLive(_1404);
        StorageLive(_1405);
        _1405 = &_6;
        _1404 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1405) -> [return: bb679, unwind: bb1442];
    }

    bb679: {
        StorageDead(_1405);
        StorageLive(_1406);
        StorageLive(_1407);
        _1407 = &(*_117);
        _1406 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1407) -> [return: bb680, unwind: bb1439];
    }

    bb680: {
        StorageDead(_1407);
        _2666 = const true;
        _1403 = anchor_lang::system_program::CreateAccount::<'_> { from: move _1404, to: move _1406 };
        StorageDead(_1406);
        StorageDead(_1404);
        StorageLive(_1408);
        StorageLive(_1409);
        StorageLive(_1410);
        _1410 = &_201;
        _1409 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1410) -> [return: bb681, unwind: bb1602];
    }

    bb681: {
        StorageDead(_1410);
        StorageLive(_1411);
        _2666 = const false;
        _1411 = move _1403;
        _1408 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _1409, move _1411) -> [return: bb682, unwind: bb1602];
    }

    bb682: {
        StorageDead(_1411);
        StorageDead(_1409);
        StorageLive(_1412);
        StorageLive(_1413);
        StorageLive(_1414);
        StorageLive(_1415);
        StorageLive(_1416);
        _2665 = const true;
        _1416 = move _1408;
        StorageLive(_1417);
        StorageLive(_1418);
        StorageLive(_1419);
        StorageLive(_1420);
        StorageLive(_1421);
        StorageLive(_1422);
        StorageLive(_1423);
        StorageLive(_1424);
        StorageLive(_1425);
        StorageLive(_1426);
        StorageLive(_1427);
        StorageLive(_1428);
        StorageLive(_1429);
        StorageLive(_1430);
        _1430 = &_21;
        _1429 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1430) -> [return: bb683, unwind: bb1600];
    }

    bb683: {
        _1428 = &_1429;
        StorageDead(_1430);
        _1427 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1428) -> [return: bb684, unwind: bb1600];
    }

    bb684: {
        _1426 = &(*_1427);
        StorageDead(_1428);
        StorageLive(_1431);
        StorageLive(_1432);
        StorageLive(_1433);
        StorageLive(_1434);
        StorageLive(_1435);
        _3176 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1435 = &(*_3176);
        _1434 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1435) -> [return: bb685, unwind: bb1600];
    }

    bb685: {
        _1433 = &_1434;
        StorageDead(_1435);
        _1432 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1433) -> [return: bb686, unwind: bb1600];
    }

    bb686: {
        _1431 = &(*_1432);
        StorageDead(_1433);
        StorageLive(_1436);
        StorageLive(_1437);
        StorageLive(_1438);
        StorageLive(_1439);
        StorageLive(_1440);
        StorageLive(_1441);
        _1441 = _1347;
        _1440 = [move _1441];
        _1439 = &_1440;
        StorageDead(_1441);
        StorageLive(_1442);
        _1442 = RangeFull;
        _1438 = <[u8; 1] as Index<RangeFull>>::index(move _1439, move _1442) -> [return: bb687, unwind: bb1600];
    }

    bb687: {
        StorageDead(_1442);
        StorageDead(_1439);
        _1437 = &(*_1438);
        _1436 = &(*_1437);
        _1425 = [const _, move _1426, move _1431, move _1436];
        _1424 = &_1425;
        StorageDead(_1436);
        StorageDead(_1431);
        StorageDead(_1426);
        StorageLive(_1443);
        _1443 = RangeFull;
        _1423 = <[&[u8]; 4] as Index<RangeFull>>::index(move _1424, move _1443) -> [return: bb688, unwind: bb1600];
    }

    bb688: {
        StorageDead(_1443);
        StorageDead(_1424);
        _1422 = &(*_1423);
        _1421 = &(*_1422);
        _1420 = [move _1421];
        StorageDead(_1421);
        _1419 = &_1420;
        _1418 = &(*_1419);
        _1417 = move _1418 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1418);
        _2665 = const false;
        _1415 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _1416, move _1417) -> [return: bb689, unwind: bb1600];
    }

    bb689: {
        _2664 = const true;
        StorageDead(_1417);
        _2665 = const false;
        StorageDead(_1416);
        StorageLive(_1444);
        _1444 = _1400;
        StorageLive(_1445);
        StorageLive(_1446);
        _1446 = _1399;
        _1445 = move _1446 as u64 (IntToInt);
        StorageDead(_1446);
        StorageLive(_1447);
        StorageLive(_1448);
        StorageLive(_1449);
        StorageLive(_1450);
        StorageLive(_1451);
        StorageLive(_1452);
        _1452 = &_186;
        _1451 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _1452) -> [return: bb690, unwind: bb1598];
    }

    bb690: {
        _1450 = &(*_1451);
        StorageDead(_1452);
        _1449 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1450) -> [return: bb691, unwind: bb1598];
    }

    bb691: {
        StorageDead(_1450);
        _1448 = &_1449;
        _1447 = &(*_1448);
        _2664 = const false;
        _1414 = anchor_lang::system_program::create_account(move _1415, move _1444, move _1445, move _1447) -> [return: bb692, unwind: bb1598];
    }

    bb692: {
        StorageDead(_1447);
        StorageDead(_1445);
        StorageDead(_1444);
        _2664 = const false;
        StorageDead(_1415);
        _1413 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1414) -> [return: bb693, unwind: bb1602];
    }

    bb693: {
        StorageDead(_1414);
        _1453 = discriminant(_1413);
        switchInt(move _1453) -> [0: bb694, 1: bb695, otherwise: bb5];
    }

    bb694: {
        StorageLive(_1457);
        _1457 = ((_1413 as Continue).0: ());
        _1412 = _1457;
        StorageDead(_1457);
        _2816 = discriminant(_1413);
        StorageDead(_1451);
        StorageDead(_1449);
        StorageDead(_1448);
        StorageDead(_1440);
        StorageDead(_1438);
        StorageDead(_1437);
        StorageDead(_1434);
        StorageDead(_1432);
        StorageDead(_1429);
        StorageDead(_1427);
        StorageDead(_1425);
        StorageDead(_1423);
        StorageDead(_1422);
        StorageDead(_1420);
        StorageDead(_1419);
        StorageDead(_1413);
        StorageDead(_1412);
        _1396 = const ();
        StorageDead(_1408);
        _2666 = const false;
        StorageDead(_1403);
        StorageDead(_1400);
        StorageDead(_1399);
        goto -> bb757;
    }

    bb695: {
        StorageLive(_1454);
        _1454 = move ((_1413 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1456);
        _1456 = move _1454;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1456) -> [return: bb696, unwind: bb1596];
    }

    bb696: {
        StorageDead(_1456);
        StorageDead(_1454);
        _2956 = discriminant(_1413);
        StorageDead(_1451);
        StorageDead(_1449);
        StorageDead(_1448);
        StorageDead(_1440);
        StorageDead(_1438);
        StorageDead(_1437);
        StorageDead(_1434);
        StorageDead(_1432);
        StorageDead(_1429);
        StorageDead(_1427);
        StorageDead(_1425);
        StorageDead(_1423);
        StorageDead(_1422);
        StorageDead(_1420);
        StorageDead(_1419);
        StorageDead(_1413);
        StorageDead(_1412);
        StorageDead(_1408);
        _2666 = const false;
        StorageDead(_1403);
        StorageDead(_1400);
        StorageDead(_1399);
        goto -> bb1299;
    }

    bb697: {
        StorageDead(_1398);
        StorageLive(_1458);
        StorageLive(_1459);
        StorageLive(_1460);
        StorageLive(_1461);
        StorageLive(_1462);
        _1462 = &_6;
        _1461 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1462) -> [return: bb698, unwind: bb1442];
    }

    bb698: {
        _1460 = &_1461;
        StorageDead(_1462);
        StorageLive(_1463);
        StorageLive(_1464);
        StorageLive(_1465);
        _1465 = &(*_117);
        _1464 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1465) -> [return: bb699, unwind: bb1442];
    }

    bb699: {
        _1463 = &_1464;
        StorageDead(_1465);
        _1459 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1460, move _1463) -> [return: bb700, unwind: bb1442];
    }

    bb700: {
        switchInt(move _1459) -> [0: bb709, otherwise: bb701];
    }

    bb701: {
        StorageDead(_1464);
        StorageDead(_1463);
        StorageDead(_1461);
        StorageDead(_1460);
        StorageLive(_1467);
        StorageLive(_1468);
        StorageLive(_1469);
        StorageLive(_1470);
        StorageLive(_1471);
        _2567 = const _;
        _1471 = &(*_2567);
        _1470 = anchor_lang::error::ErrorCode::name(move _1471) -> [return: bb702, unwind: bb1442];
    }

    bb702: {
        StorageDead(_1471);
        StorageLive(_1473);
        StorageLive(_1474);
        _1474 = TryingToInitPayerAsProgramAccount;
        _1473 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _1474) -> [return: bb703, unwind: bb1438];
    }

    bb703: {
        StorageDead(_1474);
        StorageLive(_1475);
        StorageLive(_1476);
        _2566 = const _;
        _1476 = &(*_2566);
        _1475 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _1476) -> [return: bb704, unwind: bb1438];
    }

    bb704: {
        StorageDead(_1476);
        StorageLive(_1478);
        StorageLive(_1479);
        StorageLive(_1480);
        _1480 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_reserve.rs", line: const 66_u32 };
        _1479 = anchor_lang::error::ErrorOrigin::Source(move _1480);
        StorageDead(_1480);
        _1478 = std::option::Option::<ErrorOrigin>::Some(move _1479);
        StorageDead(_1479);
        StorageLive(_1481);
        _1481 = std::option::Option::<ComparedValues>::None;
        _1469 = anchor_lang::error::AnchorError { error_name: move _1470, error_code_number: move _1473, error_msg: move _1475, error_origin: move _1478, compared_values: move _1481 };
        StorageDead(_1481);
        StorageDead(_1478);
        StorageDead(_1475);
        StorageDead(_1473);
        StorageDead(_1470);
        _1468 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _1469) -> [return: bb705, unwind: bb1442];
    }

    bb705: {
        _2663 = const true;
        StorageDead(_1469);
        StorageLive(_1482);
        StorageLive(_1483);
        StorageLive(_1484);
        _1484 = &_6;
        _1483 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1484) -> [return: bb706, unwind: bb1595];
    }

    bb706: {
        StorageDead(_1484);
        StorageLive(_1485);
        StorageLive(_1486);
        _1486 = &(*_117);
        _1485 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1486) -> [return: bb707, unwind: bb1595];
    }

    bb707: {
        StorageDead(_1486);
        _1482 = (move _1483, move _1485);
        StorageDead(_1485);
        StorageDead(_1483);
        _2663 = const false;
        _1467 = anchor_lang::error::Error::with_pubkeys(move _1468, move _1482) -> [return: bb708, unwind: bb1595];
    }

    bb708: {
        StorageDead(_1482);
        _2663 = const false;
        StorageDead(_1468);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1467);
        StorageDead(_1467);
        StorageDead(_1459);
        StorageDead(_1458);
        goto -> bb1299;
    }

    bb709: {
        StorageDead(_1464);
        StorageDead(_1463);
        StorageDead(_1461);
        StorageDead(_1460);
        _1458 = const ();
        StorageDead(_1459);
        StorageDead(_1458);
        StorageLive(_1487);
        StorageLive(_1488);
        StorageLive(_1489);
        StorageLive(_1490);
        _1490 = &_1338;
        _1489 = anchor_lang::prelude::Rent::minimum_balance(move _1490, const _) -> [return: bb710, unwind: bb1442];
    }

    bb710: {
        StorageDead(_1490);
        _1488 = <u64 as Ord>::max(move _1489, const 1_u64) -> [return: bb711, unwind: bb1442];
    }

    bb711: {
        StorageDead(_1489);
        StorageLive(_1491);
        _1491 = _1394;
        _1487 = core::num::<impl u64>::saturating_sub(move _1488, move _1491) -> [return: bb712, unwind: bb1442];
    }

    bb712: {
        StorageDead(_1491);
        StorageDead(_1488);
        StorageLive(_1492);
        StorageLive(_1493);
        StorageLive(_1494);
        _1494 = _1487;
        _1493 = Gt(move _1494, const 0_u64);
        switchInt(move _1493) -> [0: bb723, otherwise: bb713];
    }

    bb713: {
        StorageDead(_1494);
        StorageLive(_1495);
        StorageLive(_1496);
        StorageLive(_1497);
        _1497 = &_6;
        _1496 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1497) -> [return: bb714, unwind: bb1442];
    }

    bb714: {
        StorageDead(_1497);
        StorageLive(_1498);
        StorageLive(_1499);
        _1499 = &(*_117);
        _1498 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1499) -> [return: bb715, unwind: bb1437];
    }

    bb715: {
        StorageDead(_1499);
        _2662 = const true;
        _1495 = anchor_lang::system_program::Transfer::<'_> { from: move _1496, to: move _1498 };
        StorageDead(_1498);
        StorageDead(_1496);
        StorageLive(_1500);
        StorageLive(_1501);
        StorageLive(_1502);
        _1502 = &_201;
        _1501 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1502) -> [return: bb716, unwind: bb1593];
    }

    bb716: {
        StorageDead(_1502);
        StorageLive(_1503);
        _2662 = const false;
        _1503 = move _1495;
        _1500 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _1501, move _1503) -> [return: bb717, unwind: bb1593];
    }

    bb717: {
        StorageDead(_1503);
        StorageDead(_1501);
        StorageLive(_1504);
        StorageLive(_1505);
        StorageLive(_1506);
        StorageLive(_1507);
        _1507 = move _1500;
        StorageLive(_1508);
        _1508 = _1487;
        _1506 = anchor_lang::system_program::transfer(move _1507, move _1508) -> [return: bb718, unwind: bb1593];
    }

    bb718: {
        StorageDead(_1508);
        StorageDead(_1507);
        _1505 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1506) -> [return: bb719, unwind: bb1593];
    }

    bb719: {
        StorageDead(_1506);
        _1509 = discriminant(_1505);
        switchInt(move _1509) -> [0: bb720, 1: bb721, otherwise: bb5];
    }

    bb720: {
        StorageLive(_1513);
        _1513 = ((_1505 as Continue).0: ());
        _1504 = _1513;
        StorageDead(_1513);
        _2818 = discriminant(_1505);
        StorageDead(_1505);
        StorageDead(_1504);
        _1492 = const ();
        StorageDead(_1500);
        _2662 = const false;
        StorageDead(_1495);
        goto -> bb724;
    }

    bb721: {
        StorageLive(_1510);
        _1510 = move ((_1505 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1512);
        _1512 = move _1510;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1512) -> [return: bb722, unwind: bb1591];
    }

    bb722: {
        StorageDead(_1512);
        StorageDead(_1510);
        _2954 = discriminant(_1505);
        StorageDead(_1505);
        StorageDead(_1504);
        StorageDead(_1500);
        _2662 = const false;
        StorageDead(_1495);
        StorageDead(_1493);
        StorageDead(_1492);
        goto -> bb1298;
    }

    bb723: {
        StorageDead(_1494);
        _1492 = const ();
        goto -> bb724;
    }

    bb724: {
        StorageDead(_1493);
        StorageDead(_1492);
        StorageLive(_1514);
        StorageLive(_1515);
        StorageLive(_1516);
        _1516 = &(*_117);
        _1515 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1516) -> [return: bb725, unwind: bb1442];
    }

    bb725: {
        StorageDead(_1516);
        _2661 = const true;
        _1514 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _1515 };
        StorageDead(_1515);
        StorageLive(_1517);
        StorageLive(_1518);
        StorageLive(_1519);
        _1519 = &_201;
        _1518 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1519) -> [return: bb726, unwind: bb1590];
    }

    bb726: {
        StorageDead(_1519);
        StorageLive(_1520);
        _2661 = const false;
        _1520 = move _1514;
        _1517 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _1518, move _1520) -> [return: bb727, unwind: bb1590];
    }

    bb727: {
        StorageDead(_1520);
        StorageDead(_1518);
        StorageLive(_1521);
        StorageLive(_1522);
        StorageLive(_1523);
        StorageLive(_1524);
        StorageLive(_1525);
        _2660 = const true;
        _1525 = move _1517;
        StorageLive(_1526);
        StorageLive(_1527);
        StorageLive(_1528);
        StorageLive(_1529);
        StorageLive(_1530);
        StorageLive(_1531);
        StorageLive(_1532);
        StorageLive(_1533);
        StorageLive(_1534);
        StorageLive(_1535);
        StorageLive(_1536);
        StorageLive(_1537);
        StorageLive(_1538);
        StorageLive(_1539);
        _1539 = &_21;
        _1538 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1539) -> [return: bb728, unwind: bb1588];
    }

    bb728: {
        _1537 = &_1538;
        StorageDead(_1539);
        _1536 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1537) -> [return: bb729, unwind: bb1588];
    }

    bb729: {
        _1535 = &(*_1536);
        StorageDead(_1537);
        StorageLive(_1540);
        StorageLive(_1541);
        StorageLive(_1542);
        StorageLive(_1543);
        StorageLive(_1544);
        _3177 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1544 = &(*_3177);
        _1543 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1544) -> [return: bb730, unwind: bb1588];
    }

    bb730: {
        _1542 = &_1543;
        StorageDead(_1544);
        _1541 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1542) -> [return: bb731, unwind: bb1588];
    }

    bb731: {
        _1540 = &(*_1541);
        StorageDead(_1542);
        StorageLive(_1545);
        StorageLive(_1546);
        StorageLive(_1547);
        StorageLive(_1548);
        StorageLive(_1549);
        StorageLive(_1550);
        _1550 = _1347;
        _1549 = [move _1550];
        _1548 = &_1549;
        StorageDead(_1550);
        StorageLive(_1551);
        _1551 = RangeFull;
        _1547 = <[u8; 1] as Index<RangeFull>>::index(move _1548, move _1551) -> [return: bb732, unwind: bb1588];
    }

    bb732: {
        StorageDead(_1551);
        StorageDead(_1548);
        _1546 = &(*_1547);
        _1545 = &(*_1546);
        _1534 = [const _, move _1535, move _1540, move _1545];
        _1533 = &_1534;
        StorageDead(_1545);
        StorageDead(_1540);
        StorageDead(_1535);
        StorageLive(_1552);
        _1552 = RangeFull;
        _1532 = <[&[u8]; 4] as Index<RangeFull>>::index(move _1533, move _1552) -> [return: bb733, unwind: bb1588];
    }

    bb733: {
        StorageDead(_1552);
        StorageDead(_1533);
        _1531 = &(*_1532);
        _1530 = &(*_1531);
        _1529 = [move _1530];
        StorageDead(_1530);
        _1528 = &_1529;
        _1527 = &(*_1528);
        _1526 = move _1527 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1527);
        _2660 = const false;
        _1524 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _1525, move _1526) -> [return: bb734, unwind: bb1588];
    }

    bb734: {
        StorageDead(_1526);
        _2660 = const false;
        StorageDead(_1525);
        StorageLive(_1553);
        _1553 = const _ as u64 (IntToInt);
        _1523 = anchor_lang::system_program::allocate(move _1524, move _1553) -> [return: bb735, unwind: bb1590];
    }

    bb735: {
        StorageDead(_1553);
        StorageDead(_1524);
        _1522 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1523) -> [return: bb736, unwind: bb1590];
    }

    bb736: {
        StorageDead(_1523);
        _1554 = discriminant(_1522);
        switchInt(move _1554) -> [0: bb737, 1: bb738, otherwise: bb5];
    }

    bb737: {
        StorageLive(_1558);
        _1558 = ((_1522 as Continue).0: ());
        _1521 = _1558;
        StorageDead(_1558);
        _2820 = discriminant(_1522);
        StorageDead(_1549);
        StorageDead(_1547);
        StorageDead(_1546);
        StorageDead(_1543);
        StorageDead(_1541);
        StorageDead(_1538);
        StorageDead(_1536);
        StorageDead(_1534);
        StorageDead(_1532);
        StorageDead(_1531);
        StorageDead(_1529);
        StorageDead(_1528);
        StorageDead(_1522);
        StorageDead(_1521);
        StorageLive(_1559);
        StorageLive(_1560);
        StorageLive(_1561);
        _1561 = &(*_117);
        _1560 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1561) -> [return: bb740, unwind: bb1590];
    }

    bb738: {
        StorageLive(_1555);
        _1555 = move ((_1522 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1557);
        _1557 = move _1555;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1557) -> [return: bb739, unwind: bb1586];
    }

    bb739: {
        StorageDead(_1557);
        StorageDead(_1555);
        _2952 = discriminant(_1522);
        StorageDead(_1549);
        StorageDead(_1547);
        StorageDead(_1546);
        StorageDead(_1543);
        StorageDead(_1541);
        StorageDead(_1538);
        StorageDead(_1536);
        StorageDead(_1534);
        StorageDead(_1532);
        StorageDead(_1531);
        StorageDead(_1529);
        StorageDead(_1528);
        StorageDead(_1522);
        StorageDead(_1521);
        goto -> bb1297;
    }

    bb740: {
        StorageDead(_1561);
        _2659 = const true;
        _1559 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _1560 };
        StorageDead(_1560);
        StorageLive(_1562);
        StorageLive(_1563);
        StorageLive(_1564);
        _1564 = &_201;
        _1563 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1564) -> [return: bb741, unwind: bb1585];
    }

    bb741: {
        StorageDead(_1564);
        StorageLive(_1565);
        _2659 = const false;
        _1565 = move _1559;
        _1562 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _1563, move _1565) -> [return: bb742, unwind: bb1585];
    }

    bb742: {
        StorageDead(_1565);
        StorageDead(_1563);
        StorageLive(_1566);
        StorageLive(_1567);
        StorageLive(_1568);
        StorageLive(_1569);
        StorageLive(_1570);
        _2658 = const true;
        _1570 = move _1562;
        StorageLive(_1571);
        StorageLive(_1572);
        StorageLive(_1573);
        StorageLive(_1574);
        StorageLive(_1575);
        StorageLive(_1576);
        StorageLive(_1577);
        StorageLive(_1578);
        StorageLive(_1579);
        StorageLive(_1580);
        StorageLive(_1581);
        StorageLive(_1582);
        StorageLive(_1583);
        StorageLive(_1584);
        _1584 = &_21;
        _1583 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1584) -> [return: bb743, unwind: bb1583];
    }

    bb743: {
        _1582 = &_1583;
        StorageDead(_1584);
        _1581 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1582) -> [return: bb744, unwind: bb1583];
    }

    bb744: {
        _1580 = &(*_1581);
        StorageDead(_1582);
        StorageLive(_1585);
        StorageLive(_1586);
        StorageLive(_1587);
        StorageLive(_1588);
        StorageLive(_1589);
        _3178 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1589 = &(*_3178);
        _1588 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1589) -> [return: bb745, unwind: bb1583];
    }

    bb745: {
        _1587 = &_1588;
        StorageDead(_1589);
        _1586 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1587) -> [return: bb746, unwind: bb1583];
    }

    bb746: {
        _1585 = &(*_1586);
        StorageDead(_1587);
        StorageLive(_1590);
        StorageLive(_1591);
        StorageLive(_1592);
        StorageLive(_1593);
        StorageLive(_1594);
        StorageLive(_1595);
        _1595 = _1347;
        _1594 = [move _1595];
        _1593 = &_1594;
        StorageDead(_1595);
        StorageLive(_1596);
        _1596 = RangeFull;
        _1592 = <[u8; 1] as Index<RangeFull>>::index(move _1593, move _1596) -> [return: bb747, unwind: bb1583];
    }

    bb747: {
        StorageDead(_1596);
        StorageDead(_1593);
        _1591 = &(*_1592);
        _1590 = &(*_1591);
        _1579 = [const _, move _1580, move _1585, move _1590];
        _1578 = &_1579;
        StorageDead(_1590);
        StorageDead(_1585);
        StorageDead(_1580);
        StorageLive(_1597);
        _1597 = RangeFull;
        _1577 = <[&[u8]; 4] as Index<RangeFull>>::index(move _1578, move _1597) -> [return: bb748, unwind: bb1583];
    }

    bb748: {
        StorageDead(_1597);
        StorageDead(_1578);
        _1576 = &(*_1577);
        _1575 = &(*_1576);
        _1574 = [move _1575];
        StorageDead(_1575);
        _1573 = &_1574;
        _1572 = &(*_1573);
        _1571 = move _1572 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1572);
        _2658 = const false;
        _1569 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _1570, move _1571) -> [return: bb749, unwind: bb1583];
    }

    bb749: {
        _2657 = const true;
        StorageDead(_1571);
        _2658 = const false;
        StorageDead(_1570);
        StorageLive(_1598);
        StorageLive(_1599);
        StorageLive(_1600);
        StorageLive(_1601);
        StorageLive(_1602);
        StorageLive(_1603);
        _1603 = &_186;
        _1602 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _1603) -> [return: bb750, unwind: bb1581];
    }

    bb750: {
        _1601 = &(*_1602);
        StorageDead(_1603);
        _1600 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1601) -> [return: bb751, unwind: bb1581];
    }

    bb751: {
        StorageDead(_1601);
        _1599 = &_1600;
        _1598 = &(*_1599);
        _2657 = const false;
        _1568 = anchor_lang::system_program::assign(move _1569, move _1598) -> [return: bb752, unwind: bb1581];
    }

    bb752: {
        StorageDead(_1598);
        _2657 = const false;
        StorageDead(_1569);
        _1567 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1568) -> [return: bb753, unwind: bb1585];
    }

    bb753: {
        StorageDead(_1568);
        _1604 = discriminant(_1567);
        switchInt(move _1604) -> [0: bb754, 1: bb755, otherwise: bb5];
    }

    bb754: {
        StorageLive(_1608);
        _1608 = ((_1567 as Continue).0: ());
        _1566 = _1608;
        StorageDead(_1608);
        _2822 = discriminant(_1567);
        StorageDead(_1602);
        StorageDead(_1600);
        StorageDead(_1599);
        StorageDead(_1594);
        StorageDead(_1592);
        StorageDead(_1591);
        StorageDead(_1588);
        StorageDead(_1586);
        StorageDead(_1583);
        StorageDead(_1581);
        StorageDead(_1579);
        StorageDead(_1577);
        StorageDead(_1576);
        StorageDead(_1574);
        StorageDead(_1573);
        StorageDead(_1567);
        StorageDead(_1566);
        _1396 = const ();
        StorageDead(_1562);
        _2659 = const false;
        StorageDead(_1559);
        StorageDead(_1517);
        _2661 = const false;
        StorageDead(_1514);
        StorageDead(_1487);
        goto -> bb757;
    }

    bb755: {
        StorageLive(_1605);
        _1605 = move ((_1567 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1607);
        _1607 = move _1605;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1607) -> [return: bb756, unwind: bb1579];
    }

    bb756: {
        StorageDead(_1607);
        StorageDead(_1605);
        _2950 = discriminant(_1567);
        StorageDead(_1602);
        StorageDead(_1600);
        StorageDead(_1599);
        StorageDead(_1594);
        StorageDead(_1592);
        StorageDead(_1591);
        StorageDead(_1588);
        StorageDead(_1586);
        StorageDead(_1583);
        StorageDead(_1581);
        StorageDead(_1579);
        StorageDead(_1577);
        StorageDead(_1576);
        StorageDead(_1574);
        StorageDead(_1573);
        StorageDead(_1567);
        StorageDead(_1566);
        StorageDead(_1562);
        _2659 = const false;
        StorageDead(_1559);
        goto -> bb1297;
    }

    bb757: {
        StorageDead(_1397);
        StorageDead(_1396);
        StorageLive(_1609);
        StorageLive(_1610);
        _1610 = &_186;
        _1609 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1610) -> [return: bb758, unwind: bb1442];
    }

    bb758: {
        _2656 = const true;
        StorageDead(_1610);
        StorageLive(_1611);
        StorageLive(_1612);
        StorageLive(_1613);
        _1613 = &(*_117);
        _1612 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1613) -> [return: bb759, unwind: bb1578];
    }

    bb759: {
        StorageDead(_1613);
        _1611 = anchor_spl::token_2022::InitializeMint2::<'_> { mint: move _1612 };
        StorageDead(_1612);
        StorageLive(_1614);
        StorageLive(_1615);
        _2656 = const false;
        _1615 = move _1609;
        StorageLive(_1616);
        _1616 = move _1611;
        _1614 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeMint2<'_>>::new(move _1615, move _1616) -> [return: bb760, unwind: bb1578];
    }

    bb760: {
        StorageDead(_1616);
        StorageDead(_1615);
        StorageLive(_1617);
        StorageLive(_1618);
        StorageLive(_1619);
        StorageLive(_1620);
        _2655 = const true;
        _1620 = move _1614;
        StorageLive(_1621);
        StorageLive(_1622);
        StorageLive(_1623);
        StorageLive(_1624);
        _1624 = &_36;
        _1623 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1624) -> [return: bb761, unwind: bb1576];
    }

    bb761: {
        StorageDead(_1624);
        _1622 = &_1623;
        _1621 = &(*_1622);
        StorageLive(_1625);
        _1625 = std::option::Option::<&anchor_lang::prelude::Pubkey>::None;
        _2655 = const false;
        _1619 = anchor_spl::token_2022::initialize_mint2(move _1620, const 6_u8, move _1621, move _1625) -> [return: bb762, unwind: bb1576];
    }

    bb762: {
        StorageDead(_1625);
        StorageDead(_1621);
        _2655 = const false;
        StorageDead(_1620);
        _1618 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1619) -> [return: bb763, unwind: bb1578];
    }

    bb763: {
        StorageDead(_1619);
        _1626 = discriminant(_1618);
        switchInt(move _1626) -> [0: bb764, 1: bb765, otherwise: bb5];
    }

    bb764: {
        StorageLive(_1630);
        _1630 = ((_1618 as Continue).0: ());
        _1617 = _1630;
        StorageDead(_1630);
        _2824 = discriminant(_1618);
        StorageDead(_1623);
        StorageDead(_1622);
        StorageDead(_1618);
        StorageDead(_1617);
        _1387 = const ();
        StorageDead(_1614);
        StorageDead(_1611);
        _2656 = const false;
        StorageDead(_1609);
        StorageDead(_1394);
        goto -> bb768;
    }

    bb765: {
        StorageLive(_1627);
        _1627 = move ((_1618 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1629);
        _1629 = move _1627;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1629) -> [return: bb766, unwind: bb1574];
    }

    bb766: {
        StorageDead(_1629);
        StorageDead(_1627);
        _2948 = discriminant(_1618);
        StorageDead(_1623);
        StorageDead(_1622);
        StorageDead(_1618);
        StorageDead(_1617);
        StorageDead(_1614);
        StorageDead(_1611);
        _2656 = const false;
        StorageDead(_1609);
        goto -> bb1300;
    }

    bb767: {
        StorageDead(_1391);
        StorageDead(_1390);
        _1387 = const ();
        goto -> bb768;
    }

    bb768: {
        StorageDead(_1389);
        StorageDead(_1388);
        StorageDead(_1387);
        StorageLive(_1631);
        StorageLive(_1632);
        StorageLive(_1633);
        StorageLive(_1634);
        StorageLive(_1635);
        _1635 = &_117;
        _2609 = deref_copy (*_1635);
        _1634 = &(*_2609);
        _1633 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::Mint>::try_from_unchecked(move _1634) -> [return: bb769, unwind: bb1442];
    }

    bb769: {
        _2653 = const true;
        _2654 = const true;
        StorageDead(_1634);
        _1636 = discriminant(_1633);
        switchInt(move _1636) -> [0: bb771, 1: bb770, otherwise: bb5];
    }

    bb770: {
        StorageLive(_1638);
        _1638 = move ((_1633 as Err).0: anchor_lang::error::Error);
        StorageLive(_1640);
        StorageLive(_1641);
        _1641 = move _1638;
        _1640 = anchor_lang::error::Error::with_account_name::<&str>(move _1641, const "reserve_collateral_mint") -> [return: bb772, unwind: bb1573];
    }

    bb771: {
        StorageLive(_1637);
        _1637 = move ((_1633 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1632 = move _1637;
        StorageDead(_1637);
        _1631 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>::new(move _1632) -> [return: bb773, unwind: bb1573];
    }

    bb772: {
        StorageDead(_1641);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1640);
        StorageDead(_1640);
        StorageDead(_1638);
        StorageDead(_1632);
        _2946 = discriminant(_1633);
        StorageDead(_1635);
        _2653 = const false;
        _2654 = const false;
        StorageDead(_1633);
        goto -> bb1296;
    }

    bb773: {
        StorageDead(_1632);
        _2826 = discriminant(_1633);
        StorageDead(_1635);
        _2653 = const false;
        _2654 = const false;
        StorageDead(_1633);
        StorageLive(_1642);
        StorageLive(_1643);
        _1643 = const false;
        switchInt(move _1643) -> [0: bb812, otherwise: bb774];
    }

    bb774: {
        StorageLive(_1644);
        StorageLive(_1645);
        StorageLive(_1646);
        StorageLive(_1647);
        StorageLive(_1648);
        StorageLive(_1649);
        StorageLive(_1650);
        _3179 = (((_1631.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1650 = &(*_3179);
        _1649 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1650) -> [return: bb775, unwind: bb1436];
    }

    bb775: {
        _1648 = &(*_1649);
        _1647 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1648) -> [return: bb776, unwind: bb1436];
    }

    bb776: {
        StorageDead(_1650);
        StorageDead(_1648);
        _1646 = &((*_1647).0: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>);
        StorageLive(_1651);
        StorageLive(_1652);
        StorageLive(_1653);
        StorageLive(_1654);
        _1654 = &_36;
        _1653 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1654) -> [return: bb777, unwind: bb1436];
    }

    bb777: {
        StorageDead(_1654);
        _1652 = COption::<anchor_lang::prelude::Pubkey>::Some(move _1653);
        _1651 = &_1652;
        StorageDead(_1653);
        _1645 = <COption<anchor_lang::prelude::Pubkey> as PartialEq>::ne(move _1646, move _1651) -> [return: bb778, unwind: bb1436];
    }

    bb778: {
        switchInt(move _1645) -> [0: bb782, otherwise: bb779];
    }

    bb779: {
        StorageDead(_1652);
        StorageDead(_1651);
        StorageDead(_1649);
        StorageDead(_1647);
        StorageDead(_1646);
        StorageLive(_1656);
        StorageLive(_1657);
        StorageLive(_1658);
        _1658 = ConstraintMintMintAuthority;
        _1657 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1658) -> [return: bb780, unwind: bb1436];
    }

    bb780: {
        StorageDead(_1658);
        _1656 = anchor_lang::error::Error::with_account_name::<&str>(move _1657, const "reserve_collateral_mint") -> [return: bb781, unwind: bb1436];
    }

    bb781: {
        StorageDead(_1657);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1656);
        StorageDead(_1656);
        StorageDead(_1645);
        StorageDead(_1644);
        goto -> bb1295;
    }

    bb782: {
        StorageDead(_1652);
        StorageDead(_1651);
        StorageDead(_1649);
        StorageDead(_1647);
        StorageDead(_1646);
        _1644 = const ();
        StorageDead(_1645);
        StorageDead(_1644);
        StorageLive(_1659);
        StorageLive(_1660);
        StorageLive(_1661);
        StorageLive(_1662);
        StorageLive(_1663);
        StorageLive(_1664);
        StorageLive(_1665);
        StorageLive(_1666);
        StorageLive(_1667);
        _3180 = (((_1631.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1667 = &(*_3180);
        _1666 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1667) -> [return: bb783, unwind: bb1436];
    }

    bb783: {
        _1665 = &(*_1666);
        _1664 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1665) -> [return: bb784, unwind: bb1436];
    }

    bb784: {
        StorageDead(_1667);
        StorageDead(_1665);
        _1663 = &((*_1664).4: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>);
        _1662 = COption::<anchor_lang::prelude::Pubkey>::as_ref(move _1663) -> [return: bb785, unwind: bb1436];
    }

    bb785: {
        StorageDead(_1663);
        StorageLive(_1668);
        _1668 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _1661 = COption::<&anchor_lang::prelude::Pubkey>::map::<bool, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _1662, move _1668) -> [return: bb786, unwind: bb1436];
    }

    bb786: {
        StorageDead(_1668);
        StorageDead(_1662);
        StorageLive(_1669);
        StorageLive(_1670);
        _2565 = const _;
        _1670 = &(*_2565);
        _1669 = std::option::Option::<&anchor_lang::prelude::Pubkey>::is_some(move _1670) -> [return: bb787, unwind: bb1436];
    }

    bb787: {
        StorageDead(_1670);
        _1660 = COption::<bool>::unwrap_or(move _1661, move _1669) -> [return: bb788, unwind: bb1436];
    }

    bb788: {
        switchInt(move _1660) -> [0: bb792, otherwise: bb789];
    }

    bb789: {
        StorageDead(_1669);
        StorageDead(_1666);
        StorageDead(_1664);
        StorageDead(_1661);
        StorageLive(_1673);
        StorageLive(_1674);
        StorageLive(_1675);
        _1675 = ConstraintMintFreezeAuthority;
        _1674 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1675) -> [return: bb790, unwind: bb1436];
    }

    bb790: {
        StorageDead(_1675);
        _1673 = anchor_lang::error::Error::with_account_name::<&str>(move _1674, const "reserve_collateral_mint") -> [return: bb791, unwind: bb1436];
    }

    bb791: {
        StorageDead(_1674);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1673);
        StorageDead(_1673);
        StorageDead(_1660);
        StorageDead(_1659);
        goto -> bb1295;
    }

    bb792: {
        StorageDead(_1669);
        StorageDead(_1666);
        StorageDead(_1664);
        StorageDead(_1661);
        _1659 = const ();
        StorageDead(_1660);
        StorageDead(_1659);
        StorageLive(_1676);
        StorageLive(_1677);
        StorageLive(_1678);
        StorageLive(_1679);
        StorageLive(_1680);
        StorageLive(_1681);
        StorageLive(_1682);
        _3181 = (((_1631.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1682 = &(*_3181);
        _1681 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1682) -> [return: bb793, unwind: bb1436];
    }

    bb793: {
        _1680 = &(*_1681);
        _1679 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1680) -> [return: bb794, unwind: bb1436];
    }

    bb794: {
        StorageDead(_1682);
        StorageDead(_1680);
        _1678 = ((*_1679).2: u8);
        _1677 = Ne(move _1678, const 6_u8);
        switchInt(move _1677) -> [0: bb801, otherwise: bb795];
    }

    bb795: {
        StorageDead(_1681);
        StorageDead(_1679);
        StorageDead(_1678);
        StorageLive(_1684);
        StorageLive(_1685);
        StorageLive(_1686);
        StorageLive(_1687);
        _1687 = ConstraintMintDecimals;
        _1686 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1687) -> [return: bb796, unwind: bb1436];
    }

    bb796: {
        StorageDead(_1687);
        _1685 = anchor_lang::error::Error::with_account_name::<&str>(move _1686, const "reserve_collateral_mint") -> [return: bb797, unwind: bb1436];
    }

    bb797: {
        _2652 = const true;
        StorageDead(_1686);
        StorageLive(_1688);
        StorageLive(_1689);
        StorageLive(_1690);
        StorageLive(_1691);
        StorageLive(_1692);
        StorageLive(_1693);
        _3182 = (((_1631.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1693 = &(*_3182);
        _1692 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1693) -> [return: bb798, unwind: bb1572];
    }

    bb798: {
        _1691 = &(*_1692);
        _1690 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1691) -> [return: bb799, unwind: bb1572];
    }

    bb799: {
        StorageDead(_1693);
        StorageDead(_1691);
        _1689 = ((*_1690).2: u8);
        _1688 = (move _1689, const 6_i32);
        StorageDead(_1689);
        _2652 = const false;
        _1684 = anchor_lang::error::Error::with_values::<u8, i32>(move _1685, move _1688) -> [return: bb800, unwind: bb1572];
    }

    bb800: {
        StorageDead(_1688);
        _2652 = const false;
        StorageDead(_1685);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1684);
        StorageDead(_1684);
        StorageDead(_1692);
        StorageDead(_1690);
        StorageDead(_1677);
        StorageDead(_1676);
        goto -> bb1295;
    }

    bb801: {
        StorageDead(_1681);
        StorageDead(_1679);
        StorageDead(_1678);
        _1676 = const ();
        StorageDead(_1677);
        StorageDead(_1676);
        StorageLive(_1694);
        StorageLive(_1695);
        _1695 = &_1383;
        StorageLive(_1696);
        StorageLive(_1697);
        StorageLive(_1698);
        StorageLive(_1699);
        StorageLive(_1700);
        StorageLive(_1701);
        _1701 = &_186;
        _1700 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _1701) -> [return: bb802, unwind: bb1436];
    }

    bb802: {
        _1699 = &(*_1700);
        StorageDead(_1701);
        _1698 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1699) -> [return: bb803, unwind: bb1436];
    }

    bb803: {
        StorageDead(_1699);
        _1697 = &_1698;
        _1696 = &_1697;
        _1694 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1695, move _1696) -> [return: bb804, unwind: bb1436];
    }

    bb804: {
        switchInt(move _1694) -> [0: bb811, otherwise: bb805];
    }

    bb805: {
        StorageDead(_1700);
        StorageDead(_1698);
        StorageDead(_1697);
        StorageDead(_1696);
        StorageDead(_1695);
        StorageLive(_1703);
        StorageLive(_1704);
        StorageLive(_1705);
        StorageLive(_1706);
        _1706 = ConstraintMintTokenProgram;
        _1705 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1706) -> [return: bb806, unwind: bb1436];
    }

    bb806: {
        StorageDead(_1706);
        _1704 = anchor_lang::error::Error::with_account_name::<&str>(move _1705, const "reserve_collateral_mint") -> [return: bb807, unwind: bb1436];
    }

    bb807: {
        _2651 = const true;
        StorageDead(_1705);
        StorageLive(_1707);
        StorageLive(_1708);
        _1708 = (*_1383);
        StorageLive(_1709);
        StorageLive(_1710);
        StorageLive(_1711);
        StorageLive(_1712);
        _1712 = &_186;
        _1711 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _1712) -> [return: bb808, unwind: bb1570];
    }

    bb808: {
        _1710 = &(*_1711);
        StorageDead(_1712);
        _1709 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1710) -> [return: bb809, unwind: bb1570];
    }

    bb809: {
        StorageDead(_1710);
        _1707 = (move _1708, move _1709);
        StorageDead(_1709);
        StorageDead(_1708);
        _2651 = const false;
        _1703 = anchor_lang::error::Error::with_pubkeys(move _1704, move _1707) -> [return: bb810, unwind: bb1570];
    }

    bb810: {
        StorageDead(_1707);
        _2651 = const false;
        StorageDead(_1704);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1703);
        StorageDead(_1703);
        StorageDead(_1711);
        StorageDead(_1694);
        goto -> bb1295;
    }

    bb811: {
        StorageDead(_1700);
        StorageDead(_1698);
        StorageDead(_1697);
        StorageDead(_1696);
        StorageDead(_1695);
        _1642 = const ();
        StorageDead(_1694);
        goto -> bb813;
    }

    bb812: {
        _1642 = const ();
        goto -> bb813;
    }

    bb813: {
        StorageDead(_1643);
        StorageDead(_1642);
        _1382 = move _1631;
        StorageDead(_1631);
        StorageDead(_1383);
        StorageLive(_1713);
        StorageLive(_1714);
        StorageLive(_1715);
        StorageLive(_1716);
        StorageLive(_1717);
        StorageLive(_1718);
        _1718 = &_1382;
        _1717 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _1718) -> [return: bb814, unwind: bb1435];
    }

    bb814: {
        _1716 = &(*_1717);
        StorageDead(_1718);
        _1715 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1716) -> [return: bb815, unwind: bb1435];
    }

    bb815: {
        StorageDead(_1716);
        _1714 = ((*_1715).6: bool);
        switchInt(move _1714) -> [0: bb816, otherwise: bb819];
    }

    bb816: {
        StorageDead(_1717);
        StorageDead(_1715);
        StorageLive(_1720);
        StorageLive(_1721);
        StorageLive(_1722);
        _1722 = ConstraintMut;
        _1721 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1722) -> [return: bb817, unwind: bb1435];
    }

    bb817: {
        StorageDead(_1722);
        _1720 = anchor_lang::error::Error::with_account_name::<&str>(move _1721, const "reserve_collateral_mint") -> [return: bb818, unwind: bb1435];
    }

    bb818: {
        StorageDead(_1721);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1720);
        StorageDead(_1720);
        StorageDead(_1714);
        StorageDead(_1713);
        goto -> bb1294;
    }

    bb819: {
        StorageDead(_1717);
        StorageDead(_1715);
        _1713 = const ();
        StorageDead(_1714);
        StorageDead(_1713);
        StorageLive(_1723);
        StorageLive(_1724);
        StorageLive(_1725);
        _1725 = &_1338;
        StorageLive(_1726);
        StorageLive(_1727);
        StorageLive(_1728);
        StorageLive(_1729);
        _3183 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1729 = &(*_3183);
        _1728 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1729) -> [return: bb820, unwind: bb1435];
    }

    bb820: {
        _1727 = &_1728;
        StorageDead(_1729);
        _1726 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1727) -> [return: bb821, unwind: bb1434];
    }

    bb821: {
        StorageDead(_1727);
        StorageLive(_1730);
        StorageLive(_1731);
        StorageLive(_1732);
        StorageLive(_1733);
        StorageLive(_1734);
        StorageLive(_1735);
        _3184 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1735 = &(*_3184);
        _1734 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1735) -> [return: bb822, unwind: bb1434];
    }

    bb822: {
        _1733 = &_1734;
        StorageDead(_1735);
        _1732 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _1733) -> [return: bb823, unwind: bb1433];
    }

    bb823: {
        StorageDead(_1733);
        _1731 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1732) -> [return: bb824, unwind: bb1433];
    }

    bb824: {
        _2650 = const true;
        StorageDead(_1732);
        _1736 = discriminant(_1731);
        switchInt(move _1736) -> [0: bb825, 1: bb826, otherwise: bb5];
    }

    bb825: {
        StorageLive(_1740);
        _1740 = ((_1731 as Continue).0: usize);
        _1730 = _1740;
        StorageDead(_1740);
        _1724 = anchor_lang::prelude::Rent::is_exempt(move _1725, move _1726, move _1730) -> [return: bb828, unwind: bb1568];
    }

    bb826: {
        StorageLive(_1737);
        _1737 = move ((_1731 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1739);
        _1739 = move _1737;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1739) -> [return: bb827, unwind: bb1568];
    }

    bb827: {
        StorageDead(_1739);
        StorageDead(_1737);
        StorageDead(_1730);
        StorageDead(_1726);
        StorageDead(_1725);
        _2944 = discriminant(_1731);
        drop(_1734) -> [return: bb1291, unwind: bb1434];
    }

    bb828: {
        switchInt(move _1724) -> [0: bb830, otherwise: bb829];
    }

    bb829: {
        StorageDead(_1730);
        StorageDead(_1726);
        StorageDead(_1725);
        _2828 = discriminant(_1731);
        drop(_1734) -> [return: bb835, unwind: bb1434];
    }

    bb830: {
        StorageDead(_1730);
        StorageDead(_1726);
        StorageDead(_1725);
        _2830 = discriminant(_1731);
        drop(_1734) -> [return: bb831, unwind: bb1434];
    }

    bb831: {
        StorageDead(_1734);
        _2650 = const false;
        StorageDead(_1731);
        drop(_1728) -> [return: bb832, unwind: bb1435];
    }

    bb832: {
        StorageDead(_1728);
        StorageLive(_1742);
        StorageLive(_1743);
        StorageLive(_1744);
        _1744 = ConstraintRentExempt;
        _1743 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1744) -> [return: bb833, unwind: bb1435];
    }

    bb833: {
        StorageDead(_1744);
        _1742 = anchor_lang::error::Error::with_account_name::<&str>(move _1743, const "reserve_collateral_mint") -> [return: bb834, unwind: bb1435];
    }

    bb834: {
        StorageDead(_1743);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1742);
        StorageDead(_1742);
        goto -> bb1293;
    }

    bb835: {
        StorageDead(_1734);
        _2650 = const false;
        StorageDead(_1731);
        drop(_1728) -> [return: bb836, unwind: bb1435];
    }

    bb836: {
        StorageDead(_1728);
        _1723 = const ();
        StorageDead(_1724);
        StorageDead(_1723);
        StorageLive(_1745);
        StorageLive(_1746);
        StorageLive(_1747);
        _1747 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb837, unwind: bb1435];
    }

    bb837: {
        _1746 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _1747) -> [return: bb838, unwind: bb1435];
    }

    bb838: {
        StorageDead(_1747);
        _1748 = discriminant(_1746);
        switchInt(move _1748) -> [0: bb839, 1: bb840, otherwise: bb5];
    }

    bb839: {
        StorageLive(_1752);
        _1752 = ((_1746 as Continue).0: anchor_lang::prelude::Rent);
        _1745 = _1752;
        StorageDead(_1752);
        _2832 = discriminant(_1746);
        StorageDead(_1746);
        StorageLive(_1755);
        StorageLive(_1756);
        StorageLive(_1757);
        StorageLive(_1758);
        StorageLive(_1759);
        StorageLive(_1760);
        StorageLive(_1761);
        _1761 = const _;
        _1760 = &(*_1761);
        StorageLive(_1762);
        StorageLive(_1763);
        StorageLive(_1764);
        StorageLive(_1765);
        StorageLive(_1766);
        _1766 = &_21;
        _1765 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1766) -> [return: bb842, unwind: bb1435];
    }

    bb840: {
        StorageLive(_1749);
        _1749 = move ((_1746 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1751);
        _1751 = move _1749;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1751) -> [return: bb841, unwind: bb1567];
    }

    bb841: {
        StorageDead(_1751);
        StorageDead(_1749);
        _2942 = discriminant(_1746);
        StorageDead(_1746);
        goto -> bb1290;
    }

    bb842: {
        _1764 = &_1765;
        StorageDead(_1766);
        _1763 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1764) -> [return: bb843, unwind: bb1435];
    }

    bb843: {
        _1762 = &(*_1763);
        StorageDead(_1764);
        StorageLive(_1767);
        StorageLive(_1768);
        StorageLive(_1769);
        StorageLive(_1770);
        StorageLive(_1771);
        _3185 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1771 = &(*_3185);
        _1770 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1771) -> [return: bb844, unwind: bb1435];
    }

    bb844: {
        _1769 = &_1770;
        StorageDead(_1771);
        _1768 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1769) -> [return: bb845, unwind: bb1435];
    }

    bb845: {
        _1767 = &(*_1768);
        StorageDead(_1769);
        _1759 = [move _1760, move _1762, move _1767];
        StorageDead(_1767);
        StorageDead(_1762);
        StorageDead(_1760);
        _1758 = &_1759;
        _1757 = &(*_1758);
        _1756 = move _1757 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1757);
        StorageLive(_1772);
        _1772 = &(*_1);
        _1755 = anchor_lang::prelude::Pubkey::find_program_address(move _1756, move _1772) -> [return: bb846, unwind: bb1435];
    }

    bb846: {
        StorageDead(_1772);
        StorageDead(_1756);
        StorageLive(_1753);
        _1753 = (_1755.0: anchor_lang::prelude::Pubkey);
        StorageLive(_1754);
        _1754 = (_1755.1: u8);
        StorageDead(_1770);
        StorageDead(_1768);
        StorageDead(_1765);
        StorageDead(_1763);
        StorageDead(_1761);
        StorageDead(_1759);
        StorageDead(_1758);
        StorageDead(_1755);
        StorageLive(_1773);
        _1773 = _1754;
        ((*_4).3: u8) = move _1773;
        StorageDead(_1773);
        StorageLive(_1774);
        StorageLive(_1775);
        StorageLive(_1776);
        StorageLive(_1777);
        StorageLive(_1778);
        _1778 = &(*_132);
        _1777 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1778) -> [return: bb847, unwind: bb1435];
    }

    bb847: {
        _1776 = &_1777;
        StorageDead(_1778);
        StorageLive(_1779);
        _1779 = &_1753;
        _1775 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1776, move _1779) -> [return: bb848, unwind: bb1435];
    }

    bb848: {
        switchInt(move _1775) -> [0: bb854, otherwise: bb849];
    }

    bb849: {
        StorageDead(_1779);
        StorageDead(_1777);
        StorageDead(_1776);
        StorageLive(_1781);
        StorageLive(_1782);
        StorageLive(_1783);
        StorageLive(_1784);
        _1784 = ConstraintSeeds;
        _1783 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1784) -> [return: bb850, unwind: bb1435];
    }

    bb850: {
        StorageDead(_1784);
        _1782 = anchor_lang::error::Error::with_account_name::<&str>(move _1783, const "reserve_collateral_supply") -> [return: bb851, unwind: bb1435];
    }

    bb851: {
        _2649 = const true;
        StorageDead(_1783);
        StorageLive(_1785);
        StorageLive(_1786);
        StorageLive(_1787);
        _1787 = &(*_132);
        _1786 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1787) -> [return: bb852, unwind: bb1566];
    }

    bb852: {
        StorageDead(_1787);
        StorageLive(_1788);
        _1788 = _1753;
        _1785 = (move _1786, move _1788);
        StorageDead(_1788);
        StorageDead(_1786);
        _2649 = const false;
        _1781 = anchor_lang::error::Error::with_pubkeys(move _1782, move _1785) -> [return: bb853, unwind: bb1566];
    }

    bb853: {
        StorageDead(_1785);
        _2649 = const false;
        StorageDead(_1782);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1781);
        StorageDead(_1781);
        StorageDead(_1775);
        StorageDead(_1774);
        goto -> bb1289;
    }

    bb854: {
        StorageDead(_1779);
        StorageDead(_1777);
        StorageDead(_1776);
        _1774 = const ();
        StorageDead(_1775);
        StorageDead(_1774);
        StorageLive(_1789);
        StorageLive(_1790);
        StorageLive(_1791);
        StorageLive(_1792);
        StorageLive(_1793);
        StorageLive(_1794);
        _1794 = &(*_132);
        _1793 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1794) -> [return: bb855, unwind: bb1435];
    }

    bb855: {
        _1792 = &(*_1793);
        StorageDead(_1794);
        _1791 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1792) -> [return: bb856, unwind: bb1435];
    }

    bb856: {
        StorageDead(_1792);
        _1790 = ((*_1791).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_1793);
        StorageDead(_1791);
        StorageLive(_1795);
        StorageLive(_1796);
        _1796 = const false;
        switchInt(move _1796) -> [0: bb859, otherwise: bb857];
    }

    bb857: {
        StorageLive(_1797);
        StorageLive(_1798);
        _1798 = &_1790;
        StorageLive(_1799);
        _2564 = const _;
        _1799 = &(*_2564);
        _1797 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1798, move _1799) -> [return: bb858, unwind: bb1435];
    }

    bb858: {
        switchInt(move _1797) -> [0: bb1054, otherwise: bb859];
    }

    bb859: {
        StorageDead(_1799);
        StorageDead(_1798);
        StorageLive(_1802);
        StorageLive(_1803);
        _1803 = &(*_132);
        _1802 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1803) -> [return: bb860, unwind: bb1435];
    }

    bb860: {
        StorageDead(_1803);
        StorageLive(_1804);
        StorageLive(_1805);
        StorageLive(_1806);
        _1806 = _1802;
        _1805 = Eq(move _1806, const 0_u64);
        switchInt(move _1805) -> [0: bb915, otherwise: bb861];
    }

    bb861: {
        StorageDead(_1806);
        StorageLive(_1807);
        StorageLive(_1808);
        StorageLive(_1809);
        _3186 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1809 = &(*_3186);
        _1808 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1809) -> [return: bb862, unwind: bb1435];
    }

    bb862: {
        StorageDead(_1809);
        StorageLive(_1810);
        StorageLive(_1811);
        _2610 = deref_copy (_1808.3: &anchor_lang::prelude::Pubkey);
        _1811 = &(*_2610);
        StorageLive(_1812);
        StorageLive(_1813);
        _1813 = <Token2022 as anchor_lang::Id>::id() -> [return: bb863, unwind: bb1432];
    }

    bb863: {
        _1812 = &_1813;
        _1810 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1811, move _1812) -> [return: bb864, unwind: bb1432];
    }

    bb864: {
        switchInt(move _1810) -> [0: bb893, otherwise: bb865];
    }

    bb865: {
        StorageDead(_1813);
        StorageDead(_1812);
        StorageDead(_1811);
        StorageLive(_1814);
        StorageLive(_1815);
        StorageLive(_1816);
        StorageLive(_1817);
        _1817 = &_1808;
        _1816 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _1817) -> [return: bb866, unwind: bb1432];
    }

    bb866: {
        StorageDead(_1817);
        _1815 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1816) -> [return: bb867, unwind: bb1432];
    }

    bb867: {
        StorageDead(_1816);
        _1818 = discriminant(_1815);
        switchInt(move _1818) -> [0: bb868, 1: bb869, otherwise: bb5];
    }

    bb868: {
        StorageLive(_1822);
        _1822 = move ((_1815 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _1814 = move _1822;
        StorageDead(_1822);
        _2834 = discriminant(_1815);
        StorageDead(_1815);
        StorageLive(_1823);
        StorageLive(_1824);
        StorageLive(_1825);
        StorageLive(_1826);
        StorageLive(_1827);
        StorageLive(_1828);
        StorageLive(_1829);
        _1829 = &_1814;
        _1828 = &(*_1829);
        _1827 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1828) -> [return: bb871, unwind: bb1431];
    }

    bb869: {
        StorageLive(_1819);
        _1819 = move ((_1815 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1821);
        _1821 = move _1819;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1821) -> [return: bb870, unwind: bb1564];
    }

    bb870: {
        StorageDead(_1821);
        StorageDead(_1819);
        _2940 = discriminant(_1815);
        StorageDead(_1815);
        goto -> bb1281;
    }

    bb871: {
        _2611 = deref_copy (*_1827);
        _1826 = &(*_2611);
        StorageDead(_1828);
        _1825 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _1826) -> [return: bb872, unwind: bb1431];
    }

    bb872: {
        StorageDead(_1826);
        _1824 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1825) -> [return: bb873, unwind: bb1431];
    }

    bb873: {
        StorageDead(_1825);
        _1830 = discriminant(_1824);
        switchInt(move _1830) -> [0: bb874, 1: bb875, otherwise: bb5];
    }

    bb874: {
        StorageLive(_1834);
        _1834 = move ((_1824 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _1823 = move _1834;
        StorageDead(_1834);
        _2836 = discriminant(_1824);
        StorageDead(_1829);
        StorageDead(_1827);
        StorageDead(_1824);
        StorageLive(_1835);
        StorageLive(_1836);
        StorageLive(_1837);
        StorageLive(_1838);
        _1838 = &_1823;
        _1837 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _1838) -> [return: bb877, unwind: bb1431];
    }

    bb875: {
        StorageLive(_1831);
        _1831 = move ((_1824 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1833);
        _1833 = move _1831;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1833) -> [return: bb876, unwind: bb1563];
    }

    bb876: {
        StorageDead(_1833);
        StorageDead(_1831);
        _2938 = discriminant(_1824);
        StorageDead(_1829);
        StorageDead(_1827);
        StorageDead(_1824);
        goto -> bb1280;
    }

    bb877: {
        StorageDead(_1838);
        _1836 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1837) -> [return: bb878, unwind: bb1431];
    }

    bb878: {
        StorageDead(_1837);
        _1839 = discriminant(_1836);
        switchInt(move _1839) -> [0: bb879, 1: bb880, otherwise: bb5];
    }

    bb879: {
        StorageLive(_1843);
        _1843 = move ((_1836 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _1835 = move _1843;
        StorageDead(_1843);
        _2838 = discriminant(_1836);
        StorageDead(_1836);
        StorageLive(_1844);
        StorageLive(_1845);
        StorageLive(_1846);
        StorageLive(_1847);
        StorageLive(_1848);
        _1848 = &_1835;
        _1847 = &(*_1848);
        _1846 = <Vec<ExtensionType> as Deref>::deref(move _1847) -> [return: bb882, unwind: bb1430];
    }

    bb880: {
        StorageLive(_1840);
        _1840 = move ((_1836 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1842);
        _1842 = move _1840;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1842) -> [return: bb881, unwind: bb1562];
    }

    bb881: {
        StorageDead(_1842);
        StorageDead(_1840);
        _2936 = discriminant(_1836);
        StorageDead(_1836);
        StorageDead(_1835);
        goto -> bb1280;
    }

    bb882: {
        _1845 = &(*_1846);
        StorageDead(_1847);
        _1844 = ExtensionType::get_required_init_account_extensions(move _1845) -> [return: bb883, unwind: bb1430];
    }

    bb883: {
        StorageDead(_1845);
        StorageDead(_1848);
        StorageDead(_1846);
        StorageLive(_1849);
        StorageLive(_1850);
        StorageLive(_1851);
        StorageLive(_1852);
        StorageLive(_1853);
        StorageLive(_1854);
        _1854 = &_1844;
        _1853 = &(*_1854);
        _1852 = <Vec<ExtensionType> as Deref>::deref(move _1853) -> [return: bb884, unwind: bb1429];
    }

    bb884: {
        _1851 = &(*_1852);
        StorageDead(_1853);
        _1850 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _1851) -> [return: bb885, unwind: bb1429];
    }

    bb885: {
        StorageDead(_1851);
        _1849 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1850) -> [return: bb886, unwind: bb1429];
    }

    bb886: {
        _2648 = const true;
        StorageDead(_1850);
        _1855 = discriminant(_1849);
        switchInt(move _1855) -> [0: bb887, 1: bb888, otherwise: bb5];
    }

    bb887: {
        StorageLive(_1859);
        _1859 = ((_1849 as Continue).0: usize);
        _1807 = _1859;
        StorageDead(_1859);
        drop(_1844) -> [return: bb890, unwind: bb1427];
    }

    bb888: {
        StorageLive(_1856);
        _1856 = move ((_1849 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1858);
        _1858 = move _1856;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1858) -> [return: bb889, unwind: bb1426];
    }

    bb889: {
        StorageDead(_1858);
        StorageDead(_1856);
        drop(_1844) -> [return: bb1277, unwind: bb1427];
    }

    bb890: {
        StorageDead(_1844);
        drop(_1835) -> [return: bb891, unwind: bb1428];
    }

    bb891: {
        StorageDead(_1835);
        StorageDead(_1823);
        drop(_1814) -> [return: bb892, unwind: bb1561];
    }

    bb892: {
        StorageDead(_1814);
        _2840 = discriminant(_1849);
        StorageDead(_1854);
        StorageDead(_1852);
        _2648 = const false;
        StorageDead(_1849);
        goto -> bb894;
    }

    bb893: {
        StorageDead(_1813);
        StorageDead(_1812);
        StorageDead(_1811);
        _1807 = const _;
        goto -> bb894;
    }

    bb894: {
        StorageDead(_1810);
        drop(_1808) -> [return: bb895, unwind: bb1435];
    }

    bb895: {
        StorageDead(_1808);
        StorageLive(_1860);
        StorageLive(_1861);
        _1861 = &_1745;
        StorageLive(_1862);
        _1862 = _1807;
        _1860 = anchor_lang::prelude::Rent::minimum_balance(move _1861, move _1862) -> [return: bb896, unwind: bb1435];
    }

    bb896: {
        StorageDead(_1862);
        StorageDead(_1861);
        StorageLive(_1863);
        StorageLive(_1864);
        StorageLive(_1865);
        _1865 = &_6;
        _1864 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1865) -> [return: bb897, unwind: bb1435];
    }

    bb897: {
        StorageDead(_1865);
        StorageLive(_1866);
        StorageLive(_1867);
        _1867 = &(*_132);
        _1866 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1867) -> [return: bb898, unwind: bb1425];
    }

    bb898: {
        StorageDead(_1867);
        _2647 = const true;
        _1863 = anchor_lang::system_program::CreateAccount::<'_> { from: move _1864, to: move _1866 };
        StorageDead(_1866);
        StorageDead(_1864);
        StorageLive(_1868);
        StorageLive(_1869);
        StorageLive(_1870);
        _1870 = &_201;
        _1869 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1870) -> [return: bb899, unwind: bb1560];
    }

    bb899: {
        StorageDead(_1870);
        StorageLive(_1871);
        _2647 = const false;
        _1871 = move _1863;
        _1868 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _1869, move _1871) -> [return: bb900, unwind: bb1560];
    }

    bb900: {
        StorageDead(_1871);
        StorageDead(_1869);
        StorageLive(_1872);
        StorageLive(_1873);
        StorageLive(_1874);
        StorageLive(_1875);
        StorageLive(_1876);
        _2646 = const true;
        _1876 = move _1868;
        StorageLive(_1877);
        StorageLive(_1878);
        StorageLive(_1879);
        StorageLive(_1880);
        StorageLive(_1881);
        StorageLive(_1882);
        StorageLive(_1883);
        StorageLive(_1884);
        StorageLive(_1885);
        StorageLive(_1886);
        StorageLive(_1887);
        StorageLive(_1888);
        StorageLive(_1889);
        StorageLive(_1890);
        _1890 = &_21;
        _1889 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _1890) -> [return: bb901, unwind: bb1558];
    }

    bb901: {
        _1888 = &_1889;
        StorageDead(_1890);
        _1887 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1888) -> [return: bb902, unwind: bb1558];
    }

    bb902: {
        _1886 = &(*_1887);
        StorageDead(_1888);
        StorageLive(_1891);
        StorageLive(_1892);
        StorageLive(_1893);
        StorageLive(_1894);
        StorageLive(_1895);
        _3187 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1895 = &(*_3187);
        _1894 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1895) -> [return: bb903, unwind: bb1558];
    }

    bb903: {
        _1893 = &_1894;
        StorageDead(_1895);
        _1892 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1893) -> [return: bb904, unwind: bb1558];
    }

    bb904: {
        _1891 = &(*_1892);
        StorageDead(_1893);
        StorageLive(_1896);
        StorageLive(_1897);
        StorageLive(_1898);
        StorageLive(_1899);
        StorageLive(_1900);
        StorageLive(_1901);
        _1901 = _1754;
        _1900 = [move _1901];
        _1899 = &_1900;
        StorageDead(_1901);
        StorageLive(_1902);
        _1902 = RangeFull;
        _1898 = <[u8; 1] as Index<RangeFull>>::index(move _1899, move _1902) -> [return: bb905, unwind: bb1558];
    }

    bb905: {
        StorageDead(_1902);
        StorageDead(_1899);
        _1897 = &(*_1898);
        _1896 = &(*_1897);
        _1885 = [const _, move _1886, move _1891, move _1896];
        _1884 = &_1885;
        StorageDead(_1896);
        StorageDead(_1891);
        StorageDead(_1886);
        StorageLive(_1903);
        _1903 = RangeFull;
        _1883 = <[&[u8]; 4] as Index<RangeFull>>::index(move _1884, move _1903) -> [return: bb906, unwind: bb1558];
    }

    bb906: {
        StorageDead(_1903);
        StorageDead(_1884);
        _1882 = &(*_1883);
        _1881 = &(*_1882);
        _1880 = [move _1881];
        StorageDead(_1881);
        _1879 = &_1880;
        _1878 = &(*_1879);
        _1877 = move _1878 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1878);
        _2646 = const false;
        _1875 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _1876, move _1877) -> [return: bb907, unwind: bb1558];
    }

    bb907: {
        _2645 = const true;
        StorageDead(_1877);
        _2646 = const false;
        StorageDead(_1876);
        StorageLive(_1904);
        _1904 = _1860;
        StorageLive(_1905);
        StorageLive(_1906);
        _1906 = _1807;
        _1905 = move _1906 as u64 (IntToInt);
        StorageDead(_1906);
        StorageLive(_1907);
        StorageLive(_1908);
        StorageLive(_1909);
        StorageLive(_1910);
        StorageLive(_1911);
        StorageLive(_1912);
        _1912 = &_186;
        _1911 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _1912) -> [return: bb908, unwind: bb1556];
    }

    bb908: {
        _1910 = &(*_1911);
        StorageDead(_1912);
        _1909 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1910) -> [return: bb909, unwind: bb1556];
    }

    bb909: {
        StorageDead(_1910);
        _1908 = &_1909;
        _1907 = &(*_1908);
        _2645 = const false;
        _1874 = anchor_lang::system_program::create_account(move _1875, move _1904, move _1905, move _1907) -> [return: bb910, unwind: bb1556];
    }

    bb910: {
        StorageDead(_1907);
        StorageDead(_1905);
        StorageDead(_1904);
        _2645 = const false;
        StorageDead(_1875);
        _1873 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1874) -> [return: bb911, unwind: bb1560];
    }

    bb911: {
        StorageDead(_1874);
        _1913 = discriminant(_1873);
        switchInt(move _1913) -> [0: bb912, 1: bb913, otherwise: bb5];
    }

    bb912: {
        StorageLive(_1917);
        _1917 = ((_1873 as Continue).0: ());
        _1872 = _1917;
        StorageDead(_1917);
        _2842 = discriminant(_1873);
        StorageDead(_1911);
        StorageDead(_1909);
        StorageDead(_1908);
        StorageDead(_1900);
        StorageDead(_1898);
        StorageDead(_1897);
        StorageDead(_1894);
        StorageDead(_1892);
        StorageDead(_1889);
        StorageDead(_1887);
        StorageDead(_1885);
        StorageDead(_1883);
        StorageDead(_1882);
        StorageDead(_1880);
        StorageDead(_1879);
        StorageDead(_1873);
        StorageDead(_1872);
        _1804 = const ();
        StorageDead(_1868);
        _2647 = const false;
        StorageDead(_1863);
        StorageDead(_1860);
        StorageDead(_1807);
        goto -> bb1043;
    }

    bb913: {
        StorageLive(_1914);
        _1914 = move ((_1873 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1916);
        _1916 = move _1914;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1916) -> [return: bb914, unwind: bb1554];
    }

    bb914: {
        StorageDead(_1916);
        StorageDead(_1914);
        _2932 = discriminant(_1873);
        StorageDead(_1911);
        StorageDead(_1909);
        StorageDead(_1908);
        StorageDead(_1900);
        StorageDead(_1898);
        StorageDead(_1897);
        StorageDead(_1894);
        StorageDead(_1892);
        StorageDead(_1889);
        StorageDead(_1887);
        StorageDead(_1885);
        StorageDead(_1883);
        StorageDead(_1882);
        StorageDead(_1880);
        StorageDead(_1879);
        StorageDead(_1873);
        StorageDead(_1872);
        StorageDead(_1868);
        _2647 = const false;
        StorageDead(_1863);
        StorageDead(_1860);
        goto -> bb1284;
    }

    bb915: {
        StorageDead(_1806);
        StorageLive(_1918);
        StorageLive(_1919);
        StorageLive(_1920);
        StorageLive(_1921);
        StorageLive(_1922);
        _1922 = &_6;
        _1921 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1922) -> [return: bb916, unwind: bb1435];
    }

    bb916: {
        _1920 = &_1921;
        StorageDead(_1922);
        StorageLive(_1923);
        StorageLive(_1924);
        StorageLive(_1925);
        _1925 = &(*_132);
        _1924 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1925) -> [return: bb917, unwind: bb1435];
    }

    bb917: {
        _1923 = &_1924;
        StorageDead(_1925);
        _1919 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1920, move _1923) -> [return: bb918, unwind: bb1435];
    }

    bb918: {
        switchInt(move _1919) -> [0: bb927, otherwise: bb919];
    }

    bb919: {
        StorageDead(_1924);
        StorageDead(_1923);
        StorageDead(_1921);
        StorageDead(_1920);
        StorageLive(_1927);
        StorageLive(_1928);
        StorageLive(_1929);
        StorageLive(_1930);
        StorageLive(_1931);
        _2563 = const _;
        _1931 = &(*_2563);
        _1930 = anchor_lang::error::ErrorCode::name(move _1931) -> [return: bb920, unwind: bb1435];
    }

    bb920: {
        StorageDead(_1931);
        StorageLive(_1933);
        StorageLive(_1934);
        _1934 = TryingToInitPayerAsProgramAccount;
        _1933 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _1934) -> [return: bb921, unwind: bb1424];
    }

    bb921: {
        StorageDead(_1934);
        StorageLive(_1935);
        StorageLive(_1936);
        _2562 = const _;
        _1936 = &(*_2562);
        _1935 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _1936) -> [return: bb922, unwind: bb1424];
    }

    bb922: {
        StorageDead(_1936);
        StorageLive(_1938);
        StorageLive(_1939);
        StorageLive(_1940);
        _1940 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_init_reserve.rs", line: const 66_u32 };
        _1939 = anchor_lang::error::ErrorOrigin::Source(move _1940);
        StorageDead(_1940);
        _1938 = std::option::Option::<ErrorOrigin>::Some(move _1939);
        StorageDead(_1939);
        StorageLive(_1941);
        _1941 = std::option::Option::<ComparedValues>::None;
        _1929 = anchor_lang::error::AnchorError { error_name: move _1930, error_code_number: move _1933, error_msg: move _1935, error_origin: move _1938, compared_values: move _1941 };
        StorageDead(_1941);
        StorageDead(_1938);
        StorageDead(_1935);
        StorageDead(_1933);
        StorageDead(_1930);
        _1928 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _1929) -> [return: bb923, unwind: bb1435];
    }

    bb923: {
        _2644 = const true;
        StorageDead(_1929);
        StorageLive(_1942);
        StorageLive(_1943);
        StorageLive(_1944);
        _1944 = &_6;
        _1943 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1944) -> [return: bb924, unwind: bb1553];
    }

    bb924: {
        StorageDead(_1944);
        StorageLive(_1945);
        StorageLive(_1946);
        _1946 = &(*_132);
        _1945 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1946) -> [return: bb925, unwind: bb1553];
    }

    bb925: {
        StorageDead(_1946);
        _1942 = (move _1943, move _1945);
        StorageDead(_1945);
        StorageDead(_1943);
        _2644 = const false;
        _1927 = anchor_lang::error::Error::with_pubkeys(move _1928, move _1942) -> [return: bb926, unwind: bb1553];
    }

    bb926: {
        StorageDead(_1942);
        _2644 = const false;
        StorageDead(_1928);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _1927);
        StorageDead(_1927);
        StorageDead(_1919);
        StorageDead(_1918);
        goto -> bb1285;
    }

    bb927: {
        StorageDead(_1924);
        StorageDead(_1923);
        StorageDead(_1921);
        StorageDead(_1920);
        _1918 = const ();
        StorageDead(_1919);
        StorageDead(_1918);
        StorageLive(_1947);
        StorageLive(_1948);
        StorageLive(_1949);
        StorageLive(_1950);
        _1950 = &_1745;
        StorageLive(_1951);
        StorageLive(_1952);
        StorageLive(_1953);
        _3188 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1953 = &(*_3188);
        _1952 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1953) -> [return: bb928, unwind: bb1435];
    }

    bb928: {
        StorageDead(_1953);
        StorageLive(_1954);
        StorageLive(_1955);
        _2612 = deref_copy (_1952.3: &anchor_lang::prelude::Pubkey);
        _1955 = &(*_2612);
        StorageLive(_1956);
        StorageLive(_1957);
        _1957 = <Token2022 as anchor_lang::Id>::id() -> [return: bb929, unwind: bb1423];
    }

    bb929: {
        _1956 = &_1957;
        _1954 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1955, move _1956) -> [return: bb930, unwind: bb1423];
    }

    bb930: {
        switchInt(move _1954) -> [0: bb959, otherwise: bb931];
    }

    bb931: {
        StorageDead(_1957);
        StorageDead(_1956);
        StorageDead(_1955);
        StorageLive(_1958);
        StorageLive(_1959);
        StorageLive(_1960);
        StorageLive(_1961);
        _1961 = &_1952;
        _1960 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _1961) -> [return: bb932, unwind: bb1423];
    }

    bb932: {
        StorageDead(_1961);
        _1959 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1960) -> [return: bb933, unwind: bb1423];
    }

    bb933: {
        StorageDead(_1960);
        _1962 = discriminant(_1959);
        switchInt(move _1962) -> [0: bb934, 1: bb935, otherwise: bb5];
    }

    bb934: {
        StorageLive(_1966);
        _1966 = move ((_1959 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _1958 = move _1966;
        StorageDead(_1966);
        _2844 = discriminant(_1959);
        StorageDead(_1959);
        StorageLive(_1967);
        StorageLive(_1968);
        StorageLive(_1969);
        StorageLive(_1970);
        StorageLive(_1971);
        StorageLive(_1972);
        StorageLive(_1973);
        _1973 = &_1958;
        _1972 = &(*_1973);
        _1971 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1972) -> [return: bb937, unwind: bb1422];
    }

    bb935: {
        StorageLive(_1963);
        _1963 = move ((_1959 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1965);
        _1965 = move _1963;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1965) -> [return: bb936, unwind: bb1551];
    }

    bb936: {
        StorageDead(_1965);
        StorageDead(_1963);
        _2930 = discriminant(_1959);
        StorageDead(_1959);
        goto -> bb1273;
    }

    bb937: {
        _2613 = deref_copy (*_1971);
        _1970 = &(*_2613);
        StorageDead(_1972);
        _1969 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _1970) -> [return: bb938, unwind: bb1422];
    }

    bb938: {
        StorageDead(_1970);
        _1968 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1969) -> [return: bb939, unwind: bb1422];
    }

    bb939: {
        StorageDead(_1969);
        _1974 = discriminant(_1968);
        switchInt(move _1974) -> [0: bb940, 1: bb941, otherwise: bb5];
    }

    bb940: {
        StorageLive(_1978);
        _1978 = move ((_1968 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _1967 = move _1978;
        StorageDead(_1978);
        _2846 = discriminant(_1968);
        StorageDead(_1973);
        StorageDead(_1971);
        StorageDead(_1968);
        StorageLive(_1979);
        StorageLive(_1980);
        StorageLive(_1981);
        StorageLive(_1982);
        _1982 = &_1967;
        _1981 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _1982) -> [return: bb943, unwind: bb1422];
    }

    bb941: {
        StorageLive(_1975);
        _1975 = move ((_1968 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1977);
        _1977 = move _1975;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1977) -> [return: bb942, unwind: bb1550];
    }

    bb942: {
        StorageDead(_1977);
        StorageDead(_1975);
        _2928 = discriminant(_1968);
        StorageDead(_1973);
        StorageDead(_1971);
        StorageDead(_1968);
        goto -> bb1272;
    }

    bb943: {
        StorageDead(_1982);
        _1980 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1981) -> [return: bb944, unwind: bb1422];
    }

    bb944: {
        StorageDead(_1981);
        _1983 = discriminant(_1980);
        switchInt(move _1983) -> [0: bb945, 1: bb946, otherwise: bb5];
    }

    bb945: {
        StorageLive(_1987);
        _1987 = move ((_1980 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _1979 = move _1987;
        StorageDead(_1987);
        _2848 = discriminant(_1980);
        StorageDead(_1980);
        StorageLive(_1988);
        StorageLive(_1989);
        StorageLive(_1990);
        StorageLive(_1991);
        StorageLive(_1992);
        _1992 = &_1979;
        _1991 = &(*_1992);
        _1990 = <Vec<ExtensionType> as Deref>::deref(move _1991) -> [return: bb948, unwind: bb1421];
    }

    bb946: {
        StorageLive(_1984);
        _1984 = move ((_1980 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1986);
        _1986 = move _1984;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1986) -> [return: bb947, unwind: bb1549];
    }

    bb947: {
        StorageDead(_1986);
        StorageDead(_1984);
        _2926 = discriminant(_1980);
        StorageDead(_1980);
        StorageDead(_1979);
        goto -> bb1272;
    }

    bb948: {
        _1989 = &(*_1990);
        StorageDead(_1991);
        _1988 = ExtensionType::get_required_init_account_extensions(move _1989) -> [return: bb949, unwind: bb1421];
    }

    bb949: {
        StorageDead(_1989);
        StorageDead(_1992);
        StorageDead(_1990);
        StorageLive(_1993);
        StorageLive(_1994);
        StorageLive(_1995);
        StorageLive(_1996);
        StorageLive(_1997);
        StorageLive(_1998);
        _1998 = &_1988;
        _1997 = &(*_1998);
        _1996 = <Vec<ExtensionType> as Deref>::deref(move _1997) -> [return: bb950, unwind: bb1420];
    }

    bb950: {
        _1995 = &(*_1996);
        StorageDead(_1997);
        _1994 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _1995) -> [return: bb951, unwind: bb1420];
    }

    bb951: {
        StorageDead(_1995);
        _1993 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1994) -> [return: bb952, unwind: bb1420];
    }

    bb952: {
        _2643 = const true;
        StorageDead(_1994);
        _1999 = discriminant(_1993);
        switchInt(move _1999) -> [0: bb953, 1: bb954, otherwise: bb5];
    }

    bb953: {
        StorageLive(_2003);
        _2003 = ((_1993 as Continue).0: usize);
        _1951 = _2003;
        StorageDead(_2003);
        drop(_1988) -> [return: bb956, unwind: bb1418];
    }

    bb954: {
        StorageLive(_2000);
        _2000 = move ((_1993 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2002);
        _2002 = move _2000;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2002) -> [return: bb955, unwind: bb1417];
    }

    bb955: {
        StorageDead(_2002);
        StorageDead(_2000);
        drop(_1988) -> [return: bb1269, unwind: bb1418];
    }

    bb956: {
        StorageDead(_1988);
        drop(_1979) -> [return: bb957, unwind: bb1419];
    }

    bb957: {
        StorageDead(_1979);
        StorageDead(_1967);
        drop(_1958) -> [return: bb958, unwind: bb1548];
    }

    bb958: {
        StorageDead(_1958);
        _2850 = discriminant(_1993);
        StorageDead(_1998);
        StorageDead(_1996);
        _2643 = const false;
        StorageDead(_1993);
        goto -> bb960;
    }

    bb959: {
        StorageDead(_1957);
        StorageDead(_1956);
        StorageDead(_1955);
        _1951 = const _;
        goto -> bb960;
    }

    bb960: {
        StorageDead(_1954);
        drop(_1952) -> [return: bb961, unwind: bb1435];
    }

    bb961: {
        StorageDead(_1952);
        _1949 = anchor_lang::prelude::Rent::minimum_balance(move _1950, move _1951) -> [return: bb962, unwind: bb1435];
    }

    bb962: {
        StorageDead(_1951);
        StorageDead(_1950);
        _1948 = <u64 as Ord>::max(move _1949, const 1_u64) -> [return: bb963, unwind: bb1435];
    }

    bb963: {
        StorageDead(_1949);
        StorageLive(_2004);
        _2004 = _1802;
        _1947 = core::num::<impl u64>::saturating_sub(move _1948, move _2004) -> [return: bb964, unwind: bb1435];
    }

    bb964: {
        StorageDead(_2004);
        StorageDead(_1948);
        StorageLive(_2005);
        StorageLive(_2006);
        StorageLive(_2007);
        _2007 = _1947;
        _2006 = Gt(move _2007, const 0_u64);
        switchInt(move _2006) -> [0: bb975, otherwise: bb965];
    }

    bb965: {
        StorageDead(_2007);
        StorageLive(_2008);
        StorageLive(_2009);
        StorageLive(_2010);
        _2010 = &_6;
        _2009 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2010) -> [return: bb966, unwind: bb1435];
    }

    bb966: {
        StorageDead(_2010);
        StorageLive(_2011);
        StorageLive(_2012);
        _2012 = &(*_132);
        _2011 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2012) -> [return: bb967, unwind: bb1416];
    }

    bb967: {
        StorageDead(_2012);
        _2642 = const true;
        _2008 = anchor_lang::system_program::Transfer::<'_> { from: move _2009, to: move _2011 };
        StorageDead(_2011);
        StorageDead(_2009);
        StorageLive(_2013);
        StorageLive(_2014);
        StorageLive(_2015);
        _2015 = &_201;
        _2014 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2015) -> [return: bb968, unwind: bb1547];
    }

    bb968: {
        StorageDead(_2015);
        StorageLive(_2016);
        _2642 = const false;
        _2016 = move _2008;
        _2013 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _2014, move _2016) -> [return: bb969, unwind: bb1547];
    }

    bb969: {
        StorageDead(_2016);
        StorageDead(_2014);
        StorageLive(_2017);
        StorageLive(_2018);
        StorageLive(_2019);
        StorageLive(_2020);
        _2020 = move _2013;
        StorageLive(_2021);
        _2021 = _1947;
        _2019 = anchor_lang::system_program::transfer(move _2020, move _2021) -> [return: bb970, unwind: bb1547];
    }

    bb970: {
        StorageDead(_2021);
        StorageDead(_2020);
        _2018 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _2019) -> [return: bb971, unwind: bb1547];
    }

    bb971: {
        StorageDead(_2019);
        _2022 = discriminant(_2018);
        switchInt(move _2022) -> [0: bb972, 1: bb973, otherwise: bb5];
    }

    bb972: {
        StorageLive(_2026);
        _2026 = ((_2018 as Continue).0: ());
        _2017 = _2026;
        StorageDead(_2026);
        _2852 = discriminant(_2018);
        StorageDead(_2018);
        StorageDead(_2017);
        _2005 = const ();
        StorageDead(_2013);
        _2642 = const false;
        StorageDead(_2008);
        goto -> bb976;
    }

    bb973: {
        StorageLive(_2023);
        _2023 = move ((_2018 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_2025);
        _2025 = move _2023;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _2025) -> [return: bb974, unwind: bb1545];
    }

    bb974: {
        StorageDead(_2025);
        StorageDead(_2023);
        _2922 = discriminant(_2018);
        StorageDead(_2018);
        StorageDead(_2017);
        StorageDead(_2013);
        _2642 = const false;
        StorageDead(_2008);
        StorageDead(_2006);
        StorageDead(_2005);
        goto -> bb1276;
    }

    bb975: {
        StorageDead(_2007);
        _2005 = const ();
        goto -> bb976;
    }

    bb976: {
        StorageDead(_2006);
        StorageDead(_2005);
        StorageLive(_2027);
        StorageLive(_2028);
        StorageLive(_2029);
        _2029 = &(*_132);
        _2028 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2029) -> [return: bb977, unwind: bb1435];
    }

    bb977: {
        StorageDead(_2029);
        _2641 = const true;
        _2027 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _2028 };
        StorageDead(_2028);
        StorageLive(_2030);
        StorageLive(_2031);
        StorageLive(_2032);
        _2032 = &_201;
        _2031 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2032) -> [return: bb978, unwind: bb1544];
    }

    bb978: {
        StorageDead(_2032);
        StorageLive(_2033);
        _2641 = const false;
        _2033 = move _2027;
        _2030 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _2031, move _2033) -> [return: bb979, unwind: bb1544];
    }

    bb979: {
        StorageDead(_2033);
        StorageDead(_2031);
        StorageLive(_2034);
        StorageLive(_2035);
        StorageLive(_2036);
        StorageLive(_2037);
        StorageLive(_2038);
        _2640 = const true;
        _2038 = move _2030;
        StorageLive(_2039);
        StorageLive(_2040);
        StorageLive(_2041);
        StorageLive(_2042);
        StorageLive(_2043);
        StorageLive(_2044);
        StorageLive(_2045);
        StorageLive(_2046);
        StorageLive(_2047);
        StorageLive(_2048);
        StorageLive(_2049);
        StorageLive(_2050);
        StorageLive(_2051);
        StorageLive(_2052);
        _2052 = &_21;
        _2051 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _2052) -> [return: bb980, unwind: bb1542];
    }

    bb980: {
        _2050 = &_2051;
        StorageDead(_2052);
        _2049 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _2050) -> [return: bb981, unwind: bb1542];
    }

    bb981: {
        _2048 = &(*_2049);
        StorageDead(_2050);
        StorageLive(_2053);
        StorageLive(_2054);
        StorageLive(_2055);
        StorageLive(_2056);
        StorageLive(_2057);
        _3189 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _2057 = &(*_3189);
        _2056 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _2057) -> [return: bb982, unwind: bb1542];
    }

    bb982: {
        _2055 = &_2056;
        StorageDead(_2057);
        _2054 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _2055) -> [return: bb983, unwind: bb1542];
    }

    bb983: {
        _2053 = &(*_2054);
        StorageDead(_2055);
        StorageLive(_2058);
        StorageLive(_2059);
        StorageLive(_2060);
        StorageLive(_2061);
        StorageLive(_2062);
        StorageLive(_2063);
        _2063 = _1754;
        _2062 = [move _2063];
        _2061 = &_2062;
        StorageDead(_2063);
        StorageLive(_2064);
        _2064 = RangeFull;
        _2060 = <[u8; 1] as Index<RangeFull>>::index(move _2061, move _2064) -> [return: bb984, unwind: bb1542];
    }

    bb984: {
        StorageDead(_2064);
        StorageDead(_2061);
        _2059 = &(*_2060);
        _2058 = &(*_2059);
        _2047 = [const _, move _2048, move _2053, move _2058];
        _2046 = &_2047;
        StorageDead(_2058);
        StorageDead(_2053);
        StorageDead(_2048);
        StorageLive(_2065);
        _2065 = RangeFull;
        _2045 = <[&[u8]; 4] as Index<RangeFull>>::index(move _2046, move _2065) -> [return: bb985, unwind: bb1542];
    }

    bb985: {
        StorageDead(_2065);
        StorageDead(_2046);
        _2044 = &(*_2045);
        _2043 = &(*_2044);
        _2042 = [move _2043];
        StorageDead(_2043);
        _2041 = &_2042;
        _2040 = &(*_2041);
        _2039 = move _2040 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_2040);
        _2640 = const false;
        _2037 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _2038, move _2039) -> [return: bb986, unwind: bb1542];
    }

    bb986: {
        _2639 = const true;
        StorageDead(_2039);
        _2640 = const false;
        StorageDead(_2038);
        StorageLive(_2066);
        StorageLive(_2067);
        StorageLive(_2068);
        StorageLive(_2069);
        _3190 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _2069 = &(*_3190);
        _2068 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2069) -> [return: bb987, unwind: bb1540];
    }

    bb987: {
        StorageDead(_2069);
        StorageLive(_2070);
        StorageLive(_2071);
        _2614 = deref_copy (_2068.3: &anchor_lang::prelude::Pubkey);
        _2071 = &(*_2614);
        StorageLive(_2072);
        StorageLive(_2073);
        _2073 = <Token2022 as anchor_lang::Id>::id() -> [return: bb988, unwind: bb1415];
    }

    bb988: {
        _2072 = &_2073;
        _2070 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _2071, move _2072) -> [return: bb989, unwind: bb1415];
    }

    bb989: {
        switchInt(move _2070) -> [0: bb1018, otherwise: bb990];
    }

    bb990: {
        StorageDead(_2073);
        StorageDead(_2072);
        StorageDead(_2071);
        StorageLive(_2074);
        StorageLive(_2075);
        StorageLive(_2076);
        StorageLive(_2077);
        _2077 = &_2068;
        _2076 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _2077) -> [return: bb991, unwind: bb1415];
    }

    bb991: {
        StorageDead(_2077);
        _2075 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _2076) -> [return: bb992, unwind: bb1415];
    }

    bb992: {
        StorageDead(_2076);
        _2078 = discriminant(_2075);
        switchInt(move _2078) -> [0: bb993, 1: bb994, otherwise: bb5];
    }

    bb993: {
        StorageLive(_2082);
        _2082 = move ((_2075 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _2074 = move _2082;
        StorageDead(_2082);
        _2854 = discriminant(_2075);
        StorageDead(_2075);
        StorageLive(_2083);
        StorageLive(_2084);
        StorageLive(_2085);
        StorageLive(_2086);
        StorageLive(_2087);
        StorageLive(_2088);
        StorageLive(_2089);
        _2089 = &_2074;
        _2088 = &(*_2089);
        _2087 = <Ref<'_, &mut [u8]> as Deref>::deref(move _2088) -> [return: bb996, unwind: bb1414];
    }

    bb994: {
        StorageLive(_2079);
        _2079 = move ((_2075 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2081);
        _2081 = move _2079;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2081) -> [return: bb995, unwind: bb1538];
    }

    bb995: {
        StorageDead(_2081);
        StorageDead(_2079);
        _2920 = discriminant(_2075);
        StorageDead(_2075);
        goto -> bb1263;
    }

    bb996: {
        _2615 = deref_copy (*_2087);
        _2086 = &(*_2615);
        StorageDead(_2088);
        _2085 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _2086) -> [return: bb997, unwind: bb1414];
    }

    bb997: {
        StorageDead(_2086);
        _2084 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _2085) -> [return: bb998, unwind: bb1414];
    }

    bb998: {
        StorageDead(_2085);
        _2090 = discriminant(_2084);
        switchInt(move _2090) -> [0: bb999, 1: bb1000, otherwise: bb5];
    }

    bb999: {
        StorageLive(_2094);
        _2094 = move ((_2084 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _2083 = move _2094;
        StorageDead(_2094);
        _2856 = discriminant(_2084);
        StorageDead(_2089);
        StorageDead(_2087);
        StorageDead(_2084);
        StorageLive(_2095);
        StorageLive(_2096);
        StorageLive(_2097);
        StorageLive(_2098);
        _2098 = &_2083;
        _2097 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _2098) -> [return: bb1002, unwind: bb1414];
    }

    bb1000: {
        StorageLive(_2091);
        _2091 = move ((_2084 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2093);
        _2093 = move _2091;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2093) -> [return: bb1001, unwind: bb1537];
    }

    bb1001: {
        StorageDead(_2093);
        StorageDead(_2091);
        _2918 = discriminant(_2084);
        StorageDead(_2089);
        StorageDead(_2087);
        StorageDead(_2084);
        goto -> bb1262;
    }

    bb1002: {
        StorageDead(_2098);
        _2096 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _2097) -> [return: bb1003, unwind: bb1414];
    }

    bb1003: {
        StorageDead(_2097);
        _2099 = discriminant(_2096);
        switchInt(move _2099) -> [0: bb1004, 1: bb1005, otherwise: bb5];
    }

    bb1004: {
        StorageLive(_2103);
        _2103 = move ((_2096 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _2095 = move _2103;
        StorageDead(_2103);
        _2858 = discriminant(_2096);
        StorageDead(_2096);
        StorageLive(_2104);
        StorageLive(_2105);
        StorageLive(_2106);
        StorageLive(_2107);
        StorageLive(_2108);
        _2108 = &_2095;
        _2107 = &(*_2108);
        _2106 = <Vec<ExtensionType> as Deref>::deref(move _2107) -> [return: bb1007, unwind: bb1413];
    }

    bb1005: {
        StorageLive(_2100);
        _2100 = move ((_2096 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2102);
        _2102 = move _2100;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2102) -> [return: bb1006, unwind: bb1536];
    }

    bb1006: {
        StorageDead(_2102);
        StorageDead(_2100);
        _2916 = discriminant(_2096);
        StorageDead(_2096);
        StorageDead(_2095);
        goto -> bb1262;
    }

    bb1007: {
        _2105 = &(*_2106);
        StorageDead(_2107);
        _2104 = ExtensionType::get_required_init_account_extensions(move _2105) -> [return: bb1008, unwind: bb1413];
    }

    bb1008: {
        StorageDead(_2105);
        StorageDead(_2108);
        StorageDead(_2106);
        StorageLive(_2109);
        StorageLive(_2110);
        StorageLive(_2111);
        StorageLive(_2112);
        StorageLive(_2113);
        StorageLive(_2114);
        _2114 = &_2104;
        _2113 = &(*_2114);
        _2112 = <Vec<ExtensionType> as Deref>::deref(move _2113) -> [return: bb1009, unwind: bb1412];
    }

    bb1009: {
        _2111 = &(*_2112);
        StorageDead(_2113);
        _2110 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _2111) -> [return: bb1010, unwind: bb1412];
    }

    bb1010: {
        StorageDead(_2111);
        _2109 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _2110) -> [return: bb1011, unwind: bb1412];
    }

    bb1011: {
        _2638 = const true;
        StorageDead(_2110);
        _2115 = discriminant(_2109);
        switchInt(move _2115) -> [0: bb1012, 1: bb1013, otherwise: bb5];
    }

    bb1012: {
        StorageLive(_2119);
        _2119 = ((_2109 as Continue).0: usize);
        _2067 = _2119;
        StorageDead(_2119);
        drop(_2104) -> [return: bb1015, unwind: bb1410];
    }

    bb1013: {
        StorageLive(_2116);
        _2116 = move ((_2109 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2118);
        _2118 = move _2116;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2118) -> [return: bb1014, unwind: bb1409];
    }

    bb1014: {
        StorageDead(_2118);
        StorageDead(_2116);
        drop(_2104) -> [return: bb1259, unwind: bb1410];
    }

    bb1015: {
        StorageDead(_2104);
        drop(_2095) -> [return: bb1016, unwind: bb1411];
    }

    bb1016: {
        StorageDead(_2095);
        StorageDead(_2083);
        drop(_2074) -> [return: bb1017, unwind: bb1535];
    }

    bb1017: {
        StorageDead(_2074);
        _2860 = discriminant(_2109);
        StorageDead(_2114);
        StorageDead(_2112);
        _2638 = const false;
        StorageDead(_2109);
        goto -> bb1019;
    }

    bb1018: {
        StorageDead(_2073);
        StorageDead(_2072);
        StorageDead(_2071);
        _2067 = const _;
        goto -> bb1019;
    }

    bb1019: {
        StorageDead(_2070);
        drop(_2068) -> [return: bb1020, unwind: bb1540];
    }

    bb1020: {
        StorageDead(_2068);
        _2066 = move _2067 as u64 (IntToInt);
        StorageDead(_2067);
        _2639 = const false;
        _2036 = anchor_lang::system_program::allocate(move _2037, move _2066) -> [return: bb1021, unwind: bb1540];
    }

    bb1021: {
        StorageDead(_2066);
        _2639 = const false;
        StorageDead(_2037);
        _2035 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _2036) -> [return: bb1022, unwind: bb1544];
    }

    bb1022: {
        StorageDead(_2036);
        _2120 = discriminant(_2035);
        switchInt(move _2120) -> [0: bb1023, 1: bb1024, otherwise: bb5];
    }

    bb1023: {
        StorageLive(_2124);
        _2124 = ((_2035 as Continue).0: ());
        _2034 = _2124;
        StorageDead(_2124);
        _2862 = discriminant(_2035);
        StorageDead(_2062);
        StorageDead(_2060);
        StorageDead(_2059);
        StorageDead(_2056);
        StorageDead(_2054);
        StorageDead(_2051);
        StorageDead(_2049);
        StorageDead(_2047);
        StorageDead(_2045);
        StorageDead(_2044);
        StorageDead(_2042);
        StorageDead(_2041);
        StorageDead(_2035);
        StorageDead(_2034);
        StorageLive(_2125);
        StorageLive(_2126);
        StorageLive(_2127);
        _2127 = &(*_132);
        _2126 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2127) -> [return: bb1026, unwind: bb1544];
    }

    bb1024: {
        StorageLive(_2121);
        _2121 = move ((_2035 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_2123);
        _2123 = move _2121;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _2123) -> [return: bb1025, unwind: bb1534];
    }

    bb1025: {
        StorageDead(_2123);
        StorageDead(_2121);
        _2912 = discriminant(_2035);
        goto -> bb1267;
    }

    bb1026: {
        StorageDead(_2127);
        _2637 = const true;
        _2125 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _2126 };
        StorageDead(_2126);
        StorageLive(_2128);
        StorageLive(_2129);
        StorageLive(_2130);
        _2130 = &_201;
        _2129 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2130) -> [return: bb1027, unwind: bb1533];
    }

    bb1027: {
        StorageDead(_2130);
        StorageLive(_2131);
        _2637 = const false;
        _2131 = move _2125;
        _2128 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _2129, move _2131) -> [return: bb1028, unwind: bb1533];
    }

    bb1028: {
        StorageDead(_2131);
        StorageDead(_2129);
        StorageLive(_2132);
        StorageLive(_2133);
        StorageLive(_2134);
        StorageLive(_2135);
        StorageLive(_2136);
        _2636 = const true;
        _2136 = move _2128;
        StorageLive(_2137);
        StorageLive(_2138);
        StorageLive(_2139);
        StorageLive(_2140);
        StorageLive(_2141);
        StorageLive(_2142);
        StorageLive(_2143);
        StorageLive(_2144);
        StorageLive(_2145);
        StorageLive(_2146);
        StorageLive(_2147);
        StorageLive(_2148);
        StorageLive(_2149);
        StorageLive(_2150);
        _2150 = &_21;
        _2149 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _2150) -> [return: bb1029, unwind: bb1531];
    }

    bb1029: {
        _2148 = &_2149;
        StorageDead(_2150);
        _2147 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _2148) -> [return: bb1030, unwind: bb1531];
    }

    bb1030: {
        _2146 = &(*_2147);
        StorageDead(_2148);
        StorageLive(_2151);
        StorageLive(_2152);
        StorageLive(_2153);
        StorageLive(_2154);
        StorageLive(_2155);
        _3191 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _2155 = &(*_3191);
        _2154 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _2155) -> [return: bb1031, unwind: bb1531];
    }

    bb1031: {
        _2153 = &_2154;
        StorageDead(_2155);
        _2152 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _2153) -> [return: bb1032, unwind: bb1531];
    }

    bb1032: {
        _2151 = &(*_2152);
        StorageDead(_2153);
        StorageLive(_2156);
        StorageLive(_2157);
        StorageLive(_2158);
        StorageLive(_2159);
        StorageLive(_2160);
        StorageLive(_2161);
        _2161 = _1754;
        _2160 = [move _2161];
        _2159 = &_2160;
        StorageDead(_2161);
        StorageLive(_2162);
        _2162 = RangeFull;
        _2158 = <[u8; 1] as Index<RangeFull>>::index(move _2159, move _2162) -> [return: bb1033, unwind: bb1531];
    }

    bb1033: {
        StorageDead(_2162);
        StorageDead(_2159);
        _2157 = &(*_2158);
        _2156 = &(*_2157);
        _2145 = [const _, move _2146, move _2151, move _2156];
        _2144 = &_2145;
        StorageDead(_2156);
        StorageDead(_2151);
        StorageDead(_2146);
        StorageLive(_2163);
        _2163 = RangeFull;
        _2143 = <[&[u8]; 4] as Index<RangeFull>>::index(move _2144, move _2163) -> [return: bb1034, unwind: bb1531];
    }

    bb1034: {
        StorageDead(_2163);
        StorageDead(_2144);
        _2142 = &(*_2143);
        _2141 = &(*_2142);
        _2140 = [move _2141];
        StorageDead(_2141);
        _2139 = &_2140;
        _2138 = &(*_2139);
        _2137 = move _2138 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_2138);
        _2636 = const false;
        _2135 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _2136, move _2137) -> [return: bb1035, unwind: bb1531];
    }

    bb1035: {
        _2635 = const true;
        StorageDead(_2137);
        _2636 = const false;
        StorageDead(_2136);
        StorageLive(_2164);
        StorageLive(_2165);
        StorageLive(_2166);
        StorageLive(_2167);
        StorageLive(_2168);
        StorageLive(_2169);
        _2169 = &_186;
        _2168 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _2169) -> [return: bb1036, unwind: bb1529];
    }

    bb1036: {
        _2167 = &(*_2168);
        StorageDead(_2169);
        _2166 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2167) -> [return: bb1037, unwind: bb1529];
    }

    bb1037: {
        StorageDead(_2167);
        _2165 = &_2166;
        _2164 = &(*_2165);
        _2635 = const false;
        _2134 = anchor_lang::system_program::assign(move _2135, move _2164) -> [return: bb1038, unwind: bb1529];
    }

    bb1038: {
        StorageDead(_2164);
        _2635 = const false;
        StorageDead(_2135);
        _2133 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _2134) -> [return: bb1039, unwind: bb1533];
    }

    bb1039: {
        StorageDead(_2134);
        _2170 = discriminant(_2133);
        switchInt(move _2170) -> [0: bb1040, 1: bb1041, otherwise: bb5];
    }

    bb1040: {
        StorageLive(_2174);
        _2174 = ((_2133 as Continue).0: ());
        _2132 = _2174;
        StorageDead(_2174);
        _2864 = discriminant(_2133);
        StorageDead(_2168);
        StorageDead(_2166);
        StorageDead(_2165);
        StorageDead(_2160);
        StorageDead(_2158);
        StorageDead(_2157);
        StorageDead(_2154);
        StorageDead(_2152);
        StorageDead(_2149);
        StorageDead(_2147);
        StorageDead(_2145);
        StorageDead(_2143);
        StorageDead(_2142);
        StorageDead(_2140);
        StorageDead(_2139);
        StorageDead(_2133);
        StorageDead(_2132);
        _1804 = const ();
        StorageDead(_2128);
        _2637 = const false;
        StorageDead(_2125);
        StorageDead(_2030);
        _2641 = const false;
        StorageDead(_2027);
        StorageDead(_1947);
        goto -> bb1043;
    }

    bb1041: {
        StorageLive(_2171);
        _2171 = move ((_2133 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_2173);
        _2173 = move _2171;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _2173) -> [return: bb1042, unwind: bb1527];
    }

    bb1042: {
        StorageDead(_2173);
        StorageDead(_2171);
        _2910 = discriminant(_2133);
        StorageDead(_2168);
        StorageDead(_2166);
        StorageDead(_2165);
        StorageDead(_2160);
        StorageDead(_2158);
        StorageDead(_2157);
        StorageDead(_2154);
        StorageDead(_2152);
        StorageDead(_2149);
        StorageDead(_2147);
        StorageDead(_2145);
        StorageDead(_2143);
        StorageDead(_2142);
        StorageDead(_2140);
        StorageDead(_2139);
        StorageDead(_2133);
        StorageDead(_2132);
        StorageDead(_2128);
        _2637 = const false;
        StorageDead(_2125);
        goto -> bb1268;
    }

    bb1043: {
        StorageDead(_1805);
        StorageDead(_1804);
        StorageLive(_2175);
        StorageLive(_2176);
        _2176 = &_186;
        _2175 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2176) -> [return: bb1044, unwind: bb1435];
    }

    bb1044: {
        _2634 = const true;
        StorageDead(_2176);
        StorageLive(_2177);
        StorageLive(_2178);
        StorageLive(_2179);
        _2179 = &(*_132);
        _2178 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2179) -> [return: bb1045, unwind: bb1526];
    }

    bb1045: {
        StorageDead(_2179);
        StorageLive(_2180);
        StorageLive(_2181);
        _3192 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _2181 = &(*_3192);
        _2180 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2181) -> [return: bb1046, unwind: bb1408];
    }

    bb1046: {
        StorageDead(_2181);
        StorageLive(_2182);
        StorageLive(_2183);
        _2183 = &_36;
        _2182 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2183) -> [return: bb1047, unwind: bb1407];
    }

    bb1047: {
        StorageDead(_2183);
        _2177 = anchor_spl::token_2022::InitializeAccount3::<'_> { account: move _2178, mint: move _2180, authority: move _2182 };
        StorageDead(_2182);
        StorageDead(_2180);
        StorageDead(_2178);
        StorageLive(_2184);
        StorageLive(_2185);
        _2634 = const false;
        _2185 = move _2175;
        StorageLive(_2186);
        _2186 = move _2177;
        _2184 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>::new(move _2185, move _2186) -> [return: bb1048, unwind: bb1526];
    }

    bb1048: {
        StorageDead(_2186);
        StorageDead(_2185);
        StorageLive(_2187);
        StorageLive(_2188);
        StorageLive(_2189);
        StorageLive(_2190);
        _2190 = move _2184;
        _2189 = anchor_spl::token_2022::initialize_account3(move _2190) -> [return: bb1049, unwind: bb1526];
    }

    bb1049: {
        StorageDead(_2190);
        _2188 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _2189) -> [return: bb1050, unwind: bb1526];
    }

    bb1050: {
        StorageDead(_2189);
        _2191 = discriminant(_2188);
        switchInt(move _2191) -> [0: bb1051, 1: bb1052, otherwise: bb5];
    }

    bb1051: {
        StorageLive(_2195);
        _2195 = ((_2188 as Continue).0: ());
        _2187 = _2195;
        StorageDead(_2195);
        _2866 = discriminant(_2188);
        StorageDead(_2188);
        StorageDead(_2187);
        _1795 = const ();
        StorageDead(_2184);
        StorageDead(_2177);
        _2634 = const false;
        StorageDead(_2175);
        StorageDead(_1802);
        goto -> bb1055;
    }

    bb1052: {
        StorageLive(_2192);
        _2192 = move ((_2188 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_2194);
        _2194 = move _2192;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _2194) -> [return: bb1053, unwind: bb1524];
    }

    bb1053: {
        StorageDead(_2194);
        StorageDead(_2192);
        _2908 = discriminant(_2188);
        StorageDead(_2188);
        StorageDead(_2187);
        StorageDead(_2184);
        StorageDead(_2177);
        _2634 = const false;
        StorageDead(_2175);
        goto -> bb1286;
    }

    bb1054: {
        StorageDead(_1799);
        StorageDead(_1798);
        _1795 = const ();
        goto -> bb1055;
    }

    bb1055: {
        StorageDead(_1797);
        StorageDead(_1796);
        StorageDead(_1795);
        StorageLive(_2196);
        StorageLive(_2197);
        StorageLive(_2198);
        StorageLive(_2199);
        StorageLive(_2200);
        _2200 = &_132;
        _2616 = deref_copy (*_2200);
        _2199 = &(*_2616);
        _2198 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::try_from_unchecked(move _2199) -> [return: bb1056, unwind: bb1435];
    }

    bb1056: {
        _2632 = const true;
        _2633 = const true;
        StorageDead(_2199);
        _2201 = discriminant(_2198);
        switchInt(move _2201) -> [0: bb1058, 1: bb1057, otherwise: bb5];
    }

    bb1057: {
        StorageLive(_2203);
        _2203 = move ((_2198 as Err).0: anchor_lang::error::Error);
        StorageLive(_2205);
        StorageLive(_2206);
        _2206 = move _2203;
        _2205 = anchor_lang::error::Error::with_account_name::<&str>(move _2206, const "reserve_collateral_supply") -> [return: bb1059, unwind: bb1523];
    }

    bb1058: {
        StorageLive(_2202);
        _2202 = move ((_2198 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2197 = move _2202;
        StorageDead(_2202);
        _2196 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>::new(move _2197) -> [return: bb1060, unwind: bb1523];
    }

    bb1059: {
        StorageDead(_2206);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2205);
        StorageDead(_2205);
        StorageDead(_2203);
        StorageDead(_2197);
        _2906 = discriminant(_2198);
        StorageDead(_2200);
        _2632 = const false;
        _2633 = const false;
        StorageDead(_2198);
        goto -> bb1258;
    }

    bb1060: {
        StorageDead(_2197);
        _2868 = discriminant(_2198);
        StorageDead(_2200);
        _2632 = const false;
        _2633 = const false;
        StorageDead(_2198);
        StorageLive(_2207);
        StorageLive(_2208);
        _2208 = const false;
        switchInt(move _2208) -> [0: bb1096, otherwise: bb1061];
    }

    bb1061: {
        StorageLive(_2209);
        StorageLive(_2210);
        StorageLive(_2211);
        StorageLive(_2212);
        StorageLive(_2213);
        StorageLive(_2214);
        StorageLive(_2215);
        _3193 = (((_2196.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2215 = &(*_3193);
        _2214 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _2215) -> [return: bb1062, unwind: bb1406];
    }

    bb1062: {
        _2213 = &(*_2214);
        _2212 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _2213) -> [return: bb1063, unwind: bb1406];
    }

    bb1063: {
        StorageDead(_2215);
        StorageDead(_2213);
        _2211 = &((*_2212).0: anchor_lang::prelude::Pubkey);
        StorageLive(_2216);
        StorageLive(_2217);
        StorageLive(_2218);
        _3194 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _2218 = &(*_3194);
        _2217 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _2218) -> [return: bb1064, unwind: bb1406];
    }

    bb1064: {
        _2216 = &_2217;
        StorageDead(_2218);
        _2210 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2211, move _2216) -> [return: bb1065, unwind: bb1406];
    }

    bb1065: {
        switchInt(move _2210) -> [0: bb1073, otherwise: bb1066];
    }

    bb1066: {
        StorageDead(_2217);
        StorageDead(_2216);
        StorageDead(_2214);
        StorageDead(_2212);
        StorageDead(_2211);
        StorageLive(_2220);
        StorageLive(_2221);
        StorageLive(_2222);
        StorageLive(_2223);
        _2223 = ConstraintTokenMint;
        _2222 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2223) -> [return: bb1067, unwind: bb1406];
    }

    bb1067: {
        StorageDead(_2223);
        _2221 = anchor_lang::error::Error::with_account_name::<&str>(move _2222, const "reserve_collateral_supply") -> [return: bb1068, unwind: bb1406];
    }

    bb1068: {
        _2631 = const true;
        StorageDead(_2222);
        StorageLive(_2224);
        StorageLive(_2225);
        StorageLive(_2226);
        StorageLive(_2227);
        StorageLive(_2228);
        StorageLive(_2229);
        _3195 = (((_2196.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2229 = &(*_3195);
        _2228 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _2229) -> [return: bb1069, unwind: bb1522];
    }

    bb1069: {
        _2227 = &(*_2228);
        _2226 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _2227) -> [return: bb1070, unwind: bb1522];
    }

    bb1070: {
        StorageDead(_2229);
        StorageDead(_2227);
        _2225 = ((*_2226).0: anchor_lang::prelude::Pubkey);
        StorageLive(_2230);
        StorageLive(_2231);
        _3196 = (((_1382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _2231 = &(*_3196);
        _2230 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _2231) -> [return: bb1071, unwind: bb1522];
    }

    bb1071: {
        StorageDead(_2231);
        _2224 = (move _2225, move _2230);
        StorageDead(_2230);
        StorageDead(_2225);
        _2631 = const false;
        _2220 = anchor_lang::error::Error::with_pubkeys(move _2221, move _2224) -> [return: bb1072, unwind: bb1522];
    }

    bb1072: {
        StorageDead(_2224);
        _2631 = const false;
        StorageDead(_2221);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2220);
        StorageDead(_2220);
        StorageDead(_2228);
        StorageDead(_2226);
        StorageDead(_2210);
        StorageDead(_2209);
        goto -> bb1257;
    }

    bb1073: {
        StorageDead(_2217);
        StorageDead(_2216);
        StorageDead(_2214);
        StorageDead(_2212);
        StorageDead(_2211);
        _2209 = const ();
        StorageDead(_2210);
        StorageDead(_2209);
        StorageLive(_2232);
        StorageLive(_2233);
        StorageLive(_2234);
        StorageLive(_2235);
        StorageLive(_2236);
        StorageLive(_2237);
        StorageLive(_2238);
        _3197 = (((_2196.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2238 = &(*_3197);
        _2237 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _2238) -> [return: bb1074, unwind: bb1406];
    }

    bb1074: {
        _2236 = &(*_2237);
        _2235 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _2236) -> [return: bb1075, unwind: bb1406];
    }

    bb1075: {
        StorageDead(_2238);
        StorageDead(_2236);
        _2234 = &((*_2235).1: anchor_lang::prelude::Pubkey);
        StorageLive(_2239);
        StorageLive(_2240);
        StorageLive(_2241);
        _2241 = &_36;
        _2240 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2241) -> [return: bb1076, unwind: bb1406];
    }

    bb1076: {
        _2239 = &_2240;
        StorageDead(_2241);
        _2233 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2234, move _2239) -> [return: bb1077, unwind: bb1406];
    }

    bb1077: {
        switchInt(move _2233) -> [0: bb1085, otherwise: bb1078];
    }

    bb1078: {
        StorageDead(_2240);
        StorageDead(_2239);
        StorageDead(_2237);
        StorageDead(_2235);
        StorageDead(_2234);
        StorageLive(_2243);
        StorageLive(_2244);
        StorageLive(_2245);
        StorageLive(_2246);
        _2246 = ConstraintTokenOwner;
        _2245 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2246) -> [return: bb1079, unwind: bb1406];
    }

    bb1079: {
        StorageDead(_2246);
        _2244 = anchor_lang::error::Error::with_account_name::<&str>(move _2245, const "reserve_collateral_supply") -> [return: bb1080, unwind: bb1406];
    }

    bb1080: {
        _2630 = const true;
        StorageDead(_2245);
        StorageLive(_2247);
        StorageLive(_2248);
        StorageLive(_2249);
        StorageLive(_2250);
        StorageLive(_2251);
        StorageLive(_2252);
        _3198 = (((_2196.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2252 = &(*_3198);
        _2251 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _2252) -> [return: bb1081, unwind: bb1520];
    }

    bb1081: {
        _2250 = &(*_2251);
        _2249 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _2250) -> [return: bb1082, unwind: bb1520];
    }

    bb1082: {
        StorageDead(_2252);
        StorageDead(_2250);
        _2248 = ((*_2249).1: anchor_lang::prelude::Pubkey);
        StorageLive(_2253);
        StorageLive(_2254);
        _2254 = &_36;
        _2253 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2254) -> [return: bb1083, unwind: bb1520];
    }

    bb1083: {
        StorageDead(_2254);
        _2247 = (move _2248, move _2253);
        StorageDead(_2253);
        StorageDead(_2248);
        _2630 = const false;
        _2243 = anchor_lang::error::Error::with_pubkeys(move _2244, move _2247) -> [return: bb1084, unwind: bb1520];
    }

    bb1084: {
        StorageDead(_2247);
        _2630 = const false;
        StorageDead(_2244);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2243);
        StorageDead(_2243);
        StorageDead(_2251);
        StorageDead(_2249);
        StorageDead(_2233);
        StorageDead(_2232);
        goto -> bb1257;
    }

    bb1085: {
        StorageDead(_2240);
        StorageDead(_2239);
        StorageDead(_2237);
        StorageDead(_2235);
        StorageDead(_2234);
        _2232 = const ();
        StorageDead(_2233);
        StorageDead(_2232);
        StorageLive(_2255);
        StorageLive(_2256);
        _2256 = &_1790;
        StorageLive(_2257);
        StorageLive(_2258);
        StorageLive(_2259);
        StorageLive(_2260);
        StorageLive(_2261);
        StorageLive(_2262);
        _2262 = &_186;
        _2261 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _2262) -> [return: bb1086, unwind: bb1406];
    }

    bb1086: {
        _2260 = &(*_2261);
        StorageDead(_2262);
        _2259 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2260) -> [return: bb1087, unwind: bb1406];
    }

    bb1087: {
        StorageDead(_2260);
        _2258 = &_2259;
        _2257 = &_2258;
        _2255 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2256, move _2257) -> [return: bb1088, unwind: bb1406];
    }

    bb1088: {
        switchInt(move _2255) -> [0: bb1095, otherwise: bb1089];
    }

    bb1089: {
        StorageDead(_2261);
        StorageDead(_2259);
        StorageDead(_2258);
        StorageDead(_2257);
        StorageDead(_2256);
        StorageLive(_2264);
        StorageLive(_2265);
        StorageLive(_2266);
        StorageLive(_2267);
        _2267 = ConstraintTokenTokenProgram;
        _2266 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2267) -> [return: bb1090, unwind: bb1406];
    }

    bb1090: {
        StorageDead(_2267);
        _2265 = anchor_lang::error::Error::with_account_name::<&str>(move _2266, const "reserve_collateral_supply") -> [return: bb1091, unwind: bb1406];
    }

    bb1091: {
        _2629 = const true;
        StorageDead(_2266);
        StorageLive(_2268);
        StorageLive(_2269);
        _2269 = (*_1790);
        StorageLive(_2270);
        StorageLive(_2271);
        StorageLive(_2272);
        StorageLive(_2273);
        _2273 = &_186;
        _2272 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _2273) -> [return: bb1092, unwind: bb1518];
    }

    bb1092: {
        _2271 = &(*_2272);
        StorageDead(_2273);
        _2270 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2271) -> [return: bb1093, unwind: bb1518];
    }

    bb1093: {
        StorageDead(_2271);
        _2268 = (move _2269, move _2270);
        StorageDead(_2270);
        StorageDead(_2269);
        _2629 = const false;
        _2264 = anchor_lang::error::Error::with_pubkeys(move _2265, move _2268) -> [return: bb1094, unwind: bb1518];
    }

    bb1094: {
        StorageDead(_2268);
        _2629 = const false;
        StorageDead(_2265);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2264);
        StorageDead(_2264);
        StorageDead(_2272);
        StorageDead(_2255);
        goto -> bb1257;
    }

    bb1095: {
        StorageDead(_2261);
        StorageDead(_2259);
        StorageDead(_2258);
        StorageDead(_2257);
        StorageDead(_2256);
        _2207 = const ();
        StorageDead(_2255);
        goto -> bb1097;
    }

    bb1096: {
        _2207 = const ();
        goto -> bb1097;
    }

    bb1097: {
        StorageDead(_2208);
        StorageDead(_2207);
        _1789 = move _2196;
        StorageDead(_2196);
        StorageDead(_1790);
        StorageLive(_2274);
        StorageLive(_2275);
        StorageLive(_2276);
        StorageLive(_2277);
        StorageLive(_2278);
        StorageLive(_2279);
        _2279 = &_1789;
        _2278 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _2279) -> [return: bb1098, unwind: bb1405];
    }

    bb1098: {
        _2277 = &(*_2278);
        StorageDead(_2279);
        _2276 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _2277) -> [return: bb1099, unwind: bb1405];
    }

    bb1099: {
        StorageDead(_2277);
        _2275 = ((*_2276).6: bool);
        switchInt(move _2275) -> [0: bb1100, otherwise: bb1103];
    }

    bb1100: {
        StorageDead(_2278);
        StorageDead(_2276);
        StorageLive(_2281);
        StorageLive(_2282);
        StorageLive(_2283);
        _2283 = ConstraintMut;
        _2282 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2283) -> [return: bb1101, unwind: bb1405];
    }

    bb1101: {
        StorageDead(_2283);
        _2281 = anchor_lang::error::Error::with_account_name::<&str>(move _2282, const "reserve_collateral_supply") -> [return: bb1102, unwind: bb1405];
    }

    bb1102: {
        StorageDead(_2282);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2281);
        StorageDead(_2281);
        StorageDead(_2275);
        StorageDead(_2274);
        goto -> bb1256;
    }

    bb1103: {
        StorageDead(_2278);
        StorageDead(_2276);
        _2274 = const ();
        StorageDead(_2275);
        StorageDead(_2274);
        StorageLive(_2284);
        StorageLive(_2285);
        StorageLive(_2286);
        _2286 = &_1745;
        StorageLive(_2287);
        StorageLive(_2288);
        StorageLive(_2289);
        StorageLive(_2290);
        _3199 = (((_1789.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2290 = &(*_3199);
        _2289 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2290) -> [return: bb1104, unwind: bb1405];
    }

    bb1104: {
        _2288 = &_2289;
        StorageDead(_2290);
        _2287 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _2288) -> [return: bb1105, unwind: bb1404];
    }

    bb1105: {
        StorageDead(_2288);
        StorageLive(_2291);
        StorageLive(_2292);
        StorageLive(_2293);
        StorageLive(_2294);
        StorageLive(_2295);
        StorageLive(_2296);
        _3200 = (((_1789.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2296 = &(*_3200);
        _2295 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2296) -> [return: bb1106, unwind: bb1404];
    }

    bb1106: {
        _2294 = &_2295;
        StorageDead(_2296);
        _2293 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _2294) -> [return: bb1107, unwind: bb1403];
    }

    bb1107: {
        StorageDead(_2294);
        _2292 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _2293) -> [return: bb1108, unwind: bb1403];
    }

    bb1108: {
        _2628 = const true;
        StorageDead(_2293);
        _2297 = discriminant(_2292);
        switchInt(move _2297) -> [0: bb1109, 1: bb1110, otherwise: bb5];
    }

    bb1109: {
        StorageLive(_2301);
        _2301 = ((_2292 as Continue).0: usize);
        _2291 = _2301;
        StorageDead(_2301);
        _2285 = anchor_lang::prelude::Rent::is_exempt(move _2286, move _2287, move _2291) -> [return: bb1112, unwind: bb1516];
    }

    bb1110: {
        StorageLive(_2298);
        _2298 = move ((_2292 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2300);
        _2300 = move _2298;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2300) -> [return: bb1111, unwind: bb1516];
    }

    bb1111: {
        StorageDead(_2300);
        StorageDead(_2298);
        StorageDead(_2291);
        StorageDead(_2287);
        StorageDead(_2286);
        _2904 = discriminant(_2292);
        drop(_2295) -> [return: bb1253, unwind: bb1404];
    }

    bb1112: {
        switchInt(move _2285) -> [0: bb1114, otherwise: bb1113];
    }

    bb1113: {
        StorageDead(_2291);
        StorageDead(_2287);
        StorageDead(_2286);
        _2870 = discriminant(_2292);
        drop(_2295) -> [return: bb1119, unwind: bb1404];
    }

    bb1114: {
        StorageDead(_2291);
        StorageDead(_2287);
        StorageDead(_2286);
        _2872 = discriminant(_2292);
        drop(_2295) -> [return: bb1115, unwind: bb1404];
    }

    bb1115: {
        StorageDead(_2295);
        _2628 = const false;
        StorageDead(_2292);
        drop(_2289) -> [return: bb1116, unwind: bb1405];
    }

    bb1116: {
        StorageDead(_2289);
        StorageLive(_2303);
        StorageLive(_2304);
        StorageLive(_2305);
        _2305 = ConstraintRentExempt;
        _2304 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2305) -> [return: bb1117, unwind: bb1405];
    }

    bb1117: {
        StorageDead(_2305);
        _2303 = anchor_lang::error::Error::with_account_name::<&str>(move _2304, const "reserve_collateral_supply") -> [return: bb1118, unwind: bb1405];
    }

    bb1118: {
        StorageDead(_2304);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2303);
        StorageDead(_2303);
        goto -> bb1255;
    }

    bb1119: {
        StorageDead(_2295);
        _2628 = const false;
        StorageDead(_2292);
        drop(_2289) -> [return: bb1120, unwind: bb1405];
    }

    bb1120: {
        StorageDead(_2289);
        _2284 = const ();
        StorageDead(_2285);
        StorageDead(_2284);
        StorageLive(_2306);
        StorageLive(_2307);
        StorageLive(_2308);
        StorageLive(_2309);
        StorageLive(_2310);
        _2310 = &_6;
        _2309 = &(*_2310);
        _2308 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _2309) -> [return: bb1121, unwind: bb1405];
    }

    bb1121: {
        StorageDead(_2309);
        _2307 = ((*_2308).6: bool);
        switchInt(move _2307) -> [0: bb1122, otherwise: bb1125];
    }

    bb1122: {
        StorageDead(_2310);
        StorageDead(_2308);
        StorageLive(_2312);
        StorageLive(_2313);
        StorageLive(_2314);
        _2314 = ConstraintMut;
        _2313 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2314) -> [return: bb1123, unwind: bb1405];
    }

    bb1123: {
        StorageDead(_2314);
        _2312 = anchor_lang::error::Error::with_account_name::<&str>(move _2313, const "lending_market_owner") -> [return: bb1124, unwind: bb1405];
    }

    bb1124: {
        StorageDead(_2313);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2312);
        StorageDead(_2312);
        StorageDead(_2307);
        StorageDead(_2306);
        goto -> bb1256;
    }

    bb1125: {
        StorageDead(_2310);
        StorageDead(_2308);
        _2306 = const ();
        StorageDead(_2307);
        StorageDead(_2306);
        StorageLive(_2315);
        StorageLive(_2316);
        StorageLive(_2317);
        StorageLive(_2318);
        StorageLive(_2319);
        StorageLive(_2320);
        StorageLive(_2321);
        StorageLive(_2322);
        _2322 = &_21;
        _2321 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _2322) -> [return: bb1126, unwind: bb1405];
    }

    bb1126: {
        StorageDead(_2322);
        _2320 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _2321) -> [return: bb1127, unwind: bb1405];
    }

    bb1127: {
        _2626 = const true;
        _2627 = const true;
        StorageDead(_2321);
        _2323 = discriminant(_2320);
        switchInt(move _2323) -> [0: bb1128, 1: bb1129, otherwise: bb5];
    }

    bb1128: {
        StorageLive(_2327);
        _2327 = move ((_2320 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _2319 = move _2327;
        StorageDead(_2327);
        _2318 = &_2319;
        _2317 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _2318) -> [return: bb1131, unwind: bb1402];
    }

    bb1129: {
        StorageLive(_2324);
        _2324 = move ((_2320 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_2326);
        _2326 = move _2324;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _2326) -> [return: bb1130, unwind: bb1515];
    }

    bb1130: {
        StorageDead(_2326);
        StorageDead(_2324);
        StorageDead(_2318);
        _2902 = discriminant(_2320);
        _2626 = const false;
        _2627 = const false;
        StorageDead(_2320);
        StorageDead(_2319);
        StorageDead(_2317);
        goto -> bb1252;
    }

    bb1131: {
        StorageDead(_2318);
        _2316 = ((*_2317).2: anchor_lang::prelude::Pubkey);
        drop(_2319) -> [return: bb1504, unwind: bb1515];
    }

    bb1132: {
        StorageDead(_2329);
        StorageLive(_2330);
        StorageLive(_2331);
        _2331 = &_2316;
        StorageLive(_2332);
        _2332 = &_2328;
        _2330 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2331, move _2332) -> [return: bb1133, unwind: bb1405];
    }

    bb1133: {
        switchInt(move _2330) -> [0: bb1138, otherwise: bb1134];
    }

    bb1134: {
        StorageDead(_2332);
        StorageDead(_2331);
        StorageLive(_2334);
        StorageLive(_2335);
        StorageLive(_2336);
        StorageLive(_2337);
        _2337 = LendingError::InvalidMarketOwner;
        _2336 = <anchor_lang::error::Error as From<LendingError>>::from(move _2337) -> [return: bb1135, unwind: bb1405];
    }

    bb1135: {
        StorageDead(_2337);
        _2335 = anchor_lang::error::Error::with_account_name::<&str>(move _2336, const "lending_market") -> [return: bb1136, unwind: bb1405];
    }

    bb1136: {
        StorageDead(_2336);
        StorageLive(_2338);
        StorageLive(_2339);
        _2339 = _2316;
        StorageLive(_2340);
        _2340 = _2328;
        _2338 = (move _2339, move _2340);
        StorageDead(_2340);
        StorageDead(_2339);
        _2334 = anchor_lang::error::Error::with_pubkeys(move _2335, move _2338) -> [return: bb1137, unwind: bb1405];
    }

    bb1137: {
        StorageDead(_2338);
        StorageDead(_2335);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2334);
        StorageDead(_2334);
        StorageDead(_2330);
        StorageDead(_2328);
        goto -> bb1252;
    }

    bb1138: {
        StorageDead(_2332);
        StorageDead(_2331);
        _2315 = const ();
        StorageDead(_2330);
        StorageDead(_2328);
        StorageDead(_2316);
        StorageDead(_2315);
        StorageLive(_2341);
        StorageLive(_2342);
        StorageLive(_2343);
        StorageLive(_2344);
        StorageLive(_2345);
        StorageLive(_2346);
        StorageLive(_2347);
        StorageLive(_2348);
        StorageLive(_2349);
        StorageLive(_2350);
        _2350 = const _;
        _2349 = &(*_2350);
        StorageLive(_2351);
        StorageLive(_2352);
        StorageLive(_2353);
        StorageLive(_2354);
        StorageLive(_2355);
        _2355 = &_21;
        _2354 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _2355) -> [return: bb1139, unwind: bb1405];
    }

    bb1139: {
        _2353 = &_2354;
        StorageDead(_2355);
        _2352 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _2353) -> [return: bb1140, unwind: bb1405];
    }

    bb1140: {
        _2351 = &(*_2352);
        StorageDead(_2353);
        StorageLive(_2356);
        StorageLive(_2357);
        StorageLive(_2358);
        StorageLive(_2359);
        StorageLive(_2360);
        StorageLive(_2361);
        StorageLive(_2362);
        StorageLive(_2363);
        StorageLive(_2364);
        StorageLive(_2365);
        StorageLive(_2366);
        StorageLive(_2367);
        StorageLive(_2368);
        _2368 = &_21;
        _2367 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _2368) -> [return: bb1141, unwind: bb1405];
    }

    bb1141: {
        StorageDead(_2368);
        _2366 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _2367) -> [return: bb1142, unwind: bb1405];
    }

    bb1142: {
        _2620 = const true;
        _2621 = const true;
        StorageDead(_2367);
        _2369 = discriminant(_2366);
        switchInt(move _2369) -> [0: bb1143, 1: bb1144, otherwise: bb5];
    }

    bb1143: {
        StorageLive(_2373);
        _2373 = move ((_2366 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _2365 = move _2373;
        StorageDead(_2373);
        _2364 = &_2365;
        _2363 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _2364) -> [return: bb1146, unwind: bb1401];
    }

    bb1144: {
        StorageLive(_2370);
        _2370 = move ((_2366 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_2372);
        _2372 = move _2370;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _2372) -> [return: bb1145, unwind: bb1514];
    }

    bb1145: {
        StorageDead(_2372);
        StorageDead(_2370);
        StorageDead(_2364);
        StorageDead(_2362);
        StorageDead(_2361);
        StorageDead(_2359);
        StorageDead(_2356);
        StorageDead(_2351);
        StorageDead(_2349);
        StorageDead(_2346);
        StorageDead(_2345);
        StorageDead(_2344);
        StorageDead(_2343);
        goto -> bb1506;
    }

    bb1146: {
        StorageDead(_2364);
        _2362 = ((*_2363).1: u64);
        _2361 = move _2362 as u8 (IntToInt);
        StorageDead(_2362);
        _2360 = [move _2361];
        _2359 = &_2360;
        StorageDead(_2361);
        StorageLive(_2374);
        _2374 = RangeFull;
        _2358 = <[u8; 1] as Index<RangeFull>>::index(move _2359, move _2374) -> [return: bb1147, unwind: bb1401];
    }

    bb1147: {
        StorageDead(_2374);
        StorageDead(_2359);
        _2357 = &(*_2358);
        _2356 = &(*_2357);
        _2348 = [move _2349, move _2351, move _2356];
        StorageDead(_2356);
        StorageDead(_2351);
        StorageDead(_2349);
        _2347 = &_2348;
        _2346 = &(*_2347);
        _2345 = move _2346 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_2346);
        StorageLive(_2375);
        StorageLive(_2376);
        _2376 = &_1;
        _2617 = deref_copy (*_2376);
        _2375 = &(*_2617);
        _2344 = anchor_lang::prelude::Pubkey::create_program_address(move _2345, move _2375) -> [return: bb1148, unwind: bb1401];
    }

    bb1148: {
        StorageDead(_2375);
        StorageDead(_2345);
        StorageLive(_2377);
        _2377 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
        _2343 = std::result::Result::<anchor_lang::prelude::Pubkey, PubkeyError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _2344, move _2377) -> [return: bb1149, unwind: bb1401];
    }

    bb1149: {
        StorageDead(_2377);
        StorageDead(_2344);
        _2342 = <std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::error::Error> as Try>::branch(move _2343) -> [return: bb1150, unwind: bb1401];
    }

    bb1150: {
        StorageDead(_2343);
        _2378 = discriminant(_2342);
        switchInt(move _2378) -> [0: bb1151, 1: bb1152, otherwise: bb5];
    }

    bb1151: {
        StorageLive(_2382);
        _2382 = ((_2342 as Continue).0: anchor_lang::prelude::Pubkey);
        _2341 = _2382;
        StorageDead(_2382);
        _2876 = discriminant(_2342);
        StorageDead(_2376);
        drop(_2365) -> [return: bb1505, unwind: bb1514];
    }

    bb1152: {
        StorageLive(_2379);
        _2379 = move ((_2342 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_2381);
        _2381 = move _2379;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _2381) -> [return: bb1153, unwind: bb1513];
    }

    bb1153: {
        StorageDead(_2381);
        StorageDead(_2379);
        _2898 = discriminant(_2342);
        StorageDead(_2376);
        drop(_2365) -> [return: bb1506, unwind: bb1514];
    }

    bb1154: {
        _2385 = &_2386;
        StorageDead(_2387);
        StorageLive(_2388);
        _2388 = &_2341;
        _2384 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2385, move _2388) -> [return: bb1155, unwind: bb1405];
    }

    bb1155: {
        switchInt(move _2384) -> [0: bb1161, otherwise: bb1156];
    }

    bb1156: {
        StorageDead(_2388);
        StorageDead(_2386);
        StorageDead(_2385);
        StorageLive(_2390);
        StorageLive(_2391);
        StorageLive(_2392);
        StorageLive(_2393);
        _2393 = ConstraintSeeds;
        _2392 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2393) -> [return: bb1157, unwind: bb1405];
    }

    bb1157: {
        StorageDead(_2393);
        _2391 = anchor_lang::error::Error::with_account_name::<&str>(move _2392, const "lending_market_authority") -> [return: bb1158, unwind: bb1405];
    }

    bb1158: {
        _2625 = const true;
        StorageDead(_2392);
        StorageLive(_2394);
        StorageLive(_2395);
        StorageLive(_2396);
        _2396 = &_36;
        _2395 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2396) -> [return: bb1159, unwind: bb1512];
    }

    bb1159: {
        StorageDead(_2396);
        StorageLive(_2397);
        _2397 = _2341;
        _2394 = (move _2395, move _2397);
        StorageDead(_2397);
        StorageDead(_2395);
        _2625 = const false;
        _2390 = anchor_lang::error::Error::with_pubkeys(move _2391, move _2394) -> [return: bb1160, unwind: bb1512];
    }

    bb1160: {
        StorageDead(_2394);
        _2625 = const false;
        StorageDead(_2391);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2390);
        StorageDead(_2390);
        StorageDead(_2384);
        StorageDead(_2383);
        goto -> bb1251;
    }

    bb1161: {
        StorageDead(_2388);
        StorageDead(_2386);
        StorageDead(_2385);
        _2383 = const ();
        StorageDead(_2384);
        StorageDead(_2383);
        StorageLive(_2398);
        StorageLive(_2399);
        StorageLive(_2400);
        _2400 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1162, unwind: bb1405];
    }

    bb1162: {
        _2399 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _2400) -> [return: bb1163, unwind: bb1405];
    }

    bb1163: {
        StorageDead(_2400);
        _2401 = discriminant(_2399);
        switchInt(move _2401) -> [0: bb1164, 1: bb1165, otherwise: bb5];
    }

    bb1164: {
        StorageLive(_2405);
        _2405 = ((_2399 as Continue).0: anchor_lang::prelude::Rent);
        _2398 = _2405;
        StorageDead(_2405);
        _2880 = discriminant(_2399);
        StorageDead(_2399);
        StorageLive(_2406);
        StorageLive(_2407);
        StorageLive(_2408);
        StorageLive(_2409);
        StorageLive(_2410);
        StorageLive(_2411);
        StorageLive(_2412);
        StorageLive(_2413);
        StorageLive(_2414);
        _2414 = &(*_57);
        _2413 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _2414) -> [return: bb1167, unwind: bb1405];
    }

    bb1165: {
        StorageLive(_2402);
        _2402 = move ((_2399 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2404);
        _2404 = move _2402;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2404) -> [return: bb1166, unwind: bb1510];
    }

    bb1166: {
        StorageDead(_2404);
        StorageDead(_2402);
        _2896 = discriminant(_2399);
        StorageDead(_2399);
        goto -> bb1250;
    }

    bb1167: {
        StorageDead(_2414);
        _2412 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _2413) -> [return: bb1168, unwind: bb1405];
    }

    bb1168: {
        StorageDead(_2413);
        _2415 = discriminant(_2412);
        switchInt(move _2415) -> [0: bb1169, 1: bb1170, otherwise: bb5];
    }

    bb1169: {
        StorageLive(_2419);
        _2419 = move ((_2412 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _2411 = move _2419;
        StorageDead(_2419);
        _2410 = &_2411;
        _2409 = &(*_2410);
        _2408 = <Ref<'_, &mut [u8]> as Deref>::deref(move _2409) -> [return: bb1172, unwind: bb1399];
    }

    bb1170: {
        StorageLive(_2416);
        _2416 = move ((_2412 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2418);
        _2418 = move _2416;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2418) -> [return: bb1171, unwind: bb1509];
    }

    bb1171: {
        StorageDead(_2418);
        StorageDead(_2416);
        StorageDead(_2409);
        _2894 = discriminant(_2412);
        StorageDead(_2412);
        StorageDead(_2410);
        StorageDead(_2408);
        goto -> bb1248;
    }

    bb1172: {
        _2618 = deref_copy (*_2408);
        _2407 = &(*_2618);
        StorageDead(_2409);
        _2882 = discriminant(_2412);
        StorageDead(_2412);
        StorageDead(_2410);
        StorageDead(_2408);
        StorageLive(_2420);
        _2420 = [const 0_u8; 8];
        StorageLive(_2421);
        StorageLive(_2422);
        StorageLive(_2423);
        _2423 = &mut _2420;
        _2422 = move _2423 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_2423);
        StorageLive(_2424);
        StorageLive(_2425);
        StorageLive(_2426);
        StorageLive(_2427);
        _2427 = &(*_2407);
        StorageLive(_2428);
        _2428 = RangeTo::<usize> { end: const 8_usize };
        _2426 = <[u8] as Index<RangeTo<usize>>>::index(move _2427, move _2428) -> [return: bb1173, unwind: bb1400];
    }

    bb1173: {
        StorageDead(_2428);
        StorageDead(_2427);
        _2425 = &(*_2426);
        _2424 = &(*_2425);
        _2421 = core::slice::<impl [u8]>::copy_from_slice(move _2422, move _2424) -> [return: bb1174, unwind: bb1400];
    }

    bb1174: {
        StorageDead(_2424);
        StorageDead(_2422);
        StorageDead(_2426);
        StorageDead(_2425);
        StorageDead(_2421);
        StorageLive(_2429);
        StorageLive(_2430);
        _2430 = _2420;
        _2429 = core::num::<impl u64>::from_le_bytes(move _2430) -> [return: bb1175, unwind: bb1400];
    }

    bb1175: {
        StorageDead(_2430);
        StorageLive(_2431);
        StorageLive(_2432);
        StorageLive(_2433);
        _2433 = _2429;
        _2432 = Ne(move _2433, const 0_u64);
        switchInt(move _2432) -> [0: bb1179, otherwise: bb1176];
    }

    bb1176: {
        StorageDead(_2433);
        StorageLive(_2435);
        StorageLive(_2436);
        StorageLive(_2437);
        _2437 = ConstraintZero;
        _2436 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2437) -> [return: bb1177, unwind: bb1400];
    }

    bb1177: {
        StorageDead(_2437);
        _2435 = anchor_lang::error::Error::with_account_name::<&str>(move _2436, const "reserve") -> [return: bb1178, unwind: bb1400];
    }

    bb1178: {
        StorageDead(_2436);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2435);
        StorageDead(_2435);
        StorageDead(_2432);
        StorageDead(_2431);
        StorageDead(_2429);
        StorageDead(_2420);
        drop(_2411) -> [return: bb1248, unwind: bb1405];
    }

    bb1179: {
        StorageDead(_2433);
        _2431 = const ();
        StorageDead(_2432);
        StorageDead(_2431);
        StorageLive(_2438);
        StorageLive(_2439);
        _2439 = &(*_1);
        StorageLive(_2440);
        StorageLive(_2441);
        _2441 = &_57;
        _2619 = deref_copy (*_2441);
        _2440 = &(*_2619);
        _2438 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::try_from_unchecked(move _2439, move _2440) -> [return: bb1180, unwind: bb1400];
    }

    bb1180: {
        _2623 = const true;
        _2624 = const true;
        StorageDead(_2440);
        StorageDead(_2439);
        _2442 = discriminant(_2438);
        switchInt(move _2442) -> [0: bb1182, 1: bb1181, otherwise: bb5];
    }

    bb1181: {
        StorageLive(_2444);
        _2444 = move ((_2438 as Err).0: anchor_lang::error::Error);
        StorageLive(_2446);
        StorageLive(_2447);
        _2447 = move _2444;
        _2446 = anchor_lang::error::Error::with_account_name::<&str>(move _2447, const "reserve") -> [return: bb1183, unwind: bb1398];
    }

    bb1182: {
        StorageLive(_2443);
        _2443 = move ((_2438 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _2406 = move _2443;
        StorageDead(_2443);
        StorageDead(_2429);
        StorageDead(_2420);
        drop(_2411) -> [return: bb1184, unwind: bb1508];
    }

    bb1183: {
        StorageDead(_2447);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2446);
        StorageDead(_2446);
        StorageDead(_2444);
        StorageDead(_2429);
        StorageDead(_2420);
        drop(_2411) -> [return: bb1247, unwind: bb1508];
    }

    bb1184: {
        StorageDead(_2411);
        StorageDead(_2407);
        _2884 = discriminant(_2438);
        StorageDead(_2441);
        _2623 = const false;
        _2624 = const false;
        StorageDead(_2438);
        StorageLive(_2448);
        StorageLive(_2449);
        StorageLive(_2450);
        StorageLive(_2451);
        StorageLive(_2452);
        _2452 = &_2406;
        _2451 = &(*_2452);
        _2450 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _2451) -> [return: bb1185, unwind: bb1405];
    }

    bb1185: {
        StorageDead(_2451);
        _2449 = ((*_2450).6: bool);
        switchInt(move _2449) -> [0: bb1186, otherwise: bb1189];
    }

    bb1186: {
        StorageDead(_2452);
        StorageDead(_2450);
        StorageLive(_2454);
        StorageLive(_2455);
        StorageLive(_2456);
        _2456 = ConstraintMut;
        _2455 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2456) -> [return: bb1187, unwind: bb1405];
    }

    bb1187: {
        StorageDead(_2456);
        _2454 = anchor_lang::error::Error::with_account_name::<&str>(move _2455, const "reserve") -> [return: bb1188, unwind: bb1405];
    }

    bb1188: {
        StorageDead(_2455);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2454);
        StorageDead(_2454);
        StorageDead(_2449);
        StorageDead(_2448);
        goto -> bb1249;
    }

    bb1189: {
        StorageDead(_2452);
        StorageDead(_2450);
        _2448 = const ();
        StorageDead(_2449);
        StorageDead(_2448);
        StorageLive(_2457);
        StorageLive(_2458);
        StorageLive(_2459);
        _2459 = &_2398;
        StorageLive(_2460);
        StorageLive(_2461);
        StorageLive(_2462);
        StorageLive(_2463);
        _2463 = &_2406;
        _2462 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2463) -> [return: bb1190, unwind: bb1405];
    }

    bb1190: {
        _2461 = &_2462;
        StorageDead(_2463);
        _2460 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _2461) -> [return: bb1191, unwind: bb1397];
    }

    bb1191: {
        StorageDead(_2461);
        StorageLive(_2464);
        StorageLive(_2465);
        StorageLive(_2466);
        StorageLive(_2467);
        StorageLive(_2468);
        StorageLive(_2469);
        _2469 = &_2406;
        _2468 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _2469) -> [return: bb1192, unwind: bb1397];
    }

    bb1192: {
        _2467 = &_2468;
        StorageDead(_2469);
        _2466 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _2467) -> [return: bb1193, unwind: bb1396];
    }

    bb1193: {
        StorageDead(_2467);
        _2465 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _2466) -> [return: bb1194, unwind: bb1396];
    }

    bb1194: {
        _2622 = const true;
        StorageDead(_2466);
        _2470 = discriminant(_2465);
        switchInt(move _2470) -> [0: bb1195, 1: bb1196, otherwise: bb5];
    }

    bb1195: {
        StorageLive(_2474);
        _2474 = ((_2465 as Continue).0: usize);
        _2464 = _2474;
        StorageDead(_2474);
        _2458 = anchor_lang::prelude::Rent::is_exempt(move _2459, move _2460, move _2464) -> [return: bb1198, unwind: bb1507];
    }

    bb1196: {
        StorageLive(_2471);
        _2471 = move ((_2465 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_2473);
        _2473 = move _2471;
        _0 = <std::result::Result<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _2473) -> [return: bb1197, unwind: bb1507];
    }

    bb1197: {
        StorageDead(_2473);
        StorageDead(_2471);
        StorageDead(_2464);
        StorageDead(_2460);
        StorageDead(_2459);
        _2890 = discriminant(_2465);
        drop(_2468) -> [return: bb1244, unwind: bb1397];
    }

    bb1198: {
        switchInt(move _2458) -> [0: bb1200, otherwise: bb1199];
    }

    bb1199: {
        StorageDead(_2464);
        StorageDead(_2460);
        StorageDead(_2459);
        _2886 = discriminant(_2465);
        drop(_2468) -> [return: bb1205, unwind: bb1397];
    }

    bb1200: {
        StorageDead(_2464);
        StorageDead(_2460);
        StorageDead(_2459);
        _2888 = discriminant(_2465);
        drop(_2468) -> [return: bb1201, unwind: bb1397];
    }

    bb1201: {
        StorageDead(_2468);
        _2622 = const false;
        StorageDead(_2465);
        drop(_2462) -> [return: bb1202, unwind: bb1405];
    }

    bb1202: {
        StorageDead(_2462);
        StorageLive(_2476);
        StorageLive(_2477);
        StorageLive(_2478);
        _2478 = ConstraintRentExempt;
        _2477 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2478) -> [return: bb1203, unwind: bb1405];
    }

    bb1203: {
        StorageDead(_2478);
        _2476 = anchor_lang::error::Error::with_account_name::<&str>(move _2477, const "reserve") -> [return: bb1204, unwind: bb1405];
    }

    bb1204: {
        StorageDead(_2477);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2476);
        StorageDead(_2476);
        goto -> bb1246;
    }

    bb1205: {
        StorageDead(_2468);
        _2622 = const false;
        StorageDead(_2465);
        drop(_2462) -> [return: bb1206, unwind: bb1405];
    }

    bb1206: {
        StorageDead(_2462);
        _2457 = const ();
        StorageDead(_2458);
        StorageDead(_2457);
        StorageLive(_2479);
        StorageLive(_2480);
        StorageLive(_2481);
        StorageLive(_2482);
        StorageLive(_2483);
        StorageLive(_2484);
        StorageLive(_2485);
        _2485 = &_66;
        _2484 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _2485) -> [return: bb1207, unwind: bb1405];
    }

    bb1207: {
        _2483 = &(*_2484);
        StorageDead(_2485);
        _2482 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _2483) -> [return: bb1208, unwind: bb1405];
    }

    bb1208: {
        StorageDead(_2483);
        _2481 = &((*_2482).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_2486);
        StorageLive(_2487);
        StorageLive(_2488);
        StorageLive(_2489);
        StorageLive(_2490);
        StorageLive(_2491);
        _2491 = &_171;
        _2490 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _2491) -> [return: bb1209, unwind: bb1405];
    }

    bb1209: {
        _2489 = &(*_2490);
        StorageDead(_2491);
        _2488 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2489) -> [return: bb1210, unwind: bb1405];
    }

    bb1210: {
        StorageDead(_2489);
        _2487 = &_2488;
        _2486 = &_2487;
        _2480 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2481, move _2486) -> [return: bb1211, unwind: bb1405];
    }

    bb1211: {
        switchInt(move _2480) -> [0: bb1214, otherwise: bb1212];
    }

    bb1212: {
        StorageDead(_2490);
        StorageDead(_2488);
        StorageDead(_2487);
        StorageDead(_2486);
        StorageDead(_2484);
        StorageDead(_2482);
        StorageDead(_2481);
        StorageLive(_2493);
        StorageLive(_2494);
        _2494 = ConstraintMintTokenProgram;
        _2493 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _2494) -> [return: bb1213, unwind: bb1405];
    }

    bb1213: {
        StorageDead(_2494);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2493);
        StorageDead(_2493);
        StorageDead(_2480);
        StorageDead(_2479);
        goto -> bb1249;
    }

    bb1214: {
        StorageDead(_2490);
        StorageDead(_2488);
        StorageDead(_2487);
        StorageDead(_2486);
        StorageDead(_2484);
        StorageDead(_2482);
        StorageDead(_2481);
        _2479 = const ();
        StorageDead(_2480);
        StorageDead(_2479);
        StorageLive(_2495);
        StorageLive(_2496);
        StorageLive(_2497);
        StorageLive(_2498);
        StorageLive(_2499);
        StorageLive(_2500);
        _2500 = &_141;
        _2499 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _2500) -> [return: bb1215, unwind: bb1405];
    }

    bb1215: {
        _2498 = &(*_2499);
        StorageDead(_2500);
        _2497 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _2498) -> [return: bb1216, unwind: bb1405];
    }

    bb1216: {
        StorageDead(_2498);
        _2496 = ((*_2497).6: bool);
        switchInt(move _2496) -> [0: bb1217, otherwise: bb1220];
    }

    bb1217: {
        StorageDead(_2499);
        StorageDead(_2497);
        StorageLive(_2502);
        StorageLive(_2503);
        StorageLive(_2504);
        _2504 = ConstraintMut;
        _2503 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _2504) -> [return: bb1218, unwind: bb1405];
    }

    bb1218: {
        StorageDead(_2504);
        _2502 = anchor_lang::error::Error::with_account_name::<&str>(move _2503, const "initial_liquidity_source") -> [return: bb1219, unwind: bb1405];
    }

    bb1219: {
        StorageDead(_2503);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2502);
        StorageDead(_2502);
        StorageDead(_2496);
        StorageDead(_2495);
        goto -> bb1249;
    }

    bb1220: {
        StorageDead(_2499);
        StorageDead(_2497);
        _2495 = const ();
        StorageDead(_2496);
        StorageDead(_2495);
        StorageLive(_2505);
        StorageLive(_2506);
        StorageLive(_2507);
        StorageLive(_2508);
        StorageLive(_2509);
        StorageLive(_2510);
        StorageLive(_2511);
        StorageLive(_2512);
        _3201 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2512 = &(*_3201);
        _2511 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _2512) -> [return: bb1221, unwind: bb1405];
    }

    bb1221: {
        _2510 = &(*_2511);
        _2509 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _2510) -> [return: bb1222, unwind: bb1405];
    }

    bb1222: {
        StorageDead(_2512);
        StorageDead(_2510);
        _2508 = &((*_2509).1: anchor_lang::prelude::Pubkey);
        StorageLive(_2513);
        StorageLive(_2514);
        StorageLive(_2515);
        _2515 = &_6;
        _2514 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _2515) -> [return: bb1223, unwind: bb1405];
    }

    bb1223: {
        _2513 = &_2514;
        StorageDead(_2515);
        _2507 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2508, move _2513) -> [return: bb1224, unwind: bb1405];
    }

    bb1224: {
        switchInt(move _2507) -> [0: bb1227, otherwise: bb1225];
    }

    bb1225: {
        StorageDead(_2514);
        StorageDead(_2513);
        StorageDead(_2511);
        StorageDead(_2509);
        StorageDead(_2508);
        StorageLive(_2517);
        StorageLive(_2518);
        _2518 = ConstraintTokenOwner;
        _2517 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _2518) -> [return: bb1226, unwind: bb1405];
    }

    bb1226: {
        StorageDead(_2518);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2517);
        StorageDead(_2517);
        StorageDead(_2507);
        StorageDead(_2506);
        goto -> bb1243;
    }

    bb1227: {
        StorageDead(_2514);
        StorageDead(_2513);
        StorageDead(_2511);
        StorageDead(_2509);
        StorageDead(_2508);
        _2506 = const ();
        StorageDead(_2507);
        StorageDead(_2506);
        StorageLive(_2519);
        StorageLive(_2520);
        StorageLive(_2521);
        StorageLive(_2522);
        StorageLive(_2523);
        StorageLive(_2524);
        StorageLive(_2525);
        _3202 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _2525 = &(*_3202);
        _2524 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _2525) -> [return: bb1228, unwind: bb1405];
    }

    bb1228: {
        _2523 = &(*_2524);
        _2522 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _2523) -> [return: bb1229, unwind: bb1405];
    }

    bb1229: {
        StorageDead(_2525);
        StorageDead(_2523);
        _2521 = &((*_2522).0: anchor_lang::prelude::Pubkey);
        StorageLive(_2526);
        StorageLive(_2527);
        StorageLive(_2528);
        _3203 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _2528 = &(*_3203);
        _2527 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _2528) -> [return: bb1230, unwind: bb1405];
    }

    bb1230: {
        _2526 = &_2527;
        StorageDead(_2528);
        _2520 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2521, move _2526) -> [return: bb1231, unwind: bb1405];
    }

    bb1231: {
        switchInt(move _2520) -> [0: bb1234, otherwise: bb1232];
    }

    bb1232: {
        StorageDead(_2527);
        StorageDead(_2526);
        StorageDead(_2524);
        StorageDead(_2522);
        StorageDead(_2521);
        StorageLive(_2530);
        StorageLive(_2531);
        _2531 = ConstraintTokenMint;
        _2530 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _2531) -> [return: bb1233, unwind: bb1405];
    }

    bb1233: {
        StorageDead(_2531);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2530);
        StorageDead(_2530);
        StorageDead(_2520);
        StorageDead(_2519);
        goto -> bb1243;
    }

    bb1234: {
        StorageDead(_2527);
        StorageDead(_2526);
        StorageDead(_2524);
        StorageDead(_2522);
        StorageDead(_2521);
        _2519 = const ();
        StorageDead(_2520);
        StorageDead(_2519);
        StorageLive(_2532);
        StorageLive(_2533);
        StorageLive(_2534);
        StorageLive(_2535);
        StorageLive(_2536);
        StorageLive(_2537);
        _2537 = &_141;
        _2536 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _2537) -> [return: bb1235, unwind: bb1405];
    }

    bb1235: {
        _2535 = &(*_2536);
        StorageDead(_2537);
        _2534 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _2535) -> [return: bb1236, unwind: bb1405];
    }

    bb1236: {
        StorageDead(_2535);
        _2533 = &((*_2534).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_2538);
        StorageLive(_2539);
        StorageLive(_2540);
        StorageLive(_2541);
        StorageLive(_2542);
        StorageLive(_2543);
        _2543 = &_171;
        _2542 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _2543) -> [return: bb1237, unwind: bb1405];
    }

    bb1237: {
        _2541 = &(*_2542);
        StorageDead(_2543);
        _2540 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2541) -> [return: bb1238, unwind: bb1405];
    }

    bb1238: {
        StorageDead(_2541);
        _2539 = &_2540;
        _2538 = &_2539;
        _2532 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _2533, move _2538) -> [return: bb1239, unwind: bb1405];
    }

    bb1239: {
        switchInt(move _2532) -> [0: bb1242, otherwise: bb1240];
    }

    bb1240: {
        StorageDead(_2542);
        StorageDead(_2540);
        StorageDead(_2539);
        StorageDead(_2538);
        StorageDead(_2536);
        StorageDead(_2534);
        StorageDead(_2533);
        StorageLive(_2545);
        StorageLive(_2546);
        _2546 = ConstraintTokenTokenProgram;
        _2545 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _2546) -> [return: bb1241, unwind: bb1405];
    }

    bb1241: {
        StorageDead(_2546);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Err(move _2545);
        StorageDead(_2545);
        StorageDead(_2532);
        goto -> bb1243;
    }

    bb1242: {
        StorageDead(_2542);
        StorageDead(_2540);
        StorageDead(_2539);
        StorageDead(_2538);
        StorageDead(_2536);
        StorageDead(_2534);
        StorageDead(_2533);
        _2505 = const ();
        StorageDead(_2532);
        StorageDead(_2505);
        StorageLive(_2547);
        StorageLive(_2548);
        _2548 = move _6;
        StorageLive(_2549);
        _2549 = move _21;
        StorageLive(_2550);
        _2550 = move _36;
        StorageLive(_2551);
        _2551 = move _2406;
        StorageLive(_2552);
        _2552 = move _66;
        StorageLive(_2553);
        _2553 = move _260;
        StorageLive(_2554);
        _2554 = move _821;
        StorageLive(_2555);
        _2555 = move _1382;
        StorageLive(_2556);
        _2556 = move _1789;
        StorageLive(_2557);
        _2557 = move _141;
        StorageLive(_2558);
        _2558 = move _156;
        StorageLive(_2559);
        _2559 = move _171;
        StorageLive(_2560);
        _2560 = move _186;
        StorageLive(_2561);
        _2561 = move _201;
        _2547 = handlers::handler_init_reserve::InitReserve::<'_> { lending_market_owner: move _2548, lending_market: move _2549, lending_market_authority: move _2550, reserve: move _2551, reserve_liquidity_mint: move _2552, reserve_liquidity_supply: move _2553, fee_receiver: move _2554, reserve_collateral_mint: move _2555, reserve_collateral_supply: move _2556, initial_liquidity_source: move _2557, rent: move _2558, liquidity_token_program: move _2559, collateral_token_program: move _2560, system_program: move _2561 };
        StorageDead(_2561);
        StorageDead(_2560);
        StorageDead(_2559);
        StorageDead(_2558);
        StorageDead(_2557);
        StorageDead(_2556);
        StorageDead(_2555);
        StorageDead(_2554);
        StorageDead(_2553);
        StorageDead(_2552);
        StorageDead(_2551);
        StorageDead(_2550);
        StorageDead(_2549);
        StorageDead(_2548);
        _0 = std::result::Result::<handlers::handler_init_reserve::InitReserve<'_>, anchor_lang::error::Error>::Ok(move _2547);
        StorageDead(_2547);
        StorageDead(_2406);
        StorageDead(_2398);
        StorageDead(_2341);
        StorageDead(_1789);
        StorageDead(_1754);
        StorageDead(_1753);
        StorageDead(_1745);
        StorageDead(_1382);
        StorageDead(_1347);
        StorageDead(_1346);
        StorageDead(_1338);
        StorageDead(_821);
        StorageDead(_786);
        StorageDead(_785);
        StorageDead(_777);
        StorageDead(_260);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_216);
        StorageDead(_201);
        StorageDead(_186);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_66);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb1395;
    }

    bb1243: {
        StorageDead(_2505);
        goto -> bb1249;
    }

    bb1244: {
        StorageDead(_2468);
        _2622 = const false;
        StorageDead(_2465);
        drop(_2462) -> [return: bb1245, unwind: bb1405];
    }

    bb1245: {
        StorageDead(_2462);
        goto -> bb1246;
    }

    bb1246: {
        StorageDead(_2458);
        StorageDead(_2457);
        goto -> bb1249;
    }

    bb1247: {
        StorageDead(_2411);
        StorageDead(_2407);
        _2892 = discriminant(_2438);
        StorageDead(_2441);
        _2623 = const false;
        _2624 = const false;
        StorageDead(_2438);
        goto -> bb1249;
    }

    bb1248: {
        StorageDead(_2411);
        StorageDead(_2407);
        goto -> bb1249;
    }

    bb1249: {
        StorageDead(_2406);
        goto -> bb1250;
    }

    bb1250: {
        StorageDead(_2398);
        goto -> bb1251;
    }

    bb1251: {
        StorageDead(_2341);
        goto -> bb1256;
    }

    bb1252: {
        StorageDead(_2316);
        StorageDead(_2315);
        goto -> bb1256;
    }

    bb1253: {
        StorageDead(_2295);
        _2628 = const false;
        StorageDead(_2292);
        drop(_2289) -> [return: bb1254, unwind: bb1405];
    }

    bb1254: {
        StorageDead(_2289);
        goto -> bb1255;
    }

    bb1255: {
        StorageDead(_2285);
        StorageDead(_2284);
        goto -> bb1256;
    }

    bb1256: {
        drop(_1789) -> [return: bb1288, unwind: bb1435];
    }

    bb1257: {
        StorageDead(_2208);
        StorageDead(_2207);
        drop(_2196) -> [return: bb1258, unwind: bb1435];
    }

    bb1258: {
        StorageDead(_2196);
        goto -> bb1287;
    }

    bb1259: {
        StorageDead(_2104);
        drop(_2095) -> [return: bb1260, unwind: bb1411];
    }

    bb1260: {
        StorageDead(_2095);
        StorageDead(_2083);
        drop(_2074) -> [return: bb1261, unwind: bb1535];
    }

    bb1261: {
        StorageDead(_2074);
        _2914 = discriminant(_2109);
        StorageDead(_2114);
        StorageDead(_2112);
        _2638 = const false;
        StorageDead(_2109);
        goto -> bb1264;
    }

    bb1262: {
        StorageDead(_2083);
        drop(_2074) -> [return: bb1263, unwind: bb1415];
    }

    bb1263: {
        StorageDead(_2074);
        goto -> bb1264;
    }

    bb1264: {
        StorageDead(_2070);
        drop(_2068) -> [return: bb1265, unwind: bb1540];
    }

    bb1265: {
        StorageDead(_2068);
        StorageDead(_2067);
        StorageDead(_2066);
        drop(_2037) -> [return: bb1266, unwind: bb1544];
    }

    bb1266: {
        _2639 = const false;
        StorageDead(_2037);
        StorageDead(_2036);
        goto -> bb1267;
    }

    bb1267: {
        StorageDead(_2062);
        StorageDead(_2060);
        StorageDead(_2059);
        StorageDead(_2056);
        StorageDead(_2054);
        StorageDead(_2051);
        StorageDead(_2049);
        StorageDead(_2047);
        StorageDead(_2045);
        StorageDead(_2044);
        StorageDead(_2042);
        StorageDead(_2041);
        StorageDead(_2035);
        StorageDead(_2034);
        goto -> bb1268;
    }

    bb1268: {
        StorageDead(_2030);
        _2641 = const false;
        StorageDead(_2027);
        goto -> bb1276;
    }

    bb1269: {
        StorageDead(_1988);
        drop(_1979) -> [return: bb1270, unwind: bb1419];
    }

    bb1270: {
        StorageDead(_1979);
        StorageDead(_1967);
        drop(_1958) -> [return: bb1271, unwind: bb1548];
    }

    bb1271: {
        StorageDead(_1958);
        _2924 = discriminant(_1993);
        StorageDead(_1998);
        StorageDead(_1996);
        _2643 = const false;
        StorageDead(_1993);
        goto -> bb1274;
    }

    bb1272: {
        StorageDead(_1967);
        drop(_1958) -> [return: bb1273, unwind: bb1423];
    }

    bb1273: {
        StorageDead(_1958);
        goto -> bb1274;
    }

    bb1274: {
        StorageDead(_1954);
        drop(_1952) -> [return: bb1275, unwind: bb1435];
    }

    bb1275: {
        StorageDead(_1952);
        StorageDead(_1951);
        StorageDead(_1950);
        StorageDead(_1949);
        StorageDead(_1948);
        goto -> bb1276;
    }

    bb1276: {
        StorageDead(_1947);
        goto -> bb1285;
    }

    bb1277: {
        StorageDead(_1844);
        drop(_1835) -> [return: bb1278, unwind: bb1428];
    }

    bb1278: {
        StorageDead(_1835);
        StorageDead(_1823);
        drop(_1814) -> [return: bb1279, unwind: bb1561];
    }

    bb1279: {
        StorageDead(_1814);
        _2934 = discriminant(_1849);
        StorageDead(_1854);
        StorageDead(_1852);
        _2648 = const false;
        StorageDead(_1849);
        goto -> bb1282;
    }

    bb1280: {
        StorageDead(_1823);
        drop(_1814) -> [return: bb1281, unwind: bb1432];
    }

    bb1281: {
        StorageDead(_1814);
        goto -> bb1282;
    }

    bb1282: {
        StorageDead(_1810);
        drop(_1808) -> [return: bb1283, unwind: bb1435];
    }

    bb1283: {
        StorageDead(_1808);
        goto -> bb1284;
    }

    bb1284: {
        StorageDead(_1807);
        goto -> bb1285;
    }

    bb1285: {
        StorageDead(_1805);
        StorageDead(_1804);
        goto -> bb1286;
    }

    bb1286: {
        StorageDead(_1802);
        StorageDead(_1797);
        StorageDead(_1796);
        StorageDead(_1795);
        goto -> bb1287;
    }

    bb1287: {
        StorageDead(_1790);
        goto -> bb1288;
    }

    bb1288: {
        StorageDead(_1789);
        goto -> bb1289;
    }

    bb1289: {
        StorageDead(_1754);
        StorageDead(_1753);
        goto -> bb1290;
    }

    bb1290: {
        StorageDead(_1745);
        goto -> bb1294;
    }

    bb1291: {
        StorageDead(_1734);
        _2650 = const false;
        StorageDead(_1731);
        drop(_1728) -> [return: bb1292, unwind: bb1435];
    }

    bb1292: {
        StorageDead(_1728);
        goto -> bb1293;
    }

    bb1293: {
        StorageDead(_1724);
        StorageDead(_1723);
        goto -> bb1294;
    }

    bb1294: {
        drop(_1382) -> [return: bb1302, unwind: bb1442];
    }

    bb1295: {
        StorageDead(_1643);
        StorageDead(_1642);
        drop(_1631) -> [return: bb1296, unwind: bb1442];
    }

    bb1296: {
        StorageDead(_1631);
        goto -> bb1301;
    }

    bb1297: {
        StorageDead(_1517);
        _2661 = const false;
        StorageDead(_1514);
        goto -> bb1298;
    }

    bb1298: {
        StorageDead(_1487);
        goto -> bb1299;
    }

    bb1299: {
        StorageDead(_1397);
        StorageDead(_1396);
        goto -> bb1300;
    }

    bb1300: {
        StorageDead(_1394);
        StorageDead(_1389);
        StorageDead(_1388);
        StorageDead(_1387);
        goto -> bb1301;
    }

    bb1301: {
        StorageDead(_1383);
        goto -> bb1302;
    }

    bb1302: {
        StorageDead(_1382);
        goto -> bb1303;
    }

    bb1303: {
        StorageDead(_1347);
        StorageDead(_1346);
        goto -> bb1304;
    }

    bb1304: {
        StorageDead(_1338);
        goto -> bb1308;
    }

    bb1305: {
        StorageDead(_1327);
        _2668 = const false;
        StorageDead(_1324);
        drop(_1321) -> [return: bb1306, unwind: bb1442];
    }

    bb1306: {
        StorageDead(_1321);
        goto -> bb1307;
    }

    bb1307: {
        StorageDead(_1317);
        StorageDead(_1316);
        goto -> bb1308;
    }

    bb1308: {
        drop(_821) -> [return: bb1340, unwind: bb1472];
    }

    bb1309: {
        StorageDead(_1240);
        StorageDead(_1239);
        drop(_1228) -> [return: bb1310, unwind: bb1472];
    }

    bb1310: {
        StorageDead(_1228);
        goto -> bb1339;
    }

    bb1311: {
        StorageDead(_1136);
        drop(_1127) -> [return: bb1312, unwind: bb1448];
    }

    bb1312: {
        StorageDead(_1127);
        StorageDead(_1115);
        drop(_1106) -> [return: bb1313, unwind: bb1625];
    }

    bb1313: {
        StorageDead(_1106);
        _2970 = discriminant(_1141);
        StorageDead(_1146);
        StorageDead(_1144);
        _2678 = const false;
        StorageDead(_1141);
        goto -> bb1316;
    }

    bb1314: {
        StorageDead(_1115);
        drop(_1106) -> [return: bb1315, unwind: bb1452];
    }

    bb1315: {
        StorageDead(_1106);
        goto -> bb1316;
    }

    bb1316: {
        StorageDead(_1102);
        drop(_1100) -> [return: bb1317, unwind: bb1630];
    }

    bb1317: {
        StorageDead(_1100);
        StorageDead(_1099);
        StorageDead(_1098);
        drop(_1069) -> [return: bb1318, unwind: bb1634];
    }

    bb1318: {
        _2679 = const false;
        StorageDead(_1069);
        StorageDead(_1068);
        goto -> bb1319;
    }

    bb1319: {
        StorageDead(_1094);
        StorageDead(_1092);
        StorageDead(_1091);
        StorageDead(_1088);
        StorageDead(_1086);
        StorageDead(_1083);
        StorageDead(_1081);
        StorageDead(_1079);
        StorageDead(_1077);
        StorageDead(_1076);
        StorageDead(_1074);
        StorageDead(_1073);
        StorageDead(_1067);
        StorageDead(_1066);
        goto -> bb1320;
    }

    bb1320: {
        StorageDead(_1062);
        _2681 = const false;
        StorageDead(_1059);
        goto -> bb1328;
    }

    bb1321: {
        StorageDead(_1020);
        drop(_1011) -> [return: bb1322, unwind: bb1456];
    }

    bb1322: {
        StorageDead(_1011);
        StorageDead(_999);
        drop(_990) -> [return: bb1323, unwind: bb1638];
    }

    bb1323: {
        StorageDead(_990);
        _2980 = discriminant(_1025);
        StorageDead(_1030);
        StorageDead(_1028);
        _2683 = const false;
        StorageDead(_1025);
        goto -> bb1326;
    }

    bb1324: {
        StorageDead(_999);
        drop(_990) -> [return: bb1325, unwind: bb1460];
    }

    bb1325: {
        StorageDead(_990);
        goto -> bb1326;
    }

    bb1326: {
        StorageDead(_986);
        drop(_984) -> [return: bb1327, unwind: bb1472];
    }

    bb1327: {
        StorageDead(_984);
        StorageDead(_983);
        StorageDead(_982);
        StorageDead(_981);
        StorageDead(_980);
        goto -> bb1328;
    }

    bb1328: {
        StorageDead(_979);
        goto -> bb1337;
    }

    bb1329: {
        StorageDead(_876);
        drop(_867) -> [return: bb1330, unwind: bb1465];
    }

    bb1330: {
        StorageDead(_867);
        StorageDead(_855);
        drop(_846) -> [return: bb1331, unwind: bb1651];
    }

    bb1331: {
        StorageDead(_846);
        _2990 = discriminant(_881);
        StorageDead(_886);
        StorageDead(_884);
        _2688 = const false;
        StorageDead(_881);
        goto -> bb1334;
    }

    bb1332: {
        StorageDead(_855);
        drop(_846) -> [return: bb1333, unwind: bb1469];
    }

    bb1333: {
        StorageDead(_846);
        goto -> bb1334;
    }

    bb1334: {
        StorageDead(_842);
        drop(_840) -> [return: bb1335, unwind: bb1472];
    }

    bb1335: {
        StorageDead(_840);
        goto -> bb1336;
    }

    bb1336: {
        StorageDead(_839);
        goto -> bb1337;
    }

    bb1337: {
        StorageDead(_837);
        StorageDead(_836);
        goto -> bb1338;
    }

    bb1338: {
        StorageDead(_834);
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_827);
        goto -> bb1339;
    }

    bb1339: {
        StorageDead(_822);
        goto -> bb1340;
    }

    bb1340: {
        StorageDead(_821);
        goto -> bb1341;
    }

    bb1341: {
        StorageDead(_786);
        StorageDead(_785);
        goto -> bb1342;
    }

    bb1342: {
        StorageDead(_777);
        goto -> bb1346;
    }

    bb1343: {
        StorageDead(_766);
        _2690 = const false;
        StorageDead(_763);
        drop(_760) -> [return: bb1344, unwind: bb1472];
    }

    bb1344: {
        StorageDead(_760);
        goto -> bb1345;
    }

    bb1345: {
        StorageDead(_756);
        StorageDead(_755);
        goto -> bb1346;
    }

    bb1346: {
        drop(_260) -> [return: bb1378, unwind: bb1500];
    }

    bb1347: {
        StorageDead(_679);
        StorageDead(_678);
        drop(_667) -> [return: bb1348, unwind: bb1500];
    }

    bb1348: {
        StorageDead(_667);
        goto -> bb1377;
    }

    bb1349: {
        StorageDead(_575);
        drop(_566) -> [return: bb1350, unwind: bb1478];
    }

    bb1350: {
        StorageDead(_566);
        StorageDead(_554);
        drop(_545) -> [return: bb1351, unwind: bb1677];
    }

    bb1351: {
        StorageDead(_545);
        _3010 = discriminant(_580);
        StorageDead(_585);
        StorageDead(_583);
        _2700 = const false;
        StorageDead(_580);
        goto -> bb1354;
    }

    bb1352: {
        StorageDead(_554);
        drop(_545) -> [return: bb1353, unwind: bb1482];
    }

    bb1353: {
        StorageDead(_545);
        goto -> bb1354;
    }

    bb1354: {
        StorageDead(_541);
        drop(_539) -> [return: bb1355, unwind: bb1682];
    }

    bb1355: {
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_537);
        drop(_508) -> [return: bb1356, unwind: bb1686];
    }

    bb1356: {
        _2701 = const false;
        StorageDead(_508);
        StorageDead(_507);
        goto -> bb1357;
    }

    bb1357: {
        StorageDead(_533);
        StorageDead(_531);
        StorageDead(_530);
        StorageDead(_527);
        StorageDead(_525);
        StorageDead(_522);
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_506);
        StorageDead(_505);
        goto -> bb1358;
    }

    bb1358: {
        StorageDead(_501);
        _2703 = const false;
        StorageDead(_498);
        goto -> bb1366;
    }

    bb1359: {
        StorageDead(_459);
        drop(_450) -> [return: bb1360, unwind: bb1486];
    }

    bb1360: {
        StorageDead(_450);
        StorageDead(_438);
        drop(_429) -> [return: bb1361, unwind: bb1690];
    }

    bb1361: {
        StorageDead(_429);
        _3020 = discriminant(_464);
        StorageDead(_469);
        StorageDead(_467);
        _2705 = const false;
        StorageDead(_464);
        goto -> bb1364;
    }

    bb1362: {
        StorageDead(_438);
        drop(_429) -> [return: bb1363, unwind: bb1490];
    }

    bb1363: {
        StorageDead(_429);
        goto -> bb1364;
    }

    bb1364: {
        StorageDead(_425);
        drop(_423) -> [return: bb1365, unwind: bb1500];
    }

    bb1365: {
        StorageDead(_423);
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_419);
        goto -> bb1366;
    }

    bb1366: {
        StorageDead(_418);
        goto -> bb1375;
    }

    bb1367: {
        StorageDead(_315);
        drop(_306) -> [return: bb1368, unwind: bb1495];
    }

    bb1368: {
        StorageDead(_306);
        StorageDead(_294);
        drop(_285) -> [return: bb1369, unwind: bb1703];
    }

    bb1369: {
        StorageDead(_285);
        _3030 = discriminant(_320);
        StorageDead(_325);
        StorageDead(_323);
        _2710 = const false;
        StorageDead(_320);
        goto -> bb1372;
    }

    bb1370: {
        StorageDead(_294);
        drop(_285) -> [return: bb1371, unwind: bb1499];
    }

    bb1371: {
        StorageDead(_285);
        goto -> bb1372;
    }

    bb1372: {
        StorageDead(_281);
        drop(_279) -> [return: bb1373, unwind: bb1500];
    }

    bb1373: {
        StorageDead(_279);
        goto -> bb1374;
    }

    bb1374: {
        StorageDead(_278);
        goto -> bb1375;
    }

    bb1375: {
        StorageDead(_276);
        StorageDead(_275);
        goto -> bb1376;
    }

    bb1376: {
        StorageDead(_273);
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_266);
        goto -> bb1377;
    }

    bb1377: {
        StorageDead(_261);
        goto -> bb1378;
    }

    bb1378: {
        StorageDead(_260);
        goto -> bb1379;
    }

    bb1379: {
        StorageDead(_225);
        StorageDead(_224);
        goto -> bb1380;
    }

    bb1380: {
        StorageDead(_216);
        goto -> bb1381;
    }

    bb1381: {
        StorageDead(_201);
        goto -> bb1382;
    }

    bb1382: {
        StorageDead(_186);
        goto -> bb1383;
    }

    bb1383: {
        StorageDead(_171);
        goto -> bb1384;
    }

    bb1384: {
        StorageDead(_156);
        drop(_141) -> [return: bb1385, unwind: bb1501];
    }

    bb1385: {
        StorageDead(_141);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb1386;
    }

    bb1386: {
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb1387;
    }

    bb1387: {
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb1388;
    }

    bb1388: {
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb1389;
    }

    bb1389: {
        drop(_66) -> [return: bb1390, unwind: bb1502];
    }

    bb1390: {
        StorageDead(_66);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb1391;
    }

    bb1391: {
        drop(_36) -> [return: bb1392, unwind: bb1503];
    }

    bb1392: {
        StorageDead(_36);
        goto -> bb1393;
    }

    bb1393: {
        StorageDead(_21);
        goto -> bb1394;
    }

    bb1394: {
        StorageDead(_6);
        goto -> bb1395;
    }

    bb1395: {
        return;
    }

    bb1396 (cleanup): {
        drop(_2468) -> [return: bb1397, unwind terminate(cleanup)];
    }

    bb1397 (cleanup): {
        drop(_2462) -> [return: bb1405, unwind terminate(cleanup)];
    }

    bb1398 (cleanup): {
        drop(_2411) -> [return: bb1508, unwind terminate(cleanup)];
    }

    bb1399 (cleanup): {
        _3060 = discriminant(_2412);
        goto -> bb1400;
    }

    bb1400 (cleanup): {
        drop(_2411) -> [return: bb1405, unwind terminate(cleanup)];
    }

    bb1401 (cleanup): {
        drop(_2365) -> [return: bb1514, unwind terminate(cleanup)];
    }

    bb1402 (cleanup): {
        drop(_2319) -> [return: bb1515, unwind terminate(cleanup)];
    }

    bb1403 (cleanup): {
        drop(_2295) -> [return: bb1404, unwind terminate(cleanup)];
    }

    bb1404 (cleanup): {
        drop(_2289) -> [return: bb1405, unwind terminate(cleanup)];
    }

    bb1405 (cleanup): {
        drop(_1789) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1406 (cleanup): {
        drop(_2196) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1407 (cleanup): {
        drop(_2180) -> [return: bb1408, unwind terminate(cleanup)];
    }

    bb1408 (cleanup): {
        drop(_2178) -> [return: bb1526, unwind terminate(cleanup)];
    }

    bb1409 (cleanup): {
        drop(_2104) -> [return: bb1410, unwind terminate(cleanup)];
    }

    bb1410 (cleanup): {
        drop(_2095) -> [return: bb1411, unwind terminate(cleanup)];
    }

    bb1411 (cleanup): {
        drop(_2074) -> [return: bb1535, unwind terminate(cleanup)];
    }

    bb1412 (cleanup): {
        drop(_2104) -> [return: bb1413, unwind terminate(cleanup)];
    }

    bb1413 (cleanup): {
        drop(_2095) -> [return: bb1414, unwind terminate(cleanup)];
    }

    bb1414 (cleanup): {
        drop(_2074) -> [return: bb1415, unwind terminate(cleanup)];
    }

    bb1415 (cleanup): {
        drop(_2068) -> [return: bb1540, unwind terminate(cleanup)];
    }

    bb1416 (cleanup): {
        drop(_2009) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1417 (cleanup): {
        drop(_1988) -> [return: bb1418, unwind terminate(cleanup)];
    }

    bb1418 (cleanup): {
        drop(_1979) -> [return: bb1419, unwind terminate(cleanup)];
    }

    bb1419 (cleanup): {
        drop(_1958) -> [return: bb1548, unwind terminate(cleanup)];
    }

    bb1420 (cleanup): {
        drop(_1988) -> [return: bb1421, unwind terminate(cleanup)];
    }

    bb1421 (cleanup): {
        drop(_1979) -> [return: bb1422, unwind terminate(cleanup)];
    }

    bb1422 (cleanup): {
        drop(_1958) -> [return: bb1423, unwind terminate(cleanup)];
    }

    bb1423 (cleanup): {
        drop(_1952) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1424 (cleanup): {
        drop(_1930) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1425 (cleanup): {
        drop(_1864) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1426 (cleanup): {
        drop(_1844) -> [return: bb1427, unwind terminate(cleanup)];
    }

    bb1427 (cleanup): {
        drop(_1835) -> [return: bb1428, unwind terminate(cleanup)];
    }

    bb1428 (cleanup): {
        drop(_1814) -> [return: bb1561, unwind terminate(cleanup)];
    }

    bb1429 (cleanup): {
        drop(_1844) -> [return: bb1430, unwind terminate(cleanup)];
    }

    bb1430 (cleanup): {
        drop(_1835) -> [return: bb1431, unwind terminate(cleanup)];
    }

    bb1431 (cleanup): {
        drop(_1814) -> [return: bb1432, unwind terminate(cleanup)];
    }

    bb1432 (cleanup): {
        drop(_1808) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1433 (cleanup): {
        drop(_1734) -> [return: bb1434, unwind terminate(cleanup)];
    }

    bb1434 (cleanup): {
        drop(_1728) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1435 (cleanup): {
        drop(_1382) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1436 (cleanup): {
        drop(_1631) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1437 (cleanup): {
        drop(_1496) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1438 (cleanup): {
        drop(_1470) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1439 (cleanup): {
        drop(_1404) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1440 (cleanup): {
        drop(_1327) -> [return: bb1441, unwind terminate(cleanup)];
    }

    bb1441 (cleanup): {
        drop(_1321) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1442 (cleanup): {
        drop(_821) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1443 (cleanup): {
        drop(_1228) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1444 (cleanup): {
        drop(_1212) -> [return: bb1445, unwind terminate(cleanup)];
    }

    bb1445 (cleanup): {
        drop(_1210) -> [return: bb1616, unwind terminate(cleanup)];
    }

    bb1446 (cleanup): {
        drop(_1136) -> [return: bb1447, unwind terminate(cleanup)];
    }

    bb1447 (cleanup): {
        drop(_1127) -> [return: bb1448, unwind terminate(cleanup)];
    }

    bb1448 (cleanup): {
        drop(_1106) -> [return: bb1625, unwind terminate(cleanup)];
    }

    bb1449 (cleanup): {
        drop(_1136) -> [return: bb1450, unwind terminate(cleanup)];
    }

    bb1450 (cleanup): {
        drop(_1127) -> [return: bb1451, unwind terminate(cleanup)];
    }

    bb1451 (cleanup): {
        drop(_1106) -> [return: bb1452, unwind terminate(cleanup)];
    }

    bb1452 (cleanup): {
        drop(_1100) -> [return: bb1630, unwind terminate(cleanup)];
    }

    bb1453 (cleanup): {
        drop(_1041) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1454 (cleanup): {
        drop(_1020) -> [return: bb1455, unwind terminate(cleanup)];
    }

    bb1455 (cleanup): {
        drop(_1011) -> [return: bb1456, unwind terminate(cleanup)];
    }

    bb1456 (cleanup): {
        drop(_990) -> [return: bb1638, unwind terminate(cleanup)];
    }

    bb1457 (cleanup): {
        drop(_1020) -> [return: bb1458, unwind terminate(cleanup)];
    }

    bb1458 (cleanup): {
        drop(_1011) -> [return: bb1459, unwind terminate(cleanup)];
    }

    bb1459 (cleanup): {
        drop(_990) -> [return: bb1460, unwind terminate(cleanup)];
    }

    bb1460 (cleanup): {
        drop(_984) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1461 (cleanup): {
        drop(_962) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1462 (cleanup): {
        drop(_896) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1463 (cleanup): {
        drop(_876) -> [return: bb1464, unwind terminate(cleanup)];
    }

    bb1464 (cleanup): {
        drop(_867) -> [return: bb1465, unwind terminate(cleanup)];
    }

    bb1465 (cleanup): {
        drop(_846) -> [return: bb1651, unwind terminate(cleanup)];
    }

    bb1466 (cleanup): {
        drop(_876) -> [return: bb1467, unwind terminate(cleanup)];
    }

    bb1467 (cleanup): {
        drop(_867) -> [return: bb1468, unwind terminate(cleanup)];
    }

    bb1468 (cleanup): {
        drop(_846) -> [return: bb1469, unwind terminate(cleanup)];
    }

    bb1469 (cleanup): {
        drop(_840) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1470 (cleanup): {
        drop(_766) -> [return: bb1471, unwind terminate(cleanup)];
    }

    bb1471 (cleanup): {
        drop(_760) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1472 (cleanup): {
        drop(_260) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1473 (cleanup): {
        drop(_667) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1474 (cleanup): {
        drop(_651) -> [return: bb1475, unwind terminate(cleanup)];
    }

    bb1475 (cleanup): {
        drop(_649) -> [return: bb1668, unwind terminate(cleanup)];
    }

    bb1476 (cleanup): {
        drop(_575) -> [return: bb1477, unwind terminate(cleanup)];
    }

    bb1477 (cleanup): {
        drop(_566) -> [return: bb1478, unwind terminate(cleanup)];
    }

    bb1478 (cleanup): {
        drop(_545) -> [return: bb1677, unwind terminate(cleanup)];
    }

    bb1479 (cleanup): {
        drop(_575) -> [return: bb1480, unwind terminate(cleanup)];
    }

    bb1480 (cleanup): {
        drop(_566) -> [return: bb1481, unwind terminate(cleanup)];
    }

    bb1481 (cleanup): {
        drop(_545) -> [return: bb1482, unwind terminate(cleanup)];
    }

    bb1482 (cleanup): {
        drop(_539) -> [return: bb1682, unwind terminate(cleanup)];
    }

    bb1483 (cleanup): {
        drop(_480) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1484 (cleanup): {
        drop(_459) -> [return: bb1485, unwind terminate(cleanup)];
    }

    bb1485 (cleanup): {
        drop(_450) -> [return: bb1486, unwind terminate(cleanup)];
    }

    bb1486 (cleanup): {
        drop(_429) -> [return: bb1690, unwind terminate(cleanup)];
    }

    bb1487 (cleanup): {
        drop(_459) -> [return: bb1488, unwind terminate(cleanup)];
    }

    bb1488 (cleanup): {
        drop(_450) -> [return: bb1489, unwind terminate(cleanup)];
    }

    bb1489 (cleanup): {
        drop(_429) -> [return: bb1490, unwind terminate(cleanup)];
    }

    bb1490 (cleanup): {
        drop(_423) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1491 (cleanup): {
        drop(_401) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1492 (cleanup): {
        drop(_335) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1493 (cleanup): {
        drop(_315) -> [return: bb1494, unwind terminate(cleanup)];
    }

    bb1494 (cleanup): {
        drop(_306) -> [return: bb1495, unwind terminate(cleanup)];
    }

    bb1495 (cleanup): {
        drop(_285) -> [return: bb1703, unwind terminate(cleanup)];
    }

    bb1496 (cleanup): {
        drop(_315) -> [return: bb1497, unwind terminate(cleanup)];
    }

    bb1497 (cleanup): {
        drop(_306) -> [return: bb1498, unwind terminate(cleanup)];
    }

    bb1498 (cleanup): {
        drop(_285) -> [return: bb1499, unwind terminate(cleanup)];
    }

    bb1499 (cleanup): {
        drop(_279) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1500 (cleanup): {
        drop(_141) -> [return: bb1501, unwind terminate(cleanup)];
    }

    bb1501 (cleanup): {
        drop(_66) -> [return: bb1502, unwind terminate(cleanup)];
    }

    bb1502 (cleanup): {
        drop(_36) -> [return: bb1503, unwind terminate(cleanup)];
    }

    bb1503 (cleanup): {
        resume;
    }

    bb1504: {
        _2874 = discriminant(_2320);
        _2626 = const false;
        _2627 = const false;
        StorageDead(_2320);
        StorageDead(_2319);
        StorageDead(_2317);
        StorageLive(_2328);
        StorageLive(_2329);
        _2329 = &_6;
        _2328 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _2329) -> [return: bb1132, unwind: bb1405];
    }

    bb1505: {
        _2878 = discriminant(_2366);
        _2620 = const false;
        _2621 = const false;
        StorageDead(_2366);
        StorageDead(_2365);
        StorageDead(_2363);
        StorageDead(_2360);
        StorageDead(_2358);
        StorageDead(_2357);
        StorageDead(_2354);
        StorageDead(_2352);
        StorageDead(_2350);
        StorageDead(_2348);
        StorageDead(_2347);
        StorageDead(_2342);
        StorageLive(_2383);
        StorageLive(_2384);
        StorageLive(_2385);
        StorageLive(_2386);
        StorageLive(_2387);
        _2387 = &_36;
        _2386 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _2387) -> [return: bb1154, unwind: bb1405];
    }

    bb1506: {
        _2900 = discriminant(_2366);
        _2620 = const false;
        _2621 = const false;
        StorageDead(_2366);
        StorageDead(_2365);
        StorageDead(_2363);
        StorageDead(_2360);
        StorageDead(_2358);
        StorageDead(_2357);
        StorageDead(_2354);
        StorageDead(_2352);
        StorageDead(_2350);
        StorageDead(_2348);
        StorageDead(_2347);
        StorageDead(_2342);
        goto -> bb1251;
    }

    bb1507 (cleanup): {
        _3058 = discriminant(_2465);
        goto -> bb1396;
    }

    bb1508 (cleanup): {
        _3059 = discriminant(_2438);
        goto -> bb1405;
    }

    bb1509 (cleanup): {
        _3061 = discriminant(_2412);
        goto -> bb1405;
    }

    bb1510 (cleanup): {
        _3062 = discriminant(_2399);
        goto -> bb1405;
    }

    bb1511 (cleanup): {
        drop(_2391) -> [return: bb1405, unwind terminate(cleanup)];
    }

    bb1512 (cleanup): {
        switchInt(_2625) -> [0: bb1405, otherwise: bb1511];
    }

    bb1513 (cleanup): {
        _3063 = discriminant(_2342);
        goto -> bb1401;
    }

    bb1514 (cleanup): {
        _3064 = discriminant(_2366);
        goto -> bb1405;
    }

    bb1515 (cleanup): {
        _3065 = discriminant(_2320);
        goto -> bb1405;
    }

    bb1516 (cleanup): {
        _3066 = discriminant(_2292);
        goto -> bb1403;
    }

    bb1517 (cleanup): {
        drop(_2265) -> [return: bb1406, unwind terminate(cleanup)];
    }

    bb1518 (cleanup): {
        switchInt(_2629) -> [0: bb1406, otherwise: bb1517];
    }

    bb1519 (cleanup): {
        drop(_2244) -> [return: bb1406, unwind terminate(cleanup)];
    }

    bb1520 (cleanup): {
        switchInt(_2630) -> [0: bb1406, otherwise: bb1519];
    }

    bb1521 (cleanup): {
        drop(_2221) -> [return: bb1406, unwind terminate(cleanup)];
    }

    bb1522 (cleanup): {
        switchInt(_2631) -> [0: bb1406, otherwise: bb1521];
    }

    bb1523 (cleanup): {
        _3067 = discriminant(_2198);
        goto -> bb1435;
    }

    bb1524 (cleanup): {
        _3068 = discriminant(_2188);
        goto -> bb1526;
    }

    bb1525 (cleanup): {
        drop(_2175) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1526 (cleanup): {
        switchInt(_2634) -> [0: bb1435, otherwise: bb1525];
    }

    bb1527 (cleanup): {
        _3069 = discriminant(_2133);
        goto -> bb1533;
    }

    bb1528 (cleanup): {
        drop(_2135) -> [return: bb1533, unwind terminate(cleanup)];
    }

    bb1529 (cleanup): {
        switchInt(_2635) -> [0: bb1533, otherwise: bb1528];
    }

    bb1530 (cleanup): {
        drop(_2136) -> [return: bb1533, unwind terminate(cleanup)];
    }

    bb1531 (cleanup): {
        switchInt(_2636) -> [0: bb1533, otherwise: bb1530];
    }

    bb1532 (cleanup): {
        drop(_2125) -> [return: bb1544, unwind terminate(cleanup)];
    }

    bb1533 (cleanup): {
        switchInt(_2637) -> [0: bb1544, otherwise: bb1532];
    }

    bb1534 (cleanup): {
        _3070 = discriminant(_2035);
        goto -> bb1544;
    }

    bb1535 (cleanup): {
        _3071 = discriminant(_2109);
        goto -> bb1415;
    }

    bb1536 (cleanup): {
        _3072 = discriminant(_2096);
        goto -> bb1414;
    }

    bb1537 (cleanup): {
        _3073 = discriminant(_2084);
        goto -> bb1414;
    }

    bb1538 (cleanup): {
        _3074 = discriminant(_2075);
        goto -> bb1415;
    }

    bb1539 (cleanup): {
        drop(_2037) -> [return: bb1544, unwind terminate(cleanup)];
    }

    bb1540 (cleanup): {
        switchInt(_2639) -> [0: bb1544, otherwise: bb1539];
    }

    bb1541 (cleanup): {
        drop(_2038) -> [return: bb1544, unwind terminate(cleanup)];
    }

    bb1542 (cleanup): {
        switchInt(_2640) -> [0: bb1544, otherwise: bb1541];
    }

    bb1543 (cleanup): {
        drop(_2027) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1544 (cleanup): {
        switchInt(_2641) -> [0: bb1435, otherwise: bb1543];
    }

    bb1545 (cleanup): {
        _3075 = discriminant(_2018);
        goto -> bb1547;
    }

    bb1546 (cleanup): {
        drop(_2008) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1547 (cleanup): {
        switchInt(_2642) -> [0: bb1435, otherwise: bb1546];
    }

    bb1548 (cleanup): {
        _3076 = discriminant(_1993);
        goto -> bb1423;
    }

    bb1549 (cleanup): {
        _3077 = discriminant(_1980);
        goto -> bb1422;
    }

    bb1550 (cleanup): {
        _3078 = discriminant(_1968);
        goto -> bb1422;
    }

    bb1551 (cleanup): {
        _3079 = discriminant(_1959);
        goto -> bb1423;
    }

    bb1552 (cleanup): {
        drop(_1928) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1553 (cleanup): {
        switchInt(_2644) -> [0: bb1435, otherwise: bb1552];
    }

    bb1554 (cleanup): {
        _3080 = discriminant(_1873);
        goto -> bb1560;
    }

    bb1555 (cleanup): {
        drop(_1875) -> [return: bb1560, unwind terminate(cleanup)];
    }

    bb1556 (cleanup): {
        switchInt(_2645) -> [0: bb1560, otherwise: bb1555];
    }

    bb1557 (cleanup): {
        drop(_1876) -> [return: bb1560, unwind terminate(cleanup)];
    }

    bb1558 (cleanup): {
        switchInt(_2646) -> [0: bb1560, otherwise: bb1557];
    }

    bb1559 (cleanup): {
        drop(_1863) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1560 (cleanup): {
        switchInt(_2647) -> [0: bb1435, otherwise: bb1559];
    }

    bb1561 (cleanup): {
        _3081 = discriminant(_1849);
        goto -> bb1432;
    }

    bb1562 (cleanup): {
        _3082 = discriminant(_1836);
        goto -> bb1431;
    }

    bb1563 (cleanup): {
        _3083 = discriminant(_1824);
        goto -> bb1431;
    }

    bb1564 (cleanup): {
        _3084 = discriminant(_1815);
        goto -> bb1432;
    }

    bb1565 (cleanup): {
        drop(_1782) -> [return: bb1435, unwind terminate(cleanup)];
    }

    bb1566 (cleanup): {
        switchInt(_2649) -> [0: bb1435, otherwise: bb1565];
    }

    bb1567 (cleanup): {
        _3085 = discriminant(_1746);
        goto -> bb1435;
    }

    bb1568 (cleanup): {
        _3086 = discriminant(_1731);
        goto -> bb1433;
    }

    bb1569 (cleanup): {
        drop(_1704) -> [return: bb1436, unwind terminate(cleanup)];
    }

    bb1570 (cleanup): {
        switchInt(_2651) -> [0: bb1436, otherwise: bb1569];
    }

    bb1571 (cleanup): {
        drop(_1685) -> [return: bb1436, unwind terminate(cleanup)];
    }

    bb1572 (cleanup): {
        switchInt(_2652) -> [0: bb1436, otherwise: bb1571];
    }

    bb1573 (cleanup): {
        _3087 = discriminant(_1633);
        goto -> bb1442;
    }

    bb1574 (cleanup): {
        _3088 = discriminant(_1618);
        goto -> bb1578;
    }

    bb1575 (cleanup): {
        drop(_1620) -> [return: bb1578, unwind terminate(cleanup)];
    }

    bb1576 (cleanup): {
        switchInt(_2655) -> [0: bb1578, otherwise: bb1575];
    }

    bb1577 (cleanup): {
        drop(_1609) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1578 (cleanup): {
        switchInt(_2656) -> [0: bb1442, otherwise: bb1577];
    }

    bb1579 (cleanup): {
        _3089 = discriminant(_1567);
        goto -> bb1585;
    }

    bb1580 (cleanup): {
        drop(_1569) -> [return: bb1585, unwind terminate(cleanup)];
    }

    bb1581 (cleanup): {
        switchInt(_2657) -> [0: bb1585, otherwise: bb1580];
    }

    bb1582 (cleanup): {
        drop(_1570) -> [return: bb1585, unwind terminate(cleanup)];
    }

    bb1583 (cleanup): {
        switchInt(_2658) -> [0: bb1585, otherwise: bb1582];
    }

    bb1584 (cleanup): {
        drop(_1559) -> [return: bb1590, unwind terminate(cleanup)];
    }

    bb1585 (cleanup): {
        switchInt(_2659) -> [0: bb1590, otherwise: bb1584];
    }

    bb1586 (cleanup): {
        _3090 = discriminant(_1522);
        goto -> bb1590;
    }

    bb1587 (cleanup): {
        drop(_1525) -> [return: bb1590, unwind terminate(cleanup)];
    }

    bb1588 (cleanup): {
        switchInt(_2660) -> [0: bb1590, otherwise: bb1587];
    }

    bb1589 (cleanup): {
        drop(_1514) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1590 (cleanup): {
        switchInt(_2661) -> [0: bb1442, otherwise: bb1589];
    }

    bb1591 (cleanup): {
        _3091 = discriminant(_1505);
        goto -> bb1593;
    }

    bb1592 (cleanup): {
        drop(_1495) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1593 (cleanup): {
        switchInt(_2662) -> [0: bb1442, otherwise: bb1592];
    }

    bb1594 (cleanup): {
        drop(_1468) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1595 (cleanup): {
        switchInt(_2663) -> [0: bb1442, otherwise: bb1594];
    }

    bb1596 (cleanup): {
        _3092 = discriminant(_1413);
        goto -> bb1602;
    }

    bb1597 (cleanup): {
        drop(_1415) -> [return: bb1602, unwind terminate(cleanup)];
    }

    bb1598 (cleanup): {
        switchInt(_2664) -> [0: bb1602, otherwise: bb1597];
    }

    bb1599 (cleanup): {
        drop(_1416) -> [return: bb1602, unwind terminate(cleanup)];
    }

    bb1600 (cleanup): {
        switchInt(_2665) -> [0: bb1602, otherwise: bb1599];
    }

    bb1601 (cleanup): {
        drop(_1403) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1602 (cleanup): {
        switchInt(_2666) -> [0: bb1442, otherwise: bb1601];
    }

    bb1603 (cleanup): {
        drop(_1375) -> [return: bb1442, unwind terminate(cleanup)];
    }

    bb1604 (cleanup): {
        switchInt(_2667) -> [0: bb1442, otherwise: bb1603];
    }

    bb1605 (cleanup): {
        _3093 = discriminant(_1339);
        goto -> bb1442;
    }

    bb1606 (cleanup): {
        _3094 = discriminant(_1324);
        goto -> bb1440;
    }

    bb1607 (cleanup): {
        drop(_1297) -> [return: bb1443, unwind terminate(cleanup)];
    }

    bb1608 (cleanup): {
        switchInt(_2669) -> [0: bb1443, otherwise: bb1607];
    }

    bb1609 (cleanup): {
        drop(_1276) -> [return: bb1443, unwind terminate(cleanup)];
    }

    bb1610 (cleanup): {
        switchInt(_2670) -> [0: bb1443, otherwise: bb1609];
    }

    bb1611 (cleanup): {
        drop(_1253) -> [return: bb1443, unwind terminate(cleanup)];
    }

    bb1612 (cleanup): {
        switchInt(_2671) -> [0: bb1443, otherwise: bb1611];
    }

    bb1613 (cleanup): {
        _3095 = discriminant(_1230);
        goto -> bb1472;
    }

    bb1614 (cleanup): {
        _3096 = discriminant(_1220);
        goto -> bb1616;
    }

    bb1615 (cleanup): {
        drop(_1207) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1616 (cleanup): {
        switchInt(_2674) -> [0: bb1472, otherwise: bb1615];
    }

    bb1617 (cleanup): {
        _3097 = discriminant(_1165);
        goto -> bb1623;
    }

    bb1618 (cleanup): {
        drop(_1167) -> [return: bb1623, unwind terminate(cleanup)];
    }

    bb1619 (cleanup): {
        switchInt(_2675) -> [0: bb1623, otherwise: bb1618];
    }

    bb1620 (cleanup): {
        drop(_1168) -> [return: bb1623, unwind terminate(cleanup)];
    }

    bb1621 (cleanup): {
        switchInt(_2676) -> [0: bb1623, otherwise: bb1620];
    }

    bb1622 (cleanup): {
        drop(_1157) -> [return: bb1634, unwind terminate(cleanup)];
    }

    bb1623 (cleanup): {
        switchInt(_2677) -> [0: bb1634, otherwise: bb1622];
    }

    bb1624 (cleanup): {
        _3098 = discriminant(_1067);
        goto -> bb1634;
    }

    bb1625 (cleanup): {
        _3099 = discriminant(_1141);
        goto -> bb1452;
    }

    bb1626 (cleanup): {
        _3100 = discriminant(_1128);
        goto -> bb1451;
    }

    bb1627 (cleanup): {
        _3101 = discriminant(_1116);
        goto -> bb1451;
    }

    bb1628 (cleanup): {
        _3102 = discriminant(_1107);
        goto -> bb1452;
    }

    bb1629 (cleanup): {
        drop(_1069) -> [return: bb1634, unwind terminate(cleanup)];
    }

    bb1630 (cleanup): {
        switchInt(_2679) -> [0: bb1634, otherwise: bb1629];
    }

    bb1631 (cleanup): {
        drop(_1070) -> [return: bb1634, unwind terminate(cleanup)];
    }

    bb1632 (cleanup): {
        switchInt(_2680) -> [0: bb1634, otherwise: bb1631];
    }

    bb1633 (cleanup): {
        drop(_1059) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1634 (cleanup): {
        switchInt(_2681) -> [0: bb1472, otherwise: bb1633];
    }

    bb1635 (cleanup): {
        _3103 = discriminant(_1050);
        goto -> bb1637;
    }

    bb1636 (cleanup): {
        drop(_1040) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1637 (cleanup): {
        switchInt(_2682) -> [0: bb1472, otherwise: bb1636];
    }

    bb1638 (cleanup): {
        _3104 = discriminant(_1025);
        goto -> bb1460;
    }

    bb1639 (cleanup): {
        _3105 = discriminant(_1012);
        goto -> bb1459;
    }

    bb1640 (cleanup): {
        _3106 = discriminant(_1000);
        goto -> bb1459;
    }

    bb1641 (cleanup): {
        _3107 = discriminant(_991);
        goto -> bb1460;
    }

    bb1642 (cleanup): {
        drop(_960) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1643 (cleanup): {
        switchInt(_2684) -> [0: bb1472, otherwise: bb1642];
    }

    bb1644 (cleanup): {
        _3108 = discriminant(_905);
        goto -> bb1650;
    }

    bb1645 (cleanup): {
        drop(_907) -> [return: bb1650, unwind terminate(cleanup)];
    }

    bb1646 (cleanup): {
        switchInt(_2685) -> [0: bb1650, otherwise: bb1645];
    }

    bb1647 (cleanup): {
        drop(_908) -> [return: bb1650, unwind terminate(cleanup)];
    }

    bb1648 (cleanup): {
        switchInt(_2686) -> [0: bb1650, otherwise: bb1647];
    }

    bb1649 (cleanup): {
        drop(_895) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1650 (cleanup): {
        switchInt(_2687) -> [0: bb1472, otherwise: bb1649];
    }

    bb1651 (cleanup): {
        _3109 = discriminant(_881);
        goto -> bb1469;
    }

    bb1652 (cleanup): {
        _3110 = discriminant(_868);
        goto -> bb1468;
    }

    bb1653 (cleanup): {
        _3111 = discriminant(_856);
        goto -> bb1468;
    }

    bb1654 (cleanup): {
        _3112 = discriminant(_847);
        goto -> bb1469;
    }

    bb1655 (cleanup): {
        drop(_814) -> [return: bb1472, unwind terminate(cleanup)];
    }

    bb1656 (cleanup): {
        switchInt(_2689) -> [0: bb1472, otherwise: bb1655];
    }

    bb1657 (cleanup): {
        _3113 = discriminant(_778);
        goto -> bb1472;
    }

    bb1658 (cleanup): {
        _3114 = discriminant(_763);
        goto -> bb1470;
    }

    bb1659 (cleanup): {
        drop(_736) -> [return: bb1473, unwind terminate(cleanup)];
    }

    bb1660 (cleanup): {
        switchInt(_2691) -> [0: bb1473, otherwise: bb1659];
    }

    bb1661 (cleanup): {
        drop(_715) -> [return: bb1473, unwind terminate(cleanup)];
    }

    bb1662 (cleanup): {
        switchInt(_2692) -> [0: bb1473, otherwise: bb1661];
    }

    bb1663 (cleanup): {
        drop(_692) -> [return: bb1473, unwind terminate(cleanup)];
    }

    bb1664 (cleanup): {
        switchInt(_2693) -> [0: bb1473, otherwise: bb1663];
    }

    bb1665 (cleanup): {
        _3115 = discriminant(_669);
        goto -> bb1500;
    }

    bb1666 (cleanup): {
        _3116 = discriminant(_659);
        goto -> bb1668;
    }

    bb1667 (cleanup): {
        drop(_646) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1668 (cleanup): {
        switchInt(_2696) -> [0: bb1500, otherwise: bb1667];
    }

    bb1669 (cleanup): {
        _3117 = discriminant(_604);
        goto -> bb1675;
    }

    bb1670 (cleanup): {
        drop(_606) -> [return: bb1675, unwind terminate(cleanup)];
    }

    bb1671 (cleanup): {
        switchInt(_2697) -> [0: bb1675, otherwise: bb1670];
    }

    bb1672 (cleanup): {
        drop(_607) -> [return: bb1675, unwind terminate(cleanup)];
    }

    bb1673 (cleanup): {
        switchInt(_2698) -> [0: bb1675, otherwise: bb1672];
    }

    bb1674 (cleanup): {
        drop(_596) -> [return: bb1686, unwind terminate(cleanup)];
    }

    bb1675 (cleanup): {
        switchInt(_2699) -> [0: bb1686, otherwise: bb1674];
    }

    bb1676 (cleanup): {
        _3118 = discriminant(_506);
        goto -> bb1686;
    }

    bb1677 (cleanup): {
        _3119 = discriminant(_580);
        goto -> bb1482;
    }

    bb1678 (cleanup): {
        _3120 = discriminant(_567);
        goto -> bb1481;
    }

    bb1679 (cleanup): {
        _3121 = discriminant(_555);
        goto -> bb1481;
    }

    bb1680 (cleanup): {
        _3122 = discriminant(_546);
        goto -> bb1482;
    }

    bb1681 (cleanup): {
        drop(_508) -> [return: bb1686, unwind terminate(cleanup)];
    }

    bb1682 (cleanup): {
        switchInt(_2701) -> [0: bb1686, otherwise: bb1681];
    }

    bb1683 (cleanup): {
        drop(_509) -> [return: bb1686, unwind terminate(cleanup)];
    }

    bb1684 (cleanup): {
        switchInt(_2702) -> [0: bb1686, otherwise: bb1683];
    }

    bb1685 (cleanup): {
        drop(_498) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1686 (cleanup): {
        switchInt(_2703) -> [0: bb1500, otherwise: bb1685];
    }

    bb1687 (cleanup): {
        _3123 = discriminant(_489);
        goto -> bb1689;
    }

    bb1688 (cleanup): {
        drop(_479) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1689 (cleanup): {
        switchInt(_2704) -> [0: bb1500, otherwise: bb1688];
    }

    bb1690 (cleanup): {
        _3124 = discriminant(_464);
        goto -> bb1490;
    }

    bb1691 (cleanup): {
        _3125 = discriminant(_451);
        goto -> bb1489;
    }

    bb1692 (cleanup): {
        _3126 = discriminant(_439);
        goto -> bb1489;
    }

    bb1693 (cleanup): {
        _3127 = discriminant(_430);
        goto -> bb1490;
    }

    bb1694 (cleanup): {
        drop(_399) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1695 (cleanup): {
        switchInt(_2706) -> [0: bb1500, otherwise: bb1694];
    }

    bb1696 (cleanup): {
        _3128 = discriminant(_344);
        goto -> bb1702;
    }

    bb1697 (cleanup): {
        drop(_346) -> [return: bb1702, unwind terminate(cleanup)];
    }

    bb1698 (cleanup): {
        switchInt(_2707) -> [0: bb1702, otherwise: bb1697];
    }

    bb1699 (cleanup): {
        drop(_347) -> [return: bb1702, unwind terminate(cleanup)];
    }

    bb1700 (cleanup): {
        switchInt(_2708) -> [0: bb1702, otherwise: bb1699];
    }

    bb1701 (cleanup): {
        drop(_334) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1702 (cleanup): {
        switchInt(_2709) -> [0: bb1500, otherwise: bb1701];
    }

    bb1703 (cleanup): {
        _3129 = discriminant(_320);
        goto -> bb1499;
    }

    bb1704 (cleanup): {
        _3130 = discriminant(_307);
        goto -> bb1498;
    }

    bb1705 (cleanup): {
        _3131 = discriminant(_295);
        goto -> bb1498;
    }

    bb1706 (cleanup): {
        _3132 = discriminant(_286);
        goto -> bb1499;
    }

    bb1707 (cleanup): {
        drop(_253) -> [return: bb1500, unwind terminate(cleanup)];
    }

    bb1708 (cleanup): {
        switchInt(_2711) -> [0: bb1500, otherwise: bb1707];
    }

    bb1709 (cleanup): {
        _3133 = discriminant(_217);
        goto -> bb1500;
    }

    bb1710 (cleanup): {
        _3134 = discriminant(_202);
        goto -> bb1500;
    }

    bb1711 (cleanup): {
        _3135 = discriminant(_187);
        goto -> bb1500;
    }

    bb1712 (cleanup): {
        _3136 = discriminant(_172);
        goto -> bb1500;
    }

    bb1713 (cleanup): {
        _3137 = discriminant(_157);
        goto -> bb1500;
    }

    bb1714 (cleanup): {
        _3138 = discriminant(_142);
        goto -> bb1501;
    }

    bb1715 (cleanup): {
        _3139 = discriminant(_67);
        goto -> bb1502;
    }

    bb1716 (cleanup): {
        _3140 = discriminant(_37);
        goto -> bb1503;
    }

    bb1717 (cleanup): {
        _3141 = discriminant(_22);
        goto -> bb1503;
    }

    bb1718 (cleanup): {
        _3142 = discriminant(_7);
        goto -> bb1503;
    }
}
