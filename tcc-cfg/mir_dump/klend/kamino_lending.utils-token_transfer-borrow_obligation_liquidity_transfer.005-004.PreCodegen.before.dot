digraph Mir_0_2813 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn borrow_obligation_liquidity_transfer(_1: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _3: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _4: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _5: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _6: &amp;ReErased [&amp;ReErased [u8]], _7: u64, _8: u8) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _9: ();<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _11: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _12: anchor_lang::context::CpiContext&lt;ReErased, ReErased, ReErased, ReErased, anchor_spl::token_2022::TransferChecked&lt;ReErased&gt;&gt;;<br align="left"/>let mut _13: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _14: anchor_spl::token_2022::TransferChecked&lt;ReErased&gt;;<br align="left"/>let mut _15: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _16: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _17: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _18: anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _19: &amp;ReErased [&amp;ReErased [&amp;ReErased [u8]]];<br align="left"/>let mut _20: &amp;ReErased [&amp;ReErased [&amp;ReErased [u8]]; 1_usize];<br align="left"/>let _21: &amp;ReErased [&amp;ReErased [&amp;ReErased [u8]]; 1_usize];<br align="left"/>let _22: [&amp;ReErased [&amp;ReErased [u8]]; 1_usize];<br align="left"/>let mut _23: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: u8;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _30: ();<br align="left"/>let mut _31: ();<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>debug token_program =&gt; _1;<br align="left"/>debug liquidity_mint =&gt; _2;<br align="left"/>debug reserve_liquidity =&gt; _3;<br align="left"/>debug user_liquidity =&gt; _4;<br align="left"/>debug lending_market_authority =&gt; _5;<br align="left"/>debug authority_signer_seeds =&gt; _6;<br align="left"/>debug liquidity_amount =&gt; _7;<br align="left"/>debug liquidity_decimals =&gt; _8;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>>;
    bb0__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = move _1<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = move _3<br/>StorageLive(_16)<br/>_16 = move _4<br/>StorageLive(_17)<br/>_17 = move _5<br/>StorageLive(_18)<br/>_18 = move _2<br/>_14 = anchor_spl::token_2022::TransferChecked::&lt;'_&gt; { from: move _15, mint: move _18, to: move _16, authority: move _17 }<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;(*_6)<br/>_22 = [move _23]<br/>StorageDead(_23)<br/>_21 = &amp;_22<br/>_20 = &amp;(*_21)<br/>_19 = move _20 as &amp;[&amp;[&amp;[u8]]] (PointerCoercion(Unsize))<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_12 = anchor_lang::context::CpiContext::&lt;'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked&lt;'_&gt;&gt;::new_with_signer(move _13, move _14, move _19)</td></tr></table>>];
    bb1__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_24)<br/>_24 = _7<br/>StorageLive(_25)<br/>_25 = _8<br/></td></tr><tr><td align="left">_11 = anchor_spl::token_2022::transfer_checked(move _12, move _24, move _25)</td></tr></table>>];
    bb2__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb3__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_26 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb4__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_10 as Continue).0: ())<br/>_9 = _30<br/>StorageDead(_30)<br/>_32 = discriminant(_10)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_31)<br/>_31 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _31)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = move ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_29)<br/>_29 = move _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb7__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>_34 = discriminant(_10)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_2813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_36 = discriminant(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2813 -> bb1__0_2813 [label="return"];
    bb0__0_2813 -> bb9__0_2813 [label="unwind"];
    bb1__0_2813 -> bb2__0_2813 [label="return"];
    bb1__0_2813 -> bb9__0_2813 [label="unwind"];
    bb2__0_2813 -> bb3__0_2813 [label="return"];
    bb2__0_2813 -> bb9__0_2813 [label="unwind"];
    bb3__0_2813 -> bb4__0_2813 [label="0"];
    bb3__0_2813 -> bb6__0_2813 [label="1"];
    bb3__0_2813 -> bb5__0_2813 [label="otherwise"];
    bb4__0_2813 -> bb8__0_2813 [label=""];
    bb6__0_2813 -> bb7__0_2813 [label="return"];
    bb6__0_2813 -> bb10__0_2813 [label="unwind"];
    bb7__0_2813 -> bb8__0_2813 [label=""];
    bb10__0_2813 -> bb9__0_2813 [label=""];
}
