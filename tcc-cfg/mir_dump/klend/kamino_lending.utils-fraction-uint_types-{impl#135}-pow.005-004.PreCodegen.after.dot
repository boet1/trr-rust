digraph Mir_0_11907 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U128::pow(_1: utils::fraction::uint_types::U128, _2: utils::fraction::uint_types::U128) -&gt; utils::fraction::uint_types::U128<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _6: !;<br align="left"/>let _7: Closure(DefId(0:11908 ~ kamino_lending[6389]::utils::fraction::uint_types::{impl#135}::pow::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) utils::fraction::uint_types::U128,)) -&gt; bool, [Region(BrAnon)]), ()]);<br align="left"/>let _8: utils::fraction::uint_types::U128;<br align="left"/>let mut _9: utils::fraction::uint_types::U128;<br align="left"/>let mut _10: utils::fraction::uint_types::U128;<br align="left"/>let mut _11: utils::fraction::uint_types::U128;<br align="left"/>let _12: ();<br align="left"/>let mut _13: ();<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _16: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: &amp;ReErased Closure(DefId(0:11908 ~ kamino_lending[6389]::utils::fraction::uint_types::{impl#135}::pow::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) utils::fraction::uint_types::U128,)) -&gt; bool, [Region(BrAnon)]), ()]);<br align="left"/>let mut _19: (&amp;ReErased utils::fraction::uint_types::U128,);<br align="left"/>let mut _20: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let _21: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _22: utils::fraction::uint_types::U128;<br align="left"/>let mut _23: utils::fraction::uint_types::U128;<br align="left"/>let mut _24: utils::fraction::uint_types::U128;<br align="left"/>let mut _25: utils::fraction::uint_types::U128;<br align="left"/>let mut _26: utils::fraction::uint_types::U128;<br align="left"/>let mut _27: utils::fraction::uint_types::U128;<br align="left"/>let mut _28: utils::fraction::uint_types::U128;<br align="left"/>let mut _29: utils::fraction::uint_types::U128;<br align="left"/>let mut _30: utils::fraction::uint_types::U128;<br align="left"/>let mut _31: utils::fraction::uint_types::U128;<br align="left"/>let mut _32: utils::fraction::uint_types::U128;<br align="left"/>let mut _33: u64;<br align="left"/>let _34: usize;<br align="left"/>let mut _35: (usize, bool);<br align="left"/>let mut _36: usize;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: u32;<br align="left"/>let mut _41: bool;<br align="left"/>let _42: usize;<br align="left"/>let mut _43: (usize, bool);<br align="left"/>let mut _44: usize;<br align="left"/>let mut _45: bool;<br align="left"/>let mut _46: utils::fraction::uint_types::U128;<br align="left"/>let mut _47: utils::fraction::uint_types::U128;<br align="left"/>let mut _48: !;<br align="left"/>let _49: ();<br align="left"/>let mut _50: !;<br align="left"/>let mut _51: utils::fraction::uint_types::U128;<br align="left"/>let mut _52: utils::fraction::uint_types::U128;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug expon =&gt; _2;<br align="left"/>debug is_even =&gt; _7;<br align="left"/>debug u_one =&gt; _8;<br align="left"/>debug y =&gt; _9;<br align="left"/>debug n =&gt; _10;<br align="left"/>debug x =&gt; _11;<br align="left"/>>;
    bb0__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;_2<br/></td></tr><tr><td align="left">_4 = uint_types::U128::is_zero(move _5)</td></tr></table>>];
    bb1__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_0 = uint_types::U128::one()</td></tr></table>>];
    bb3__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_7)<br/>_7 = {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:995:19: 995:30}<br/>StorageLive(_8)<br/></td></tr><tr><td align="left">_8 = uint_types::U128::one()</td></tr></table>>];
    bb4__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = _8<br/>StorageLive(_10)<br/>_10 = _2<br/>StorageLive(_11)<br/>_11 = _1<br/>StorageLive(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;_10<br/>StorageLive(_16)<br/>_16 = &amp;_8<br/></td></tr><tr><td align="left">_14 = &lt;uint_types::U128 as PartialOrd&gt;::gt(move _15, move _16)</td></tr></table>>];
    bb6__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb7__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;_7<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;_10<br/>_20 = &amp;(*_21)<br/>_19 = (move _20,)<br/></td></tr><tr><td align="left">_17 = &lt;{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:995:19: 995:30} as Fn&lt;(&amp;uint_types::U128,)&gt;&gt;::call(move _18, move _19)</td></tr></table>>];
    bb8__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb9__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _11<br/>StorageLive(_24)<br/>_24 = _11<br/></td></tr><tr><td align="left">_22 = &lt;uint_types::U128 as std::ops::Mul&gt;::mul(move _23, move _24)</td></tr></table>>];
    bb10__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>_11 = move _22<br/>StorageDead(_22)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _10<br/></td></tr><tr><td align="left">_25 = &lt;uint_types::U128 as Shr&lt;usize&gt;&gt;::shr(move _26, const 1_usize)</td></tr></table>>];
    bb11__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_10 = move _25<br/>StorageDead(_25)<br/>_13 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _11<br/>StorageLive(_29)<br/>_29 = _9<br/></td></tr><tr><td align="left">_27 = &lt;uint_types::U128 as std::ops::Mul&gt;::mul(move _28, move _29)</td></tr></table>>];
    bb13__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>_9 = move _27<br/>StorageDead(_27)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _11<br/>StorageLive(_32)<br/>_32 = _11<br/></td></tr><tr><td align="left">_30 = &lt;uint_types::U128 as std::ops::Mul&gt;::mul(move _31, move _32)</td></tr></table>>];
    bb14__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/>_11 = move _30<br/>StorageDead(_30)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_35 = CheckedSub(const 2_usize, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_35.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 2_usize, const 1_usize)</td></tr></table>>];
    bb15__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_34 = move (_35.0: usize)<br/>_36 = Len((_10.0: [u64; 2]))<br/>_37 = Lt(_34, _36)<br/></td></tr><tr><td align="left">assert(move _37, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _36, _34)</td></tr></table>>];
    bb16__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_33 = (_10.0: [u64; 2])[_34]<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = Not(const 0_u64)<br/>_40 = const 1_i32 as u32 (IntToInt)<br/>_41 = Lt(move _40, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _41, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 1_i32)</td></tr></table>>];
    bb17__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_38 = Shr(move _39, const 1_i32)<br/>StorageDead(_39)<br/>StorageLive(_42)<br/>_43 = CheckedSub(const 2_usize, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_43.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 2_usize, const 1_usize)</td></tr></table>>];
    bb18__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_42 = move (_43.0: usize)<br/>_44 = Len((_10.0: [u64; 2]))<br/>_45 = Lt(_42, _44)<br/></td></tr><tr><td align="left">assert(move _45, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _44, _42)</td></tr></table>>];
    bb19__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">(_10.0: [u64; 2])[_42] = BitAnd(move _33, move _38)<br/>StorageDead(_38)<br/>StorageDead(_33)<br/>StorageDead(_42)<br/>StorageDead(_34)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = _10<br/></td></tr><tr><td align="left">_46 = &lt;uint_types::U128 as Shr&lt;usize&gt;&gt;::shr(move _47, const 1_usize)</td></tr></table>>];
    bb20__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>_10 = move _46<br/>StorageDead(_46)<br/>_13 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_49)<br/>_12 = const ()<br/>StorageDead(_49)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageLive(_51)<br/>_51 = _11<br/>StorageLive(_52)<br/>_52 = _9<br/></td></tr><tr><td align="left">_0 = &lt;uint_types::U128 as std::ops::Mul&gt;::mul(move _51, move _52)</td></tr></table>>];
    bb23__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_51)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_11907 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11907 -> bb1__0_11907 [label="return"];
    bb1__0_11907 -> bb3__0_11907 [label="0"];
    bb1__0_11907 -> bb2__0_11907 [label="otherwise"];
    bb2__0_11907 -> bb24__0_11907 [label="return"];
    bb3__0_11907 -> bb4__0_11907 [label="return"];
    bb4__0_11907 -> bb5__0_11907 [label=""];
    bb5__0_11907 -> bb6__0_11907 [label="return"];
    bb6__0_11907 -> bb22__0_11907 [label="0"];
    bb6__0_11907 -> bb7__0_11907 [label="otherwise"];
    bb7__0_11907 -> bb8__0_11907 [label="return"];
    bb8__0_11907 -> bb12__0_11907 [label="0"];
    bb8__0_11907 -> bb9__0_11907 [label="otherwise"];
    bb9__0_11907 -> bb10__0_11907 [label="return"];
    bb10__0_11907 -> bb11__0_11907 [label="return"];
    bb11__0_11907 -> bb21__0_11907 [label=""];
    bb12__0_11907 -> bb13__0_11907 [label="return"];
    bb13__0_11907 -> bb14__0_11907 [label="return"];
    bb14__0_11907 -> bb15__0_11907 [label="success"];
    bb15__0_11907 -> bb16__0_11907 [label="success"];
    bb16__0_11907 -> bb17__0_11907 [label="success"];
    bb17__0_11907 -> bb18__0_11907 [label="success"];
    bb18__0_11907 -> bb19__0_11907 [label="success"];
    bb19__0_11907 -> bb20__0_11907 [label="return"];
    bb20__0_11907 -> bb21__0_11907 [label=""];
    bb21__0_11907 -> bb5__0_11907 [label=""];
    bb22__0_11907 -> bb23__0_11907 [label="return"];
    bb23__0_11907 -> bb25__0_11907 [label=""];
    bb24__0_11907 -> bb25__0_11907 [label=""];
}
