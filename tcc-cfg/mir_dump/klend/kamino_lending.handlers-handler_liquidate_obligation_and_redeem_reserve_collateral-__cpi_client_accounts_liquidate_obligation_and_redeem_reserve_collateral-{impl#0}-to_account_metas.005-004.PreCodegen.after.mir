// MIR for `handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::__cpi_client_accounts_liquidate_obligation_and_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18>::to_account_metas` after PreCodegen

fn handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::__cpi_client_accounts_liquidate_obligation_and_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_liquidate_obligation_and_redeem_reserve_collateral.rs:265:10: 265:18>::to_account_metas(_1: &handlers::handler_liquidate_obligation_and_redeem_reserve_collateral::__cpi_client_accounts_liquidate_obligation_and_redeem_reserve_collateral::LiquidateObligationAndRedeemReserveCollateral<'_>, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::AccountInfo<'_>;
    let _9: &anchor_lang::prelude::AccountInfo<'_>;
    let _10: ();
    let mut _11: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _12: anchor_lang::prelude::AccountMeta;
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _15: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: ();
    let mut _17: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _18: anchor_lang::prelude::AccountMeta;
    let mut _19: anchor_lang::prelude::Pubkey;
    let mut _20: &anchor_lang::prelude::AccountInfo<'_>;
    let _21: &anchor_lang::prelude::AccountInfo<'_>;
    let _22: ();
    let mut _23: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _24: anchor_lang::prelude::AccountMeta;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let _27: &anchor_lang::prelude::AccountInfo<'_>;
    let _28: ();
    let mut _29: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _30: anchor_lang::prelude::AccountMeta;
    let mut _31: anchor_lang::prelude::Pubkey;
    let mut _32: &anchor_lang::prelude::AccountInfo<'_>;
    let _33: &anchor_lang::prelude::AccountInfo<'_>;
    let _34: ();
    let mut _35: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _36: anchor_lang::prelude::AccountMeta;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let _39: &anchor_lang::prelude::AccountInfo<'_>;
    let _40: ();
    let mut _41: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _42: anchor_lang::prelude::AccountMeta;
    let mut _43: anchor_lang::prelude::Pubkey;
    let mut _44: &anchor_lang::prelude::AccountInfo<'_>;
    let _45: &anchor_lang::prelude::AccountInfo<'_>;
    let _46: ();
    let mut _47: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _48: anchor_lang::prelude::AccountMeta;
    let mut _49: anchor_lang::prelude::Pubkey;
    let mut _50: &anchor_lang::prelude::AccountInfo<'_>;
    let _51: &anchor_lang::prelude::AccountInfo<'_>;
    let _52: ();
    let mut _53: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _54: anchor_lang::prelude::AccountMeta;
    let mut _55: anchor_lang::prelude::Pubkey;
    let mut _56: &anchor_lang::prelude::AccountInfo<'_>;
    let _57: &anchor_lang::prelude::AccountInfo<'_>;
    let _58: ();
    let mut _59: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _60: anchor_lang::prelude::AccountMeta;
    let mut _61: anchor_lang::prelude::Pubkey;
    let mut _62: &anchor_lang::prelude::AccountInfo<'_>;
    let _63: &anchor_lang::prelude::AccountInfo<'_>;
    let _64: ();
    let mut _65: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _66: anchor_lang::prelude::AccountMeta;
    let mut _67: anchor_lang::prelude::Pubkey;
    let mut _68: &anchor_lang::prelude::AccountInfo<'_>;
    let _69: &anchor_lang::prelude::AccountInfo<'_>;
    let _70: ();
    let mut _71: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _72: anchor_lang::prelude::AccountMeta;
    let mut _73: anchor_lang::prelude::Pubkey;
    let mut _74: &anchor_lang::prelude::AccountInfo<'_>;
    let _75: &anchor_lang::prelude::AccountInfo<'_>;
    let _76: ();
    let mut _77: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _78: anchor_lang::prelude::AccountMeta;
    let mut _79: anchor_lang::prelude::Pubkey;
    let mut _80: &anchor_lang::prelude::AccountInfo<'_>;
    let _81: &anchor_lang::prelude::AccountInfo<'_>;
    let _82: ();
    let mut _83: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _84: anchor_lang::prelude::AccountMeta;
    let mut _85: anchor_lang::prelude::Pubkey;
    let mut _86: &anchor_lang::prelude::AccountInfo<'_>;
    let _87: &anchor_lang::prelude::AccountInfo<'_>;
    let _88: ();
    let mut _89: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _90: anchor_lang::prelude::AccountMeta;
    let mut _91: anchor_lang::prelude::Pubkey;
    let mut _92: &anchor_lang::prelude::AccountInfo<'_>;
    let _93: &anchor_lang::prelude::AccountInfo<'_>;
    let _94: ();
    let mut _95: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _96: anchor_lang::prelude::AccountMeta;
    let mut _97: anchor_lang::prelude::Pubkey;
    let mut _98: &anchor_lang::prelude::AccountInfo<'_>;
    let _99: &anchor_lang::prelude::AccountInfo<'_>;
    let _100: ();
    let mut _101: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _102: anchor_lang::prelude::AccountMeta;
    let mut _103: anchor_lang::prelude::Pubkey;
    let mut _104: &anchor_lang::prelude::AccountInfo<'_>;
    let _105: &anchor_lang::prelude::AccountInfo<'_>;
    let _106: ();
    let mut _107: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _108: anchor_lang::prelude::AccountMeta;
    let mut _109: anchor_lang::prelude::Pubkey;
    let mut _110: &anchor_lang::prelude::AccountInfo<'_>;
    let _111: &anchor_lang::prelude::AccountInfo<'_>;
    let _112: ();
    let mut _113: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _114: anchor_lang::prelude::AccountMeta;
    let mut _115: anchor_lang::prelude::Pubkey;
    let mut _116: &anchor_lang::prelude::AccountInfo<'_>;
    let _117: &anchor_lang::prelude::AccountInfo<'_>;
    let _118: ();
    let mut _119: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _120: anchor_lang::prelude::AccountMeta;
    let mut _121: anchor_lang::prelude::Pubkey;
    let mut _122: &anchor_lang::prelude::AccountInfo<'_>;
    let _123: &anchor_lang::prelude::AccountInfo<'_>;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _8 = &(*_9);
        _7 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _8) -> [return: bb2, unwind: bb62];
    }

    bb2: {
        StorageDead(_8);
        _6 = anchor_lang::prelude::AccountMeta::new_readonly(move _7, const true) -> [return: bb3, unwind: bb62];
    }

    bb3: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb4, unwind: bb62];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_4);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut _3;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_1).1: anchor_lang::prelude::AccountInfo<'_>);
        _14 = &(*_15);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _14) -> [return: bb5, unwind: bb62];
    }

    bb5: {
        StorageDead(_14);
        _12 = anchor_lang::prelude::AccountMeta::new(move _13, const false) -> [return: bb6, unwind: bb62];
    }

    bb6: {
        StorageDead(_13);
        _10 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _11, move _12) -> [return: bb7, unwind: bb62];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_15);
        StorageDead(_10);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _3;
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).2: anchor_lang::prelude::AccountInfo<'_>);
        _20 = &(*_21);
        _19 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _20) -> [return: bb8, unwind: bb62];
    }

    bb8: {
        StorageDead(_20);
        _18 = anchor_lang::prelude::AccountMeta::new_readonly(move _19, const false) -> [return: bb9, unwind: bb62];
    }

    bb9: {
        StorageDead(_19);
        _16 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _17, move _18) -> [return: bb10, unwind: bb62];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_21);
        StorageDead(_16);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &mut _3;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _26 = &(*_27);
        _25 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _26) -> [return: bb11, unwind: bb62];
    }

    bb11: {
        StorageDead(_26);
        _24 = anchor_lang::prelude::AccountMeta::new_readonly(move _25, const false) -> [return: bb12, unwind: bb62];
    }

    bb12: {
        StorageDead(_25);
        _22 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _23, move _24) -> [return: bb13, unwind: bb62];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_27);
        StorageDead(_22);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _3;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_1).4: anchor_lang::prelude::AccountInfo<'_>);
        _32 = &(*_33);
        _31 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _32) -> [return: bb14, unwind: bb62];
    }

    bb14: {
        StorageDead(_32);
        _30 = anchor_lang::prelude::AccountMeta::new(move _31, const false) -> [return: bb15, unwind: bb62];
    }

    bb15: {
        StorageDead(_31);
        _28 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _29, move _30) -> [return: bb16, unwind: bb62];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_33);
        StorageDead(_28);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut _3;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_1).5: anchor_lang::prelude::AccountInfo<'_>);
        _38 = &(*_39);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _38) -> [return: bb17, unwind: bb62];
    }

    bb17: {
        StorageDead(_38);
        _36 = anchor_lang::prelude::AccountMeta::new_readonly(move _37, const false) -> [return: bb18, unwind: bb62];
    }

    bb18: {
        StorageDead(_37);
        _34 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _35, move _36) -> [return: bb19, unwind: bb62];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_39);
        StorageDead(_34);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _3;
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_1).6: anchor_lang::prelude::AccountInfo<'_>);
        _44 = &(*_45);
        _43 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _44) -> [return: bb20, unwind: bb62];
    }

    bb20: {
        StorageDead(_44);
        _42 = anchor_lang::prelude::AccountMeta::new(move _43, const false) -> [return: bb21, unwind: bb62];
    }

    bb21: {
        StorageDead(_43);
        _40 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _41, move _42) -> [return: bb22, unwind: bb62];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_45);
        StorageDead(_40);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut _3;
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).7: anchor_lang::prelude::AccountInfo<'_>);
        _50 = &(*_51);
        _49 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _50) -> [return: bb23, unwind: bb62];
    }

    bb23: {
        StorageDead(_50);
        _48 = anchor_lang::prelude::AccountMeta::new(move _49, const false) -> [return: bb24, unwind: bb62];
    }

    bb24: {
        StorageDead(_49);
        _46 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _47, move _48) -> [return: bb25, unwind: bb62];
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_51);
        StorageDead(_46);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut _3;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &((*_1).8: anchor_lang::prelude::AccountInfo<'_>);
        _56 = &(*_57);
        _55 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _56) -> [return: bb26, unwind: bb62];
    }

    bb26: {
        StorageDead(_56);
        _54 = anchor_lang::prelude::AccountMeta::new_readonly(move _55, const false) -> [return: bb27, unwind: bb62];
    }

    bb27: {
        StorageDead(_55);
        _52 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _53, move _54) -> [return: bb28, unwind: bb62];
    }

    bb28: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_57);
        StorageDead(_52);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &mut _3;
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &((*_1).9: anchor_lang::prelude::AccountInfo<'_>);
        _62 = &(*_63);
        _61 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _62) -> [return: bb29, unwind: bb62];
    }

    bb29: {
        StorageDead(_62);
        _60 = anchor_lang::prelude::AccountMeta::new(move _61, const false) -> [return: bb30, unwind: bb62];
    }

    bb30: {
        StorageDead(_61);
        _58 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _59, move _60) -> [return: bb31, unwind: bb62];
    }

    bb31: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_63);
        StorageDead(_58);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &mut _3;
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &((*_1).10: anchor_lang::prelude::AccountInfo<'_>);
        _68 = &(*_69);
        _67 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _68) -> [return: bb32, unwind: bb62];
    }

    bb32: {
        StorageDead(_68);
        _66 = anchor_lang::prelude::AccountMeta::new(move _67, const false) -> [return: bb33, unwind: bb62];
    }

    bb33: {
        StorageDead(_67);
        _64 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _65, move _66) -> [return: bb34, unwind: bb62];
    }

    bb34: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_69);
        StorageDead(_64);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &mut _3;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &((*_1).11: anchor_lang::prelude::AccountInfo<'_>);
        _74 = &(*_75);
        _73 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _74) -> [return: bb35, unwind: bb62];
    }

    bb35: {
        StorageDead(_74);
        _72 = anchor_lang::prelude::AccountMeta::new(move _73, const false) -> [return: bb36, unwind: bb62];
    }

    bb36: {
        StorageDead(_73);
        _70 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _71, move _72) -> [return: bb37, unwind: bb62];
    }

    bb37: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_75);
        StorageDead(_70);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &mut _3;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &((*_1).12: anchor_lang::prelude::AccountInfo<'_>);
        _80 = &(*_81);
        _79 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _80) -> [return: bb38, unwind: bb62];
    }

    bb38: {
        StorageDead(_80);
        _78 = anchor_lang::prelude::AccountMeta::new(move _79, const false) -> [return: bb39, unwind: bb62];
    }

    bb39: {
        StorageDead(_79);
        _76 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _77, move _78) -> [return: bb40, unwind: bb62];
    }

    bb40: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_81);
        StorageDead(_76);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &mut _3;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &((*_1).13: anchor_lang::prelude::AccountInfo<'_>);
        _86 = &(*_87);
        _85 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _86) -> [return: bb41, unwind: bb62];
    }

    bb41: {
        StorageDead(_86);
        _84 = anchor_lang::prelude::AccountMeta::new(move _85, const false) -> [return: bb42, unwind: bb62];
    }

    bb42: {
        StorageDead(_85);
        _82 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _83, move _84) -> [return: bb43, unwind: bb62];
    }

    bb43: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_87);
        StorageDead(_82);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &mut _3;
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &((*_1).14: anchor_lang::prelude::AccountInfo<'_>);
        _92 = &(*_93);
        _91 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _92) -> [return: bb44, unwind: bb62];
    }

    bb44: {
        StorageDead(_92);
        _90 = anchor_lang::prelude::AccountMeta::new(move _91, const false) -> [return: bb45, unwind: bb62];
    }

    bb45: {
        StorageDead(_91);
        _88 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _89, move _90) -> [return: bb46, unwind: bb62];
    }

    bb46: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_93);
        StorageDead(_88);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &mut _3;
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &((*_1).15: anchor_lang::prelude::AccountInfo<'_>);
        _98 = &(*_99);
        _97 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _98) -> [return: bb47, unwind: bb62];
    }

    bb47: {
        StorageDead(_98);
        _96 = anchor_lang::prelude::AccountMeta::new(move _97, const false) -> [return: bb48, unwind: bb62];
    }

    bb48: {
        StorageDead(_97);
        _94 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _95, move _96) -> [return: bb49, unwind: bb62];
    }

    bb49: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_99);
        StorageDead(_94);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &mut _3;
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &((*_1).16: anchor_lang::prelude::AccountInfo<'_>);
        _104 = &(*_105);
        _103 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _104) -> [return: bb50, unwind: bb62];
    }

    bb50: {
        StorageDead(_104);
        _102 = anchor_lang::prelude::AccountMeta::new_readonly(move _103, const false) -> [return: bb51, unwind: bb62];
    }

    bb51: {
        StorageDead(_103);
        _100 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _101, move _102) -> [return: bb52, unwind: bb62];
    }

    bb52: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_105);
        StorageDead(_100);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &mut _3;
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &((*_1).17: anchor_lang::prelude::AccountInfo<'_>);
        _110 = &(*_111);
        _109 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _110) -> [return: bb53, unwind: bb62];
    }

    bb53: {
        StorageDead(_110);
        _108 = anchor_lang::prelude::AccountMeta::new_readonly(move _109, const false) -> [return: bb54, unwind: bb62];
    }

    bb54: {
        StorageDead(_109);
        _106 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _107, move _108) -> [return: bb55, unwind: bb62];
    }

    bb55: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_111);
        StorageDead(_106);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &mut _3;
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &((*_1).18: anchor_lang::prelude::AccountInfo<'_>);
        _116 = &(*_117);
        _115 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _116) -> [return: bb56, unwind: bb62];
    }

    bb56: {
        StorageDead(_116);
        _114 = anchor_lang::prelude::AccountMeta::new_readonly(move _115, const false) -> [return: bb57, unwind: bb62];
    }

    bb57: {
        StorageDead(_115);
        _112 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _113, move _114) -> [return: bb58, unwind: bb62];
    }

    bb58: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_117);
        StorageDead(_112);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &mut _3;
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &((*_1).19: anchor_lang::prelude::AccountInfo<'_>);
        _122 = &(*_123);
        _121 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _122) -> [return: bb59, unwind: bb62];
    }

    bb59: {
        StorageDead(_122);
        _120 = anchor_lang::prelude::AccountMeta::new_readonly(move _121, const false) -> [return: bb60, unwind: bb62];
    }

    bb60: {
        StorageDead(_121);
        _118 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _119, move _120) -> [return: bb61, unwind: bb62];
    }

    bb61: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_123);
        StorageDead(_118);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb62 (cleanup): {
        drop(_3) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }
}
