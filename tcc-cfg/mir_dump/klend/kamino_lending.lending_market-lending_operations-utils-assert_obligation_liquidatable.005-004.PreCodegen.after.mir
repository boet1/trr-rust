// MIR for `assert_obligation_liquidatable` after PreCodegen

fn assert_obligation_liquidatable(_1: &reserve::Reserve, _2: &reserve::Reserve, _3: &obligation::Obligation, _4: u64, _5: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug repay_reserve => _1;
    debug withdraw_reserve => _2;
    debug obligation => _3;
    debug liquidity_amount => _4;
    debug slot => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: !;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: anchor_lang::error::Error;
    let mut _14: anchor_lang::error::AnchorError;
    let mut _15: std::string::String;
    let mut _16: &LendingError;
    let _17: LendingError;
    let mut _18: u32;
    let mut _19: LendingError;
    let mut _20: std::string::String;
    let mut _21: &LendingError;
    let _22: LendingError;
    let mut _23: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _24: anchor_lang::error::ErrorOrigin;
    let mut _25: anchor_lang::error::Source;
    let mut _26: std::option::Option<anchor_lang::error::ComparedValues>;
    let _27: ();
    let mut _28: bool;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _30: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _31: &state::last_update::LastUpdate;
    let mut _32: u64;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _37: bool;
    let mut _38: !;
    let _39: ();
    let mut _40: &str;
    let _41: &str;
    let mut _42: &std::string::String;
    let _43: &std::string::String;
    let _44: std::string::String;
    let _45: std::string::String;
    let mut _46: std::fmt::Arguments<'_>;
    let mut _47: &[&str];
    let mut _48: &[&str; 1];
    let _49: &[&str; 1];
    let _50: [&str; 1];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let mut _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: &[core::fmt::rt::Argument<'_>; 1];
    let _54: [core::fmt::rt::Argument<'_>; 1];
    let mut _55: core::fmt::rt::Argument<'_>;
    let mut _56: &u8;
    let _57: &u8;
    let _58: state::last_update::PriceStatusFlags;
    let mut _59: &state::last_update::LastUpdate;
    let mut _60: &[core::fmt::rt::Placeholder];
    let mut _61: &[core::fmt::rt::Placeholder; 1];
    let _62: &[core::fmt::rt::Placeholder; 1];
    let _63: [core::fmt::rt::Placeholder; 1];
    let mut _64: core::fmt::rt::Placeholder;
    let mut _65: core::fmt::rt::Alignment;
    let mut _66: core::fmt::rt::Count;
    let mut _67: core::fmt::rt::Count;
    let mut _68: core::fmt::rt::UnsafeArg;
    let mut _69: anchor_lang::error::Error;
    let mut _70: anchor_lang::error::AnchorError;
    let mut _71: std::string::String;
    let mut _72: &LendingError;
    let _73: LendingError;
    let mut _74: u32;
    let mut _75: LendingError;
    let mut _76: std::string::String;
    let mut _77: &LendingError;
    let _78: LendingError;
    let mut _79: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _80: anchor_lang::error::ErrorOrigin;
    let mut _81: anchor_lang::error::Source;
    let mut _82: std::option::Option<anchor_lang::error::ComparedValues>;
    let _83: ();
    let mut _84: bool;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _86: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _87: &state::last_update::LastUpdate;
    let mut _88: u64;
    let mut _89: isize;
    let _90: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _93: bool;
    let mut _94: !;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: &std::string::String;
    let _99: &std::string::String;
    let _100: std::string::String;
    let _101: std::string::String;
    let mut _102: std::fmt::Arguments<'_>;
    let mut _103: &[&str];
    let mut _104: &[&str; 1];
    let _105: &[&str; 1];
    let _106: [&str; 1];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let mut _108: &[core::fmt::rt::Argument<'_>; 1];
    let _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: [core::fmt::rt::Argument<'_>; 1];
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &u8;
    let _113: &u8;
    let _114: state::last_update::PriceStatusFlags;
    let mut _115: &state::last_update::LastUpdate;
    let mut _116: &[core::fmt::rt::Placeholder];
    let mut _117: &[core::fmt::rt::Placeholder; 1];
    let _118: &[core::fmt::rt::Placeholder; 1];
    let _119: [core::fmt::rt::Placeholder; 1];
    let mut _120: core::fmt::rt::Placeholder;
    let mut _121: core::fmt::rt::Alignment;
    let mut _122: core::fmt::rt::Count;
    let mut _123: core::fmt::rt::Count;
    let mut _124: core::fmt::rt::UnsafeArg;
    let mut _125: anchor_lang::error::Error;
    let mut _126: anchor_lang::error::AnchorError;
    let mut _127: std::string::String;
    let mut _128: &LendingError;
    let _129: LendingError;
    let mut _130: u32;
    let mut _131: LendingError;
    let mut _132: std::string::String;
    let mut _133: &LendingError;
    let _134: LendingError;
    let mut _135: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _136: anchor_lang::error::ErrorOrigin;
    let mut _137: anchor_lang::error::Source;
    let mut _138: std::option::Option<anchor_lang::error::ComparedValues>;
    let _139: ();
    let mut _140: bool;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _142: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _143: &state::last_update::LastUpdate;
    let mut _144: u64;
    let mut _145: isize;
    let _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _149: bool;
    let mut _150: !;
    let _151: ();
    let mut _152: &str;
    let _153: &str;
    let mut _154: &std::string::String;
    let _155: &std::string::String;
    let _156: std::string::String;
    let _157: std::string::String;
    let mut _158: std::fmt::Arguments<'_>;
    let mut _159: &[&str];
    let mut _160: &[&str; 1];
    let _161: &[&str; 1];
    let _162: [&str; 1];
    let mut _163: &[core::fmt::rt::Argument<'_>];
    let mut _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: &[core::fmt::rt::Argument<'_>; 1];
    let _166: [core::fmt::rt::Argument<'_>; 1];
    let mut _167: core::fmt::rt::Argument<'_>;
    let mut _168: &u8;
    let _169: &u8;
    let _170: state::last_update::PriceStatusFlags;
    let mut _171: &state::last_update::LastUpdate;
    let mut _172: &[core::fmt::rt::Placeholder];
    let mut _173: &[core::fmt::rt::Placeholder; 1];
    let _174: &[core::fmt::rt::Placeholder; 1];
    let _175: [core::fmt::rt::Placeholder; 1];
    let mut _176: core::fmt::rt::Placeholder;
    let mut _177: core::fmt::rt::Alignment;
    let mut _178: core::fmt::rt::Count;
    let mut _179: core::fmt::rt::Count;
    let mut _180: core::fmt::rt::UnsafeArg;
    let mut _181: anchor_lang::error::Error;
    let mut _182: anchor_lang::error::AnchorError;
    let mut _183: std::string::String;
    let mut _184: &LendingError;
    let _185: LendingError;
    let mut _186: u32;
    let mut _187: LendingError;
    let mut _188: std::string::String;
    let mut _189: &LendingError;
    let _190: LendingError;
    let mut _191: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _192: anchor_lang::error::ErrorOrigin;
    let mut _193: anchor_lang::error::Source;
    let mut _194: std::option::Option<anchor_lang::error::ComparedValues>;
    let _195: ();
    let mut _196: bool;
    let mut _197: u128;
    let mut _198: !;
    let _199: ();
    let mut _200: &str;
    let _201: &str;
    let mut _202: anchor_lang::error::Error;
    let mut _203: anchor_lang::error::AnchorError;
    let mut _204: std::string::String;
    let mut _205: &LendingError;
    let _206: LendingError;
    let mut _207: u32;
    let mut _208: LendingError;
    let mut _209: std::string::String;
    let mut _210: &LendingError;
    let _211: LendingError;
    let mut _212: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _213: anchor_lang::error::ErrorOrigin;
    let mut _214: anchor_lang::error::Source;
    let mut _215: std::option::Option<anchor_lang::error::ComparedValues>;
    let _216: ();
    let mut _217: bool;
    let mut _218: u128;
    let mut _219: !;
    let _220: ();
    let mut _221: &str;
    let _222: &str;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::AnchorError;
    let mut _225: std::string::String;
    let mut _226: &LendingError;
    let _227: LendingError;
    let mut _228: u32;
    let mut _229: LendingError;
    let mut _230: std::string::String;
    let mut _231: &LendingError;
    let _232: LendingError;
    let mut _233: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _234: anchor_lang::error::ErrorOrigin;
    let mut _235: anchor_lang::error::Source;
    let mut _236: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _237: ();
    let mut _238: &LendingError;
    let mut _239: &LendingError;
    let mut _240: &LendingError;
    let mut _241: &LendingError;
    let mut _242: &[&str; 1];
    let mut _243: &LendingError;
    let mut _244: &LendingError;
    let mut _245: &[&str; 1];
    let mut _246: &LendingError;
    let mut _247: &LendingError;
    let mut _248: &[&str; 1];
    let mut _249: &LendingError;
    let mut _250: &LendingError;
    let mut _251: &LendingError;
    let mut _252: &LendingError;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    scope 1 {
        debug residual => _34;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _37;
        scope 4 {
        }
    }
    scope 5 {
        debug res => _45;
    }
    scope 6 {
    }
    scope 7 {
        debug residual => _90;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _93;
        scope 10 {
        }
    }
    scope 11 {
        debug res => _101;
    }
    scope 12 {
    }
    scope 13 {
        debug residual => _146;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _149;
        scope 16 {
        }
    }
    scope 17 {
        debug res => _157;
    }
    scope 18 {
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        _7 = Eq(move _8, const 0_u64);
        switchInt(move _7) -> [0: bb7, otherwise: bb1];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = const "Liquidity amount provided cannot be zero";
        _11 = &(*_12);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _239 = const _;
        _16 = &(*_239);
        _15 = LendingError::name(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = LendingError::InvalidAmount;
        _18 = <LendingError as Into<u32>>::into(move _19) -> [return: bb4, unwind: bb89];
    }

    bb4: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _238 = const _;
        _21 = &(*_238);
        _20 = <LendingError as ToString>::to_string(move _21) -> [return: bb5, unwind: bb89];
    }

    bb5: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3178_u32 };
        _24 = anchor_lang::error::ErrorOrigin::Source(move _25);
        StorageDead(_25);
        _23 = std::option::Option::<ErrorOrigin>::Some(move _24);
        StorageDead(_24);
        StorageLive(_26);
        _26 = std::option::Option::<ComparedValues>::None;
        _14 = anchor_lang::error::AnchorError { error_name: move _15, error_code_number: move _18, error_msg: move _20, error_origin: move _23, compared_values: move _26 };
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_15);
        _13 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _14) -> [return: bb6, unwind: bb90];
    }

    bb6: {
        StorageDead(_14);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _13);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb80;
    }

    bb7: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_32);
        _32 = _5;
        _30 = last_update::LastUpdate::is_stale(move _31, move _32, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _30) -> [return: bb9, unwind: bb90];
    }

    bb9: {
        StorageDead(_30);
        _33 = discriminant(_29);
        switchInt(move _33) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_37);
        _37 = ((_29 as Continue).0: bool);
        _28 = _37;
        StorageDead(_37);
        switchInt(move _28) -> [0: bb92, otherwise: bb91];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_34);
        _34 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_36);
        _36 = move _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _36) -> [return: bb13, unwind: bb99];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_34);
        _269 = discriminant(_29);
        StorageDead(_29);
        goto -> bb79;
    }

    bb14: {
        StorageDead(_59);
        _57 = &(_58.0: u8);
        _56 = &(*_57);
        _55 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _56) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_56);
        _54 = [move _55];
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = move _52 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_52);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_66);
        _66 = core::fmt::rt::Count::Implied;
        StorageLive(_67);
        _67 = core::fmt::rt::Count::Is(const 8_usize);
        _64 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _65, const 8_u32, move _66, move _67) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        _63 = [move _64];
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = move _61 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_61);
        StorageLive(_68);
        _68 = core::fmt::rt::UnsafeArg::new() -> [return: bb17, unwind continue];
    }

    bb17: {
        _46 = Arguments::<'_>::new_v1_formatted(move _47, move _51, move _60, move _68) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_68);
        StorageDead(_60);
        StorageDead(_51);
        StorageDead(_47);
        _45 = format(move _46) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_46);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_49);
        _44 = move _45;
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = <std::string::String as Deref>::deref(move _42) -> [return: bb20, unwind: bb88];
    }

    bb20: {
        _40 = &(*_41);
        StorageDead(_42);
        _39 = solana_program::log::sol_log(move _40) -> [return: bb21, unwind: bb88];
    }

    bb21: {
        StorageDead(_40);
        drop(_44) -> [return: bb22, unwind: bb90];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _241 = const _;
        _72 = &(*_241);
        _71 = LendingError::name(move _72) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_72);
        StorageLive(_74);
        StorageLive(_75);
        _75 = LendingError::ReserveStale;
        _74 = <LendingError as Into<u32>>::into(move _75) -> [return: bb24, unwind: bb87];
    }

    bb24: {
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        _240 = const _;
        _77 = &(*_240);
        _76 = <LendingError as ToString>::to_string(move _77) -> [return: bb25, unwind: bb87];
    }

    bb25: {
        StorageDead(_77);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3189_u32 };
        _80 = anchor_lang::error::ErrorOrigin::Source(move _81);
        StorageDead(_81);
        _79 = std::option::Option::<ErrorOrigin>::Some(move _80);
        StorageDead(_80);
        StorageLive(_82);
        _82 = std::option::Option::<ComparedValues>::None;
        _70 = anchor_lang::error::AnchorError { error_name: move _71, error_code_number: move _74, error_msg: move _76, error_origin: move _79, compared_values: move _82 };
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_71);
        _69 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _70) -> [return: bb26, unwind: bb90];
    }

    bb26: {
        StorageDead(_70);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _69);
        StorageDead(_69);
        goto -> bb79;
    }

    bb27: {
        StorageDead(_88);
        StorageDead(_87);
        _85 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _86) -> [return: bb28, unwind: bb90];
    }

    bb28: {
        StorageDead(_86);
        _89 = discriminant(_85);
        switchInt(move _89) -> [0: bb29, 1: bb30, otherwise: bb11];
    }

    bb29: {
        StorageLive(_93);
        _93 = ((_85 as Continue).0: bool);
        _84 = _93;
        StorageDead(_93);
        switchInt(move _84) -> [0: bb94, otherwise: bb93];
    }

    bb30: {
        StorageLive(_90);
        _90 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_92);
        _92 = move _90;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _92) -> [return: bb31, unwind: bb98];
    }

    bb31: {
        StorageDead(_92);
        StorageDead(_90);
        _267 = discriminant(_85);
        StorageDead(_85);
        goto -> bb78;
    }

    bb32: {
        StorageDead(_115);
        _113 = &(_114.0: u8);
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _112) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_112);
        _110 = [move _111];
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_108);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_122);
        _122 = core::fmt::rt::Count::Implied;
        StorageLive(_123);
        _123 = core::fmt::rt::Count::Is(const 8_usize);
        _120 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _121, const 8_u32, move _122, move _123) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        _119 = [move _120];
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = move _117 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_117);
        StorageLive(_124);
        _124 = core::fmt::rt::UnsafeArg::new() -> [return: bb35, unwind continue];
    }

    bb35: {
        _102 = Arguments::<'_>::new_v1_formatted(move _103, move _107, move _116, move _124) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_124);
        StorageDead(_116);
        StorageDead(_107);
        StorageDead(_103);
        _101 = format(move _102) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_102);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        _100 = move _101;
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = <std::string::String as Deref>::deref(move _98) -> [return: bb38, unwind: bb86];
    }

    bb38: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb39, unwind: bb86];
    }

    bb39: {
        StorageDead(_96);
        drop(_100) -> [return: bb40, unwind: bb90];
    }

    bb40: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _244 = const _;
        _128 = &(*_244);
        _127 = LendingError::name(move _128) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        _131 = LendingError::ReserveStale;
        _130 = <LendingError as Into<u32>>::into(move _131) -> [return: bb42, unwind: bb85];
    }

    bb42: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        _243 = const _;
        _133 = &(*_243);
        _132 = <LendingError as ToString>::to_string(move _133) -> [return: bb43, unwind: bb85];
    }

    bb43: {
        StorageDead(_133);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3200_u32 };
        _136 = anchor_lang::error::ErrorOrigin::Source(move _137);
        StorageDead(_137);
        _135 = std::option::Option::<ErrorOrigin>::Some(move _136);
        StorageDead(_136);
        StorageLive(_138);
        _138 = std::option::Option::<ComparedValues>::None;
        _126 = anchor_lang::error::AnchorError { error_name: move _127, error_code_number: move _130, error_msg: move _132, error_origin: move _135, compared_values: move _138 };
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        _125 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _126) -> [return: bb44, unwind: bb90];
    }

    bb44: {
        StorageDead(_126);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _125);
        StorageDead(_125);
        goto -> bb78;
    }

    bb45: {
        StorageDead(_144);
        StorageDead(_143);
        _141 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _142) -> [return: bb46, unwind: bb90];
    }

    bb46: {
        StorageDead(_142);
        _145 = discriminant(_141);
        switchInt(move _145) -> [0: bb47, 1: bb48, otherwise: bb11];
    }

    bb47: {
        StorageLive(_149);
        _149 = ((_141 as Continue).0: bool);
        _140 = _149;
        StorageDead(_149);
        switchInt(move _140) -> [0: bb96, otherwise: bb95];
    }

    bb48: {
        StorageLive(_146);
        _146 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_148);
        _148 = move _146;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _148) -> [return: bb49, unwind: bb97];
    }

    bb49: {
        StorageDead(_148);
        StorageDead(_146);
        _265 = discriminant(_141);
        StorageDead(_141);
        goto -> bb77;
    }

    bb50: {
        StorageDead(_171);
        _169 = &(_170.0: u8);
        _168 = &(*_169);
        _167 = core::fmt::rt::Argument::<'_>::new_binary::<u8>(move _168) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_168);
        _166 = [move _167];
        StorageDead(_167);
        _165 = &_166;
        _164 = &(*_165);
        _163 = move _164 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_164);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_178);
        _178 = core::fmt::rt::Count::Implied;
        StorageLive(_179);
        _179 = core::fmt::rt::Count::Is(const 8_usize);
        _176 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _177, const 8_u32, move _178, move _179) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        _175 = [move _176];
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = move _173 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_173);
        StorageLive(_180);
        _180 = core::fmt::rt::UnsafeArg::new() -> [return: bb53, unwind continue];
    }

    bb53: {
        _158 = Arguments::<'_>::new_v1_formatted(move _159, move _163, move _172, move _180) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_180);
        StorageDead(_172);
        StorageDead(_163);
        StorageDead(_159);
        _157 = format(move _158) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_158);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_161);
        _156 = move _157;
        StorageDead(_157);
        _155 = &_156;
        _154 = &(*_155);
        _153 = <std::string::String as Deref>::deref(move _154) -> [return: bb56, unwind: bb84];
    }

    bb56: {
        _152 = &(*_153);
        StorageDead(_154);
        _151 = solana_program::log::sol_log(move _152) -> [return: bb57, unwind: bb84];
    }

    bb57: {
        StorageDead(_152);
        drop(_156) -> [return: bb58, unwind: bb90];
    }

    bb58: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _247 = const _;
        _184 = &(*_247);
        _183 = LendingError::name(move _184) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_184);
        StorageLive(_186);
        StorageLive(_187);
        _187 = LendingError::ObligationStale;
        _186 = <LendingError as Into<u32>>::into(move _187) -> [return: bb60, unwind: bb83];
    }

    bb60: {
        StorageDead(_187);
        StorageLive(_188);
        StorageLive(_189);
        _246 = const _;
        _189 = &(*_246);
        _188 = <LendingError as ToString>::to_string(move _189) -> [return: bb61, unwind: bb83];
    }

    bb61: {
        StorageDead(_189);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3211_u32 };
        _192 = anchor_lang::error::ErrorOrigin::Source(move _193);
        StorageDead(_193);
        _191 = std::option::Option::<ErrorOrigin>::Some(move _192);
        StorageDead(_192);
        StorageLive(_194);
        _194 = std::option::Option::<ComparedValues>::None;
        _182 = anchor_lang::error::AnchorError { error_name: move _183, error_code_number: move _186, error_msg: move _188, error_origin: move _191, compared_values: move _194 };
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_183);
        _181 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _182) -> [return: bb62, unwind: bb90];
    }

    bb62: {
        StorageDead(_182);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _181);
        StorageDead(_181);
        goto -> bb77;
    }

    bb63: {
        StorageDead(_197);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = const "Obligation deposited value is zero";
        _200 = &(*_201);
        _199 = solana_program::log::sol_log(move _200) -> [return: bb65, unwind continue];
    }

    bb64: {
        StorageDead(_197);
        _195 = const ();
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = ((*_3).8: u128);
        _217 = Eq(move _218, const 0_u128);
        switchInt(move _217) -> [0: bb71, otherwise: bb70];
    }

    bb65: {
        StorageDead(_200);
        StorageDead(_201);
        StorageDead(_199);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _250 = const _;
        _205 = &(*_250);
        _204 = LendingError::name(move _205) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_205);
        StorageLive(_207);
        StorageLive(_208);
        _208 = LendingError::ObligationDepositsZero;
        _207 = <LendingError as Into<u32>>::into(move _208) -> [return: bb67, unwind: bb82];
    }

    bb67: {
        StorageDead(_208);
        StorageLive(_209);
        StorageLive(_210);
        _249 = const _;
        _210 = &(*_249);
        _209 = <LendingError as ToString>::to_string(move _210) -> [return: bb68, unwind: bb82];
    }

    bb68: {
        StorageDead(_210);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3216_u32 };
        _213 = anchor_lang::error::ErrorOrigin::Source(move _214);
        StorageDead(_214);
        _212 = std::option::Option::<ErrorOrigin>::Some(move _213);
        StorageDead(_213);
        StorageLive(_215);
        _215 = std::option::Option::<ComparedValues>::None;
        _203 = anchor_lang::error::AnchorError { error_name: move _204, error_code_number: move _207, error_msg: move _209, error_origin: move _212, compared_values: move _215 };
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_204);
        _202 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _203) -> [return: bb69, unwind: bb90];
    }

    bb69: {
        StorageDead(_203);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _202);
        StorageDead(_202);
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb80;
    }

    bb70: {
        StorageDead(_218);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = const "Obligation borrowed value is zero";
        _221 = &(*_222);
        _220 = solana_program::log::sol_log(move _221) -> [return: bb72, unwind continue];
    }

    bb71: {
        StorageDead(_218);
        _216 = const ();
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_237);
        _237 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _237);
        StorageDead(_237);
        goto -> bb80;
    }

    bb72: {
        StorageDead(_221);
        StorageDead(_222);
        StorageDead(_220);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _252 = const _;
        _226 = &(*_252);
        _225 = LendingError::name(move _226) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_226);
        StorageLive(_228);
        StorageLive(_229);
        _229 = LendingError::ObligationBorrowsZero;
        _228 = <LendingError as Into<u32>>::into(move _229) -> [return: bb74, unwind: bb81];
    }

    bb74: {
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        _251 = const _;
        _231 = &(*_251);
        _230 = <LendingError as ToString>::to_string(move _231) -> [return: bb75, unwind: bb81];
    }

    bb75: {
        StorageDead(_231);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 3220_u32 };
        _234 = anchor_lang::error::ErrorOrigin::Source(move _235);
        StorageDead(_235);
        _233 = std::option::Option::<ErrorOrigin>::Some(move _234);
        StorageDead(_234);
        StorageLive(_236);
        _236 = std::option::Option::<ComparedValues>::None;
        _224 = anchor_lang::error::AnchorError { error_name: move _225, error_code_number: move _228, error_msg: move _230, error_origin: move _233, compared_values: move _236 };
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_225);
        _223 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _224) -> [return: bb76, unwind: bb90];
    }

    bb76: {
        StorageDead(_224);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _223);
        StorageDead(_223);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb80;
    }

    bb77: {
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb80;
    }

    bb78: {
        StorageDead(_84);
        StorageDead(_83);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb80;
    }

    bb80: {
        return;
    }

    bb81 (cleanup): {
        drop(_225) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_204) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_183) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_156) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_127) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_100) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_71) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_44) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_15) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        resume;
    }

    bb91: {
        _253 = discriminant(_29);
        StorageDead(_29);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _242 = const _;
        _49 = &(*_242);
        _48 = &(*_49);
        _47 = move _48 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_48);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &((*_1).1: state::last_update::LastUpdate);
        _58 = last_update::LastUpdate::get_price_status(move _59) -> [return: bb14, unwind continue];
    }

    bb92: {
        _255 = discriminant(_29);
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &((*_2).1: state::last_update::LastUpdate);
        StorageLive(_88);
        _88 = _5;
        _86 = last_update::LastUpdate::is_stale(move _87, move _88, const _) -> [return: bb27, unwind continue];
    }

    bb93: {
        _257 = discriminant(_85);
        StorageDead(_85);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _245 = const _;
        _105 = &(*_245);
        _104 = &(*_105);
        _103 = move _104 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_104);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &((*_2).1: state::last_update::LastUpdate);
        _114 = last_update::LastUpdate::get_price_status(move _115) -> [return: bb32, unwind continue];
    }

    bb94: {
        _259 = discriminant(_85);
        StorageDead(_85);
        _83 = const ();
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &((*_3).1: state::last_update::LastUpdate);
        StorageLive(_144);
        _144 = _5;
        _142 = last_update::LastUpdate::is_stale(move _143, move _144, const _) -> [return: bb45, unwind continue];
    }

    bb95: {
        _261 = discriminant(_141);
        StorageDead(_141);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _248 = const _;
        _161 = &(*_248);
        _160 = &(*_161);
        _159 = move _160 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_160);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &((*_3).1: state::last_update::LastUpdate);
        _170 = last_update::LastUpdate::get_price_status(move _171) -> [return: bb50, unwind continue];
    }

    bb96: {
        _263 = discriminant(_141);
        StorageDead(_141);
        _139 = const ();
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = ((*_3).6: u128);
        _196 = Eq(move _197, const 0_u128);
        switchInt(move _196) -> [0: bb64, otherwise: bb63];
    }

    bb97 (cleanup): {
        _271 = discriminant(_141);
        goto -> bb90;
    }

    bb98 (cleanup): {
        _272 = discriminant(_85);
        goto -> bb90;
    }

    bb99 (cleanup): {
        _273 = discriminant(_29);
        goto -> bb90;
    }
}
