// MIR for `config_items::<impl at programs\klend\src\lending_market\config_items.rs:369:1: 369:65>::fmt` before PreCodegen

fn config_items::<impl at programs\klend\src\lending_market\config_items.rs:369:1: 369:65>::fmt(_1: &RenderedOption<'_, R, T>, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &&R;
    let _4: &std::result::Result<std::option::Option<&T>, anchor_lang::error::Error>;
    let mut _5: isize;
    let mut _6: isize;
    let mut _8: &&R;
    let mut _9: (&T, &mut std::fmt::Formatter<'_>);
    let mut _10: &T;
    let mut _11: &mut std::fmt::Formatter<'_>;
    let mut _12: &mut std::fmt::Formatter<'_>;
    let mut _13: &str;
    let _14: &str;
    let mut _16: &mut std::fmt::Formatter<'_>;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &&anchor_lang::error::Error;
    let _28: &&anchor_lang::error::Error;
    let mut _30: &T;
    scope 1 {
        debug renderer => _3;
        debug value => _4;
        let _7: &&T;
        let _15: &anchor_lang::error::Error;
        scope 2 {
            debug value => _7;
        }
        scope 3 {
            debug error => _15;
            let mut _29: &[&str; 2];
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &((*_1).0: &R);
        StorageLive(_4);
        _4 = &((*_1).1: std::result::Result<std::option::Option<&T>, anchor_lang::error::Error>);
        _6 = discriminant((*_4));
        switchInt(move _6) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _5 = discriminant((((*_4) as Ok).0: std::option::Option<&T>));
        switchInt(move _5) -> [0: bb6, 1: bb4, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_15);
        _15 = &(((*_4) as Err).0: anchor_lang::error::Error);
        StorageLive(_16);
        _16 = &mut (*_2);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _29 = const _;
        _20 = &(*_29);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_15;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_lang::error::Error>(move _27) -> [return: bb8, unwind continue];
    }

    bb4: {
        StorageLive(_7);
        _7 = &(((((*_4) as Ok).0: std::option::Option<&T>) as Some).0: &T);
        StorageLive(_8);
        _8 = &(*_3);
        StorageLive(_9);
        StorageLive(_10);
        _30 = deref_copy (*_7);
        _10 = &(*_30);
        StorageLive(_11);
        _11 = &mut (*_2);
        _9 = (move _10, move _11);
        _0 = <&R as Fn<(&T, &mut Formatter<'_>)>>::call(move _8, move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb11;
    }

    bb6: {
        StorageLive(_12);
        _12 = &mut (*_2);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const "<not present>";
        _13 = &(*_14);
        _0 = Formatter::<'_>::write_str(move _12, move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb11;
    }

    bb8: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_18);
        _0 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
