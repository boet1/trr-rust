// MIR for `referrer_token_state` after PreCodegen

fn referrer_token_state(_1: anchor_lang::prelude::Pubkey, _2: anchor_lang::prelude::Pubkey) -> (anchor_lang::prelude::Pubkey, u8) {
    debug referrer => _1;
    debug reserve => _2;
    let mut _0: (anchor_lang::prelude::Pubkey, u8);
    let mut _3: &[&[u8]];
    let mut _4: &[&[u8]; 3];
    let _5: &[&[u8]; 3];
    let _6: [&[u8]; 3];
    let mut _7: &[u8];
    let _8: &[u8];
    let mut _9: &[u8];
    let _10: &[u8];
    let mut _11: &anchor_lang::prelude::Pubkey;
    let mut _12: &[u8];
    let _13: &[u8];
    let mut _14: &anchor_lang::prelude::Pubkey;
    let mut _15: &anchor_lang::prelude::Pubkey;
    let _16: &anchor_lang::prelude::Pubkey;
    let _17: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const _;
        _7 = &(*_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_1;
        _10 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &(*_10);
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &_2;
        _13 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = &(*_13);
        StorageDead(_14);
        _6 = [move _7, move _9, move _12];
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_7);
        _5 = &_6;
        _4 = &(*_5);
        _3 = move _4 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _16 = &(*_17);
        _15 = &(*_16);
        _0 = anchor_lang::prelude::Pubkey::find_program_address(move _3, move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_3);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        return;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
