// MIR for `borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:65:33: 65:42>::eq` before PreCodegen

fn borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:65:33: 65:42>::eq(_1: &CurveSegment, _2: &CurveSegment) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: u32;
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: &utils::borrow_rate_curve::CurvePoint;
    let mut _10: &utils::borrow_rate_curve::CurvePoint;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u32);
        StorageLive(_5);
        _5 = ((*_2).0: u32);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u32);
        StorageLive(_8);
        _8 = ((*_2).1: u32);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = &((*_1).2: utils::borrow_rate_curve::CurvePoint);
        StorageLive(_10);
        _10 = &((*_2).2: utils::borrow_rate_curve::CurvePoint);
        _0 = <CurvePoint as PartialEq>::eq(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb5;
    }

    bb5: {
        _0 = const false;
        goto -> bb7;
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
