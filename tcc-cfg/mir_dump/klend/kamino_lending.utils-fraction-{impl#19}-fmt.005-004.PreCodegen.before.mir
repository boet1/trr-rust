// MIR for `utils::fraction::<impl at programs\klend\src\utils\fraction.rs:398:1: 398:37>::fmt` before PreCodegen

fn utils::fraction::<impl at programs\klend\src\utils\fraction.rs:398:1: 398:37>::fmt(_1: &FractionDisplay<'_>, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug formater => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: u128;
    let mut _4: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _6: u128;
    let mut _7: (u128, bool);
    let mut _9: u128;
    let mut _10: bool;
    let mut _12: u128;
    let mut _13: u128;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: u32;
    let mut _19: bool;
    let mut _20: (u64, bool);
    let mut _21: u32;
    let mut _22: bool;
    let mut _23: &mut std::fmt::Formatter<'_>;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 2];
    let _27: &[&str; 2];
    let _28: [&str; 2];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 2];
    let _31: &[core::fmt::rt::Argument<'_>; 2];
    let _32: [core::fmt::rt::Argument<'_>; 2];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &u128;
    let _35: &u128;
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: &u64;
    let _38: &u64;
    let mut _39: &[core::fmt::rt::Placeholder];
    let mut _40: &[core::fmt::rt::Placeholder; 2];
    let _41: &[core::fmt::rt::Placeholder; 2];
    let _42: [core::fmt::rt::Placeholder; 2];
    let mut _43: core::fmt::rt::Placeholder;
    let mut _44: core::fmt::rt::Alignment;
    let mut _45: core::fmt::rt::Count;
    let mut _46: core::fmt::rt::Count;
    let mut _47: core::fmt::rt::Placeholder;
    let mut _48: core::fmt::rt::Alignment;
    let mut _49: core::fmt::rt::Count;
    let mut _50: core::fmt::rt::Count;
    let mut _51: core::fmt::rt::UnsafeArg;
    let mut _53: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug sf => _3;
        let _5: u128;
        scope 2 {
            debug sf => _5;
            let _8: u128;
            scope 3 {
                debug i => _8;
                let _11: u64;
                scope 4 {
                    debug f_p => _11;
                    let _14: u64;
                    scope 5 {
                        debug f_p => _14;
                        let mut _52: &[&str; 2];
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _53 = deref_copy ((*_1).0: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _4 = (*_53);
        _3 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _7 = CheckedAdd(_6, const _);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const _) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = move (_7.0: u128);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _5;
        _10 = Lt(const _, const 128_u32);
        assert(move _10, "attempt to shift right by `{}`, which would overflow", const _) -> [success: bb3, unwind continue];
    }

    bb3: {
        _8 = Shr(move _9, const _);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _5;
        _12 = BitAnd(move _13, const _);
        StorageDead(_13);
        _11 = move _12 as u64 (IntToInt);
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _11;
        _18 = const 30_i32 as u32 (IntToInt);
        _19 = Lt(move _18, const 64_u32);
        assert(move _19, "attempt to shift right by `{}`, which would overflow", const 30_i32) -> [success: bb4, unwind continue];
    }

    bb4: {
        _16 = Shr(move _17, const 30_i32);
        StorageDead(_17);
        _20 = CheckedMul(_16, const 10000_u64);
        assert(!move (_20.1: bool), "attempt to compute `{} * {}`, which would overflow", move _16, const 10000_u64) -> [success: bb5, unwind continue];
    }

    bb5: {
        _15 = move (_20.0: u64);
        StorageDead(_16);
        _21 = const 30_i32 as u32 (IntToInt);
        _22 = Lt(move _21, const 64_u32);
        assert(move _22, "attempt to shift right by `{}`, which would overflow", const 30_i32) -> [success: bb6, unwind continue];
    }

    bb6: {
        _14 = Shr(move _15, const 30_i32);
        StorageDead(_15);
        StorageLive(_23);
        _23 = &mut (*_2);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _52 = const _;
        _27 = &(*_52);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_8;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _34) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_14;
        _37 = &(*_38);
        _36 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _37) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_37);
        _32 = [move _33, move _36];
        StorageDead(_36);
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_45);
        _45 = core::fmt::rt::Count::Implied;
        StorageLive(_46);
        _46 = core::fmt::rt::Count::Implied;
        _43 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _44, const 0_u32, move _45, move _46) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        _48 = core::fmt::rt::Alignment::Right;
        StorageLive(_49);
        _49 = core::fmt::rt::Count::Implied;
        StorageLive(_50);
        _50 = core::fmt::rt::Count::Is(const 4_usize);
        _47 = core::fmt::rt::Placeholder::new(const 1_usize, const '0', move _48, const 0_u32, move _49, move _50) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _42 = [move _43, move _47];
        StorageDead(_47);
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_51);
        _51 = core::fmt::rt::UnsafeArg::new() -> [return: bb11, unwind continue];
    }

    bb11: {
        _24 = Arguments::<'_>::new_v1_formatted(move _25, move _29, move _39, move _51) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_51);
        StorageDead(_39);
        StorageDead(_29);
        StorageDead(_25);
        _0 = Formatter::<'_>::write_fmt(move _23, move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        return;
    }
}
