// MIR for `referral::<impl at programs\klend\src\state\referral.rs:54:1: 54:36>::fmt` after PreCodegen

fn referral::<impl at programs\klend\src\state\referral.rs:54:1: 54:36>::fmt(_1: &referral::ReferrerTokenState, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &anchor_lang::prelude::Pubkey;
    let _4: &anchor_lang::prelude::Pubkey;
    let _5: &u128;
    let _6: &u128;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: u128;
    let mut _11: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _12: u128;
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _15: std::result::Result<(), std::fmt::Error>;
    let mut _16: &mut std::fmt::Formatter<'_>;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 4];
    let _20: &[&str; 4];
    let _21: [&str; 4];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 4];
    let _24: &[core::fmt::rt::Argument<'_>; 4];
    let _25: [core::fmt::rt::Argument<'_>; 4];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &&anchor_lang::prelude::Pubkey;
    let _28: &&anchor_lang::prelude::Pubkey;
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &&anchor_lang::prelude::Pubkey;
    let _31: &&anchor_lang::prelude::Pubkey;
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &u64;
    let _34: &u64;
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &u64;
    let _37: &u64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, std::fmt::Error>;
    let mut _43: ();
    scope 1 {
        debug referrer => _3;
        debug mint => _4;
        debug amount_unclaimed_sf => _5;
        debug amount_cumulative_sf => _6;
        let _7: u64;
        scope 2 {
            debug amount_unclaimed => _7;
            let _10: u64;
            scope 3 {
                debug amount_cumulative => _10;
                let _39: std::result::Result<std::convert::Infallible, std::fmt::Error>;
                let _42: ();
                let mut _44: &[&str; 4];
                scope 4 {
                    debug residual => _39;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => _42;
                    scope 7 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_4);
        _4 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        _5 = &((*_1).2: u128);
        StorageLive(_6);
        _6 = &((*_1).3: u128);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = (*_5);
        _8 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_num::<u64>(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = (*_6);
        _11 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _10 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_num::<u64>(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut (*_2);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _44 = const _;
        _20 = &(*_44);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_3;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _27) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_4;
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _30) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_7;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _33) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_10;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _36) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_36);
        _25 = [move _26, move _29, move _32, move _35];
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_18);
        _15 = Formatter::<'_>::write_fmt(move _16, move _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<(), std::fmt::Error> as Try>::branch(move _15) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_15);
        _38 = discriminant(_14);
        switchInt(move _38) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_42);
        _42 = ((_14 as Continue).0: ());
        _13 = _42;
        StorageDead(_42);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_43);
        _43 = ();
        _0 = std::result::Result::<(), std::fmt::Error>::Ok(move _43);
        StorageDead(_43);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb16;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_39);
        _39 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), std::fmt::Error> as FromResidual<std::result::Result<Infallible, std::fmt::Error>>>::from_residual(move _41) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb16;
    }

    bb16: {
        return;
    }
}
