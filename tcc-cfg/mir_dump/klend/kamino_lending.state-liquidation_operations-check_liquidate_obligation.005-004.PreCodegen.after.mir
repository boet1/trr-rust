// MIR for `check_liquidate_obligation` after PreCodegen

fn check_liquidate_obligation(_1: &state::types::LiquidationCheckInputs<'_>) -> std::option::Option<state::types::LiquidationParams> {
    let mut _0: std::option::Option<state::types::LiquidationParams>;
    let _2: &state::lending_market::LendingMarket;
    let _3: &state::reserve::Reserve;
    let _4: &state::reserve::Reserve;
    let _5: &state::obligation::Obligation;
    let _6: std::option::Option<u64>;
    let mut _8: &state::obligation::Obligation;
    let mut _10: &state::obligation::Obligation;
    let mut _12: &state::obligation::Obligation;
    let mut _14: std::option::Option<u64>;
    let mut _16: std::option::Option<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _18: ();
    let mut _19: bool;
    let mut _20: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _21: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _22: !;
    let _23: ();
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[&str; 7];
    let _28: &[&str; 7];
    let _29: [&str; 7];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let mut _31: &[core::fmt::rt::Argument<'_>; 6];
    let _32: &[core::fmt::rt::Argument<'_>; 6];
    let _33: [core::fmt::rt::Argument<'_>; 6];
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &utils::fraction::FractionDisplay<'_>;
    let _36: &utils::fraction::FractionDisplay<'_>;
    let _37: utils::fraction::FractionDisplay<'_>;
    let mut _38: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _39: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _40: u128;
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &utils::fraction::FractionDisplay<'_>;
    let _43: &utils::fraction::FractionDisplay<'_>;
    let _44: utils::fraction::FractionDisplay<'_>;
    let mut _45: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _46: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _47: u128;
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &u64;
    let _50: &u64;
    let _51: u64;
    let mut _52: std::option::Option<u64>;
    let mut _53: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &u64;
    let _56: &u64;
    let _57: u64;
    let mut _58: std::option::Option<u64>;
    let mut _59: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &u64;
    let _62: &u64;
    let _63: u64;
    let mut _64: std::option::Option<u64>;
    let mut _65: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &std::option::Option<u64>;
    let _68: &std::option::Option<u64>;
    let mut _70: &state::lending_market::LendingMarket;
    let mut _71: &state::reserve::ReserveConfig;
    let _72: &state::reserve::ReserveConfig;
    let mut _73: &state::reserve::ReserveConfig;
    let _74: &state::reserve::ReserveConfig;
    let mut _75: &state::obligation::Obligation;
    let mut _76: state::types::LiquidationParams;
    let mut _77: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _78: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _79: &state::reserve::ReserveConfig;
    let _80: &state::reserve::ReserveConfig;
    let mut _81: &state::reserve::ReserveConfig;
    let _82: &state::reserve::ReserveConfig;
    let mut _83: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _84: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _85: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _86: u16;
    let mut _87: state::types::LiquidationReason;
    scope 1 {
        debug lending_market => _2;
        debug collateral_reserve => _3;
        debug debt_reserve => _4;
        debug obligation => _5;
        debug max_allowed_ltv_override_pct_opt => _6;
        let _7: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug user_ltv => _7;
            let _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 3 {
                debug user_no_bf_ltv => _9;
                let _11: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 4 {
                    debug max_allowed_ltv_user => _11;
                    let _13: std::option::Option<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
                    scope 5 {
                        debug max_allowed_ltv_override_opt => _13;
                        let _15: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        scope 6 {
                            debug max_allowed_ltv => _15;
                            let _69: u16;
                            let mut _88: &[&str; 7];
                            scope 7 {
                                debug emode_max_liquidation_bonus_bps => _69;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = ((*_1).0: &state::lending_market::LendingMarket);
        StorageLive(_3);
        _3 = ((*_1).1: &state::reserve::Reserve);
        StorageLive(_4);
        _4 = ((*_1).2: &state::reserve::Reserve);
        StorageLive(_5);
        _5 = ((*_1).3: &state::obligation::Obligation);
        StorageLive(_6);
        _6 = ((*_1).5: std::option::Option<u64>);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_5);
        _7 = obligation::Obligation::loan_to_value(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_5);
        _9 = obligation::Obligation::no_bf_loan_to_value(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_5);
        _11 = obligation::Obligation::unhealthy_loan_to_value(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _6;
        _13 = std::option::Option::<u64>::map::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, fn(u64) -> FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> {<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u64>}>(move _14, <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::from_percent::<u64>) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _13;
        StorageLive(_17);
        _17 = _11;
        _15 = std::option::Option::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>::unwrap_or(move _16, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_7;
        StorageLive(_21);
        _21 = &_15;
        _19 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _20, move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _19) -> [0: bb28, otherwise: bb7];
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _88 = const _;
        _28 = &(*_88);
        _27 = &(*_28);
        _26 = move _27 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = ((*_5).8: u128);
        _39 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _40) -> [return: bb8, unwind continue];
    }

    bb8: {
        _38 = &_39;
        StorageDead(_40);
        _37 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _38) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_35);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_5).11: u128);
        _46 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _47) -> [return: bb11, unwind continue];
    }

    bb11: {
        _45 = &_46;
        StorageDead(_47);
        _44 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _45) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _42) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_42);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_7;
        _52 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_percent::<u64>(move _53) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_53);
        _51 = std::option::Option::<u64>::unwrap(move _52) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _49) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_49);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_15;
        _58 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_percent::<u64>(move _59) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_59);
        _57 = std::option::Option::<u64>::unwrap(move _58) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _55) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_55);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_11;
        _64 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_percent::<u64>(move _65) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_65);
        _63 = std::option::Option::<u64>::unwrap(move _64) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _61) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_61);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_6;
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_debug::<std::option::Option<u64>>(move _67) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_67);
        _33 = [move _34, move _41, move _48, move _54, move _60, move _66];
        StorageDead(_66);
        StorageDead(_60);
        StorageDead(_54);
        StorageDead(_48);
        StorageDead(_41);
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = move _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_31);
        _25 = Arguments::<'_>::new_v1(move _26, move _30) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_30);
        StorageDead(_26);
        _24 = _print(move _25) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_25);
        StorageDead(_68);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_24);
        _23 = const ();
        StorageDead(_23);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_2);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &((*_3).9: state::reserve::ReserveConfig);
        _71 = &(*_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &((*_4).9: state::reserve::ReserveConfig);
        _73 = &(*_74);
        StorageLive(_75);
        _75 = &(*_5);
        _69 = get_emode_max_liquidation_bonus(move _70, move _71, move _73, move _75) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _7;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((*_3).9: state::reserve::ReserveConfig);
        _79 = &(*_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &((*_4).9: state::reserve::ReserveConfig);
        _81 = &(*_82);
        StorageLive(_83);
        _83 = _15;
        StorageLive(_84);
        _84 = _7;
        StorageLive(_85);
        _85 = _9;
        StorageLive(_86);
        _86 = _69;
        _78 = calculate_liquidation_bonus(move _79, move _81, move _83, move _84, move _85, move _86) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageLive(_87);
        _87 = state::types::LiquidationReason::LtvExceeded;
        _76 = state::types::LiquidationParams { user_ltv: move _77, liquidation_bonus_rate: move _78, liquidation_reason: move _87 };
        StorageDead(_87);
        StorageDead(_78);
        StorageDead(_77);
        _0 = std::option::Option::<state::types::LiquidationParams>::Some(move _76);
        StorageDead(_76);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_69);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        _0 = std::option::Option::<state::types::LiquidationParams>::None;
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb29;
    }

    bb29: {
        return;
    }
}
