// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::borrow` before PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:491:1: 491:22>::borrow(_1: &mut ReserveLiquidity, _2: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug borrow_f => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: u64;
    let mut _4: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _5: ();
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: !;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 2];
    let _24: &[core::fmt::rt::Argument<'_>; 2];
    let _25: [core::fmt::rt::Argument<'_>; 2];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &u64;
    let _28: &u64;
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &u64;
    let _31: &u64;
    let mut _32: anchor_lang::error::Error;
    let mut _33: anchor_lang::error::AnchorError;
    let mut _34: std::string::String;
    let mut _35: &LendingError;
    let _36: LendingError;
    let mut _37: u32;
    let mut _38: LendingError;
    let mut _39: std::string::String;
    let mut _40: &LendingError;
    let _41: LendingError;
    let mut _42: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _43: anchor_lang::error::ErrorOrigin;
    let mut _44: anchor_lang::error::Source;
    let mut _45: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _47: u128;
    let mut _48: u64;
    let mut _49: (u64, bool);
    let mut _50: u128;
    let mut _51: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _52: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _53: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _54: ();
    scope 1 {
        debug borrow_amount => _3;
        let _16: std::string::String;
        let _46: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        let mut _55: &LendingError;
        let mut _56: &LendingError;
        let mut _57: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
        scope 3 {
            debug borrowed_amount_f => _46;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_2;
        _3 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_floor::<u64>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _3;
        StorageLive(_8);
        _8 = ((*_1).3: u64);
        _6 = Gt(move _7, move _8);
        switchInt(move _6) -> [0: bb14, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _57 = const _;
        _20 = &(*_57);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_3;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_1).3: u64);
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _30) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_30);
        _25 = [move _26, move _29];
        StorageDead(_29);
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <std::string::String as Deref>::deref(move _13) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        StorageDead(_11);
        drop(_15) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _56 = const _;
        _35 = &(*_56);
        _34 = LendingError::name(move _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        _38 = LendingError::InsufficientLiquidity;
        _37 = <LendingError as Into<u32>>::into(move _38) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _55 = const _;
        _40 = &(*_55);
        _39 = <LendingError as ToString>::to_string(move _40) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\reserve.rs", line: const 567_u32 };
        _43 = anchor_lang::error::ErrorOrigin::Source(move _44);
        StorageDead(_44);
        _42 = std::option::Option::<ErrorOrigin>::Some(move _43);
        StorageDead(_43);
        StorageLive(_45);
        _45 = std::option::Option::<ComparedValues>::None;
        _33 = anchor_lang::error::AnchorError { error_name: move _34, error_code_number: move _37, error_msg: move _39, error_origin: move _42, compared_values: move _45 };
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        _32 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _33) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        StorageDead(_33);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _32);
        StorageDead(_32);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb19;
    }

    bb14: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_1).4: u128);
        _46 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_bits(move _47) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_47);
        StorageLive(_48);
        _48 = _3;
        _49 = CheckedSub(((*_1).3: u64), _48);
        assert(!move (_49.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).3: u64), move _48) -> [success: bb16, unwind continue];
    }

    bb16: {
        ((*_1).3: u64) = move (_49.0: u64);
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _46;
        StorageLive(_53);
        _53 = _2;
        _51 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _52, move _53) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::to_bits(move _51) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_51);
        ((*_1).4: u128) = move _50;
        StorageDead(_50);
        StorageLive(_54);
        _54 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _54);
        StorageDead(_54);
        StorageDead(_46);
        StorageDead(_3);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_34) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_15) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}
