digraph Mir_0_2593 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_price_account(_1: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;) -&gt; std::result::Result&lt;std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _6: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _7: !;<br align="left"/>let mut _8: anchor_lang::error::Error;<br align="left"/>let mut _9: LendingError;<br align="left"/>let _10: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;&gt;;<br align="left"/>let mut _12: std::result::Result&lt;std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _13: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _18: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _19: &amp;ReErased [u8];<br align="left"/>let _20: &amp;ReErased [u8];<br align="left"/>let mut _21: &amp;ReErased [u8];<br align="left"/>let _22: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _23: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _24: std::ops::Range&lt;usize&gt;;<br align="left"/>let _25: ();<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: &amp;ReErased &amp;ReErased [u8];<br align="left"/>let mut _28: &amp;ReErased [u8; 8_usize];<br align="left"/>let _29: [u8; 8_usize];<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: anchor_lang::error::Error;<br align="left"/>let mut _32: LendingError;<br align="left"/>let mut _33: std::cell::Ref&lt;ReErased, scope_types::OraclePrices&gt;;<br align="left"/>let mut _34: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _35: Closure(DefId(0:2595 ~ kamino_lending[6389]::utils::prices::scope::get_price_account::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased mut [u8],)) -&gt; &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) scope_types::OraclePrices, [Region(BrAnon)]), ()]);<br align="left"/>let mut _36: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _37: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _38: &amp;ReErased mut [u8];<br align="left"/>let mut _39: bool;<br align="left"/>let mut _40: isize;<br align="left"/>let mut _41: isize;<br align="left"/>let mut _42: isize;<br align="left"/>let mut _43: isize;<br align="left"/>let mut _44: isize;<br align="left"/>debug scope_price_account =&gt; _1;<br align="left"/>debug data =&gt; _10;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>debug disc_bytes =&gt; _19;<br align="left"/>>;
    bb0__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_39 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_37 = deref_copy ((*_1).0: &amp;anchor_lang::prelude::Pubkey)<br/>_4 = &amp;(*_37)<br/>StorageLive(_5)<br/>_36 = const _<br/>_5 = &amp;(*_36)<br/></td></tr><tr><td align="left">_3 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _4, move _5)</td></tr></table>>];
    bb1__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb2__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = LendingError::InvalidOracleConfig<br/></td></tr><tr><td align="left">_8 = &lt;LendingError as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _9)</td></tr></table>>];
    bb3__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, scope_types::OraclePrices&gt;, anchor_lang::error::Error&gt;::Err(move _8)<br/>StorageDead(_8)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;(*_1)<br/></td></tr><tr><td align="left">_12 = anchor_lang::prelude::AccountInfo::&lt;'_&gt;::try_borrow_data(move _13)</td></tr></table>>];
    bb5__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;Ref&lt;'_, &amp;mut [u8]&gt;, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb6__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb7__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = move ((_11 as Continue).0: std::cell::Ref&lt;'_, &amp;mut [u8]&gt;)<br/>_39 = const true<br/>_10 = move _18<br/>StorageDead(_18)<br/>_40 = discriminant(_11)<br/>StorageDead(_11)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;_10<br/></td></tr><tr><td align="left">_22 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _23)</td></tr></table>>];
    bb8__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = move ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_17)<br/>_17 = move _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Ref&lt;'_, scope_types::OraclePrices&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb10__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>_42 = discriminant(_11)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_38 = deref_copy (*_22)<br/>_21 = &amp;(*_38)<br/>StorageDead(_23)<br/>StorageLive(_24)<br/>_24 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 8_usize }<br/></td></tr><tr><td align="left">_20 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _21, move _24)</td></tr></table>>];
    bb12__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_21)<br/>_19 = &amp;(*_20)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;_19<br/>StorageLive(_28)<br/>StorageLive(_29)<br/></td></tr><tr><td align="left">_29 = &lt;scope_types::OraclePrices as Discriminator&gt;::discriminator()</td></tr></table>>];
    bb13__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_28 = &amp;_29<br/></td></tr><tr><td align="left">_26 = &lt;&amp;[u8] as PartialEq&lt;[u8; 8]&gt;&gt;::ne(move _27, move _28)</td></tr></table>>];
    bb14__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb15__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = LendingError::CouldNotDeserializeScope<br/></td></tr><tr><td align="left">_31 = &lt;LendingError as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _32)</td></tr></table>>];
    bb16__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, scope_types::OraclePrices&gt;, anchor_lang::error::Error&gt;::Err(move _31)<br/>StorageDead(_31)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">drop(_10)</td></tr></table>>];
    bb17__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>_25 = const ()<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_39 = const false<br/>_34 = move _10<br/>StorageLive(_35)<br/>_35 = {closure@programs\klend\src\utils\prices\scope.rs:72:23: 72:29}<br/></td></tr><tr><td align="left">_33 = Ref::&lt;'_, &amp;mut [u8]&gt;::map::&lt;scope_types::OraclePrices, {closure@programs\klend\src\utils\prices\scope.rs:72:23: 72:29}&gt;(move _34, move _35)</td></tr></table>>];
    bb18__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>_0 = std::result::Result::&lt;Ref&lt;'_, scope_types::OraclePrices&gt;, anchor_lang::error::Error&gt;::Ok(move _33)<br/>StorageDead(_33)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>_39 = const false<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_39 = const false<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">return</td></tr></table>>];
    bb21__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb22__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">drop(_10)</td></tr></table>>];
    bb23__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left">switchInt(_39)</td></tr></table>>];
    bb24__0_2593 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">24 (cleanup)</td></tr><tr><td align="left" balign="left">_44 = discriminant(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_2593 -> bb1__0_2593 [label="return"];
    bb1__0_2593 -> bb4__0_2593 [label="0"];
    bb1__0_2593 -> bb2__0_2593 [label="otherwise"];
    bb2__0_2593 -> bb3__0_2593 [label="return"];
    bb3__0_2593 -> bb20__0_2593 [label=""];
    bb4__0_2593 -> bb5__0_2593 [label="return"];
    bb5__0_2593 -> bb6__0_2593 [label="return"];
    bb5__0_2593 -> bb21__0_2593 [label="unwind"];
    bb6__0_2593 -> bb7__0_2593 [label="0"];
    bb6__0_2593 -> bb9__0_2593 [label="1"];
    bb6__0_2593 -> bb8__0_2593 [label="otherwise"];
    bb7__0_2593 -> bb11__0_2593 [label="return"];
    bb7__0_2593 -> bb23__0_2593 [label="unwind"];
    bb9__0_2593 -> bb10__0_2593 [label="return"];
    bb9__0_2593 -> bb24__0_2593 [label="unwind"];
    bb10__0_2593 -> bb19__0_2593 [label=""];
    bb11__0_2593 -> bb12__0_2593 [label="return"];
    bb11__0_2593 -> bb23__0_2593 [label="unwind"];
    bb12__0_2593 -> bb13__0_2593 [label="return"];
    bb12__0_2593 -> bb23__0_2593 [label="unwind"];
    bb13__0_2593 -> bb14__0_2593 [label="return"];
    bb13__0_2593 -> bb23__0_2593 [label="unwind"];
    bb14__0_2593 -> bb17__0_2593 [label="0"];
    bb14__0_2593 -> bb15__0_2593 [label="otherwise"];
    bb15__0_2593 -> bb16__0_2593 [label="return"];
    bb15__0_2593 -> bb23__0_2593 [label="unwind"];
    bb16__0_2593 -> bb19__0_2593 [label="return"];
    bb16__0_2593 -> bb21__0_2593 [label="unwind"];
    bb17__0_2593 -> bb18__0_2593 [label="return"];
    bb17__0_2593 -> bb23__0_2593 [label="unwind"];
    bb18__0_2593 -> bb20__0_2593 [label=""];
    bb19__0_2593 -> bb20__0_2593 [label=""];
    bb22__0_2593 -> bb21__0_2593 [label="return"];
    bb23__0_2593 -> bb21__0_2593 [label="0"];
    bb23__0_2593 -> bb22__0_2593 [label="otherwise"];
    bb24__0_2593 -> bb21__0_2593 [label=""];
}
