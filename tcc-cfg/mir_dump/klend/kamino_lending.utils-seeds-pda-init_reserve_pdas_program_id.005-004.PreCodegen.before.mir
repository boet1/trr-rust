// MIR for `init_reserve_pdas_program_id` before PreCodegen

fn init_reserve_pdas_program_id(_1: &anchor_lang::prelude::Pubkey, _2: &anchor_lang::prelude::Pubkey, _3: &anchor_lang::prelude::Pubkey) -> InitReservePdas {
    debug program_id => _1;
    debug market => _2;
    debug mint => _3;
    let mut _0: utils::seeds::pda::InitReservePdas;
    let _4: anchor_lang::prelude::Pubkey;
    let _5: u8;
    let mut _6: (anchor_lang::prelude::Pubkey, u8);
    let mut _7: &[&[u8]];
    let mut _8: &[&[u8]; 3];
    let _9: &[&[u8]; 3];
    let _10: [&[u8]; 3];
    let mut _11: &[u8];
    let _12: &[u8];
    let mut _13: &[u8];
    let _14: &[u8];
    let mut _15: &anchor_lang::prelude::Pubkey;
    let mut _16: &[u8];
    let _17: &[u8];
    let mut _18: &anchor_lang::prelude::Pubkey;
    let mut _19: &anchor_lang::prelude::Pubkey;
    let mut _22: (anchor_lang::prelude::Pubkey, u8);
    let mut _23: &[&[u8]];
    let mut _24: &[&[u8]; 3];
    let _25: &[&[u8]; 3];
    let _26: [&[u8]; 3];
    let mut _27: &[u8];
    let _28: &[u8];
    let mut _29: &[u8];
    let _30: &[u8];
    let mut _31: &anchor_lang::prelude::Pubkey;
    let mut _32: &[u8];
    let _33: &[u8];
    let mut _34: &anchor_lang::prelude::Pubkey;
    let mut _35: &anchor_lang::prelude::Pubkey;
    let mut _38: (anchor_lang::prelude::Pubkey, u8);
    let mut _39: &[&[u8]];
    let mut _40: &[&[u8]; 3];
    let _41: &[&[u8]; 3];
    let _42: [&[u8]; 3];
    let mut _43: &[u8];
    let _44: &[u8];
    let mut _45: &[u8];
    let _46: &[u8];
    let mut _47: &anchor_lang::prelude::Pubkey;
    let mut _48: &[u8];
    let _49: &[u8];
    let mut _50: &anchor_lang::prelude::Pubkey;
    let mut _51: &anchor_lang::prelude::Pubkey;
    let mut _54: (anchor_lang::prelude::Pubkey, u8);
    let mut _55: &[&[u8]];
    let mut _56: &[&[u8]; 3];
    let _57: &[&[u8]; 3];
    let _58: [&[u8]; 3];
    let mut _59: &[u8];
    let _60: &[u8];
    let mut _61: &[u8];
    let _62: &[u8];
    let mut _63: &anchor_lang::prelude::Pubkey;
    let mut _64: &[u8];
    let _65: &[u8];
    let mut _66: &anchor_lang::prelude::Pubkey;
    let mut _67: &anchor_lang::prelude::Pubkey;
    let mut _68: anchor_lang::prelude::Pubkey;
    let mut _69: anchor_lang::prelude::Pubkey;
    let mut _70: anchor_lang::prelude::Pubkey;
    let mut _71: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug fee_vault => _4;
        debug _fee_vault_bump => _5;
        let _20: anchor_lang::prelude::Pubkey;
        let _21: u8;
        scope 2 {
            debug liquidity_supply_vault => _20;
            debug _liquidity_supply_vault_bump => _21;
            let _36: anchor_lang::prelude::Pubkey;
            let _37: u8;
            scope 3 {
                debug collateral_ctoken_mint => _36;
                debug _collateral_ctoken_mint_bump => _37;
                let _52: anchor_lang::prelude::Pubkey;
                let _53: u8;
                scope 4 {
                    debug collateral_supply_vault => _52;
                    debug _collateral_supply_vault_bump => _53;
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = const _;
        _11 = &(*_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_2);
        _14 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = &(*_14);
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_3);
        _17 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = &(*_17);
        StorageDead(_18);
        _10 = [move _11, move _13, move _16];
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        _9 = &_10;
        _8 = &(*_9);
        _7 = move _8 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_8);
        StorageLive(_19);
        _19 = &(*_1);
        _6 = anchor_lang::prelude::Pubkey::find_program_address(move _7, move _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_19);
        StorageDead(_7);
        StorageLive(_4);
        _4 = (_6.0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        _5 = (_6.1: u8);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const _;
        _27 = &(*_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_2);
        _30 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _31) -> [return: bb4, unwind continue];
    }

    bb4: {
        _29 = &(*_30);
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_3);
        _33 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _34) -> [return: bb5, unwind continue];
    }

    bb5: {
        _32 = &(*_33);
        StorageDead(_34);
        _26 = [move _27, move _29, move _32];
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_35);
        _35 = &(*_1);
        _22 = anchor_lang::prelude::Pubkey::find_program_address(move _23, move _35) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_35);
        StorageDead(_23);
        StorageLive(_20);
        _20 = (_22.0: anchor_lang::prelude::Pubkey);
        StorageLive(_21);
        _21 = (_22.1: u8);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const _;
        _43 = &(*_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_2);
        _46 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _47) -> [return: bb7, unwind continue];
    }

    bb7: {
        _45 = &(*_46);
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_3);
        _49 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _50) -> [return: bb8, unwind continue];
    }

    bb8: {
        _48 = &(*_49);
        StorageDead(_50);
        _42 = [move _43, move _45, move _48];
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_51);
        _51 = &(*_1);
        _38 = anchor_lang::prelude::Pubkey::find_program_address(move _39, move _51) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_51);
        StorageDead(_39);
        StorageLive(_36);
        _36 = (_38.0: anchor_lang::prelude::Pubkey);
        StorageLive(_37);
        _37 = (_38.1: u8);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = const _;
        _59 = &(*_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_2);
        _62 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _63) -> [return: bb10, unwind continue];
    }

    bb10: {
        _61 = &(*_62);
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_3);
        _65 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _66) -> [return: bb11, unwind continue];
    }

    bb11: {
        _64 = &(*_65);
        StorageDead(_66);
        _58 = [move _59, move _61, move _64];
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = move _56 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_67);
        _67 = &(*_1);
        _54 = anchor_lang::prelude::Pubkey::find_program_address(move _55, move _67) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_67);
        StorageDead(_55);
        StorageLive(_52);
        _52 = (_54.0: anchor_lang::prelude::Pubkey);
        StorageLive(_53);
        _53 = (_54.1: u8);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_54);
        StorageLive(_68);
        _68 = _20;
        StorageLive(_69);
        _69 = _36;
        StorageLive(_70);
        _70 = _52;
        StorageLive(_71);
        _71 = _4;
        _0 = InitReservePdas { liquidity_supply_vault: move _68, collateral_ctoken_mint: move _69, collateral_supply_vault: move _70, fee_vault: move _71 };
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
