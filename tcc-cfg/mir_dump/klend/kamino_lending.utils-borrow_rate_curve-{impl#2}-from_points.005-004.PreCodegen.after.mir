// MIR for `borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:91:1: 91:18>::from_points` after PreCodegen

fn borrow_rate_curve::<impl at programs\klend\src\utils\borrow_rate_curve.rs:91:1: 91:18>::from_points(_1: CurvePoint, _2: CurvePoint) -> std::result::Result<CurveSegment, anchor_lang::error::Error> {
    debug start => _1;
    debug end => _2;
    let mut _0: std::result::Result<utils::borrow_rate_curve::CurveSegment, anchor_lang::error::Error>;
    let _3: u32;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u32>;
    let mut _5: std::result::Result<u32, anchor_lang::error::Error>;
    let mut _6: std::option::Option<u32>;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: {closure@programs\klend\src\utils\borrow_rate_curve.rs:96:25: 96:27};
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: u32;
    let _15: ();
    let mut _16: bool;
    let mut _17: u32;
    let mut _18: u32;
    let mut _19: !;
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: anchor_lang::error::Error;
    let mut _24: anchor_lang::error::AnchorError;
    let mut _25: std::string::String;
    let mut _26: &LendingError;
    let _27: LendingError;
    let mut _28: u32;
    let mut _29: LendingError;
    let mut _30: std::string::String;
    let mut _31: &LendingError;
    let _32: LendingError;
    let mut _33: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _34: anchor_lang::error::ErrorOrigin;
    let mut _35: anchor_lang::error::Source;
    let mut _36: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _38: std::option::Option<u32>;
    let mut _39: u32;
    let mut _40: u32;
    let mut _41: utils::borrow_rate_curve::CurveSegment;
    let mut _42: u32;
    let mut _43: u32;
    let mut _44: utils::borrow_rate_curve::CurvePoint;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    scope 1 {
        debug slope_nom => _3;
        let _37: u32;
        let mut _45: &LendingError;
        let mut _46: &LendingError;
        scope 6 {
            debug slope_denom => _37;
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = (_2.1: u32);
        StorageLive(_8);
        _8 = (_1.1: u32);
        _6 = core::num::<impl u32>::checked_sub(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = {closure@programs\klend\src\utils\borrow_rate_curve.rs:96:25: 96:27};
        _5 = std::option::Option::<u32>::ok_or_else::<anchor_lang::error::Error, {closure@programs\klend\src\utils\borrow_rate_curve.rs:96:25: 96:27}>(move _6, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_6);
        _4 = <std::result::Result<u32, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_4 as Continue).0: u32);
        _3 = _14;
        StorageDead(_14);
        _47 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (_2.0: u32);
        StorageLive(_18);
        _18 = (_1.0: u32);
        _16 = Le(move _17, move _18);
        switchInt(move _16) -> [0: bb14, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<CurveSegment, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _49 = discriminant(_4);
        StorageDead(_4);
        goto -> bb17;
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = const "Utilization rate must be ever growing in the curve";
        _21 = &(*_22);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _46 = const _;
        _26 = &(*_46);
        _25 = LendingError::name(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = LendingError::InvalidBorrowRateCurvePoint;
        _28 = <LendingError as Into<u32>>::into(move _29) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        _45 = const _;
        _31 = &(*_45);
        _30 = <LendingError as ToString>::to_string(move _31) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\borrow_rate_curve.rs", line: const 102_u32 };
        _34 = anchor_lang::error::ErrorOrigin::Source(move _35);
        StorageDead(_35);
        _33 = std::option::Option::<ErrorOrigin>::Some(move _34);
        StorageDead(_34);
        StorageLive(_36);
        _36 = std::option::Option::<ComparedValues>::None;
        _24 = anchor_lang::error::AnchorError { error_name: move _25, error_code_number: move _28, error_msg: move _30, error_origin: move _33, compared_values: move _36 };
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_25);
        _23 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _24) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        StorageDead(_24);
        _0 = std::result::Result::<CurveSegment, anchor_lang::error::Error>::Err(move _23);
        StorageDead(_23);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb17;
    }

    bb14: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = const ();
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = (_2.0: u32);
        StorageLive(_40);
        _40 = (_1.0: u32);
        _38 = core::num::<impl u32>::checked_sub(move _39, move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_39);
        _37 = std::option::Option::<u32>::unwrap(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _3;
        StorageLive(_43);
        _43 = _37;
        StorageLive(_44);
        _44 = _1;
        _41 = CurveSegment { slope_nom: move _42, slope_denom: move _43, start_point: move _44 };
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        _0 = std::result::Result::<CurveSegment, anchor_lang::error::Error>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_37);
        StorageDead(_3);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_3);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_25) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        _51 = discriminant(_4);
        goto -> bb20;
    }
}
