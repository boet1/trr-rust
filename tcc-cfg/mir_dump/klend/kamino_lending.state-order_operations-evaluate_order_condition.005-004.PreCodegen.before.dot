digraph Mir_0_1790 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn evaluate_order_condition(_1: &amp;ReErased state::reserve::Reserve, _2: &amp;ReErased state::reserve::Reserve, _3: &amp;ReErased state::obligation::Obligation, _4: &amp;ReErased state::obligation::ObligationOrder) -&gt; std::option::Option&lt;state::order_operations::ConditionHit&gt;<br align="left"/>let mut _5: state::order_operations::ConditionType;<br align="left"/>let mut _6: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let mut _7: u8;<br align="left"/>let mut _8: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _9: &amp;ReErased state::obligation::Obligation;<br align="left"/>let mut _10: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _11: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let mut _12: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _13: &amp;ReErased state::obligation::Obligation;<br align="left"/>let mut _14: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _15: &amp;ReErased state::obligation::Obligation;<br align="left"/>let mut _16: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _17: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let _18: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _19: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _20: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _21: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _22: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _23: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>let mut _24: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _25: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _26: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _27: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _28: &amp;ReErased state::obligation::Obligation;<br align="left"/>let mut _29: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _30: &amp;ReErased state::obligation::Obligation;<br align="left"/>let mut _31: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _32: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _33: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _34: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _35: &amp;ReErased state::obligation::ObligationOrder;<br align="left"/>debug collateral_reserve =&gt; _1;<br align="left"/>debug debt_reserve =&gt; _2;<br align="left"/>debug obligation =&gt; _3;<br align="left"/>debug order =&gt; _4;<br align="left"/>debug price_ratio =&gt; _18;<br align="left"/>>;
    bb0__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_4)<br/></td></tr><tr><td align="left">_5 = obligation::ObligationOrder::condition_type(move _6)</td></tr></table>>];
    bb1__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_7 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb2__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(*_2)<br/>StorageLive(_33)<br/>_33 = &amp;(*_1)<br/></td></tr><tr><td align="left">_31 = calculate_price_ratio(move _32, move _33)</td></tr></table>>];
    bb3__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb4__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = std::option::Option::&lt;ConditionHit&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_3)<br/></td></tr><tr><td align="left">_8 = obligation::Obligation::loan_to_value(move _9)</td></tr></table>>];
    bb6__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;(*_4)<br/></td></tr><tr><td align="left">_10 = obligation::ObligationOrder::condition_threshold(move _11)</td></tr></table>>];
    bb7__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;(*_3)<br/></td></tr><tr><td align="left">_12 = obligation::Obligation::unhealthy_loan_to_value(move _13)</td></tr></table>>];
    bb8__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">_0 = evaluate_stop_loss(move _8, move _10, move _12)</td></tr></table>>];
    bb9__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;(*_3)<br/></td></tr><tr><td align="left">_14 = obligation::Obligation::loan_to_value(move _15)</td></tr></table>>];
    bb11__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;(*_4)<br/></td></tr><tr><td align="left">_16 = obligation::ObligationOrder::condition_threshold(move _17)</td></tr></table>>];
    bb12__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">_0 = evaluate_take_profit(move _14, move _16)</td></tr></table>>];
    bb13__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;(*_2)<br/>StorageLive(_20)<br/>_20 = &amp;(*_1)<br/></td></tr><tr><td align="left">_18 = calculate_price_ratio(move _19, move _20)</td></tr></table>>];
    bb15__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_21)<br/>_21 = _18<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;(*_4)<br/></td></tr><tr><td align="left">_22 = obligation::ObligationOrder::condition_threshold(move _23)</td></tr></table>>];
    bb16__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _18<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;(*_3)<br/></td></tr><tr><td align="left">_27 = obligation::Obligation::unhealthy_loan_to_value(move _28)</td></tr></table>>];
    bb17__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/></td></tr><tr><td align="left">_25 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as std::ops::Mul&gt;::mul(move _26, move _27)</td></tr></table>>];
    bb18__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = &amp;(*_3)<br/></td></tr><tr><td align="left">_29 = obligation::Obligation::loan_to_value(move _30)</td></tr></table>>];
    bb19__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/></td></tr><tr><td align="left">_24 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as std::ops::Div&gt;::div(move _25, move _29)</td></tr></table>>];
    bb20__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_0 = evaluate_stop_loss(move _21, move _22, move _24)</td></tr></table>>];
    bb21__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = &amp;(*_4)<br/></td></tr><tr><td align="left">_34 = obligation::ObligationOrder::condition_threshold(move _35)</td></tr></table>>];
    bb23__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">_0 = evaluate_take_profit(move _31, move _34)</td></tr></table>>];
    bb24__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1790 -> bb1__0_1790 [label="return"];
    bb1__0_1790 -> bb4__0_1790 [label="0"];
    bb1__0_1790 -> bb5__0_1790 [label="1"];
    bb1__0_1790 -> bb10__0_1790 [label="2"];
    bb1__0_1790 -> bb14__0_1790 [label="3"];
    bb1__0_1790 -> bb2__0_1790 [label="4"];
    bb1__0_1790 -> bb3__0_1790 [label="otherwise"];
    bb2__0_1790 -> bb22__0_1790 [label="return"];
    bb4__0_1790 -> bb25__0_1790 [label=""];
    bb5__0_1790 -> bb6__0_1790 [label="return"];
    bb6__0_1790 -> bb7__0_1790 [label="return"];
    bb7__0_1790 -> bb8__0_1790 [label="return"];
    bb8__0_1790 -> bb9__0_1790 [label="return"];
    bb9__0_1790 -> bb25__0_1790 [label=""];
    bb10__0_1790 -> bb11__0_1790 [label="return"];
    bb11__0_1790 -> bb12__0_1790 [label="return"];
    bb12__0_1790 -> bb13__0_1790 [label="return"];
    bb13__0_1790 -> bb25__0_1790 [label=""];
    bb14__0_1790 -> bb15__0_1790 [label="return"];
    bb15__0_1790 -> bb16__0_1790 [label="return"];
    bb16__0_1790 -> bb17__0_1790 [label="return"];
    bb17__0_1790 -> bb18__0_1790 [label="return"];
    bb18__0_1790 -> bb19__0_1790 [label="return"];
    bb19__0_1790 -> bb20__0_1790 [label="return"];
    bb20__0_1790 -> bb21__0_1790 [label="return"];
    bb21__0_1790 -> bb25__0_1790 [label=""];
    bb22__0_1790 -> bb23__0_1790 [label="return"];
    bb23__0_1790 -> bb24__0_1790 [label="return"];
    bb24__0_1790 -> bb25__0_1790 [label=""];
}
