digraph Mir_0_2647 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn prices::types::Price::&lt;T&gt;::to_adjusted_exp(_1: utils::prices::types::Price&lt;T/#0&gt;, _2: u32) -&gt; std::option::Option&lt;utils::prices::types::Price&lt;T/#0&gt;&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u32;<br align="left"/>let mut _6: u32;<br align="left"/>let mut _7: !;<br align="left"/>let mut _8: utils::prices::types::Price&lt;T/#0&gt;;<br align="left"/>let _9: utils::fraction::uint_types::U256;<br align="left"/>let mut _10: T/#0;<br align="left"/>let _11: u32;<br align="left"/>let _12: std::option::Option&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: u32;<br align="left"/>let mut _15: u32;<br align="left"/>let _16: u32;<br align="left"/>let mut _17: u32;<br align="left"/>let mut _18: u32;<br align="left"/>let mut _19: (u32, bool);<br align="left"/>let _20: utils::fraction::uint_types::U256;<br align="left"/>let mut _21: utils::fraction::uint_types::U128;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: utils::fraction::uint_types::U256;<br align="left"/>let mut _24: utils::fraction::uint_types::U256;<br align="left"/>let _25: u32;<br align="left"/>let mut _26: u32;<br align="left"/>let mut _27: u32;<br align="left"/>let mut _28: (u32, bool);<br align="left"/>let _29: utils::fraction::uint_types::U256;<br align="left"/>let mut _30: utils::fraction::uint_types::U128;<br align="left"/>let mut _31: u32;<br align="left"/>let mut _32: utils::fraction::uint_types::U256;<br align="left"/>let mut _33: utils::fraction::uint_types::U256;<br align="left"/>let mut _34: std::option::Option&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _35: Closure(DefId(0:2648 ~ kamino_lending[6389]::utils::prices::types::{impl#0}::to_adjusted_exp::{closure#0}), [T/#0, i32, Binder(extern &quot;RustCall&quot; fn((utils::fraction::uint_types::U256,)) -&gt; std::option::Option&lt;utils::prices::types::Price&lt;T/#0&gt;&gt;, []), (&amp;ReErased u32,)]);<br align="left"/>let mut _36: &amp;ReErased u32;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug target_exp =&gt; _2;<br align="left"/>debug value =&gt; _9;<br align="left"/>debug exp =&gt; _11;<br align="left"/>debug value_256 =&gt; _12;<br align="left"/>debug diff =&gt; _16;<br align="left"/>debug factor =&gt; _20;<br align="left"/>debug diff =&gt; _25;<br align="left"/>debug factor =&gt; _29;<br align="left"/>>;
    bb0__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/>StorageLive(_6)<br/>_6 = (_1.1: u32)<br/>_4 = Eq(move _5, move _6)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_8)<br/>_8 = _1<br/>_0 = std::option::Option::&lt;prices::types::Price&lt;T&gt;&gt;::Some(move _8)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = (_1.0: T)<br/></td></tr><tr><td align="left">_9 = &lt;T as Into&lt;uint_types::U256&gt;&gt;::into(move _10)</td></tr></table>>];
    bb3__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageLive(_11)<br/>_11 = (_1.1: u32)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _11<br/>StorageLive(_15)<br/>_15 = _2<br/>_13 = Gt(move _14, move _15)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb4__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _11<br/>StorageLive(_18)<br/>_18 = _2<br/>_19 = CheckedSub(_17, _18)<br/></td></tr><tr><td align="left">assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _17, move _18)</td></tr></table>>];
    bb5__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_16 = move (_19.0: u32)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _16<br/></td></tr><tr><td align="left">_21 = prices::utils::ten_pow(move _22)</td></tr></table>>];
    bb6__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;uint_types::U128 as Into&lt;uint_types::U256&gt;&gt;::into(move _21)</td></tr></table>>];
    bb7__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_23)<br/>_23 = _9<br/>StorageLive(_24)<br/>_24 = _20<br/></td></tr><tr><td align="left">_12 = uint_types::U256::checked_div(move _23, move _24)</td></tr></table>>];
    bb8__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_20)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _2<br/>StorageLive(_27)<br/>_27 = _11<br/>_28 = CheckedSub(_26, _27)<br/></td></tr><tr><td align="left">assert(!move (_28.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _26, move _27)</td></tr></table>>];
    bb10__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_25 = move (_28.0: u32)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _25<br/></td></tr><tr><td align="left">_30 = prices::utils::ten_pow(move _31)</td></tr></table>>];
    bb11__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;uint_types::U128 as Into&lt;uint_types::U256&gt;&gt;::into(move _30)</td></tr></table>>];
    bb12__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageLive(_32)<br/>_32 = _9<br/>StorageLive(_33)<br/>_33 = _29<br/></td></tr><tr><td align="left">_12 = uint_types::U256::checked_mul(move _32, move _33)</td></tr></table>>];
    bb13__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_34)<br/>_34 = _12<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;_2<br/>_35 = {closure@programs\klend\src\utils\prices\types.rs:52:28: 52:35} { target_exp: move _36 }<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">_0 = std::option::Option::&lt;uint_types::U256&gt;::and_then::&lt;prices::types::Price&lt;T&gt;, {closure@programs\klend\src\utils\prices\types.rs:52:28: 52:35}&gt;(move _34, move _35)</td></tr></table>>];
    bb15__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_2647 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2647 -> bb2__0_2647 [label="0"];
    bb0__0_2647 -> bb1__0_2647 [label="otherwise"];
    bb1__0_2647 -> bb16__0_2647 [label=""];
    bb2__0_2647 -> bb3__0_2647 [label="return"];
    bb3__0_2647 -> bb9__0_2647 [label="0"];
    bb3__0_2647 -> bb4__0_2647 [label="otherwise"];
    bb4__0_2647 -> bb5__0_2647 [label="success"];
    bb5__0_2647 -> bb6__0_2647 [label="return"];
    bb6__0_2647 -> bb7__0_2647 [label="return"];
    bb7__0_2647 -> bb8__0_2647 [label="return"];
    bb8__0_2647 -> bb14__0_2647 [label=""];
    bb9__0_2647 -> bb10__0_2647 [label="success"];
    bb10__0_2647 -> bb11__0_2647 [label="return"];
    bb11__0_2647 -> bb12__0_2647 [label="return"];
    bb12__0_2647 -> bb13__0_2647 [label="return"];
    bb13__0_2647 -> bb14__0_2647 [label=""];
    bb14__0_2647 -> bb15__0_2647 [label="return"];
    bb15__0_2647 -> bb16__0_2647 [label=""];
}
