// MIR for `handlers::handler_init_reserve::<impl at programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18>::try_accounts::{closure#9}` before PreCodegen

fn handlers::handler_init_reserve::<impl at programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18>::try_accounts::{closure#9}(_1: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}, _2: &anchor_lang::prelude::Pubkey) -> bool {
    debug fa => _2;
    let mut _0: bool;
    let mut _3: std::option::Option<bool>;
    let mut _4: std::option::Option<&&anchor_lang::prelude::Pubkey>;
    let mut _5: &std::option::Option<&anchor_lang::prelude::Pubkey>;
    let _6: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _7: {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18};
    let mut _8: &&anchor_lang::prelude::Pubkey;
    let mut _9: &std::option::Option<&anchor_lang::prelude::Pubkey>;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _9 = const _;
        _5 = &(*_9);
        _4 = std::option::Option::<&anchor_lang::prelude::Pubkey>::as_ref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_2;
        _7 = {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18} { fa: move _8 };
        StorageDead(_8);
        _3 = std::option::Option::<&&anchor_lang::prelude::Pubkey>::map::<bool, {closure@programs\klend\src\handlers\handler_init_reserve.rs:66:10: 66:18}>(move _4, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_4);
        _0 = std::option::Option::<bool>::unwrap_or(move _3, const true) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_3);
        return;
    }
}
