// MIR for `handlers::handler_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:117:10: 117:18>::to_account_metas` after PreCodegen

fn handlers::handler_refresh_obligation_farms_for_reserve::<impl at programs\klend\src\handlers\handler_refresh_obligation_farms_for_reserve.rs:117:10: 117:18>::to_account_metas(_1: &handlers::handler_refresh_obligation_farms_for_reserve::OptionalObligationFarmsAccounts<'_>, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>;
    let mut _6: isize;
    let _8: ();
    let mut _9: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _10: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _11: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
    let mut _12: std::option::Option<bool>;
    let _13: ();
    let mut _14: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _15: anchor_lang::prelude::AccountMeta;
    let mut _16: anchor_lang::prelude::Pubkey;
    let mut _17: &anchor_lang::prelude::Pubkey;
    let _18: ();
    let mut _19: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _20: isize;
    let _22: ();
    let mut _23: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _24: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _26: std::option::Option<bool>;
    let _27: ();
    let mut _28: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _29: anchor_lang::prelude::AccountMeta;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
        scope 2 {
            debug obligation_farm_user_state => _7;
            let _7: &anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>;
        }
        scope 3 {
            debug reserve_farm_state => _21;
            let _21: &anchor_lang::prelude::AccountInfo<'_>;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>>);
        _6 = discriminant((*_5));
        switchInt(move _6) -> [1: bb2, otherwise: bb5];
    }

    bb2: {
        StorageLive(_7);
        _7 = &(((*_5) as Some).0: anchor_lang::prelude::AccountLoader<'_, farms::state::UserState>);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _3;
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_7);
        StorageLive(_12);
        _12 = std::option::Option::<bool>::None;
        _10 = <anchor_lang::prelude::AccountLoader<'_, UserState> as anchor_lang::ToAccountMetas>::to_account_metas(move _11, move _12) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        _8 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _9, move _10) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _4 = const ();
        StorageDead(_7);
        goto -> bb8;
    }

    bb5: {
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _3;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _16 = (*_17);
        _15 = anchor_lang::prelude::AccountMeta::new_readonly(move _16, const false) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        StorageDead(_16);
        _13 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _14, move _15) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_17);
        StorageDead(_13);
        _4 = const ();
        goto -> bb8;
    }

    bb8: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).1: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        _20 = discriminant((*_19));
        switchInt(move _20) -> [1: bb9, otherwise: bb12];
    }

    bb9: {
        StorageLive(_21);
        _21 = &(((*_19) as Some).0: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &mut _3;
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_21);
        StorageLive(_26);
        _26 = std::option::Option::<bool>::None;
        _24 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountMetas>::to_account_metas(move _25, move _26) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_25);
        _22 = <Vec<anchor_lang::prelude::AccountMeta> as Extend<anchor_lang::prelude::AccountMeta>>::extend::<Vec<anchor_lang::prelude::AccountMeta>>(move _23, move _24) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        _18 = const ();
        StorageDead(_21);
        goto -> bb15;
    }

    bb12: {
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut _3;
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _30 = (*_31);
        _29 = anchor_lang::prelude::AccountMeta::new_readonly(move _30, const false) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        StorageDead(_30);
        _27 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _28, move _29) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_31);
        StorageDead(_27);
        _18 = const ();
        goto -> bb15;
    }

    bb15: {
        StorageDead(_19);
        StorageDead(_18);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb16 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
