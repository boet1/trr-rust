// MIR for `handlers::handler_flash_borrow_reserve_liquidity::process` before PreCodegen

fn handlers::handler_flash_borrow_reserve_liquidity::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>>, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>>;
    let _7: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _14: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _22: std::cell::RefMut<'_, state::reserve::Reserve>;
    let _24: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _26: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _27: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _34: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let _36: [&[u8]; 3];
    let mut _37: &[u8];
    let mut _38: &[u8];
    let _39: &[u8];
    let mut _40: &[u8];
    let _41: &[u8];
    let mut _42: &anchor_lang::prelude::Pubkey;
    let mut _43: &[u8];
    let mut _44: &[u8; 1];
    let _45: &[u8; 1];
    let _46: [u8; 1];
    let mut _47: u8;
    let mut _48: u64;
    let mut _49: &state::lending_market::LendingMarket;
    let mut _50: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _53: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::AccountInfo<'_>;
    let _55: &anchor_lang::prelude::AccountInfo<'_>;
    let _56: anchor_lang::prelude::AccountInfo<'_>;
    let mut _57: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _64: &state::reserve::Reserve;
    let mut _65: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _66: ();
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _68: std::result::Result<(), anchor_lang::error::Error>;
    let mut _69: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>>;
    let _70: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>>;
    let mut _71: u64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _77: ();
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _79: std::result::Result<(), anchor_lang::error::Error>;
    let mut _80: &mut state::reserve::Reserve;
    let mut _81: &mut state::reserve::Reserve;
    let mut _82: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _83: &anchor_lang::prelude::Clock;
    let _84: &anchor_lang::prelude::Clock;
    let _85: anchor_lang::prelude::Clock;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _87: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _93: std::option::Option<utils::prices::GetPriceResult>;
    let mut _94: u16;
    let mut _95: &state::lending_market::LendingMarket;
    let mut _96: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _102: ();
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _104: std::result::Result<(), anchor_lang::error::Error>;
    let mut _105: &mut state::reserve::Reserve;
    let mut _106: &mut state::reserve::Reserve;
    let mut _107: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _108: u64;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _114: ();
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _116: std::result::Result<(), anchor_lang::error::Error>;
    let mut _117: anchor_lang::prelude::AccountInfo<'_>;
    let mut _118: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _119: anchor_lang::prelude::AccountInfo<'_>;
    let mut _120: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _121: anchor_lang::prelude::AccountInfo<'_>;
    let mut _122: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _123: anchor_lang::prelude::AccountInfo<'_>;
    let mut _124: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _125: anchor_lang::prelude::AccountInfo<'_>;
    let mut _126: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _127: &[&[u8]];
    let mut _128: &[&[u8]; 3];
    let mut _129: u64;
    let mut _130: u8;
    let mut _131: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _132: &anchor_spl::token_interface::Mint;
    let _133: &anchor_spl::token_interface::Mint;
    let mut _134: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _140: ();
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _142: std::result::Result<(), anchor_lang::error::Error>;
    let mut _143: u64;
    let mut _144: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::AccountInfo<'_>;
    let _146: &anchor_lang::prelude::AccountInfo<'_>;
    let _147: anchor_lang::prelude::AccountInfo<'_>;
    let mut _148: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _149: u64;
    let mut _150: &state::reserve::Reserve;
    let mut _151: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _152: u64;
    let mut _153: u64;
    let mut _154: state::types::LendingAction;
    let mut _155: u64;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _161: ();
    let mut _162: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _163: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _164: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _165: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _166: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _167: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _168: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _169: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _170: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _171: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _172: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _173: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _174: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _175: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _176: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _177: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>;
    let mut _178: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _237: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _238: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _239: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _240: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _241: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug reserve => _13;
        let _23: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
        let _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _32: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        scope 10 {
            debug lending_market => _23;
            let _33: anchor_lang::prelude::Pubkey;
            scope 15 {
                debug lending_market_key => _33;
                let _35: &[&[u8]; 3];
                scope 16 {
                    debug authority_signer_seeds => _35;
                    let _51: u64;
                    let _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _62: u64;
                    scope 17 {
                        debug initial_reserve_token_balance => _51;
                        let _63: u64;
                        scope 22 {
                            debug initial_reserve_available_liquidity => _63;
                            let _73: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _76: ();
                            let _89: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _92: anchor_lang::prelude::Clock;
                            let _98: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _101: ();
                            let _110: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _113: ();
                            let _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _139: ();
                            let _157: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _160: ();
                            scope 23 {
                                debug residual => _73;
                                scope 24 {
                                }
                            }
                            scope 25 {
                                debug val => _76;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug residual => _89;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => _92;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug residual => _98;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _101;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug residual => _110;
                                scope 36 {
                                }
                            }
                            scope 37 {
                                debug val => _113;
                                scope 38 {
                                }
                            }
                            scope 39 {
                                debug residual => _136;
                                scope 40 {
                                }
                            }
                            scope 41 {
                                debug val => _139;
                                scope 42 {
                                }
                            }
                            scope 43 {
                                debug residual => _157;
                                scope 44 {
                                }
                            }
                            scope 45 {
                                debug val => _160;
                                scope 46 {
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _59;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _62;
                        scope 21 {
                        }
                    }
                }
            }
        }
        scope 11 {
            debug residual => _29;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _32;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        _185 = const false;
        _184 = const false;
        _183 = const false;
        _182 = const false;
        _181 = const false;
        _180 = const false;
        _179 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_1;
        _6 = &(*_7);
        _5 = flash_borrow_reserve_liquidity_checks(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb86];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _186 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _162 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _17 = &((*_162).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _16 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb107];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _224 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb81;
    }

    bb7: {
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb86];
    }

    bb8: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _14 = move _22;
        StorageDead(_22);
        _13 = &mut _14;
        _188 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _163 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _27 = &((*_163).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _26 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _27) -> [return: bb12, unwind: bb85];
    }

    bb10: {
        StorageLive(_19);
        _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _21) -> [return: bb11, unwind: bb106];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        _222 = discriminant(_15);
        StorageDead(_15);
        goto -> bb80;
    }

    bb12: {
        StorageDead(_27);
        _25 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _26) -> [return: bb13, unwind: bb85];
    }

    bb13: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_32);
        _32 = move ((_25 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _24 = move _32;
        StorageDead(_32);
        _23 = &_24;
        _190 = discriminant(_25);
        StorageDead(_25);
        StorageLive(_33);
        StorageLive(_34);
        _164 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _34 = &((*_164).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _33 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _34) -> [return: bb17, unwind: bb84];
    }

    bb15: {
        StorageLive(_29);
        _29 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _31) -> [return: bb16, unwind: bb105];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        _220 = discriminant(_25);
        StorageDead(_25);
        goto -> bb79;
    }

    bb17: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = const _;
        _38 = &(*_39);
        _37 = _38;
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_33;
        _41 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _42) -> [return: bb18, unwind: bb84];
    }

    bb18: {
        _40 = &(*_41);
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_23);
        _49 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _50) -> [return: bb19, unwind: bb84];
    }

    bb19: {
        StorageDead(_50);
        _48 = ((*_49).1: u64);
        _47 = move _48 as u8 (IntToInt);
        StorageDead(_48);
        _46 = [move _47];
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_44);
        _36 = [move _37, move _40, move _43];
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        _35 = &_36;
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _165 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _166 = deref_copy ((*_165).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _236 = (((_166.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _57 = &(*_236);
        _56 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _57) -> [return: bb20, unwind: bb84];
    }

    bb20: {
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = amount(move _54) -> [return: bb21, unwind: bb83];
    }

    bb21: {
        StorageDead(_54);
        _52 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb83];
    }

    bb22: {
        StorageDead(_53);
        _58 = discriminant(_52);
        switchInt(move _58) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_62);
        _62 = ((_52 as Continue).0: u64);
        _51 = _62;
        StorageDead(_62);
        _192 = discriminant(_52);
        drop(_56) -> [return: bb26, unwind: bb84];
    }

    bb24: {
        StorageLive(_59);
        _59 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _61) -> [return: bb25, unwind: bb104];
    }

    bb25: {
        StorageDead(_61);
        StorageDead(_59);
        _218 = discriminant(_52);
        drop(_56) -> [return: bb77, unwind: bb84];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_13);
        _64 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _65) -> [return: bb27, unwind: bb84];
    }

    bb27: {
        StorageDead(_65);
        _63 = (((*_64).5: state::reserve::ReserveLiquidity).3: u64);
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_1;
        _69 = &(*_70);
        StorageLive(_71);
        _71 = _2;
        _68 = flash_borrow_checks(move _69, move _71) -> [return: bb28, unwind: bb84];
    }

    bb28: {
        StorageDead(_71);
        StorageDead(_69);
        _67 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb29, unwind: bb84];
    }

    bb29: {
        StorageDead(_68);
        _72 = discriminant(_67);
        switchInt(move _72) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_76);
        _76 = ((_67 as Continue).0: ());
        _66 = _76;
        StorageDead(_76);
        _194 = discriminant(_67);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut (*_13);
        _81 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _82) -> [return: bb33, unwind: bb84];
    }

    bb31: {
        StorageLive(_73);
        _73 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_75);
        _75 = move _73;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _75) -> [return: bb32, unwind: bb103];
    }

    bb32: {
        StorageDead(_75);
        StorageDead(_73);
        _216 = discriminant(_67);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb76;
    }

    bb33: {
        _80 = &mut (*_81);
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb34, unwind: bb84];
    }

    bb34: {
        _86 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _87) -> [return: bb35, unwind: bb84];
    }

    bb35: {
        _179 = const true;
        _180 = const true;
        StorageDead(_87);
        _88 = discriminant(_86);
        switchInt(move _88) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_86 as Continue).0: anchor_lang::prelude::Clock);
        _85 = move _92;
        StorageDead(_92);
        _84 = &_85;
        _83 = &(*_84);
        StorageLive(_93);
        _93 = std::option::Option::<prices::GetPriceResult>::None;
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_23);
        _95 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _96) -> [return: bb39, unwind: bb102];
    }

    bb37: {
        StorageLive(_89);
        _89 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_91);
        _91 = move _89;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _91) -> [return: bb38, unwind: bb102];
    }

    bb38: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb87;
    }

    bb39: {
        StorageDead(_96);
        _94 = ((*_95).5: u16);
        _79 = lending_operations::refresh_reserve(move _80, move _83, move _93, move _94) -> [return: bb40, unwind: bb102];
    }

    bb40: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_83);
        StorageDead(_80);
        _78 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _79) -> [return: bb41, unwind: bb102];
    }

    bb41: {
        StorageDead(_79);
        _97 = discriminant(_78);
        switchInt(move _97) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_101);
        _101 = ((_78 as Continue).0: ());
        _77 = _101;
        StorageDead(_101);
        _196 = discriminant(_78);
        StorageDead(_95);
        _198 = discriminant(_86);
        _179 = const false;
        _180 = const false;
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &mut (*_13);
        _106 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _107) -> [return: bb45, unwind: bb84];
    }

    bb43: {
        StorageLive(_98);
        _98 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _100) -> [return: bb44, unwind: bb101];
    }

    bb44: {
        StorageDead(_100);
        StorageDead(_98);
        _212 = discriminant(_78);
        StorageDead(_95);
        goto -> bb87;
    }

    bb45: {
        _105 = &mut (*_106);
        StorageDead(_107);
        StorageLive(_108);
        _108 = _2;
        _104 = lending_operations::flash_borrow_reserve_liquidity(move _105, move _108) -> [return: bb46, unwind: bb84];
    }

    bb46: {
        StorageDead(_108);
        StorageDead(_105);
        _103 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _104) -> [return: bb47, unwind: bb84];
    }

    bb47: {
        StorageDead(_104);
        _109 = discriminant(_103);
        switchInt(move _109) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_113);
        _113 = ((_103 as Continue).0: ());
        _102 = _113;
        StorageDead(_113);
        _200 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _167 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _118 = &((*_167).11: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _117 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _118) -> [return: bb51, unwind: bb84];
    }

    bb49: {
        StorageLive(_110);
        _110 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_112);
        _112 = move _110;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _112) -> [return: bb50, unwind: bb100];
    }

    bb50: {
        StorageDead(_112);
        StorageDead(_110);
        _210 = discriminant(_103);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb76;
    }

    bb51: {
        _185 = const true;
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        _168 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _169 = deref_copy ((*_168).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _237 = (((_169.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _120 = &(*_237);
        _119 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _120) -> [return: bb52, unwind: bb99];
    }

    bb52: {
        _184 = const true;
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        _170 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _171 = deref_copy ((*_170).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _238 = (((_171.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _122 = &(*_238);
        _121 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _122) -> [return: bb53, unwind: bb97];
    }

    bb53: {
        _183 = const true;
        StorageDead(_122);
        StorageLive(_123);
        StorageLive(_124);
        _172 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _173 = deref_copy ((*_172).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _239 = (((_173.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _124 = &(*_239);
        _123 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _124) -> [return: bb54, unwind: bb95];
    }

    bb54: {
        _182 = const true;
        StorageDead(_124);
        StorageLive(_125);
        StorageLive(_126);
        _174 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _126 = &((*_174).1: anchor_lang::prelude::AccountInfo<'_>);
        _125 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _126) -> [return: bb55, unwind: bb93];
    }

    bb55: {
        _181 = const true;
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &(*_35);
        _127 = move _128 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_128);
        StorageLive(_129);
        _129 = _2;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _175 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _176 = deref_copy ((*_175).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _240 = (((_176.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _134 = &(*_240);
        _133 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _134) -> [return: bb56, unwind: bb91];
    }

    bb56: {
        _132 = &(*_133);
        _131 = <anchor_spl::token_interface::Mint as Deref>::deref(move _132) -> [return: bb57, unwind: bb91];
    }

    bb57: {
        StorageDead(_134);
        StorageDead(_132);
        _130 = ((*_131).2: u8);
        _185 = const false;
        _184 = const false;
        _183 = const false;
        _182 = const false;
        _181 = const false;
        _116 = borrow_obligation_liquidity_transfer(move _117, move _119, move _121, move _123, move _125, move _127, move _129, move _130) -> [return: bb58, unwind: bb91];
    }

    bb58: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        _181 = const false;
        StorageDead(_125);
        _182 = const false;
        StorageDead(_123);
        _183 = const false;
        StorageDead(_121);
        _184 = const false;
        StorageDead(_119);
        _185 = const false;
        StorageDead(_117);
        _115 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _116) -> [return: bb59, unwind: bb84];
    }

    bb59: {
        StorageDead(_116);
        _135 = discriminant(_115);
        switchInt(move _135) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_139);
        _139 = ((_115 as Continue).0: ());
        _114 = _139;
        StorageDead(_139);
        _202 = discriminant(_115);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _177 = deref_copy (_1.1: &mut handlers::handler_flash_borrow_reserve_liquidity::FlashBorrowReserveLiquidity<'_>);
        _178 = deref_copy ((*_177).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _241 = (((_178.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _148 = &(*_241);
        _147 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _148) -> [return: bb63, unwind: bb84];
    }

    bb61: {
        StorageLive(_136);
        _136 = move ((_115 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_138);
        _138 = move _136;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _138) -> [return: bb62, unwind: bb89];
    }

    bb62: {
        StorageDead(_138);
        StorageDead(_136);
        _208 = discriminant(_115);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb76;
    }

    bb63: {
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = amount(move _145) -> [return: bb64, unwind: bb82];
    }

    bb64: {
        StorageDead(_145);
        _143 = std::result::Result::<u64, anchor_lang::error::Error>::unwrap(move _144) -> [return: bb65, unwind: bb82];
    }

    bb65: {
        StorageDead(_144);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &(*_13);
        _150 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _151) -> [return: bb66, unwind: bb82];
    }

    bb66: {
        StorageDead(_151);
        _149 = (((*_150).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_152);
        _152 = _51;
        StorageLive(_153);
        _153 = _63;
        StorageLive(_154);
        StorageLive(_155);
        _155 = _2;
        _154 = state::types::LendingAction::Subtractive(move _155);
        StorageDead(_155);
        _142 = post_transfer_vault_balance_liquidity_reserve_checks(move _143, move _149, move _152, move _153, move _154) -> [return: bb67, unwind: bb82];
    }

    bb67: {
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_143);
        _141 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _142) -> [return: bb68, unwind: bb82];
    }

    bb68: {
        StorageDead(_142);
        _156 = discriminant(_141);
        switchInt(move _156) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_160);
        _160 = ((_141 as Continue).0: ());
        _140 = _160;
        StorageDead(_160);
        _204 = discriminant(_141);
        StorageDead(_150);
        drop(_147) -> [return: bb72, unwind: bb84];
    }

    bb70: {
        StorageLive(_157);
        _157 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_159);
        _159 = move _157;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _159) -> [return: bb71, unwind: bb88];
    }

    bb71: {
        StorageDead(_159);
        StorageDead(_157);
        _206 = discriminant(_141);
        StorageDead(_150);
        drop(_147) -> [return: bb75, unwind: bb84];
    }

    bb72: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_161);
        _161 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _161);
        StorageDead(_161);
        StorageDead(_63);
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        drop(_24) -> [return: bb73, unwind: bb85];
    }

    bb73: {
        StorageDead(_24);
        StorageDead(_23);
        drop(_14) -> [return: bb74, unwind: bb86];
    }

    bb74: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb81;
    }

    bb75: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_63);
        goto -> bb78;
    }

    bb77: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        drop(_24) -> [return: bb79, unwind: bb85];
    }

    bb79: {
        StorageDead(_24);
        StorageDead(_23);
        drop(_14) -> [return: bb80, unwind: bb86];
    }

    bb80: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb81;
    }

    bb81: {
        return;
    }

    bb82 (cleanup): {
        drop(_147) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_56) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_24) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_14) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        resume;
    }

    bb87: {
        _214 = discriminant(_86);
        _179 = const false;
        _180 = const false;
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb76;
    }

    bb88 (cleanup): {
        _226 = discriminant(_141);
        goto -> bb82;
    }

    bb89 (cleanup): {
        _227 = discriminant(_115);
        goto -> bb84;
    }

    bb90 (cleanup): {
        drop(_125) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_181) -> [0: bb93, otherwise: bb90];
    }

    bb92 (cleanup): {
        drop(_123) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_182) -> [0: bb95, otherwise: bb92];
    }

    bb94 (cleanup): {
        drop(_121) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_183) -> [0: bb97, otherwise: bb94];
    }

    bb96 (cleanup): {
        drop(_119) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_184) -> [0: bb99, otherwise: bb96];
    }

    bb98 (cleanup): {
        drop(_117) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_185) -> [0: bb84, otherwise: bb98];
    }

    bb100 (cleanup): {
        _228 = discriminant(_103);
        goto -> bb84;
    }

    bb101 (cleanup): {
        _229 = discriminant(_78);
        goto -> bb102;
    }

    bb102 (cleanup): {
        _230 = discriminant(_86);
        goto -> bb84;
    }

    bb103 (cleanup): {
        _231 = discriminant(_67);
        goto -> bb84;
    }

    bb104 (cleanup): {
        _232 = discriminant(_52);
        goto -> bb83;
    }

    bb105 (cleanup): {
        _233 = discriminant(_25);
        goto -> bb85;
    }

    bb106 (cleanup): {
        _234 = discriminant(_15);
        goto -> bb86;
    }

    bb107 (cleanup): {
        _235 = discriminant(_4);
        goto -> bb86;
    }
}
