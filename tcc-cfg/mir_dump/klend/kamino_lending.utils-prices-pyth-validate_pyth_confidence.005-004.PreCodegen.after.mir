// MIR for `validate_pyth_confidence` after PreCodegen

fn validate_pyth_confidence(_1: &pyth_solana_receiver_sdk::price_update::Price, _2: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug pyth_price => _1;
    debug oracle_confidence_factor => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: u64;
    let mut _4: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _5: i64;
    let _6: ();
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: !;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::AnchorError;
    let mut _12: std::string::String;
    let mut _13: &LendingError;
    let _14: LendingError;
    let mut _15: u32;
    let mut _16: LendingError;
    let mut _17: std::string::String;
    let mut _18: &LendingError;
    let _19: LendingError;
    let mut _20: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _21: anchor_lang::error::ErrorOrigin;
    let mut _22: anchor_lang::error::Source;
    let mut _23: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _26: std::option::Option<u64>;
    let mut _27: u64;
    let mut _28: u64;
    let _29: ();
    let mut _30: bool;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: !;
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: &std::string::String;
    let _39: std::string::String;
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[&str; 3];
    let _44: &[&str; 3];
    let _45: [&str; 3];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let mut _47: &[core::fmt::rt::Argument<'_>; 3];
    let _48: &[core::fmt::rt::Argument<'_>; 3];
    let _49: [core::fmt::rt::Argument<'_>; 3];
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &u64;
    let _52: &u64;
    let mut _53: core::fmt::rt::Argument<'_>;
    let mut _54: &u64;
    let _55: &u64;
    let mut _56: core::fmt::rt::Argument<'_>;
    let mut _57: &u64;
    let _58: &u64;
    let mut _59: anchor_lang::error::Error;
    let mut _60: anchor_lang::error::AnchorError;
    let mut _61: std::string::String;
    let mut _62: &LendingError;
    let _63: LendingError;
    let mut _64: u32;
    let mut _65: LendingError;
    let mut _66: std::string::String;
    let mut _67: &LendingError;
    let _68: LendingError;
    let mut _69: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _70: anchor_lang::error::ErrorOrigin;
    let mut _71: anchor_lang::error::Source;
    let mut _72: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _73: ();
    scope 1 {
        debug price => _3;
        let _24: u64;
        let mut _74: &LendingError;
        let mut _75: &LendingError;
        scope 2 {
            debug conf => _24;
            let _25: u64;
            scope 3 {
                debug scaled_conf => _25;
                let _40: std::string::String;
                let mut _76: &LendingError;
                let mut _77: &LendingError;
                let mut _78: &[&str; 3];
                scope 4 {
                    debug res => _40;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).0: i64);
        _4 = <u64 as TryFrom<i64>>::try_from(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = std::result::Result::<u64, TryFromIntError>::unwrap(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        _7 = Eq(move _8, const 0_u64);
        switchInt(move _7) -> [0: bb8, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _75 = const _;
        _13 = &(*_75);
        _12 = LendingError::name(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = LendingError::PriceIsZero;
        _15 = <LendingError as Into<u32>>::into(move _16) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _74 = const _;
        _18 = &(*_74);
        _17 = <LendingError as ToString>::to_string(move _18) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\pyth.rs", line: const 77_u32 };
        _21 = anchor_lang::error::ErrorOrigin::Source(move _22);
        StorageDead(_22);
        _20 = std::option::Option::<ErrorOrigin>::Some(move _21);
        StorageDead(_21);
        StorageLive(_23);
        _23 = std::option::Option::<ComparedValues>::None;
        _11 = anchor_lang::error::AnchorError { error_name: move _12, error_code_number: move _15, error_msg: move _17, error_origin: move _20, compared_values: move _23 };
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_12);
        _10 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _11) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        StorageDead(_11);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb25;
    }

    bb8: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_24);
        _24 = ((*_1).1: u64);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _24;
        StorageLive(_28);
        _28 = _2;
        _26 = core::num::<impl u64>::checked_mul(move _27, move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = std::option::Option::<u64>::unwrap(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _25;
        StorageLive(_32);
        _32 = _3;
        _30 = Gt(move _31, move _32);
        switchInt(move _30) -> [0: bb24, otherwise: bb11];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _78 = const _;
        _44 = &(*_78);
        _43 = &(*_44);
        _42 = move _43 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_24;
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _51) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_3;
        _54 = &(*_55);
        _53 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _54) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_2;
        _57 = &(*_58);
        _56 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _57) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_57);
        _49 = [move _50, move _53, move _56];
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = move _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_47);
        _41 = Arguments::<'_>::new_v1(move _42, move _46) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_46);
        StorageDead(_42);
        _40 = format(move _41) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_41);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_44);
        _39 = move _40;
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = <std::string::String as Deref>::deref(move _37) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _35 = &(*_36);
        StorageDead(_37);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        StorageDead(_35);
        drop(_39) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _77 = const _;
        _62 = &(*_77);
        _61 = LendingError::name(move _62) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_62);
        StorageLive(_64);
        StorageLive(_65);
        _65 = LendingError::PriceConfidenceTooWide;
        _64 = <LendingError as Into<u32>>::into(move _65) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        _76 = const _;
        _67 = &(*_76);
        _66 = <LendingError as ToString>::to_string(move _67) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        StorageDead(_67);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\utils\\prices\\pyth.rs", line: const 88_u32 };
        _70 = anchor_lang::error::ErrorOrigin::Source(move _71);
        StorageDead(_71);
        _69 = std::option::Option::<ErrorOrigin>::Some(move _70);
        StorageDead(_70);
        StorageLive(_72);
        _72 = std::option::Option::<ComparedValues>::None;
        _60 = anchor_lang::error::AnchorError { error_name: move _61, error_code_number: move _64, error_msg: move _66, error_origin: move _69, compared_values: move _72 };
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_61);
        _59 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _60) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        StorageDead(_60);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _59);
        StorageDead(_59);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb25;
    }

    bb24: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_73);
        _73 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _73);
        StorageDead(_73);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_3);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_3);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_61) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_39) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_12) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}
