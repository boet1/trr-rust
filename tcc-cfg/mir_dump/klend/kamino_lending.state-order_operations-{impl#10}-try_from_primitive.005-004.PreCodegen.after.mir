// MIR for `state::order_operations::<impl at programs\klend\src\state\order_operations.rs:29:45: 29:61>::try_from_primitive` after PreCodegen

fn state::order_operations::<impl at programs\klend\src\state\order_operations.rs:29:45: 29:61>::try_from_primitive(_1: u8) -> std::result::Result<ConditionType, TryFromPrimitiveError<ConditionType>> {
    debug number => _1;
    let mut _0: std::result::Result<state::order_operations::ConditionType, num_enum::TryFromPrimitiveError<state::order_operations::ConditionType>>;
    let mut _2: state::order_operations::ConditionType;
    let mut _3: state::order_operations::ConditionType;
    let mut _4: state::order_operations::ConditionType;
    let mut _5: state::order_operations::ConditionType;
    let mut _6: state::order_operations::ConditionType;
    let mut _7: num_enum::TryFromPrimitiveError<state::order_operations::ConditionType>;
    let mut _8: u8;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        switchInt(_1) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, otherwise: bb1];
    }

    bb1: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = TryFromPrimitiveError::<ConditionType>::new(move _8) -> [return: bb7, unwind continue];
    }

    bb2: {
        StorageLive(_2);
        _2 = ConditionType::Never;
        _0 = std::result::Result::<ConditionType, TryFromPrimitiveError<ConditionType>>::Ok(move _2);
        StorageDead(_2);
        goto -> bb8;
    }

    bb3: {
        StorageLive(_3);
        _3 = ConditionType::UserLtvAbove;
        _0 = std::result::Result::<ConditionType, TryFromPrimitiveError<ConditionType>>::Ok(move _3);
        StorageDead(_3);
        goto -> bb8;
    }

    bb4: {
        StorageLive(_4);
        _4 = ConditionType::UserLtvBelow;
        _0 = std::result::Result::<ConditionType, TryFromPrimitiveError<ConditionType>>::Ok(move _4);
        StorageDead(_4);
        goto -> bb8;
    }

    bb5: {
        StorageLive(_5);
        _5 = ConditionType::DebtCollPriceRatioAbove;
        _0 = std::result::Result::<ConditionType, TryFromPrimitiveError<ConditionType>>::Ok(move _5);
        StorageDead(_5);
        goto -> bb8;
    }

    bb6: {
        StorageLive(_6);
        _6 = ConditionType::DebtCollPriceRatioBelow;
        _0 = std::result::Result::<ConditionType, TryFromPrimitiveError<ConditionType>>::Ok(move _6);
        StorageDead(_6);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_8);
        _0 = std::result::Result::<ConditionType, TryFromPrimitiveError<ConditionType>>::Err(move _7);
        StorageDead(_7);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
