// MIR for `reset_elevation_group_debts` before PreCodegen

fn reset_elevation_group_debts(_1: &mut obligation::Obligation, _2: std::option::Option<&state::lending_market::ElevationGroup>, _3: impl Iterator<Item = T> + Clone, _4: impl Iterator<Item = T> + Clone) -> std::result::Result<(), anchor_lang::error::Error> {
    debug obligation => _1;
    debug elevation_group => _2;
    debug deposit_reserves_iter => _3;
    debug borrow_reserves_iter => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: isize;
    let mut _9: &state::lending_market::ElevationGroup;
    let mut _11: std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>;
    let mut _12: &mut state::obligation::Obligation;
    let mut _13: impl Iterator<Item = T> + Clone;
    let mut _14: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone>;
    let mut _15: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone>;
    let mut _17: ();
    let _18: ();
    let mut _19: std::option::Option<std::result::Result<(&mut state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>>;
    let mut _20: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone>;
    let mut _21: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone>;
    let mut _22: isize;
    let mut _23: !;
    let mut _27: (&mut state::obligation::ObligationCollateral, T);
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&mut state::obligation::ObligationCollateral, T)>;
    let mut _29: std::result::Result<(&mut state::obligation::ObligationCollateral, T), anchor_lang::error::Error>;
    let mut _30: std::result::Result<(&mut state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>;
    let mut _31: {closure@programs\klend\src\lending_market\lending_operations.rs:932:45: 932:48};
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _37: ();
    let mut _38: bool;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let _41: anchor_lang::prelude::Pubkey;
    let mut _42: &T;
    let mut _43: !;
    let mut _44: anchor_lang::error::Error;
    let mut _45: anchor_lang::error::Error;
    let mut _46: anchor_lang::error::AnchorError;
    let mut _47: std::string::String;
    let mut _48: &LendingError;
    let _49: LendingError;
    let mut _50: u32;
    let mut _51: LendingError;
    let mut _52: std::string::String;
    let mut _53: &LendingError;
    let _54: LendingError;
    let mut _55: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _56: anchor_lang::error::ErrorOrigin;
    let mut _57: anchor_lang::error::Source;
    let mut _58: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _59: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _60: anchor_lang::prelude::Pubkey;
    let mut _61: anchor_lang::prelude::Pubkey;
    let mut _62: &T;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _65: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _66: &T;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _72: u64;
    let mut _73: u64;
    let mut _74: &state::reserve::Reserve;
    let mut _75: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _76: usize;
    let mut _77: usize;
    let mut _78: bool;
    let mut _79: u64;
    let mut _80: &mut state::reserve::Reserve;
    let mut _81: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let _82: usize;
    let mut _83: usize;
    let mut _84: bool;
    let _85: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone>;
    let mut _86: std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>;
    let mut _87: &mut state::obligation::Obligation;
    let mut _88: impl Iterator<Item = T> + Clone;
    let mut _89: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone>;
    let mut _90: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone>;
    let _92: ();
    let mut _93: std::option::Option<std::result::Result<(&mut state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>>;
    let mut _94: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone>;
    let mut _95: &mut utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone>;
    let mut _96: isize;
    let mut _97: !;
    let mut _101: (&mut state::obligation::ObligationLiquidity, T);
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (&mut state::obligation::ObligationLiquidity, T)>;
    let mut _103: std::result::Result<(&mut state::obligation::ObligationLiquidity, T), anchor_lang::error::Error>;
    let mut _104: std::result::Result<(&mut state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>;
    let mut _105: {closure@programs\klend\src\lending_market\lending_operations.rs:955:44: 955:47};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _113: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _114: &T;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _120: u64;
    let mut _121: u64;
    let mut _122: &state::reserve::Reserve;
    let mut _123: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _124: u64;
    let mut _125: &mut state::reserve::Reserve;
    let mut _126: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _127: ();
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: bool;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    scope 1 {
        debug elevation_group => _7;
        let _7: &state::lending_market::ElevationGroup;
        let _8: usize;
        scope 2 {
            debug elevation_group_index => _8;
            let _10: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone>;
            scope 3 {
                debug deposits_and_reserves => _10;
                let mut _16: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone>;
                scope 4 {
                    debug iter => _16;
                    let _24: std::result::Result<(&mut state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>;
                    scope 5 {
                        debug deposit_and_reserve => _24;
                        let _25: &mut state::obligation::ObligationCollateral;
                        let _26: T;
                        let _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _36: (&mut state::obligation::ObligationCollateral, T);
                        scope 6 {
                            debug deposit => _25;
                            debug reserve => _26;
                            let mut _63: std::cell::RefMut<'_, state::reserve::Reserve>;
                            let _68: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _71: std::cell::RefMut<'_, state::reserve::Reserve>;
                            let mut _128: &LendingError;
                            let mut _129: &LendingError;
                            scope 11 {
                                debug reserve => _63;
                            }
                            scope 12 {
                                debug residual => _68;
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug val => _71;
                                scope 15 {
                                }
                            }
                        }
                        scope 7 {
                            debug residual => _33;
                            scope 8 {
                            }
                        }
                        scope 9 {
                            debug val => _36;
                            scope 10 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 16 {
        debug borrows_and_reserves => _85;
        let mut _91: utils::validation::LengthCheckingZipIterator<std::iter::Filter<std::slice::IterMut<'_, state::obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone>;
        scope 17 {
            debug iter => _91;
            let _98: std::result::Result<(&mut state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>;
            scope 18 {
                debug borrow_and_reserve => _98;
                let _99: &mut state::obligation::ObligationLiquidity;
                let _100: T;
                let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _110: (&mut state::obligation::ObligationLiquidity, T);
                scope 19 {
                    debug borrow => _99;
                    debug reserve => _100;
                    let mut _111: std::cell::RefMut<'_, state::reserve::Reserve>;
                    let _116: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _119: std::cell::RefMut<'_, state::reserve::Reserve>;
                    scope 24 {
                        debug reserve => _111;
                    }
                    scope 25 {
                        debug residual => _116;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _119;
                        scope 28 {
                        }
                    }
                }
                scope 20 {
                    debug residual => _107;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _110;
                    scope 23 {
                    }
                }
            }
        }
    }

    bb0: {
        _131 = const false;
        _130 = const false;
        _132 = const false;
        _131 = const true;
        _130 = const true;
        StorageLive(_5);
        _6 = discriminant(_2);
        switchInt(move _6) -> [1: bb1, otherwise: bb39];
    }

    bb1: {
        StorageLive(_7);
        _7 = ((_2 as Some).0: &state::lending_market::ElevationGroup);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_7);
        _8 = state::lending_market::ElevationGroup::get_index(move _9) -> [return: bb2, unwind: bb97];
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut (*_1);
        _11 = obligation::Obligation::active_deposits_mut(move _12) -> [return: bb3, unwind: bb97];
    }

    bb3: {
        StorageDead(_12);
        StorageLive(_13);
        _131 = const false;
        _13 = move _3;
        _10 = <Filter<std::slice::IterMut<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}> as validation::IterExt>::zip_exact::<impl Iterator<Item = T> + Clone, impl Iterator<Item = T> + Clone>(move _11, move _13) -> [return: bb4, unwind: bb97];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        _15 = move _10;
        _14 = <LengthCheckingZipIterator<Filter<std::slice::IterMut<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone> as IntoIterator>::into_iter(move _15) -> [return: bb5, unwind: bb97];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_16);
        _16 = move _14;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _16;
        _20 = &mut (*_21);
        _19 = <LengthCheckingZipIterator<Filter<std::slice::IterMut<'_, obligation::ObligationCollateral>, {closure@programs\klend\src\state\obligation.rs:433:41: 433:44}>, impl Iterator<Item = T> + Clone> as Iterator>::next(move _20) -> [return: bb7, unwind: bb81];
    }

    bb7: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        StorageLive(_24);
        _24 = move ((_19 as Some).0: std::result::Result<(&mut state::obligation::ObligationCollateral, T), utils::validation::LengthMismatchError>);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = move _24;
        StorageLive(_31);
        _31 = {closure@programs\klend\src\lending_market\lending_operations.rs:932:45: 932:48};
        _29 = std::result::Result::<(&mut obligation::ObligationCollateral, T), LengthMismatchError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:932:45: 932:48}>(move _30, move _31) -> [return: bb11, unwind: bb95];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _5 = const ();
        _133 = discriminant(_19);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        drop(_16) -> [return: bb38, unwind: bb97];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<(&mut obligation::ObligationCollateral, T), anchor_lang::error::Error> as Try>::branch(move _29) -> [return: bb12, unwind: bb95];
    }

    bb12: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        StorageLive(_36);
        _36 = move ((_28 as Continue).0: (&mut state::obligation::ObligationCollateral, T));
        _27 = move _36;
        StorageDead(_36);
        StorageLive(_25);
        _25 = move (_27.0: &mut state::obligation::ObligationCollateral);
        StorageLive(_26);
        _26 = move (_27.1: T);
        _135 = discriminant(_28);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_25).0: anchor_lang::prelude::Pubkey);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_26;
        _41 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _42) -> [return: bb16, unwind: bb80];
    }

    bb14: {
        StorageLive(_33);
        _33 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _35) -> [return: bb15, unwind: bb94];
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_33);
        _157 = discriminant(_28);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb70;
    }

    bb16: {
        _40 = &_41;
        StorageDead(_42);
        _38 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _39, move _40) -> [return: bb17, unwind: bb80];
    }

    bb17: {
        switchInt(move _38) -> [0: bb25, otherwise: bb18];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _129 = const _;
        _48 = &(*_129);
        _47 = LendingError::name(move _48) -> [return: bb19, unwind: bb80];
    }

    bb19: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        _51 = LendingError::InvalidAccountInput;
        _50 = <LendingError as Into<u32>>::into(move _51) -> [return: bb20, unwind: bb79];
    }

    bb20: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _128 = const _;
        _53 = &(*_128);
        _52 = <LendingError as ToString>::to_string(move _53) -> [return: bb21, unwind: bb79];
    }

    bb21: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_operations.rs", line: const 933_u32 };
        _56 = anchor_lang::error::ErrorOrigin::Source(move _57);
        StorageDead(_57);
        _55 = std::option::Option::<ErrorOrigin>::Some(move _56);
        StorageDead(_56);
        StorageLive(_58);
        _58 = std::option::Option::<ComparedValues>::None;
        _46 = anchor_lang::error::AnchorError { error_name: move _47, error_code_number: move _50, error_msg: move _52, error_origin: move _55, compared_values: move _58 };
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_47);
        _45 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _46) -> [return: bb22, unwind: bb80];
    }

    bb22: {
        _132 = const true;
        StorageDead(_46);
        StorageLive(_59);
        StorageLive(_60);
        _60 = ((*_25).0: anchor_lang::prelude::Pubkey);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_26;
        _61 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_pubkey(move _62) -> [return: bb23, unwind: bb93];
    }

    bb23: {
        StorageDead(_62);
        _59 = (move _60, move _61);
        StorageDead(_61);
        StorageDead(_60);
        _132 = const false;
        _44 = anchor_lang::error::Error::with_pubkeys(move _45, move _59) -> [return: bb24, unwind: bb93];
    }

    bb24: {
        StorageDead(_59);
        _132 = const false;
        StorageDead(_45);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _44);
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb68;
    }

    bb25: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        _37 = const ();
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_26;
        _65 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_mut(move _66) -> [return: bb26, unwind: bb80];
    }

    bb26: {
        StorageDead(_66);
        _64 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _65) -> [return: bb27, unwind: bb80];
    }

    bb27: {
        StorageDead(_65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb28, 1: bb29, otherwise: bb9];
    }

    bb28: {
        StorageLive(_71);
        _71 = move ((_64 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _63 = move _71;
        StorageDead(_71);
        _137 = discriminant(_64);
        StorageDead(_64);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_63;
        _74 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _75) -> [return: bb31, unwind: bb78];
    }

    bb29: {
        StorageLive(_68);
        _68 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_70);
        _70 = move _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _70) -> [return: bb30, unwind: bb91];
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_68);
        _155 = discriminant(_64);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb68;
    }

    bb31: {
        StorageDead(_75);
        StorageLive(_76);
        _76 = _8;
        _77 = Len(((*_74).12: [u64; 32]));
        _78 = Lt(_76, _77);
        assert(move _78, "index out of bounds: the length is {} but the index is {}", move _77, _76) -> [success: bb32, unwind: bb78];
    }

    bb32: {
        _73 = ((*_74).12: [u64; 32])[_76];
        StorageLive(_79);
        _79 = ((*_25).3: u64);
        _72 = core::num::<impl u64>::saturating_sub(move _73, move _79) -> [return: bb33, unwind: bb78];
    }

    bb33: {
        StorageDead(_79);
        StorageDead(_73);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &mut _63;
        _80 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _81) -> [return: bb34, unwind: bb78];
    }

    bb34: {
        StorageDead(_81);
        StorageLive(_82);
        _82 = _8;
        _83 = Len(((*_80).12: [u64; 32]));
        _84 = Lt(_82, _83);
        assert(move _84, "index out of bounds: the length is {} but the index is {}", move _83, _82) -> [success: bb35, unwind: bb78];
    }

    bb35: {
        ((*_80).12: [u64; 32])[_82] = move _72;
        StorageDead(_72);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_74);
        ((*_25).3: u64) = const 0_u64;
        _18 = const ();
        drop(_63) -> [return: bb36, unwind: bb80];
    }

    bb36: {
        StorageDead(_63);
        drop(_26) -> [return: bb37, unwind: bb95];
    }

    bb37: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _139 = discriminant(_19);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        _17 = const ();
        goto -> bb6;
    }

    bb38: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb63;
    }

    bb39: {
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &mut (*_1);
        _86 = obligation::Obligation::active_borrows_mut(move _87) -> [return: bb40, unwind: bb97];
    }

    bb40: {
        StorageDead(_87);
        StorageLive(_88);
        _130 = const false;
        _88 = move _4;
        _85 = <Filter<std::slice::IterMut<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}> as validation::IterExt>::zip_exact::<impl Iterator<Item = T> + Clone, impl Iterator<Item = T> + Clone>(move _86, move _88) -> [return: bb41, unwind: bb97];
    }

    bb41: {
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_89);
        StorageLive(_90);
        _90 = move _85;
        _89 = <LengthCheckingZipIterator<Filter<std::slice::IterMut<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone> as IntoIterator>::into_iter(move _90) -> [return: bb42, unwind: bb97];
    }

    bb42: {
        StorageDead(_90);
        StorageLive(_91);
        _91 = move _89;
        goto -> bb43;
    }

    bb43: {
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &mut _91;
        _94 = &mut (*_95);
        _93 = <LengthCheckingZipIterator<Filter<std::slice::IterMut<'_, obligation::ObligationLiquidity>, {closure@programs\klend\src\state\obligation.rs:437:40: 437:43}>, impl Iterator<Item = T> + Clone> as Iterator>::next(move _94) -> [return: bb44, unwind: bb77];
    }

    bb44: {
        StorageDead(_94);
        _96 = discriminant(_93);
        switchInt(move _96) -> [0: bb46, 1: bb45, otherwise: bb9];
    }

    bb45: {
        StorageLive(_98);
        _98 = move ((_93 as Some).0: std::result::Result<(&mut state::obligation::ObligationLiquidity, T), utils::validation::LengthMismatchError>);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = move _98;
        StorageLive(_105);
        _105 = {closure@programs\klend\src\lending_market\lending_operations.rs:955:44: 955:47};
        _103 = std::result::Result::<(&mut obligation::ObligationLiquidity, T), LengthMismatchError>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\lending_market\lending_operations.rs:955:44: 955:47}>(move _104, move _105) -> [return: bb47, unwind: bb90];
    }

    bb46: {
        _5 = const ();
        _141 = discriminant(_93);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        drop(_91) -> [return: bb62, unwind: bb97];
    }

    bb47: {
        StorageDead(_105);
        StorageDead(_104);
        _102 = <std::result::Result<(&mut obligation::ObligationLiquidity, T), anchor_lang::error::Error> as Try>::branch(move _103) -> [return: bb48, unwind: bb90];
    }

    bb48: {
        StorageDead(_103);
        _106 = discriminant(_102);
        switchInt(move _106) -> [0: bb49, 1: bb50, otherwise: bb9];
    }

    bb49: {
        StorageLive(_110);
        _110 = move ((_102 as Continue).0: (&mut state::obligation::ObligationLiquidity, T));
        _101 = move _110;
        StorageDead(_110);
        StorageLive(_99);
        _99 = move (_101.0: &mut state::obligation::ObligationLiquidity);
        StorageLive(_100);
        _100 = move (_101.1: T);
        _143 = discriminant(_102);
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_100;
        _113 = <T as account_loader_trait::AnyAccountLoader<'_, reserve::Reserve>>::get_mut(move _114) -> [return: bb52, unwind: bb76];
    }

    bb50: {
        StorageLive(_107);
        _107 = move ((_102 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb51, unwind: bb89];
    }

    bb51: {
        StorageDead(_109);
        StorageDead(_107);
        _151 = discriminant(_102);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb66;
    }

    bb52: {
        StorageDead(_114);
        _112 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb53, unwind: bb76];
    }

    bb53: {
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb54, 1: bb55, otherwise: bb9];
    }

    bb54: {
        StorageLive(_119);
        _119 = move ((_112 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _111 = move _119;
        StorageDead(_119);
        _145 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_111;
        _122 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _123) -> [return: bb57, unwind: bb75];
    }

    bb55: {
        StorageLive(_116);
        _116 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_118);
        _118 = move _116;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _118) -> [return: bb56, unwind: bb88];
    }

    bb56: {
        StorageDead(_118);
        StorageDead(_116);
        _149 = discriminant(_112);
        StorageDead(_112);
        StorageDead(_111);
        drop(_100) -> [return: bb65, unwind: bb90];
    }

    bb57: {
        StorageDead(_123);
        _121 = ((*_122).11: u64);
        StorageLive(_124);
        _124 = ((*_99).6: u64);
        _120 = core::num::<impl u64>::saturating_sub(move _121, move _124) -> [return: bb58, unwind: bb75];
    }

    bb58: {
        StorageDead(_124);
        StorageDead(_121);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &mut _111;
        _125 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _126) -> [return: bb59, unwind: bb75];
    }

    bb59: {
        StorageDead(_126);
        ((*_125).11: u64) = move _120;
        StorageDead(_120);
        StorageDead(_125);
        StorageDead(_122);
        ((*_99).6: u64) = const 0_u64;
        _92 = const ();
        drop(_111) -> [return: bb60, unwind: bb76];
    }

    bb60: {
        StorageDead(_111);
        drop(_100) -> [return: bb61, unwind: bb90];
    }

    bb61: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        _147 = discriminant(_93);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        _17 = const ();
        goto -> bb43;
    }

    bb62: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_85);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_5);
        StorageLive(_127);
        _127 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _127);
        StorageDead(_127);
        switchInt(_130) -> [0: bb64, otherwise: bb84];
    }

    bb64: {
        switchInt(_131) -> [0: bb74, otherwise: bb85];
    }

    bb65: {
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_98);
        _153 = discriminant(_93);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        drop(_91) -> [return: bb67, unwind: bb97];
    }

    bb67: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_85);
        goto -> bb72;
    }

    bb68: {
        drop(_26) -> [return: bb69, unwind: bb95];
    }

    bb69: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_24);
        _159 = discriminant(_19);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        drop(_16) -> [return: bb71, unwind: bb97];
    }

    bb71: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_5);
        switchInt(_130) -> [0: bb73, otherwise: bb86];
    }

    bb73: {
        switchInt(_131) -> [0: bb74, otherwise: bb87];
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        drop(_111) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_100) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_91) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_63) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_47) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_26) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_16) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_131) -> [0: bb83, otherwise: bb98];
    }

    bb83 (cleanup): {
        resume;
    }

    bb84: {
        drop(_4) -> [return: bb64, unwind: bb82];
    }

    bb85: {
        drop(_3) -> [return: bb74, unwind: bb83];
    }

    bb86: {
        drop(_4) -> [return: bb73, unwind: bb82];
    }

    bb87: {
        drop(_3) -> [return: bb74, unwind: bb83];
    }

    bb88 (cleanup): {
        _161 = discriminant(_112);
        goto -> bb76;
    }

    bb89 (cleanup): {
        _163 = discriminant(_102);
        goto -> bb90;
    }

    bb90 (cleanup): {
        _164 = discriminant(_93);
        goto -> bb77;
    }

    bb91 (cleanup): {
        _165 = discriminant(_64);
        goto -> bb80;
    }

    bb92 (cleanup): {
        drop(_45) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_132) -> [0: bb80, otherwise: bb92];
    }

    bb94 (cleanup): {
        _167 = discriminant(_28);
        goto -> bb95;
    }

    bb95 (cleanup): {
        _168 = discriminant(_19);
        goto -> bb81;
    }

    bb96 (cleanup): {
        drop(_4) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_130) -> [0: bb82, otherwise: bb96];
    }

    bb98 (cleanup): {
        drop(_3) -> [return: bb83, unwind terminate(cleanup)];
    }
}
