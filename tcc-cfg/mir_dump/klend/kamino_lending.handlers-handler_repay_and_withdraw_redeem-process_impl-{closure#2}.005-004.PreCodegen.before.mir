// MIR for `handlers::handler_repay_and_withdraw_redeem::process_impl::{closure#2}` before PreCodegen

fn handlers::handler_repay_and_withdraw_redeem::process_impl::{closure#2}(_1: &mut {closure@programs\klend\src\handlers\handler_repay_and_withdraw_redeem.rs:204:27: 204:36}, _2: &anchor_lang::prelude::AccountInfo<'_>) -> bool {
    debug account => _2;
    debug withdraw_reserve_key => (*((*_1).0: &anchor_lang::prelude::Pubkey));
    let mut _0: bool;
    let mut _3: &anchor_lang::prelude::Pubkey;
    let _4: anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let mut _7: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        StorageDead(_5);
        StorageLive(_6);
        _7 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _6 = &(*_7);
        _0 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _3, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
