digraph Mir_0_11427 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::U256::fmt_hex(_1: &amp;ReErased utils::fraction::uint_types::U256, _2: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;, _3: bool) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let _4: &amp;ReErased [u64; 4_usize];<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased utils::fraction::uint_types::U256;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _10: &amp;ReErased str;<br align="left"/>let _11: &amp;ReErased str;<br align="left"/>let mut _12: &amp;ReErased str;<br align="left"/>let _13: &amp;ReErased str;<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: [u8; 64_usize];<br align="left"/>let mut _16: usize;<br align="left"/>let _17: ();<br align="left"/>let mut _18: std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _19: std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _20: std::slice::Iter&lt;ReErased, u64&gt;;<br align="left"/>let mut _21: &amp;ReErased [u64];<br align="left"/>let mut _22: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _23: std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _24: ();<br align="left"/>let _25: ();<br align="left"/>let mut _26: std::option::Option&lt;&amp;ReErased u64&gt;;<br align="left"/>let mut _27: &amp;ReErased mut std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _28: &amp;ReErased mut std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: !;<br align="left"/>let _31: &amp;ReErased u64;<br align="left"/>let mut _32: std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _33: std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _34: std::ops::Range&lt;i32&gt;;<br align="left"/>let _35: ();<br align="left"/>let mut _36: std::option::Option&lt;i32&gt;;<br align="left"/>let mut _37: &amp;ReErased mut std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _38: &amp;ReErased mut std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _39: isize;<br align="left"/>let mut _40: !;<br align="left"/>let _41: i32;<br align="left"/>let _42: u64;<br align="left"/>let mut _43: u64;<br align="left"/>let mut _44: &amp;ReErased u64;<br align="left"/>let mut _45: u64;<br align="left"/>let mut _46: u64;<br align="left"/>let mut _47: i32;<br align="left"/>let mut _48: i32;<br align="left"/>let mut _49: i32;<br align="left"/>let mut _50: (i32, bool);<br align="left"/>let mut _51: (i32, bool);<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: u64;<br align="left"/>let mut _54: i32;<br align="left"/>let mut _55: i32;<br align="left"/>let mut _56: i32;<br align="left"/>let mut _57: (i32, bool);<br align="left"/>let mut _58: (i32, bool);<br align="left"/>let mut _59: bool;<br align="left"/>let _60: ();<br align="left"/>let mut _61: bool;<br align="left"/>let mut _62: u64;<br align="left"/>let mut _63: bool;<br align="left"/>let _64: u8;<br align="left"/>let mut _65: bool;<br align="left"/>let mut _66: bool;<br align="left"/>let mut _67: &amp;ReErased u64;<br align="left"/>let mut _68: u8;<br align="left"/>let mut _69: u64;<br align="left"/>let mut _70: (u8, bool);<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: u8;<br align="left"/>let mut _73: u8;<br align="left"/>let mut _74: u64;<br align="left"/>let mut _75: (u8, bool);<br align="left"/>let mut _76: (u8, bool);<br align="left"/>let mut _77: u8;<br align="left"/>let mut _78: u8;<br align="left"/>let mut _79: u64;<br align="left"/>let mut _80: (u8, bool);<br align="left"/>let mut _81: (u8, bool);<br align="left"/>let mut _82: u8;<br align="left"/>let _83: usize;<br align="left"/>let mut _84: usize;<br align="left"/>let mut _85: bool;<br align="left"/>let mut _86: (usize, bool);<br align="left"/>let _87: &amp;ReErased str;<br align="left"/>let mut _88: &amp;ReErased [u8];<br align="left"/>let _89: &amp;ReErased [u8];<br align="left"/>let _90: &amp;ReErased [u8];<br align="left"/>let mut _91: &amp;ReErased [u8; 64_usize];<br align="left"/>let mut _92: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _93: usize;<br align="left"/>let mut _94: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _95: &amp;ReErased str;<br align="left"/>let _96: &amp;ReErased str;<br align="left"/>let mut _97: &amp;ReErased str;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug f =&gt; _2;<br align="left"/>debug is_lower =&gt; _3;<br align="left"/>debug data =&gt; _4;<br align="left"/>debug latch =&gt; _14;<br align="left"/>debug buf =&gt; _15;<br align="left"/>debug i =&gt; _16;<br align="left"/>debug iter =&gt; _23;<br align="left"/>debug ch =&gt; _31;<br align="left"/>debug iter =&gt; _34;<br align="left"/>debug x =&gt; _41;<br align="left"/>debug nibble =&gt; _42;<br align="left"/>debug nibble =&gt; _64;<br align="left"/>debug s =&gt; _87;<br align="left"/>>;
    bb0__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_4 = &amp;((*_1).0: [u64; 4])<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/></td></tr><tr><td align="left">_6 = uint_types::U256::is_zero(move _7)</td></tr></table>>];
    bb1__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb2__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_9)<br/>_9 = &amp;mut (*_2)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = const &quot;0x&quot;<br/>_10 = &amp;(*_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = const &quot;0&quot;<br/>_12 = &amp;(*_13)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::pad_integral(move _9, const true, move _10, move _12)</td></tr></table>>];
    bb3__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_5 = const ()<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_14)<br/>_14 = const false<br/>StorageLive(_15)<br/>_15 = [const 0_u8; 64]<br/>StorageLive(_16)<br/>_16 = const 0_usize<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = &amp;(*_4)<br/>_21 = move _22 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = core::slice::&lt;impl [u64]&gt;::iter(move _21)</td></tr></table>>];
    bb5__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::slice::Iter&lt;'_, u64&gt; as Iterator&gt;::rev(move _20)</td></tr></table>>];
    bb6__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;Rev&lt;std::slice::Iter&lt;'_, u64&gt;&gt; as IntoIterator&gt;::into_iter(move _19)</td></tr></table>>];
    bb7__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_23)<br/>_23 = move _18<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;mut _23<br/>_27 = &amp;mut (*_28)<br/></td></tr><tr><td align="left">_26 = &lt;Rev&lt;std::slice::Iter&lt;'_, u64&gt;&gt; as Iterator&gt;::next(move _27)</td></tr></table>>];
    bb9__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_29 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb10__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_26 as Some).0: &amp;u64)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = std::ops::Range::&lt;i32&gt; { start: const 0_i32, end: const 16_i32 }<br/></td></tr><tr><td align="left">_32 = &lt;std::ops::Range&lt;i32&gt; as IntoIterator&gt;::into_iter(move _33)</td></tr></table>>];
    bb11__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb12__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_17 = const ()<br/>StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = &amp;_15<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_93 = _16<br/>_92 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: move _93 }<br/>StorageDead(_93)<br/></td></tr><tr><td align="left">_90 = &lt;[u8; 64] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _91, move _92)</td></tr></table>>];
    bb13__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageLive(_34)<br/>_34 = move _32<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = &amp;mut _34<br/>_37 = &amp;mut (*_38)<br/></td></tr><tr><td align="left">_36 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _37)</td></tr></table>>];
    bb15__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_39 = discriminant(_36)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb16__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_36 as Some).0: i32)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = _31<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _41<br/>_50 = CheckedSub(const 15_i32, _49)<br/></td></tr><tr><td align="left">assert(!move (_50.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 15_i32, move _49)</td></tr></table>>];
    bb17__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_25 = const ()<br/>StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>_24 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_48 = move (_50.0: i32)<br/>StorageDead(_49)<br/>_51 = CheckedMul(_48, const 4_i32)<br/></td></tr><tr><td align="left">assert(!move (_51.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _48, const 4_i32)</td></tr></table>>];
    bb19__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_47 = move (_51.0: i32)<br/>StorageDead(_48)<br/>_46 = move _47 as u64 (IntToInt)<br/>StorageDead(_47)<br/>_52 = Lt(_46, const 64_u64)<br/></td></tr><tr><td align="left">assert(move _52, &quot;attempt to shift left by `{}`, which would overflow&quot;, _46)</td></tr></table>>];
    bb20__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_45 = Shl(const 15_u64, move _46)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_43 = &lt;&amp;u64 as BitAnd&lt;u64&gt;&gt;::bitand(move _44, move _45)</td></tr></table>>];
    bb21__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = _41<br/>_57 = CheckedSub(const 15_i32, _56)<br/></td></tr><tr><td align="left">assert(!move (_57.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 15_i32, move _56)</td></tr></table>>];
    bb22__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_55 = move (_57.0: i32)<br/>StorageDead(_56)<br/>_58 = CheckedMul(_55, const 4_i32)<br/></td></tr><tr><td align="left">assert(!move (_58.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _55, const 4_i32)</td></tr></table>>];
    bb23__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_54 = move (_58.0: i32)<br/>StorageDead(_55)<br/>_53 = move _54 as u64 (IntToInt)<br/>StorageDead(_54)<br/>_59 = Lt(_53, const 64_u64)<br/></td></tr><tr><td align="left">assert(move _59, &quot;attempt to shift right by `{}`, which would overflow&quot;, _53)</td></tr></table>>];
    bb24__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_42 = Shr(move _43, move _53)<br/>StorageDead(_53)<br/>StorageDead(_43)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = _14<br/></td></tr><tr><td align="left">switchInt(move _61)</td></tr></table>>];
    bb25__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = _42<br/>_14 = Ne(move _62, const 0_u64)<br/>StorageDead(_62)<br/>_60 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_60 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_60)<br/>StorageLive(_63)<br/>_63 = _14<br/></td></tr><tr><td align="left">switchInt(move _63)</td></tr></table>>];
    bb28__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_64)<br/>_65 = Le(const 0_u64, _42)<br/></td></tr><tr><td align="left">switchInt(move _65)</td></tr></table>>];
    bb29__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_66 = Le(_42, const 9_u64)<br/></td></tr><tr><td align="left">switchInt(move _66)</td></tr></table>>];
    bb30__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = _42<br/>_68 = move _69 as u8 (IntToInt)<br/>StorageDead(_69)<br/>_70 = CheckedAdd(_68, const 48_u8)<br/></td></tr><tr><td align="left">assert(!move (_70.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _68, const 48_u8)</td></tr></table>>];
    bb31__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_64 = move (_70.0: u8)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_71)<br/>_71 = _3<br/></td></tr><tr><td align="left">switchInt(move _71)</td></tr></table>>];
    bb33__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = _42<br/>_73 = move _74 as u8 (IntToInt)<br/>StorageDead(_74)<br/>_75 = CheckedSub(_73, const 10_u8)<br/></td></tr><tr><td align="left">assert(!move (_75.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _73, const 10_u8)</td></tr></table>>];
    bb34__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = _42<br/>_78 = move _79 as u8 (IntToInt)<br/>StorageDead(_79)<br/>_80 = CheckedSub(_78, const 10_u8)<br/></td></tr><tr><td align="left">assert(!move (_80.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _78, const 10_u8)</td></tr></table>>];
    bb35__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_72 = move (_75.0: u8)<br/>StorageDead(_73)<br/>_76 = CheckedAdd(_72, const 97_u8)<br/></td></tr><tr><td align="left">assert(!move (_76.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _72, const 97_u8)</td></tr></table>>];
    bb36__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_64 = move (_76.0: u8)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_77 = move (_80.0: u8)<br/>StorageDead(_78)<br/>_81 = CheckedAdd(_77, const 65_u8)<br/></td></tr><tr><td align="left">assert(!move (_81.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _77, const 65_u8)</td></tr></table>>];
    bb38__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">_64 = move (_81.0: u8)<br/>StorageDead(_77)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = _64<br/>StorageLive(_83)<br/>_83 = _16<br/>_84 = Len(_15)<br/>_85 = Lt(_83, _84)<br/></td></tr><tr><td align="left">assert(move _85, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _84, _83)</td></tr></table>>];
    bb40__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_15[_83] = move _82<br/>StorageDead(_82)<br/>StorageDead(_83)<br/>_86 = CheckedAdd(_16, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_86.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _16, const 1_usize)</td></tr></table>>];
    bb41__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_16 = move (_86.0: usize)<br/>_35 = const ()<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">_35 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>_24 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageDead(_91)<br/>_89 = &amp;(*_90)<br/>_88 = &amp;(*_89)<br/></td></tr><tr><td align="left">_87 = from_utf8_unchecked(move _88)</td></tr></table>>];
    bb45__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageLive(_94)<br/>_94 = &amp;mut (*_2)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = const &quot;0x&quot;<br/>_95 = &amp;(*_96)<br/>StorageLive(_97)<br/>_97 = &amp;(*_87)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::pad_integral(move _94, const true, move _95, move _97)</td></tr></table>>];
    bb46__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageDead(_95)<br/>StorageDead(_94)<br/>StorageDead(_87)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_4)<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_11427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_11427 -> bb1__0_11427 [label="return"];
    bb1__0_11427 -> bb4__0_11427 [label="0"];
    bb1__0_11427 -> bb2__0_11427 [label="otherwise"];
    bb2__0_11427 -> bb3__0_11427 [label="return"];
    bb3__0_11427 -> bb47__0_11427 [label=""];
    bb4__0_11427 -> bb5__0_11427 [label="return"];
    bb5__0_11427 -> bb6__0_11427 [label="return"];
    bb6__0_11427 -> bb7__0_11427 [label="return"];
    bb7__0_11427 -> bb8__0_11427 [label=""];
    bb8__0_11427 -> bb9__0_11427 [label="return"];
    bb9__0_11427 -> bb12__0_11427 [label="0"];
    bb9__0_11427 -> bb10__0_11427 [label="1"];
    bb9__0_11427 -> bb11__0_11427 [label="otherwise"];
    bb10__0_11427 -> bb13__0_11427 [label="return"];
    bb12__0_11427 -> bb44__0_11427 [label="return"];
    bb13__0_11427 -> bb14__0_11427 [label=""];
    bb14__0_11427 -> bb15__0_11427 [label="return"];
    bb15__0_11427 -> bb17__0_11427 [label="0"];
    bb15__0_11427 -> bb16__0_11427 [label="1"];
    bb15__0_11427 -> bb11__0_11427 [label="otherwise"];
    bb16__0_11427 -> bb18__0_11427 [label="success"];
    bb17__0_11427 -> bb8__0_11427 [label=""];
    bb18__0_11427 -> bb19__0_11427 [label="success"];
    bb19__0_11427 -> bb20__0_11427 [label="success"];
    bb20__0_11427 -> bb21__0_11427 [label="return"];
    bb21__0_11427 -> bb22__0_11427 [label="success"];
    bb22__0_11427 -> bb23__0_11427 [label="success"];
    bb23__0_11427 -> bb24__0_11427 [label="success"];
    bb24__0_11427 -> bb25__0_11427 [label="0"];
    bb24__0_11427 -> bb26__0_11427 [label="otherwise"];
    bb25__0_11427 -> bb27__0_11427 [label=""];
    bb26__0_11427 -> bb27__0_11427 [label=""];
    bb27__0_11427 -> bb42__0_11427 [label="0"];
    bb27__0_11427 -> bb28__0_11427 [label="otherwise"];
    bb28__0_11427 -> bb32__0_11427 [label="0"];
    bb28__0_11427 -> bb29__0_11427 [label="otherwise"];
    bb29__0_11427 -> bb32__0_11427 [label="0"];
    bb29__0_11427 -> bb30__0_11427 [label="otherwise"];
    bb30__0_11427 -> bb31__0_11427 [label="success"];
    bb31__0_11427 -> bb39__0_11427 [label=""];
    bb32__0_11427 -> bb34__0_11427 [label="0"];
    bb32__0_11427 -> bb33__0_11427 [label="otherwise"];
    bb33__0_11427 -> bb35__0_11427 [label="success"];
    bb34__0_11427 -> bb37__0_11427 [label="success"];
    bb35__0_11427 -> bb36__0_11427 [label="success"];
    bb36__0_11427 -> bb39__0_11427 [label=""];
    bb37__0_11427 -> bb38__0_11427 [label="success"];
    bb38__0_11427 -> bb39__0_11427 [label=""];
    bb39__0_11427 -> bb40__0_11427 [label="success"];
    bb40__0_11427 -> bb41__0_11427 [label="success"];
    bb41__0_11427 -> bb43__0_11427 [label=""];
    bb42__0_11427 -> bb43__0_11427 [label=""];
    bb43__0_11427 -> bb14__0_11427 [label=""];
    bb44__0_11427 -> bb45__0_11427 [label="return"];
    bb45__0_11427 -> bb46__0_11427 [label="return"];
    bb46__0_11427 -> bb47__0_11427 [label=""];
}
