// MIR for `handlers::handler_update_global_config::<impl at programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18>::try_accounts` after PreCodegen

fn handlers::handler_update_global_config::<impl at programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdateGlobalConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_update_global_config::UpdateGlobalConfigBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_update_global_config::UpdateGlobalConfigBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _38: (anchor_lang::prelude::Pubkey, u8);
    let mut _39: &[&[u8]];
    let mut _40: &[&[u8]; 1];
    let _41: &[&[u8]; 1];
    let _42: [&[u8]; 1];
    let mut _43: &[u8];
    let _44: &[u8];
    let mut _45: &anchor_lang::prelude::Pubkey;
    let _46: &&anchor_lang::prelude::Pubkey;
    let mut _47: u8;
    let _48: ();
    let mut _49: bool;
    let mut _50: &anchor_lang::prelude::Pubkey;
    let _51: anchor_lang::prelude::Pubkey;
    let mut _52: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _53: &anchor_lang::prelude::Pubkey;
    let mut _54: !;
    let mut _55: anchor_lang::error::Error;
    let mut _56: anchor_lang::error::Error;
    let mut _57: anchor_lang::error::Error;
    let mut _58: anchor_lang::error::ErrorCode;
    let mut _59: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _60: anchor_lang::prelude::Pubkey;
    let mut _61: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _62: anchor_lang::prelude::Pubkey;
    let _63: ();
    let mut _64: bool;
    let mut _65: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _66: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let _67: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _68: !;
    let mut _69: anchor_lang::error::Error;
    let mut _70: anchor_lang::error::Error;
    let mut _71: anchor_lang::error::ErrorCode;
    let _72: ();
    let mut _74: &state::global_config::GlobalConfig;
    let mut _75: &std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let _76: std::cell::Ref<'_, state::global_config::GlobalConfig>;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::global_config::GlobalConfig>>;
    let mut _78: std::result::Result<std::cell::Ref<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _79: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _86: &anchor_lang::prelude::Signer<'_>;
    let mut _87: bool;
    let mut _88: &anchor_lang::prelude::Pubkey;
    let mut _89: &anchor_lang::prelude::Pubkey;
    let mut _90: !;
    let mut _91: anchor_lang::error::Error;
    let mut _92: anchor_lang::error::Error;
    let mut _93: anchor_lang::error::Error;
    let mut _94: anchor_lang::error::ErrorCode;
    let mut _95: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _96: anchor_lang::prelude::Pubkey;
    let mut _97: anchor_lang::prelude::Pubkey;
    let mut _98: handlers::handler_update_global_config::UpdateGlobalConfig<'_>;
    let mut _99: anchor_lang::prelude::Signer<'_>;
    let mut _100: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _102: &anchor_lang::prelude::Pubkey;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    scope 1 {
        debug global_admin => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
        scope 6 {
            debug global_config => _21;
            let _36: anchor_lang::prelude::Pubkey;
            let _37: u8;
            let mut _101: &[&[u8]; 1];
            scope 11 {
                debug __pda_address => _36;
                debug __bump => _37;
                let _73: anchor_lang::prelude::Pubkey;
                let _81: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _84: std::cell::Ref<'_, state::global_config::GlobalConfig>;
                scope 12 {
                    debug my_key => _73;
                    let _85: anchor_lang::prelude::Pubkey;
                    scope 17 {
                        debug target_key => _85;
                    }
                }
                scope 13 {
                    debug residual => _81;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _84;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _105 = const false;
        _104 = const false;
        _103 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdateGlobalConfigBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18}>(move _9, move _15) -> [return: bb2, unwind: bb47];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb47];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _106 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Accounts<'_, UpdateGlobalConfigBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb53];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _116 = discriminant(_7);
        StorageDead(_7);
        goto -> bb44;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\klend\src\handlers\handler_update_global_config.rs:28:10: 28:18}>(move _24, move _30) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb47];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _21 = move _35;
        StorageDead(_35);
        _108 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _101 = const _;
        _41 = &(*_101);
        _40 = &(*_41);
        _39 = move _40 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_1;
        _102 = deref_copy (*_46);
        _45 = &(*_102);
        _38 = anchor_lang::prelude::Pubkey::find_program_address(move _39, move _45) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb52];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _114 = discriminant(_22);
        StorageDead(_22);
        goto -> bb43;
    }

    bb14: {
        StorageDead(_45);
        StorageDead(_39);
        StorageLive(_36);
        _36 = (_38.0: anchor_lang::prelude::Pubkey);
        StorageLive(_37);
        _37 = (_38.1: u8);
        StorageDead(_46);
        StorageDead(_41);
        StorageDead(_38);
        StorageLive(_47);
        _47 = _37;
        ((*_4).0: u8) = move _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_21;
        _51 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Key>::key(move _52) -> [return: bb15, unwind continue];
    }

    bb15: {
        _50 = &_51;
        StorageDead(_52);
        StorageLive(_53);
        _53 = &_36;
        _49 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _50, move _53) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _49) -> [0: bb22, otherwise: bb17];
    }

    bb17: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = ConstraintSeeds;
        _57 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _58) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_58);
        _56 = anchor_lang::error::Error::with_account_name::<&str>(move _57, const "global_config") -> [return: bb19, unwind: bb47];
    }

    bb19: {
        _105 = const true;
        StorageDead(_57);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_21;
        _60 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as anchor_lang::Key>::key(move _61) -> [return: bb20, unwind: bb51];
    }

    bb20: {
        StorageDead(_61);
        StorageLive(_62);
        _62 = _36;
        _59 = (move _60, move _62);
        StorageDead(_62);
        StorageDead(_60);
        _105 = const false;
        _55 = anchor_lang::error::Error::with_pubkeys(move _56, move _59) -> [return: bb21, unwind: bb51];
    }

    bb21: {
        StorageDead(_59);
        _105 = const false;
        StorageDead(_56);
        _0 = std::result::Result::<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _55);
        StorageDead(_55);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb42;
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        _48 = const ();
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_21;
        _66 = &(*_67);
        _65 = <anchor_lang::prelude::AccountLoader<'_, global_config::GlobalConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _66) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_66);
        _64 = ((*_65).6: bool);
        switchInt(move _64) -> [0: bb24, otherwise: bb27];
    }

    bb24: {
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = ConstraintMut;
        _70 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _71) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_71);
        _69 = anchor_lang::error::Error::with_account_name::<&str>(move _70, const "global_config") -> [return: bb26, unwind: bb47];
    }

    bb26: {
        StorageDead(_70);
        _0 = std::result::Result::<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _69);
        StorageDead(_69);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb42;
    }

    bb27: {
        StorageDead(_67);
        StorageDead(_65);
        _63 = const ();
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_21;
        _78 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::load(move _79) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_79);
        _77 = <std::result::Result<Ref<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _78) -> [return: bb29, unwind: bb47];
    }

    bb29: {
        _103 = const true;
        _104 = const true;
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_84);
        _84 = move ((_77 as Continue).0: std::cell::Ref<'_, state::global_config::GlobalConfig>);
        _76 = move _84;
        StorageDead(_84);
        _75 = &_76;
        _74 = <Ref<'_, global_config::GlobalConfig> as Deref>::deref(move _75) -> [return: bb33, unwind: bb46];
    }

    bb31: {
        StorageLive(_81);
        _81 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <std::result::Result<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _83) -> [return: bb32, unwind: bb49];
    }

    bb32: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_75);
        _112 = discriminant(_77);
        _103 = const false;
        _104 = const false;
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        goto -> bb41;
    }

    bb33: {
        StorageDead(_75);
        _73 = ((*_74).0: anchor_lang::prelude::Pubkey);
        drop(_76) -> [return: bb48, unwind: bb49];
    }

    bb34: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_73;
        StorageLive(_89);
        _89 = &_85;
        _87 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _88, move _89) -> [return: bb35, unwind continue];
    }

    bb35: {
        switchInt(move _87) -> [0: bb40, otherwise: bb36];
    }

    bb36: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ConstraintHasOne;
        _93 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _94) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_94);
        _92 = anchor_lang::error::Error::with_account_name::<&str>(move _93, const "global_config") -> [return: bb38, unwind: bb47];
    }

    bb38: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _73;
        StorageLive(_97);
        _97 = _85;
        _95 = (move _96, move _97);
        StorageDead(_97);
        StorageDead(_96);
        _91 = anchor_lang::error::Error::with_pubkeys(move _92, move _95) -> [return: bb39, unwind: bb47];
    }

    bb39: {
        StorageDead(_95);
        StorageDead(_92);
        _0 = std::result::Result::<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error>::Err(move _91);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_85);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_88);
        _72 = const ();
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_98);
        StorageLive(_99);
        _99 = move _6;
        StorageLive(_100);
        _100 = move _21;
        _98 = handlers::handler_update_global_config::UpdateGlobalConfig::<'_> { global_admin: move _99, global_config: move _100 };
        StorageDead(_100);
        StorageDead(_99);
        _0 = std::result::Result::<handlers::handler_update_global_config::UpdateGlobalConfig<'_>, anchor_lang::error::Error>::Ok(move _98);
        StorageDead(_98);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb45;
    }

    bb41: {
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_21);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_6);
        goto -> bb45;
    }

    bb45: {
        return;
    }

    bb46 (cleanup): {
        drop(_76) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48: {
        _110 = discriminant(_77);
        _103 = const false;
        _104 = const false;
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_6;
        _85 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _86) -> [return: bb34, unwind continue];
    }

    bb49 (cleanup): {
        _118 = discriminant(_77);
        goto -> bb47;
    }

    bb50 (cleanup): {
        drop(_56) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_105) -> [0: bb47, otherwise: bb50];
    }

    bb52 (cleanup): {
        _119 = discriminant(_22);
        goto -> bb47;
    }

    bb53 (cleanup): {
        _120 = discriminant(_7);
        goto -> bb47;
    }
}
