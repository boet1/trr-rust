digraph Mir_0_2601 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_price_usd::{closure#4}(_1: &amp;ReErased Closure(DefId(0:2601 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}), [i8, Binder(extern &quot;RustCall&quot; fn(()) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;, []), ([std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize], usize, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)])) -&gt; std::result::Result&lt;fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;<br align="left"/>let _2: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;];<br align="left"/>let _3: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;];<br align="left"/>let mut _4: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4_usize];<br align="left"/>let mut _5: std::ops::RangeTo&lt;usize&gt;;<br align="left"/>let mut _6: usize;<br align="left"/>let _7: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, LendingError&gt;, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;;<br align="left"/>let mut _9: std::result::Result&lt;utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, LendingError&gt;;<br align="left"/>let mut _10: std::option::Option&lt;utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;;<br align="left"/>let mut _11: &amp;ReErased mut std::iter::Map&lt;std::iter::Flatten&lt;std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;, Closure(DefId(0:2602 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased (utils::prices::types::Price&lt;u64&gt;, u64),)) -&gt; utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, []), ()])&gt;;<br align="left"/>let mut _12: std::iter::Map&lt;std::iter::Flatten&lt;std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;, Closure(DefId(0:2602 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased (utils::prices::types::Price&lt;u64&gt;, u64),)) -&gt; utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, []), ()])&gt;;<br align="left"/>let mut _13: std::iter::Flatten&lt;std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;;<br align="left"/>let mut _14: std::slice::Iter&lt;ReErased, std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;&gt;;<br align="left"/>let mut _15: &amp;ReErased [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;];<br align="left"/>let mut _16: Closure(DefId(0:2602 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased (utils::prices::types::Price&lt;u64&gt;, u64),)) -&gt; utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, []), ()]);<br align="left"/>let mut _17: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _18: Closure(DefId(0:2603 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}::{closure#1}), [i16, Binder(extern &quot;RustCall&quot; fn((utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;, utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)) -&gt; std::option::Option&lt;utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;&gt;, []), ()]);<br align="left"/>let mut _19: Closure(DefId(0:2604 ~ kamino_lending[6389]::utils::prices::scope::get_price_usd::{closure#4}::{closure#2}), [i32, Binder(extern &quot;RustCall&quot; fn(()) -&gt; LendingError, []), ()]);<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, LendingError&gt;;<br align="left"/>let _24: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>let mut _25: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _26: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;;<br align="left"/>debug price_chain_raw =&gt; ((*_1).0: [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4]);<br align="left"/>debug chain_len =&gt; ((*_1).1: usize);<br align="left"/>debug init_price =&gt; ((*_1).2: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;);<br align="left"/>debug price_chain =&gt; _2;<br align="left"/>debug base_price =&gt; _7;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>>;
    bb0__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = &amp;((*_1).0: [std::option::Option&lt;(utils::prices::types::Price&lt;u64&gt;, u64)&gt;; 4])<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = ((*_1).1: usize)<br/>_5 = RangeTo::&lt;usize&gt; { end: move _6 }<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_3 = &lt;[std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;; 4] as Index&lt;RangeTo&lt;usize&gt;&gt;&gt;::index(move _4, move _5)</td></tr></table>>];
    bb1__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>_2 = &amp;(*_3)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;(*_2)<br/></td></tr><tr><td align="left">_14 = core::slice::&lt;impl [std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;]&gt;::iter(move _15)</td></tr></table>>];
    bb2__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt; as Iterator&gt;::flatten(move _14)</td></tr></table>>];
    bb3__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_16)<br/>_16 = {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21}<br/></td></tr><tr><td align="left">_12 = &lt;Flatten&lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt; as Iterator&gt;::map::&lt;prices::types::Price&lt;uint_types::U256&gt;, {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21}&gt;(move _13, move _16)</td></tr></table>>];
    bb4__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_11 = &amp;mut _12<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageLive(_17)<br/>_17 = ((*_1).2: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)<br/>StorageLive(_18)<br/>_18 = {closure@programs\klend\src\utils\prices\scope.rs:124:35: 124:43}<br/></td></tr><tr><td align="left">_10 = &lt;std::iter::Map&lt;Flatten&lt;std::slice::Iter&lt;'_, std::option::Option&lt;(prices::types::Price&lt;u64&gt;, u64)&gt;&gt;&gt;, {closure@programs\klend\src\utils\prices\scope.rs:123:18: 123:21}&gt; as Iterator&gt;::try_fold::&lt;prices::types::Price&lt;uint_types::U256&gt;, {closure@programs\klend\src\utils\prices\scope.rs:124:35: 124:43}, std::option::Option&lt;prices::types::Price&lt;uint_types::U256&gt;&gt;&gt;(move _11, move _17, move _18)</td></tr></table>>];
    bb5__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_11)<br/>StorageLive(_19)<br/>_19 = {closure@programs\klend\src\utils\prices\scope.rs:137:25: 137:27}<br/></td></tr><tr><td align="left">_9 = std::option::Option::&lt;prices::types::Price&lt;uint_types::U256&gt;&gt;::ok_or_else::&lt;LendingError, {closure@programs\klend\src\utils\prices\scope.rs:137:25: 137:27}&gt;(move _10, move _19)</td></tr></table>>];
    bb6__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;prices::types::Price&lt;uint_types::U256&gt;, LendingError&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb7__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_20 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb8__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_8 as Continue).0: utils::prices::types::Price&lt;utils::fraction::uint_types::U256&gt;)<br/>_7 = _24<br/>StorageDead(_24)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _7<br/></td></tr><tr><td align="left">_25 = price_to_fraction::&lt;uint_types::U256&gt;(move _26)</td></tr></table>>];
    bb9__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, LendingError&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb11__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_0 = std::result::Result::&lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, anchor_lang::error::Error&gt;::Ok(move _25)<br/>StorageDead(_25)<br/>StorageDead(_7)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2601 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2601 -> bb1__0_2601 [label="return"];
    bb1__0_2601 -> bb2__0_2601 [label="return"];
    bb2__0_2601 -> bb3__0_2601 [label="return"];
    bb3__0_2601 -> bb4__0_2601 [label="return"];
    bb4__0_2601 -> bb5__0_2601 [label="return"];
    bb5__0_2601 -> bb6__0_2601 [label="return"];
    bb6__0_2601 -> bb7__0_2601 [label="return"];
    bb7__0_2601 -> bb8__0_2601 [label="0"];
    bb7__0_2601 -> bb10__0_2601 [label="1"];
    bb7__0_2601 -> bb9__0_2601 [label="otherwise"];
    bb8__0_2601 -> bb12__0_2601 [label="return"];
    bb10__0_2601 -> bb11__0_2601 [label="return"];
    bb11__0_2601 -> bb13__0_2601 [label=""];
    bb12__0_2601 -> bb13__0_2601 [label=""];
}
