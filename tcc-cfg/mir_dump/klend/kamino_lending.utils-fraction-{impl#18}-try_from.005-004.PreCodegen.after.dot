digraph Mir_0_2477 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn utils::fraction::&lt;impl TryFrom&lt;uint_types::U256&gt; for uint_types::U128&gt;::try_from(_1: utils::fraction::uint_types::U256) -&gt; std::result::Result&lt;utils::fraction::uint_types::U128, LendingError&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: u64;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: u64;<br align="left"/>let _10: usize;<br align="left"/>let mut _11: usize;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: LendingError;<br align="left"/>let mut _15: utils::fraction::uint_types::U128;<br align="left"/>let mut _16: [u64; 2_usize];<br align="left"/>let mut _17: u64;<br align="left"/>let _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: u64;<br align="left"/>let _22: usize;<br align="left"/>let mut _23: usize;<br align="left"/>let mut _24: bool;<br align="left"/>debug value =&gt; _1;<br align="left"/>>;
    bb0__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = const 2_usize<br/>_6 = Len((_1.0: [u64; 4]))<br/>_7 = Lt(_5, _6)<br/></td></tr><tr><td align="left">assert(move _7, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _6, _5)</td></tr></table>>];
    bb1__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = (_1.0: [u64; 4])[_5]<br/>_3 = Ne(move _4, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb2__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = const 3_usize<br/>_11 = Len((_1.0: [u64; 4]))<br/>_12 = Lt(_10, _11)<br/></td></tr><tr><td align="left">assert(move _12, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _11, _10)</td></tr></table>>];
    bb4__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = (_1.0: [u64; 4])[_10]<br/>_8 = Ne(move _9, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb5__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_14)<br/>_14 = LendingError::IntegerOverflow<br/>_0 = std::result::Result::&lt;uint_types::U128, LendingError&gt;::Err(move _14)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>_2 = const ()<br/>StorageDead(_8)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = const 0_usize<br/>_19 = Len((_1.0: [u64; 4]))<br/>_20 = Lt(_18, _19)<br/></td></tr><tr><td align="left">assert(move _20, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _19, _18)</td></tr></table>>];
    bb7__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = (_1.0: [u64; 4])[_18]<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = const 1_usize<br/>_23 = Len((_1.0: [u64; 4]))<br/>_24 = Lt(_22, _23)<br/></td></tr><tr><td align="left">assert(move _24, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _23, _22)</td></tr></table>>];
    bb8__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_21 = (_1.0: [u64; 4])[_22]<br/>_16 = [move _17, move _21]<br/>StorageDead(_21)<br/>StorageDead(_17)<br/>_15 = uint_types::U128(move _16)<br/>StorageDead(_16)<br/>_0 = std::result::Result::&lt;uint_types::U128, LendingError&gt;::Ok(move _15)<br/>StorageDead(_15)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2477 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2477 -> bb1__0_2477 [label="success"];
    bb1__0_2477 -> bb3__0_2477 [label="0"];
    bb1__0_2477 -> bb2__0_2477 [label="otherwise"];
    bb2__0_2477 -> bb5__0_2477 [label=""];
    bb3__0_2477 -> bb4__0_2477 [label="success"];
    bb4__0_2477 -> bb6__0_2477 [label="0"];
    bb4__0_2477 -> bb5__0_2477 [label="otherwise"];
    bb5__0_2477 -> bb9__0_2477 [label=""];
    bb6__0_2477 -> bb7__0_2477 [label="success"];
    bb7__0_2477 -> bb8__0_2477 [label="success"];
    bb8__0_2477 -> bb9__0_2477 [label=""];
}
