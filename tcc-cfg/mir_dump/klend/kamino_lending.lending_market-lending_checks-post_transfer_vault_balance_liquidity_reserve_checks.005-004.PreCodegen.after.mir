// MIR for `post_transfer_vault_balance_liquidity_reserve_checks` after PreCodegen

fn post_transfer_vault_balance_liquidity_reserve_checks(_1: u64, _2: u64, _3: u64, _4: u64, _5: state::types::LendingAction) -> std::result::Result<(), anchor_lang::error::Error> {
    debug final_reserve_vault_balance => _1;
    debug final_reserve_available_liquidity => _2;
    debug initial_reserve_vault_balance => _3;
    debug initial_reserve_available_liquidity => _4;
    debug action_type => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: u64;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: (u64, bool);
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: (u64, bool);
    let _14: ();
    let mut _15: bool;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: !;
    let mut _19: anchor_lang::error::Error;
    let mut _20: anchor_lang::error::Error;
    let mut _21: anchor_lang::error::AnchorError;
    let mut _22: std::string::String;
    let mut _23: &LendingError;
    let _24: LendingError;
    let mut _25: u32;
    let mut _26: LendingError;
    let mut _27: std::string::String;
    let mut _28: &LendingError;
    let _29: LendingError;
    let mut _30: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _31: anchor_lang::error::ErrorOrigin;
    let mut _32: anchor_lang::error::Source;
    let mut _33: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _34: (u64, u64);
    let mut _35: u64;
    let mut _36: u64;
    let _37: ();
    let mut _38: isize;
    let mut _41: u64;
    let mut _42: u64;
    let mut _43: (u64, bool);
    let _44: ();
    let mut _45: bool;
    let mut _46: u64;
    let mut _47: u64;
    let mut _48: !;
    let mut _49: anchor_lang::error::Error;
    let mut _50: anchor_lang::error::Error;
    let mut _51: anchor_lang::error::AnchorError;
    let mut _52: std::string::String;
    let mut _53: &LendingError;
    let _54: LendingError;
    let mut _55: u32;
    let mut _56: LendingError;
    let mut _57: std::string::String;
    let mut _58: &LendingError;
    let _59: LendingError;
    let mut _60: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _61: anchor_lang::error::ErrorOrigin;
    let mut _62: anchor_lang::error::Source;
    let mut _63: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _64: (u64, u64);
    let mut _65: u64;
    let mut _66: u64;
    let mut _68: u64;
    let mut _69: u64;
    let mut _70: (u64, bool);
    let _71: ();
    let mut _72: bool;
    let mut _73: u64;
    let mut _74: u64;
    let mut _75: !;
    let mut _76: anchor_lang::error::Error;
    let mut _77: anchor_lang::error::Error;
    let mut _78: anchor_lang::error::AnchorError;
    let mut _79: std::string::String;
    let mut _80: &LendingError;
    let _81: LendingError;
    let mut _82: u32;
    let mut _83: LendingError;
    let mut _84: std::string::String;
    let mut _85: &LendingError;
    let _86: LendingError;
    let mut _87: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _88: anchor_lang::error::ErrorOrigin;
    let mut _89: anchor_lang::error::Source;
    let mut _90: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _91: (u64, u64);
    let mut _92: u64;
    let mut _93: u64;
    let mut _96: u64;
    let mut _97: u64;
    let mut _98: (u64, bool);
    let _99: ();
    let mut _100: bool;
    let mut _101: u64;
    let mut _102: u64;
    let mut _103: !;
    let mut _104: anchor_lang::error::Error;
    let mut _105: anchor_lang::error::Error;
    let mut _106: anchor_lang::error::AnchorError;
    let mut _107: std::string::String;
    let mut _108: &LendingError;
    let _109: LendingError;
    let mut _110: u32;
    let mut _111: LendingError;
    let mut _112: std::string::String;
    let mut _113: &LendingError;
    let _114: LendingError;
    let mut _115: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _116: anchor_lang::error::ErrorOrigin;
    let mut _117: anchor_lang::error::Source;
    let mut _118: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _119: (u64, u64);
    let mut _120: u64;
    let mut _121: u64;
    let mut _123: u64;
    let mut _124: u64;
    let mut _125: (u64, bool);
    let _126: ();
    let mut _127: bool;
    let mut _128: u64;
    let mut _129: u64;
    let mut _130: !;
    let mut _131: anchor_lang::error::Error;
    let mut _132: anchor_lang::error::Error;
    let mut _133: anchor_lang::error::AnchorError;
    let mut _134: std::string::String;
    let mut _135: &LendingError;
    let _136: LendingError;
    let mut _137: u32;
    let mut _138: LendingError;
    let mut _139: std::string::String;
    let mut _140: &LendingError;
    let _141: LendingError;
    let mut _142: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _143: anchor_lang::error::ErrorOrigin;
    let mut _144: anchor_lang::error::Source;
    let mut _145: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _146: (u64, u64);
    let mut _147: u64;
    let mut _148: u64;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, u64>;
    let mut _152: std::result::Result<u64, LendingError>;
    let mut _153: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _154: i64;
    let mut _155: i64;
    let mut _156: u64;
    let mut _157: i64;
    let mut _158: (i64, bool);
    let mut _159: {closure@programs\klend\src\lending_market\lending_checks.rs:412:30: 412:33};
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, LendingError>;
    let _165: ();
    let mut _166: bool;
    let mut _167: u64;
    let mut _168: u64;
    let mut _169: !;
    let mut _170: anchor_lang::error::Error;
    let mut _171: anchor_lang::error::Error;
    let mut _172: anchor_lang::error::AnchorError;
    let mut _173: std::string::String;
    let mut _174: &LendingError;
    let _175: LendingError;
    let mut _176: u32;
    let mut _177: LendingError;
    let mut _178: std::string::String;
    let mut _179: &LendingError;
    let _180: LendingError;
    let mut _181: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _182: anchor_lang::error::ErrorOrigin;
    let mut _183: anchor_lang::error::Source;
    let mut _184: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _185: (u64, u64);
    let mut _186: u64;
    let mut _187: u64;
    let mut _189: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, u64>;
    let mut _190: std::result::Result<u64, LendingError>;
    let mut _191: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _192: i64;
    let mut _193: i64;
    let mut _194: u64;
    let mut _195: i64;
    let mut _196: (i64, bool);
    let mut _197: {closure@programs\klend\src\lending_market\lending_checks.rs:421:30: 421:33};
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, LendingError>;
    let _203: ();
    let mut _204: bool;
    let mut _205: u64;
    let mut _206: u64;
    let mut _207: !;
    let mut _208: anchor_lang::error::Error;
    let mut _209: anchor_lang::error::Error;
    let mut _210: anchor_lang::error::AnchorError;
    let mut _211: std::string::String;
    let mut _212: &LendingError;
    let _213: LendingError;
    let mut _214: u32;
    let mut _215: LendingError;
    let mut _216: std::string::String;
    let mut _217: &LendingError;
    let _218: LendingError;
    let mut _219: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _220: anchor_lang::error::ErrorOrigin;
    let mut _221: anchor_lang::error::Source;
    let mut _222: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _223: (u64, u64);
    let mut _224: u64;
    let mut _225: u64;
    let mut _226: ();
    scope 1 {
        debug pre_transfer_reserve_diff => _6;
        let _10: u64;
        scope 2 {
            debug post_transfer_reserve_diff => _10;
            let _39: u64;
            let _94: u64;
            let _149: i64;
            let mut _227: &LendingError;
            let mut _228: &LendingError;
            scope 3 {
                debug amount_transferred => _39;
                let _40: u64;
                scope 4 {
                    debug expected_reserve_vault_balance => _40;
                    let _67: u64;
                    let mut _237: &LendingError;
                    let mut _238: &LendingError;
                    scope 5 {
                        debug expected_reserve_available_liquidity => _67;
                        let mut _239: &LendingError;
                        let mut _240: &LendingError;
                    }
                }
            }
            scope 6 {
                debug amount_transferred => _94;
                let _95: u64;
                scope 7 {
                    debug expected_reserve_vault_balance => _95;
                    let _122: u64;
                    let mut _233: &LendingError;
                    let mut _234: &LendingError;
                    scope 8 {
                        debug expected_reserve_available_liquidity => _122;
                        let mut _235: &LendingError;
                        let mut _236: &LendingError;
                    }
                }
            }
            scope 9 {
                debug amount_transferred => _149;
                let _150: u64;
                let _161: std::result::Result<std::convert::Infallible, LendingError>;
                let _164: u64;
                scope 10 {
                    debug expected_reserve_vault_balance => _150;
                    let _188: u64;
                    let _199: std::result::Result<std::convert::Infallible, LendingError>;
                    let _202: u64;
                    let mut _229: &LendingError;
                    let mut _230: &LendingError;
                    scope 15 {
                        debug expected_reserve_available_liquidity => _188;
                        let mut _231: &LendingError;
                        let mut _232: &LendingError;
                    }
                    scope 16 {
                        debug residual => _199;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug val => _202;
                        scope 19 {
                        }
                    }
                }
                scope 11 {
                    debug residual => _161;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug val => _164;
                    scope 14 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = _3;
        StorageLive(_8);
        _8 = _4;
        _9 = CheckedSub(_7, _8);
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, move _8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = move (_9.0: u64);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        StorageLive(_12);
        _12 = _2;
        _13 = CheckedSub(_11, _12);
        assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, move _12) -> [success: bb2, unwind continue];
    }

    bb2: {
        _10 = move (_13.0: u64);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _6;
        StorageLive(_17);
        _17 = _10;
        _15 = Ne(move _16, move _17);
        switchInt(move _15) -> [0: bb9, otherwise: bb3];
    }

    bb3: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _228 = const _;
        _23 = &(*_228);
        _22 = LendingError::name(move _23) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = LendingError::ReserveTokenBalanceMismatch;
        _25 = <LendingError as Into<u32>>::into(move _26) -> [return: bb5, unwind: bb88];
    }

    bb5: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _227 = const _;
        _28 = &(*_227);
        _27 = <LendingError as ToString>::to_string(move _28) -> [return: bb6, unwind: bb88];
    }

    bb6: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 370_u32 };
        _31 = anchor_lang::error::ErrorOrigin::Source(move _32);
        StorageDead(_32);
        _30 = std::option::Option::<ErrorOrigin>::Some(move _31);
        StorageDead(_31);
        StorageLive(_33);
        _33 = std::option::Option::<ComparedValues>::None;
        _21 = anchor_lang::error::AnchorError { error_name: move _22, error_code_number: move _25, error_msg: move _27, error_origin: move _30, compared_values: move _33 };
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_22);
        _20 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _21) -> [return: bb7, unwind: bb89];
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _6;
        StorageLive(_36);
        _36 = _10;
        _34 = (move _35, move _36);
        StorageDead(_36);
        StorageDead(_35);
        _19 = anchor_lang::error::Error::with_values::<u64, u64>(move _20, move _34) -> [return: bb8, unwind: bb89];
    }

    bb8: {
        StorageDead(_34);
        StorageDead(_20);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _19);
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb80;
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_37);
        _38 = discriminant(_5);
        switchInt(move _38) -> [0: bb12, 1: bb29, 2: bb10, otherwise: bb11];
    }

    bb10: {
        StorageLive(_149);
        _149 = ((_5 as SubstractiveSigned).0: i64);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _3;
        _155 = move _156 as i64 (IntToInt);
        StorageDead(_156);
        StorageLive(_157);
        _157 = _149;
        _158 = CheckedSub(_155, _157);
        assert(!move (_158.1: bool), "attempt to compute `{} - {}`, which would overflow", move _155, move _157) -> [success: bb46, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_39);
        _39 = ((_5 as Additive).0: u64);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _3;
        StorageLive(_42);
        _42 = _39;
        _43 = CheckedAdd(_41, _42);
        assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _41, move _42) -> [success: bb13, unwind continue];
    }

    bb13: {
        _40 = move (_43.0: u64);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _40;
        StorageLive(_47);
        _47 = _1;
        _45 = Ne(move _46, move _47);
        switchInt(move _45) -> [0: bb20, otherwise: bb14];
    }

    bb14: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _238 = const _;
        _53 = &(*_238);
        _52 = LendingError::name(move _53) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = LendingError::ReserveVaultBalanceMismatch;
        _55 = <LendingError as Into<u32>>::into(move _56) -> [return: bb16, unwind: bb87];
    }

    bb16: {
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        _237 = const _;
        _58 = &(*_237);
        _57 = <LendingError as ToString>::to_string(move _58) -> [return: bb17, unwind: bb87];
    }

    bb17: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 379_u32 };
        _61 = anchor_lang::error::ErrorOrigin::Source(move _62);
        StorageDead(_62);
        _60 = std::option::Option::<ErrorOrigin>::Some(move _61);
        StorageDead(_61);
        StorageLive(_63);
        _63 = std::option::Option::<ComparedValues>::None;
        _51 = anchor_lang::error::AnchorError { error_name: move _52, error_code_number: move _55, error_msg: move _57, error_origin: move _60, compared_values: move _63 };
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        _50 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _51) -> [return: bb18, unwind: bb89];
    }

    bb18: {
        StorageDead(_51);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _40;
        StorageLive(_66);
        _66 = _1;
        _64 = (move _65, move _66);
        StorageDead(_66);
        StorageDead(_65);
        _49 = anchor_lang::error::Error::with_values::<u64, u64>(move _50, move _64) -> [return: bb19, unwind: bb89];
    }

    bb19: {
        StorageDead(_64);
        StorageDead(_50);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _49);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb78;
    }

    bb20: {
        StorageDead(_47);
        StorageDead(_46);
        _44 = const ();
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _4;
        StorageLive(_69);
        _69 = _39;
        _70 = CheckedAdd(_68, _69);
        assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", move _68, move _69) -> [success: bb21, unwind continue];
    }

    bb21: {
        _67 = move (_70.0: u64);
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _67;
        StorageLive(_74);
        _74 = _2;
        _72 = Ne(move _73, move _74);
        switchInt(move _72) -> [0: bb28, otherwise: bb22];
    }

    bb22: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _240 = const _;
        _80 = &(*_240);
        _79 = LendingError::name(move _80) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_80);
        StorageLive(_82);
        StorageLive(_83);
        _83 = LendingError::ReserveAccountingMismatch;
        _82 = <LendingError as Into<u32>>::into(move _83) -> [return: bb24, unwind: bb86];
    }

    bb24: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        _239 = const _;
        _85 = &(*_239);
        _84 = <LendingError as ToString>::to_string(move _85) -> [return: bb25, unwind: bb86];
    }

    bb25: {
        StorageDead(_85);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 387_u32 };
        _88 = anchor_lang::error::ErrorOrigin::Source(move _89);
        StorageDead(_89);
        _87 = std::option::Option::<ErrorOrigin>::Some(move _88);
        StorageDead(_88);
        StorageLive(_90);
        _90 = std::option::Option::<ComparedValues>::None;
        _78 = anchor_lang::error::AnchorError { error_name: move _79, error_code_number: move _82, error_msg: move _84, error_origin: move _87, compared_values: move _90 };
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_79);
        _77 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _78) -> [return: bb26, unwind: bb89];
    }

    bb26: {
        StorageDead(_78);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _67;
        StorageLive(_93);
        _93 = _2;
        _91 = (move _92, move _93);
        StorageDead(_93);
        StorageDead(_92);
        _76 = anchor_lang::error::Error::with_values::<u64, u64>(move _77, move _91) -> [return: bb27, unwind: bb89];
    }

    bb27: {
        StorageDead(_91);
        StorageDead(_77);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _76);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        goto -> bb78;
    }

    bb28: {
        StorageDead(_74);
        StorageDead(_73);
        _71 = const ();
        StorageDead(_72);
        StorageDead(_71);
        _37 = const ();
        StorageDead(_67);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb74;
    }

    bb29: {
        StorageLive(_94);
        _94 = ((_5 as Subtractive).0: u64);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _3;
        StorageLive(_97);
        _97 = _94;
        _98 = CheckedSub(_96, _97);
        assert(!move (_98.1: bool), "attempt to compute `{} - {}`, which would overflow", move _96, move _97) -> [success: bb30, unwind continue];
    }

    bb30: {
        _95 = move (_98.0: u64);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _95;
        StorageLive(_102);
        _102 = _1;
        _100 = Ne(move _101, move _102);
        switchInt(move _100) -> [0: bb37, otherwise: bb31];
    }

    bb31: {
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _234 = const _;
        _108 = &(*_234);
        _107 = LendingError::name(move _108) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        _111 = LendingError::ReserveVaultBalanceMismatch;
        _110 = <LendingError as Into<u32>>::into(move _111) -> [return: bb33, unwind: bb85];
    }

    bb33: {
        StorageDead(_111);
        StorageLive(_112);
        StorageLive(_113);
        _233 = const _;
        _113 = &(*_233);
        _112 = <LendingError as ToString>::to_string(move _113) -> [return: bb34, unwind: bb85];
    }

    bb34: {
        StorageDead(_113);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 395_u32 };
        _116 = anchor_lang::error::ErrorOrigin::Source(move _117);
        StorageDead(_117);
        _115 = std::option::Option::<ErrorOrigin>::Some(move _116);
        StorageDead(_116);
        StorageLive(_118);
        _118 = std::option::Option::<ComparedValues>::None;
        _106 = anchor_lang::error::AnchorError { error_name: move _107, error_code_number: move _110, error_msg: move _112, error_origin: move _115, compared_values: move _118 };
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_107);
        _105 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _106) -> [return: bb35, unwind: bb89];
    }

    bb35: {
        StorageDead(_106);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _95;
        StorageLive(_121);
        _121 = _1;
        _119 = (move _120, move _121);
        StorageDead(_121);
        StorageDead(_120);
        _104 = anchor_lang::error::Error::with_values::<u64, u64>(move _105, move _119) -> [return: bb36, unwind: bb89];
    }

    bb36: {
        StorageDead(_119);
        StorageDead(_105);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _104);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb77;
    }

    bb37: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = const ();
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_122);
        StorageLive(_123);
        _123 = _4;
        StorageLive(_124);
        _124 = _94;
        _125 = CheckedSub(_123, _124);
        assert(!move (_125.1: bool), "attempt to compute `{} - {}`, which would overflow", move _123, move _124) -> [success: bb38, unwind continue];
    }

    bb38: {
        _122 = move (_125.0: u64);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _122;
        StorageLive(_129);
        _129 = _2;
        _127 = Ne(move _128, move _129);
        switchInt(move _127) -> [0: bb45, otherwise: bb39];
    }

    bb39: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _236 = const _;
        _135 = &(*_236);
        _134 = LendingError::name(move _135) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_135);
        StorageLive(_137);
        StorageLive(_138);
        _138 = LendingError::ReserveAccountingMismatch;
        _137 = <LendingError as Into<u32>>::into(move _138) -> [return: bb41, unwind: bb84];
    }

    bb41: {
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        _235 = const _;
        _140 = &(*_235);
        _139 = <LendingError as ToString>::to_string(move _140) -> [return: bb42, unwind: bb84];
    }

    bb42: {
        StorageDead(_140);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 403_u32 };
        _143 = anchor_lang::error::ErrorOrigin::Source(move _144);
        StorageDead(_144);
        _142 = std::option::Option::<ErrorOrigin>::Some(move _143);
        StorageDead(_143);
        StorageLive(_145);
        _145 = std::option::Option::<ComparedValues>::None;
        _133 = anchor_lang::error::AnchorError { error_name: move _134, error_code_number: move _137, error_msg: move _139, error_origin: move _142, compared_values: move _145 };
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_134);
        _132 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _133) -> [return: bb43, unwind: bb89];
    }

    bb43: {
        StorageDead(_133);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _122;
        StorageLive(_148);
        _148 = _2;
        _146 = (move _147, move _148);
        StorageDead(_148);
        StorageDead(_147);
        _131 = anchor_lang::error::Error::with_values::<u64, u64>(move _132, move _146) -> [return: bb44, unwind: bb89];
    }

    bb44: {
        StorageDead(_146);
        StorageDead(_132);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _131);
        StorageDead(_131);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        goto -> bb77;
    }

    bb45: {
        StorageDead(_129);
        StorageDead(_128);
        _126 = const ();
        StorageDead(_127);
        StorageDead(_126);
        _37 = const ();
        StorageDead(_122);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb74;
    }

    bb46: {
        _154 = move (_158.0: i64);
        StorageDead(_157);
        StorageDead(_155);
        _153 = <u64 as TryFrom<i64>>::try_from(move _154) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_154);
        StorageLive(_159);
        _159 = {closure@programs\klend\src\lending_market\lending_checks.rs:412:30: 412:33};
        _152 = std::result::Result::<u64, TryFromIntError>::map_err::<LendingError, {closure@programs\klend\src\lending_market\lending_checks.rs:412:30: 412:33}>(move _153, move _159) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_159);
        StorageDead(_153);
        _151 = <std::result::Result<u64, LendingError> as Try>::branch(move _152) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_152);
        _160 = discriminant(_151);
        switchInt(move _160) -> [0: bb50, 1: bb51, otherwise: bb11];
    }

    bb50: {
        StorageLive(_164);
        _164 = ((_151 as Continue).0: u64);
        _150 = _164;
        StorageDead(_164);
        StorageDead(_151);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = _150;
        StorageLive(_168);
        _168 = _1;
        _166 = Ne(move _167, move _168);
        switchInt(move _166) -> [0: bb54, otherwise: bb53];
    }

    bb51: {
        StorageLive(_161);
        _161 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_163);
        _163 = _161;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _163) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_151);
        goto -> bb76;
    }

    bb53: {
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _230 = const _;
        _174 = &(*_230);
        _173 = LendingError::name(move _174) -> [return: bb55, unwind continue];
    }

    bb54: {
        StorageDead(_168);
        StorageDead(_167);
        _165 = const ();
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = _4;
        _193 = move _194 as i64 (IntToInt);
        StorageDead(_194);
        StorageLive(_195);
        _195 = _149;
        _196 = CheckedSub(_193, _195);
        assert(!move (_196.1: bool), "attempt to compute `{} - {}`, which would overflow", move _193, move _195) -> [success: bb60, unwind continue];
    }

    bb55: {
        StorageDead(_174);
        StorageLive(_176);
        StorageLive(_177);
        _177 = LendingError::ReserveVaultBalanceMismatch;
        _176 = <LendingError as Into<u32>>::into(move _177) -> [return: bb56, unwind: bb83];
    }

    bb56: {
        StorageDead(_177);
        StorageLive(_178);
        StorageLive(_179);
        _229 = const _;
        _179 = &(*_229);
        _178 = <LendingError as ToString>::to_string(move _179) -> [return: bb57, unwind: bb83];
    }

    bb57: {
        StorageDead(_179);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 413_u32 };
        _182 = anchor_lang::error::ErrorOrigin::Source(move _183);
        StorageDead(_183);
        _181 = std::option::Option::<ErrorOrigin>::Some(move _182);
        StorageDead(_182);
        StorageLive(_184);
        _184 = std::option::Option::<ComparedValues>::None;
        _172 = anchor_lang::error::AnchorError { error_name: move _173, error_code_number: move _176, error_msg: move _178, error_origin: move _181, compared_values: move _184 };
        StorageDead(_184);
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_173);
        _171 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _172) -> [return: bb58, unwind: bb89];
    }

    bb58: {
        StorageDead(_172);
        StorageLive(_185);
        StorageLive(_186);
        _186 = _150;
        StorageLive(_187);
        _187 = _1;
        _185 = (move _186, move _187);
        StorageDead(_187);
        StorageDead(_186);
        _170 = anchor_lang::error::Error::with_values::<u64, u64>(move _171, move _185) -> [return: bb59, unwind: bb89];
    }

    bb59: {
        StorageDead(_185);
        StorageDead(_171);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _170);
        StorageDead(_170);
        StorageDead(_166);
        StorageDead(_165);
        goto -> bb76;
    }

    bb60: {
        _192 = move (_196.0: i64);
        StorageDead(_195);
        StorageDead(_193);
        _191 = <u64 as TryFrom<i64>>::try_from(move _192) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_192);
        StorageLive(_197);
        _197 = {closure@programs\klend\src\lending_market\lending_checks.rs:421:30: 421:33};
        _190 = std::result::Result::<u64, TryFromIntError>::map_err::<LendingError, {closure@programs\klend\src\lending_market\lending_checks.rs:421:30: 421:33}>(move _191, move _197) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_197);
        StorageDead(_191);
        _189 = <std::result::Result<u64, LendingError> as Try>::branch(move _190) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_190);
        _198 = discriminant(_189);
        switchInt(move _198) -> [0: bb64, 1: bb65, otherwise: bb11];
    }

    bb64: {
        StorageLive(_202);
        _202 = ((_189 as Continue).0: u64);
        _188 = _202;
        StorageDead(_202);
        StorageDead(_189);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _188;
        StorageLive(_206);
        _206 = _2;
        _204 = Ne(move _205, move _206);
        switchInt(move _204) -> [0: bb68, otherwise: bb67];
    }

    bb65: {
        StorageLive(_199);
        _199 = ((_189 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_201);
        _201 = _199;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _201) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_189);
        goto -> bb75;
    }

    bb67: {
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _232 = const _;
        _212 = &(*_232);
        _211 = LendingError::name(move _212) -> [return: bb69, unwind continue];
    }

    bb68: {
        StorageDead(_206);
        StorageDead(_205);
        _203 = const ();
        StorageDead(_204);
        StorageDead(_203);
        _37 = const ();
        StorageDead(_188);
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb74;
    }

    bb69: {
        StorageDead(_212);
        StorageLive(_214);
        StorageLive(_215);
        _215 = LendingError::ReserveAccountingMismatch;
        _214 = <LendingError as Into<u32>>::into(move _215) -> [return: bb70, unwind: bb82];
    }

    bb70: {
        StorageDead(_215);
        StorageLive(_216);
        StorageLive(_217);
        _231 = const _;
        _217 = &(*_231);
        _216 = <LendingError as ToString>::to_string(move _217) -> [return: bb71, unwind: bb82];
    }

    bb71: {
        StorageDead(_217);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\lending_market\\lending_checks.rs", line: const 422_u32 };
        _220 = anchor_lang::error::ErrorOrigin::Source(move _221);
        StorageDead(_221);
        _219 = std::option::Option::<ErrorOrigin>::Some(move _220);
        StorageDead(_220);
        StorageLive(_222);
        _222 = std::option::Option::<ComparedValues>::None;
        _210 = anchor_lang::error::AnchorError { error_name: move _211, error_code_number: move _214, error_msg: move _216, error_origin: move _219, compared_values: move _222 };
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_211);
        _209 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _210) -> [return: bb72, unwind: bb89];
    }

    bb72: {
        StorageDead(_210);
        StorageLive(_223);
        StorageLive(_224);
        _224 = _188;
        StorageLive(_225);
        _225 = _2;
        _223 = (move _224, move _225);
        StorageDead(_225);
        StorageDead(_224);
        _208 = anchor_lang::error::Error::with_values::<u64, u64>(move _209, move _223) -> [return: bb73, unwind: bb89];
    }

    bb73: {
        StorageDead(_223);
        StorageDead(_209);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _208);
        StorageDead(_208);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb75;
    }

    bb74: {
        StorageDead(_37);
        StorageLive(_226);
        _226 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _226);
        StorageDead(_226);
        StorageDead(_10);
        StorageDead(_6);
        goto -> bb81;
    }

    bb75: {
        StorageDead(_188);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb79;
    }

    bb77: {
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb79;
    }

    bb78: {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_37);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_10);
        StorageDead(_6);
        goto -> bb81;
    }

    bb81: {
        return;
    }

    bb82 (cleanup): {
        drop(_211) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_173) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_134) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_107) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_79) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_52) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_22) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        resume;
    }
}
