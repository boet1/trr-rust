// MIR for `handlers::handler_update_global_config::process` before PreCodegen

fn handlers::handler_update_global_config::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_global_config::UpdateGlobalConfig<'_>>, _2: global_config::UpdateGlobalConfigMode, _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug mode => _2;
    debug value => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &mut std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _5: std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::global_config::GlobalConfig>>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::global_config::GlobalConfig>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 2];
    let _28: &[core::fmt::rt::Argument<'_>; 2];
    let _29: [core::fmt::rt::Argument<'_>; 2];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &state::global_config::UpdateGlobalConfigMode;
    let _32: &state::global_config::UpdateGlobalConfigMode;
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &&&[u8];
    let _35: &&&[u8];
    let _36: &&[u8];
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _39: std::result::Result<(), anchor_lang::error::Error>;
    let mut _40: &mut state::global_config::GlobalConfig;
    let mut _41: &mut state::global_config::GlobalConfig;
    let mut _42: &mut std::cell::RefMut<'_, state::global_config::GlobalConfig>;
    let mut _43: state::global_config::UpdateGlobalConfigMode;
    let mut _44: &[u8];
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _50: ();
    let mut _52: &mut handlers::handler_update_global_config::UpdateGlobalConfig<'_>;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    scope 1 {
        debug global_config => _4;
        let _20: std::string::String;
        let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _49: ();
        let mut _51: &[&str; 2];
        scope 6 {
            debug res => _20;
        }
        scope 7 {
            debug residual => _46;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _49;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _52 = deref_copy (_1.1: &mut handlers::handler_update_global_config::UpdateGlobalConfig<'_>);
        _8 = &((*_52).1: anchor_lang::prelude::AccountLoader<'_, state::global_config::GlobalConfig>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, global_config::GlobalConfig>::load_mut(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<RefMut<'_, global_config::GlobalConfig>, anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_6 as Continue).0: std::cell::RefMut<'_, state::global_config::GlobalConfig>);
        _5 = move _13;
        StorageDead(_13);
        _4 = &mut _5;
        _53 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _51 = const _;
        _24 = &(*_51);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_2;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_debug::<global_config::UpdateGlobalConfigMode>(move _31) -> [return: bb7, unwind: bb24];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb27];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _59 = discriminant(_6);
        StorageDead(_6);
        goto -> bb21;
    }

    bb7: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_3;
        _35 = &_36;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_debug::<&&[u8]>(move _34) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        StorageDead(_34);
        _29 = [move _30, move _33];
        StorageDead(_33);
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <std::string::String as Deref>::deref(move _17) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        StorageDead(_15);
        drop(_19) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_4);
        _41 = <RefMut<'_, global_config::GlobalConfig> as DerefMut>::deref_mut(move _42) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _40 = &mut (*_41);
        StorageDead(_42);
        StorageLive(_43);
        _43 = _2;
        StorageLive(_44);
        _44 = &(*_3);
        _39 = global_config::GlobalConfig::update_value(move _40, move _43, move _44) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        _38 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _39) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        StorageDead(_39);
        _45 = discriminant(_38);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_49);
        _49 = ((_38 as Continue).0: ());
        _37 = _49;
        StorageDead(_49);
        _55 = discriminant(_38);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_50);
        _50 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _50);
        StorageDead(_50);
        drop(_5) -> [return: bb20, unwind: bb25];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _57 = discriminant(_38);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        drop(_5) -> [return: bb21, unwind: bb25];
    }

    bb20: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_19) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_5) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        _61 = discriminant(_38);
        goto -> bb24;
    }

    bb27 (cleanup): {
        _62 = discriminant(_6);
        goto -> bb25;
    }
}
